{
  "slug": "jacobi-iteration-method",
  "name": "Jacobi Iteration Method",
  "categories": [
    "numericalanalysis"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "arithmetic_analysis\\jacobi_iteration_method.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/arithmetic_analysis\\jacobi_iteration_method.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nJacobi Iteration Method - https://en.wikipedia.org/wiki/Jacobi_method\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\n\r\n<span class=\"hljs-comment\"># Method to find solution of system of linear equations</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">jacobi_iteration_method</span>(<span class=\"hljs-params\">\r\n    coefficient_matrix: np.ndarray,\r\n    constant_matrix: np.ndarray,\r\n    init_val: <span class=\"hljs-built_in\">list</span>,\r\n    iterations: <span class=\"hljs-built_in\">int</span>,\r\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Jacobi Iteration Method:\r\n    An iterative algorithm to determine the solutions of strictly diagonally dominant\r\n    system of linear equations\r\n\r\n    4x1 +  x2 +  x3 =  2\r\n     x1 + 5x2 + 2x3 = -6\r\n     x1 + 2x2 + 4x3 = -4\r\n\r\n    x_init = [0.5, -0.5 , -0.5]\r\n\r\n    Examples:\r\n\r\n    &gt;&gt;&gt; coefficient = np.array([[4, 1, 1], [1, 5, 2], [1, 2, 4]])\r\n    &gt;&gt;&gt; constant = np.array([[2], [-6], [-4]])\r\n    &gt;&gt;&gt; init_val = [0.5, -0.5, -0.5]\r\n    &gt;&gt;&gt; iterations = 3\r\n    &gt;&gt;&gt; jacobi_iteration_method(coefficient, constant, init_val, iterations)\r\n    [0.909375, -1.14375, -0.7484375]\r\n\r\n\r\n    &gt;&gt;&gt; coefficient = np.array([[4, 1, 1], [1, 5, 2]])\r\n    &gt;&gt;&gt; constant = np.array([[2], [-6], [-4]])\r\n    &gt;&gt;&gt; init_val = [0.5, -0.5, -0.5]\r\n    &gt;&gt;&gt; iterations = 3\r\n    &gt;&gt;&gt; jacobi_iteration_method(coefficient, constant, init_val, iterations)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Coefficient matrix dimensions must be nxn but received 2x3\r\n\r\n    &gt;&gt;&gt; coefficient = np.array([[4, 1, 1], [1, 5, 2], [1, 2, 4]])\r\n    &gt;&gt;&gt; constant = np.array([[2], [-6]])\r\n    &gt;&gt;&gt; init_val = [0.5, -0.5, -0.5]\r\n    &gt;&gt;&gt; iterations = 3\r\n    &gt;&gt;&gt; jacobi_iteration_method(coefficient, constant, init_val, iterations)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Coefficient and constant matrices dimensions must be nxn and nx1 but\r\n                received 3x3 and 2x1\r\n\r\n    &gt;&gt;&gt; coefficient = np.array([[4, 1, 1], [1, 5, 2], [1, 2, 4]])\r\n    &gt;&gt;&gt; constant = np.array([[2], [-6], [-4]])\r\n    &gt;&gt;&gt; init_val = [0.5, -0.5]\r\n    &gt;&gt;&gt; iterations = 3\r\n    &gt;&gt;&gt; jacobi_iteration_method(coefficient, constant, init_val, iterations)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Number of initial values must be equal to number of rows in coefficient\r\n                matrix but received 2 and 3\r\n\r\n    &gt;&gt;&gt; coefficient = np.array([[4, 1, 1], [1, 5, 2], [1, 2, 4]])\r\n    &gt;&gt;&gt; constant = np.array([[2], [-6], [-4]])\r\n    &gt;&gt;&gt; init_val = [0.5, -0.5, -0.5]\r\n    &gt;&gt;&gt; iterations = 0\r\n    &gt;&gt;&gt; jacobi_iteration_method(coefficient, constant, init_val, iterations)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Iterations must be at least 1\r\n    &quot;&quot;&quot;</span>\r\n\r\n    rows1, cols1 = coefficient_matrix.shape\r\n    rows2, cols2 = constant_matrix.shape\r\n\r\n    <span class=\"hljs-keyword\">if</span> rows1 != cols1:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(\r\n            <span class=\"hljs-string\">f&quot;Coefficient matrix dimensions must be nxn but received <span class=\"hljs-subst\">{rows1}</span>x<span class=\"hljs-subst\">{cols1}</span>&quot;</span>\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">if</span> cols2 != <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;Constant matrix must be nx1 but received <span class=\"hljs-subst\">{rows2}</span>x<span class=\"hljs-subst\">{cols2}</span>&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> rows1 != rows2:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(\r\n            <span class=\"hljs-string\">f&quot;&quot;&quot;Coefficient and constant matrices dimensions must be nxn and nx1 but\r\n            received <span class=\"hljs-subst\">{rows1}</span>x<span class=\"hljs-subst\">{cols1}</span> and <span class=\"hljs-subst\">{rows2}</span>x<span class=\"hljs-subst\">{cols2}</span>&quot;&quot;&quot;</span>\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(init_val) != rows1:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(\r\n            <span class=\"hljs-string\">f&quot;&quot;&quot;Number of initial values must be equal to number of rows in coefficient\r\n            matrix but received <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(init_val)}</span> and <span class=\"hljs-subst\">{rows1}</span>&quot;&quot;&quot;</span>\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">if</span> iterations &lt;= <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Iterations must be at least 1&quot;</span>)\r\n\r\n    table = np.concatenate((coefficient_matrix, constant_matrix), axis=<span class=\"hljs-number\">1</span>)\r\n\r\n    rows, cols = table.shape\r\n\r\n    strictly_diagonally_dominant(table)\r\n\r\n    <span class=\"hljs-comment\"># Iterates the whole matrix for given number of times</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(iterations):\r\n        new_val = []\r\n        <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(rows):\r\n            temp = <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(cols):\r\n                <span class=\"hljs-keyword\">if</span> col == row:\r\n                    denom = table[row][col]\r\n                <span class=\"hljs-keyword\">elif</span> col == cols - <span class=\"hljs-number\">1</span>:\r\n                    val = table[row][col]\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    temp += (-<span class=\"hljs-number\">1</span>) * table[row][col] * init_val[col]\r\n            temp = (temp + val) / denom\r\n            new_val.append(temp)\r\n        init_val = new_val\r\n\r\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">float</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> new_val]\r\n\r\n\r\n<span class=\"hljs-comment\"># Checks if the given matrix is strictly diagonally dominant</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">strictly_diagonally_dominant</span>(<span class=\"hljs-params\">table: np.ndarray</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; table = np.array([[4, 1, 1, 2], [1, 5, 2, -6], [1, 2, 4, -4]])\r\n    &gt;&gt;&gt; strictly_diagonally_dominant(table)\r\n    True\r\n\r\n    &gt;&gt;&gt; table = np.array([[4, 1, 1, 2], [1, 5, 2, -6], [1, 2, 3, -4]])\r\n    &gt;&gt;&gt; strictly_diagonally_dominant(table)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Coefficient matrix is not strictly diagonally dominant\r\n    &quot;&quot;&quot;</span>\r\n\r\n    rows, cols = table.shape\r\n\r\n    is_diagonally_dominant = <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, rows):\r\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, cols - <span class=\"hljs-number\">1</span>):\r\n            <span class=\"hljs-keyword\">if</span> i == j:\r\n                <span class=\"hljs-keyword\">continue</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-built_in\">sum</span> += table[i][j]\r\n\r\n        <span class=\"hljs-keyword\">if</span> table[i][i] &lt;= <span class=\"hljs-built_in\">sum</span>:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Coefficient matrix is not strictly diagonally dominant&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">return</span> is_diagonally_dominant\r\n\r\n\r\n<span class=\"hljs-comment\"># Test Cases</span>\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Nivas Manduva",
      "email": "53264470+eviltypha@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}