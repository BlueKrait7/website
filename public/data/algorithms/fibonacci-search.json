{
  "slug": "fibonacci-search",
  "name": "Fibonacci Search",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "searches\\fibonacci_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/searches\\fibonacci_search.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is pure Python implementation of fibonacci search.\r\n\r\nResources used:\r\nhttps://en.wikipedia.org/wiki/Fibonacci_search_technique\r\n\r\nFor doctests run following command:\r\npython3 -m doctest -v fibonacci_search.py\r\n\r\nFor manual testing run:\r\npython3 fibonacci_search.py\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> lru_cache\r\n\r\n\r\n<span class=\"hljs-meta\">@lru_cache</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-params\">k: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Finds fibonacci number in index k.\r\n\r\n    Parameters\r\n    ----------\r\n    k :\r\n        Index of fibonacci.\r\n\r\n    Returns\r\n    -------\r\n    int\r\n        Fibonacci number in position k.\r\n\r\n    &gt;&gt;&gt; fibonacci(0)\r\n    0\r\n    &gt;&gt;&gt; fibonacci(2)\r\n    1\r\n    &gt;&gt;&gt; fibonacci(5)\r\n    5\r\n    &gt;&gt;&gt; fibonacci(15)\r\n    610\r\n    &gt;&gt;&gt; fibonacci(&#x27;a&#x27;)\r\n    Traceback (most recent call last):\r\n    TypeError: k must be an integer.\r\n    &gt;&gt;&gt; fibonacci(-5)\r\n    Traceback (most recent call last):\r\n    ValueError: k integer must be greater or equal to zero.\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(k, <span class=\"hljs-built_in\">int</span>):\r\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;k must be an integer.&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> k &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;k integer must be greater or equal to zero.&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">elif</span> k == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">return</span> fibonacci(k - <span class=\"hljs-number\">1</span>) + fibonacci(k - <span class=\"hljs-number\">2</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fibonacci_search</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>, val: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;A pure Python implementation of a fibonacci search algorithm.\r\n\r\n    Parameters\r\n    ----------\r\n    arr\r\n        List of sorted elements.\r\n    val\r\n        Element to search in list.\r\n\r\n    Returns\r\n    -------\r\n    int\r\n        The index of the element in the array.\r\n        -1 if the element is not found.\r\n\r\n    &gt;&gt;&gt; fibonacci_search([4, 5, 6, 7], 4)\r\n    0\r\n    &gt;&gt;&gt; fibonacci_search([4, 5, 6, 7], -10)\r\n    -1\r\n    &gt;&gt;&gt; fibonacci_search([-18, 2], -18)\r\n    0\r\n    &gt;&gt;&gt; fibonacci_search([5], 5)\r\n    0\r\n    &gt;&gt;&gt; fibonacci_search([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], &#x27;c&#x27;)\r\n    1\r\n    &gt;&gt;&gt; fibonacci_search([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], &#x27;f&#x27;)\r\n    -1\r\n    &gt;&gt;&gt; fibonacci_search([], 1)\r\n    -1\r\n    &gt;&gt;&gt; fibonacci_search([.1, .4 , 7], .4)\r\n    1\r\n    &gt;&gt;&gt; fibonacci_search([], 9)\r\n    -1\r\n    &gt;&gt;&gt; fibonacci_search(list(range(100)), 63)\r\n    63\r\n    &gt;&gt;&gt; fibonacci_search(list(range(100)), 99)\r\n    99\r\n    &gt;&gt;&gt; fibonacci_search(list(range(-100, 100, 3)), -97)\r\n    1\r\n    &gt;&gt;&gt; fibonacci_search(list(range(-100, 100, 3)), 0)\r\n    -1\r\n    &gt;&gt;&gt; fibonacci_search(list(range(-100, 100, 5)), 0)\r\n    20\r\n    &gt;&gt;&gt; fibonacci_search(list(range(-100, 100, 5)), 95)\r\n    39\r\n    &quot;&quot;&quot;</span>\r\n    len_list = <span class=\"hljs-built_in\">len</span>(arr)\r\n    <span class=\"hljs-comment\"># Find m such that F_m &gt;= n where F_i is the i_th fibonacci number.</span>\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n        <span class=\"hljs-keyword\">if</span> fibonacci(i) &gt;= len_list:\r\n            fibb_k = i\r\n            <span class=\"hljs-keyword\">break</span>\r\n        i += <span class=\"hljs-number\">1</span>\r\n    offset = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> fibb_k &gt; <span class=\"hljs-number\">0</span>:\r\n        index_k = <span class=\"hljs-built_in\">min</span>(\r\n            offset + fibonacci(fibb_k - <span class=\"hljs-number\">1</span>), len_list - <span class=\"hljs-number\">1</span>\r\n        )  <span class=\"hljs-comment\"># Prevent out of range</span>\r\n        item_k_1 = arr[index_k]\r\n        <span class=\"hljs-keyword\">if</span> item_k_1 == val:\r\n            <span class=\"hljs-keyword\">return</span> index_k\r\n        <span class=\"hljs-keyword\">elif</span> val &lt; item_k_1:\r\n            fibb_k -= <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">elif</span> val &gt; item_k_1:\r\n            offset += fibonacci(fibb_k - <span class=\"hljs-number\">1</span>)\r\n            fibb_k -= <span class=\"hljs-number\">2</span>\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Search\\FibonacciSearch.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Search\\FibonacciSearch.js",
      "code": "<span class=\"hljs-comment\">/****************************************************************************\r\n * Fibonacci Search JavaScript Implementation\r\n * Author   Alhassan Atama Isiaka\r\n * Version v1.0.0\r\n * Copyright 2020\r\n * https://github.com/komputarist\r\n *\r\n * This implementation is based on Generalizing the Fibonacci search we\r\n * define the Fibonacci search of degree K. Like the Fibonacci search,\r\n * which it reduces to for K = 2, the Fibonacci search of degree K\r\n * involves only addition and subtraction.\r\n *  Capocelli R.M. (1991) A Generalization of the Fibonacci Search. In:\r\n * Bergum G.E., Philippou A.N., Horadam A.F. (eds) Applications of Fibonacci\r\n * Numbers. Springer, Dordrecht. https://doi.org/10.1007/978-94-011-3586-3_9\r\n *\r\n * This snippet is free. Feel free to improve on it\r\n *\r\n * We define a function fibonacciSearch() that takes an array of numbers,\r\n * the item (number) to be searched for and the length of the items in the array\r\n ****************************************************************************/</span>\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fibonacciSearch</span> = (<span class=\"hljs-params\">arr, x, n</span>) =&gt; {\r\n  <span class=\"hljs-keyword\">let</span> fib2 = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// (K-2)&#x27;th Fibonacci Number</span>\r\n  <span class=\"hljs-keyword\">let</span> fib1 = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// (K-1)&#x27;th Fibonacci Number.</span>\r\n  <span class=\"hljs-keyword\">let</span> fibK = fib2 + fib1 <span class=\"hljs-comment\">// Kth Fibonacci</span>\r\n\r\n  <span class=\"hljs-comment\">/* We want to store the smallest fibonacci number smaller such that\r\n    number is greater than or equal to n, we use fibK for this */</span>\r\n  <span class=\"hljs-keyword\">while</span> (fibK &lt; n) {\r\n    fib2 = fib1\r\n    fib1 = fibK\r\n    fibK = fib2 + fib1\r\n  }\r\n  <span class=\"hljs-comment\">//  This marks the eliminated range from front</span>\r\n  <span class=\"hljs-keyword\">let</span> offset = -<span class=\"hljs-number\">1</span>\r\n\r\n  <span class=\"hljs-comment\">/* while there are elements to be checked. We compare arr[fib2] with x.\r\n    When fibM becomes 1, fib2 becomes 0 */</span>\r\n\r\n  <span class=\"hljs-keyword\">while</span> (fibK &gt; <span class=\"hljs-number\">1</span>) {\r\n    <span class=\"hljs-comment\">// Check if fibK is a valid location</span>\r\n    <span class=\"hljs-keyword\">const</span> i = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(offset + fib2, n - <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-comment\">/*  If x is greater than the value at\r\n      index fib2, Partition the subarray array\r\n      from offset to i */</span>\r\n    <span class=\"hljs-keyword\">if</span> (arr[i] &lt; x) {\r\n      fibK = fib1\r\n      fib1 = fib2\r\n      fib2 = fibK - fib1\r\n      offset = i\r\n      <span class=\"hljs-comment\">/* If x is greater than the value at\r\n            index fib2, cut the subarray array\r\n            from offset to i */</span>\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[i] &gt; x) {\r\n      fibK = fib2\r\n      fib1 = fib1 - fib2\r\n      fib2 = fibK - fib1\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-comment\">//  return index for found element</span>\r\n      <span class=\"hljs-keyword\">return</span> i\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">//    comparing the last element with x */</span>\r\n  <span class=\"hljs-keyword\">if</span> (fib1 &amp;&amp; arr[offset + <span class=\"hljs-number\">1</span>] === x) {\r\n    <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span>\r\n  }\r\n  <span class=\"hljs-comment\">//    element not found. return -1</span>\r\n  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Example</span>\r\n<span class=\"hljs-comment\">// const myArray = [10, 22, 35, 40, 45, 50, 80, 82, 85, 90, 100]</span>\r\n<span class=\"hljs-comment\">// const n = myArray.length</span>\r\n<span class=\"hljs-comment\">// const x = 90</span>\r\n<span class=\"hljs-comment\">// const fibFinder = fibonacciSearch(myArray, x, n)</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "search\\fibonacci_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search\\fibonacci_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @author sprintyaf\r\n * @file fibonacci_search.cpp\r\n * @brief [Fibonacci search\r\n * algorithm](https://en.wikipedia.org/wiki/Fibonacci_search_technique)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span> <span class=\"hljs-comment\">// for std::vector class</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span> <span class=\"hljs-comment\">// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span> <span class=\"hljs-comment\">// for random numbers</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span> <span class=\"hljs-comment\">// for sorting</span></span>\r\n\r\n\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief using fibonacci search algorithm finds an index of a given element in a sorted array\r\n * \r\n * @param arr sorted array\r\n * @param value value that we&#x27;re looking for\r\n * @returns if the array contains the value, returns an index of the element. otherwise -1.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">fibonacci_search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;arr, <span class=\"hljs-type\">int</span> value)</span></span>{\r\n    <span class=\"hljs-comment\">// initialize last and current members of Fibonacci sequence </span>\r\n    <span class=\"hljs-type\">int</span> last = <span class=\"hljs-number\">0</span>, current = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-type\">int</span> length = arr.<span class=\"hljs-built_in\">size</span>(); <span class=\"hljs-comment\">// array size</span>\r\n    <span class=\"hljs-comment\">// next member of Fibonacci sequence which is &quot;last&quot; + &quot;current&quot;</span>\r\n    <span class=\"hljs-type\">int</span> next = last + current; \r\n\r\n    <span class=\"hljs-comment\">// &quot;next&quot; will store the smallest Fibonacci number greater or equal to &quot;length&quot;</span>\r\n    <span class=\"hljs-keyword\">while</span>(next &lt; length){\r\n        last = current;\r\n        current = next;\r\n        next = last + current;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// &quot;offset&quot; is the end of eliminated range from front</span>\r\n    <span class=\"hljs-type\">int</span> offset = <span class=\"hljs-number\">-1</span>, index;\r\n    <span class=\"hljs-comment\">// while loop until there are elements left to consider.</span>\r\n    <span class=\"hljs-comment\">// when &quot;next&quot; becomes 1, last is equal to 0, so search is done,</span>\r\n    <span class=\"hljs-comment\">// because arr[offset] will already be eliminated</span>\r\n    <span class=\"hljs-keyword\">while</span>(next &gt; <span class=\"hljs-number\">1</span>){\r\n        <span class=\"hljs-comment\">// check if &quot;last&quot; is valid location</span>\r\n        index = std::<span class=\"hljs-built_in\">min</span>(offset + last, length<span class=\"hljs-number\">-1</span>);\r\n        <span class=\"hljs-comment\">// if value is greater than the value at &quot;index&quot;, eliminate the subarray from offset to index</span>\r\n        <span class=\"hljs-keyword\">if</span>(arr[index] &lt; value){\r\n            next = current;\r\n            current = last;\r\n            last = next - current;\r\n            offset = index;\r\n        <span class=\"hljs-comment\">// if value is less than the value at &quot;index&quot;, eliminate the subarray after index+1</span>\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(arr[index] &gt; value){\r\n            next = last;\r\n            current = current - last;\r\n            last = next - current;\r\n        <span class=\"hljs-comment\">// element is found</span>\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> index;\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">// comparing the last element</span>\r\n    <span class=\"hljs-keyword\">if</span>(current &amp;&amp; !arr.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; arr[offset+<span class=\"hljs-number\">1</span>] == value){\r\n        <span class=\"hljs-keyword\">return</span> offset+<span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-comment\">// value was not found, return -1</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief random tests for checking performance when an array doesn&#x27;t contain an element\r\n*/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">no_occurence_tests</span><span class=\"hljs-params\">()</span></span>{\r\n    <span class=\"hljs-type\">bool</span> passed = <span class=\"hljs-literal\">true</span>;\r\n    <span class=\"hljs-type\">int</span> rand_num, rand_value, index, num_tests = <span class=\"hljs-number\">1000</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; arr;\r\n    <span class=\"hljs-keyword\">while</span>(num_tests--){\r\n        arr.<span class=\"hljs-built_in\">clear</span>();\r\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++){\r\n            rand_num = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">1000</span>;\r\n            arr.<span class=\"hljs-built_in\">push_back</span>(rand_num);\r\n        }\r\n        rand_value = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">1000</span>;\r\n        <span class=\"hljs-keyword\">while</span>(std::<span class=\"hljs-built_in\">find</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>(), rand_value) != arr.<span class=\"hljs-built_in\">end</span>()){\r\n            std::<span class=\"hljs-built_in\">remove</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>(), rand_value);\r\n        }\r\n        <span class=\"hljs-built_in\">sort</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());\r\n        index = <span class=\"hljs-built_in\">fibonacci_search</span>(arr, rand_value);\r\n        passed = passed &amp;&amp; (index == <span class=\"hljs-number\">-1</span>);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> passed;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief random tests which cover cases when we have one, multiple or zero occurences of the value we&#x27;re looking for\r\n*/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">random_tests</span><span class=\"hljs-params\">()</span></span>{\r\n    <span class=\"hljs-type\">bool</span> passed = <span class=\"hljs-literal\">true</span>;\r\n    <span class=\"hljs-type\">int</span> rand_num, rand_value, index, real_value, num_tests = <span class=\"hljs-number\">10000</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; arr;\r\n    <span class=\"hljs-keyword\">while</span>(num_tests--){\r\n        arr.<span class=\"hljs-built_in\">clear</span>();\r\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++){\r\n            rand_num = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">1000</span>;\r\n            arr.<span class=\"hljs-built_in\">push_back</span>(rand_num);\r\n        }\r\n        rand_value = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">1000</span>;\r\n        std::<span class=\"hljs-built_in\">sort</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());\r\n        index = <span class=\"hljs-built_in\">fibonacci_search</span>(arr, rand_value);\r\n        <span class=\"hljs-keyword\">if</span>(index != <span class=\"hljs-number\">-1</span>){\r\n            real_value = arr[index];\r\n            passed = passed &amp;&amp; (real_value == rand_value);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            passed = passed &amp;&amp; (std::<span class=\"hljs-built_in\">find</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>(), rand_value) == arr.<span class=\"hljs-built_in\">end</span>());\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> passed;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main Function\r\n * testing the algorithm\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">no_occurence_tests</span>());\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">random_tests</span>());\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\searches\\FibonacciSearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\searches\\FibonacciSearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.searches;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.devutils.searches.SearchAlgorithm;\r\n\r\n<span class=\"hljs-comment\">/*\r\n*  Fibonacci Search is a popular algorithm which finds the position of a target value in\r\n*  a sorted array\r\n*\r\n*  The time complexity for this search algorithm is O(log3(n))\r\n*  The space complexity for this search algorithm is O(1)\r\n*  @author Kanakalatha Vemuru (https://github.com/KanakalathaVemuru)\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FibonacciSearch</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SearchAlgorithm</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> array is a sorted array where the element has to be searched\r\n     * <span class=\"hljs-doctag\">@param</span> key is an element whose position has to be found\r\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; is any comparable type\r\n     * <span class=\"hljs-doctag\">@return</span> index of the element\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T[] array, T key)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fibMinus1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fibMinus2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fibNumber</span> <span class=\"hljs-operator\">=</span> fibMinus1 + fibMinus2;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> array.length;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (fibNumber &lt; n) {\r\n            fibMinus2 = fibMinus1;\r\n            fibMinus1 = fibNumber;\r\n            fibNumber = fibMinus2 + fibMinus1;\r\n        }\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">offset</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (fibNumber &gt; <span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> Math.min(offset + fibMinus2, n - <span class=\"hljs-number\">1</span>);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (array[i].compareTo(key) &lt; <span class=\"hljs-number\">0</span>) {\r\n                fibNumber = fibMinus1;\r\n                fibMinus1 = fibMinus2;\r\n                fibMinus2 = fibNumber - fibMinus1;\r\n                offset = i;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (array[i].compareTo(key) &gt; <span class=\"hljs-number\">0</span>) {\r\n                fibNumber = fibMinus2;\r\n                fibMinus1 = fibMinus1 - fibMinus2;\r\n                fibMinus2 = fibNumber - fibMinus1;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">return</span> i;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (fibMinus1 == <span class=\"hljs-number\">1</span> &amp;&amp; array[offset + <span class=\"hljs-number\">1</span>] == key) {\r\n            <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Driver Program</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        Integer[] integers = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">512</span>};\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> integers.length;\r\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">shouldBeFound</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">128</span>;\r\n        <span class=\"hljs-type\">FibonacciSearch</span> <span class=\"hljs-variable\">fsearch</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FibonacciSearch</span>();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">atIndex</span> <span class=\"hljs-operator\">=</span> fsearch.find(integers, shouldBeFound);\r\n\r\n        System.out.println(\r\n                <span class=\"hljs-string\">&quot;Should be found: &quot;</span> + shouldBeFound + <span class=\"hljs-string\">&quot;. Found &quot;</span> + integers[atIndex] + <span class=\"hljs-string\">&quot; at index &quot;</span> + atIndex + <span class=\"hljs-string\">&quot;. An array length &quot;</span> + size);\r\n    }\r\n\r\n}\r\n"
    },
    "c": {
      "dir": "searching\\fibonacci_search.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching\\fibonacci_search.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fibMonaccianSearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-comment\">/* Initialize fibonacci numbers */</span>\r\n    <span class=\"hljs-type\">int</span> fibMMm2 = <span class=\"hljs-number\">0</span>;               <span class=\"hljs-comment\">// (m-2)&#x27;th Fibonacci No.</span>\r\n    <span class=\"hljs-type\">int</span> fibMMm1 = <span class=\"hljs-number\">1</span>;               <span class=\"hljs-comment\">// (m-1)&#x27;th Fibonacci No.</span>\r\n    <span class=\"hljs-type\">int</span> fibM = fibMMm2 + fibMMm1;  <span class=\"hljs-comment\">// m&#x27;th Fibonacci</span>\r\n\r\n    <span class=\"hljs-comment\">/* fibM is going to store the smallest Fibonacci\r\n       Number greater than or equal to n */</span>\r\n    <span class=\"hljs-keyword\">while</span> (fibM &lt; n)\r\n    {\r\n        fibMMm2 = fibMMm1;\r\n        fibMMm1 = fibM;\r\n        fibM = fibMMm2 + fibMMm1;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Marks the eliminated range from front</span>\r\n    <span class=\"hljs-type\">int</span> offset = <span class=\"hljs-number\">-1</span>;\r\n\r\n    <span class=\"hljs-comment\">/* while there are elements to be inspected. Note that\r\n       we compare arr[fibMm2] with x. When fibM becomes 1,\r\n       fibMm2 becomes 0 */</span>\r\n    <span class=\"hljs-keyword\">while</span> (fibM &gt; <span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-comment\">// Check if fibMm2 is a valid location</span>\r\n\r\n        <span class=\"hljs-comment\">// sets i to the min. of (offset+fibMMm2) and (n-1)</span>\r\n        <span class=\"hljs-type\">int</span> i = ((offset + fibMMm2) &lt; (n - <span class=\"hljs-number\">1</span>)) ? (offset + fibMMm2) : (n - <span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-comment\">/* If x is greater than the value at index fibMm2,\r\n           cut the subarray array from offset to i */</span>\r\n        <span class=\"hljs-keyword\">if</span> (arr[i] &lt; x)\r\n        {\r\n            fibM = fibMMm1;\r\n            fibMMm1 = fibMMm2;\r\n            fibMMm2 = fibM - fibMMm1;\r\n            offset = i;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* If x is greater than the value at index fibMm2,\r\n           cut the subarray after i+1  */</span>\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[i] &gt; x)\r\n        {\r\n            fibM = fibMMm2;\r\n            fibMMm1 = fibMMm1 - fibMMm2;\r\n            fibMMm2 = fibM - fibMMm1;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* element found. return index */</span>\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-keyword\">return</span> i;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* comparing the last element with x */</span>\r\n    <span class=\"hljs-keyword\">if</span> (fibMMm1 &amp;&amp; arr[offset + <span class=\"hljs-number\">1</span>] == x)\r\n        <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-comment\">/*element not found. return -1 */</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">82</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">100</span>};\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-keyword\">sizeof</span>(arr) / <span class=\"hljs-keyword\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\r\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">85</span>;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Found at index: %d&quot;</span>, fibMonaccianSearch(arr, x, n));\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "search\\fibonacci_Search.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/search\\fibonacci_Search.dart",
      "code": "<span class=\"hljs-comment\">//Title:Fibonacci Search</span>\r\n<span class=\"hljs-comment\">//Author:Shawn</span>\r\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\r\n\r\n<span class=\"hljs-built_in\">int</span> fibMaonaccianSearch(<span class=\"hljs-built_in\">List</span> arr, <span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> n) {\r\n  <span class=\"hljs-comment\">//Initialize fibonacci numbers</span>\r\n  <span class=\"hljs-comment\">//(m - 2)&#x27;th Fibonacci No</span>\r\n  <span class=\"hljs-built_in\">int</span> fibMMm2 = <span class=\"hljs-number\">0</span>;\r\n  <span class=\"hljs-comment\">//(m - 2)&#x27;th Fibonacci No</span>\r\n  <span class=\"hljs-built_in\">int</span> fibMMm1 = <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-comment\">//m&#x27;th Fibonacci</span>\r\n  <span class=\"hljs-built_in\">int</span> fibM = fibMMm2 + fibMMm1;\r\n\r\n  <span class=\"hljs-comment\">//fibM is going to store the smallest Fibonacci</span>\r\n  <span class=\"hljs-comment\">//Number greater than or equal to n</span>\r\n  <span class=\"hljs-keyword\">while</span> (fibM &lt; n) {\r\n    fibMMm2 = fibMMm1;\r\n    fibMMm1 = fibM;\r\n    fibM = fibMMm2 + fibMMm1;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Marks the eliminated range from front</span>\r\n  <span class=\"hljs-built_in\">int</span> offset = <span class=\"hljs-number\">-1</span>;\r\n\r\n  <span class=\"hljs-comment\">/*While three are elements to be inspected.\r\n   * Note that we compare arr[fibMMm2] with x.\r\n   * When fibM becomes 1,\r\n   * fibMm2 becomes 0 */</span>\r\n  <span class=\"hljs-keyword\">while</span> (fibM &gt; <span class=\"hljs-number\">1</span>) {\r\n    <span class=\"hljs-comment\">//Check if fibMMm2 is a valid location</span>\r\n\r\n    <span class=\"hljs-comment\">//sets i to the min. of (offset + fibMMm2) and (n - 1)</span>\r\n    <span class=\"hljs-built_in\">int</span> i = ((offset + fibMMm2) &lt; (n - <span class=\"hljs-number\">1</span>)) ? (offset + fibMMm2) : (n - <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-comment\">/* If x is greater than the value at index fibMmm2\r\n     * cut the subarray array from offset to i\r\n     */</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (arr[i] &lt; x) {\r\n      fibM = fibMMm1;\r\n      fibMMm1 = fibMMm2;\r\n      fibMMm2 = fibM - fibMMm1;\r\n      offset = i;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* If x is greater than the value at index fibMmm2\r\n     * cut the subarray array after i + 1.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[i] &gt; x) {\r\n      fibM = fibMMm2;\r\n      fibMMm1 = fibMMm1 - fibMMm2;\r\n      fibMMm2 = fibM - fibMMm1;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//elwment found.Return index</span>\r\n    <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-keyword\">return</span> i;\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">//Comparing the last element with x</span>\r\n  <span class=\"hljs-keyword\">if</span> (arr[offset + <span class=\"hljs-number\">1</span>] == x) {\r\n    <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span>;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">//element not found :(</span>\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-comment\">//Get the array</span>\r\n  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>];\r\n\r\n  <span class=\"hljs-keyword\">var</span> result;\r\n\r\n  <span class=\"hljs-comment\">//Print the array</span>\r\n  <span class=\"hljs-built_in\">print</span>(arr);\r\n\r\n  <span class=\"hljs-comment\">//The size of the array</span>\r\n  <span class=\"hljs-keyword\">var</span> n = arr.length;\r\n\r\n  <span class=\"hljs-comment\">//Key to be searched in the array</span>\r\n  <span class=\"hljs-keyword\">var</span> key = <span class=\"hljs-number\">7</span>;\r\n\r\n  <span class=\"hljs-comment\">//Search the key using ternarySearch</span>\r\n  result = fibMaonaccianSearch(arr, key, n);\r\n\r\n  <span class=\"hljs-comment\">//Print the result</span>\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Index of &quot;</span> + key.toString() + <span class=\"hljs-string\">&quot; is &quot;</span> + result.toString());\r\n}\r\n"
    },
    "ruby": {
      "dir": "searches\\fibonacci_search.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/searches\\fibonacci_search.rb",
      "code": "def fibonacci_search int arr, int element\r\n    n = n.size\r\n    f2 = <span class=\"hljs-number\">0</span>\r\n    f1 = <span class=\"hljs-number\">1</span>\r\n    f  = f2 + f1\r\n    offset = -<span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> f &lt; n <span class=\"hljs-keyword\">do</span>\r\n\tf2 = f1;\r\n\tf1 = f;\r\n\tf  = f2 + f1;\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> f &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n\ti = [offset+f2, n-<span class=\"hljs-number\">1</span>].min\r\n\r\n\t<span class=\"hljs-keyword\">if</span> arr[i] &lt; element\r\n\t    f  = f1\r\n\t    f1 = f2\r\n\t    f2 = f - f1\r\n\t    offset = i\r\n\t<span class=\"hljs-keyword\">elsif</span> arr[i] &gt; element\r\n\t    f  = f2\r\n\t    f1 = f1 - f2\r\n\t    f2 = f - f1\t\r\n\t<span class=\"hljs-keyword\">else</span>\r\n\t    <span class=\"hljs-keyword\">return</span> i\r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> offset + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> f1 &amp;&amp; arr[offset + <span class=\"hljs-number\">1</span>] == element\r\n\r\n    -<span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "php": {
      "dir": "searches\\fibonacciSearch.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/searches\\fibonacciSearch.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n\r\n<span class=\"hljs-comment\">/*\r\n * Function to find nth number in Fibonaccu sequence.\r\n * Uses a version of memoization and runs very fast!\r\n */</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@param</span> int $n position to check\r\n * <span class=\"hljs-doctag\">@param</span> array $m array to store solved trees\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacciPosition</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$n</span>, <span class=\"hljs-keyword\">array</span> &amp;<span class=\"hljs-variable\">$m</span> = []</span>)\r\n</span>{\r\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$m</span>[<span class=\"hljs-variable\">$n</span>])) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$m</span>[<span class=\"hljs-variable\">$n</span>];\r\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable\">$n</span> &lt; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$n</span>;\r\n\r\n    <span class=\"hljs-variable\">$m</span>[<span class=\"hljs-variable\">$n</span>] = <span class=\"hljs-title function_ invoke__\">fibonacciPosition</span>(<span class=\"hljs-variable\">$n</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable\">$m</span>) + <span class=\"hljs-title function_ invoke__\">fibonacciPosition</span>(<span class=\"hljs-variable\">$n</span> - <span class=\"hljs-number\">2</span>, <span class=\"hljs-variable\">$m</span>);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$m</span>[<span class=\"hljs-variable\">$n</span>];\r\n\r\n}\r\n\r\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-title function_ invoke__\">fibonacciPosition</span>(<span class=\"hljs-number\">59</span>);\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Search/FibonacciSearcher.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Search\\FibonacciSearcher.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Search</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class that implements Fibonacci search algorithm.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FibonacciSearcher</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">IComparable</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds the index of the item searched for in the array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Time complexity:</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     worst-case: O(log n),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     average-case: O(log n),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     best-case: O(1).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Sorted array to be searched in. Cannot be null.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>Item to be searched for. Cannot be null.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>If an item is found, return index. If the array is empty or an item is not found, return -1.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentNullException&quot;&gt;</span>Gets thrown when the given array or item is null.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindIndex</span>(<span class=\"hljs-params\">T[] array, T item</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (array <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentNullException(<span class=\"hljs-string\">&quot;array&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (item <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentNullException(<span class=\"hljs-string\">&quot;item&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> arrayLength = array.Length;\r\n\r\n            <span class=\"hljs-keyword\">if</span> (arrayLength &gt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-comment\">// find the smallest Fibonacci number that equals or is greater than the array length</span>\r\n                <span class=\"hljs-keyword\">var</span> fibonacciNumberBeyondPrevious = <span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">var</span> fibonacciNumPrevious = <span class=\"hljs-number\">1</span>;\r\n                <span class=\"hljs-keyword\">var</span> fibonacciNum = fibonacciNumPrevious;\r\n\r\n                <span class=\"hljs-keyword\">while</span> (fibonacciNum &lt;= arrayLength)\r\n                {\r\n                    fibonacciNumberBeyondPrevious = fibonacciNumPrevious;\r\n                    fibonacciNumPrevious = fibonacciNum;\r\n                    fibonacciNum = fibonacciNumberBeyondPrevious + fibonacciNumPrevious;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// offset to drop the left part of the array</span>\r\n                <span class=\"hljs-keyword\">var</span> offset = <span class=\"hljs-number\">-1</span>;\r\n\r\n                <span class=\"hljs-keyword\">while</span> (fibonacciNum &gt; <span class=\"hljs-number\">1</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">var</span> index = Math.Min(offset + fibonacciNumberBeyondPrevious, arrayLength - <span class=\"hljs-number\">1</span>);\r\n\r\n                    <span class=\"hljs-keyword\">switch</span> (item.CompareTo(array[index]))\r\n                    {\r\n                        <span class=\"hljs-comment\">// reject approximately 1/3 of the existing array in front</span>\r\n                        <span class=\"hljs-comment\">// by moving Fibonacci numbers</span>\r\n                        <span class=\"hljs-keyword\">case</span> &gt; <span class=\"hljs-number\">0</span>:\r\n                            fibonacciNum = fibonacciNumPrevious;\r\n                            fibonacciNumPrevious = fibonacciNumberBeyondPrevious;\r\n                            fibonacciNumberBeyondPrevious = fibonacciNum - fibonacciNumPrevious;\r\n                            offset = index;\r\n                            <span class=\"hljs-keyword\">break</span>;\r\n\r\n                        <span class=\"hljs-comment\">// reject approximately 2/3 of the existing array behind</span>\r\n                        <span class=\"hljs-comment\">// by moving Fibonacci numbers</span>\r\n                        <span class=\"hljs-keyword\">case</span> &lt; <span class=\"hljs-number\">0</span>:\r\n                            fibonacciNum = fibonacciNumberBeyondPrevious;\r\n                            fibonacciNumPrevious = fibonacciNumPrevious - fibonacciNumberBeyondPrevious;\r\n                            fibonacciNumberBeyondPrevious = fibonacciNum - fibonacciNumPrevious;\r\n                            <span class=\"hljs-keyword\">break</span>;\r\n                        <span class=\"hljs-literal\">default</span>:\r\n                            <span class=\"hljs-keyword\">return</span> index;\r\n                    }\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// check the last element</span>\r\n                <span class=\"hljs-keyword\">if</span> (fibonacciNumPrevious == <span class=\"hljs-number\">1</span> &amp;&amp; item.Equals(array[^<span class=\"hljs-number\">1</span>]))\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> arrayLength - <span class=\"hljs-number\">1</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Philip Schikora",
      "email": "pschikora87@googlemail.com",
      "commits": 1
    },
    {
      "name": "Administrator",
      "email": "pi@pglp.noip.me",
      "commits": 1
    },
    {
      "name": "James Mc Dermott",
      "email": "james.mcdermott89@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Alhassan Atama",
      "email": "Komputarist@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KanakalathaVemuru",
      "email": "46847239+KanakalathaVemuru@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "poloso",
      "email": "posorio@sier.com.co",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Laisha Wadhwa",
      "email": "laisha.w16@iiits.in",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Andrew S Erwin",
      "email": "andrew@andrewerwin.com",
      "commits": 2
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 3
    },
    {
      "name": "sprintyaf",
      "email": "sstur17@freeuni.edu.ge",
      "commits": 10
    }
  ],
  "explanationUrl": {}
}