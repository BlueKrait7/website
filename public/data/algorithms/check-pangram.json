{
  "slug": "check-pangram",
  "name": "Check Pangram",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings\\check_pangram.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings\\check_pangram.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nwiki: https://en.wikipedia.org/wiki/Pangram\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_pangram</span>(<span class=\"hljs-params\">\r\n    input_str: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>,\r\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    A Pangram String contains all the alphabets at least once.\r\n    &gt;&gt;&gt; check_pangram(&quot;The quick brown fox jumps over the lazy dog&quot;)\r\n    True\r\n    &gt;&gt;&gt; check_pangram(&quot;Waltz, bad nymph, for quick jigs vex.&quot;)\r\n    True\r\n    &gt;&gt;&gt; check_pangram(&quot;Jived fox nymph grabs quick waltz.&quot;)\r\n    True\r\n    &gt;&gt;&gt; check_pangram(&quot;My name is Unknown&quot;)\r\n    False\r\n    &gt;&gt;&gt; check_pangram(&quot;The quick brown fox jumps over the la_y dog&quot;)\r\n    False\r\n    &gt;&gt;&gt; check_pangram()\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    frequency = <span class=\"hljs-built_in\">set</span>()\r\n    input_str = input_str.replace(\r\n        <span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>\r\n    )  <span class=\"hljs-comment\"># Replacing all the Whitespaces in our sentence</span>\r\n    <span class=\"hljs-keyword\">for</span> alpha <span class=\"hljs-keyword\">in</span> input_str:\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&quot;a&quot;</span> &lt;= alpha.lower() &lt;= <span class=\"hljs-string\">&quot;z&quot;</span>:\r\n            frequency.add(alpha.lower())\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(frequency) == <span class=\"hljs-number\">26</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">False</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_pangram_faster</span>(<span class=\"hljs-params\">\r\n    input_str: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>,\r\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; check_pangram_faster(&quot;The quick brown fox jumps over the lazy dog&quot;)\r\n    True\r\n    &gt;&gt;&gt; check_pangram_faster(&quot;Waltz, bad nymph, for quick jigs vex.&quot;)\r\n    True\r\n    &gt;&gt;&gt; check_pangram_faster(&quot;Jived fox nymph grabs quick waltz.&quot;)\r\n    True\r\n    &gt;&gt;&gt; check_pangram_faster(&quot;The quick brown fox jumps over the la_y dog&quot;)\r\n    False\r\n    &gt;&gt;&gt; check_pangram_faster()\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    flag = [<span class=\"hljs-literal\">False</span>] * <span class=\"hljs-number\">26</span>\r\n    <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> input_str:\r\n        <span class=\"hljs-keyword\">if</span> char.islower():\r\n            flag[<span class=\"hljs-built_in\">ord</span>(char) - <span class=\"hljs-number\">97</span>] = <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">elif</span> char.isupper():\r\n            flag[<span class=\"hljs-built_in\">ord</span>(char) - <span class=\"hljs-number\">65</span>] = <span class=\"hljs-literal\">True</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">all</span>(flag)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">benchmark</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Benchmark code comparing different version.\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> timeit\r\n\r\n    setup = <span class=\"hljs-string\">&quot;from __main__ import check_pangram, check_pangram_faster&quot;</span>\r\n    <span class=\"hljs-built_in\">print</span>(timeit(<span class=\"hljs-string\">&quot;check_pangram()&quot;</span>, setup=setup))\r\n    <span class=\"hljs-built_in\">print</span>(timeit(<span class=\"hljs-string\">&quot;check_pangram_faster()&quot;</span>, setup=setup))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    benchmark()\r\n"
    },
    "javascript": {
      "dir": "String\\test\\CheckPangram.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/String\\test\\CheckPangram.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { checkPangramRegex, checkPangramSet } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../CheckPangram&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing checkPangramRegex function&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;The quick brown fox jumps over the lazy dog&quot; is a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(\r\n      <span class=\"hljs-title function_\">checkPangramRegex</span>(<span class=\"hljs-string\">&#x27;The quick brown fox jumps over the lazy dog&#x27;</span>)\r\n    ).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;Waltz, bad nymph, for quick jigs vex.&quot; is a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">checkPangramRegex</span>(<span class=\"hljs-string\">&#x27;Waltz, bad nymph, for quick jigs vex.&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;Jived fox nymph grabs quick waltz.&quot; is a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">checkPangramRegex</span>(<span class=\"hljs-string\">&#x27;Jived fox nymph grabs quick waltz.&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;My name is Unknown&quot; is NOT a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">checkPangramRegex</span>(<span class=\"hljs-string\">&#x27;My name is Unknown&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;The quick brown fox jumps over the la_y dog&quot; is NOT a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(\r\n      <span class=\"hljs-title function_\">checkPangramRegex</span>(<span class=\"hljs-string\">&#x27;The quick brown fox jumps over the la_y dog&#x27;</span>)\r\n    ).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Throws an error if given param is not a string&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">checkPangramRegex</span>(<span class=\"hljs-literal\">undefined</span>)\r\n    }).<span class=\"hljs-title function_\">toThrow</span>(<span class=\"hljs-string\">&#x27;The given value is not a string&#x27;</span>)\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing checkPangramSet function&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;The quick brown fox jumps over the lazy dog&quot; is a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(\r\n      <span class=\"hljs-title function_\">checkPangramSet</span>(<span class=\"hljs-string\">&#x27;The quick brown fox jumps over the lazy dog&#x27;</span>)\r\n    ).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;Waltz, bad nymph, for quick jigs vex.&quot; is a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">checkPangramSet</span>(<span class=\"hljs-string\">&#x27;Waltz, bad nymph, for quick jigs vex.&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;Jived fox nymph grabs quick waltz.&quot; is a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">checkPangramSet</span>(<span class=\"hljs-string\">&#x27;Jived fox nymph grabs quick waltz.&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;My name is Unknown&quot; is NOT a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">checkPangramSet</span>(<span class=\"hljs-string\">&#x27;My name is Unknown&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;&quot;The quick brown fox jumps over the la_y dog&quot; is NOT a pangram&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(\r\n      <span class=\"hljs-title function_\">checkPangramSet</span>(<span class=\"hljs-string\">&#x27;The quick brown fox jumps over the la_y dog&#x27;</span>)\r\n    ).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Throws an error if given param is not a string&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">checkPangramSet</span>(<span class=\"hljs-literal\">undefined</span>)\r\n    }).<span class=\"hljs-title function_\">toThrow</span>(<span class=\"hljs-string\">&#x27;The given value is not a string&#x27;</span>)\r\n  })\r\n})\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Strings\\CheckPangram.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Strings\\CheckPangram.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\r\n\r\n<span class=\"hljs-comment\">/// wiki: https://en.wikipedia.org/wiki/Pangram</span>\r\n<span class=\"hljs-keyword\">module</span> CheckPangram <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">System</span>.Char <span class=\"hljs-keyword\">with</span>\r\n        <span class=\"hljs-keyword\">member</span> this.IsUpper()<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-operator\">=</span>\r\n            <span class=\"hljs-keyword\">match</span> this <span class=\"hljs-keyword\">with</span>\r\n            <span class=\"hljs-operator\">|</span> c <span class=\"hljs-keyword\">when</span> c <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-string\">&#x27;A&#x27;</span> <span class=\"hljs-operator\">&amp;&amp;</span> c <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-string\">&#x27;Z&#x27;</span> <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-literal\">true</span>\r\n            <span class=\"hljs-operator\">|</span> _ <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-literal\">false</span>\r\n\r\n        <span class=\"hljs-keyword\">member</span> this.IsLower()<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-operator\">=</span>\r\n            <span class=\"hljs-keyword\">match</span> this <span class=\"hljs-keyword\">with</span>\r\n            <span class=\"hljs-operator\">|</span> c <span class=\"hljs-keyword\">when</span> c <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span> <span class=\"hljs-operator\">&amp;&amp;</span> c <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-string\">&#x27;z&#x27;</span> <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-literal\">true</span>\r\n            <span class=\"hljs-operator\">|</span> _ <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-literal\">false</span>\r\n\r\n        <span class=\"hljs-keyword\">member</span> this.Lower()<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-operator\">=</span>\r\n            <span class=\"hljs-keyword\">match</span> this <span class=\"hljs-keyword\">with</span>\r\n            <span class=\"hljs-operator\">|</span> c <span class=\"hljs-keyword\">when</span> c <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-string\">&#x27;A&#x27;</span> <span class=\"hljs-operator\">&amp;&amp;</span> c <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-string\">&#x27;Z&#x27;</span> <span class=\"hljs-operator\">-&gt;</span> (char) ((int) this <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">32</span>)\r\n            <span class=\"hljs-operator\">|</span> _ <span class=\"hljs-operator\">-&gt;</span> this\r\n\r\n        <span class=\"hljs-keyword\">member</span> this.Upper()<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-operator\">=</span>\r\n            <span class=\"hljs-keyword\">match</span> this <span class=\"hljs-keyword\">with</span>\r\n            <span class=\"hljs-operator\">|</span> c <span class=\"hljs-keyword\">when</span> c <span class=\"hljs-operator\">&gt;=</span> <span class=\"hljs-string\">&#x27;a&#x27;</span> <span class=\"hljs-operator\">&amp;&amp;</span> c <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-string\">&#x27;z&#x27;</span> <span class=\"hljs-operator\">-&gt;</span> (char) ((int) this <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">32</span>)\r\n            <span class=\"hljs-operator\">|</span> _ <span class=\"hljs-operator\">-&gt;</span> this\r\n\r\n    <span class=\"hljs-keyword\">let</span> checkPangram (inputString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> frequency <span class=\"hljs-operator\">=</span> Set.empty\r\n        <span class=\"hljs-keyword\">let</span> inputStr <span class=\"hljs-operator\">=</span> inputString.Replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>) <span class=\"hljs-comment\">// Replacing all the whitespace in our sentence</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> alpha <span class=\"hljs-keyword\">in</span> inputStr <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;a&#x27;</span> <span class=\"hljs-operator\">&lt;=</span> alpha.Lower() <span class=\"hljs-operator\">&amp;&amp;</span> alpha.Lower() <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-string\">&#x27;z&#x27;</span> <span class=\"hljs-keyword\">then</span>\r\n                frequency <span class=\"hljs-operator\">&lt;-</span> frequency.Add(alpha.Lower())\r\n\r\n        <span class=\"hljs-keyword\">match</span> frequency.Count <span class=\"hljs-keyword\">with</span>\r\n        <span class=\"hljs-operator\">|</span> <span class=\"hljs-number\">26</span> <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-literal\">true</span>\r\n        <span class=\"hljs-operator\">|</span> _ <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-keyword\">if</span> inputStr <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">false</span>\r\n\r\n    <span class=\"hljs-keyword\">let</span> checkPangramFaster (inputString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> flag <span class=\"hljs-operator\">=</span> [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> <span class=\"hljs-number\">26</span> <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-operator\">|</span>]\r\n\r\n        <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> inputString <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-keyword\">if</span> char.IsLower() <span class=\"hljs-keyword\">then</span>\r\n                flag.SetValue(<span class=\"hljs-literal\">true</span>, (int) char <span class=\"hljs-operator\">-</span> (int) <span class=\"hljs-string\">&#x27;a&#x27;</span>)\r\n\r\n        flag <span class=\"hljs-operator\">|&gt;</span> Array.forall (<span class=\"hljs-built_in\">id</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "ngxingyu",
      "email": "ng.xingyu@dhs.sg",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Fahim Faisaal",
      "email": "57553028+fahimfaisaal@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "garifullin_aa",
      "email": "garifullin_aa@astral.ru",
      "commits": 2
    },
    {
      "name": "Askar Garifullin",
      "email": "askar.payment@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}