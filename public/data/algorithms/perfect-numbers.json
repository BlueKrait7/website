{
  "slug": "perfect-numbers",
  "name": "Perfect Numbers",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "f-sharp": {
      "dir": "Algorithms\\Math\\PerfectNumbers.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Math\\PerfectNumbers.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Math\r\n\r\n<span class=\"hljs-keyword\">module</span> PerfectNumbers <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-comment\">/// Check if a number is perfect. Time complexity: O(√n)</span>\r\n    <span class=\"hljs-keyword\">let</span> isPerfect n <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">match</span> n <span class=\"hljs-keyword\">with</span>\r\n        <span class=\"hljs-operator\">|</span> n <span class=\"hljs-keyword\">when</span> n <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-literal\">false</span>\r\n        <span class=\"hljs-operator\">|</span> n <span class=\"hljs-operator\">-&gt;</span>\r\n            { <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> n <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> }\r\n            <span class=\"hljs-operator\">|&gt;</span> Seq.takeWhile (<span class=\"hljs-keyword\">fun</span> i <span class=\"hljs-operator\">-&gt;</span> i <span class=\"hljs-operator\">*</span> i <span class=\"hljs-operator\">&lt;=</span> n)\r\n            <span class=\"hljs-operator\">|&gt;</span> Seq.filter ((<span class=\"hljs-operator\">%</span>) n <span class=\"hljs-operator\">&gt;&gt;</span> (<span class=\"hljs-operator\">=</span>) <span class=\"hljs-number\">0</span>)\r\n            <span class=\"hljs-operator\">|&gt;</span> Seq.fold (<span class=\"hljs-keyword\">fun</span> acc i <span class=\"hljs-operator\">-&gt;</span> acc <span class=\"hljs-operator\">+</span> i <span class=\"hljs-operator\">+</span> n <span class=\"hljs-operator\">/</span> i) <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-operator\">|&gt;</span> (<span class=\"hljs-operator\">=</span>) (<span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">*</span> n)\r\n"
    },
    "rust": {
      "dir": "src\\math\\perfect_numbers.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\math\\perfect_numbers.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_perfect_number</span>(num: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sum</span> = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..num - <span class=\"hljs-number\">1</span> {\r\n        <span class=\"hljs-keyword\">if</span> num % i == <span class=\"hljs-number\">0</span> {\r\n            sum += i;\r\n        }\r\n    }\r\n\r\n    num == sum\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">perfect_numbers</span>(max: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n\r\n    <span class=\"hljs-comment\">// It is not known if there are any odd perfect numbers, so we go around all the numbers.</span>\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..max + <span class=\"hljs-number\">1</span> {\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_ invoke__\">is_perfect_number</span>(i) {\r\n            result.<span class=\"hljs-title function_ invoke__\">push</span>(i);\r\n        }\r\n    }\r\n\r\n    result\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">is_perfect_number</span>(<span class=\"hljs-number\">6</span>), <span class=\"hljs-literal\">true</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">is_perfect_number</span>(<span class=\"hljs-number\">28</span>), <span class=\"hljs-literal\">true</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">is_perfect_number</span>(<span class=\"hljs-number\">496</span>), <span class=\"hljs-literal\">true</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">is_perfect_number</span>(<span class=\"hljs-number\">8128</span>), <span class=\"hljs-literal\">true</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">is_perfect_number</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-literal\">false</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">is_perfect_number</span>(<span class=\"hljs-number\">86</span>), <span class=\"hljs-literal\">false</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">is_perfect_number</span>(<span class=\"hljs-number\">497</span>), <span class=\"hljs-literal\">false</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">is_perfect_number</span>(<span class=\"hljs-number\">8120</span>), <span class=\"hljs-literal\">false</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">perfect_numbers</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">perfect_numbers</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">28</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">perfect_numbers</span>(<span class=\"hljs-number\">496</span>), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">496</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">perfect_numbers</span>(<span class=\"hljs-number\">1000</span>), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">496</span>]);\r\n    }\r\n}\r\n"
    },
    "aarch64_assembly": {
      "dir": "misc\\perfect_numbers.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/misc\\perfect_numbers.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\r\n<span class=\"hljs-comment\">/*  program perfectNumber64.s   */</span>\r\n<span class=\"hljs-comment\">/* use Euclide Formula : if M=(2puis p)-1 is prime M * (M+1)/2 is perfect see Wikipedia  */</span>\r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\r\n \r\n<span class=\"hljs-symbol\">.equ</span> MAXI,      <span class=\"hljs-number\">63</span>\r\n \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* Initialized data              */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.data</span>\r\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Perfect  : @ \\n&quot;</span>\r\n<span class=\"hljs-symbol\">szMessOverflow:</span>     <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Overflow in function isPrime.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.bss</span>  \r\n<span class=\"hljs-symbol\">sZoneConv:</span>                  <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/*  code section                 */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.text</span>\r\n<span class=\"hljs-symbol\">.global</span> main \r\n<span class=\"hljs-symbol\">main:</span>                               <span class=\"hljs-comment\">// entry of program </span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">2</span>                        <span class=\"hljs-comment\">// start 2</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">1</span>                        <span class=\"hljs-comment\">// counter 2 power</span>\r\n<span class=\"hljs-number\">1</span>:                                  <span class=\"hljs-comment\">// begin loop</span>\r\n    <span class=\"hljs-keyword\">lsl</span> x4,x4,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// 2 power</span>\r\n    <span class=\"hljs-keyword\">sub</span> x0,x4,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// - 1 </span>\r\n    <span class=\"hljs-keyword\">bl</span> isPrime                      <span class=\"hljs-comment\">// is prime ?</span>\r\n    <span class=\"hljs-keyword\">cbz</span> x0,<span class=\"hljs-number\">2</span>f                       <span class=\"hljs-comment\">// no</span>\r\n    <span class=\"hljs-keyword\">sub</span> x0,x4,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// yes</span>\r\n    <span class=\"hljs-keyword\">mul</span> x1,x0,x4                    <span class=\"hljs-comment\">// multiply m by m-1</span>\r\n    <span class=\"hljs-keyword\">lsr</span> x0,x1,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// divide by 2</span>\r\n    <span class=\"hljs-keyword\">bl</span> displayPerfect               <span class=\"hljs-comment\">// and display</span>\r\n<span class=\"hljs-number\">2</span>:\r\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// next power of 2</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,MAXI\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b\r\n \r\n<span class=\"hljs-number\">100</span>:                                <span class=\"hljs-comment\">// standard end of the program </span>\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                        <span class=\"hljs-comment\">// return code</span>\r\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                     <span class=\"hljs-comment\">// request to exit program</span>\r\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                           <span class=\"hljs-comment\">// perform the system call</span>\r\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>    .quad szCarriageReturn\r\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>         .quad sMessResult\r\n \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*      Display perfect number                                */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the number */</span>\r\n<span class=\"hljs-symbol\">displayPerfect:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> conversion10                 <span class=\"hljs-comment\">// call décimal conversion</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv            <span class=\"hljs-comment\">// insert conversion in message</span>\r\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess                <span class=\"hljs-comment\">// display message</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>                   .quad sZoneConv\r\n \r\n<span class=\"hljs-comment\">/***************************************************/</span>\r\n<span class=\"hljs-comment\">/*   is a number prime ?         */</span>\r\n<span class=\"hljs-comment\">/***************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the number */</span>\r\n<span class=\"hljs-comment\">/* x0 return 1 if prime  else 0  */</span>\r\n<span class=\"hljs-comment\">//2147483647  OK</span>\r\n<span class=\"hljs-comment\">//4294967297  NOK</span>\r\n<span class=\"hljs-comment\">//131071       OK</span>\r\n<span class=\"hljs-comment\">//1000003    OK </span>\r\n<span class=\"hljs-comment\">//10001363   OK</span>\r\n<span class=\"hljs-symbol\">isPrime:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x0\r\n    <span class=\"hljs-keyword\">sub</span> x1,x0,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// return zero</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">2</span>                   <span class=\"hljs-comment\">// for 1 and 2 return 1</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">2</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#2</span>\r\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\r\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// no prime </span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">3</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#3</span>\r\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f\r\n \r\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">5</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#5</span>\r\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\r\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// Pas premier</span>\r\n \r\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">7</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#7</span>\r\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\r\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// Pas premier</span>\r\n \r\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">11</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#11</span>\r\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\r\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// Pas premier</span>\r\n \r\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">13</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#13</span>\r\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\r\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// Pas premier</span>\r\n<span class=\"hljs-number\">2</span>:\r\n    <span class=\"hljs-keyword\">cmn</span> x0,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// carry à zero no error</span>\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// prime</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">99</span>:\r\n    <span class=\"hljs-keyword\">cmn</span> x0,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// carry à zero no error</span>\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>                  <span class=\"hljs-comment\">// prime</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\r\n    ret\r\n \r\n \r\n<span class=\"hljs-comment\">/**************************************************************/</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/*   Compute modulo de b power e modulo m  */</span>\r\n<span class=\"hljs-comment\">/*    Exemple 4 puissance 13 modulo 497 = 445         */</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0  number  */</span>\r\n<span class=\"hljs-comment\">/* x1 exposant */</span>\r\n<span class=\"hljs-comment\">/* x2 modulo   */</span>\r\n<span class=\"hljs-symbol\">moduloPuR64:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\r\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\r\n    stp x5,x6,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\r\n    stp x7,x8,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\r\n    stp x9,x10,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!       <span class=\"hljs-comment\">// save  registres</span>\r\n    <span class=\"hljs-keyword\">cbz</span> x0,<span class=\"hljs-number\">100</span>f\r\n    <span class=\"hljs-keyword\">cbz</span> x1,<span class=\"hljs-number\">100</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x8,x0\r\n    <span class=\"hljs-keyword\">mov</span> x7,x1\r\n    <span class=\"hljs-keyword\">mov</span> x6,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// result</span>\r\n    udiv x4,x8,x2\r\n    msub x9,x4,x2,x8           <span class=\"hljs-comment\">// remainder</span>\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">tst</span> x7,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// if bit = 1</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\r\n    <span class=\"hljs-keyword\">mul</span> x4,x9,x6\r\n    umulh x5,x9,x6\r\n    <span class=\"hljs-keyword\">mov</span> x6,x4\r\n    <span class=\"hljs-keyword\">mov</span> x0,x6\r\n    <span class=\"hljs-keyword\">mov</span> x1,x5\r\n    <span class=\"hljs-keyword\">bl</span> divisionReg128U         <span class=\"hljs-comment\">// division 128 bits</span>\r\n    <span class=\"hljs-keyword\">cbnz</span> x1,<span class=\"hljs-number\">99</span>f                <span class=\"hljs-comment\">// overflow</span>\r\n    <span class=\"hljs-keyword\">mov</span> x6,x3                  <span class=\"hljs-comment\">// remainder</span>\r\n<span class=\"hljs-number\">2</span>:\r\n    <span class=\"hljs-keyword\">mul</span> x8,x9,x9\r\n    umulh x5,x9,x9\r\n    <span class=\"hljs-keyword\">mov</span> x0,x8\r\n    <span class=\"hljs-keyword\">mov</span> x1,x5\r\n    <span class=\"hljs-keyword\">bl</span> divisionReg128U\r\n    <span class=\"hljs-keyword\">cbnz</span> x1,<span class=\"hljs-number\">99</span>f                <span class=\"hljs-comment\">// overflow</span>\r\n    <span class=\"hljs-keyword\">mov</span> x9,x3\r\n    <span class=\"hljs-keyword\">lsr</span> x7,x7,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cbnz</span> x7,<span class=\"hljs-number\">1</span>b\r\n    <span class=\"hljs-keyword\">mov</span> x0,x6                  <span class=\"hljs-comment\">// result</span>\r\n    <span class=\"hljs-keyword\">cmn</span> x0,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// carry à zero no error</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">99</span>:\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessOverflow\r\n    <span class=\"hljs-keyword\">bl</span>  affichageMess          <span class=\"hljs-comment\">// display error message</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// carry set error</span>\r\n    <span class=\"hljs-keyword\">mov</span> x0,-<span class=\"hljs-number\">1</span>                  <span class=\"hljs-comment\">// code erreur</span>\r\n \r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x9,x10,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\r\n    ldp x7,x8,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\r\n    ldp x5,x6,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\r\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\r\n    ret                        <span class=\"hljs-comment\">// retour adresse lr x30</span>\r\n<span class=\"hljs-symbol\">qAdrszMessOverflow:</span>         .quad  szMessOverflow\r\n<span class=\"hljs-comment\">/***************************************************/</span>\r\n<span class=\"hljs-comment\">/*   division d un nombre de 128 bits par un nombre de 64 bits */</span>\r\n<span class=\"hljs-comment\">/***************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contient partie basse dividende */</span>\r\n<span class=\"hljs-comment\">/* x1 contient partie haute dividente */</span>\r\n<span class=\"hljs-comment\">/* x2 contient le diviseur */</span>\r\n<span class=\"hljs-comment\">/* x0 retourne partie basse quotient */</span>\r\n<span class=\"hljs-comment\">/* x1 retourne partie haute quotient */</span>\r\n<span class=\"hljs-comment\">/* x3 retourne le reste */</span>\r\n<span class=\"hljs-symbol\">divisionReg128U:</span>\r\n    stp x6,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\r\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\r\n    <span class=\"hljs-keyword\">mov</span> x5,<span class=\"hljs-number\">#0</span>                  <span class=\"hljs-comment\">// raz du reste R</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">#128</span>                <span class=\"hljs-comment\">// compteur de boucle</span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#0</span>                  <span class=\"hljs-comment\">// dernier bit</span>\r\n<span class=\"hljs-number\">1</span>:    \r\n    <span class=\"hljs-keyword\">lsl</span> x5,x5,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// on decale le reste de 1</span>\r\n    <span class=\"hljs-keyword\">tst</span> x1,<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">63</span>               <span class=\"hljs-comment\">// test du bit le plus à gauche</span>\r\n    <span class=\"hljs-keyword\">lsl</span> x1,x1,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// on decale la partie haute du quotient de 1</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\r\n    <span class=\"hljs-keyword\">orr</span>  x5,x5,<span class=\"hljs-number\">#1</span>              <span class=\"hljs-comment\">// et on le pousse dans le reste R</span>\r\n<span class=\"hljs-number\">2</span>:\r\n    <span class=\"hljs-keyword\">tst</span> x0,<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">63</span>\r\n    <span class=\"hljs-keyword\">lsl</span> x0,x0,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// puis on decale la partie basse </span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">3</span>f\r\n    <span class=\"hljs-keyword\">orr</span> x1,x1,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// et on pousse le bit de gauche dans la partie haute</span>\r\n<span class=\"hljs-number\">3</span>:\r\n    <span class=\"hljs-keyword\">orr</span> x0,x0,x4               <span class=\"hljs-comment\">// position du dernier bit du quotient</span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#0</span>                  <span class=\"hljs-comment\">// raz du bit</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x5,x2\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">4</span>f\r\n    <span class=\"hljs-keyword\">sub</span> x5,x5,x2               <span class=\"hljs-comment\">// on enleve le diviseur du reste</span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#1</span>                  <span class=\"hljs-comment\">// dernier bit à 1</span>\r\n<span class=\"hljs-number\">4</span>:\r\n                               <span class=\"hljs-comment\">// et boucle</span>\r\n    <span class=\"hljs-keyword\">subs</span> x3,x3,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">bgt</span> <span class=\"hljs-number\">1</span>b    \r\n    <span class=\"hljs-keyword\">lsl</span> x1,x1,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// on decale le quotient de 1</span>\r\n    <span class=\"hljs-keyword\">tst</span> x0,<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">63</span>\r\n    <span class=\"hljs-keyword\">lsl</span> x0,x0,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// puis on decale la partie basse </span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">5</span>f\r\n    <span class=\"hljs-keyword\">orr</span> x1,x1,<span class=\"hljs-number\">#1</span>\r\n<span class=\"hljs-number\">5</span>:\r\n    <span class=\"hljs-keyword\">orr</span> x0,x0,x4               <span class=\"hljs-comment\">// position du dernier bit du quotient</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,x5\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\r\n    ldp x6,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\r\n    ret                        <span class=\"hljs-comment\">// retour adresse lr x30</span>\r\n \r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "DONSIMON92",
      "email": "47272787+DONSIMON92@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "i1e0",
      "email": "96235137+i1e0@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Idrek",
      "email": "Idrek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}