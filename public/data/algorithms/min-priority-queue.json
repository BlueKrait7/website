{
  "slug": "min-priority-queue",
  "name": "Min Priority Queue",
  "categories": [
    "datastructures",
    "heap"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures\\Heap\\test\\MinPriorityQueue.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures\\Heap\\test\\MinPriorityQueue.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MinPriorityQueue</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../MinPriorityQueue&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;MinPriorityQueue&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> values = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>]\r\n  <span class=\"hljs-keyword\">const</span> capacity = values.<span class=\"hljs-property\">length</span>\r\n  <span class=\"hljs-keyword\">let</span> queue\r\n\r\n  <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n    queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MinPriorityQueue</span>(capacity)\r\n    values.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> queue.<span class=\"hljs-title function_\">insert</span>(v))\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check heap ordering&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> mockFn = jest.<span class=\"hljs-title function_\">fn</span>()\r\n    queue.<span class=\"hljs-title function_\">print</span>(mockFn)\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(mockFn.<span class=\"hljs-property\">mock</span>.<span class=\"hljs-property\">calls</span>.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Expect one call</span>\r\n    <span class=\"hljs-title function_\">expect</span>(mockFn.<span class=\"hljs-property\">mock</span>.<span class=\"hljs-property\">calls</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Expect one argument</span>\r\n\r\n    <span class=\"hljs-keyword\">const</span> heap = mockFn.<span class=\"hljs-property\">mock</span>.<span class=\"hljs-property\">calls</span>[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\r\n    <span class=\"hljs-title function_\">expect</span>(heap.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(capacity)\r\n    <span class=\"hljs-title function_\">expect</span>(heap).<span class=\"hljs-title function_\">toStrictEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;heapSort() expected to reverse the heap ordering&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    queue.<span class=\"hljs-title function_\">heapReverse</span>()\r\n    <span class=\"hljs-keyword\">const</span> mockFn = jest.<span class=\"hljs-title function_\">fn</span>()\r\n    queue.<span class=\"hljs-title function_\">print</span>(mockFn)\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(mockFn.<span class=\"hljs-property\">mock</span>.<span class=\"hljs-property\">calls</span>.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(mockFn.<span class=\"hljs-property\">mock</span>.<span class=\"hljs-property\">calls</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">const</span> heap = mockFn.<span class=\"hljs-property\">mock</span>.<span class=\"hljs-property\">calls</span>[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\r\n    <span class=\"hljs-title function_\">expect</span>(heap.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toBe</span>(capacity)\r\n    <span class=\"hljs-title function_\">expect</span>(heap).<span class=\"hljs-title function_\">toStrictEqual</span>([<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;delete() function work properly&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;return undefined if heap is empty&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-keyword\">const</span> minqueue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MinPriorityQueue</span>(capacity)\r\n      <span class=\"hljs-keyword\">const</span> min = minqueue.<span class=\"hljs-title function_\">delete</span>()\r\n      <span class=\"hljs-title function_\">expect</span>(min).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">undefined</span>)\r\n    })\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;return min value and remove it&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-keyword\">const</span> sortedValues = values.<span class=\"hljs-title function_\">sort</span>()\r\n      <span class=\"hljs-keyword\">let</span> initialSize = queue.<span class=\"hljs-property\">size</span>\r\n      sortedValues.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">minValue, index</span>) =&gt;</span> {\r\n        <span class=\"hljs-keyword\">const</span> min = queue.<span class=\"hljs-title function_\">delete</span>()\r\n        <span class=\"hljs-title function_\">expect</span>(min).<span class=\"hljs-title function_\">toBe</span>(minValue)\r\n        <span class=\"hljs-title function_\">expect</span>(queue.<span class=\"hljs-property\">size</span>).<span class=\"hljs-title function_\">toBe</span>(--initialSize)\r\n      })\r\n      <span class=\"hljs-title function_\">expect</span>(queue.<span class=\"hljs-property\">size</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n    })\r\n  })\r\n})\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\heaps\\MinPriorityQueue.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\heaps\\MinPriorityQueue.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.heaps;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Minimum Priority Queue It is a part of heap data structure A heap is a\r\n * specific tree based data structure in which all the nodes of tree are in a\r\n * specific order. that is the children are arranged in some respect of their\r\n * parents, can either be greater or less than the parent. This makes it a min\r\n * priority queue or max priority queue.\r\n *\r\n * &lt;p&gt;\r\n *\r\n * &lt;p&gt;\r\n * Functions: insert, delete, peek, isEmpty, print, heapSort, sink\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinPriorityQueue</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[] heap;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> capacity;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\r\n\r\n    <span class=\"hljs-comment\">// calss the constructor and initializes the capacity</span>\r\n    MinPriorityQueue(<span class=\"hljs-type\">int</span> c) {\r\n        <span class=\"hljs-built_in\">this</span>.capacity = c;\r\n        <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-built_in\">this</span>.heap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[c + <span class=\"hljs-number\">1</span>];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// inserts the key at the end and rearranges it</span>\r\n    <span class=\"hljs-comment\">// so that the binary heap is in appropriate order</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.isFull()) {\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-built_in\">this</span>.size + <span class=\"hljs-number\">1</span>] = key;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.size + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.heap[k] &lt; <span class=\"hljs-built_in\">this</span>.heap[k / <span class=\"hljs-number\">2</span>]) {\r\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.heap[k];\r\n                <span class=\"hljs-built_in\">this</span>.heap[k] = <span class=\"hljs-built_in\">this</span>.heap[k / <span class=\"hljs-number\">2</span>];\r\n                <span class=\"hljs-built_in\">this</span>.heap[k / <span class=\"hljs-number\">2</span>] = temp;\r\n            }\r\n            k = k / <span class=\"hljs-number\">2</span>;\r\n        }\r\n        <span class=\"hljs-built_in\">this</span>.size++;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// returns the highest priority value</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peek</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">1</span>];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// returns boolean value whether the heap is empty or not</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> == <span class=\"hljs-built_in\">this</span>.size) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// returns boolean value whether the heap is full or not</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFull</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.size == <span class=\"hljs-built_in\">this</span>.capacity) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// prints the heap</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-built_in\">this</span>.capacity; i++) {\r\n            System.out.print(<span class=\"hljs-built_in\">this</span>.heap[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// heap sorting can be done by performing</span>\r\n    <span class=\"hljs-comment\">// delete function to the number of times of the size of the heap</span>\r\n    <span class=\"hljs-comment\">// it returns reverse sort because it is a min priority queue</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">heapSort</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">this</span>.capacity; i++) {\r\n            <span class=\"hljs-built_in\">this</span>.delete();\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// this function reorders the heap after every delete function</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sink</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">2</span> * k &lt;= <span class=\"hljs-built_in\">this</span>.size || <span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &lt;= <span class=\"hljs-built_in\">this</span>.size) {\r\n            <span class=\"hljs-type\">int</span> minIndex;\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k] &gt;= <span class=\"hljs-built_in\">this</span>.heap[k]) {\r\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &lt;= <span class=\"hljs-built_in\">this</span>.size &amp;&amp; <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-built_in\">this</span>.heap[k]) {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-built_in\">this</span>.size) {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-built_in\">this</span>.size) {\r\n                minIndex = <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k] &lt; <span class=\"hljs-built_in\">this</span>.heap[k] ? <span class=\"hljs-number\">2</span> * k : k;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.heap[k] &gt; <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k] || <span class=\"hljs-built_in\">this</span>.heap[k] &gt; <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>]) {\r\n                    minIndex = <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k] &lt; <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>] ? <span class=\"hljs-number\">2</span> * k : <span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    minIndex = k;\r\n                }\r\n            }\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.heap[k];\r\n            <span class=\"hljs-built_in\">this</span>.heap[k] = <span class=\"hljs-built_in\">this</span>.heap[minIndex];\r\n            <span class=\"hljs-built_in\">this</span>.heap[minIndex] = temp;\r\n            k = minIndex;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// deletes the highest priority value from the heap</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-built_in\">this</span>.size];\r\n        <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-built_in\">this</span>.size] = min;\r\n        <span class=\"hljs-built_in\">this</span>.size--;\r\n        <span class=\"hljs-built_in\">this</span>.sink();\r\n        <span class=\"hljs-keyword\">return</span> min;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">// testing</span>\r\n        <span class=\"hljs-type\">MinPriorityQueue</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MinPriorityQueue</span>(<span class=\"hljs-number\">8</span>);\r\n        q.insert(<span class=\"hljs-number\">5</span>);\r\n        q.insert(<span class=\"hljs-number\">2</span>);\r\n        q.insert(<span class=\"hljs-number\">4</span>);\r\n        q.insert(<span class=\"hljs-number\">1</span>);\r\n        q.insert(<span class=\"hljs-number\">7</span>);\r\n        q.insert(<span class=\"hljs-number\">6</span>);\r\n        q.insert(<span class=\"hljs-number\">3</span>);\r\n        q.insert(<span class=\"hljs-number\">8</span>);\r\n        q.print(); <span class=\"hljs-comment\">// [ 1, 2, 3, 5, 7, 6, 4, 8 ]</span>\r\n        q.heapSort();\r\n        q.print(); <span class=\"hljs-comment\">// [ 8, 7, 6, 5, 4, 3, 2, 1 ]</span>\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Juliano Nunes",
      "email": "julianomarquesnunes@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Pablo Salas Gelich",
      "email": "77918449+pasagedev@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Saurabh Thakur",
      "email": "thakursaurabh1998@gmail.com",
      "commits": 2
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}