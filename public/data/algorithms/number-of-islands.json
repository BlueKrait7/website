{
  "slug": "number-of-islands",
  "name": "Number Of Islands",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Graphs\\NumberOfIslands.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs\\NumberOfIslands.js",
      "code": "<span class=\"hljs-comment\">/* Number of Islands\r\nhttps://dev.to/rattanakchea/amazons-interview-question-count-island-21h6\r\nGiven a 2d grid map of &#x27;1&#x27;s (land) and &#x27;0&#x27;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\r\n\r\na two dimensional grid map\r\neach element is going to represent a piece of land\r\n1 is land,\r\n0 is water\r\noutput a number which is the number of islands\r\n\r\nExample 1:\r\n  Input:\r\n  11110\r\n  11010\r\n  11000\r\n  00000\r\n\r\n  Output: 1\r\n\r\nExample 2:\r\n  Input:\r\n  11000\r\n  11000\r\n  00100\r\n  00011\r\n\r\n  Output: 3\r\n\r\nI: two dimensional array\r\nO: a single integer; total number of islands\r\n\r\nPseudocode:\r\n  OUTER FUNCTION\r\n    set count to 0\r\n\r\n    INNER FUNCTION - flood (col, row)\r\n      if the tile is water\r\n        return\r\n      make tile water(flood tile)\r\n      invoke flood on the neighbor coordinates\r\n\r\n    iterate over the matrix (col, row)\r\n      if the current element is a 1\r\n        increment count\r\n        invoke flood (coordinates for col and row)\r\n\r\n    Return the count\r\n*/</span>\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">islands</span> = (<span class=\"hljs-params\">matrixGrid</span>) =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> matrix = matrixGrid\r\n  <span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">0</span>\r\n\r\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">flood</span> = (<span class=\"hljs-params\">row, col</span>) =&gt; {\r\n    <span class=\"hljs-keyword\">if</span> (row &lt; <span class=\"hljs-number\">0</span> || col &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// Off the map above or left</span>\r\n    <span class=\"hljs-keyword\">if</span> (row &gt;= matrix.<span class=\"hljs-property\">length</span> || col &gt;= matrix[row].<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// Off the map below or right</span>\r\n\r\n    <span class=\"hljs-keyword\">const</span> tile = matrix[row][col]\r\n    <span class=\"hljs-keyword\">if</span> (tile !== <span class=\"hljs-string\">&#x27;1&#x27;</span>) <span class=\"hljs-keyword\">return</span>\r\n\r\n    matrix[row][col] = <span class=\"hljs-string\">&#x27;0&#x27;</span>\r\n\r\n    <span class=\"hljs-title function_\">flood</span>(row + <span class=\"hljs-number\">1</span>, col) <span class=\"hljs-comment\">// Down</span>\r\n    <span class=\"hljs-title function_\">flood</span>(row - <span class=\"hljs-number\">1</span>, col) <span class=\"hljs-comment\">// Up</span>\r\n    <span class=\"hljs-title function_\">flood</span>(row, col + <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Right</span>\r\n    <span class=\"hljs-title function_\">flood</span>(row, col - <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Left</span>\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> row = <span class=\"hljs-number\">0</span>; row &lt; matrix.<span class=\"hljs-property\">length</span>; row += <span class=\"hljs-number\">1</span>) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> col = <span class=\"hljs-number\">0</span>; col &lt; matrix[row].<span class=\"hljs-property\">length</span>; col += <span class=\"hljs-number\">1</span>) {\r\n      <span class=\"hljs-keyword\">const</span> current = matrix[row][col]\r\n      <span class=\"hljs-keyword\">if</span> (current === <span class=\"hljs-string\">&#x27;1&#x27;</span>) {\r\n        <span class=\"hljs-title function_\">flood</span>(row, col)\r\n        counter += <span class=\"hljs-number\">1</span>\r\n      }\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> counter\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { islands }\r\n\r\n<span class=\"hljs-comment\">// islands(</span>\r\n<span class=\"hljs-comment\">//   [&#x27;1&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;],</span>\r\n<span class=\"hljs-comment\">//   [&#x27;1&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;],</span>\r\n<span class=\"hljs-comment\">//   [&#x27;0&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;0&#x27;],</span>\r\n<span class=\"hljs-comment\">//   [&#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;1&#x27;]</span>\r\n<span class=\"hljs-comment\">// )</span>\r\n"
    },
    "ruby": {
      "dir": "searches\\number_of_islands.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/searches\\number_of_islands.rb",
      "code": "<span class=\"hljs-comment\"># Given an m x n 2D binary grid grid which represents a map of &#x27;1&#x27;s (land) and &#x27;0&#x27;s (water), return the number of islands.</span>\r\n<span class=\"hljs-comment\"># An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</span>\r\n\r\n<span class=\"hljs-comment\"># Example 1:</span>\r\n<span class=\"hljs-comment\"># Input: grid = [</span>\r\n<span class=\"hljs-comment\">#  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span>\r\n<span class=\"hljs-comment\">#  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span>\r\n<span class=\"hljs-comment\">#  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span>\r\n<span class=\"hljs-comment\">#  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span>\r\n<span class=\"hljs-comment\"># ]</span>\r\n<span class=\"hljs-comment\"># Output: 1</span>\r\n\r\n<span class=\"hljs-comment\"># Example 2:</span>\r\n<span class=\"hljs-comment\"># Input: grid = [</span>\r\n<span class=\"hljs-comment\">#  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span>\r\n<span class=\"hljs-comment\">#  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span>\r\n<span class=\"hljs-comment\">#  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span>\r\n<span class=\"hljs-comment\">#  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span>\r\n<span class=\"hljs-comment\"># ]</span>\r\n<span class=\"hljs-comment\"># Output: 3</span>\r\n\r\n<span class=\"hljs-comment\"># Constraints:</span>\r\n<span class=\"hljs-comment\"># m == grid.length</span>\r\n<span class=\"hljs-comment\"># n == grid[i].length</span>\r\n<span class=\"hljs-comment\"># 1 &lt;= m, n &lt;= 300</span>\r\n<span class=\"hljs-comment\"># grid[i][j] is &#x27;0&#x27; or &#x27;1&#x27;.</span>\r\n\r\n<span class=\"hljs-comment\"># DFS, Recursive Bottom Up Approach - O(n*m) Time / O(1) Space</span>\r\n<span class=\"hljs-comment\"># Init num_of_islands = 0, return if the grid is empty</span>\r\n<span class=\"hljs-comment\"># Start a double loop with index to iterate through each plot (each value is a plot of either water or land in this case)</span>\r\n<span class=\"hljs-comment\"># if the plot is land, dfs(grid, x, y)</span>\r\n<span class=\"hljs-comment\"># num_of_islands += 1</span>\r\n<span class=\"hljs-comment\"># Return num_of_islands</span>\r\n\r\n<span class=\"hljs-comment\"># dfs(grid, x, y)</span>\r\n<span class=\"hljs-comment\"># Return if x or y are out of bounds, or if the plot is water</span>\r\n<span class=\"hljs-comment\"># Make the current plot water</span>\r\n<span class=\"hljs-comment\"># Call dfs again for up, down, left, and right</span>\r\n\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Character[][]} grid</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Integer}</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">num_islands</span><span class=\"hljs-params\">(grid)</span></span>\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> grid.empty?\r\n\r\n  <span class=\"hljs-comment\"># init num of islands</span>\r\n  islands = <span class=\"hljs-number\">0</span>\r\n\r\n  <span class=\"hljs-comment\"># loop through each element (plot) in the 2d array</span>\r\n  grid.each_with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|row, x|</span>\r\n    row.each_with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|plot, y|</span>\r\n      <span class=\"hljs-comment\"># if the plot is water, start a dfs</span>\r\n      <span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">unless</span> plot == <span class=\"hljs-string\">&#x27;1&#x27;</span>\r\n\r\n      dfs(grid, x, y)\r\n      <span class=\"hljs-comment\"># add 1 to islands once all connected land plots are searched</span>\r\n      islands += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># return ans</span>\r\n  islands\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(grid, x, y)</span></span>\r\n  <span class=\"hljs-comment\"># don&#x27;t search if out of bounds, or if it&#x27;s already water</span>\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-params\">||</span> x &gt;= grid.length <span class=\"hljs-params\">||</span> y &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-params\">||</span> y &gt;= grid[<span class=\"hljs-number\">0</span>].length <span class=\"hljs-params\">||</span> grid[x][y] == <span class=\"hljs-string\">&#x27;0&#x27;</span>\r\n\r\n  <span class=\"hljs-comment\"># set the plot to water</span>\r\n  grid[x][y] = <span class=\"hljs-string\">&#x27;0&#x27;</span>\r\n\r\n  <span class=\"hljs-comment\"># search each adjacent plot</span>\r\n  dfs(grid, x - <span class=\"hljs-number\">1</span>, y) <span class=\"hljs-comment\"># up</span>\r\n  dfs(grid, x + <span class=\"hljs-number\">1</span>, y) <span class=\"hljs-comment\"># down</span>\r\n  dfs(grid, x, y - <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\"># left</span>\r\n  dfs(grid, x, y + <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\"># right</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "sidaksohi",
      "email": "31377210+sidaksohi@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Kayla",
      "email": "golderkayla@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}