{
  "slug": "lempel-ziv",
  "name": "Lempel Ziv",
  "categories": [
    "compression"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "compression\\lempel_ziv.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/compression\\lempel_ziv.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    One of the several implementations of Lempel–Ziv–Welch compression algorithm\r\n    https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n<span class=\"hljs-keyword\">import</span> os\r\n<span class=\"hljs-keyword\">import</span> sys\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">read_file_binary</span>(<span class=\"hljs-params\">file_path: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Reads given file as bytes and returns them as a long string\r\n    &quot;&quot;&quot;</span>\r\n    result = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file_path, <span class=\"hljs-string\">&quot;rb&quot;</span>) <span class=\"hljs-keyword\">as</span> binary_file:\r\n            data = binary_file.read()\r\n        <span class=\"hljs-keyword\">for</span> dat <span class=\"hljs-keyword\">in</span> data:\r\n            curr_byte = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{dat:08b}</span>&quot;</span>\r\n            result += curr_byte\r\n        <span class=\"hljs-keyword\">return</span> result\r\n    <span class=\"hljs-keyword\">except</span> OSError:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;File not accessible&quot;</span>)\r\n        sys.exit()\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_key_to_lexicon</span>(<span class=\"hljs-params\">\r\n    lexicon: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>], curr_string: <span class=\"hljs-built_in\">str</span>, index: <span class=\"hljs-built_in\">int</span>, last_match_id: <span class=\"hljs-built_in\">str</span>\r\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Adds new strings (curr_string + &quot;0&quot;,  curr_string + &quot;1&quot;) to the lexicon\r\n    &quot;&quot;&quot;</span>\r\n    lexicon.pop(curr_string)\r\n    lexicon[curr_string + <span class=\"hljs-string\">&quot;0&quot;</span>] = last_match_id\r\n\r\n    <span class=\"hljs-keyword\">if</span> math.log2(index).is_integer():\r\n        <span class=\"hljs-keyword\">for</span> curr_key <span class=\"hljs-keyword\">in</span> lexicon:\r\n            lexicon[curr_key] = <span class=\"hljs-string\">&quot;0&quot;</span> + lexicon[curr_key]\r\n\r\n    lexicon[curr_string + <span class=\"hljs-string\">&quot;1&quot;</span>] = <span class=\"hljs-built_in\">bin</span>(index)[<span class=\"hljs-number\">2</span>:]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">compress_data</span>(<span class=\"hljs-params\">data_bits: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Compresses given data_bits using Lempel–Ziv–Welch compression algorithm\r\n    and returns the result as a string\r\n    &quot;&quot;&quot;</span>\r\n    lexicon = {<span class=\"hljs-string\">&quot;0&quot;</span>: <span class=\"hljs-string\">&quot;0&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>}\r\n    result, curr_string = <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>\r\n    index = <span class=\"hljs-built_in\">len</span>(lexicon)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(data_bits)):\r\n        curr_string += data_bits[i]\r\n        <span class=\"hljs-keyword\">if</span> curr_string <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> lexicon:\r\n            <span class=\"hljs-keyword\">continue</span>\r\n\r\n        last_match_id = lexicon[curr_string]\r\n        result += last_match_id\r\n        add_key_to_lexicon(lexicon, curr_string, index, last_match_id)\r\n        index += <span class=\"hljs-number\">1</span>\r\n        curr_string = <span class=\"hljs-string\">&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> curr_string != <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-keyword\">and</span> curr_string <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> lexicon:\r\n        curr_string += <span class=\"hljs-string\">&quot;0&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> curr_string != <span class=\"hljs-string\">&quot;&quot;</span>:\r\n        last_match_id = lexicon[curr_string]\r\n        result += last_match_id\r\n\r\n    <span class=\"hljs-keyword\">return</span> result\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_file_length</span>(<span class=\"hljs-params\">source_path: <span class=\"hljs-built_in\">str</span>, compressed: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Adds given file&#x27;s length in front (using Elias  gamma coding) of the compressed\r\n    string\r\n    &quot;&quot;&quot;</span>\r\n    file_length = os.path.getsize(source_path)\r\n    file_length_binary = <span class=\"hljs-built_in\">bin</span>(file_length)[<span class=\"hljs-number\">2</span>:]\r\n    length_length = <span class=\"hljs-built_in\">len</span>(file_length_binary)\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0&quot;</span> * (length_length - <span class=\"hljs-number\">1</span>) + file_length_binary + compressed\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">write_file_binary</span>(<span class=\"hljs-params\">file_path: <span class=\"hljs-built_in\">str</span>, to_write: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Writes given to_write string (should only consist of 0&#x27;s and 1&#x27;s) as bytes in the\r\n    file\r\n    &quot;&quot;&quot;</span>\r\n    byte_length = <span class=\"hljs-number\">8</span>\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file_path, <span class=\"hljs-string\">&quot;wb&quot;</span>) <span class=\"hljs-keyword\">as</span> opened_file:\r\n            result_byte_array = [\r\n                to_write[i : i + byte_length]\r\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(to_write), byte_length)\r\n            ]\r\n\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(result_byte_array[-<span class=\"hljs-number\">1</span>]) % byte_length == <span class=\"hljs-number\">0</span>:\r\n                result_byte_array.append(<span class=\"hljs-string\">&quot;10000000&quot;</span>)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                result_byte_array[-<span class=\"hljs-number\">1</span>] += <span class=\"hljs-string\">&quot;1&quot;</span> + <span class=\"hljs-string\">&quot;0&quot;</span> * (\r\n                    byte_length - <span class=\"hljs-built_in\">len</span>(result_byte_array[-<span class=\"hljs-number\">1</span>]) - <span class=\"hljs-number\">1</span>\r\n                )\r\n\r\n            <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> result_byte_array:\r\n                opened_file.write(<span class=\"hljs-built_in\">int</span>(elem, <span class=\"hljs-number\">2</span>).to_bytes(<span class=\"hljs-number\">1</span>, byteorder=<span class=\"hljs-string\">&quot;big&quot;</span>))\r\n    <span class=\"hljs-keyword\">except</span> OSError:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;File not accessible&quot;</span>)\r\n        sys.exit()\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">compress</span>(<span class=\"hljs-params\">source_path: <span class=\"hljs-built_in\">str</span>, destination_path: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Reads source file, compresses it and writes the compressed result in destination\r\n    file\r\n    &quot;&quot;&quot;</span>\r\n    data_bits = read_file_binary(source_path)\r\n    compressed = compress_data(data_bits)\r\n    compressed = add_file_length(source_path, compressed)\r\n    write_file_binary(destination_path, compressed)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    compress(sys.argv[<span class=\"hljs-number\">1</span>], sys.argv[<span class=\"hljs-number\">2</span>])\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "Erwin Junge",
      "email": "erwin@junge.nl",
      "commits": 1
    },
    {
      "name": "Ioane Margiani",
      "email": "margianiioane@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}