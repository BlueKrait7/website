{
  "slug": "fibonacci-heap",
  "name": "Fibonacci Heap",
  "categories": [
    "datastructures",
    "heap"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/Heap/FibonacciHeap/FibonacciHeap.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\DataStructures\\Heap\\FibonacciHeap\\FibonacciHeap.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Heap.FibonacciHeap</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A generic implementation of a Fibonacci heap.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         A Fibonacci heap is similar to a standard binary heap</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;see cref=&quot;DataStructures.Heap.BinaryHeap{T}&quot; /&gt;</span>, however it uses concepts</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         of amortized analysis to provide theoretical speedups on common operations like</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         insert, union, and decrease-key while maintaining the same speed on all other</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         operations.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         In practice, Fibonacci heaps are more complicated than binary heaps and require</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         a large input problems before the benifits of the theoretical speed up</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         begin to show.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         References:</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         [1] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest,</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         and Clifford Stein. 2009. Introduction to Algorithms, Third Edition (3rd. ed.).</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         The MIT Press.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of elements in binary heap.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FibonacciHeap</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">IComparable</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets or sets the count of the number of nodes in the Fibonacci heap.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Count { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets or sets a reference to the MinItem. The MinItem and all of its siblings</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     comprise the root list, a list of trees that satisfy the heap property and</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     are joined in a circularly doubly linked list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">private</span> FHeapNode&lt;T&gt;? MinItem { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Add item <span class=\"hljs-doctag\">&lt;c&gt;</span>x<span class=\"hljs-doctag\">&lt;/c&gt;</span> to this Fibonacci heap.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To add an item to a Fibonacci heap, we simply add it to the &quot;root list&quot;,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     a circularly doubly linked list where our minimum item sits. Since adding</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     items to a linked list takes O(1) time, the overall time to perform this</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     operation is O(1).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>An item to push onto the heap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A reference to the item as it is in the heap. This is used for</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     operations like decresing key.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> FHeapNode&lt;T&gt; <span class=\"hljs-title\">Push</span>(<span class=\"hljs-params\">T x</span>)</span>\r\n        {\r\n            Count++;\r\n\r\n            <span class=\"hljs-keyword\">var</span> newItem = <span class=\"hljs-keyword\">new</span> FHeapNode&lt;T&gt;(x);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (MinItem == <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                MinItem = newItem;\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                MinItem.AddRight(newItem);\r\n\r\n                <span class=\"hljs-keyword\">if</span> (newItem.Key.CompareTo(MinItem.Key) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    MinItem = newItem;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> newItem;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Combines all the elements of two fibonacci heaps.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To union two Fibonacci heaps is a single fibonacci heap is a single heap</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     that contains all the elements of both heaps. This can be done in O(1) time</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     by concatenating the root lists together.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     For more details on how two circularly linked lists are concatenated, see</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;see cref=&quot;FHeapNode{T}.ConcatenateRight&quot; /&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finally, check to see which of <span class=\"hljs-doctag\">&lt;c&gt;</span>this.MinItem<span class=\"hljs-doctag\">&lt;/c&gt;</span> and <span class=\"hljs-doctag\">&lt;c&gt;</span>other.MinItem<span class=\"hljs-doctag\">&lt;/c&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     is smaller, and set <span class=\"hljs-doctag\">&lt;c&gt;</span>this.MinItem<span class=\"hljs-doctag\">&lt;/c&gt;</span> accordingly</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This operation destroys <span class=\"hljs-doctag\">&lt;c&gt;</span>other<span class=\"hljs-doctag\">&lt;/c&gt;</span>.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;other&quot;&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Another heap whose elements we wish to add to this heap.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The other heap will be destroyed as a result.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Union</span>(<span class=\"hljs-params\">FibonacciHeap&lt;T&gt; other</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// If there are no items in the other heap, then there is nothing to do.</span>\r\n            <span class=\"hljs-keyword\">if</span> (other.MinItem == <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// If this heap is empty, simply set it equal to the other heap</span>\r\n            <span class=\"hljs-keyword\">if</span> (MinItem == <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-comment\">// Set this heap to the other one</span>\r\n                MinItem = other.MinItem;\r\n                Count = other.Count;\r\n\r\n                <span class=\"hljs-comment\">// Destroy the other heap</span>\r\n                other.MinItem = <span class=\"hljs-literal\">null</span>;\r\n                other.Count = <span class=\"hljs-number\">0</span>;\r\n\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            Count += other.Count;\r\n\r\n            <span class=\"hljs-comment\">// &lt;see cref=&quot;DataStructures.FibonacciHeap{T}.FHeapNode.ConcatenateRight(DataStructures.FibonacciHeap{T}.FHeapNode)&quot;/&gt;</span>\r\n            MinItem.ConcatenateRight(other.MinItem);\r\n\r\n            <span class=\"hljs-comment\">// Set the MinItem to the smaller of the two MinItems</span>\r\n            <span class=\"hljs-keyword\">if</span> (other.MinItem.Key.CompareTo(MinItem.Key) &lt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                MinItem = other.MinItem;\r\n            }\r\n\r\n            other.MinItem = <span class=\"hljs-literal\">null</span>;\r\n            other.Count = <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Return the MinItem and remove it from the heap.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This function (with all of its helper functions) is the most complicated</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     part of the Fibonacci Heap. However, it can be broken down into a few steps.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;list type=&quot;number&quot;&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;item&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>             Add the children of MinItem to the root list. Either one of these children,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>             or another of the items in the root list is a candidate to become the new</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>             MinItem.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;/item&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;item&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>             Remove the MinItem from the root list and appoint a new MinItem temporarily.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;/item&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;item&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>             <span class=\"hljs-doctag\">&lt;see cref=&quot;Consolidate&quot; /&gt;</span> what&#x27;s left</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>             of the heap.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;/item&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/list&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The minimum item from the heap.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">Pop</span>()</span>\r\n        {\r\n            FHeapNode&lt;T&gt;? z = <span class=\"hljs-literal\">null</span>;\r\n            <span class=\"hljs-keyword\">if</span> (MinItem == <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap is empty!&quot;</span>);\r\n            }\r\n\r\n            z = MinItem;\r\n\r\n            <span class=\"hljs-comment\">// Since z is leaving the heap, add its children to the root list</span>\r\n            <span class=\"hljs-keyword\">if</span> (z.Child != <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">SiblingIterator</span>(<span class=\"hljs-params\">z.Child</span>))</span>\r\n                {\r\n                    x.Parent = <span class=\"hljs-literal\">null</span>;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// This effectively adds each child x to the root list</span>\r\n                z.ConcatenateRight(z.Child);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (Count == <span class=\"hljs-number\">1</span>)\r\n            {\r\n                MinItem = <span class=\"hljs-literal\">null</span>;\r\n                Count = <span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">return</span> z.Key;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// Temporarily reassign MinItem to an arbitrary item in the root</span>\r\n            <span class=\"hljs-comment\">// list</span>\r\n            MinItem = MinItem.Right;\r\n\r\n            <span class=\"hljs-comment\">// Remove the old MinItem from the root list altogether</span>\r\n            z.Remove();\r\n\r\n            <span class=\"hljs-comment\">// Consolidate the heap</span>\r\n            Consolidate();\r\n\r\n            Count -= <span class=\"hljs-number\">1</span>;\r\n\r\n            <span class=\"hljs-keyword\">return</span> z.Key;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A method to see what&#x27;s on top of the heap without changing its structure.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns the top element without popping it from the structure of</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the heap.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">Peek</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (MinItem == <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;The heap is empty&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> MinItem.Key;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Reduce the key of x to be k.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     k must be less than x.Key, increasing the key of an item is not supported.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>The item you want to reduce in value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;k&quot;&gt;</span>The new value for the item.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DecreaseKey</span>(<span class=\"hljs-params\">FHeapNode&lt;T&gt; x, T k</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (MinItem == <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(x)}</span> is not from the heap&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (x.Key == <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;x has no value&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (k.CompareTo(x.Key) &gt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Value cannot be increased&quot;</span>);\r\n            }\r\n\r\n            x.Key = k;\r\n            <span class=\"hljs-keyword\">var</span> y = x.Parent;\r\n            <span class=\"hljs-keyword\">if</span> (y != <span class=\"hljs-literal\">null</span> &amp;&amp; x.Key.CompareTo(y.Key) &lt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                Cut(x, y);\r\n                CascadingCut(y);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (x.Key.CompareTo(MinItem.Key) &lt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                MinItem = x;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Remove x from the child list of y.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>A child of y we just decreased the value of.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;y&quot;&gt;</span>The now former parent of x.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Cut</span>(<span class=\"hljs-params\">FHeapNode&lt;T&gt; x, FHeapNode&lt;T&gt; y</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (MinItem == <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap malformed&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (y.Degree == <span class=\"hljs-number\">1</span>)\r\n            {\r\n                y.Child = <span class=\"hljs-literal\">null</span>;\r\n                MinItem.AddRight(x);\r\n            }\r\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (y.Degree &gt; <span class=\"hljs-number\">1</span>)\r\n            {\r\n                x.Remove();\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap malformed&quot;</span>);\r\n            }\r\n\r\n            y.Degree--;\r\n            x.Mark = <span class=\"hljs-literal\">false</span>;\r\n            x.Parent = <span class=\"hljs-literal\">null</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Rebalances the heap after the decrease operation takes place.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;y&quot;&gt;</span>An item that may no longer obey the heap property.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CascadingCut</span>(<span class=\"hljs-params\">FHeapNode&lt;T&gt; y</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> z = y.Parent;\r\n            <span class=\"hljs-keyword\">if</span> (z != <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (!y.Mark)\r\n                {\r\n                    y.Mark = <span class=\"hljs-literal\">true</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    Cut(y, z);\r\n                    CascadingCut(z);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Consolidate is analogous to Heapify in <span class=\"hljs-doctag\">&lt;see cref=&quot;DataStructures.Heap.BinaryHeap{T}&quot; /&gt;</span>.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         First, an array <span class=\"hljs-doctag\">&lt;c&gt;</span>A<span class=\"hljs-doctag\">&lt;/c&gt;</span> [0...D(H.n)] is created where H.n is the number</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         of items in this heap, and D(x) is the max degree any node can have in a</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Fibonacci heap with x nodes.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         For each node <span class=\"hljs-doctag\">&lt;c&gt;</span>x<span class=\"hljs-doctag\">&lt;/c&gt;</span> in the root list, try to add it to <span class=\"hljs-doctag\">&lt;c&gt;</span>A[d]<span class=\"hljs-doctag\">&lt;/c&gt;</span> where</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         d is the degree of <span class=\"hljs-doctag\">&lt;c&gt;</span>x<span class=\"hljs-doctag\">&lt;/c&gt;</span>.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         If there is already a node in <span class=\"hljs-doctag\">&lt;c&gt;</span>A[d]<span class=\"hljs-doctag\">&lt;/c&gt;</span>, call it <span class=\"hljs-doctag\">&lt;c&gt;</span>y<span class=\"hljs-doctag\">&lt;/c&gt;</span>, and make</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;c&gt;</span>y<span class=\"hljs-doctag\">&lt;/c&gt;</span> a child of <span class=\"hljs-doctag\">&lt;c&gt;</span>x<span class=\"hljs-doctag\">&lt;/c&gt;</span>. (Swap <span class=\"hljs-doctag\">&lt;c&gt;</span>x<span class=\"hljs-doctag\">&lt;/c&gt;</span> and <span class=\"hljs-doctag\">&lt;c&gt;</span>y<span class=\"hljs-doctag\">&lt;/c&gt;</span> beforehand if</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;c&gt;</span>x<span class=\"hljs-doctag\">&lt;/c&gt;</span> is greater than <span class=\"hljs-doctag\">&lt;c&gt;</span>y<span class=\"hljs-doctag\">&lt;/c&gt;</span>). Now that <span class=\"hljs-doctag\">&lt;c&gt;</span>x<span class=\"hljs-doctag\">&lt;/c&gt;</span> has one more child,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         remove if from <span class=\"hljs-doctag\">&lt;c&gt;</span>A[d]<span class=\"hljs-doctag\">&lt;/c&gt;</span> and add it to <span class=\"hljs-doctag\">&lt;c&gt;</span>A[d+1]<span class=\"hljs-doctag\">&lt;/c&gt;</span> to reflect that its</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         degree is one more. Loop this behavior until we find an empty spot to put</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         <span class=\"hljs-doctag\">&lt;c&gt;</span>x<span class=\"hljs-doctag\">&lt;/c&gt;</span>.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         With <span class=\"hljs-doctag\">&lt;c&gt;</span>A<span class=\"hljs-doctag\">&lt;/c&gt;</span> all filled, empty the root list of the heap. And add each item</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         from <span class=\"hljs-doctag\">&lt;c&gt;</span>A<span class=\"hljs-doctag\">&lt;/c&gt;</span> into the root list, one by one, making sure to keep track of</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         which is smallest.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Consolidate</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (MinItem == <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// There&#x27;s a fact in Intro to Algorithms:</span>\r\n            <span class=\"hljs-comment\">// &quot;the max degree of any node in an n-node fibonacci heap is O(lg(n)).</span>\r\n            <span class=\"hljs-comment\">// In particular, we shall show that D(n) &lt;= floor(log_phi(n)) where phi is</span>\r\n            <span class=\"hljs-comment\">// the golden ratio, defined in equation 3.24 as phi = (1 + sqrt(5))/2&quot;</span>\r\n            <span class=\"hljs-comment\">//</span>\r\n            <span class=\"hljs-comment\">// For a proof, see [1]</span>\r\n            <span class=\"hljs-keyword\">var</span> maxDegree = <span class=\"hljs-number\">1</span> + (<span class=\"hljs-built_in\">int</span>)Math.Log(Count, (<span class=\"hljs-number\">1</span> + Math.Sqrt(<span class=\"hljs-number\">5</span>)) / <span class=\"hljs-number\">2</span>);\r\n\r\n            <span class=\"hljs-comment\">// Create slots for every possible node degree of x</span>\r\n            <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> FHeapNode&lt;T&gt;?[maxDegree];\r\n            <span class=\"hljs-keyword\">var</span> siblings = SiblingIterator(MinItem).ToList();\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> w <span class=\"hljs-keyword\">in</span> siblings)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> x = w;\r\n                <span class=\"hljs-keyword\">var</span> d = x.Degree;\r\n\r\n                <span class=\"hljs-keyword\">var</span> y = a[d];\r\n\r\n                <span class=\"hljs-comment\">// While A[d] is not empty, we can&#x27;t blindly put x here</span>\r\n                <span class=\"hljs-keyword\">while</span> (y != <span class=\"hljs-literal\">null</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">if</span> (x.Key.CompareTo(y.Key) &gt; <span class=\"hljs-number\">0</span>)\r\n                    {\r\n                        <span class=\"hljs-comment\">// Exchange x and y</span>\r\n                        <span class=\"hljs-keyword\">var</span> temp = x;\r\n                        x = y;\r\n                        y = temp;\r\n                    }\r\n\r\n                    <span class=\"hljs-comment\">// Make y a child of x</span>\r\n                    FibHeapLink(y, x);\r\n\r\n                    <span class=\"hljs-comment\">// Empty out this spot since x now has a higher degree</span>\r\n                    a[d] = <span class=\"hljs-literal\">null</span>;\r\n\r\n                    <span class=\"hljs-comment\">// Add 1 to x&#x27;s degree before going back into the loop</span>\r\n                    d++;\r\n\r\n                    y = a[d];\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// Now that there&#x27;s an empty spot for x, place it there</span>\r\n                a[d] = x;\r\n            }\r\n\r\n            ReconstructHeap(a);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Reconstructs the heap based on the array of node degrees created by the consolidate step.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;a&quot;&gt;</span>An array of FHeapNodes where a[i] represents a node of degree i.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ReconstructHeap</span>(<span class=\"hljs-params\">FHeapNode&lt;T&gt;?[] a</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// Once all items are in A, empty out the root list</span>\r\n            MinItem = <span class=\"hljs-literal\">null</span>;\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; a.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> r = a[i];\r\n                <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-literal\">null</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (MinItem == <span class=\"hljs-literal\">null</span>)\r\n                {\r\n                    <span class=\"hljs-comment\">// If the root list is completely empty, make this the new</span>\r\n                    <span class=\"hljs-comment\">// MinItem</span>\r\n                    MinItem = r;\r\n\r\n                    <span class=\"hljs-comment\">// Make a new root list with just this item. Make sure to make</span>\r\n                    <span class=\"hljs-comment\">// it its own list.</span>\r\n                    MinItem.SetSiblings(MinItem, MinItem);\r\n                    MinItem.Parent = <span class=\"hljs-literal\">null</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    <span class=\"hljs-comment\">// Add A[i] to the root list</span>\r\n                    MinItem.AddRight(r);\r\n\r\n                    <span class=\"hljs-comment\">// If this item is smaller, make it the new min item</span>\r\n                    <span class=\"hljs-keyword\">if</span> (MinItem.Key.CompareTo(r.Key) &gt; <span class=\"hljs-number\">0</span>)\r\n                    {\r\n                        MinItem = a[i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Make y a child of x.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;y&quot;&gt;</span>A node to become the child of x.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>A node to become the parent of y.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">FibHeapLink</span>(<span class=\"hljs-params\">FHeapNode&lt;T&gt; y, FHeapNode&lt;T&gt; x</span>)</span>\r\n        {\r\n            y.Remove();\r\n            x.AddChild(y);\r\n            y.Mark = <span class=\"hljs-literal\">false</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A helper function to iterate through all the siblings of this node in the</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     circularly doubly linked list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span>A node we want the siblings of.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>An iterator over all of the siblings.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">private</span> IEnumerable&lt;FHeapNode&lt;T&gt;&gt; SiblingIterator(FHeapNode&lt;T&gt; node)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> currentNode = node;\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> currentNode;\r\n\r\n            currentNode = node.Right;\r\n            <span class=\"hljs-keyword\">while</span> (currentNode != node)\r\n            {\r\n                <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> currentNode;\r\n                currentNode = currentNode.Right;\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Brian Mata",
      "email": "CyberMobius@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}