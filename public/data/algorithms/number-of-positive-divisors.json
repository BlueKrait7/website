{
  "slug": "number-of-positive-divisors",
  "name": "Number of Positive Divisors",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\number_of_positive_divisors.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\number_of_positive_divisors.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief C++ Program to calculate the number of positive divisors\r\n *\r\n * This algorithm uses the prime factorization approach.\r\n * Any positive integer can be written as a product of its prime factors.\r\n * &lt;br/&gt;Let \\f$N = p_1^{e_1} \\times p_2^{e_2} \\times\\cdots\\times p_k^{e_k}\\f$\r\n * where \\f$p_1,\\, p_2,\\, \\dots,\\, p_k\\f$ are distinct prime factors of \\f$N\\f$ and\r\n * \\f$e_1,\\, e_2,\\, \\dots,\\, e_k\\f$ are respective positive integer exponents.\r\n * &lt;br/&gt;Each positive divisor of \\f$N\\f$ is in the form\r\n * \\f$p_1^{g_1}\\times p_2^{g_2}\\times\\cdots\\times p_k^{g_k}\\f$\r\n * where \\f$0\\le g_i\\le e_i\\f$ are integers for all \\f$1\\le i\\le k\\f$.\r\n * &lt;br/&gt;Finally, there are \\f$(e_1+1) \\times (e_2+1)\\times\\cdots\\times (e_k+1)\\f$\r\n * positive divisors of \\f$N\\f$ since we can choose every \\f$g_i\\f$\r\n * independently.\r\n *\r\n * Example:\r\n * &lt;br/&gt;\\f$N = 36 = (3^2 \\cdot 2^2)\\f$\r\n * &lt;br/&gt;\\f$\\mbox{number_of_positive_divisors}(36) = (2+1) \\cdot (2+1) = 9\\f$.\r\n * &lt;br/&gt;list of positive divisors of 36 = 1, 2, 3, 4, 6, 9, 12, 18, 36.\r\n *\r\n * Similarly, for N = -36 the number of positive divisors remain same.\r\n**/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to compute the number of positive divisors.\r\n * @param n number to compute divisors for\r\n * @returns number of positive divisors of n (or 1 if n = 0)\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">number_of_positive_divisors</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>) {\r\n        n = -n; <span class=\"hljs-comment\">// take the absolute value of n</span>\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> number_of_divisors = <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i * i &lt;= n; i++) {\r\n        <span class=\"hljs-comment\">// This part is doing the prime factorization.</span>\r\n        <span class=\"hljs-comment\">// Note that we cannot find a composite divisor of n unless we would</span>\r\n        <span class=\"hljs-comment\">// already previously find the corresponding prime divisor and dvided</span>\r\n        <span class=\"hljs-comment\">// n by that prime. Therefore, all the divisors found here will</span>\r\n        <span class=\"hljs-comment\">// actually be primes.</span>\r\n        <span class=\"hljs-comment\">// The loop terminates early when it is left with a number n which</span>\r\n        <span class=\"hljs-comment\">// does not have a divisor smaller or equal to sqrt(n) - that means</span>\r\n        <span class=\"hljs-comment\">// the remaining number is a prime itself.</span>\r\n        <span class=\"hljs-type\">int</span> prime_exponent = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">while</span> (n % i == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-comment\">// Repeatedly divide n by the prime divisor n to compute</span>\r\n            <span class=\"hljs-comment\">// the exponent (e_i in the algorithm description).</span>\r\n            prime_exponent++;\r\n            n /= i;\r\n        }\r\n        number_of_divisors *= prime_exponent + <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-comment\">// In case the remaining number n is a prime number itself</span>\r\n        <span class=\"hljs-comment\">// (essentially p_k^1) the final answer is also multiplied by (e_k+1).</span>\r\n        number_of_divisors *= <span class=\"hljs-number\">2</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> number_of_divisors;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test implementations\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">number_of_positive_divisors</span>(<span class=\"hljs-number\">36</span>) == <span class=\"hljs-number\">9</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">number_of_positive_divisors</span>(<span class=\"hljs-number\">-36</span>) == <span class=\"hljs-number\">9</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">number_of_positive_divisors</span>(<span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">number_of_positive_divisors</span>(<span class=\"hljs-number\">2011</span>) == <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 2011 is a prime</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">number_of_positive_divisors</span>(<span class=\"hljs-number\">756</span>) == <span class=\"hljs-number\">24</span>); <span class=\"hljs-comment\">// 756 = 2^2 * 3^3 * 7</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">tests</span>();\r\n    <span class=\"hljs-type\">int</span> n;\r\n    std::cin &gt;&gt; n;\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All non-zero numbers are divisors of 0 !&quot;</span> &lt;&lt; std::endl;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Number of positive divisors is : &quot;</span>;\r\n        std::cout &lt;&lt; <span class=\"hljs-built_in\">number_of_positive_divisors</span>(n) &lt;&lt; std::endl;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}