{
  "slug": "combination",
  "name": "Combination",
  "categories": [
    "backtracking"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\backtracking\\Combination.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\backtracking\\Combination.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.backtracking;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Finds all permutations of given array\r\n * <span class=\"hljs-doctag\">@author</span> Alan Piao (https://github.com/cpiao3)\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Combination</span> {\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> length;\r\n    <span class=\"hljs-comment\">/**\r\n     * Find all combinations of given array using backtracking\r\n     * <span class=\"hljs-doctag\">@param</span> arr the array.\r\n     * <span class=\"hljs-doctag\">@param</span> n length of combination\r\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; the type of elements in the array.\r\n     * <span class=\"hljs-doctag\">@return</span> a list of all combinations of length n. If n == 0, return null.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; List&lt;TreeSet&lt;T&gt;&gt; <span class=\"hljs-title function_\">combination</span><span class=\"hljs-params\">(T[] arr, <span class=\"hljs-type\">int</span> n)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n        }\r\n        length = n;\r\n        T[] array = arr.clone();\r\n        Arrays.sort(array);\r\n        List&lt;TreeSet&lt;T&gt;&gt; result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();\r\n        backtracking(array, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;T&gt;(), result);\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n    <span class=\"hljs-comment\">/**\r\n     * Backtrack all possible combinations of a given array\r\n     * <span class=\"hljs-doctag\">@param</span> arr the array.\r\n     * <span class=\"hljs-doctag\">@param</span> index the starting index.\r\n     * <span class=\"hljs-doctag\">@param</span> currSet set that tracks current combination\r\n     * <span class=\"hljs-doctag\">@param</span> result the list contains all combination.\r\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; the type of elements in the array.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">backtracking</span><span class=\"hljs-params\">(T[] arr, <span class=\"hljs-type\">int</span> index, TreeSet&lt;T&gt; currSet, List&lt;TreeSet&lt;T&gt;&gt; result)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (index + length - currSet.size() &gt; arr.length) <span class=\"hljs-keyword\">return</span>;\r\n        <span class=\"hljs-keyword\">if</span> (length - <span class=\"hljs-number\">1</span> == currSet.size()) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> index; i &lt; arr.length; i++) {\r\n                currSet.add(arr[i]);\r\n                result.add((TreeSet&lt;T&gt;) currSet.clone());\r\n                currSet.remove(arr[i]);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> index; i &lt; arr.length; i++) {\r\n            currSet.add(arr[i]);\r\n            backtracking(arr, i + <span class=\"hljs-number\">1</span>, currSet, result);\r\n            currSet.remove(arr[i]);\r\n        }\r\n    }\r\n}\r\n"
    },
    "go": {
      "dir": "strings\\combination\\combination.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings\\combination\\combination.go",
      "code": "<span class=\"hljs-comment\">// Package combination ...</span>\r\n<span class=\"hljs-keyword\">package</span> combination\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\r\n\r\n<span class=\"hljs-comment\">// Combinations structure with in and out rune</span>\r\n<span class=\"hljs-keyword\">type</span> Combinations <span class=\"hljs-keyword\">struct</span> {\r\n\tout []<span class=\"hljs-type\">rune</span>\r\n\tin  []<span class=\"hljs-type\">rune</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Start ...</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Start</span><span class=\"hljs-params\">(input <span class=\"hljs-type\">string</span>)</span></span> {\r\n\tc := &amp;Combinations{\r\n\t\tin: []<span class=\"hljs-type\">rune</span>(input),\r\n\t}\r\n\r\n\tc.Combine(<span class=\"hljs-number\">0</span>)\r\n}\r\n\r\n<span class=\"hljs-comment\">// Combine ...</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Combinations)</span></span> Combine(seed <span class=\"hljs-type\">int</span>) {\r\n\tinLen := <span class=\"hljs-built_in\">len</span>(c.in)\r\n\t<span class=\"hljs-keyword\">for</span> i := seed; i &lt; inLen<span class=\"hljs-number\">-1</span>; i++ {\r\n\t\tc.out = <span class=\"hljs-built_in\">append</span>(c.out, c.in[i])\r\n\t\tfmt.Println(<span class=\"hljs-type\">string</span>(c.out))\r\n\t\tc.Combine(i + <span class=\"hljs-number\">1</span>)\r\n\t\tc.out = c.out[:<span class=\"hljs-built_in\">len</span>(c.out)<span class=\"hljs-number\">-1</span>]\r\n\t}\r\n\tc.out = <span class=\"hljs-built_in\">append</span>(c.out, c.in[inLen<span class=\"hljs-number\">-1</span>])\r\n\tfmt.Println(<span class=\"hljs-type\">string</span>(c.out))\r\n\tc.out = c.out[:<span class=\"hljs-built_in\">len</span>(c.out)<span class=\"hljs-number\">-1</span>]\r\n}\r\n"
    },
    "julia": {
      "dir": "src\\math\\combination.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\math\\combination.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    combination(n, r)\r\n        \r\nreturns the number of ways picking r unordered outcomes from\r\nn possibilities, without repetition\r\n\r\n# Arguments:\r\n- `n`: Positive integers of items to choose from\r\n- &#x27;r&#x27;: Positive integers of items to choose\r\n\r\nContributed By:- [Mayur Dahibhate](https://github.com/mayurdahibhate)\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">function</span> combination(n, r)\r\n\r\n    <span class=\"hljs-keyword\">function</span> factorial(n)        \r\n        fact = <span class=\"hljs-number\">1</span>\r\n        \r\n        <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> || n == <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">return</span> fact\r\n        <span class=\"hljs-keyword\">end</span>\r\n         \r\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>:n\r\n            fact = fact * i\r\n        <span class=\"hljs-keyword\">end</span> \r\n        \r\n        <span class=\"hljs-keyword\">return</span> fact\r\n    <span class=\"hljs-keyword\">end</span>\r\n    \r\n    comb = factorial(n) / (factorial(r) * factorial(n - r))\r\n\r\n    <span class=\"hljs-keyword\">return</span> convert(<span class=\"hljs-built_in\">Int64</span>, comb)\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Mayur Dahibhate",
      "email": "52608503+mayurdahibhate@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cpiao3",
      "email": "72165966+cpiao3@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}