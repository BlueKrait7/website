{
  "slug": "prefix-sum-array",
  "name": "Prefix Sum Array",
  "categories": [
    "rangequeries"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "range_queries\\prefix_sum_array.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/range_queries\\prefix_sum_array.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief\r\n * [Prefix Sum\r\n * Array](https://en.wikipedia.org/wiki/Prefix_sum) data structure\r\n * implementation.\r\n *\r\n * @details\r\n * Prefix Sum Array is a data structure, that allows answering sum in some range\r\n * queries. It can answer most sum range queries in O(1), with a build time\r\n * complexity of O(N). But it hasn&#x27;t an update querie.\r\n *\r\n * * Running Time Complexity \\n\r\n * * Build : O(N) \\n\r\n * * Range Query : O(1) \\n\r\n * @author [Paulo Vitor Lima Borges](https://github.com/PauloVLB)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace range_queries\r\n * @brief Range Queries algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> range_queries {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace prefix_sum_array\r\n * @brief Range sum queries using prefix-sum-array\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> prefix_sum_array {\r\n\r\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; <span class=\"hljs-title\">PSA</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span></span>;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief function that builds the PSA\r\n * @param original_array original array of values\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">build</span><span class=\"hljs-params\">(std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; original_array)</span> </span>{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">int</span>&gt;(original_array.<span class=\"hljs-built_in\">size</span>()); i++) {\r\n        PSA.<span class=\"hljs-built_in\">push_back</span>(PSA[i - <span class=\"hljs-number\">1</span>] + original_array[i]);\r\n    }\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief query function\r\n * @param beg begin of the interval to sum\r\n * @param end end of the interval to sum\r\n * @returns sum of the range [beg, end]\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int64_t</span> beg, <span class=\"hljs-type\">int64_t</span> end)</span> </span>{ <span class=\"hljs-keyword\">return</span> PSA[end] - PSA[beg - <span class=\"hljs-number\">1</span>]; }\r\n\r\n}  <span class=\"hljs-comment\">// namespace prefix_sum_array</span>\r\n}  <span class=\"hljs-comment\">// namespace range_queries</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; values{<span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">5</span>,\r\n                                <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">0</span>,   <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>};  <span class=\"hljs-comment\">// original array</span>\r\n\r\n    range_queries::prefix_sum_array::<span class=\"hljs-built_in\">build</span>(values);\r\n    <span class=\"hljs-comment\">// queries are of the type: sum of the range [a, b] = psa[b] - psa[a-1]</span>\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(range_queries::prefix_sum_array::<span class=\"hljs-built_in\">query</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>) ==\r\n           <span class=\"hljs-number\">173</span>);  <span class=\"hljs-comment\">// sum of the entire array</span>\r\n    <span class=\"hljs-built_in\">assert</span>(range_queries::prefix_sum_array::<span class=\"hljs-built_in\">query</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>) ==\r\n           <span class=\"hljs-number\">27</span>);  <span class=\"hljs-comment\">// the sum of the interval [4, 6]</span>\r\n    <span class=\"hljs-built_in\">assert</span>(range_queries::prefix_sum_array::<span class=\"hljs-built_in\">query</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>) ==\r\n           <span class=\"hljs-number\">51</span>);  <span class=\"hljs-comment\">// the sum of the interval [5, 9]</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Paulo Vitor Lima Borges",
      "email": "31678236+PauloVLB@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}