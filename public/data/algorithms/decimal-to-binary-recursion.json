{
  "slug": "decimal-to-binary-recursion",
  "name": "Decimal to Binary Recursion",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "conversions\\decimal_to_binary_recursion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/conversions\\decimal_to_binary_recursion.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_recursive</span>(<span class=\"hljs-params\">decimal: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Take a positive integer value and return its binary equivalent.\r\n    &gt;&gt;&gt; binary_recursive(1000)\r\n    &#x27;1111101000&#x27;\r\n    &gt;&gt;&gt; binary_recursive(&quot;72&quot;)\r\n    &#x27;1001000&#x27;\r\n    &gt;&gt;&gt; binary_recursive(&quot;number&quot;)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: invalid literal for int() with base 10: &#x27;number&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    decimal = <span class=\"hljs-built_in\">int</span>(decimal)\r\n    <span class=\"hljs-keyword\">if</span> decimal <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>):  <span class=\"hljs-comment\"># Exit cases for the recursion</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(decimal)\r\n    div, mod = <span class=\"hljs-built_in\">divmod</span>(decimal, <span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-keyword\">return</span> binary_recursive(div) + <span class=\"hljs-built_in\">str</span>(mod)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Take an integer value and raise ValueError for wrong inputs,\r\n    call the function above and return the output with prefix &quot;0b&quot; &amp; &quot;-0b&quot;\r\n    for positive and negative integers respectively.\r\n    &gt;&gt;&gt; main(0)\r\n    &#x27;0b0&#x27;\r\n    &gt;&gt;&gt; main(40)\r\n    &#x27;0b101000&#x27;\r\n    &gt;&gt;&gt; main(-40)\r\n    &#x27;-0b101000&#x27;\r\n    &gt;&gt;&gt; main(40.8)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Input value is not an integer\r\n    &gt;&gt;&gt; main(&quot;forty&quot;)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Input value is not an integer\r\n    &quot;&quot;&quot;</span>\r\n    number = <span class=\"hljs-built_in\">str</span>(number).strip()\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> number:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;No input value was provided&quot;</span>)\r\n    negative = <span class=\"hljs-string\">&quot;-&quot;</span> <span class=\"hljs-keyword\">if</span> number.startswith(<span class=\"hljs-string\">&quot;-&quot;</span>) <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;&quot;</span>\r\n    number = number.lstrip(<span class=\"hljs-string\">&quot;-&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> number.isnumeric():\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Input value is not an integer&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{negative}</span>0b<span class=\"hljs-subst\">{binary_recursive(<span class=\"hljs-built_in\">int</span>(number))}</span>&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n"
    },
    "c": {
      "dir": "conversions\\decimal_to_binary_recursion.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\decimal_to_binary_recursion.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Convert decimal to binary using recursion algorithm\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Decimal to binary using recursion algorithm.\r\n * For example, if number = 5, the function returns the decimal integer 101.\r\n * @param number positive integer number to convert\r\n * @returns integer with digits representing binary value representation of\r\n * number.\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">decimal_to_binary</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> number)</span>\r\n{\r\n    <span class=\"hljs-keyword\">return</span> number == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : number % <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">10</span> * decimal_to_binary(number / <span class=\"hljs-number\">2</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Test function */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> sets[][<span class=\"hljs-number\">2</span>] = {\r\n        {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>}, {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>}, {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">100</span>}, {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">110</span>}, {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">111</span>},\r\n        <span class=\"hljs-comment\">/* add more data sets to test */</span>\r\n    };\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, size = <span class=\"hljs-keyword\">sizeof</span>(sets) / <span class=\"hljs-keyword\">sizeof</span>(sets[<span class=\"hljs-number\">0</span>]); i &lt; size; ++i)\r\n    {\r\n        assert(decimal_to_binary(sets[i][<span class=\"hljs-number\">0</span>]) == sets[i][<span class=\"hljs-number\">1</span>]);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Driver Code */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    test();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Mikail Farid",
      "email": "brainiac2244@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}