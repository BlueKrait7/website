{
  "slug": "babylonian-method",
  "name": "Babylonian Method",
  "categories": [
    "numericalmethods"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "numerical_methods\\babylonian_method.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods\\babylonian_method.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [A babylonian method\r\n * (BM)](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n * is an algorithm that computes the square root.\r\n * @details\r\n * This algorithm has an application in use case scenario where a user wants\r\n * find accurate square roots of large numbers\r\n * @author [Ameya Chawla](https://github.com/ameyachawlaggsipu)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>  <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace numerical_methods\r\n * @brief Numerical algorithms/methods\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">namespace</span> numerical_methods {\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Babylonian methods is an iterative function which returns\r\n * square root of radicand\r\n * @param radicand is the radicand\r\n * @returns x1 the square root of radicand\r\n */</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">babylonian_method</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radicand)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// To find initial root or rough approximation</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> (i * i &lt;= radicand) {\r\n        i++;\r\n    }\r\n\r\n    i--;  <span class=\"hljs-comment\">/// Real Initial value will be i-1 as loop stops on +1 value</span>\r\n\r\n    <span class=\"hljs-type\">double</span> x0 = i;  <span class=\"hljs-comment\">/// Storing previous value for comparison</span>\r\n    <span class=\"hljs-type\">double</span> x1 =\r\n        (radicand / x0 + x0) / <span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">/// Storing calculated value for comparison</span>\r\n    <span class=\"hljs-type\">double</span> temp = NAN;             <span class=\"hljs-comment\">/// Temp variable to x0 and x1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> (std::<span class=\"hljs-built_in\">max</span>(x0, x1) - std::<span class=\"hljs-built_in\">min</span>(x0, x1) &lt; <span class=\"hljs-number\">0.0001</span>) {\r\n        temp = (radicand / x1 + x1) / <span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">/// Newly calculated root</span>\r\n        x0 = x1;\r\n        x1 = temp;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> x1;  <span class=\"hljs-comment\">/// Returning final root</span>\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace numerical_methods</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @details\r\n * Declaring two test cases and checking for the error\r\n * in predicted and true value is less than 0.0001.\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">/* descriptions of the following test */</span>\r\n\r\n    <span class=\"hljs-keyword\">auto</span> testcase1 = <span class=\"hljs-number\">125348</span>;  <span class=\"hljs-comment\">/// Testcase 1</span>\r\n    <span class=\"hljs-keyword\">auto</span> testcase2 = <span class=\"hljs-number\">752080</span>;  <span class=\"hljs-comment\">/// Testcase 2</span>\r\n\r\n    <span class=\"hljs-keyword\">auto</span> real_output1 = <span class=\"hljs-number\">354.045194855</span>;  <span class=\"hljs-comment\">/// Real Output 1</span>\r\n    <span class=\"hljs-keyword\">auto</span> real_output2 = <span class=\"hljs-number\">867.225460881</span>;  <span class=\"hljs-comment\">/// Real Output 2</span>\r\n\r\n    <span class=\"hljs-keyword\">auto</span> test_result1 = numerical_methods::<span class=\"hljs-built_in\">babylonian_method</span>(testcase1);\r\n    <span class=\"hljs-comment\">/// Test result for testcase 1</span>\r\n    <span class=\"hljs-keyword\">auto</span> test_result2 = numerical_methods::<span class=\"hljs-built_in\">babylonian_method</span>(testcase2);\r\n    <span class=\"hljs-comment\">/// Test result for testcase 2</span>\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">max</span>(test_result1, real_output1) -\r\n               std::<span class=\"hljs-built_in\">min</span>(test_result1, real_output1) &lt;\r\n           <span class=\"hljs-number\">0.0001</span>);\r\n    <span class=\"hljs-comment\">/// Testing for test Case 1</span>\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">max</span>(test_result2, real_output2) -\r\n               std::<span class=\"hljs-built_in\">min</span>(test_result2, real_output2) &lt;\r\n           <span class=\"hljs-number\">0.0001</span>);\r\n    <span class=\"hljs-comment\">/// Testing for test Case 2</span>\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests have successfully passed!\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @param argc commandline argument count (ignored)\r\n * @param argv commandline array of arguments (ignored)\r\n * calls automated test function to test the working of fast fourier transform.\r\n * @returns 0 on exit\r\n */</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> <span class=\"hljs-type\">const</span> *argv[])</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">//  run self-test implementations</span>\r\n             <span class=\"hljs-comment\">//  with 2 defined test cases</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "2kindsofcs",
      "email": "42531877+2kindsofcs@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ameya Chawla",
      "email": "88154798+ameyachawlaggsipu@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}