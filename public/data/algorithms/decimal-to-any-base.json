{
  "slug": "decimal-to-any-base",
  "name": "Decimal To Any Base",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\conversions\\DecimalToAnyBase.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\conversions\\DecimalToAnyBase.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.conversions;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.io.BufferedReader;\r\n<span class=\"hljs-keyword\">import</span> java.io.InputStreamReader;\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span> Varun Upadhyay (https://github.com/varunu28)\r\n */</span>\r\n<span class=\"hljs-comment\">// Driver Program</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DecimalToAnyBase</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\r\n        <span class=\"hljs-type\">BufferedReader</span> <span class=\"hljs-variable\">br</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedReader</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InputStreamReader</span>(System.in));\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the decimal input below: &quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">decInput</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(br.readLine());\r\n        System.out.println();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the base below: &quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">base</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(br.readLine());\r\n        System.out.println();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Decimal Input&quot;</span> + <span class=\"hljs-string\">&quot; is: &quot;</span> + decInput);\r\n        System.out.println(\r\n                <span class=\"hljs-string\">&quot;Value of &quot;</span> + decInput + <span class=\"hljs-string\">&quot; in base &quot;</span> + base + <span class=\"hljs-string\">&quot; is: &quot;</span> + convertToAnyBase(decInput, base));\r\n\r\n        br.close();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method produces a String value of any given input decimal in any\r\n     * base\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> inp Decimal of which we need the value in base in String format\r\n     * <span class=\"hljs-doctag\">@return</span> string format of the converted value in the given base\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">convertToAnyBase</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> inp, <span class=\"hljs-type\">int</span> base)</span> {\r\n        ArrayList&lt;Character&gt; charArr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n\r\n        <span class=\"hljs-keyword\">while</span> (inp &gt; <span class=\"hljs-number\">0</span>) {\r\n            charArr.add(reVal(inp % base));\r\n            inp /= base;\r\n        }\r\n\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(charArr.size());\r\n\r\n        <span class=\"hljs-keyword\">for</span> (Character ch : charArr) {\r\n            str.append(ch);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> str.reverse().toString();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method produces character value of the input integer and returns it\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> num integer of which we need the character value of\r\n     * <span class=\"hljs-doctag\">@return</span> character value of input integer\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">reVal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (num &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; num &lt;= <span class=\"hljs-number\">9</span>) {\r\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">char</span>) (num + <span class=\"hljs-string\">&#x27;0&#x27;</span>);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">char</span>) (num - <span class=\"hljs-number\">10</span> + <span class=\"hljs-string\">&#x27;A&#x27;</span>);\r\n        }\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "conversions\\decimal_to_any_base.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\decimal_to_any_base.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @author [jucollet972](https://github.com/jucollet972)\r\n * @brief [Decimal to any-base](http://codeofthedamned.com/index.php/number-base-conversion) is a C function wich convert positive decimal\r\n * integer to any positive ascii base with the base&#x27;s alphabet given in input and return it in a dynamically allocated string(recursive way)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span>  <span class=\"hljs-comment\">/// for strchr and strlen</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span>  <span class=\"hljs-comment\">/// for CPU arch&#x27;s optimized int types</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span> <span class=\"hljs-comment\">/// for boolean types</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>  <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>  <span class=\"hljs-comment\">/// for malloc and free</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Checking if alphabet is valid\r\n * @param base alphabet inputed by user\r\n * @return int64_t as success or not\r\n */</span>\r\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">isbad_alphabet</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* alphabet)</span> {\r\n\t<span class=\"hljs-type\">uint64_t</span> len = <span class=\"hljs-built_in\">strlen</span>(alphabet);\r\n\t\r\n\t<span class=\"hljs-comment\">/* Checking th lenght */</span>\t\r\n\t<span class=\"hljs-keyword\">if</span> (len &lt; <span class=\"hljs-number\">2</span>) {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n\t}\r\n\t<span class=\"hljs-comment\">/* Browse the alphabet */</span>\r\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len ; i++) {\r\n\t\t<span class=\"hljs-comment\">/* Searching for duplicates */</span> \r\n\t\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strchr</span>(alphabet + i + <span class=\"hljs-number\">1</span>, alphabet[i]))\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Calculate the final length of the converted number\r\n * @param nb to convert\r\n * @param base calculated from alphabet\r\n * @return Converted nb string length \r\n */</span>\r\n<span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title function_\">converted_len</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> nb, <span class=\"hljs-type\">short</span> base)</span> {\r\n\t<span class=\"hljs-comment\">/* Counting the number of characters translated to the base*/</span>\r\n\t<span class=\"hljs-keyword\">if</span> (nb &gt; base - <span class=\"hljs-number\">1</span>) {\r\n\t\t<span class=\"hljs-keyword\">return</span> (converted_len(nb/base, base) + <span class=\"hljs-number\">1</span>);\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Convert positive decimal integer into anybase recursively\r\n * @param nb to convert\r\n * @param alphabet inputed by user used for base convertion\r\n * @param base calculated from alphabet\r\n * @param converted string filled with the convertion&#x27;s result\r\n * @return void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">convertion</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> nb, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* alphabet, <span class=\"hljs-type\">short</span> base, <span class=\"hljs-type\">char</span>* converted)</span> {\r\n\t<span class=\"hljs-comment\">/* Recursive convertion */</span>\r\n\t*(converted) = *(alphabet + nb%base);\r\n\t<span class=\"hljs-keyword\">if</span> (nb &gt; base - <span class=\"hljs-number\">1</span>) {\r\n\t\tconvertion(nb/base, alphabet, base, --converted);\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief decimal_to_anybase ensure the validity of the parameters and convert any unsigned integers into any ascii positive base\r\n * @param nb to convert\r\n * @param base&#x27;s alphabet\r\n * @returns nb converted on success\r\n * @returns NULL on error\r\n */</span>\r\n<span class=\"hljs-type\">char</span>* <span class=\"hljs-title function_\">decimal_to_anybase</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> nb, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* alphabet)</span> {\r\n\t<span class=\"hljs-type\">char</span>* converted;\r\n\r\n\t<span class=\"hljs-comment\">/* Verify that alphabet is valid */</span>\r\n\t<span class=\"hljs-keyword\">if</span> (isbad_alphabet(alphabet)) {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\r\n\t}\r\n\t<span class=\"hljs-comment\">/* Convertion */</span>\r\n\t<span class=\"hljs-type\">uint64_t</span> base = <span class=\"hljs-built_in\">strlen</span>(alphabet);\r\n\t<span class=\"hljs-type\">uint64_t</span> final_len = converted_len(nb, base);\r\n\tconverted = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>) * (final_len + <span class=\"hljs-number\">1</span>));\r\n\tconverted[final_len] = <span class=\"hljs-number\">0</span>;\r\n\tconvertion(nb, alphabet, base, converted + final_len - <span class=\"hljs-number\">1</span>);\r\n\t<span class=\"hljs-keyword\">return</span> converted;\r\n}\r\n\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n\t<span class=\"hljs-type\">char</span>* ret = <span class=\"hljs-literal\">NULL</span>;\r\n\t<span class=\"hljs-type\">char</span>* reference = <span class=\"hljs-literal\">NULL</span>;\r\n\r\n\t<span class=\"hljs-comment\">/* min dec*/</span>\r\n\treference = <span class=\"hljs-string\">&quot;0&quot;</span>;\r\n\tret = decimal_to_anybase(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;0123456789&quot;</span>);\r\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(reference) &amp;&amp; i &lt; <span class=\"hljs-built_in\">strlen</span>(ret); i++) {\r\n\t\tassert(ret[i] == reference[i]);\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> (ret != <span class=\"hljs-literal\">NULL</span>) {\r\n\t\t<span class=\"hljs-built_in\">free</span>(ret);\r\n\t}\r\n\t\r\n\t<span class=\"hljs-comment\">/* max dec*/</span>\r\n\treference = <span class=\"hljs-string\">&quot;18446744073709551615&quot;</span>;\r\n\tret = decimal_to_anybase(<span class=\"hljs-number\">18446744073709551615</span>, <span class=\"hljs-string\">&quot;0123456789&quot;</span>);\r\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(reference) &amp;&amp; i &lt; <span class=\"hljs-built_in\">strlen</span>(ret); i++) {\r\n\t\tassert(ret[i] == reference[i]);\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> (ret != <span class=\"hljs-literal\">NULL</span>) {\r\n\t\t<span class=\"hljs-built_in\">free</span>(ret);\r\n\t}\r\n\t\r\n\t<span class=\"hljs-comment\">/* negative dec*/</span>\r\n\treference = <span class=\"hljs-string\">&quot;18446744073709551615&quot;</span>;\r\n\tret = decimal_to_anybase(<span class=\"hljs-number\">-1</span>, <span class=\"hljs-string\">&quot;0123456789&quot;</span>);\r\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(reference) &amp;&amp; i &lt; <span class=\"hljs-built_in\">strlen</span>(ret); i++) {\r\n\t\tassert(ret[i] == reference[i]);\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> (ret != <span class=\"hljs-literal\">NULL</span>) {\r\n\t\t<span class=\"hljs-built_in\">free</span>(ret);\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">/* bin */</span>\r\n\treference = <span class=\"hljs-string\">&quot;101010&quot;</span>;\r\n\tret = decimal_to_anybase(<span class=\"hljs-number\">42</span>, <span class=\"hljs-string\">&quot;01&quot;</span>);\r\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(reference) &amp;&amp; i &lt; <span class=\"hljs-built_in\">strlen</span>(ret); i++) {\r\n\t\tassert(ret[i] == reference[i]);\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> (ret != <span class=\"hljs-literal\">NULL</span>) {\r\n\t\t<span class=\"hljs-built_in\">free</span>(ret);\r\n\t}\r\n\t\r\n\t<span class=\"hljs-comment\">/* octal */</span>\r\n\treference = <span class=\"hljs-string\">&quot;52&quot;</span>;\r\n\tret = decimal_to_anybase(<span class=\"hljs-number\">42</span>, <span class=\"hljs-string\">&quot;01234567&quot;</span>);\r\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(reference) &amp;&amp; i &lt; <span class=\"hljs-built_in\">strlen</span>(ret); i++) {\r\n\t\tassert(ret[i] == reference[i]);\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> (ret != <span class=\"hljs-literal\">NULL</span>) {\r\n\t\t<span class=\"hljs-built_in\">free</span>(ret);\r\n\t}\r\n\t\r\n\t<span class=\"hljs-comment\">/* hexa */</span>\r\n\treference = <span class=\"hljs-string\">&quot;2A&quot;</span>;\r\n\tret = decimal_to_anybase(<span class=\"hljs-number\">42</span>, <span class=\"hljs-string\">&quot;0123456789ABCDEF&quot;</span>);\r\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(reference) &amp;&amp; i &lt; <span class=\"hljs-built_in\">strlen</span>(ret); i++) {\r\n\t\tassert(ret[i] == reference[i]);\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> (ret != <span class=\"hljs-literal\">NULL</span>) {\r\n\t\t<span class=\"hljs-built_in\">free</span>(ret);\r\n\t}\r\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;[+] All tests have successfully passed!\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit \r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n\ttest(); <span class=\"hljs-comment\">// run self-test implementations</span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "varunu28",
      "email": "varun.u28@gmail.com",
      "commits": 1
    },
    {
      "name": "AFK",
      "email": "33122625+jucollet972@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}