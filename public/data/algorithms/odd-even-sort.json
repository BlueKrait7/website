{
  "slug": "odd-even-sort",
  "name": "Odd Even Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\odd_even_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\odd_even_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;For reference\r\nhttps://en.wikipedia.org/wiki/Odd%E2%80%93even_sort\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">odd_even_sort</span>(<span class=\"hljs-params\">input_list: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;this algorithm uses the same idea of bubblesort,\r\n    but by first dividing in two phase (odd and even).\r\n    Originally developed for use on parallel processors\r\n    with local interconnections.\r\n    :param collection: mutable ordered sequence of elements\r\n    :return: same collection in ascending order\r\n    Examples:\r\n    &gt;&gt;&gt; odd_even_sort([5 , 4 ,3 ,2 ,1])\r\n    [1, 2, 3, 4, 5]\r\n    &gt;&gt;&gt; odd_even_sort([])\r\n    []\r\n    &gt;&gt;&gt; odd_even_sort([-10 ,-1 ,10 ,2])\r\n    [-10, -1, 2, 10]\r\n    &gt;&gt;&gt; odd_even_sort([1 ,2 ,3 ,4])\r\n    [1, 2, 3, 4]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-built_in\">sorted</span> = <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">sorted</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>:  <span class=\"hljs-comment\"># Until all the indices are traversed keep looping</span>\r\n        <span class=\"hljs-built_in\">sorted</span> = <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(input_list) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>):  <span class=\"hljs-comment\"># iterating over all even indices</span>\r\n            <span class=\"hljs-keyword\">if</span> input_list[i] &gt; input_list[i + <span class=\"hljs-number\">1</span>]:\r\n\r\n                input_list[i], input_list[i + <span class=\"hljs-number\">1</span>] = input_list[i + <span class=\"hljs-number\">1</span>], input_list[i]\r\n                <span class=\"hljs-comment\"># swapping if elements not in order</span>\r\n                <span class=\"hljs-built_in\">sorted</span> = <span class=\"hljs-literal\">False</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(input_list) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>):  <span class=\"hljs-comment\"># iterating over all odd indices</span>\r\n            <span class=\"hljs-keyword\">if</span> input_list[i] &gt; input_list[i + <span class=\"hljs-number\">1</span>]:\r\n                input_list[i], input_list[i + <span class=\"hljs-number\">1</span>] = input_list[i + <span class=\"hljs-number\">1</span>], input_list[i]\r\n                <span class=\"hljs-comment\"># swapping if elements not in order</span>\r\n                <span class=\"hljs-built_in\">sorted</span> = <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> input_list\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Enter list to be sorted&quot;</span>)\r\n    input_list = [<span class=\"hljs-built_in\">int</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">input</span>().split()]\r\n    <span class=\"hljs-comment\"># inputing elements of the list in one line</span>\r\n    sorted_list = odd_even_sort(input_list)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The sorted list is&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(sorted_list)\r\n"
    },
    "javascript": {
      "dir": "Sorts\\OddEvenSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\OddEvenSort.js",
      "code": "<span class=\"hljs-comment\">/*\r\n  odd–even sort or odd–even transposition sort\r\n  is a relatively simple sorting algorithm, developed originally for use on parallel processors with local interconnections.\r\n  It is a comparison sort related to bubble sort, with which it shares many characteristics.\r\n\r\n   for more information : https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort\r\n*/</span>\r\n\r\n<span class=\"hljs-comment\">// Helper function to swap array items</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">swap</span> (arr, i, j) {\r\n  <span class=\"hljs-keyword\">const</span> tmp = arr[i]\r\n  arr[i] = arr[j]\r\n  arr[j] = tmp\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">oddEvenSort</span> (arr) {\r\n  <span class=\"hljs-keyword\">let</span> sorted = <span class=\"hljs-literal\">false</span>\r\n  <span class=\"hljs-keyword\">while</span> (!sorted) {\r\n    sorted = <span class=\"hljs-literal\">true</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>; i += <span class=\"hljs-number\">2</span>) {\r\n      <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>]) {\r\n        <span class=\"hljs-title function_\">swap</span>(arr, i, i + <span class=\"hljs-number\">1</span>)\r\n        sorted = <span class=\"hljs-literal\">false</span>\r\n      }\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>; i += <span class=\"hljs-number\">2</span>) {\r\n      <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>]) {\r\n        <span class=\"hljs-title function_\">swap</span>(arr, i, i + <span class=\"hljs-number\">1</span>)\r\n        sorted = <span class=\"hljs-literal\">false</span>\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\odd_even_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\odd_even_sort.cpp",
      "code": "<span class=\"hljs-comment\">/* C++ implementation Odd Even Sort */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">oddEven</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; &amp;arr, <span class=\"hljs-type\">int</span> size)</span> </span>{\r\n    <span class=\"hljs-type\">bool</span> sorted = <span class=\"hljs-literal\">false</span>;\r\n    <span class=\"hljs-keyword\">while</span> (!sorted) {\r\n        sorted = <span class=\"hljs-literal\">true</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; size - <span class=\"hljs-number\">1</span>; i += <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\">// Odd</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>]) {\r\n                <span class=\"hljs-built_in\">swap</span>(arr[i], arr[i + <span class=\"hljs-number\">1</span>]);\r\n                sorted = <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; i += <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\">// Even</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>]) {\r\n                <span class=\"hljs-built_in\">swap</span>(arr[i], arr[i + <span class=\"hljs-number\">1</span>]);\r\n                sorted = <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt; A, <span class=\"hljs-type\">int</span> size)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) cout &lt;&lt; A[i] &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> size, temp;\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the number of elements : &quot;</span>;\r\n    cin &gt;&gt; size;\r\n\r\n    vector&lt;<span class=\"hljs-type\">int</span>&gt; arr;\r\n\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the unsorted elements : \\n&quot;</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\r\n        cin &gt;&gt; temp;\r\n        arr.<span class=\"hljs-built_in\">push_back</span>(temp);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">oddEven</span>(arr, size);\r\n\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array\\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">show</span>(arr, size);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\OddEvenSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\OddEvenSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n\r\n<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OddEvenSort</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">int</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">100</span>];\r\n\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\r\n\r\n        <span class=\"hljs-comment\">// Print out unsorted elements</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length; ++i) {\r\n            arr[i] = random.nextInt(<span class=\"hljs-number\">100</span>) - <span class=\"hljs-number\">50</span>;\r\n            System.out.println(arr[i]);\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;--------------&quot;</span>);\r\n\r\n        oddEvenSort(arr);\r\n\r\n        <span class=\"hljs-comment\">//Print Sorted elements</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length - <span class=\"hljs-number\">1</span>; ++i) {\r\n            System.out.println(arr[i]);\r\n            <span class=\"hljs-keyword\">assert</span> arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>];\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Odd Even Sort algorithms implements\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arr the array contains elements\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">oddEvenSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr)</span> {\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">sorted</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\r\n        <span class=\"hljs-keyword\">while</span> (!sorted) {\r\n            sorted = <span class=\"hljs-literal\">true</span>;\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; arr.length - <span class=\"hljs-number\">1</span>; i += <span class=\"hljs-number\">2</span>) {\r\n                <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>]) {\r\n                    swap(arr, i, i + <span class=\"hljs-number\">1</span>);\r\n                    sorted = <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length - <span class=\"hljs-number\">1</span>; i += <span class=\"hljs-number\">2</span>) {\r\n                <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>]) {\r\n                    swap(arr, i, i + <span class=\"hljs-number\">1</span>);\r\n                    sorted = <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Helper function to swap two array values.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arr the array contains elements\r\n     * <span class=\"hljs-doctag\">@param</span> i the first index to be swapped\r\n     * <span class=\"hljs-doctag\">@param</span> j the second index to be swapped\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\odd_even_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\odd_even_sort.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @author [Edwin Ajong](https://github.com/eddybruv)\r\n * @brief [Odd Even Sort](https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort) implementation\r\n * @details\r\n * This algorithm is divided into two phases- Odd and Even Phase.\r\n * The algorithm runs until the array elements are sorted and in each iteration two phases occurs- Odd and Even Phases.\r\n * In the odd phase, we perform a bubble sort on odd indexed elements and in the even phase,\r\n * we perform a bubble sort on even indexed elements.\r\n * Time Complexity: O(N ^ 2)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>     <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span>    <span class=\"hljs-comment\">/// for bool</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>      <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>     <span class=\"hljs-comment\">/// for dynammic memory allocation</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span>       <span class=\"hljs-comment\">/// for random number generation</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span>   <span class=\"hljs-comment\">/// for int32_t types</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Swap numbers by reference(using pointers)\r\n * @param first pointer to first number\r\n * @param second pointer to second number\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int32_t</span> *first, <span class=\"hljs-type\">int32_t</span> *second)</span>\r\n{\r\n    <span class=\"hljs-type\">int32_t</span> temp = *first;\r\n    *first = *second;\r\n    *second = temp;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief oddEvenSort sorts the array using the algorithm described above.\r\n * @details \r\n * A boolean varaible(isSorted) is declared and initialised to &quot;false&quot;.\r\n * In the while loop, the variable(isSorted) is then set to &quot;true&quot;.\r\n * During even phase the for loop loops through the array, touching just the even indexes.\r\n * i.e arr[0], arr[2], arr[4] and so on.\r\n * While during the odd phase, the for loop loops through the array, touching just the odd indexes.\r\n * i.e arr[1], arr[3], arr[5] and so on.\r\n * During these phases, if the if statement check if the interger at the current position in the array\r\n * is greater than the interger at the next array index (i.e arr[index + 2], to make sure the index is odd\r\n * during the odd phase and even during the even phase).\r\n * If the condition is true, the function &quot;swap&quot; is called and address of the intergers in question are passed as\r\n * parameters. After the swap is completed, &quot;isSorted&quot; is set to &quot;false&quot;.\r\n * The while loop will keep running till the array is propertly sorted.\r\n * @param arr array to be sorted\r\n * @param size the size of the array\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">oddEvenSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span>\r\n{\r\n    <span class=\"hljs-type\">bool</span> isSorted = <span class=\"hljs-literal\">false</span>;\r\n    <span class=\"hljs-keyword\">while</span>(!isSorted)\r\n    {\r\n        isSorted = <span class=\"hljs-literal\">true</span>;\r\n        <span class=\"hljs-type\">int32_t</span> i;\r\n\r\n        <span class=\"hljs-comment\">// Even phase</span>\r\n        <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt;= size - <span class=\"hljs-number\">2</span>; i += <span class=\"hljs-number\">2</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span>(arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>])\r\n            {\r\n                swap(&amp;arr[i], &amp;arr[i + <span class=\"hljs-number\">1</span>]);\r\n                isSorted = <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Odd phase</span>\r\n        <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">1</span>; i &lt;= size - <span class=\"hljs-number\">2</span>; i += <span class=\"hljs-number\">2</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span>(arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>])\r\n            {\r\n                swap(&amp;arr[i], &amp;arr[i + <span class=\"hljs-number\">1</span>]);\r\n                isSorted = <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @details Two tests (unsorted) arrays were created and their corresponding solution(sorted) arrays were also created.\r\n * The test arrays and their respective sizes are then passed in to the oddEvenSort function.\r\n * To test if the algorithm works, a for loop is assigned to loop through the both arrays(test and solution) and check if the array elements \r\n * of the test array correspond to the elements of the solution array.\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int32_t</span> arr1[] = {<span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>};\r\n    <span class=\"hljs-type\">int32_t</span> arr1Soln[] = {<span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>};\r\n    <span class=\"hljs-type\">int32_t</span> arr2[] = {<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>};\r\n    <span class=\"hljs-type\">int32_t</span> arr2Soln[] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>};\r\n\r\n    oddEvenSort(arr1, <span class=\"hljs-number\">4</span>);\r\n    oddEvenSort(arr2, <span class=\"hljs-number\">10</span>);\r\n\r\n     <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++)\r\n     {\r\n         assert(arr1[i] == arr1Soln[i]);    \r\n     }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\r\n    {\r\n        assert(arr2[i] == arr2Soln[i]);    \r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;All tests have passed!\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    test();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\sorting\\odd_even_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\sorting\\odd_even_sort.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">odd_even_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n    <span class=\"hljs-keyword\">if</span> len == <span class=\"hljs-number\">0</span> {\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sorted</span> = <span class=\"hljs-literal\">false</span>;\r\n    <span class=\"hljs-keyword\">while</span> !sorted {\r\n        sorted = <span class=\"hljs-literal\">true</span>;\r\n\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>..len - <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">step_by</span>(<span class=\"hljs-number\">2</span>) {\r\n            <span class=\"hljs-keyword\">if</span> arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>] {\r\n                arr.<span class=\"hljs-title function_ invoke__\">swap</span>(i, i + <span class=\"hljs-number\">1</span>);\r\n                sorted = <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>..len - <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">step_by</span>(<span class=\"hljs-number\">2</span>) {\r\n            <span class=\"hljs-keyword\">if</span> arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>] {\r\n                arr.<span class=\"hljs-title function_ invoke__\">swap</span>(i, i + <span class=\"hljs-number\">1</span>);\r\n                sorted = <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>];\r\n        <span class=\"hljs-title function_ invoke__\">odd_even_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(arr, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = Vec::&lt;<span class=\"hljs-type\">i32</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        <span class=\"hljs-title function_ invoke__\">odd_even_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(arr, <span class=\"hljs-built_in\">vec!</span>[]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>];\r\n        <span class=\"hljs-title function_ invoke__\">odd_even_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(arr, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">pre_sorted</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\r\n        <span class=\"hljs-title function_ invoke__\">odd_even_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> arr);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(arr, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Jerrit Gläsker",
      "email": "50867655+cherrysrc@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Edwin B. Ajong",
      "email": "edwinajong@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "mustafasalih1993",
      "email": "mustafasalih1991@gmail.com",
      "commits": 1
    },
    {
      "name": "JadenLeake333",
      "email": "47929127+JadenLeake333@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ocean Monjur",
      "email": "75680423+OCM-7898@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "PARISOT paul andrea",
      "email": "parisotp@informatique.univ-paris-diderot.fr",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}