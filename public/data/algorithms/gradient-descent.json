{
  "slug": "gradient-descent",
  "name": "Gradient Descent",
  "categories": [
    "machinelearning"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning\\gradient_descent.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning\\gradient_descent.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nImplementation of gradient descent algorithm for minimizing cost of a linear hypothesis\r\nfunction.\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> numpy\r\n\r\n<span class=\"hljs-comment\"># List of input, output pairs</span>\r\ntrain_data = (\r\n    ((<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">15</span>),\r\n    ((<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>), <span class=\"hljs-number\">25</span>),\r\n    ((<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>), <span class=\"hljs-number\">41</span>),\r\n    ((<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">8</span>),\r\n    ((<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>), <span class=\"hljs-number\">41</span>),\r\n)\r\ntest_data = (((<span class=\"hljs-number\">515</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">13</span>), <span class=\"hljs-number\">555</span>), ((<span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">49</span>), <span class=\"hljs-number\">150</span>))\r\nparameter_vector = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>]\r\nm = <span class=\"hljs-built_in\">len</span>(train_data)\r\nLEARNING_RATE = <span class=\"hljs-number\">0.009</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_error</span>(<span class=\"hljs-params\">example_no, data_set=<span class=\"hljs-string\">&quot;train&quot;</span></span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    :param data_set: train data or test data\r\n    :param example_no: example number whose error has to be checked\r\n    :return: error in example pointed by example number.\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> calculate_hypothesis_value(example_no, data_set) - output(\r\n        example_no, data_set\r\n    )\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_hypothesis_value</span>(<span class=\"hljs-params\">data_input_tuple</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculates hypothesis function value for a given input\r\n    :param data_input_tuple: Input tuple of a particular example\r\n    :return: Value of hypothesis function at that point.\r\n    Note that there is an &#x27;biased input&#x27; whose value is fixed as 1.\r\n    It is not explicitly mentioned in input data.. But, ML hypothesis functions use it.\r\n    So, we have to take care of it separately. Line 36 takes care of it.\r\n    &quot;&quot;&quot;</span>\r\n    hyp_val = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(parameter_vector) - <span class=\"hljs-number\">1</span>):\r\n        hyp_val += data_input_tuple[i] * parameter_vector[i + <span class=\"hljs-number\">1</span>]\r\n    hyp_val += parameter_vector[<span class=\"hljs-number\">0</span>]\r\n    <span class=\"hljs-keyword\">return</span> hyp_val\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">output</span>(<span class=\"hljs-params\">example_no, data_set</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    :param data_set: test data or train data\r\n    :param example_no: example whose output is to be fetched\r\n    :return: output for that example\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> data_set == <span class=\"hljs-string\">&quot;train&quot;</span>:\r\n        <span class=\"hljs-keyword\">return</span> train_data[example_no][<span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-keyword\">elif</span> data_set == <span class=\"hljs-string\">&quot;test&quot;</span>:\r\n        <span class=\"hljs-keyword\">return</span> test_data[example_no][<span class=\"hljs-number\">1</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_hypothesis_value</span>(<span class=\"hljs-params\">example_no, data_set</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculates hypothesis value for a given example\r\n    :param data_set: test data or train_data\r\n    :param example_no: example whose hypothesis value is to be calculated\r\n    :return: hypothesis value for that example\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> data_set == <span class=\"hljs-string\">&quot;train&quot;</span>:\r\n        <span class=\"hljs-keyword\">return</span> _hypothesis_value(train_data[example_no][<span class=\"hljs-number\">0</span>])\r\n    <span class=\"hljs-keyword\">elif</span> data_set == <span class=\"hljs-string\">&quot;test&quot;</span>:\r\n        <span class=\"hljs-keyword\">return</span> _hypothesis_value(test_data[example_no][<span class=\"hljs-number\">0</span>])\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">summation_of_cost_derivative</span>(<span class=\"hljs-params\">index, end=m</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculates the sum of cost function derivative\r\n    :param index: index wrt derivative is being calculated\r\n    :param end: value where summation ends, default is m, number of examples\r\n    :return: Returns the summation of cost derivative\r\n    Note: If index is -1, this means we are calculating summation wrt to biased\r\n        parameter.\r\n    &quot;&quot;&quot;</span>\r\n    summation_value = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(end):\r\n        <span class=\"hljs-keyword\">if</span> index == -<span class=\"hljs-number\">1</span>:\r\n            summation_value += _error(i)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            summation_value += _error(i) * train_data[i][<span class=\"hljs-number\">0</span>][index]\r\n    <span class=\"hljs-keyword\">return</span> summation_value\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_cost_derivative</span>(<span class=\"hljs-params\">index</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    :param index: index of the parameter vector wrt to derivative is to be calculated\r\n    :return: derivative wrt to that index\r\n    Note: If index is -1, this means we are calculating summation wrt to biased\r\n        parameter.\r\n    &quot;&quot;&quot;</span>\r\n    cost_derivative_value = summation_of_cost_derivative(index, m) / m\r\n    <span class=\"hljs-keyword\">return</span> cost_derivative_value\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run_gradient_descent</span>():\r\n    <span class=\"hljs-keyword\">global</span> parameter_vector\r\n    <span class=\"hljs-comment\"># Tune these values to set a tolerance value for predicted output</span>\r\n    absolute_error_limit = <span class=\"hljs-number\">0.000002</span>\r\n    relative_error_limit = <span class=\"hljs-number\">0</span>\r\n    j = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n        j += <span class=\"hljs-number\">1</span>\r\n        temp_parameter_vector = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(parameter_vector)):\r\n            cost_derivative = get_cost_derivative(i - <span class=\"hljs-number\">1</span>)\r\n            temp_parameter_vector[i] = (\r\n                parameter_vector[i] - LEARNING_RATE * cost_derivative\r\n            )\r\n        <span class=\"hljs-keyword\">if</span> numpy.allclose(\r\n            parameter_vector,\r\n            temp_parameter_vector,\r\n            atol=absolute_error_limit,\r\n            rtol=relative_error_limit,\r\n        ):\r\n            <span class=\"hljs-keyword\">break</span>\r\n        parameter_vector = temp_parameter_vector\r\n    <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot;Number of iterations:&quot;</span>, j))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_gradient_descent</span>():\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(test_data)):\r\n        <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot;Actual output value:&quot;</span>, output(i, <span class=\"hljs-string\">&quot;test&quot;</span>)))\r\n        <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot;Hypothesis output:&quot;</span>, calculate_hypothesis_value(i, <span class=\"hljs-string\">&quot;test&quot;</span>)))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    run_gradient_descent()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nTesting gradient descent for a linear hypothesis function.\\n&quot;</span>)\r\n    test_gradient_descent()\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\machine_learning\\Linear-Regression\\gradientdescent.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\machine_learning\\Linear-Regression\\gradientdescent.m",
      "code": "<span class=\"hljs-comment\">% This function demonstrates gradient descent in case of linear regression with one variable.</span>\r\n\r\n<span class=\"hljs-comment\">% Theta is a column vector with two elements which this function returns after modifying it.</span>\r\n\r\n<span class=\"hljs-comment\">% This function receives the feature vector x, vector of actual target variables Y, Theta</span>\r\n\r\n<span class=\"hljs-comment\">% containing initial values of theta_0 and theta_1, learning rate Alpha, number of iterations</span>\r\n\r\n<span class=\"hljs-comment\">% noi.</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Theta</span> = <span class=\"hljs-title\">gradientdescent</span><span class=\"hljs-params\">(x, Y, Theta, Alpha, noi)</span></span>\r\n\r\n    n = <span class=\"hljs-built_in\">length</span>(Y); <span class=\"hljs-comment\">% Number of training examples. </span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span>:noi \r\n\r\n        theta_1 = Theta(<span class=\"hljs-number\">1</span>) - Alpha * (<span class=\"hljs-number\">1</span> / n) * sum(((x * Theta) - Y) .* x(:, <span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">% Temporary variable to simultaneously update theta_0 but i have used 1 to</span>\r\n\r\n                                                                                  <span class=\"hljs-comment\">% avoid confusion since indexing in MATLAB/Octave starts from 1.</span>\r\n\r\n        theta_2 = Theta(<span class=\"hljs-number\">2</span>) - Alpha * (<span class=\"hljs-number\">1</span> / n) * sum(((x * Theta) - Y) .* x(:, <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">% Temporary variable to simultaneously update theta_1.</span>\r\n\r\n        Theta(<span class=\"hljs-number\">1</span>) = theta_1; <span class=\"hljs-comment\">% Assigning first temporary value to update first actual value simultaneously.  </span>\r\n    \r\n        Theta(<span class=\"hljs-number\">2</span>) = theta_2; <span class=\"hljs-comment\">% Assigning second temporary value to update second actual value simultaneously. </span>\r\n\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">end</span>"
    }
  },
  "contributors": [
    {
      "name": "Anesh Kaul",
      "email": "aneshkaul@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "=",
      "email": "201551009@iiitvadodara.ac.in",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Anesh Kaul",
      "email": "koulanish787@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}