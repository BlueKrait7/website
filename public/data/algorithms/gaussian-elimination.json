{
  "slug": "gaussian-elimination",
  "name": "Gaussian Elimination",
  "categories": [
    "numericalanalysis"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "arithmetic_analysis\\gaussian_elimination.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/arithmetic_analysis\\gaussian_elimination.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nGaussian elimination method for solving a system of linear equations.\r\nGaussian elimination - https://en.wikipedia.org/wiki/Gaussian_elimination\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">retroactive_resolution</span>(<span class=\"hljs-params\">coefficients: np.matrix, vector: np.ndarray</span>) -&gt; np.ndarray:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    This function performs a retroactive linear system resolution\r\n        for triangular matrix\r\n\r\n    Examples:\r\n        2x1 + 2x2 - 1x3 = 5         2x1 + 2x2 = -1\r\n        0x1 - 2x2 - 1x3 = -7        0x1 - 2x2 = -1\r\n        0x1 + 0x2 + 5x3 = 15\r\n    &gt;&gt;&gt; gaussian_elimination([[2, 2, -1], [0, -2, -1], [0, 0, 5]], [[5], [-7], [15]])\r\n    array([[2.],\r\n           [2.],\r\n           [3.]])\r\n    &gt;&gt;&gt; gaussian_elimination([[2, 2], [0, -2]], [[-1], [-1]])\r\n    array([[-1. ],\r\n           [ 0.5]])\r\n    &quot;&quot;&quot;</span>\r\n\r\n    rows, columns = np.shape(coefficients)\r\n\r\n    x = np.zeros((rows, <span class=\"hljs-number\">1</span>), dtype=<span class=\"hljs-built_in\">float</span>)\r\n    <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">reversed</span>(<span class=\"hljs-built_in\">range</span>(rows)):\r\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(row + <span class=\"hljs-number\">1</span>, columns):\r\n            <span class=\"hljs-built_in\">sum</span> += coefficients[row, col] * x[col]\r\n\r\n        x[row, <span class=\"hljs-number\">0</span>] = (vector[row] - <span class=\"hljs-built_in\">sum</span>) / coefficients[row, row]\r\n\r\n    <span class=\"hljs-keyword\">return</span> x\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gaussian_elimination</span>(<span class=\"hljs-params\">coefficients: np.matrix, vector: np.ndarray</span>) -&gt; np.ndarray:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    This function performs Gaussian elimination method\r\n\r\n    Examples:\r\n        1x1 - 4x2 - 2x3 = -2        1x1 + 2x2 = 5\r\n        5x1 + 2x2 - 2x3 = -3        5x1 + 2x2 = 5\r\n        1x1 - 1x2 + 0x3 = 4\r\n    &gt;&gt;&gt; gaussian_elimination([[1, -4, -2], [5, 2, -2], [1, -1, 0]], [[-2], [-3], [4]])\r\n    array([[ 2.3 ],\r\n           [-1.7 ],\r\n           [ 5.55]])\r\n    &gt;&gt;&gt; gaussian_elimination([[1, 2], [5, 2]], [[5], [5]])\r\n    array([[0. ],\r\n           [2.5]])\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># coefficients must to be a square matrix so we need to check first</span>\r\n    rows, columns = np.shape(coefficients)\r\n    <span class=\"hljs-keyword\">if</span> rows != columns:\r\n        <span class=\"hljs-keyword\">return</span> np.array((), dtype=<span class=\"hljs-built_in\">float</span>)\r\n\r\n    <span class=\"hljs-comment\"># augmented matrix</span>\r\n    augmented_mat = np.concatenate((coefficients, vector), axis=<span class=\"hljs-number\">1</span>)\r\n    augmented_mat = augmented_mat.astype(<span class=\"hljs-string\">&quot;float64&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># scale the matrix leaving it triangular</span>\r\n    <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(rows - <span class=\"hljs-number\">1</span>):\r\n        pivot = augmented_mat[row, row]\r\n        <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(row + <span class=\"hljs-number\">1</span>, columns):\r\n            factor = augmented_mat[col, row] / pivot\r\n            augmented_mat[col, :] -= factor * augmented_mat[row, :]\r\n\r\n    x = retroactive_resolution(\r\n        augmented_mat[:, <span class=\"hljs-number\">0</span>:columns], augmented_mat[:, columns : columns + <span class=\"hljs-number\">1</span>]\r\n    )\r\n\r\n    <span class=\"hljs-keyword\">return</span> x\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "c-plus-plus": {
      "dir": "numerical_methods\\gaussian_elimination.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods\\gaussian_elimination.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\brief [Gaussian elimination\r\n * method](https://en.wikipedia.org/wiki/Gaussian_elimination)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> mat_size, i, j, step;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Matrix size: &quot;</span>;\r\n    std::cin &gt;&gt; mat_size;\r\n\r\n    <span class=\"hljs-comment\">// create a 2D matrix by dynamic memory allocation</span>\r\n    <span class=\"hljs-type\">double</span> **mat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">double</span> *[mat_size + <span class=\"hljs-number\">1</span>], **x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">double</span> *[mat_size];\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= mat_size; i++) {\r\n        mat[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">double</span>[mat_size + <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-keyword\">if</span> (i &lt; mat_size)\r\n            x[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">double</span>[mat_size + <span class=\"hljs-number\">1</span>];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// get the matrix elements from user</span>\r\n    std::cout &lt;&lt; std::endl &lt;&lt; <span class=\"hljs-string\">&quot;Enter value of the matrix: &quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; mat_size; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt;= mat_size; j++) {\r\n            std::cin &gt;&gt;\r\n                mat[i][j];  <span class=\"hljs-comment\">// Enter (mat_size*mat_size) value of the matrix.</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// perform Gaussian elimination</span>\r\n    <span class=\"hljs-keyword\">for</span> (step = <span class=\"hljs-number\">0</span>; step &lt; mat_size - <span class=\"hljs-number\">1</span>; step++) {\r\n        <span class=\"hljs-keyword\">for</span> (i = step; i &lt; mat_size - <span class=\"hljs-number\">1</span>; i++) {\r\n            <span class=\"hljs-type\">double</span> a = (mat[i + <span class=\"hljs-number\">1</span>][step] / mat[step][step]);\r\n\r\n            <span class=\"hljs-keyword\">for</span> (j = step; j &lt;= mat_size; j++)\r\n                mat[i + <span class=\"hljs-number\">1</span>][j] = mat[i + <span class=\"hljs-number\">1</span>][j] - (a * mat[step][j]);\r\n        }\r\n    }\r\n\r\n    std::cout &lt;&lt; std::endl\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;Matrix using Gaussian Elimination method: &quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; mat_size; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt;= mat_size; j++) {\r\n            x[i][j] = mat[i][j];\r\n            std::cout &lt;&lt; mat[i][j] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n        }\r\n        std::cout &lt;&lt; std::endl;\r\n    }\r\n    std::cout &lt;&lt; std::endl\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;Value of the Gaussian Elimination method: &quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">for</span> (i = mat_size - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n        <span class=\"hljs-type\">double</span> sum = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (j = mat_size - <span class=\"hljs-number\">1</span>; j &gt; i; j--) {\r\n            x[i][j] = x[j][j] * x[i][j];\r\n            sum = x[i][j] + sum;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (x[i][i] == <span class=\"hljs-number\">0</span>)\r\n            x[i][i] = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">else</span>\r\n            x[i][i] = (x[i][mat_size] - sum) / (x[i][i]);\r\n\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;x&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;= &quot;</span> &lt;&lt; x[i][i] &lt;&lt; std::endl;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= mat_size; i++) {\r\n        <span class=\"hljs-keyword\">delete</span>[] mat[i];\r\n        <span class=\"hljs-keyword\">if</span> (i &lt; mat_size)\r\n            <span class=\"hljs-keyword\">delete</span>[] x[i];\r\n    }\r\n    <span class=\"hljs-keyword\">delete</span>[] mat;\r\n    <span class=\"hljs-keyword\">delete</span>[] x;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Fahim",
      "email": "farhadurFahim@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Isaac Gomes de Oliveira",
      "email": "isaacgdoliveira@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}