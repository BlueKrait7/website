{
  "slug": "minimum-steps-to-one",
  "name": "Minimum Steps to One",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming\\minimum_steps_to_one.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming\\minimum_steps_to_one.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nYouTube Explanation: https://www.youtube.com/watch?v=f2xi3c1S95M\r\n\r\nGiven an integer n, return the minimum steps to 1\r\n\r\nAVAILABLE STEPS:\r\n    * Decrement by 1\r\n    * if n is divisible by 2, divide by 2\r\n    * if n is divisible by 3, divide by 3\r\n\r\n\r\nExample 1: n = 10\r\n10 -&gt; 9 -&gt; 3 -&gt; 1\r\nResult: 3 steps\r\n\r\nExample 2: n = 15\r\n15 -&gt; 5 -&gt; 4 -&gt; 2 -&gt; 1\r\nResult: 4 steps\r\n\r\nExample 3: n = 6\r\n6 -&gt; 2 -&gt; 1\r\nResult: 2 step\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n__author__ = <span class=\"hljs-string\">&quot;Alexander Joslin&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">min_steps_to_one</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Minimum steps to 1 implemented using tabulation.\r\n    &gt;&gt;&gt; min_steps_to_one(10)\r\n    3\r\n    &gt;&gt;&gt; min_steps_to_one(15)\r\n    4\r\n    &gt;&gt;&gt; min_steps_to_one(6)\r\n    2\r\n\r\n    :param number:\r\n    :return int:\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> number &lt;= <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;n must be greater than 0. Got n = <span class=\"hljs-subst\">{number}</span>&quot;</span>)\r\n\r\n    table = [number + <span class=\"hljs-number\">1</span>] * (number + <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-comment\"># starting position</span>\r\n    table[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, number):\r\n        table[i + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">min</span>(table[i + <span class=\"hljs-number\">1</span>], table[i] + <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-comment\"># check if out of bounds</span>\r\n        <span class=\"hljs-keyword\">if</span> i * <span class=\"hljs-number\">2</span> &lt;= number:\r\n            table[i * <span class=\"hljs-number\">2</span>] = <span class=\"hljs-built_in\">min</span>(table[i * <span class=\"hljs-number\">2</span>], table[i] + <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-comment\"># check if out of bounds</span>\r\n        <span class=\"hljs-keyword\">if</span> i * <span class=\"hljs-number\">3</span> &lt;= number:\r\n            table[i * <span class=\"hljs-number\">3</span>] = <span class=\"hljs-built_in\">min</span>(table[i * <span class=\"hljs-number\">3</span>], table[i] + <span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-keyword\">return</span> table[number]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Alex Joslin",
      "email": "aljoslin13@yahoo.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}