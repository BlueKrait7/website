{
  "slug": "linked-queue",
  "name": "Linked Queue",
  "categories": [
    "datastructures",
    "queues"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\queue\\linked_queue.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\queue\\linked_queue.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot; A Queue using a linked list like structure &quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>, Iterator\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.data: <span class=\"hljs-type\">Any</span> = data\r\n        self.<span class=\"hljs-built_in\">next</span>: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.data}</span>&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedQueue</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; queue = LinkedQueue()\r\n    &gt;&gt;&gt; queue.is_empty()\r\n    True\r\n    &gt;&gt;&gt; queue.put(5)\r\n    &gt;&gt;&gt; queue.put(9)\r\n    &gt;&gt;&gt; queue.put(&#x27;python&#x27;)\r\n    &gt;&gt;&gt; queue.is_empty();\r\n    False\r\n    &gt;&gt;&gt; queue.get()\r\n    5\r\n    &gt;&gt;&gt; queue.put(&#x27;algorithms&#x27;)\r\n    &gt;&gt;&gt; queue.get()\r\n    9\r\n    &gt;&gt;&gt; queue.get()\r\n    &#x27;python&#x27;\r\n    &gt;&gt;&gt; queue.get()\r\n    &#x27;algorithms&#x27;\r\n    &gt;&gt;&gt; queue.is_empty()\r\n    True\r\n    &gt;&gt;&gt; queue.get()\r\n    Traceback (most recent call last):\r\n        ...\r\n    IndexError: dequeue from empty queue\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.front: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.rear: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[<span class=\"hljs-type\">Any</span>]:\r\n        node = self.front\r\n        <span class=\"hljs-keyword\">while</span> node:\r\n            <span class=\"hljs-keyword\">yield</span> node.data\r\n            node = node.<span class=\"hljs-built_in\">next</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; queue = LinkedQueue()\r\n        &gt;&gt;&gt; for i in range(1, 6):\r\n        ...     queue.put(i)\r\n        &gt;&gt;&gt; len(queue)\r\n        5\r\n        &gt;&gt;&gt; for i in range(1, 6):\r\n        ...     assert len(queue) == 6 - i\r\n        ...     _ = queue.get()\r\n        &gt;&gt;&gt; len(queue)\r\n        0\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">iter</span>(self)))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; queue = LinkedQueue()\r\n        &gt;&gt;&gt; for i in range(1, 4):\r\n        ...     queue.put(i)\r\n        &gt;&gt;&gt; queue.put(&quot;Python&quot;)\r\n        &gt;&gt;&gt; queue.put(3.14)\r\n        &gt;&gt;&gt; queue.put(True)\r\n        &gt;&gt;&gt; str(queue)\r\n        &#x27;1 &lt;- 2 &lt;- 3 &lt;- Python &lt;- 3.14 &lt;- True&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &lt;- &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> self)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; queue = LinkedQueue()\r\n        &gt;&gt;&gt; queue.is_empty()\r\n        True\r\n        &gt;&gt;&gt; for i in range(1, 6):\r\n        ...     queue.put(i)\r\n        &gt;&gt;&gt; queue.is_empty()\r\n        False\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self) == <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">put</span>(<span class=\"hljs-params\">self, item: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; queue = LinkedQueue()\r\n        &gt;&gt;&gt; queue.get()\r\n        Traceback (most recent call last):\r\n        ...\r\n        IndexError: dequeue from empty queue\r\n        &gt;&gt;&gt; for i in range(1, 6):\r\n        ...     queue.put(i)\r\n        &gt;&gt;&gt; str(queue)\r\n        &#x27;1 &lt;- 2 &lt;- 3 &lt;- 4 &lt;- 5&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        node = Node(item)\r\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\r\n            self.front = self.rear = node\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(self.rear, Node)\r\n            self.rear.<span class=\"hljs-built_in\">next</span> = node\r\n            self.rear = node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; queue = LinkedQueue()\r\n        &gt;&gt;&gt; queue.get()\r\n        Traceback (most recent call last):\r\n        ...\r\n        IndexError: dequeue from empty queue\r\n        &gt;&gt;&gt; queue = LinkedQueue()\r\n        &gt;&gt;&gt; for i in range(1, 6):\r\n        ...     queue.put(i)\r\n        &gt;&gt;&gt; for i in range(1, 6):\r\n        ...     assert queue.get() == i\r\n        &gt;&gt;&gt; len(queue)\r\n        0\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\r\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;dequeue from empty queue&quot;</span>)\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(self.front, Node)\r\n        node = self.front\r\n        self.front = self.front.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-keyword\">if</span> self.front <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            self.rear = <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">return</span> node.data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">clear</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; queue = LinkedQueue()\r\n        &gt;&gt;&gt; for i in range(1, 6):\r\n        ...     queue.put(i)\r\n        &gt;&gt;&gt; queue.clear()\r\n        &gt;&gt;&gt; len(queue)\r\n        0\r\n        &gt;&gt;&gt; str(queue)\r\n        &#x27;&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        self.front = self.rear = <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\queues\\LinkedQueue.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\queues\\LinkedQueue.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.queues;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.NoSuchElementException;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedQueue</span> {\r\n\r\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n\r\n        <span class=\"hljs-type\">int</span> data;\r\n        Node next;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-built_in\">this</span>(<span class=\"hljs-number\">0</span>);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\r\n            <span class=\"hljs-built_in\">this</span>(data, <span class=\"hljs-literal\">null</span>);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data, Node next)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.data = data;\r\n            <span class=\"hljs-built_in\">this</span>.next = next;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Front of Queue\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> Node front;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Rear of Queue\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> Node rear;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Size of Queue\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Init LinkedQueue\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LinkedQueue</span><span class=\"hljs-params\">()</span> {\r\n        front = rear = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Check if queue is empty\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> true if queue is empty, otherwise false\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Add element to rear of queue\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> data insert value\r\n     * <span class=\"hljs-doctag\">@return</span> true if add successfully\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">newNode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(data);\r\n        rear.next = newNode;\r\n        rear = newNode;\r\n        <span class=\"hljs-comment\">/* make rear point at last node */</span>\r\n        size++;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Remove element at the front of queue\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> element at the front of queue\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">dequeue</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>(<span class=\"hljs-string\">&quot;queue is empty&quot;</span>);\r\n        }\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">destroy</span> <span class=\"hljs-operator\">=</span> front.next;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">retValue</span> <span class=\"hljs-operator\">=</span> destroy.data;\r\n        front.next = front.next.next;\r\n        destroy = <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-comment\">/* clear let GC do it&#x27;s work */</span>\r\n        size--;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            front = rear;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> retValue;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Peek element at the front of queue without removing\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> element at the front\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peekFront</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>(<span class=\"hljs-string\">&quot;queue is empty&quot;</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> front.next.data;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Peek element at the rear of queue without removing\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> element at the front\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peekRear</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>(<span class=\"hljs-string\">&quot;queue is empty&quot;</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> rear.data;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Return size of queue\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> size of queue\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> size;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Clear all nodes in queue\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clear</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">while</span> (!isEmpty()) {\r\n            dequeue();\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;[]&quot;</span>;\r\n        }\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> front.next;\r\n        builder.append(<span class=\"hljs-string\">&quot;[&quot;</span>);\r\n        <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span>) {\r\n            builder.append(cur.data).append(<span class=\"hljs-string\">&quot;, &quot;</span>);\r\n            cur = cur.next;\r\n        }\r\n        builder.replace(builder.length() - <span class=\"hljs-number\">2</span>, builder.length(), <span class=\"hljs-string\">&quot;]&quot;</span>);\r\n        <span class=\"hljs-keyword\">return</span> builder.toString();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* Driver Code */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">LinkedQueue</span> <span class=\"hljs-variable\">queue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedQueue</span>();\r\n        <span class=\"hljs-keyword\">assert</span> queue.isEmpty();\r\n\r\n        queue.enqueue(<span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-comment\">/* 1 */</span>\r\n        queue.enqueue(<span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-comment\">/* 1 2 */</span>\r\n        queue.enqueue(<span class=\"hljs-number\">3</span>);\r\n        <span class=\"hljs-comment\">/* 1 2 3 */</span>\r\n        System.out.println(queue);\r\n        <span class=\"hljs-comment\">/* [1, 2, 3] */</span>\r\n\r\n        <span class=\"hljs-keyword\">assert</span> queue.size() == <span class=\"hljs-number\">3</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.dequeue() == <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.peekFront() == <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.peekRear() == <span class=\"hljs-number\">3</span>;\r\n\r\n        queue.clear();\r\n        <span class=\"hljs-keyword\">assert</span> queue.isEmpty();\r\n\r\n        System.out.println(queue);\r\n        <span class=\"hljs-comment\">/* [] */</span>\r\n    }\r\n}\r\n"
    },
    "lua": {
      "dir": "src\\data_structures\\linked_queue.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src\\data_structures\\linked_queue.lua",
      "code": "<span class=\"hljs-keyword\">local</span> linked_queue = {}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_queue.new</span><span class=\"hljs-params\">()</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> {}\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_queue:empty</span><span class=\"hljs-params\">()</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">self</span>._top\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_queue:push</span><span class=\"hljs-params\">(value)</span></span>\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>:empty() <span class=\"hljs-keyword\">then</span>\r\n\t\t<span class=\"hljs-built_in\">self</span>._top = { value = value }\r\n\t\t<span class=\"hljs-built_in\">self</span>._bottom = <span class=\"hljs-built_in\">self</span>._top\r\n\t<span class=\"hljs-keyword\">else</span>\r\n\t\t<span class=\"hljs-built_in\">self</span>._bottom.below = { value = value }\r\n\t\t<span class=\"hljs-built_in\">self</span>._bottom = <span class=\"hljs-built_in\">self</span>._bottom.below\r\n\t<span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_queue:top</span><span class=\"hljs-params\">()</span></span>\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>:empty() <span class=\"hljs-keyword\">then</span>\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>._top.value\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">linked_queue:pop</span><span class=\"hljs-params\">()</span></span>\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>:empty() <span class=\"hljs-keyword\">then</span>\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">local</span> top_element = <span class=\"hljs-built_in\">self</span>:top()\r\n\t<span class=\"hljs-built_in\">self</span>._top = <span class=\"hljs-built_in\">self</span>._top.below\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>:empty() <span class=\"hljs-keyword\">then</span> <span class=\"hljs-comment\">-- List became empty through popping</span>\r\n\t\t<span class=\"hljs-built_in\">self</span>._bottom = <span class=\"hljs-literal\">nil</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">return</span> top_element\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;class&quot;</span>)(linked_queue)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Abhinandan Padmakar Pandey",
      "email": "53622998+AbhinandanPadmakarPandey@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Dylan Buchi",
      "email": "devybuchi@gmail.com",
      "commits": 1
    },
    {
      "name": "Mariusz Skoneczko",
      "email": "mariusz@skoneczko.com",
      "commits": 1
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}