{
  "slug": "perlin-noise",
  "name": "Perlin Noise",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\PerlinNoise.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\PerlinNoise.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * For detailed info and implementation see: &lt;a\r\n * href=&quot;http://devmag.org.za/2009/04/25/perlin-noise/&quot;&gt;Perlin-Noise&lt;/a&gt;\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PerlinNoise</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> width width of noise array\r\n     * <span class=\"hljs-doctag\">@param</span> height height of noise array\r\n     * <span class=\"hljs-doctag\">@param</span> octaveCount numbers of layers used for blending noise\r\n     * <span class=\"hljs-doctag\">@param</span> persistence value of impact each layer get while blending\r\n     * <span class=\"hljs-doctag\">@param</span> seed used for randomizer\r\n     * <span class=\"hljs-doctag\">@return</span> float array containing calculated &quot;Perlin-Noise&quot; values\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span>[][] generatePerlinNoise(\r\n            <span class=\"hljs-type\">int</span> width, <span class=\"hljs-type\">int</span> height, <span class=\"hljs-type\">int</span> octaveCount, <span class=\"hljs-type\">float</span> persistence, <span class=\"hljs-type\">long</span> seed) {\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span>[][] base = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">float</span>[width][height];\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span>[][] perlinNoise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">float</span>[width][height];\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span>[][][] noiseLayers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">float</span>[octaveCount][][];\r\n\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>(seed);\r\n        <span class=\"hljs-comment\">// fill base array with random values as base for noise</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\r\n                base[x][y] = random.nextFloat();\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// calculate octaves with different roughness</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">octave</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; octave &lt; octaveCount; octave++) {\r\n            noiseLayers[octave] = generatePerlinNoiseLayer(base, width, height, octave);\r\n        }\r\n\r\n        <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">amplitude</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1f</span>;\r\n        <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">totalAmplitude</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0f</span>;\r\n\r\n        <span class=\"hljs-comment\">// calculate perlin noise by blending each layer together with specific persistence</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">octave</span> <span class=\"hljs-operator\">=</span> octaveCount - <span class=\"hljs-number\">1</span>; octave &gt;= <span class=\"hljs-number\">0</span>; octave--) {\r\n            amplitude *= persistence;\r\n            totalAmplitude += amplitude;\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\r\n                    <span class=\"hljs-comment\">// adding each value of the noise layer to the noise</span>\r\n                    <span class=\"hljs-comment\">// by increasing amplitude the rougher noises will have more impact</span>\r\n                    perlinNoise[x][y] += noiseLayers[octave][x][y] * amplitude;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// normalize values so that they stay between 0..1</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\r\n                perlinNoise[x][y] /= totalAmplitude;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> perlinNoise;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> base base random float array\r\n     * <span class=\"hljs-doctag\">@param</span> width width of noise array\r\n     * <span class=\"hljs-doctag\">@param</span> height height of noise array\r\n     * <span class=\"hljs-doctag\">@param</span> octave current layer\r\n     * <span class=\"hljs-doctag\">@return</span> float array containing calculated &quot;Perlin-Noise-Layer&quot; values\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span>[][] generatePerlinNoiseLayer(<span class=\"hljs-type\">float</span>[][] base, <span class=\"hljs-type\">int</span> width, <span class=\"hljs-type\">int</span> height, <span class=\"hljs-type\">int</span> octave) {\r\n        <span class=\"hljs-type\">float</span>[][] perlinNoiseLayer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">float</span>[width][height];\r\n\r\n        <span class=\"hljs-comment\">// calculate period (wavelength) for different shapes</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">period</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> &lt;&lt; octave; <span class=\"hljs-comment\">// 2^k</span>\r\n        <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">frequency</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1f</span> / period; <span class=\"hljs-comment\">// 1/2^k</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\r\n            <span class=\"hljs-comment\">// calculates the horizontal sampling indices</span>\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x0</span> <span class=\"hljs-operator\">=</span> (x / period) * period;\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x1</span> <span class=\"hljs-operator\">=</span> (x0 + period) % width;\r\n            <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">horizintalBlend</span> <span class=\"hljs-operator\">=</span> (x - x0) * frequency;\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\r\n                <span class=\"hljs-comment\">// calculates the vertical sampling indices</span>\r\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y0</span> <span class=\"hljs-operator\">=</span> (y / period) * period;\r\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y1</span> <span class=\"hljs-operator\">=</span> (y0 + period) % height;\r\n                <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">verticalBlend</span> <span class=\"hljs-operator\">=</span> (y - y0) * frequency;\r\n\r\n                <span class=\"hljs-comment\">// blend top corners</span>\r\n                <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">top</span> <span class=\"hljs-operator\">=</span> interpolate(base[x0][y0], base[x1][y0], horizintalBlend);\r\n\r\n                <span class=\"hljs-comment\">// blend bottom corners</span>\r\n                <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">bottom</span> <span class=\"hljs-operator\">=</span> interpolate(base[x0][y1], base[x1][y1], horizintalBlend);\r\n\r\n                <span class=\"hljs-comment\">// blend top and bottom interpolation to get the final blend value for this cell</span>\r\n                perlinNoiseLayer[x][y] = interpolate(top, bottom, verticalBlend);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> perlinNoiseLayer;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> a value of point a\r\n     * <span class=\"hljs-doctag\">@param</span> b value of point b\r\n     * <span class=\"hljs-doctag\">@param</span> alpha determine which value has more impact (closer to 0 -&gt; a,\r\n     * closer to 1 -&gt; b)\r\n     * <span class=\"hljs-doctag\">@return</span> interpolated value\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">interpolate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> a, <span class=\"hljs-type\">float</span> b, <span class=\"hljs-type\">float</span> alpha)</span> {\r\n        <span class=\"hljs-keyword\">return</span> a * (<span class=\"hljs-number\">1</span> - alpha) + alpha * b;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> width;\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> height;\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> octaveCount;\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span> persistence;\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> seed;\r\n        <span class=\"hljs-keyword\">final</span> String charset;\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span>[][] perlinNoise;\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Width (int): &quot;</span>);\r\n        width = in.nextInt();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Height (int): &quot;</span>);\r\n        height = in.nextInt();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Octave count (int): &quot;</span>);\r\n        octaveCount = in.nextInt();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Persistence (float): &quot;</span>);\r\n        persistence = in.nextFloat();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Seed (long): &quot;</span>);\r\n        seed = in.nextLong();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Charset (String): &quot;</span>);\r\n        charset = in.next();\r\n\r\n        perlinNoise = generatePerlinNoise(width, height, octaveCount, persistence, seed);\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] chars = charset.toCharArray();\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> chars.length;\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">step</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1f</span> / length;\r\n        <span class=\"hljs-comment\">// output based on charset</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\r\n                <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> step;\r\n                <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">noiseValue</span> <span class=\"hljs-operator\">=</span> perlinNoise[x][y];\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> c : chars) {\r\n                    <span class=\"hljs-keyword\">if</span> (noiseValue &lt;= value) {\r\n                        System.out.print(c);\r\n                        <span class=\"hljs-keyword\">break</span>;\r\n                    }\r\n\r\n                    value += step;\r\n                }\r\n            }\r\n\r\n            System.out.println();\r\n        }\r\n        in.close();\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Kromzem",
      "email": "kromzem.games@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}