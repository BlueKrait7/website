{
  "slug": "knuthmorrispratt-search",
  "name": "Knuth–Morris–Pratt Search",
  "categories": [
    "sorts",
    "strings"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Strings/KnuthMorrisPrattSearcher.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Strings\\KnuthMorrisPrattSearcher.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Strings</span>\r\n{\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">KnuthMorrisPrattSearcher</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     An implementation of Knuth–Morris–Pratt Algorithm.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Worst case time complexity: O(n + k)</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - text length, k - pattern length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;str&quot;&gt;</span>The string to look in.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;pat&quot;&gt;</span>The pattern to look for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The zero-based positions of all occurrences of <span class=\"hljs-doctag\">&lt;paramref name=&quot;pat&quot; /&gt;</span> in <span class=\"hljs-doctag\">&lt;paramref name=&quot;str&quot; /&gt;</span>.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;<span class=\"hljs-built_in\">int</span>&gt; <span class=\"hljs-title\">FindIndexes</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> str, <span class=\"hljs-built_in\">string</span> pat</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> lps = FindLongestPrefixSuffixValues(pat);\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; str.Length;)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (pat[j] == str[i])\r\n                {\r\n                    j++;\r\n                    i++;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (j == pat.Length)\r\n                {\r\n                    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> i - j;\r\n                    j = lps[j - <span class=\"hljs-number\">1</span>];\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (i &lt; str.Length &amp;&amp; pat[j] != str[i])\r\n                {\r\n                    <span class=\"hljs-keyword\">if</span> (j != <span class=\"hljs-number\">0</span>)\r\n                    {\r\n                        j = lps[j - <span class=\"hljs-number\">1</span>];\r\n                    }\r\n                    <span class=\"hljs-keyword\">else</span>\r\n                    {\r\n                        i += <span class=\"hljs-number\">1</span>;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Return the longest prefix suffix values for pattern.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;pat&quot;&gt;</span>pattern to seek.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The longest prefix suffix values for <span class=\"hljs-doctag\">&lt;paramref name=&quot;pat&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">FindLongestPrefixSuffixValues</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> pat</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> lps = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[pat.Length];\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>, len = <span class=\"hljs-number\">0</span>; i &lt; pat.Length;)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (pat[i] == pat[len])\r\n                {\r\n                    len++;\r\n                    lps[i] = len;\r\n                    i++;\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (len != <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    len = lps[len - <span class=\"hljs-number\">1</span>];\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    lps[i] = <span class=\"hljs-number\">0</span>;\r\n                    i++;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> lps;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}