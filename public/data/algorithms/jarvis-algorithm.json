{
  "slug": "jarvis-algorithm",
  "name": "Jarvis Algorithm",
  "categories": [
    "geometry"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "geometry\\jarvis_algorithm.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/geometry\\jarvis_algorithm.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [Jarvis’s](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) algorithm.\r\n *\r\n * @details\r\n * Given a set of points in the plane. the convex hull of the set\r\n * is the smallest convex polygon that contains all the points of it.\r\n *\r\n * ### Algorithm\r\n * The idea of Jarvis’s Algorithm is simple, we start from the leftmost point\r\n * (or point with minimum x coordinate value) and we\r\n * keep wrapping points in counterclockwise direction.\r\n *\r\n * The idea is to use orientation() here. Next point is selected as the\r\n * point that beats all other points at counterclockwise orientation, i.e.,\r\n * next point is q if for any other point r,\r\n * we have “orientation(p, q, r) = counterclockwise”.\r\n *\r\n * For Example,\r\n * If points = {{0, 3}, {2, 2}, {1, 1}, {2, 1},\r\n                      {3, 0}, {0, 0}, {3, 3}};\r\n *\r\n * then the convex hull is\r\n * (0, 3), (0, 0), (3, 0), (3, 3)\r\n *\r\n * @author [Rishabh Agarwal](https://github.com/rishabh-997)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n *  @namespace geometry\r\n *  @brief Geometry algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> geometry {\r\n    <span class=\"hljs-comment\">/**\r\n     * @namespace jarvis\r\n     * @brief Functions for [Jarvis’s](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) algorithm\r\n     */</span>\r\n    <span class=\"hljs-keyword\">namespace</span> jarvis {\r\n        <span class=\"hljs-comment\">/**\r\n         * Structure defining the x and y co-ordinates of the given\r\n         * point in space\r\n         */</span>\r\n        <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\r\n            <span class=\"hljs-type\">int</span> x, y;\r\n        };\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Class which can be called from main and is globally available\r\n         * throughout the code\r\n         */</span>\r\n        <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Convexhull</span> {\r\n            std::vector&lt;Point&gt; points;\r\n            <span class=\"hljs-type\">int</span> size;\r\n\r\n        <span class=\"hljs-keyword\">public</span>:\r\n            <span class=\"hljs-comment\">/**\r\n             * Constructor of given class\r\n             *\r\n             * @param pointList list of all points in the space\r\n             * @param n number of points in space\r\n             */</span>\r\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">Convexhull</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;Point&gt; &amp;pointList)</span> </span>{\r\n                points = pointList;\r\n                size = points.<span class=\"hljs-built_in\">size</span>();\r\n            }\r\n\r\n            <span class=\"hljs-comment\">/**\r\n             * Creates convex hull of a set of n points.\r\n             * There must be 3 points at least for the convex hull to exist\r\n             *\r\n             * @returns an vector array containing points in space\r\n             * which enclose all given points thus forming a hull\r\n             */</span>\r\n            <span class=\"hljs-function\">std::vector&lt;Point&gt; <span class=\"hljs-title\">getConvexHull</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{\r\n                <span class=\"hljs-comment\">// Initialize Result</span>\r\n                std::vector&lt;Point&gt; hull;\r\n\r\n                <span class=\"hljs-comment\">// Find the leftmost point</span>\r\n                <span class=\"hljs-type\">int</span> leftmost_point = <span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; size; i++) {\r\n                    <span class=\"hljs-keyword\">if</span> (points[i].x &lt; points[leftmost_point].x) {\r\n                        leftmost_point = i;\r\n                    }\r\n                }\r\n                <span class=\"hljs-comment\">// Start from leftmost point, keep moving counterclockwise</span>\r\n                <span class=\"hljs-comment\">// until reach the start point again.  This loop runs O(h)</span>\r\n                <span class=\"hljs-comment\">// times where h is number of points in result or output.</span>\r\n                <span class=\"hljs-type\">int</span> p = leftmost_point, q = <span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">do</span> {\r\n                    <span class=\"hljs-comment\">// Add current point to result</span>\r\n                    hull.<span class=\"hljs-built_in\">push_back</span>(points[p]);\r\n\r\n                    <span class=\"hljs-comment\">// Search for a point &#x27;q&#x27; such that orientation(p, x, q)</span>\r\n                    <span class=\"hljs-comment\">// is counterclockwise for all points &#x27;x&#x27;. The idea</span>\r\n                    <span class=\"hljs-comment\">// is to keep track of last visited most counter clock-</span>\r\n                    <span class=\"hljs-comment\">// wise point in q. If any point &#x27;i&#x27; is more counter clock-</span>\r\n                    <span class=\"hljs-comment\">// wise than q, then update q.</span>\r\n                    q = (p + <span class=\"hljs-number\">1</span>) % size;\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n                        <span class=\"hljs-comment\">// If i is more counterclockwise than current q, then</span>\r\n                        <span class=\"hljs-comment\">// update q</span>\r\n                        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">orientation</span>(points[p], points[i], points[q]) == <span class=\"hljs-number\">2</span>) {\r\n                            q = i;\r\n                        }\r\n                    }\r\n\r\n                    <span class=\"hljs-comment\">// Now q is the most counterclockwise with respect to p</span>\r\n                    <span class=\"hljs-comment\">// Set p as q for next iteration, so that q is added to</span>\r\n                    <span class=\"hljs-comment\">// result &#x27;hull&#x27;</span>\r\n                    p = q;\r\n\r\n                } <span class=\"hljs-keyword\">while</span> (p != leftmost_point);        <span class=\"hljs-comment\">// While we don&#x27;t come to first point</span>\r\n\r\n                <span class=\"hljs-keyword\">return</span> hull;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">/**\r\n             * This function returns the geometric orientation for the three points\r\n             * in a space, ie, whether they are linear ir clockwise or\r\n             * anti-clockwise\r\n             * @param p first point selected\r\n             * @param q adjacent point for q\r\n             * @param r adjacent point for q\r\n             *\r\n             * @returns 0 -&gt; Linear\r\n             * @returns 1 -&gt; Clock Wise\r\n             * @returns 2 -&gt; Anti Clock Wise\r\n             */</span>\r\n            <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">orientation</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> Point &amp;p, <span class=\"hljs-type\">const</span> Point &amp;q, <span class=\"hljs-type\">const</span> Point &amp;r)</span> </span>{\r\n                <span class=\"hljs-type\">int</span> val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n\r\n                <span class=\"hljs-keyword\">if</span> (val == <span class=\"hljs-number\">0</span>) {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">return</span> (val &gt; <span class=\"hljs-number\">0</span>) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\r\n            }\r\n\r\n        };\r\n\r\n    } <span class=\"hljs-comment\">// namespace jarvis</span>\r\n} <span class=\"hljs-comment\">// namespace geometry</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test function\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::vector&lt;geometry::jarvis::Point&gt; points = {{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>},\r\n                                                   {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>},\r\n                                                   {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>},\r\n                                                   {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>},\r\n                                                   {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>},\r\n                                                   {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>},\r\n                                                   {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>}\r\n    };\r\n    geometry::<span class=\"hljs-function\">jarvis::Convexhull <span class=\"hljs-title\">hull</span><span class=\"hljs-params\">(points)</span></span>;\r\n    std::vector&lt;geometry::jarvis::Point&gt; actualPoint;\r\n    actualPoint = hull.<span class=\"hljs-built_in\">getConvexHull</span>();\r\n\r\n    std::vector&lt;geometry::jarvis::Point&gt; expectedPoint = {{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>},\r\n                                                          {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>},\r\n                                                          {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>},\r\n                                                          {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>}};\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; expectedPoint.<span class=\"hljs-built_in\">size</span>(); i++) {\r\n        <span class=\"hljs-built_in\">assert</span>(actualPoint[i].x == expectedPoint[i].x);\r\n        <span class=\"hljs-built_in\">assert</span>(actualPoint[i].y == expectedPoint[i].y);\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test implementations passed!\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Driver Code */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Rishabh Agarwal",
      "email": "45125121+rishabh-997@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "rishabh-997",
      "email": "rishabh.agarwal997@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}