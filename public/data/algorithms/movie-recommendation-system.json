{
  "slug": "movie-recommendation-system",
  "name": "Movie Recommendation System",
  "categories": [
    "machinelearning"
  ],
  "body": {
    "en": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>",
    "zh_Hans": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>",
    "ml": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>",
    "fr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>",
    "de": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>",
    "eo": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>",
    "es": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>",
    "it": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>",
    "hr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>",
    "uk": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"recommendation-engine\">Recommendation Engine</h1>\n<h2 id=\"building-a-movie-recommendation-engine-using-movielens-dataset\">Building a Movie Recommendation Engine using MovieLens dataset</h2>\n<p>We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \nWe are going to build a recommendation engine which will suggest movies for a user which he hasn't watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"45\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"71\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_file = <span class=\"hljs-string\">\"data\\movie_dataset\\movies.csv\"</span>\nmovie_data = pd.read_csv(movie_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_data.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"71\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Jumanji (1995)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Grumpier Old Men (1995)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Waiting to Exhale (1995)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Father of the Bride Part II (1995)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"72\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ratings_file = <span class=\"hljs-string\">\"data\\\\movie_dataset\\\\ratings.csv\"</span>\nratings_info = pd.read_csv(ratings_file, usecols = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\nratings_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"72\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>31</td>\n      <td>2.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1029</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1061</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1129</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1172</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"76\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.merge(movie_data, ratings_info, left_on = <span class=\"hljs-string\">'movieId'</span>, right_on = <span class=\"hljs-string\">'movieId'</span>)\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"76\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"49\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info.loc[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, [<span class=\"hljs-string\">'userId'</span>]]\nmovie_info[movie_info.title == <span class=\"hljs-string\">\"Toy Story (1995)\"</span>].head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"49\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>9</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>13</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>15</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>19</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"50\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_info = pd.DataFrame.sort_values(movie_info, [<span class=\"hljs-string\">'userId'</span>, <span class=\"hljs-string\">'movieId'</span>], ascending = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])\nmovie_info.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"50\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movieId</th>\n      <th>title</th>\n      <th>userId</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>246</th>\n      <td>1</td>\n      <td>Toy Story (1995)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>2111</th>\n      <td>36</td>\n      <td>Dead Man Walking (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2843</th>\n      <td>50</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>671</td>\n      <td>4.5</td>\n    </tr>\n    <tr>\n      <th>6715</th>\n      <td>230</td>\n      <td>Dolores Claiborne (1995)</td>\n      <td>671</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7809</th>\n      <td>260</td>\n      <td>Star Wars: Episode IV - A New Hope (1977)</td>\n      <td>671</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Let us see the number of users and number of movies in our dataset</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"51\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">num_users = <span class=\"hljs-built_in\">max</span>(movie_info.userId)\nnum_movies = <span class=\"hljs-built_in\">max</span>(movie_info.movieId)\n<span class=\"hljs-built_in\">print</span>(num_users)\n<span class=\"hljs-built_in\">print</span>(num_movies)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"51\"><pre class=\"nb-stdout\">671\n163949\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>how many movies were rated by each user and the number of users rated each movie</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"52\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">movie_per_user = movie_info.userId.value_counts()\nmovie_per_user.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"52\"><pre class=\"nb-text-output\">547    2391\n564    1868\n624    1735\n15     1700\n73     1610\nName: userId, dtype: int64</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"53\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">users_per_movie = movie_info.title.value_counts()\nusers_per_movie.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"53\"><pre class=\"nb-text-output\">Forrest Gump (1994)                          341\nPulp Fiction (1994)                          324\nShawshank Redemption, The (1994)             311\nSilence of the Lambs, The (1991)             304\nStar Wars: Episode IV - A New Hope (1977)    291\nName: title, dtype: int64</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Function to find top N favourite movies of a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"54\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fav_movies</span>(<span class=\"hljs-params\">current_user, N</span>):\n    <span class=\"hljs-comment\"># get rows corresponding to current user and then sort by rating in descending order</span>\n    <span class=\"hljs-comment\"># pick top N rows of the dataframe</span>\n    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \n                                          [<span class=\"hljs-string\">'rating'</span>], ascending = [<span class=\"hljs-number\">0</span>]) [:N]\n    <span class=\"hljs-comment\"># return list of titles</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(fav_movies.title)\n\n<span class=\"hljs-built_in\">print</span>(fav_movies(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))\n    \n    </code></pre></div><div class=\"nb-output\" data-prompt-number=\"54\"><pre class=\"nb-stdout\">[<span class=\"hljs-symbol\">'Grease</span> (<span class=\"hljs-name\">1978</span>)', <span class=\"hljs-symbol\">'Little</span> Mermaid, The (<span class=\"hljs-name\">1989</span>)', <span class=\"hljs-symbol\">'Sound</span> of Music, The (<span class=\"hljs-name\">1965</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Lets build recommendation engine now</p>\n<ul>\n<li>We will use a neighbour based collaborative filtering model. </li>\n<li>The idea is to use k-nearest neighbour algorithm to find neighbours of a user</li>\n<li> We will use their ratings to predict ratings of a movie not already rated by a current user.</li>\n</ul>\n<p>We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\nIf a user hasn't rated a movie, it would be represented as NaN.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"55\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">user_movie_rating_matrix = pd.pivot_table(movie_info, values = <span class=\"hljs-string\">'rating'</span>, index=[<span class=\"hljs-string\">'userId'</span>], columns=[<span class=\"hljs-string\">'movieId'</span>])\nuser_movie_rating_matrix.head()</code></pre></div><div class=\"nb-output\" data-prompt-number=\"55\"><div class=\"nb-html-output\"><div>\n<style>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table class=\"dataframe\" border=\"1\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movieId</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>161084</th>\n      <th>161155</th>\n      <th>161594</th>\n      <th>161830</th>\n      <th>161918</th>\n      <th>161944</th>\n      <th>162376</th>\n      <th>162542</th>\n      <th>162672</th>\n      <th>163949</th>\n    </tr>\n    <tr>\n      <th>userId</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 9066 columns</p>\n</div></div></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Now, we will find the similarity between 2 users by using correlation </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"62\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> scipy.spatial.distance <span class=\"hljs-keyword\">import</span> correlation\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity</span>(<span class=\"hljs-params\">user1, user2</span>):\n    <span class=\"hljs-comment\"># normalizing user1 rating i.e mean rating of user1 for any movie</span>\n    <span class=\"hljs-comment\"># nanmean will return mean of an array after ignore NaN values </span>\n    user1 = np.array(user1) - np.nanmean(user1) \n    user2 = np.array(user2) - np.nanmean(user2)\n    \n    <span class=\"hljs-comment\"># finding the similarity between 2 users</span>\n    <span class=\"hljs-comment\"># finding subset of movies rated by both the users</span>\n    common_movie_ids = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(user1)) <span class=\"hljs-keyword\">if</span> user1[i] &amp;gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> user2[i] &amp;gt; <span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(common_movie_ids) == <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        user1 = np.array([user1[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        user2 = np.array([user2[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> common_movie_ids])\n        <span class=\"hljs-keyword\">return</span> correlation(user1, user2)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p> We will now use the similarity function to find the nearest neighbour of a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"64\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># nearest_neighbour_ratings function will find the k nearest neighbours of the current user and</span>\n<span class=\"hljs-comment\"># then use their ratings to predict the current users ratings for other unrated movies </span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nearest_neighbour_ratings</span>(<span class=\"hljs-params\">current_user, K</span>):\n    <span class=\"hljs-comment\"># Creating an empty matrix whose row index is userId and the value</span>\n    <span class=\"hljs-comment\"># will be the similarity of that user to the current user</span>\n    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \n                                    columns = [<span class=\"hljs-string\">'similarity'</span>])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.index:\n        <span class=\"hljs-comment\"># finding the similarity between user i and the current user and add it to the similarity matrix</span>\n        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\n                                             user_movie_rating_matrix.loc[i])\n    <span class=\"hljs-comment\"># Sorting the similarity matrix in descending order</span>\n    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\n                                                [<span class=\"hljs-string\">'similarity'</span>], ascending= [<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-comment\"># now we will pick the top k nearest neighbou</span>\n    nearest_neighbours = similarity_matrix[:K]\n\n    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\n\n    <span class=\"hljs-comment\"># This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings</span>\n    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [<span class=\"hljs-string\">'rating'</span>])\n\n    <span class=\"hljs-comment\"># Iterating all movies for a current user</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> user_movie_rating_matrix.columns:\n        <span class=\"hljs-comment\"># by default, make predicted rating as the average rating of the current user</span>\n        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> neighbour_movie_ratings.index:\n            <span class=\"hljs-comment\"># if user j has rated the ith movie</span>\n            <span class=\"hljs-keyword\">if</span>(user_movie_rating_matrix.loc[j,i] &amp;gt; <span class=\"hljs-number\">0</span>):\n                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\n                                                    nearest_neighbours.loc[j, <span class=\"hljs-string\">'similarity'</span>]) / nearest_neighbours[<span class=\"hljs-string\">'similarity'</span>].<span class=\"hljs-built_in\">sum</span>()\n\n        predicted_movie_rating.loc[i, <span class=\"hljs-string\">'rating'</span>] = predicted_rating\n\n    <span class=\"hljs-keyword\">return</span> predicted_movie_rating</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>Predicting top N recommendations for a current user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"79\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_n_recommendations</span>(<span class=\"hljs-params\">current_user, N</span>):\n    predicted_movie_rating = nearest_neighbour_ratings(current_user, <span class=\"hljs-number\">10</span>)\n    movies_already_watched = <span class=\"hljs-built_in\">list</span>(user_movie_rating_matrix.loc[current_user]\n                                  .loc[user_movie_rating_matrix.loc[current_user] &amp;gt; <span class=\"hljs-number\">0</span>].index)\n    \n    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\n    \n    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [<span class=\"hljs-string\">'rating'</span>], ascending=[<span class=\"hljs-number\">0</span>])[:N]\n    \n    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(top_n_recommendation_titles.title)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>finding out the recommendations for a user</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"80\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">current_user = <span class=\"hljs-number\">140</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"User's favorite movies are : \"</span>, fav_movies(current_user, <span class=\"hljs-number\">5</span>),\n      <span class=\"hljs-string\">\"\\nUser's top recommendations are: \"</span>, top_n_recommendations(current_user, <span class=\"hljs-number\">3</span>))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stderr\"><span class=\"hljs-name\">C</span>:\\Users\\erchh\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\scipy\\spatial\\distance.<span class=\"hljs-name\">py</span>:<span class=\"hljs-number\">644</span>: <span class=\"hljs-name\">RuntimeWarning</span>: invalid value encountered <span class=\"hljs-keyword\">in</span> double_scalars\n  dist = <span class=\"hljs-number\">1.0</span> - uv / np.sqrt(uu * vv)\n</pre></div><div class=\"nb-output\" data-prompt-number=\"80\"><pre class=\"nb-stdout\">User<span class=\"hljs-symbol\">'s</span> favorite movies are :  ['<span class=\"hljs-type\">Shawshank</span> Redemption, The (<span class=\"hljs-number\">1994</span>)', <span class=\"hljs-symbol\">'Father</span> <span class=\"hljs-keyword\">of</span> the Bride Part II (<span class=\"hljs-number\">1995</span>)', <span class=\"hljs-symbol\">'Cast</span> Away (<span class=\"hljs-number\">2000</span>)', <span class=\"hljs-symbol\">'Parent</span> Trap, The (<span class=\"hljs-number\">1998</span>)', <span class=\"hljs-string\">\"Ocean's Eleven (2001)\"</span>] \nUser<span class=\"hljs-symbol\">'s</span> top recommendations are:  [<span class=\"hljs-symbol\">'Godfather</span>, The (<span class=\"hljs-number\">1972</span>)', <span class=\"hljs-symbol\">'Star</span> Wars: Episode V - The Empire Strikes Back (<span class=\"hljs-number\">1980</span>)', <span class=\"hljs-symbol\">'Godfather</span>: Part II, The (<span class=\"hljs-number\">1974</span>)']\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"conclusion\">Conclusion</h2>\n<p>We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. </p>\n</div></div></div>"
  },
  "implementations": {
    "jupyter": {
      "dir": "machine_learning\\Movie_recommendation_system\\Movie_Recommendation_System.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/machine_learning\\Movie_recommendation_system\\Movie_Recommendation_System.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\r\n <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# Recommendation Engine\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;## Building a Movie Recommendation Engine using MovieLens dataset \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;We will be using a MovieLens dataset. This dataset contains 100004 ratings across 9125 movies for 671 users. All selected users had at least rated 20 movies. \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;We are going to build a recommendation engine which will suggest movies for a user which he hasn&#x27;t watched yet based on the movies which he has already rated. We will be using k-nearest neighbour algorithm which we will implement from scratch.&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">45</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;import pandas as pd&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;Movie file contains information like movie id, title, genre of movies and ratings file contains data like user id, movie id, rating and timestamp in which each line after header row represents one rating of one movie by one user.&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">71</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;text/html&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;&lt;div&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;style scoped&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th:only-of-type {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: middle;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: top;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe thead th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        text-align: right;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/style&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;table border=\\&quot;1\\&quot; class=\\&quot;dataframe\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr style=\\&quot;text-align: right;\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;movieId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;title&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;0&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;1&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;2&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Jumanji (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;2&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;3&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Grumpier Old Men (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;3&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Waiting to Exhale (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;4&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;5&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Father of the Bride Part II (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/table&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/div&gt;&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;text/plain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;   movieId                               title\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;0        1                    Toy Story (1995)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;1        2                      Jumanji (1995)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;2        3             Grumpier Old Men (1995)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;3        4            Waiting to Exhale (1995)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;4        5  Father of the Bride Part II (1995)&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n     <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">71</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;execute_result&quot;</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;movie_file = \\&quot;data\\\\movie_dataset\\\\movies.csv\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;movie_data = pd.read_csv(movie_file, usecols = [0, 1])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;movie_data.head()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">72</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;text/html&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;&lt;div&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;style scoped&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th:only-of-type {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: middle;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: top;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe thead th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        text-align: right;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/style&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;table border=\\&quot;1\\&quot; class=\\&quot;dataframe\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr style=\\&quot;text-align: right;\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;userId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;movieId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;rating&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;0&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;31&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;2.5&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;1&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1029&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;3.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;2&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1061&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;3.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;3&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1129&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;2.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;4&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1172&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/table&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/div&gt;&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;text/plain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;   userId  movieId  rating\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;0       1       31     2.5\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;1       1     1029     3.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;2       1     1061     3.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;3       1     1129     2.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;4       1     1172     4.0&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n     <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">72</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;execute_result&quot;</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;ratings_file = \\&quot;data\\\\\\\\movie_dataset\\\\\\\\ratings.csv\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;ratings_info = pd.read_csv(ratings_file, usecols = [0, 1, 2])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;ratings_info.head()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">76</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;text/html&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;&lt;div&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;style scoped&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th:only-of-type {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: middle;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: top;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe thead th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        text-align: right;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/style&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;table border=\\&quot;1\\&quot; class=\\&quot;dataframe\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr style=\\&quot;text-align: right;\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;movieId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;title&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;userId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;rating&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;0&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;7&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;3.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;1&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;9&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;2&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;13&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;5.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;3&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;15&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;2.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;4&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;19&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;3.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/table&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/div&gt;&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;text/plain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;   movieId             title  userId  rating\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;0        1  Toy Story (1995)       7     3.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;1        1  Toy Story (1995)       9     4.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;2        1  Toy Story (1995)      13     5.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;3        1  Toy Story (1995)      15     2.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;4        1  Toy Story (1995)      19     3.0&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n     <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">76</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;execute_result&quot;</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;movie_info = pd.merge(movie_data, ratings_info, left_on = &#x27;movieId&#x27;, right_on = &#x27;movieId&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;movie_info.head()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">49</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;text/html&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;&lt;div&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;style scoped&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th:only-of-type {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: middle;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: top;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe thead th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        text-align: right;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/style&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;table border=\\&quot;1\\&quot; class=\\&quot;dataframe\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr style=\\&quot;text-align: right;\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;movieId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;title&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;userId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;rating&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;0&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;7&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;3.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;1&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;9&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;2&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;13&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;5.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;3&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;15&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;2.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;4&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;19&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;3.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/table&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/div&gt;&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;text/plain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;   movieId             title  userId  rating\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;0        1  Toy Story (1995)       7     3.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;1        1  Toy Story (1995)       9     4.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;2        1  Toy Story (1995)      13     5.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;3        1  Toy Story (1995)      15     2.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;4        1  Toy Story (1995)      19     3.0&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n     <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">49</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;execute_result&quot;</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;movie_info.loc[0:10, [&#x27;userId&#x27;]]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;movie_info[movie_info.title == \\&quot;Toy Story (1995)\\&quot;].head()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">50</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;text/html&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;&lt;div&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;style scoped&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th:only-of-type {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: middle;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: top;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe thead th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        text-align: right;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/style&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;table border=\\&quot;1\\&quot; class=\\&quot;dataframe\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr style=\\&quot;text-align: right;\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;movieId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;title&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;userId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;rating&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;246&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;1&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Toy Story (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;671&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;5.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;2111&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;36&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Dead Man Walking (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;671&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;2843&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;50&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Usual Suspects, The (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;671&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4.5&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;6715&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;230&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Dolores Claiborne (1995)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;671&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;7809&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;260&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;Star Wars: Episode IV - A New Hope (1977)&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;671&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;5.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/table&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/div&gt;&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;text/plain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;      movieId                                      title  userId  rating\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;246         1                           Toy Story (1995)     671     5.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;2111       36                    Dead Man Walking (1995)     671     4.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;2843       50                 Usual Suspects, The (1995)     671     4.5\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;6715      230                   Dolores Claiborne (1995)     671     4.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;7809      260  Star Wars: Episode IV - A New Hope (1977)     671     5.0&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n     <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">50</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;execute_result&quot;</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;movie_info = pd.DataFrame.sort_values(movie_info, [&#x27;userId&#x27;, &#x27;movieId&#x27;], ascending = [0, 1])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;movie_info.head()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;Let us see the number of users and number of movies in our dataset&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">51</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n      <span class=\"hljs-string\">&quot;671\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;163949\\n&quot;</span>\r\n     <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;num_users = max(movie_info.userId)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;num_movies = max(movie_info.movieId)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(num_users)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(num_movies)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;how many movies were rated by each user and the number of users rated each movie&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">52</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;scrolled&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span>\r\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;text/plain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;547    2391\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;564    1868\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;624    1735\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;15     1700\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;73     1610\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;Name: userId, dtype: int64&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n     <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">52</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;execute_result&quot;</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;movie_per_user = movie_info.userId.value_counts()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;movie_per_user.head()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">53</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;text/plain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;Forrest Gump (1994)                          341\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;Pulp Fiction (1994)                          324\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;Shawshank Redemption, The (1994)             311\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;Silence of the Lambs, The (1991)             304\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;Star Wars: Episode IV - A New Hope (1977)    291\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;Name: title, dtype: int64&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n     <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">53</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;execute_result&quot;</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;users_per_movie = movie_info.title.value_counts()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;users_per_movie.head()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;Function to find top N favourite movies of a user&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">54</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n      <span class=\"hljs-string\">&quot;[&#x27;Grease (1978)&#x27;, &#x27;Little Mermaid, The (1989)&#x27;, &#x27;Sound of Music, The (1965)&#x27;]\\n&quot;</span>\r\n     <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;def fav_movies(current_user, N):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # get rows corresponding to current user and then sort by rating in descending order\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # pick top N rows of the dataframe\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    fav_movies = pd.DataFrame.sort_values(movie_info[movie_info.userId == current_user], \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                                          [&#x27;rating&#x27;], ascending = [0]) [:N]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # return list of titles\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    return list(fav_movies.title)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(fav_movies(5, 3))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    &quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;Lets build recommendation engine now\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- We will use a neighbour based collaborative filtering model. \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- The idea is to use k-nearest neighbour algorithm to find neighbours of a user\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;-  We will use their ratings to predict ratings of a movie not already rated by a current user.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;We will represent movies watched by a user in a vector - the vector will have values for all the movies in our dataset.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;If a user hasn&#x27;t rated a movie, it would be represented as NaN.&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">55</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;data&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;text/html&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;&lt;div&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;style scoped&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th:only-of-type {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: middle;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe tbody tr th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        vertical-align: top;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    .dataframe thead th {\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;        text-align: right;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    }\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/style&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;table border=\\&quot;1\\&quot; class=\\&quot;dataframe\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr style=\\&quot;text-align: right;\\&quot;&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;movieId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;1&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;2&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;3&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;4&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;5&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;6&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;7&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;8&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;9&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;10&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;...&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;161084&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;161155&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;161594&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;161830&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;161918&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;161944&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;162376&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;162542&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;162672&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;163949&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;userId&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/thead&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;1&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;...&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;2&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;...&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;3&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;...&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;4&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;...&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;th&gt;5&lt;/th&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;4.0&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;...&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;      &lt;td&gt;NaN&lt;/td&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;    &lt;/tr&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;  &lt;/tbody&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/table&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;p&gt;5 rows × 9066 columns&lt;/p&gt;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;&lt;/div&gt;&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;text/plain&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n       <span class=\"hljs-string\">&quot;movieId  1       2       3       4       5       6       7       8       \\\\\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;userId                                                                    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;1           NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;2           NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;3           NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;4           NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;5           NaN     NaN     4.0     NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;movieId  9       10       ...    161084  161155  161594  161830  161918  \\\\\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;userId                    ...                                             \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;1           NaN     NaN   ...       NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;2           NaN     4.0   ...       NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;3           NaN     NaN   ...       NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;4           NaN     4.0   ...       NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;5           NaN     NaN   ...       NaN     NaN     NaN     NaN     NaN   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;movieId  161944  162376  162542  162672  163949  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;userId                                           \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;1           NaN     NaN     NaN     NaN     NaN  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;2           NaN     NaN     NaN     NaN     NaN  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;3           NaN     NaN     NaN     NaN     NaN  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;4           NaN     NaN     NaN     NaN     NaN  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;5           NaN     NaN     NaN     NaN     NaN  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n       <span class=\"hljs-string\">&quot;[5 rows x 9066 columns]&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n     <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">55</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;execute_result&quot;</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;user_movie_rating_matrix = pd.pivot_table(movie_info, values = &#x27;rating&#x27;, index=[&#x27;userId&#x27;], columns=[&#x27;movieId&#x27;])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;user_movie_rating_matrix.head()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;Now, we will find the similarity between 2 users by using correlation &quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">62</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;from scipy.spatial.distance import correlation\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;import numpy as np\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;def similarity(user1, user2):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # normalizing user1 rating i.e mean rating of user1 for any movie\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # nanmean will return mean of an array after ignore NaN values \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    user1 = np.array(user1) - np.nanmean(user1) \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    user2 = np.array(user2) - np.nanmean(user2)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # finding the similarity between 2 users\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # finding subset of movies rated by both the users\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    common_movie_ids = [i for i in range(len(user1)) if user1[i] &gt; 0 and user2[i] &gt; 0]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    if(len(common_movie_ids) == 0):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return 0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    else:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        user1 = np.array([user1[i] for i in common_movie_ids])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        user2 = np.array([user2[i] for i in common_movie_ids])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return correlation(user1, user2)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot; We will now use the similarity function to find the nearest neighbour of a current user&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">64</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# nearest_neighbour_ratings function will find the k nearest neighbours of the current user and\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# then use their ratings to predict the current users ratings for other unrated movies \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;def nearest_neighbour_ratings(current_user, K):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # Creating an empty matrix whose row index is userId and the value\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # will be the similarity of that user to the current user\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    similarity_matrix = pd.DataFrame(index = user_movie_rating_matrix.index, \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                                    columns = [&#x27;similarity&#x27;])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    for i in user_movie_rating_matrix.index:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        # finding the similarity between user i and the current user and add it to the similarity matrix\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        similarity_matrix.loc[i] = similarity(user_movie_rating_matrix.loc[current_user],\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                                             user_movie_rating_matrix.loc[i])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # Sorting the similarity matrix in descending order\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    similarity_matrix = pd.DataFrame.sort_values(similarity_matrix,\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                                                [&#x27;similarity&#x27;], ascending= [0])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # now we will pick the top k nearest neighbou\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    nearest_neighbours = similarity_matrix[:K]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    neighbour_movie_ratings = user_movie_rating_matrix.loc[nearest_neighbours.index]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # This is empty dataframe placeholder for predicting the rating of current user using neighbour movie ratings\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    predicted_movie_rating = pd.DataFrame(index = user_movie_rating_matrix.columns, columns = [&#x27;rating&#x27;])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    # Iterating all movies for a current user\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    for i in user_movie_rating_matrix.columns:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        # by default, make predicted rating as the average rating of the current user\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        predicted_rating = np.nanmean(user_movie_rating_matrix.loc[current_user])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        for j in neighbour_movie_ratings.index:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            # if user j has rated the ith movie\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            if(user_movie_rating_matrix.loc[j,i] &gt; 0):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                predicted_rating += ((user_movie_rating_matrix.loc[j,i] -np.nanmean(user_movie_rating_matrix.loc[j])) *\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                                                    nearest_neighbours.loc[j, &#x27;similarity&#x27;]) / nearest_neighbours[&#x27;similarity&#x27;].sum()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        predicted_movie_rating.loc[i, &#x27;rating&#x27;] = predicted_rating\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    return predicted_movie_rating&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;Predicting top N recommendations for a current user&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">79</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;def top_n_recommendations(current_user, N):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    predicted_movie_rating = nearest_neighbour_ratings(current_user, 10)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    movies_already_watched = list(user_movie_rating_matrix.loc[current_user]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                                  .loc[user_movie_rating_matrix.loc[current_user] &gt; 0].index)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    predicted_movie_rating = predicted_movie_rating.drop(movies_already_watched)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    top_n_recommendations = pd.DataFrame.sort_values(predicted_movie_rating, [&#x27;rating&#x27;], ascending=[0])[:N]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    top_n_recommendation_titles = movie_data.loc[movie_data.movieId.isin(top_n_recommendations.index)]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    return list(top_n_recommendation_titles.title)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;finding out the recommendations for a user&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">80</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;scrolled&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span>\r\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stderr&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n      <span class=\"hljs-string\">&quot;C:\\\\Users\\\\erchh\\\\Anaconda3\\\\envs\\\\tensorflow\\\\lib\\\\site-packages\\\\scipy\\\\spatial\\\\distance.py:644: RuntimeWarning: invalid value encountered in double_scalars\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;  dist = 1.0 - uv / np.sqrt(uu * vv)\\n&quot;</span>\r\n     <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n      <span class=\"hljs-string\">&quot;User&#x27;s favorite movies are :  [&#x27;Shawshank Redemption, The (1994)&#x27;, &#x27;Father of the Bride Part II (1995)&#x27;, &#x27;Cast Away (2000)&#x27;, &#x27;Parent Trap, The (1998)&#x27;, \\&quot;Ocean&#x27;s Eleven (2001)\\&quot;] \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;User&#x27;s top recommendations are:  [&#x27;Godfather, The (1972)&#x27;, &#x27;Star Wars: Episode V - The Empire Strikes Back (1980)&#x27;, &#x27;Godfather: Part II, The (1974)&#x27;]\\n&quot;</span>\r\n     <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;current_user = 140\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(\\&quot;User&#x27;s favorite movies are : \\&quot;, fav_movies(current_user, 5),\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;      \\&quot;\\\\nUser&#x27;s top recommendations are: \\&quot;, top_n_recommendations(current_user, 3))&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;## Conclusion\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;We have built a movie recommendation engine using k-nearest neighbour algorithm implemented from scratch. &quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;language&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;language_info&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;codemirror_mode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\r\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;file_extension&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;.py&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;mimetype&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text/x-python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;nbconvert_exporter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;pygments_lexer&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython3&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3.5.4&quot;</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Archit",
      "email": "46870255+Architkumar13@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}