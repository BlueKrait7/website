{
  "slug": "02-imdb-binary-classification",
  "name": "02-Imdb-Binary-Classification",
  "categories": [
    "neuralnetwork"
  ],
  "body": {
    "en": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "zh_Hans": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "ml": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "fr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "de": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "eo": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "es": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "it": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "hr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "uk": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Imports</span>\n<span class=\"hljs-keyword\">from</span> keras.datasets <span class=\"hljs-keyword\">import</span> imdb\n\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> models\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> layers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> optimizers\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> losses\n<span class=\"hljs-keyword\">from</span> keras <span class=\"hljs-keyword\">import</span> metrics,activations\n\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stderr\">C:\\Users\\Hussnain\\Anaconda3\\envs\\tensorflow\\lib\\site-packages\\h5py\\__init__.py:<span class=\"hljs-number\">36</span>: FutureWarning: <span class=\"hljs-keyword\">Conversion</span> <span class=\"hljs-keyword\">of</span> the second argument <span class=\"hljs-keyword\">of</span> issubdtype <span class=\"hljs-keyword\">from</span> `<span class=\"hljs-type\">float</span>` <span class=\"hljs-keyword\">to</span> `np.floating` <span class=\"hljs-keyword\">is</span> deprecated. <span class=\"hljs-keyword\">In</span> future, it will be treated <span class=\"hljs-keyword\">as</span> `np.float64 == np.dtype(<span class=\"hljs-type\">float</span>).<span class=\"hljs-keyword\">type</span>`.\n  <span class=\"hljs-keyword\">from</span> ._conv <span class=\"hljs-keyword\">import</span> register_converters <span class=\"hljs-keyword\">as</span> _register_converters\n<span class=\"hljs-keyword\">Using</span> TensorFlow backend.\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz</span>\n\n(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=<span class=\"hljs-number\">10000</span>)</code></pre></div><div class=\"nb-output\"><pre class=\"nb-stdout\">Downloading <span class=\"hljs-built_in\">data</span> from https:<span class=\"hljs-comment\">//s3.amazonaws.com/text-datasets/imdb.npz</span>\n <span class=\"hljs-number\">1048576</span>/<span class=\"hljs-number\">17464789</span> <span class=\"hljs-meta\">[</span>&amp;gt;<span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span><span class=\"hljs-params\">...</span>..<span class=\"hljs-meta\">]</span> - ETA: 53:49</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Exploring the dataset</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain shape'</span>, xtrain.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain shape'</span>, ytrain.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtest shape'</span>, xtest.shape)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytest shape'</span>, ytest.shape)\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'xtrain first review as dictionary index'</span>, xtrain[<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'ytrain label'</span>, ytrain[<span class=\"hljs-number\">0</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#index to words mapping</span>\nword_index = imdb.get_word_index()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">reverse_word_index = <span class=\"hljs-built_in\">dict</span>([(value, key) <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> word_index.items()])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">decode_review = <span class=\"hljs-string\">' '</span>.join([reverse_word_index.get(i-<span class=\"hljs-number\">3</span>, reverse_word_index.get(i)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xtrain[<span class=\"hljs-number\">22</span>]])\ndecode_review</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vectorize_sequences</span>(<span class=\"hljs-params\">sequences, dimension=<span class=\"hljs-number\">10000</span></span>):\n    results = np.zeros((<span class=\"hljs-built_in\">len</span>(sequences), dimension))\n    <span class=\"hljs-keyword\">for</span> i, sequence <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(sequences):\n        results[i, sequence] = <span class=\"hljs-number\">1.</span> \n    <span class=\"hljs-keyword\">return</span> results\n\nx_train = vectorize_sequences(xtrain)\nx_test = vectorize_sequences(xtest)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">ytrain = np.asarray(ytrain).astype(<span class=\"hljs-string\">'float32'</span>)\nytest = np.asarray(ytest).astype(<span class=\"hljs-string\">'float32'</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#model</span>\nmodel = models.Sequential()\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu, input_shape=(<span class=\"hljs-number\">10000</span>,)))\nmodel.add(layers.Dense(<span class=\"hljs-number\">16</span>, activation=activations.relu))\nmodel.add(layers.Dense(<span class=\"hljs-number\">1</span>, activation=activations.sigmoid))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">model.<span class=\"hljs-built_in\">compile</span>(optimizer=optimizers.RMSprop(lr=<span class=\"hljs-number\">0.0001</span>), loss=losses.mse, metrics=[<span class=\"hljs-string\">'acc'</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">x_val = x_train[:<span class=\"hljs-number\">10000</span>]\ny_val = ytrain[:<span class=\"hljs-number\">10000</span>]\n\nx_train_partial = x_train[<span class=\"hljs-number\">10000</span>:]\ny_train_partial = ytrain[<span class=\"hljs-number\">10000</span>:]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">history = model.fit(x_train_partial, y_train_partial, epochs=<span class=\"hljs-number\">4</span>, batch_size=<span class=\"hljs-number\">512</span>, validation_data=(x_val,y_val))\nhistory_dict = history.history\nhistory_dict.keys()\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'acc'</span>][-<span class=\"hljs-number\">1</span>])\n<span class=\"hljs-built_in\">print</span>(history.history[<span class=\"hljs-string\">'val_acc'</span>][-<span class=\"hljs-number\">1</span>])</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(model.predict(x_train_partial[<span class=\"hljs-number\">22</span>:<span class=\"hljs-number\">23</span>]))</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">loss = history_dict[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history_dict[<span class=\"hljs-string\">'val_loss'</span>]\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(loss)+<span class=\"hljs-number\">1</span>)\nepochs</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">%matplotlib\nacc = history.history[<span class=\"hljs-string\">'acc'</span>]\nval_acc = history.history[<span class=\"hljs-string\">'val_acc'</span>]\nloss = history.history[<span class=\"hljs-string\">'loss'</span>]\nval_loss = history.history[<span class=\"hljs-string\">'val_loss'</span>]\n\nepochs = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(acc) + <span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\"># \"bo\" is for \"blue dot\"</span>\nplt.plot(epochs, loss, <span class=\"hljs-string\">'ro'</span>, label=<span class=\"hljs-string\">'Training loss'</span>)\n<span class=\"hljs-comment\"># b is for \"solid blue line\"</span>\nplt.plot(epochs, val_loss, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation loss'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation loss'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.clf()      <span class=\"hljs-comment\"># clear figure# clear  </span>\nacc_values = history_dict[<span class=\"hljs-string\">'acc'</span>]\nval_acc_values = history_dict[<span class=\"hljs-string\">'val_acc'</span>]\n\nplt.plot(epochs, acc, <span class=\"hljs-string\">'bo'</span>, label=<span class=\"hljs-string\">'Training acc'</span>)\nplt.plot(epochs, val_acc, <span class=\"hljs-string\">'b'</span>, label=<span class=\"hljs-string\">'Validation acc'</span>)\nplt.title(<span class=\"hljs-string\">'Training and validation accuracy'</span>)\nplt.xlabel(<span class=\"hljs-string\">'Epochs'</span>)\nplt.ylabel(<span class=\"hljs-string\">'Loss'</span>)\nplt.legend()\n\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>"
  },
  "implementations": {
    "jupyter": {
      "dir": "neural_network\\02-imdb-binary-classification.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/neural_network\\02-imdb-binary-classification.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\r\n <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stderr&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n      <span class=\"hljs-string\">&quot;C:\\\\Users\\\\Hussnain\\\\Anaconda3\\\\envs\\\\tensorflow\\\\lib\\\\site-packages\\\\h5py\\\\__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;  from ._conv import register_converters as _register_converters\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;Using TensorFlow backend.\\n&quot;</span>\r\n     <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#Imports\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;from keras.datasets import imdb\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;from keras import models\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;from keras import layers\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;from keras import optimizers\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;from keras import losses\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;from keras import metrics,activations\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;import matplotlib.pyplot as plt&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n      <span class=\"hljs-string\">&quot;Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot; 1048576/17464789 [&gt;.............................] - ETA: 53:49&quot;</span>\r\n     <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#Downloading data from https://s3.amazonaws.com/text-datasets/imdb.npz\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;(xtrain,ytrain), (xtest, ytest) = imdb.load_data(num_words=10000)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#Exploring the dataset\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(&#x27;xtrain shape&#x27;, xtrain.shape)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(&#x27;ytrain shape&#x27;, ytrain.shape)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(&#x27;xtest shape&#x27;, xtest.shape)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(&#x27;ytest shape&#x27;, ytest.shape)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(&#x27;xtrain first review as dictionary index&#x27;, xtrain[1])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(&#x27;ytrain label&#x27;, ytrain[0])&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#index to words mapping\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;word_index = imdb.get_word_index()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;decode_review = &#x27; &#x27;.join([reverse_word_index.get(i-3, reverse_word_index.get(i)) for i in xtrain[22]])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;decode_review&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;import numpy as np\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;def vectorize_sequences(sequences, dimension=10000):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    results = np.zeros((len(sequences), dimension))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    for i, sequence in enumerate(sequences):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        results[i, sequence] = 1. \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    return results\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;x_train = vectorize_sequences(xtrain)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;x_test = vectorize_sequences(xtest)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;ytrain = np.asarray(ytrain).astype(&#x27;float32&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;ytest = np.asarray(ytest).astype(&#x27;float32&#x27;)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#model\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;model = models.Sequential()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;model.add(layers.Dense(16, activation=activations.relu, input_shape=(10000,)))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;model.add(layers.Dense(16, activation=activations.relu))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;model.add(layers.Dense(1, activation=activations.sigmoid))&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;model.compile(optimizer=optimizers.RMSprop(lr=0.0001), loss=losses.mse, metrics=[&#x27;acc&#x27;])&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;x_val = x_train[:10000]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;y_val = ytrain[:10000]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;x_train_partial = x_train[10000:]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;y_train_partial = ytrain[10000:]&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;history = model.fit(x_train_partial, y_train_partial, epochs=4, batch_size=512, validation_data=(x_val,y_val))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;history_dict = history.history\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;history_dict.keys()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(history.history[&#x27;acc&#x27;][-1])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(history.history[&#x27;val_acc&#x27;][-1])&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;print(model.predict(x_train_partial[22:23]))&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;loss = history_dict[&#x27;loss&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;val_loss = history_dict[&#x27;val_loss&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;epochs = range(0, len(loss)+1)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;epochs&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;%matplotlib\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;acc = history.history[&#x27;acc&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;val_acc = history.history[&#x27;val_acc&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;loss = history.history[&#x27;loss&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;val_loss = history.history[&#x27;val_loss&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;epochs = range(1, len(acc) + 1)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# \\&quot;bo\\&quot; is for \\&quot;blue dot\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.plot(epochs, loss, &#x27;ro&#x27;, label=&#x27;Training loss&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# b is for \\&quot;solid blue line\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.plot(epochs, val_loss, &#x27;b&#x27;, label=&#x27;Validation loss&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Training and validation loss&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.xlabel(&#x27;Epochs&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.ylabel(&#x27;Loss&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.legend()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.show()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;plt.clf()      # clear figure# clear  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;acc_values = history_dict[&#x27;acc&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;val_acc_values = history_dict[&#x27;val_acc&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.plot(epochs, acc, &#x27;bo&#x27;, label=&#x27;Training acc&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.plot(epochs, val_acc, &#x27;b&#x27;, label=&#x27;Validation acc&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Training and validation accuracy&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.xlabel(&#x27;Epochs&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.ylabel(&#x27;Loss&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.legend()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.show()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;language&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;language_info&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;codemirror_mode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\r\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;file_extension&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;.py&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;mimetype&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text/x-python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;nbconvert_exporter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;pygments_lexer&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython3&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3.6.5&quot;</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Hussnain Fareed",
      "email": "14870938+husnainfareed@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}