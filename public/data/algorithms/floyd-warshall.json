{
  "slug": "floyd-warshall",
  "name": "Floyd Warshall",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming\\floyd_warshall.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming\\floyd_warshall.py",
      "code": "<span class=\"hljs-keyword\">import</span> math\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, N=<span class=\"hljs-number\">0</span></span>):  <span class=\"hljs-comment\"># a graph with Node 0,1,...,N-1</span>\r\n        self.N = N\r\n        self.W = [\r\n            [math.inf <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, N)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, N)\r\n        ]  <span class=\"hljs-comment\"># adjacency matrix for weight</span>\r\n        self.dp = [\r\n            [math.inf <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, N)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, N)\r\n        ]  <span class=\"hljs-comment\"># dp[i][j] stores minimum distance from i to j</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-params\">self, u, v, w</span>):\r\n        self.dp[u][v] = w\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">floyd_warshall</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, self.N):\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, self.N):\r\n                <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, self.N):\r\n                    self.dp[i][j] = <span class=\"hljs-built_in\">min</span>(self.dp[i][j], self.dp[i][k] + self.dp[k][j])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">showMin</span>(<span class=\"hljs-params\">self, u, v</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.dp[u][v]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    graph = Graph(<span class=\"hljs-number\">5</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)\r\n    graph.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>)\r\n    graph.floyd_warshall()\r\n    graph.showMin(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\r\n    graph.showMin(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>)\r\n"
    },
    "javascript": {
      "dir": "Graphs\\FloydWarshall.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs\\FloydWarshall.js",
      "code": "<span class=\"hljs-comment\">/*\r\n  Source:\r\n    https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm\r\n\r\n  Complexity:\r\n    O(|V|^3) where V is the set of vertices\r\n*/</span>\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FloydWarshall</span> = (<span class=\"hljs-params\">dist</span>) =&gt; {\r\n  <span class=\"hljs-comment\">// Input:- dist: 2D Array where dist[i][j] = edge weight b/w i and j</span>\r\n  <span class=\"hljs-comment\">// Output:- dist: 2D Array where dist[i][j] = shortest dist b/w i and j</span>\r\n  <span class=\"hljs-keyword\">const</span> n = dist.<span class=\"hljs-property\">length</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">0</span>; k &lt; n; k++) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\r\n        <span class=\"hljs-keyword\">if</span> (dist[i][j] &gt; dist[i][k] + dist[k][j]) {\r\n          <span class=\"hljs-comment\">// dist from i to j via k is lesser than the current distance</span>\r\n          dist[i][j] = dist[i][k] + dist[k][j]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> dist\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FloydWarshall</span> }\r\n\r\n<span class=\"hljs-comment\">// For the following graph (edge weights are shown in brackets)</span>\r\n<span class=\"hljs-comment\">//  4       1       dist[1][2] = dist[2][1] = 1</span>\r\n<span class=\"hljs-comment\">//   \\  (2)/ \\      dist[1][3] = dist[3][1] = 2</span>\r\n<span class=\"hljs-comment\">//    \\   /   \\(1)  dist[1][4] = dist[4][1] = Infinity</span>\r\n<span class=\"hljs-comment\">//  (1)\\ /     \\    dist[3][4] = dist[4][3] = 1</span>\r\n<span class=\"hljs-comment\">//      3       2   dist[2][4] = dist[4][2] = Infinity</span>\r\n<span class=\"hljs-comment\">//                  dist[2][3] = dist[3][2] = Infinity</span>\r\n<span class=\"hljs-comment\">// Output should be:</span>\r\n<span class=\"hljs-comment\">// [ [0, 1, 2, 3],</span>\r\n<span class=\"hljs-comment\">//   [1, 0, 3, 4],</span>\r\n<span class=\"hljs-comment\">//   [2, 3, 0, 1],</span>\r\n<span class=\"hljs-comment\">//   [3, 4, 1, 0] ]</span>\r\n\r\n<span class=\"hljs-comment\">// FloydWarshall(</span>\r\n<span class=\"hljs-comment\">//     [[0, 1, 2, Infinity],</span>\r\n<span class=\"hljs-comment\">//       [1, 0, Infinity, Infinity],</span>\r\n<span class=\"hljs-comment\">//       [2, Infinity, 0, 1],</span>\r\n<span class=\"hljs-comment\">//       [Infinity, Infinity, 1, 0]</span>\r\n<span class=\"hljs-comment\">//     ]</span>\r\n<span class=\"hljs-comment\">//   )</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming\\floyd_warshall.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\floyd_warshall.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">using</span> std::cin;\r\n<span class=\"hljs-keyword\">using</span> std::cout;\r\n<span class=\"hljs-keyword\">using</span> std::endl;\r\n\r\n<span class=\"hljs-comment\">// Wrapper class for storing a graph</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\r\n <span class=\"hljs-keyword\">public</span>:\r\n    <span class=\"hljs-type\">int</span> vertexNum;\r\n    <span class=\"hljs-type\">int</span> **edges;\r\n\r\n    <span class=\"hljs-comment\">// Constructs a graph with V vertices and E edges</span>\r\n    <span class=\"hljs-built_in\">Graph</span>(<span class=\"hljs-type\">int</span> V) {\r\n        <span class=\"hljs-keyword\">this</span>-&gt;vertexNum = V;\r\n        <span class=\"hljs-keyword\">this</span>-&gt;edges = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span> *[V];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\r\n            <span class=\"hljs-keyword\">this</span>-&gt;edges[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[V];\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) <span class=\"hljs-keyword\">this</span>-&gt;edges[i][j] = INT_MAX;\r\n            <span class=\"hljs-keyword\">this</span>-&gt;edges[i][i] = <span class=\"hljs-number\">0</span>;\r\n        }\r\n    }\r\n\r\n    ~<span class=\"hljs-built_in\">Graph</span>() {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; vertexNum; i++) <span class=\"hljs-keyword\">delete</span>[] edges[i];\r\n        <span class=\"hljs-keyword\">delete</span>[] edges;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Adds the given edge to the graph</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dst, <span class=\"hljs-type\">int</span> weight)</span> </span>{\r\n        <span class=\"hljs-keyword\">this</span>-&gt;edges[src][dst] = weight;\r\n    }\r\n};\r\n\r\n<span class=\"hljs-comment\">// Utility function to print distances</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> dist[], <span class=\"hljs-type\">int</span> V)</span> </span>{\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThe Distance matrix for Floyd - Warshall&quot;</span> &lt;&lt; endl;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) {\r\n            <span class=\"hljs-keyword\">if</span> (dist[i * V + j] != INT_MAX)\r\n                cout &lt;&lt; dist[i * V + j] &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\r\n            <span class=\"hljs-keyword\">else</span>\r\n                cout &lt;&lt; <span class=\"hljs-string\">&quot;INF&quot;</span>\r\n                     &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\r\n        }\r\n        cout &lt;&lt; endl;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// The main function that finds the shortest path from a vertex</span>\r\n<span class=\"hljs-comment\">// to all other vertices using Floyd-Warshall Algorithm.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">FloydWarshall</span><span class=\"hljs-params\">(Graph graph)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> V = graph.vertexNum;\r\n    <span class=\"hljs-type\">int</span> dist[V][V];\r\n\r\n    <span class=\"hljs-comment\">// Initialise distance array</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) dist[i][j] = graph.edges[i][j];\r\n\r\n    <span class=\"hljs-comment\">// Calculate distances</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; V; k++)\r\n        <span class=\"hljs-comment\">// Choose an intermediate vertex</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n            <span class=\"hljs-comment\">// Choose a source vertex for given intermediate</span>\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++)\r\n                <span class=\"hljs-comment\">// Choose a destination vertex for above source vertex</span>\r\n\r\n                <span class=\"hljs-keyword\">if</span> (dist[i][k] != INT_MAX &amp;&amp; dist[k][j] != INT_MAX &amp;&amp;\r\n                    dist[i][k] + dist[k][j] &lt; dist[i][j])\r\n                    <span class=\"hljs-comment\">// If the distance through intermediate vertex is less than</span>\r\n                    <span class=\"hljs-comment\">// direct edge then update value in distance array</span>\r\n                    dist[i][j] = dist[i][k] + dist[k][j];\r\n\r\n    <span class=\"hljs-comment\">// Convert 2d array to 1d array for print</span>\r\n    <span class=\"hljs-type\">int</span> dist1d[V * V];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) dist1d[i * V + j] = dist[i][j];\r\n\r\n    <span class=\"hljs-built_in\">print</span>(dist1d, V);\r\n}\r\n\r\n<span class=\"hljs-comment\">// Driver Function</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> V, E;\r\n    <span class=\"hljs-type\">int</span> src, dst, weight;\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of vertices: &quot;</span>;\r\n    cin &gt;&gt; V;\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of edges: &quot;</span>;\r\n    cin &gt;&gt; E;\r\n    <span class=\"hljs-function\">Graph <span class=\"hljs-title\">G</span><span class=\"hljs-params\">(V)</span></span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; E; i++) {\r\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEdge &quot;</span> &lt;&lt; i + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter source: &quot;</span>;\r\n        cin &gt;&gt; src;\r\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter destination: &quot;</span>;\r\n        cin &gt;&gt; dst;\r\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter weight: &quot;</span>;\r\n        cin &gt;&gt; weight;\r\n        G.<span class=\"hljs-built_in\">addEdge</span>(src, dst, weight);\r\n    }\r\n    <span class=\"hljs-built_in\">FloydWarshall</span>(G);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\graphs\\FloydWarshall.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\graphs\\FloydWarshall.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FloydWarshall</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> DistanceMatrix[][];\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> numberofvertices; <span class=\"hljs-comment\">// number of vertices in the graph</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">INFINITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">999</span>;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">FloydWarshall</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> numberofvertices)</span> {\r\n        DistanceMatrix\r\n                = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[numberofvertices + <span class=\"hljs-number\">1</span>][numberofvertices\r\n                + <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// stores the value of distance from all the possible path form the source</span>\r\n        <span class=\"hljs-comment\">// vertex to destination vertex</span>\r\n        <span class=\"hljs-comment\">// The matrix is initialized with 0&#x27;s by default</span>\r\n        <span class=\"hljs-built_in\">this</span>.numberofvertices = numberofvertices;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">floydwarshall</span><span class=\"hljs-params\">(\r\n            <span class=\"hljs-type\">int</span> AdjacencyMatrix[][])</span> <span class=\"hljs-comment\">// calculates all the distances from source to destination vertex</span>\r\n    {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; source &lt;= numberofvertices; source++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">destination</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; destination &lt;= numberofvertices; destination++) {\r\n                DistanceMatrix[source][destination] = AdjacencyMatrix[source][destination];\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">intermediate</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; intermediate &lt;= numberofvertices; intermediate++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; source &lt;= numberofvertices; source++) {\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">destination</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; destination &lt;= numberofvertices; destination++) {\r\n                    <span class=\"hljs-keyword\">if</span> (DistanceMatrix[source][intermediate] + DistanceMatrix[intermediate][destination]\r\n                            &lt; DistanceMatrix[source][destination]) <span class=\"hljs-comment\">// if the new distance calculated is less then the earlier shortest</span>\r\n                    <span class=\"hljs-comment\">// calculated distance it get replaced as new shortest distance</span>\r\n                    {\r\n                        DistanceMatrix[source][destination]\r\n                                = DistanceMatrix[source][intermediate] + DistanceMatrix[intermediate][destination];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; source &lt;= numberofvertices; source++) {\r\n            System.out.print(<span class=\"hljs-string\">&quot;\\t&quot;</span> + source);\r\n        }\r\n        System.out.println();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; source &lt;= numberofvertices; source++) {\r\n            System.out.print(source + <span class=\"hljs-string\">&quot;\\t&quot;</span>);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">destination</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; destination &lt;= numberofvertices; destination++) {\r\n                System.out.print(DistanceMatrix[source][destination] + <span class=\"hljs-string\">&quot;\\t&quot;</span>);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String... arg)</span> {\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the number of vertices&quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">numberOfVertices</span> <span class=\"hljs-operator\">=</span> scan.nextInt();\r\n        <span class=\"hljs-type\">int</span>[][] adjacencyMatrix = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[numberOfVertices + <span class=\"hljs-number\">1</span>][numberOfVertices + <span class=\"hljs-number\">1</span>];\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the Weighted Matrix for the graph&quot;</span>);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; source &lt;= numberOfVertices; source++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">destination</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; destination &lt;= numberOfVertices; destination++) {\r\n                adjacencyMatrix[source][destination] = scan.nextInt();\r\n                <span class=\"hljs-keyword\">if</span> (source == destination) {\r\n                    adjacencyMatrix[source][destination] = <span class=\"hljs-number\">0</span>;\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">if</span> (adjacencyMatrix[source][destination] == <span class=\"hljs-number\">0</span>) {\r\n                    adjacencyMatrix[source][destination] = INFINITY;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;The Transitive Closure of the Graph&quot;</span>);\r\n        <span class=\"hljs-type\">FloydWarshall</span> <span class=\"hljs-variable\">floydwarshall</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FloydWarshall</span>(numberOfVertices);\r\n        floydwarshall.floydwarshall(adjacencyMatrix);\r\n        scan.close();\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "data_structures\\graphs\\floyd_warshall.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\graphs\\floyd_warshall.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">// Structure for storing a graph</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> vertexNum;\r\n    <span class=\"hljs-type\">int</span> **edges;\r\n};\r\n\r\n<span class=\"hljs-comment\">// Constructs a graph with V vertices and E edges</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *G, <span class=\"hljs-type\">int</span> V)</span>\r\n{\r\n    G-&gt;vertexNum = V;\r\n    G-&gt;edges = (<span class=\"hljs-type\">int</span> **)<span class=\"hljs-built_in\">malloc</span>(V * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *));\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n    {\r\n        G-&gt;edges[i] = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(V * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) G-&gt;edges[i][j] = INT_MAX;\r\n        G-&gt;edges[i][i] = <span class=\"hljs-number\">0</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Adds the given edge to the graph</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *G, <span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dst, <span class=\"hljs-type\">int</span> weight)</span>\r\n{\r\n    G-&gt;edges[src][dst] = weight;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Utility function to print distances</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> dist[], <span class=\"hljs-type\">int</span> V)</span>\r\n{\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nThe Distance matrix for Floyd - Warshall\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (dist[i * V + j] != INT_MAX)\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>, dist[i * V + j]);\r\n            <span class=\"hljs-keyword\">else</span>\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;INF\\t&quot;</span>);\r\n        }\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// The main function that finds the shortest path from a vertex</span>\r\n<span class=\"hljs-comment\">// to all other vertices using Floyd-Warshall Algorithm.</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">FloydWarshall</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> V = graph-&gt;vertexNum;\r\n    <span class=\"hljs-type\">int</span> dist[V][V];\r\n\r\n    <span class=\"hljs-comment\">// Initialise distance array</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) dist[i][j] = graph-&gt;edges[i][j];\r\n\r\n    <span class=\"hljs-comment\">// Calculate distances</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; V; k++)\r\n        <span class=\"hljs-comment\">// Choose an intermediate vertex</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n            <span class=\"hljs-comment\">// Choose a source vertex for given intermediate</span>\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++)\r\n                <span class=\"hljs-comment\">// Choose a destination vertex for above source vertex</span>\r\n\r\n                <span class=\"hljs-keyword\">if</span> (dist[i][k] != INT_MAX &amp;&amp; dist[k][j] != INT_MAX &amp;&amp;\r\n                    dist[i][k] + dist[k][j] &lt; dist[i][j])\r\n                    <span class=\"hljs-comment\">// If the distance through intermediate vertex is less than</span>\r\n                    <span class=\"hljs-comment\">// direct edge then update value in distance array</span>\r\n                    dist[i][j] = dist[i][k] + dist[k][j];\r\n\r\n    <span class=\"hljs-comment\">// Convert 2d array to 1d array for print</span>\r\n    <span class=\"hljs-type\">int</span> dist1d[V * V];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) dist1d[i * V + j] = dist[i][j];\r\n\r\n    print(dist1d, V);\r\n}\r\n\r\n<span class=\"hljs-comment\">// Driver Function</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> V, E;\r\n    <span class=\"hljs-type\">int</span> src, dst, weight;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> <span class=\"hljs-title\">G</span>;</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter number of vertices: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;V);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter number of edges: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;E);\r\n    createGraph(&amp;G, V);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; E; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEdge %d \\nEnter source: &quot;</span>, i + <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;src);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter destination: &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;dst);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter weight: &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;weight);\r\n        addEdge(&amp;G, src, dst, weight);\r\n    }\r\n    FloydWarshall(&amp;G);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "go": {
      "dir": "graph\\floydwarshall.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph\\floydwarshall.go",
      "code": "<span class=\"hljs-comment\">// Floyd-Warshall algorithm</span>\r\n<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> graph\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;math&quot;</span>\r\n\r\n<span class=\"hljs-comment\">// WeightedGraph defining matrix to use 2d array easier</span>\r\n<span class=\"hljs-keyword\">type</span> WeightedGraph [][]<span class=\"hljs-type\">float64</span>\r\n\r\n<span class=\"hljs-comment\">// Defining maximum value. If two vertices share this value, it means they are not connected</span>\r\n<span class=\"hljs-keyword\">var</span> Inf = math.Inf(<span class=\"hljs-number\">1</span>)\r\n\r\n<span class=\"hljs-comment\">// FloydWarshall Returns all pair&#x27;s shortest path using Floyd Warshall algorithm</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">FloydWarshall</span><span class=\"hljs-params\">(graph WeightedGraph)</span></span> WeightedGraph {\r\n\t<span class=\"hljs-comment\">// If graph is empty, returns nil</span>\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(graph) == <span class=\"hljs-number\">0</span> || <span class=\"hljs-built_in\">len</span>(graph) != <span class=\"hljs-built_in\">len</span>(graph[<span class=\"hljs-number\">0</span>]) {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(graph); i++ {\r\n\t\t<span class=\"hljs-comment\">//If graph matrix width is different than the height, returns nil</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(graph[i]) != <span class=\"hljs-built_in\">len</span>(graph) {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n\t\t}\r\n\t}\r\n\r\n\tnumVertices := <span class=\"hljs-built_in\">len</span>(graph)\r\n\r\n\t<span class=\"hljs-comment\">// Initializing result matrix and filling it up with same values as given graph</span>\r\n\tresult := <span class=\"hljs-built_in\">make</span>(WeightedGraph, numVertices)\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numVertices; i++ {\r\n\t\tresult[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">float64</span>, numVertices)\r\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; numVertices; j++ {\r\n\t\t\tresult[i][j] = graph[i][j]\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// Running over the result matrix and following the algorithm</span>\r\n\t<span class=\"hljs-keyword\">for</span> k := <span class=\"hljs-number\">0</span>; k &lt; numVertices; k++ {\r\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; numVertices; i++ {\r\n\t\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; numVertices; j++ {\r\n\t\t\t\t<span class=\"hljs-comment\">// If there is a less costly path from i to j node, remembering it</span>\r\n\t\t\t\t<span class=\"hljs-keyword\">if</span> result[i][j] &gt; result[i][k]+result[k][j] {\r\n\t\t\t\t\tresult[i][j] = result[i][k] + result[k][j]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> result\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "NimrodRak",
      "email": "68863114+NimrodRak@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "utkarsh",
      "email": "ucponia@gmail.com",
      "commits": 1
    },
    {
      "name": "Calebe Oliveira",
      "email": "30943380+calebeof@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 1
    },
    {
      "name": "ioane margiani",
      "email": "imarg16@freeuni.edu.ge",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Chen Ostrovski",
      "email": "chenostrovski@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Stephen Gemin",
      "email": "45926479+StephenGemin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "ashu01",
      "email": "as01hu@gmail.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Sarot Busala",
      "email": "sabuza97@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Ayush Nagar",
      "email": "32647423+ayushnagar123@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "arpanjain97",
      "email": "arpanjain97@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}