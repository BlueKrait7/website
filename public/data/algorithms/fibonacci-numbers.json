{
  "slug": "fibonacci-numbers",
  "name": "Fibonacci Numbers",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {
    "en": "<p>In mathematics, the Fibonacci numbers commonly denoted F(n), form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1.  The Sequence looks like this:</p>\n<p><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34,  ...]</code></p>\n<h2>Applications</h2>\n<p>Finding\r\n<code>N-th</code> member of this sequence would be useful in many Applications:</p>\n<ul>\n<li>Recently Fibonacci sequence and the golden ratio are of great interest to researchers in many fields of</li>\n</ul>\n<p>science including high energy physics, quantum mechanics, Cryptography and Coding.</p>\n<h2>Steps</h2>\n<ol>\n<li>Prepare Base Matrice</li>\n<li>Calculate the power of this Matrice</li>\n<li>Take Corresponding value from Matrix</li>\n</ol>\n<h2>Example</h2>\n<p>Find <code>8-th</code> member of Fibonacci</p>\n<h3>Step 0</h3>\n<pre><code class=\"hljs language-reasonml\"><span class=\"hljs-pattern-match\">| <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>+1)</span>  <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>)</span>  |\r\n| <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>)</span>    <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>-1)</span>|\n</span></code></pre>\n<h3>Step 1</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^1\r\n|<span class=\"hljs-string\"> 1 1 </span>|\r\n|<span class=\"hljs-string\"> 1 0 </span>|\n</code></pre>\n<h3>Step 2</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^2\r\n|<span class=\"hljs-string\"> 2 1 </span>|\r\n|<span class=\"hljs-string\"> 1 1 </span>|\n</code></pre>\n<h3>Step 3</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^4\r\n|<span class=\"hljs-string\"> 5 3 </span>|\r\n|<span class=\"hljs-string\"> 3 2 </span>|\n</code></pre>\n<h3>Step 4</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^8\r\n|<span class=\"hljs-string\"> 34 21 </span>|\r\n|<span class=\"hljs-string\"> 21 13 </span>|\n</code></pre>\n<h3>Step 5</h3>\n<p>F(8)=21</p>\n<h2>Implementation</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/math/fibonacci.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Maths/FibonacciNumber.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/80c2dc85d714f73783f133964d6acd9b5625ddd9/Maths/Fibonacci.js\">Javascript</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/maths/fibonacci.py\">Python</a></li>\n</ul>\n<h2>Video URL</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=EEb6JP3NXBI\">Youtube</a></li>\n</ul>\n<h2>Others</h2>\n<ul>\n<li><a href=\"https://brilliant.org/wiki/fast-fibonacci-transform/\">Proof</a></li>\n</ul>"
  },
  "implementations": {
    "python": {
      "dir": "maths\\fibonacci.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\fibonacci.py",
      "code": "<span class=\"hljs-comment\"># fibonacci.py</span>\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nCalculates the Fibonacci sequence using iteration, recursion, memoization,\r\nand a simplified form of Binet&#x27;s formula\r\n\r\nNOTE 1: the iterative, recursive, memoization functions are more accurate than\r\nthe Binet&#x27;s formula function because the Binet formula function  uses floats\r\n\r\nNOTE 2: the Binet&#x27;s formula function is much more limited in the size of inputs\r\nthat it can handle due to the size limitations of Python floats\r\n\r\nRESULTS: (n = 20)\r\nfib_iterative runtime: 0.0055 ms\r\nfib_recursive runtime: 6.5627 ms\r\nfib_memoization runtime: 0.0107 ms\r\nfib_binet runtime: 0.0174 ms\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sqrt\r\n<span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> time\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">time_func</span>(<span class=\"hljs-params\">func, *args, **kwargs</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Times the execution of a function with parameters\r\n    &quot;&quot;&quot;</span>\r\n    start = time()\r\n    output = func(*args, **kwargs)\r\n    end = time()\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">int</span>(end - start) &gt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{func.__name__}</span> runtime: <span class=\"hljs-subst\">{(end - start):<span class=\"hljs-number\">0.4</span>f}</span> s&quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{func.__name__}</span> runtime: <span class=\"hljs-subst\">{(end - start) * <span class=\"hljs-number\">1000</span>:<span class=\"hljs-number\">0.4</span>f}</span> ms&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> output\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_iterative</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculates the first n (0-indexed) Fibonacci numbers using iteration\r\n    &gt;&gt;&gt; fib_iterative(0)\r\n    [0]\r\n    &gt;&gt;&gt; fib_iterative(1)\r\n    [0, 1]\r\n    &gt;&gt;&gt; fib_iterative(5)\r\n    [0, 1, 1, 2, 3, 5]\r\n    &gt;&gt;&gt; fib_iterative(10)\r\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\r\n    &gt;&gt;&gt; fib_iterative(-1)\r\n    Traceback (most recent call last):\r\n    ...\r\n    Exception: n is negative\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">0</span>]\r\n    fib = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>):\r\n        fib.append(fib[-<span class=\"hljs-number\">1</span>] + fib[-<span class=\"hljs-number\">2</span>])\r\n    <span class=\"hljs-keyword\">return</span> fib\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_recursive</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculates the first n (0-indexed) Fibonacci numbers using recursion\r\n    &gt;&gt;&gt; fib_iterative(0)\r\n    [0]\r\n    &gt;&gt;&gt; fib_iterative(1)\r\n    [0, 1]\r\n    &gt;&gt;&gt; fib_iterative(5)\r\n    [0, 1, 1, 2, 3, 5]\r\n    &gt;&gt;&gt; fib_iterative(10)\r\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\r\n    &gt;&gt;&gt; fib_iterative(-1)\r\n    Traceback (most recent call last):\r\n    ...\r\n    Exception: n is negative\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_recursive_term</span>(<span class=\"hljs-params\">i: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Calculates the i-th (0-indexed) Fibonacci number using recursion\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> i &lt; <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\r\n        <span class=\"hljs-keyword\">if</span> i &lt; <span class=\"hljs-number\">2</span>:\r\n            <span class=\"hljs-keyword\">return</span> i\r\n        <span class=\"hljs-keyword\">return</span> fib_recursive_term(i - <span class=\"hljs-number\">1</span>) + fib_recursive_term(i - <span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> [fib_recursive_term(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_memoization</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculates the first n (0-indexed) Fibonacci numbers using memoization\r\n    &gt;&gt;&gt; fib_memoization(0)\r\n    [0]\r\n    &gt;&gt;&gt; fib_memoization(1)\r\n    [0, 1]\r\n    &gt;&gt;&gt; fib_memoization(5)\r\n    [0, 1, 1, 2, 3, 5]\r\n    &gt;&gt;&gt; fib_memoization(10)\r\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\r\n    &gt;&gt;&gt; fib_iterative(-1)\r\n    Traceback (most recent call last):\r\n    ...\r\n    Exception: n is negative\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\r\n    <span class=\"hljs-comment\"># Cache must be outside recursuive function</span>\r\n    <span class=\"hljs-comment\"># other it will reset every time it calls itself.</span>\r\n    cache: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>] = {<span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>: <span class=\"hljs-number\">1</span>}  <span class=\"hljs-comment\"># Prefilled cache</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rec_fn_memoized</span>(<span class=\"hljs-params\">num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-keyword\">if</span> num <span class=\"hljs-keyword\">in</span> cache:\r\n            <span class=\"hljs-keyword\">return</span> cache[num]\r\n\r\n        value = rec_fn_memoized(num - <span class=\"hljs-number\">1</span>) + rec_fn_memoized(num - <span class=\"hljs-number\">2</span>)\r\n        cache[num] = value\r\n        <span class=\"hljs-keyword\">return</span> value\r\n\r\n    <span class=\"hljs-keyword\">return</span> [rec_fn_memoized(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_binet</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculates the first n (0-indexed) Fibonacci numbers using a simplified form\r\n    of Binet&#x27;s formula:\r\n    https://en.m.wikipedia.org/wiki/Fibonacci_number#Computation_by_rounding\r\n\r\n    NOTE 1: this function diverges from fib_iterative at around n = 71, likely\r\n    due to compounding floating-point arithmetic errors\r\n\r\n    NOTE 2: this function doesn&#x27;t accept n &gt;= 1475 because it overflows\r\n    thereafter due to the size limitations of Python floats\r\n    &gt;&gt;&gt; fib_binet(0)\r\n    [0]\r\n    &gt;&gt;&gt; fib_binet(1)\r\n    [0, 1]\r\n    &gt;&gt;&gt; fib_binet(5)\r\n    [0, 1, 1, 2, 3, 5]\r\n    &gt;&gt;&gt; fib_binet(10)\r\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\r\n    &gt;&gt;&gt; fib_binet(-1)\r\n    Traceback (most recent call last):\r\n    ...\r\n    Exception: n is negative\r\n    &gt;&gt;&gt; fib_binet(1475)\r\n    Traceback (most recent call last):\r\n    ...\r\n    Exception: n is too large\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is negative&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> n &gt;= <span class=\"hljs-number\">1475</span>:\r\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;n is too large&quot;</span>)\r\n    sqrt_5 = sqrt(<span class=\"hljs-number\">5</span>)\r\n    phi = (<span class=\"hljs-number\">1</span> + sqrt_5) / <span class=\"hljs-number\">2</span>\r\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">round</span>(phi**i / sqrt_5) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    num = <span class=\"hljs-number\">20</span>\r\n    time_func(fib_iterative, num)\r\n    time_func(fib_recursive, num)\r\n    time_func(fib_memoization, num)\r\n    time_func(fib_binet, num)\r\n"
    },
    "javascript": {
      "dir": "Maths\\test\\Fibonacci.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\Fibonacci.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> {\r\n  <span class=\"hljs-title class_\">FibonacciDpWithoutRecursion</span>,\r\n  <span class=\"hljs-title class_\">FibonacciRecursiveDP</span>,\r\n  <span class=\"hljs-title class_\">FibonacciIterative</span>,\r\n  <span class=\"hljs-title class_\">FibonacciRecursive</span>,\r\n  <span class=\"hljs-title class_\">FibonacciMatrixExpo</span>\r\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../Fibonacci&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Fibonacci&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return an array of numbers for FibonacciIterative&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciIterative</span>(<span class=\"hljs-number\">5</span>)).<span class=\"hljs-title function_\">toEqual</span>(\r\n      expect.<span class=\"hljs-title function_\">arrayContaining</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>])\r\n    )\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return an array of numbers for FibonacciRecursive&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciRecursive</span>(<span class=\"hljs-number\">5</span>)).<span class=\"hljs-title function_\">toEqual</span>(\r\n      expect.<span class=\"hljs-title function_\">arrayContaining</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>])\r\n    )\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return number for FibonacciRecursiveDP&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciRecursiveDP</span>(<span class=\"hljs-number\">5</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return an array of numbers for FibonacciDpWithoutRecursion&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciDpWithoutRecursion</span>(<span class=\"hljs-number\">5</span>)).<span class=\"hljs-title function_\">toEqual</span>(\r\n      expect.<span class=\"hljs-title function_\">arrayContaining</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>])\r\n    )\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return number for FibonacciMatrixExpo&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciMatrixExpo</span>(<span class=\"hljs-number\">0</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciMatrixExpo</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciMatrixExpo</span>(<span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciMatrixExpo</span>(<span class=\"hljs-number\">3</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciMatrixExpo</span>(<span class=\"hljs-number\">4</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">FibonacciMatrixExpo</span>(<span class=\"hljs-number\">5</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5</span>)\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "math\\fibonacci.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\fibonacci.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Generate fibonacci sequence\r\n *\r\n * Calculate the the value on Fibonacci&#x27;s sequence given an\r\n * integer as input.\r\n * \\f[\\text{fib}(n) = \\text{fib}(n-1) + \\text{fib}(n-2)\\f]\r\n *\r\n * @see fibonacci_large.cpp, fibonacci_fast.cpp, string_fibonacci.cpp\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Recursively compute sequences\r\n * @param n input\r\n * @returns n-th element of the Fbinacci&#x27;s sequence\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">fibonacci</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\r\n    <span class=\"hljs-comment\">/* If the input is 0 or 1 just return the same\r\n       This will set the first 2 values of the sequence */</span>\r\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-keyword\">return</span> n;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* Add the last 2 values of the sequence to get next */</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fibonacci</span>(n - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-built_in\">fibonacci</span>(n - <span class=\"hljs-number\">2</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function for testing the fibonacci() function with a few\r\n * test cases and assert statement.\r\n * @returns `void`\r\n*/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> test_case_1 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_1 == <span class=\"hljs-number\">0</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 1!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">uint64_t</span> test_case_2 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_2 == <span class=\"hljs-number\">1</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 2!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">uint64_t</span> test_case_3 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_3 == <span class=\"hljs-number\">1</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 3!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">uint64_t</span> test_case_4 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_4 == <span class=\"hljs-number\">2</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 4!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">uint64_t</span> test_case_5 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">4</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_5 == <span class=\"hljs-number\">3</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 5!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">uint64_t</span> test_case_6 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">15</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_6 == <span class=\"hljs-number\">610</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 6!&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/// Main function</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\r\n    std::cin &gt;&gt; n;\r\n    <span class=\"hljs-built_in\">assert</span>(n &gt;= <span class=\"hljs-number\">0</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;F(&quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot;)= &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">fibonacci</span>(n) &lt;&lt; std::endl;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\matrixexponentiation\\Fibonacci.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\matrixexponentiation\\Fibonacci.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.matrixexponentiation;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span> Anirudh Buvanesh (https://github.com/anirudhb11) For more information\r\n * see https://www.geeksforgeeks.org/matrix-exponentiation/\r\n *\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Fibonacci</span> {\r\n\r\n    <span class=\"hljs-comment\">// Exponentiation matrix for Fibonacci sequence</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span>[][] fibMatrix = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>}};\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span>[][] identityMatrix = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>}};\r\n    <span class=\"hljs-comment\">//First 2 fibonacci numbers</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span>[][] baseFibNumbers = {{<span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">0</span>}};\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Performs multiplication of 2 matrices\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> matrix1\r\n     * <span class=\"hljs-doctag\">@param</span> matrix2\r\n     * <span class=\"hljs-doctag\">@return</span> The product of matrix1 and matrix2\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] matrixMultiplication(<span class=\"hljs-type\">int</span>[][] matrix1, <span class=\"hljs-type\">int</span>[][] matrix2) {\r\n        <span class=\"hljs-comment\">//Check if matrices passed can be multiplied</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowsInMatrix1</span> <span class=\"hljs-operator\">=</span> matrix1.length;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">columnsInMatrix1</span> <span class=\"hljs-operator\">=</span> matrix1[<span class=\"hljs-number\">0</span>].length;\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowsInMatrix2</span> <span class=\"hljs-operator\">=</span> matrix2.length;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">columnsInMatrix2</span> <span class=\"hljs-operator\">=</span> matrix2[<span class=\"hljs-number\">0</span>].length;\r\n\r\n        <span class=\"hljs-type\">assert</span> <span class=\"hljs-variable\">columnsInMatrix1</span> <span class=\"hljs-operator\">=</span>= rowsInMatrix2;\r\n        <span class=\"hljs-type\">int</span>[][] product = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[rowsInMatrix1][columnsInMatrix2];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowIndex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; rowIndex &lt; rowsInMatrix1; rowIndex++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">colIndex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; colIndex &lt; columnsInMatrix2; colIndex++) {\r\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">matrixEntry</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">intermediateIndex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; intermediateIndex &lt; columnsInMatrix1; intermediateIndex++) {\r\n                    matrixEntry += matrix1[rowIndex][intermediateIndex] * matrix2[intermediateIndex][colIndex];\r\n                }\r\n                product[rowIndex][colIndex] = matrixEntry;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> product;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculates the fibonacci number using matrix exponentiaition technique\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> n The input n for which we have to determine the fibonacci number\r\n     * Outputs the nth * fibonacci number\r\n     * <span class=\"hljs-doctag\">@return</span> a 2 X 1 array as { {F_n+1}, {F_n} }\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] fib(<span class=\"hljs-type\">int</span> n) {\r\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> Fibonacci.identityMatrix;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-type\">int</span>[][] cachedResult = fib(n / <span class=\"hljs-number\">2</span>);\r\n            <span class=\"hljs-type\">int</span>[][] matrixExpResult = matrixMultiplication(cachedResult, cachedResult);\r\n            <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\r\n                <span class=\"hljs-keyword\">return</span> matrixExpResult;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">return</span> matrixMultiplication(Fibonacci.fibMatrix, matrixExpResult);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">// Returns [0, 1, 1, 2, 3, 5 ..] for n = [0, 1, 2, 3, 4, 5.. ]</span>\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\r\n        <span class=\"hljs-type\">int</span>[][] result = matrixMultiplication(fib(n), baseFibNumbers);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Fib(&quot;</span> + n + <span class=\"hljs-string\">&quot;) = &quot;</span> + result[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]);\r\n        sc.close();\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "misc\\fibonacci.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc\\fibonacci.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">// Fibonnacci function</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (number == <span class=\"hljs-number\">1</span> || number == <span class=\"hljs-number\">2</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> fib(number - <span class=\"hljs-number\">1</span>) + fib(number - <span class=\"hljs-number\">2</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> number;\r\n\r\n    <span class=\"hljs-comment\">// Asks for the number that is in n position in Fibonnacci sequence</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;number);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d \\n&quot;</span>, fib(number));\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}"
    },
    "haskell": {
      "dir": "src\\Maths\\Fibonacci.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src\\Maths\\Fibonacci.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Maths.Fibonacci <span class=\"hljs-keyword\">where</span>\r\n\r\n<span class=\"hljs-title\">fib</span> :: <span class=\"hljs-type\">Integer</span> -&gt; <span class=\"hljs-type\">Integer</span>\r\n<span class=\"hljs-title\">fib</span> <span class=\"hljs-number\">0</span> = <span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-title\">fib</span> <span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-title\">fib</span> n = fib (n-<span class=\"hljs-number\">1</span>) + fib (n-<span class=\"hljs-number\">2</span>)\r\n\r\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\r\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\r\n    print (fib <span class=\"hljs-number\">10</span>)"
    },
    "f-sharp": {
      "dir": "Algorithms\\Math\\Fibonacci.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Math\\Fibonacci.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Math\r\n\r\n<span class=\"hljs-keyword\">module</span> Fibonacci <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> PrintSerie (one<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>) (two<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>) <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> fibo <span class=\"hljs-operator\">=</span> one <span class=\"hljs-operator\">+</span> two\r\n        System.Console.WriteLine fibo\r\n        PrintSerie two fibo"
    },
    "go": {
      "dir": "math\\fibonacci\\fibonacci.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math\\fibonacci\\fibonacci.go",
      "code": "<span class=\"hljs-comment\">// fibonacci.go</span>\r\n<span class=\"hljs-comment\">// description: Get the nth Fibonacci Number</span>\r\n<span class=\"hljs-comment\">// details:</span>\r\n<span class=\"hljs-comment\">// In mathematics, the Fibonacci numbers, commonly denoted Fn, form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. [Fibonacci number](https://en.wikipedia.org/wiki/Fibonacci_number)</span>\r\n<span class=\"hljs-comment\">// author(s) [red_byte](https://github.com/i-redbyte)</span>\r\n<span class=\"hljs-comment\">// see fibonacci_test.go</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> fibonacci\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;math&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-comment\">// Matrix This function calculates the n-th fibonacci number using the matrix method. [See](https://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form)</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Matrix</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">uint</span>)</span></span> <span class=\"hljs-type\">uint</span> {\r\n\ta, b := <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>\r\n\tc, rc, tc := <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\r\n\td, rd := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\r\n\r\n\t<span class=\"hljs-keyword\">for</span> n != <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">if</span> n&amp;<span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> {\r\n\t\t\ttc = rc\r\n\t\t\trc = rc*a + rd*c\r\n\t\t\trd = tc*b + rd*d\r\n\t\t}\r\n\r\n\t\tta := a\r\n\t\ttb := b\r\n\t\ttc = c\r\n\t\ta = a*a + b*c\r\n\t\tb = ta*b + b*d\r\n\t\tc = c*ta + d*c\r\n\t\td = tc*tb + d*d\r\n\r\n\t\tn &gt;&gt;= <span class=\"hljs-number\">1</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">uint</span>(rc)\r\n}\r\n\r\n<span class=\"hljs-comment\">// Formula This function calculates the n-th fibonacci number using the [formula](https://en.wikipedia.org/wiki/Fibonacci_number#Relation_to_the_golden_ratio)</span>\r\n<span class=\"hljs-comment\">// Attention! Tests for large values fall due to rounding error of floating point numbers, works well, only on small numbers</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Formula</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">uint</span>)</span></span> <span class=\"hljs-type\">uint</span> {\r\n\tsqrt5 := math.Sqrt(<span class=\"hljs-number\">5</span>)\r\n\tphi := (sqrt5 + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>\r\n\tpowPhi := math.Pow(phi, <span class=\"hljs-type\">float64</span>(n))\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">uint</span>(powPhi/sqrt5 + <span class=\"hljs-number\">0.5</span>)\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\dynamic_programming\\fibonacci.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\dynamic_programming\\fibonacci.rs",
      "code": "<span class=\"hljs-comment\">/// Fibonacci via Dynamic Programming</span>\r\n<span class=\"hljs-keyword\">use</span> std::collections::HashMap;\r\n\r\n<span class=\"hljs-comment\">/// fibonacci(n) returns the nth fibonacci number</span>\r\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\r\n<span class=\"hljs-comment\">/// F(0) = F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\r\n    <span class=\"hljs-comment\">// Use a and b to store the previous two values in the sequence</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">a</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">b</span> = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..n {\r\n        <span class=\"hljs-comment\">// As we iterate through, move b&#x27;s value into a and the new computed</span>\r\n        <span class=\"hljs-comment\">// value into b.</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c</span> = a + b;\r\n        a = b;\r\n        b = c;\r\n    }\r\n    b\r\n}\r\n\r\n<span class=\"hljs-comment\">/// fibonacci(n) returns the nth fibonacci number</span>\r\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\r\n<span class=\"hljs-comment\">/// F(0) = F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">recursive_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\r\n    <span class=\"hljs-comment\">// Call the actual tail recursive implementation, with the extra</span>\r\n    <span class=\"hljs-comment\">// arguments set up.</span>\r\n    _recursive_fibonacci(n, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_recursive_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>, previous: <span class=\"hljs-type\">u128</span>, current: <span class=\"hljs-type\">u128</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> {\r\n        current\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        _recursive_fibonacci(n - <span class=\"hljs-number\">1</span>, current, current + previous)\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/// classical_fibonacci(n) returns the nth fibonacci number</span>\r\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\r\n<span class=\"hljs-comment\">/// F(0) = 0, F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">classical_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\r\n    <span class=\"hljs-keyword\">match</span> n {\r\n        <span class=\"hljs-number\">0</span> =&gt; <span class=\"hljs-number\">0</span>,\r\n        <span class=\"hljs-number\">1</span> =&gt; <span class=\"hljs-number\">1</span>,\r\n        _ =&gt; {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">k</span> = n / <span class=\"hljs-number\">2</span>;\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f1</span> = <span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(k);\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f2</span> = <span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(k - <span class=\"hljs-number\">1</span>);\r\n\r\n            <span class=\"hljs-keyword\">match</span> n % <span class=\"hljs-number\">4</span> {\r\n                <span class=\"hljs-number\">0</span> | <span class=\"hljs-number\">2</span> =&gt; f1 * (f1 + <span class=\"hljs-number\">2</span> * f2),\r\n                <span class=\"hljs-number\">1</span> =&gt; (<span class=\"hljs-number\">2</span> * f1 + f2) * (<span class=\"hljs-number\">2</span> * f1 - f2) + <span class=\"hljs-number\">2</span>,\r\n                _ =&gt; (<span class=\"hljs-number\">2</span> * f1 + f2) * (<span class=\"hljs-number\">2</span> * f1 - f2) - <span class=\"hljs-number\">2</span>,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/// logarithmic_fibonacci(n) returns the nth fibonacci number</span>\r\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\r\n<span class=\"hljs-comment\">/// F(0) = 0, F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">logarithmic_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\r\n    <span class=\"hljs-comment\">// if it is the max value before overflow, use n-1 then get the second</span>\r\n    <span class=\"hljs-comment\">// value in the tuple</span>\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">186</span> {\r\n        <span class=\"hljs-keyword\">let</span> (_, second) = _logarithmic_fibonacci(<span class=\"hljs-number\">185</span>);\r\n        second\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">let</span> (first, _) = _logarithmic_fibonacci(n);\r\n        first\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_logarithmic_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> (<span class=\"hljs-type\">u128</span>, <span class=\"hljs-type\">u128</span>) {\r\n    <span class=\"hljs-keyword\">match</span> n {\r\n        <span class=\"hljs-number\">0</span> =&gt; (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>),\r\n        _ =&gt; {\r\n            <span class=\"hljs-keyword\">let</span> (current, next) = _logarithmic_fibonacci(n / <span class=\"hljs-number\">2</span>);\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c</span> = current * (next * <span class=\"hljs-number\">2</span> - current);\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">d</span> = current * current + next * next;\r\n\r\n            <span class=\"hljs-keyword\">match</span> n % <span class=\"hljs-number\">2</span> {\r\n                <span class=\"hljs-number\">0</span> =&gt; (c, d),\r\n                _ =&gt; (d, c + d),\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/// Memoized fibonacci.</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">memoized_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">cache</span>: HashMap&lt;<span class=\"hljs-type\">u32</span>, <span class=\"hljs-type\">u128</span>&gt; = HashMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n\r\n    _memoized_fibonacci(n, &amp;<span class=\"hljs-keyword\">mut</span> cache)\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_memoized_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>, cache: &amp;<span class=\"hljs-keyword\">mut</span> HashMap&lt;<span class=\"hljs-type\">u32</span>, <span class=\"hljs-type\">u128</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f</span> = <span class=\"hljs-keyword\">match</span> cache.<span class=\"hljs-title function_ invoke__\">get</span>(&amp;n) {\r\n        <span class=\"hljs-title function_ invoke__\">Some</span>(f) =&gt; f,\r\n        <span class=\"hljs-literal\">None</span> =&gt; {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f1</span> = _memoized_fibonacci(n - <span class=\"hljs-number\">1</span>, cache);\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">f2</span> = _memoized_fibonacci(n - <span class=\"hljs-number\">2</span>, cache);\r\n            cache.<span class=\"hljs-title function_ invoke__\">insert</span>(n, f1 + f2);\r\n            cache.<span class=\"hljs-title function_ invoke__\">get</span>(&amp;n).<span class=\"hljs-title function_ invoke__\">unwrap</span>()\r\n        }\r\n    };\r\n\r\n    *f\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::classical_fibonacci;\r\n    <span class=\"hljs-keyword\">use</span> super::fibonacci;\r\n    <span class=\"hljs-keyword\">use</span> super::logarithmic_fibonacci;\r\n    <span class=\"hljs-keyword\">use</span> super::memoized_fibonacci;\r\n    <span class=\"hljs-keyword\">use</span> super::recursive_fibonacci;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_fibonacci</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">3</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">8</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">89</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">10946</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">573147844013817084101</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">184</span>), <span class=\"hljs-number\">205697230343233228174223751303346572685</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_recursive_fibonacci</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">3</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">8</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">89</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">10946</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">573147844013817084101</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">184</span>),\r\n            <span class=\"hljs-number\">205697230343233228174223751303346572685</span>\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_classical_fibonacci</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">3</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">55</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">6765</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">21</span>), <span class=\"hljs-number\">10946</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">354224848179261915075</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">184</span>),\r\n            <span class=\"hljs-number\">127127879743834334146972278486287885163</span>\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_logarithmic_fibonacci</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">3</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">55</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">6765</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">21</span>), <span class=\"hljs-number\">10946</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">354224848179261915075</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">logarithmic_fibonacci</span>(<span class=\"hljs-number\">184</span>),\r\n            <span class=\"hljs-number\">127127879743834334146972278486287885163</span>\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-comment\">/// Check that the itterative and recursive fibonacci</span>\r\n    <span class=\"hljs-comment\">/// produce the same value. Both are combinatorial ( F(0) = F(1) = 1 )</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_iterative_and_recursive_equivalence</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">0</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">1</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">2</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">3</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">4</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">5</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">10</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">20</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">100</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">184</span>), <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">184</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-comment\">/// Check that classical and combinatorial fibonacci produce the</span>\r\n    <span class=\"hljs-comment\">/// same value when &#x27;n&#x27; differs by 1.</span>\r\n    <span class=\"hljs-comment\">/// classical fibonacci: ( F(0) = 0, F(1) = 1 )</span>\r\n    <span class=\"hljs-comment\">/// combinatorial fibonacci: ( F(0) = F(1) = 1 )</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_classical_and_combinatorial_are_off_by_one</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">0</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">1</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">2</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">3</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">4</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">6</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">5</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">11</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">10</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">19</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">21</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">20</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">101</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">100</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">classical_fibonacci</span>(<span class=\"hljs-number\">185</span>), <span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">184</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_memoized_fibonacci</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">3</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">55</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">6765</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">21</span>), <span class=\"hljs-number\">10946</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">354224848179261915075</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">memoized_fibonacci</span>(<span class=\"hljs-number\">184</span>),\r\n            <span class=\"hljs-number\">127127879743834334146972278486287885163</span>\r\n        );\r\n    }\r\n}\r\n"
    },
    "r": {
      "dir": "Mathematics\\Fibonacci.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Mathematics\\Fibonacci.R",
      "code": "Fibonacci <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>n<span class=\"hljs-punctuation\">)</span>\r\n<span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>n <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">|</span>n <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n  <span class=\"hljs-keyword\">else</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>Fibonacci<span class=\"hljs-punctuation\">(</span>n<span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">+</span> Fibonacci<span class=\"hljs-punctuation\">(</span>n <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n\r\nFibonacci<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span>\r\nFibonacci<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">11</span><span class=\"hljs-punctuation\">)</span>\r\n"
    },
    "ruby": {
      "dir": "maths\\fibonacci.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths\\fibonacci.rb",
      "code": "<span class=\"hljs-comment\"># The Fibonacci numbers, commonly denoted F(n) form a sequence,</span>\r\n<span class=\"hljs-comment\"># called the Fibonacci sequence, such that each number is the sum</span>\r\n<span class=\"hljs-comment\"># of the two preceding ones, starting from 0 and 1. That is,</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># F(0) = 0, F(1) = 1</span>\r\n<span class=\"hljs-comment\"># F(n) = F(n - 1) + F(n - 2), for n &gt; 1.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Given n, calculate F(n).</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach: Math</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-comment\"># Intuition: Using the golden ratio, a.k.a Binet&#x27;s formula</span>\r\n\r\n<span class=\"hljs-comment\"># Algorithm: Use the golden ratio formula to calculate the Nth Fibonacci number.</span>\r\n<span class=\"hljs-comment\"># https://demonstrations.wolfram.com/GeneralizedFibonacciSequenceAndTheGoldenRatio/</span>\r\n\r\n<span class=\"hljs-comment\"># Complexity Analysis</span>\r\n\r\n<span class=\"hljs-comment\"># Time complexity: O(1). Constant time complexity since we are using no loops or recursion</span>\r\n<span class=\"hljs-comment\"># and the time is based on the result of performing the calculation using Binet&#x27;s formula.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Space complexity: O(1). The space used is the space needed to create the variable</span>\r\n<span class=\"hljs-comment\"># to store the golden ratio formula.</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fibonacci</span><span class=\"hljs-params\">(n)</span></span>\r\n  golden_ratio = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">5</span>**<span class=\"hljs-number\">0.5</span>) / <span class=\"hljs-number\">2</span>\r\n  ((golden_ratio**n + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">5</span>**<span class=\"hljs-number\">0.5</span>).to_i\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nn = <span class=\"hljs-number\">2</span>\r\nputs(fibonacci(n))\r\n<span class=\"hljs-comment\"># Output: 1</span>\r\n<span class=\"hljs-comment\"># Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.</span>\r\n\r\nn = <span class=\"hljs-number\">3</span>\r\nputs(fibonacci(n))\r\n<span class=\"hljs-comment\"># Output: 2</span>\r\n<span class=\"hljs-comment\"># Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.</span>\r\n\r\nn = <span class=\"hljs-number\">4</span>\r\nputs(fibonacci(n))\r\n<span class=\"hljs-comment\"># Output: 3</span>\r\n<span class=\"hljs-comment\"># Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.</span>\r\n"
    },
    "php": {
      "dir": "Maths\\Fibonacci.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/Maths\\Fibonacci.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n\r\n<span class=\"hljs-comment\">/*\r\n * Run script and test execution time with following script\r\n        $executionTime = New ExecutionTime();\r\n        print_r(fibonacciRecursive(10));\r\n */</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExecutionTime</span>\r\n</span>{\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$start_time</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$end_time</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$execution_time</span> = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"></span>)\r\n    </span>{\r\n        <span class=\"hljs-variable language_\">$this</span>-&gt;start_time = <span class=\"hljs-title function_ invoke__\">microtime</span>(<span class=\"hljs-literal\">true</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__destruct</span>(<span class=\"hljs-params\"></span>)\r\n    </span>{\r\n        <span class=\"hljs-variable language_\">$this</span>-&gt;end_time = <span class=\"hljs-title function_ invoke__\">microtime</span>(<span class=\"hljs-literal\">true</span>);\r\n        <span class=\"hljs-variable language_\">$this</span>-&gt;execution_time = <span class=\"hljs-variable language_\">$this</span>-&gt;end_time - <span class=\"hljs-variable language_\">$this</span>-&gt;start_time;\r\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;Executed in <span class=\"hljs-subst\">$this</span>-&gt;execution_time seconds\\n&quot;</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacciRecursive</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$num</span></span>)\r\n</span>{\r\n    <span class=\"hljs-comment\">/*\r\n     * Fibonacci series using recursive approach\r\n     */</span>\r\n\r\n    <span class=\"hljs-variable\">$fibonacciRecursive</span> = [];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$num</span>; <span class=\"hljs-variable\">$i</span>++) {\r\n        <span class=\"hljs-title function_ invoke__\">array_push</span>(<span class=\"hljs-variable\">$fibonacciRecursive</span>, <span class=\"hljs-title function_ invoke__\">recursive</span>(<span class=\"hljs-variable\">$i</span>));\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$fibonacciRecursive</span>;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">recursive</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$num</span></span>)\r\n</span>{\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span> &lt; <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">\\Exception</span>(<span class=\"hljs-string\">&quot;Number must be greater than 0.&quot;</span>);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span> == <span class=\"hljs-number\">0</span> || <span class=\"hljs-variable\">$num</span> == <span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$num</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">recursive</span>(<span class=\"hljs-variable\">$num</span> - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-title function_ invoke__\">recursive</span>(<span class=\"hljs-variable\">$num</span> - <span class=\"hljs-number\">2</span>);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacciWithBinetFormula</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$num</span></span>)\r\n</span>{\r\n    <span class=\"hljs-comment\">/*\r\n     * Fibonacci series using Binet&#x27;s formula given below\r\n     * binet&#x27;s formula =  ((1 + sqrt(5) / 2 ) ^ n - (1 - sqrt(5) / 2 ) ^ n ) ) / sqrt(5)\r\n     * More about Binet&#x27;s formula found at http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibFormula.html#section1\r\n     */</span>\r\n\r\n    <span class=\"hljs-variable\">$fib_series</span> = [];\r\n\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span> &lt; <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">\\Exception</span>(<span class=\"hljs-string\">&quot;Number must be greater than 0.&quot;</span>);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-variable\">$sqrt</span> = <span class=\"hljs-title function_ invoke__\">sqrt</span>(<span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-variable\">$phi_1</span> = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-variable\">$sqrt</span>) / <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-variable\">$phi_2</span> = (<span class=\"hljs-number\">1</span> - <span class=\"hljs-variable\">$sqrt</span>) / <span class=\"hljs-number\">2</span>;\r\n\r\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-title function_ invoke__\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">$num</span> - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$n</span>) {\r\n            <span class=\"hljs-variable\">$seriesNumber</span> = (<span class=\"hljs-title function_ invoke__\">pow</span>(<span class=\"hljs-variable\">$phi_1</span>, <span class=\"hljs-variable\">$n</span>) - <span class=\"hljs-title function_ invoke__\">pow</span>(<span class=\"hljs-variable\">$phi_2</span>, <span class=\"hljs-variable\">$n</span>)) / <span class=\"hljs-variable\">$sqrt</span>;\r\n            <span class=\"hljs-title function_ invoke__\">array_push</span>(<span class=\"hljs-variable\">$fib_series</span>, (<span class=\"hljs-keyword\">int</span>)<span class=\"hljs-variable\">$seriesNumber</span>);\r\n        }\r\n\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$fib_series</span>;\r\n}"
    },
    "scala": {
      "dir": "src\\main\\scala\\Mathematics\\Fibonacci.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src\\main\\scala\\Mathematics\\Fibonacci.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Mathematics</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">Fibonacci</span> </span>{\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> allFibonacci: <span class=\"hljs-type\">LazyList</span>[<span class=\"hljs-type\">Int</span>] = <span class=\"hljs-number\">1</span> #:: <span class=\"hljs-number\">1</span> #:: allFibonacci.zip(allFibonacci.tail).map(t =&gt; t._1 + t._2)\r\n\r\n  <span class=\"hljs-comment\">/** Method to use the allFibonacci stream to take the first total numbers Using streams is both an easy and\r\n    * efficient way to generate fibonacci numbers (streams are memoized)\r\n    *\r\n    * @param total\r\n    *   Maximum number of elements of the sequence\r\n    * @return\r\n    */</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fibGenerate</span></span>(total: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Seq</span>[<span class=\"hljs-type\">Int</span>] = allFibonacci.take(total)\r\n}\r\n"
    },
    "swift": {
      "dir": "recursion\\fibonacci.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/recursion\\fibonacci.swift",
      "code": "<span class=\"hljs-comment\">// The Fibonacci numbers, commonly denoted F(n) form a sequence,</span>\r\n<span class=\"hljs-comment\">// called the Fibonacci sequence, such that # each number is the sum</span>\r\n<span class=\"hljs-comment\">// of the two preceding ones, starting from 0 and 1. That is,</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// F(0) = 0, F(1) = 1</span>\r\n<span class=\"hljs-comment\">// F(n) = F(n - 1) + F(n - 2), for n &gt; 1</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Given n, calculate F(n).</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// @leticiafaleia</span>\r\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">number</span>: <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">Int</span> {\r\n    <span class=\"hljs-keyword\">guard</span> number <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> number }\r\n    <span class=\"hljs-keyword\">return</span> fibonacci(number <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>) <span class=\"hljs-operator\">+</span> fibonacci(number <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">2</span>)\r\n}\r\n\r\nfibonacci(<span class=\"hljs-number\">5</span>)\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en\\Basic Math\\Fibonacci_Numbers.md"
  }
}