{
  "slug": "graphs",
  "name": "Graphs",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\graphs\\Graphs.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\graphs\\Graphs.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AdjacencyListGraph</span>&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;E&gt;&gt; {\r\n\r\n    ArrayList&lt;Vertex&gt; verticies;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AdjacencyListGraph</span><span class=\"hljs-params\">()</span> {\r\n        verticies = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vertex</span> {\r\n\r\n        E data;\r\n        ArrayList&lt;Vertex&gt; adjacentVerticies;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Vertex</span><span class=\"hljs-params\">(E data)</span> {\r\n            adjacentVerticies = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n            <span class=\"hljs-built_in\">this</span>.data = data;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">addAdjacentVertex</span><span class=\"hljs-params\">(Vertex to)</span> {\r\n            <span class=\"hljs-keyword\">for</span> (Vertex v : adjacentVerticies) {\r\n                <span class=\"hljs-keyword\">if</span> (v.data.compareTo(to.data) == <span class=\"hljs-number\">0</span>) {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// the edge already exists</span>\r\n                }\r\n            }\r\n            <span class=\"hljs-keyword\">return</span> adjacentVerticies.add(to); <span class=\"hljs-comment\">// this will return true;</span>\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeAdjacentVertex</span><span class=\"hljs-params\">(E to)</span> {\r\n            <span class=\"hljs-comment\">// use indexes here so it is possible to</span>\r\n            <span class=\"hljs-comment\">// remove easily without implementing</span>\r\n            <span class=\"hljs-comment\">// equals method that ArrayList.remove(Object o) uses</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; adjacentVerticies.size(); i++) {\r\n                <span class=\"hljs-keyword\">if</span> (adjacentVerticies.get(i).data.compareTo(to) == <span class=\"hljs-number\">0</span>) {\r\n                    adjacentVerticies.remove(i);\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n                }\r\n            }\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * this method removes an edge from the graph between two specified\r\n     * verticies\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> from the data of the vertex the edge is from\r\n     * <span class=\"hljs-doctag\">@param</span> to the data of the vertex the edge is going to\r\n     * <span class=\"hljs-doctag\">@return</span> returns false if the edge doesn&#x27;t exist, returns true if the edge\r\n     * exists and is removed\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeEdge</span><span class=\"hljs-params\">(E from, E to)</span> {\r\n        <span class=\"hljs-type\">Vertex</span> <span class=\"hljs-variable\">fromV</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-keyword\">for</span> (Vertex v : verticies) {\r\n            <span class=\"hljs-keyword\">if</span> (from.compareTo(v.data) == <span class=\"hljs-number\">0</span>) {\r\n                fromV = v;\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (fromV == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> fromV.removeAdjacentVertex(to);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * this method adds an edge to the graph between two specified verticies\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> from the data of the vertex the edge is from\r\n     * <span class=\"hljs-doctag\">@param</span> to the data of the vertex the edge is going to\r\n     * <span class=\"hljs-doctag\">@return</span> returns true if the edge did not exist, return false if it\r\n     * already did\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(E from, E to)</span> {\r\n        <span class=\"hljs-type\">Vertex</span> <span class=\"hljs-variable\">fromV</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, toV = <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-keyword\">for</span> (Vertex v : verticies) {\r\n            <span class=\"hljs-keyword\">if</span> (from.compareTo(v.data) == <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// see if from vertex already exists</span>\r\n                fromV = v;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (to.compareTo(v.data) == <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// see if to vertex already exists</span>\r\n                toV = v;\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (fromV != <span class=\"hljs-literal\">null</span> &amp;&amp; toV != <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// both nodes exist so stop searching</span>\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (fromV == <span class=\"hljs-literal\">null</span>) {\r\n            fromV = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vertex</span>(from);\r\n            verticies.add(fromV);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (toV == <span class=\"hljs-literal\">null</span>) {\r\n            toV = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vertex</span>(to);\r\n            verticies.add(toV);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> fromV.addAdjacentVertex(toV);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * this gives a list of verticies in the graph and their adjacencies\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> returns a string describing this graph\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        <span class=\"hljs-keyword\">for</span> (Vertex v : verticies) {\r\n            sb.append(<span class=\"hljs-string\">&quot;Vertex: &quot;</span>);\r\n            sb.append(v.data);\r\n            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n            sb.append(<span class=\"hljs-string\">&quot;Adjacent verticies: &quot;</span>);\r\n            <span class=\"hljs-keyword\">for</span> (Vertex v2 : v.adjacentVerticies) {\r\n                sb.append(v2.data);\r\n                sb.append(<span class=\"hljs-string\">&quot; &quot;</span>);\r\n            }\r\n            sb.append(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> sb.toString();\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graphs</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\r\n        AdjacencyListGraph&lt;Integer&gt; graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AdjacencyListGraph</span>&lt;&gt;();\r\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-keyword\">assert</span> !graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\r\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\r\n        <span class=\"hljs-keyword\">assert</span> graph.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-keyword\">assert</span> !graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\r\n        System.out.println(graph);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "zacharyjones123",
      "email": "zrjones@ncsu.edu",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "rei2hu",
      "email": "thornas.chang@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}