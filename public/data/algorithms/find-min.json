{
  "slug": "find-min",
  "name": "Find Min",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\find_min.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\find_min.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_min</span>(<span class=\"hljs-params\">nums: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Find Minimum Number in a List\r\n    :param nums: contains elements\r\n    :return: min number in list\r\n\r\n    &gt;&gt;&gt; for nums in ([3, 2, 1], [-3, -2, -1], [3, -3, 0], [3.0, 3.1, 2.9]):\r\n    ...     find_min(nums) == min(nums)\r\n    True\r\n    True\r\n    True\r\n    True\r\n    &gt;&gt;&gt; find_min([0, 1, 2, 3, 4, 5, -3, 24, -56])\r\n    -56\r\n    &gt;&gt;&gt; find_min([])\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: find_min() arg is an empty sequence\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;find_min() arg is an empty sequence&quot;</span>)\r\n    min_num = nums[<span class=\"hljs-number\">0</span>]\r\n    <span class=\"hljs-keyword\">for</span> num <span class=\"hljs-keyword\">in</span> nums:\r\n        <span class=\"hljs-keyword\">if</span> min_num &gt; num:\r\n            min_num = num\r\n    <span class=\"hljs-keyword\">return</span> min_num\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod(verbose=<span class=\"hljs-literal\">True</span>)\r\n"
    },
    "javascript": {
      "dir": "Maths\\test\\FindMin.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\FindMin.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { findMin } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../FindMin&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;FindMin&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Should return the minimum number in the array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> min = <span class=\"hljs-title function_\">findMin</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(min).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Should return the minimum number in the array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> min = <span class=\"hljs-title function_\">findMin</span>(<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">513</span>, <span class=\"hljs-number\">6</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(min).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">6</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Should throw error&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">min</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">findMin</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(min).<span class=\"hljs-title function_\">toThrow</span>(<span class=\"hljs-string\">&#x27;Array is empty&#x27;</span>)\r\n  })\r\n})\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\FindMin.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\FindMin.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FindMin</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Driver Code\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\r\n\r\n        <span class=\"hljs-comment\">/* random size */</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> random.nextInt(<span class=\"hljs-number\">100</span>) + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span>[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size];\r\n\r\n        <span class=\"hljs-comment\">/* init array with random numbers */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n            array[i] = random.nextInt() % <span class=\"hljs-number\">100</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">assert</span> Arrays.stream(array).min().getAsInt() == findMin(array);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Find the minimum number of an array of numbers.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> array the array contains element\r\n     * <span class=\"hljs-doctag\">@return</span> min value\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMin</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> array[<span class=\"hljs-number\">0</span>];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; array.length; ++i) {\r\n            <span class=\"hljs-keyword\">if</span> (array[i] &lt; min) {\r\n                min = array[i];\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> min;\r\n    }\r\n}\r\n"
    },
    "dart": {
      "dir": "maths\\find_min.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths\\find_min.dart",
      "code": "<span class=\"hljs-comment\">//find the min number</span>\r\nfind_min(<span class=\"hljs-built_in\">List</span> numbers) {\r\n  <span class=\"hljs-keyword\">var</span> min = numbers[<span class=\"hljs-number\">0</span>];\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">in</span> numbers) {\r\n    <span class=\"hljs-keyword\">if</span> (min &gt; x) {\r\n      min = x;\r\n    }\r\n  }\r\n  <span class=\"hljs-built_in\">print</span>(min);\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  find_min([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">-3</span>]);\r\n}\r\n"
    },
    "ruby": {
      "dir": "maths\\find_min.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths\\find_min.rb",
      "code": "<span class=\"hljs-comment\"># A ruby program to find min from a set of elements</span>\r\n\r\n<span class=\"hljs-comment\"># This find_min method will return the min element out of the array</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_min</span><span class=\"hljs-params\">(*array)</span></span>\r\n  min = array[<span class=\"hljs-number\">0</span>]\r\n  array.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|a|</span>\r\n    min = a <span class=\"hljs-keyword\">if</span> a &lt;= min\r\n  <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-string\">&quot;The Min of the following elements <span class=\"hljs-subst\">#{array}</span> is <span class=\"hljs-subst\">#{min}</span>.&quot;</span>\r\n<span class=\"hljs-keyword\">rescue</span> StandardError\r\n  <span class=\"hljs-string\">&#x27;Error: Please provide number only!&#x27;</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\"># Min method will return the minimum element from the set of input elements provided</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">predefined_min</span><span class=\"hljs-params\">(*array)</span></span>\r\n  <span class=\"hljs-string\">&quot;The Min of the following elements <span class=\"hljs-subst\">#{array}</span> is <span class=\"hljs-subst\">#{array.min}</span>.&quot;</span>\r\n<span class=\"hljs-keyword\">rescue</span> StandardError\r\n  <span class=\"hljs-string\">&#x27;Error: Please provide number only!&#x27;</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\"># Sort method will sort the elements in ascending order. First method will return the beginning element out of the array</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">predefined_sort_first_min</span><span class=\"hljs-params\">(*array)</span></span>\r\n  <span class=\"hljs-string\">&quot;The Min of the following elements <span class=\"hljs-subst\">#{array}</span> is <span class=\"hljs-subst\">#{array.min}</span>.&quot;</span>\r\n<span class=\"hljs-keyword\">rescue</span> StandardError\r\n  <span class=\"hljs-string\">&#x27;Error: Please provide number only!&#x27;</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\"># Using find_min</span>\r\n<span class=\"hljs-comment\"># Valid inputs</span>\r\nputs find_min(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">33</span>)\r\n<span class=\"hljs-comment\"># The Min of the following elements [11, 29, 33] is 33.</span>\r\n\r\nputs find_min(-<span class=\"hljs-number\">221</span>, -<span class=\"hljs-number\">852</span>, -<span class=\"hljs-number\">1100</span>, -<span class=\"hljs-number\">10</span>)\r\n<span class=\"hljs-comment\"># The Min of the following elements [-221, -852, -1100, -10] is -10.</span>\r\n\r\n<span class=\"hljs-comment\"># Invalid inputs</span>\r\nputs find_min(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&#x27;95&#x27;</span>, <span class=\"hljs-number\">2</span>)\r\n<span class=\"hljs-comment\"># Error: Please provide number only!</span>\r\n\r\n<span class=\"hljs-comment\"># Using predefined_min</span>\r\n<span class=\"hljs-comment\"># Valid inputs</span>\r\nputs predefined_min(<span class=\"hljs-number\">51</span>, <span class=\"hljs-number\">82</span>, <span class=\"hljs-number\">39</span>)\r\n<span class=\"hljs-comment\"># The Min of the following elements [51, 82, 39] is 82.</span>\r\n\r\nputs predefined_min(-<span class=\"hljs-number\">11</span>, -<span class=\"hljs-number\">51</span>, -<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">10</span>)\r\n<span class=\"hljs-comment\"># The Min of the following elements [-11, -51, -10, -10] is -10.</span>\r\n\r\n<span class=\"hljs-comment\"># Invalid inputs</span>\r\nputs predefined_min(<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">95</span>, <span class=\"hljs-number\">2</span>)\r\n<span class=\"hljs-comment\"># Error: Please provide number only!</span>\r\n\r\n<span class=\"hljs-comment\"># Using predefined_sort_first_min</span>\r\n<span class=\"hljs-comment\"># Valid inputs</span>\r\nputs predefined_sort_first_min(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\r\n<span class=\"hljs-comment\"># The Min of the following elements [1, 2, 3] is 3.</span>\r\n\r\nputs predefined_sort_first_min(-<span class=\"hljs-number\">21</span>, -<span class=\"hljs-number\">52</span>, -<span class=\"hljs-number\">100</span>, -<span class=\"hljs-number\">1</span>)\r\n<span class=\"hljs-comment\"># The Min of the following elements [-21, -52, -100, -1] is -1.</span>\r\n\r\n<span class=\"hljs-comment\"># Invalid inputs</span>\r\nputs predefined_sort_first_min(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">95</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>)\r\n<span class=\"hljs-comment\"># Error: Please provide number only!</span>\r\n"
    },
    "scala": {
      "dir": "src\\main\\scala\\Mathematics\\FindMin.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src\\main\\scala\\Mathematics\\FindMin.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Mathematics</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">FindMin</span> </span>{\r\n\r\n  <span class=\"hljs-comment\">/** Method returns Minimum Element from the list\r\n    *\r\n    * @param listOfElements\r\n    * @return\r\n    */</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">findMin</span></span>(elements: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Int</span>]): <span class=\"hljs-type\">Int</span> = elements.foldLeft(elements.head) { (acc, i) =&gt; <span class=\"hljs-keyword\">if</span> (acc &lt; i) acc <span class=\"hljs-keyword\">else</span> i }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 1
    },
    {
      "name": "aditiagarwal34550",
      "email": "aditiagarwal34550@gmail.com",
      "commits": 1
    },
    {
      "name": "Sahil Afrid Farookhi",
      "email": "msafarookhi@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "UntouchedOdin0",
      "email": "UntouchedOdin0@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Lewis Tian",
      "email": "taseikyo@gmail.com",
      "commits": 1
    },
    {
      "name": "heartsmoking",
      "email": "327899144@qq.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "gpapadok",
      "email": "38889721+gpapadok@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aditi Agarwal",
      "email": "31546143+aditiagarwal34550@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "gerroo",
      "email": "gerensuner@gmail.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}