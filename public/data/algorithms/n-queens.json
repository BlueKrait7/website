{
  "slug": "n-queens",
  "name": "N Queens",
  "categories": [
    "backtracking"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "backtracking\\n_queens.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/backtracking\\n_queens.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n\r\n The nqueens problem is of placing N queens on a N * N\r\n chess board such that no queen can attack any other queens placed\r\n on that chess board.\r\n This means that one queen cannot have any other queen on its horizontal, vertical and\r\n diagonal lines.\r\n\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\nsolution = []\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isSafe</span>(<span class=\"hljs-params\">board: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], row: <span class=\"hljs-built_in\">int</span>, column: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    This function returns a boolean value True if it is safe to place a queen there\r\n    considering the current state of the board.\r\n\r\n    Parameters :\r\n    board(2D matrix) : board\r\n    row ,column : coordinates of the cell on a board\r\n\r\n    Returns :\r\n    Boolean Value\r\n\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\r\n        <span class=\"hljs-keyword\">if</span> board[row][i] == <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\r\n        <span class=\"hljs-keyword\">if</span> board[i][column] == <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">for</span> i, j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(<span class=\"hljs-built_in\">range</span>(row, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>), <span class=\"hljs-built_in\">range</span>(column, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>)):\r\n        <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">for</span> i, j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(<span class=\"hljs-built_in\">range</span>(row, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>), <span class=\"hljs-built_in\">range</span>(column, <span class=\"hljs-built_in\">len</span>(board))):\r\n        <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">solve</span>(<span class=\"hljs-params\">board: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], row: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    It creates a state space tree and calls the safe function until it receives a\r\n    False Boolean and terminates that branch and backtracks to the next\r\n    possible solution branch.\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> row &gt;= <span class=\"hljs-built_in\">len</span>(board):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        If the row number exceeds N we have board with a successful combination\r\n        and that combination is appended to the solution list and the board is printed.\r\n\r\n        &quot;&quot;&quot;</span>\r\n        solution.append(board)\r\n        printboard(board)\r\n        <span class=\"hljs-built_in\">print</span>()\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        For every row it iterates through each column to check if it is feasible to\r\n        place a queen there.\r\n        If all the combinations for that particular branch are successful the board is\r\n        reinitialized for the next possible combination.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> isSafe(board, row, i):\r\n            board[row][i] = <span class=\"hljs-number\">1</span>\r\n            solve(board, row + <span class=\"hljs-number\">1</span>)\r\n            board[row][i] = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">printboard</span>(<span class=\"hljs-params\">board: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Prints the boards that have a successful combination.\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\r\n            <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-number\">1</span>:\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Q&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;.&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>()\r\n\r\n\r\n<span class=\"hljs-comment\"># n=int(input(&quot;The no. of queens&quot;))</span>\r\nn = <span class=\"hljs-number\">8</span>\r\nboard = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)]\r\nsolve(board, <span class=\"hljs-number\">0</span>)\r\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The total no. of solutions are :&quot;</span>, <span class=\"hljs-built_in\">len</span>(solution))\r\n"
    },
    "c-plus-plus": {
      "dir": "backtracking\\n_queens.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking\\n_queens.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Eight Queens](https://en.wikipedia.org/wiki/Eight_queens_puzzle)\r\n * puzzle\r\n *\r\n * @details\r\n * The **eight queens puzzle** is the problem of placing eight chess queens on\r\n * an 8×8 chessboard so that no two queens threaten each other; thus, a solution\r\n * requires that no two queens share the same row, column, or diagonal. The\r\n * eight queens puzzle is an example of the more general **n queens problem** of\r\n * placing n non-attacking queens on an n×n chessboard, for which solutions\r\n * exist for all natural numbers n with the exception of n = 2 and n = 3.\r\n *\r\n * @author Unknown author\r\n * @author [David Leal](https://github.com/Panquesito7)\r\n *\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace backtracking\r\n * @brief Backtracking algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> backtracking {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace n_queens\r\n * @brief Functions for [Eight\r\n * Queens](https://en.wikipedia.org/wiki/Eight_queens_puzzle) puzzle.\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> n_queens {\r\n<span class=\"hljs-comment\">/**\r\n * Utility function to print matrix\r\n * @tparam n number of matrix size\r\n * @param board matrix where numbers are saved\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printSolution</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; &amp;board)</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;&quot;</span> &lt;&lt; board[i][j] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n        }\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Check if a queen can be placed on matrix\r\n * @tparam n number of matrix size\r\n * @param board matrix where numbers are saved\r\n * @param row current index in rows\r\n * @param col current index in columns\r\n * @returns `true` if queen can be placed on matrix\r\n * @returns `false` if queen can&#x27;t be placed on matrix\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isSafe</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; &amp;board, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> &amp;row,\r\n            <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> &amp;col)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// Check this row on left side</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; col; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (board[row][i]) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Check upper diagonal on left side</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = row, j = col; i &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; j &gt;= <span class=\"hljs-number\">0</span>; i--, j--) {\r\n        <span class=\"hljs-keyword\">if</span> (board[i][j]) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">// Check lower diagonal on left side</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = row, j = col; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; i &lt; n; i++, j--) {\r\n        <span class=\"hljs-keyword\">if</span> (board[i][j]) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Solve n queens problem\r\n * @tparam n number of matrix size\r\n * @param board matrix where numbers are saved\r\n * @param col current index in columns\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solveNQ</span><span class=\"hljs-params\">(std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; board, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> &amp;col)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (col &gt;= n) {\r\n        <span class=\"hljs-built_in\">printSolution</span>&lt;n&gt;(board);\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Consider this column and try placing</span>\r\n    <span class=\"hljs-comment\">// this queen in all rows one by one</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        <span class=\"hljs-comment\">// Check if queen can be placed</span>\r\n        <span class=\"hljs-comment\">// on board[i][col]</span>\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isSafe</span>&lt;n&gt;(board, i, col)) {\r\n            <span class=\"hljs-comment\">// Place this queen in matrix</span>\r\n            board[i][col] = <span class=\"hljs-number\">1</span>;\r\n\r\n            <span class=\"hljs-comment\">// Recursive to place rest of the queens</span>\r\n            <span class=\"hljs-built_in\">solveNQ</span>&lt;n&gt;(board, col + <span class=\"hljs-number\">1</span>);\r\n\r\n            board[i][col] = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// backtrack</span>\r\n        }\r\n    }\r\n}\r\n}  <span class=\"hljs-comment\">// namespace n_queens</span>\r\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">4</span>;\r\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; board = {\r\n        std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, n&gt;({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}), std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, n&gt;({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}),\r\n        std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, n&gt;({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}), std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, n&gt;({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>})};\r\n\r\n    backtracking::n_queens::<span class=\"hljs-built_in\">solveNQ</span>&lt;n&gt;(board, <span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\backtracking\\NQueens.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\backtracking\\NQueens.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.backtracking;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Problem statement: Given a N x N chess board. Return all arrangements in\r\n * which N queens can be placed on the board such no two queens attack each\r\n * other. Ex. N = 6 Solution= There are 4 possible ways Arrangement: 1 &quot;.Q....&quot;,\r\n * &quot;...Q..&quot;, &quot;.....Q&quot;, &quot;Q.....&quot;, &quot;..Q...&quot;, &quot;....Q.&quot;\r\n * &lt;p&gt;\r\n * Arrangement: 2 &quot;..Q...&quot;, &quot;.....Q&quot;, &quot;.Q....&quot;, &quot;....Q.&quot;, &quot;Q.....&quot;, &quot;...Q..&quot;\r\n * &lt;p&gt;\r\n * Arrangement: 3 &quot;...Q..&quot;, &quot;Q.....&quot;, &quot;....Q.&quot;, &quot;.Q....&quot;, &quot;.....Q&quot;, &quot;..Q...&quot;\r\n * &lt;p&gt;\r\n * Arrangement: 4 &quot;....Q.&quot;, &quot;..Q...&quot;, &quot;Q.....&quot;, &quot;.....Q&quot;, &quot;...Q..&quot;, &quot;.Q....&quot;\r\n *\r\n * Solution: Brute Force approach:\r\n *\r\n * Generate all possible arrangement to place N queens on N*N board. Check each\r\n * board if queens are placed safely. If it is safe, include arrangement in\r\n * solution set. Otherwise ignore it\r\n *\r\n * Optimized solution: This can be solved using backtracking in below steps\r\n *\r\n * Start with first column and place queen on first row Try placing queen in a\r\n * row on second column If placing second queen in second column attacks any of\r\n * the previous queens, change the row in second column otherwise move to next\r\n * column and try to place next queen In case if there is no rows where a queen\r\n * can be placed such that it doesn&#x27;t attack previous queens, then go back to\r\n * previous column and change row of previous queen. Keep doing this until last\r\n * queen is not placed safely. If there is no such way then return an empty list\r\n * as solution\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NQueens</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        placeQueens(<span class=\"hljs-number\">1</span>);\r\n        placeQueens(<span class=\"hljs-number\">2</span>);\r\n        placeQueens(<span class=\"hljs-number\">3</span>);\r\n        placeQueens(<span class=\"hljs-number\">4</span>);\r\n        placeQueens(<span class=\"hljs-number\">5</span>);\r\n        placeQueens(<span class=\"hljs-number\">6</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">placeQueens</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> queens)</span> {\r\n        List&lt;List&lt;String&gt;&gt; arrangements = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;List&lt;String&gt;&gt;();\r\n        getSolution(queens, arrangements, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[queens], <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">if</span> (arrangements.isEmpty()) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;There is no way to place &quot;</span> + queens + <span class=\"hljs-string\">&quot; queens on board of size &quot;</span> + queens + <span class=\"hljs-string\">&quot;x&quot;</span> + queens);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Arrangement for placing &quot;</span> + queens + <span class=\"hljs-string\">&quot; queens&quot;</span>);\r\n        }\r\n        arrangements.forEach(arrangement -&gt; {\r\n            arrangement.forEach(row -&gt; System.out.println(row));\r\n            System.out.println();\r\n        });\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This is backtracking function which tries to place queen recursively\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> boardSize: size of chess board\r\n     * <span class=\"hljs-doctag\">@param</span> solutions: this holds all possible arrangements\r\n     * <span class=\"hljs-doctag\">@param</span> columns: columns[i] = rowId where queen is placed in ith column.\r\n     * <span class=\"hljs-doctag\">@param</span> columnIndex: This is the column in which queen is being placed\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">getSolution</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> boardSize, List&lt;List&lt;String&gt;&gt; solutions, <span class=\"hljs-type\">int</span>[] columns, <span class=\"hljs-type\">int</span> columnIndex)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (columnIndex == boardSize) {\r\n            <span class=\"hljs-comment\">// this means that all queens have been placed</span>\r\n            List&lt;String&gt; sol = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; boardSize; i++) {\r\n                <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; boardSize; j++) {\r\n                    sb.append(j == columns[i] ? <span class=\"hljs-string\">&quot;Q&quot;</span> : <span class=\"hljs-string\">&quot;.&quot;</span>);\r\n                }\r\n                sol.add(sb.toString());\r\n            }\r\n            solutions.add(sol);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// This loop tries to place queen in a row one by one</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rowIndex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; rowIndex &lt; boardSize; rowIndex++) {\r\n            columns[columnIndex] = rowIndex;\r\n            <span class=\"hljs-keyword\">if</span> (isPlacedCorrectly(columns, rowIndex, columnIndex)) {\r\n                <span class=\"hljs-comment\">// If queen is placed successfully at rowIndex in column=columnIndex then try placing queen in next column</span>\r\n                getSolution(boardSize, solutions, columns, columnIndex + <span class=\"hljs-number\">1</span>);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This function checks if queen can be placed at row = rowIndex in column =\r\n     * columnIndex safely\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> columns: columns[i] = rowId where queen is placed in ith column.\r\n     * <span class=\"hljs-doctag\">@param</span> rowIndex: row in which queen has to be placed\r\n     * <span class=\"hljs-doctag\">@param</span> columnIndex: column in which queen is being placed\r\n     * <span class=\"hljs-doctag\">@return</span> true: if queen can be placed safely false: otherwise\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPlacedCorrectly</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] columns, <span class=\"hljs-type\">int</span> rowIndex, <span class=\"hljs-type\">int</span> columnIndex)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; columnIndex; i++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">diff</span> <span class=\"hljs-operator\">=</span> Math.abs(columns[i] - rowIndex);\r\n            <span class=\"hljs-keyword\">if</span> (diff == <span class=\"hljs-number\">0</span> || columnIndex - i == diff) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n}\r\n"
    },
    "haskell": {
      "dir": "src\\Misc\\NQueens.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src\\Misc\\NQueens.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Misc.NQueens <span class=\"hljs-keyword\">where</span>\r\n<span class=\"hljs-comment\">{-\r\nThe n-Queens search is a backtracking algorithm. The n-Queens problem fits n \r\nnumber of Queens onto a Chess board. As only one Queen can fit per row, a \r\none-dimensional integer array is used to represent the Queen&#x27;s offset on each \r\nrow.\r\n-}</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> Data.List (<span class=\"hljs-title\">permutations</span>)\r\n\r\n<span class=\"hljs-title\">main</span> = nqueens <span class=\"hljs-number\">8</span>\r\n<span class=\"hljs-title\">nqueens</span> size = mapM_ (printBoard size) $ take <span class=\"hljs-number\">1</span> $ filter (evaluateBoard size) $ board_permutations size\r\n\r\n<span class=\"hljs-comment\">--N sized Chess boards are represented as a one-dimension array.</span>\r\n<span class=\"hljs-title\">board_permutations</span> size = permutations [<span class=\"hljs-number\">0</span>..size - <span class=\"hljs-number\">1</span>]\r\n\r\n<span class=\"hljs-comment\">--Count the number of valid boards for a specified Chess board size.</span>\r\n<span class=\"hljs-title\">count_boards</span> size = length $ filter (evaluateBoard size) $ board_permutations size\r\n\r\n<span class=\"hljs-comment\">--Show every valid board </span>\r\n<span class=\"hljs-title\">nqueens_list</span> size = mapM_ (printBoard size) $ filter (evaluateBoard size) $ board_permutations size\r\n\r\n<span class=\"hljs-comment\">--Board printing function</span>\r\n<span class=\"hljs-title\">printBoard</span> size board = <span class=\"hljs-keyword\">do</span> \r\n    printBoard2 size board \r\n    putStrLn <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-keyword\">where</span>\r\n        printBoard2 _ [] = return ()\r\n        printBoard2 size board = <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-keyword\">let</span> row = head board\r\n            printRow size row\r\n            printBoard2 size $ tail board\r\n\r\n<span class=\"hljs-title\">printRow</span> size row = <span class=\"hljs-keyword\">do</span>\r\n    <span class=\"hljs-keyword\">let</span> lstring = (replicate row <span class=\"hljs-string\">&quot;. &quot;</span>)\r\n    <span class=\"hljs-keyword\">let</span> rstring = replicate (size - row - <span class=\"hljs-number\">1</span>) <span class=\"hljs-string\">&quot;. &quot;</span>\r\n    putStrLn $ concat (lstring ++ [<span class=\"hljs-string\">&quot;Q &quot;</span>] ++ rstring)\r\n    return ()\r\n\r\n<span class=\"hljs-comment\">--Recursively check that prior rows are valid.</span>\r\n<span class=\"hljs-title\">evaluateBoard</span> _ [] = <span class=\"hljs-type\">True</span>\r\n<span class=\"hljs-title\">evaluateBoard</span> size rows = (evaluateBoard size $ cut_last rows) &amp;&amp; validate size (cut_last rows) (last_row - <span class=\"hljs-number\">1</span>) (last_row + <span class=\"hljs-number\">1</span>) last_row <span class=\"hljs-keyword\">where</span>\r\n    last_row = last rows\r\n\r\n<span class=\"hljs-comment\">--Validate that a Queen on a row doesn&#x27;t have conflicts with earlier rows.</span>\r\n<span class=\"hljs-title\">validate</span> _ [] _ _ _ = <span class=\"hljs-type\">True</span>\r\n<span class=\"hljs-title\">validate</span> size rows left right position = <span class=\"hljs-keyword\">if</span> check_row == left || check_row == right || check_row == position <span class=\"hljs-keyword\">then</span> <span class=\"hljs-type\">False</span> <span class=\"hljs-keyword\">else</span> validate size (cut_last rows) (left - <span class=\"hljs-number\">1</span>) (right + <span class=\"hljs-number\">1</span>) position <span class=\"hljs-keyword\">where</span>\r\n    check_row = last rows\r\n\r\n<span class=\"hljs-title\">cut_last</span> x = reverse $ drop <span class=\"hljs-number\">1</span> $ reverse x\r\n"
    },
    "rust": {
      "dir": "src\\general\\nqueens.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\general\\nqueens.rs",
      "code": "<span class=\"hljs-meta\">#[allow(unused_imports)]</span>\r\n<span class=\"hljs-keyword\">use</span> std::env::args;\r\n\r\n<span class=\"hljs-meta\">#[allow(dead_code)]</span>\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">board_width</span> = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">arg</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title function_ invoke__\">args</span>() {\r\n        board_width = <span class=\"hljs-keyword\">match</span> arg.<span class=\"hljs-title function_ invoke__\">parse</span>() {\r\n            <span class=\"hljs-title function_ invoke__\">Ok</span>(x) =&gt; x,\r\n            _ =&gt; <span class=\"hljs-number\">0</span>,\r\n        };\r\n\r\n        <span class=\"hljs-keyword\">if</span> board_width != <span class=\"hljs-number\">0</span> {\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> board_width &lt; <span class=\"hljs-number\">4</span> {\r\n        <span class=\"hljs-built_in\">println!</span>(\r\n            <span class=\"hljs-string\">&quot;Running algorithm with 8 as a default. Specify an alternative Chess board size for \\\r\n             N-Queens as a command line argument.\\n&quot;</span>\r\n        );\r\n        board_width = <span class=\"hljs-number\">8</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">board</span> = <span class=\"hljs-keyword\">match</span> <span class=\"hljs-title function_ invoke__\">nqueens</span>(board_width) {\r\n        <span class=\"hljs-title function_ invoke__\">Ok</span>(success) =&gt; success,\r\n        <span class=\"hljs-title function_ invoke__\">Err</span>(err) =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, err),\r\n    };\r\n\r\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;N-Queens {} by {} board result:&quot;</span>, board_width, board_width);\r\n    <span class=\"hljs-title function_ invoke__\">print_board</span>(&amp;board);\r\n}\r\n\r\n<span class=\"hljs-comment\">/*\r\nThe n-Queens search is a backtracking algorithm. Each row of the Chess board where a Queen is\r\nplaced is dependent on all earlier rows. As only one Queen can fit per row, a one-dimensional\r\ninteger array is used to represent the Queen&#x27;s offset on each row.\r\n*/</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">nqueens</span>(board_width: <span class=\"hljs-type\">i64</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i64</span>&gt;, &amp;<span class=\"hljs-symbol\">&#x27;static</span> <span class=\"hljs-type\">str</span>&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">board_rows</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; board_width <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>];\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">conflict</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">current_row</span> = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">//Process by row up to the current active row</span>\r\n    <span class=\"hljs-keyword\">loop</span> {\r\n        conflict = <span class=\"hljs-literal\">false</span>;\r\n\r\n        <span class=\"hljs-comment\">//Column review of previous rows</span>\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">review_index</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..current_row {\r\n            <span class=\"hljs-comment\">//Calculate the diagonals of earlier rows where a Queen would be a conflict</span>\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">left</span> = board_rows[review_index] - (current_row <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span> - review_index <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span>);\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right</span> = board_rows[review_index] + (current_row <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span> - review_index <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span>);\r\n\r\n            <span class=\"hljs-keyword\">if</span> board_rows[current_row] == board_rows[review_index]\r\n                || (left &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; left == board_rows[current_row])\r\n                || (right &lt; board_width <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span> &amp;&amp; right == board_rows[current_row])\r\n            {\r\n                conflict = <span class=\"hljs-literal\">true</span>;\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">match</span> conflict {\r\n            <span class=\"hljs-literal\">true</span> =&gt; {\r\n                board_rows[current_row] += <span class=\"hljs-number\">1</span>;\r\n\r\n                <span class=\"hljs-keyword\">if</span> current_row == <span class=\"hljs-number\">0</span> &amp;&amp; board_rows[current_row] == board_width {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-string\">&quot;No solution exists for specificed board size.&quot;</span>);\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">while</span> board_rows[current_row] == board_width {\r\n                    board_rows[current_row] = <span class=\"hljs-number\">0</span>;\r\n\r\n                    <span class=\"hljs-keyword\">if</span> current_row == <span class=\"hljs-number\">0</span> {\r\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-string\">&quot;No solution exists for specificed board size.&quot;</span>);\r\n                    }\r\n\r\n                    current_row -= <span class=\"hljs-number\">1</span>;\r\n                    board_rows[current_row] += <span class=\"hljs-number\">1</span>;\r\n                }\r\n            }\r\n            _ =&gt; {\r\n                current_row += <span class=\"hljs-number\">1</span>;\r\n\r\n                <span class=\"hljs-keyword\">if</span> current_row <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span> == board_width {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-title function_ invoke__\">Ok</span>(board_rows)\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">print_board</span>(board: &amp;[<span class=\"hljs-type\">i64</span>]) {\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..board.<span class=\"hljs-title function_ invoke__\">len</span>() {\r\n        <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">&quot;{}\\t&quot;</span>, board[row <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>]);\r\n\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">column</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..board.<span class=\"hljs-title function_ invoke__\">len</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span> {\r\n            <span class=\"hljs-keyword\">if</span> board[row <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] == column {\r\n                <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">&quot;Q&quot;</span>);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">&quot;.&quot;</span>);\r\n            }\r\n        }\r\n        <span class=\"hljs-built_in\">println!</span>();\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> test {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">check_board</span>(board: &amp;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i64</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">current_row</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..board.<span class=\"hljs-title function_ invoke__\">len</span>() {\r\n            <span class=\"hljs-comment\">//Column review</span>\r\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">review_index</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..current_row {\r\n                <span class=\"hljs-comment\">//Look for any conflict.</span>\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">left</span> = board[review_index] - (current_row <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span> - review_index <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span>);\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right</span> = board[review_index] + (current_row <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span> - review_index <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span>);\r\n\r\n                <span class=\"hljs-keyword\">if</span> board[current_row] == board[review_index]\r\n                    || (left &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; left == board[current_row])\r\n                    || (right &lt; board.<span class=\"hljs-title function_ invoke__\">len</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i64</span> &amp;&amp; right == board[current_row])\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-literal\">true</span>\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_board_size_4</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">board</span> = <span class=\"hljs-title function_ invoke__\">nqueens</span>(<span class=\"hljs-number\">4</span>).<span class=\"hljs-title function_ invoke__\">expect</span>(<span class=\"hljs-string\">&quot;Error propagated.&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(board, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>]);\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">check_board</span>(&amp;board));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_board_size_7</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">board</span> = <span class=\"hljs-title function_ invoke__\">nqueens</span>(<span class=\"hljs-number\">7</span>).<span class=\"hljs-title function_ invoke__\">expect</span>(<span class=\"hljs-string\">&quot;Error propagated.&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(board, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>]);\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">check_board</span>(&amp;board));\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 1
    },
    {
      "name": "DONSIMON92",
      "email": "47272787+DONSIMON92@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Amit Kumar",
      "email": "kumanoit@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "John Law",
      "email": "johnlaw.po@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hetal Kuvadia",
      "email": "hetal.kuvadia@somaiya.edu",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "DaveAxiom",
      "email": "dmakray@gmail.com",
      "commits": 5
    },
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}