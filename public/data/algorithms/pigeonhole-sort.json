{
  "slug": "pigeonhole-sort",
  "name": "Pigeonhole Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\pigeonhole_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\pigeonhole_sort.py",
      "code": "<span class=\"hljs-comment\"># Python program to implement Pigeonhole Sorting in python</span>\r\n\r\n<span class=\"hljs-comment\"># Algorithm for the pigeonhole sorting</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pigeonhole_sort</span>(<span class=\"hljs-params\">a</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; a = [8, 3, 2, 7, 4, 6, 8]\r\n    &gt;&gt;&gt; b = sorted(a)  # a nondestructive sort\r\n    &gt;&gt;&gt; pigeonhole_sort(a)  # a destructive sort\r\n    &gt;&gt;&gt; a == b\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># size of range of values in the list (ie, number of pigeonholes we need)</span>\r\n\r\n    min_val = <span class=\"hljs-built_in\">min</span>(a)  <span class=\"hljs-comment\"># min() finds the minimum value</span>\r\n    max_val = <span class=\"hljs-built_in\">max</span>(a)  <span class=\"hljs-comment\"># max() finds the maximum value</span>\r\n\r\n    size = max_val - min_val + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># size is difference of max and min values plus one</span>\r\n\r\n    <span class=\"hljs-comment\"># list of pigeonholes of size equal to the variable size</span>\r\n    holes = [<span class=\"hljs-number\">0</span>] * size\r\n\r\n    <span class=\"hljs-comment\"># Populate the pigeonholes.</span>\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> a:\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(x, <span class=\"hljs-built_in\">int</span>), <span class=\"hljs-string\">&quot;integers only please&quot;</span>\r\n        holes[x - min_val] += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># Putting the elements back into the array in an order.</span>\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> count <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size):\r\n        <span class=\"hljs-keyword\">while</span> holes[count] &gt; <span class=\"hljs-number\">0</span>:\r\n            holes[count] -= <span class=\"hljs-number\">1</span>\r\n            a[i] = count + min_val\r\n            i += <span class=\"hljs-number\">1</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    a = [<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>]\r\n    pigeonhole_sort(a)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Sorted order is:&quot;</span>, <span class=\"hljs-string\">&quot; &quot;</span>.join(a))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    },
    "javascript": {
      "dir": "Sorts\\PigeonHoleSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\PigeonHoleSort.js",
      "code": "<span class=\"hljs-comment\">/*\r\nhttps://en.wikipedia.org/wiki/Pigeonhole_sort\r\n\r\n*Pigeonhole sorting is a sorting algorithm that is suitable\r\n* for sorting lists of elements where the number of elements\r\n* (n) and the length of the range of possible key values (N)\r\n* are approximately the same.\r\n */</span>\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pigeonHoleSort</span> (arr) {\r\n  <span class=\"hljs-keyword\">let</span> min = arr[<span class=\"hljs-number\">0</span>]\r\n  <span class=\"hljs-keyword\">let</span> max = arr[<span class=\"hljs-number\">0</span>]\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) {\r\n    <span class=\"hljs-keyword\">if</span> (arr[i] &gt; max) { max = arr[i] }\r\n    <span class=\"hljs-keyword\">if</span> (arr[i] &lt; min) { min = arr[i] }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">const</span> range = max - min + <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">const</span> pigeonhole = <span class=\"hljs-title class_\">Array</span>(range).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>)\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) {\r\n    pigeonhole[arr[i] - min]++\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; range; j++) {\r\n    <span class=\"hljs-keyword\">while</span> (pigeonhole[j]-- &gt; <span class=\"hljs-number\">0</span>) {\r\n      arr[index++] = j + min\r\n    }\r\n  }\r\n}\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\pigeonhole_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\pigeonhole_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [Pigeonhole Sort algorithm]\r\n * (https://en.wikipedia.org/wiki/Pigeonhole_sort)\r\n * @author [Lownish](https://github.com/Lownish)\r\n * @details\r\n * Pigeonhole sorting is a sorting algorithm that is suitable for sorting lists\r\n * of elements where the number of elements and the number of possible key\r\n * values are approximately the same. It requires O(n + Range) time where n is\r\n * number of elements in input array and ‘Range’ is number of possible values in\r\n * array.\r\n *\r\n * The time Complexity of the algorithm is \\f$O(n+N)\\f$.\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">//for std::is_sorted</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>      <span class=\"hljs-comment\">//for std::array</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">//for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">//for io operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace sorting\r\n * @brief Sorting algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> sorting {\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Pigeonhole sorting of array of size n\r\n * The function will sort the array through Pigeonhole algorithm and print\r\n * @param arr unsorted array of elements\r\n * @returns sorted array of elements\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;std::<span class=\"hljs-type\">size_t</span> N&gt;\r\n<span class=\"hljs-function\">std::array&lt;<span class=\"hljs-type\">int</span>, N&gt; <span class=\"hljs-title\">pigeonSort</span><span class=\"hljs-params\">(std::array&lt;<span class=\"hljs-type\">int</span>, N&gt; arr)</span> </span>{\r\n    <span class=\"hljs-comment\">// Finding min and max*</span>\r\n    <span class=\"hljs-keyword\">auto</span> min = std::<span class=\"hljs-built_in\">min_element</span>(std::<span class=\"hljs-built_in\">begin</span>(arr), std::<span class=\"hljs-built_in\">end</span>(arr));\r\n    <span class=\"hljs-keyword\">auto</span> max = std::<span class=\"hljs-built_in\">max_element</span>(std::<span class=\"hljs-built_in\">begin</span>(arr), std::<span class=\"hljs-built_in\">end</span>(arr));\r\n\r\n    <span class=\"hljs-comment\">// Range refers to the number of holes required</span>\r\n    <span class=\"hljs-type\">int</span> range = *max - *min + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-type\">int</span> *hole = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[range]();\r\n\r\n    <span class=\"hljs-comment\">// Copying all array values to pigeonhole</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n        hole[arr[i] - *min] = arr[i];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Deleting elements from list and storing to original array</span>\r\n    <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; range; i++) {\r\n        <span class=\"hljs-keyword\">while</span> (hole[i] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>) {\r\n            arr[count] = hole[i];\r\n            hole[i] = {};\r\n            count++;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">delete</span>[] hole;\r\n\r\n    <span class=\"hljs-keyword\">return</span> arr;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace sorting</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test function 1 with unsorted array\r\n * {8, 3, 2, 7, 4, 6, 8}\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_1</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">7</span>;\r\n    std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; test_array = {<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>};\r\n\r\n    test_array = sorting::<span class=\"hljs-built_in\">pigeonSort</span>&lt;n&gt;(test_array);\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(test_array), std::<span class=\"hljs-built_in\">end</span>(test_array)));\r\n\r\n    <span class=\"hljs-comment\">// Printing sorted array</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        std::cout &lt;&lt; test_array.<span class=\"hljs-built_in\">at</span>(i) &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test function 2 with unsorted array\r\n * {802, 630, 20, 745, 52, 300, 612, 932, 78, 187}\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_2</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">10</span>;\r\n    std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; test_array = {<span class=\"hljs-number\">802</span>, <span class=\"hljs-number\">630</span>, <span class=\"hljs-number\">20</span>,  <span class=\"hljs-number\">745</span>, <span class=\"hljs-number\">52</span>,\r\n                                     <span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">612</span>, <span class=\"hljs-number\">932</span>, <span class=\"hljs-number\">78</span>,  <span class=\"hljs-number\">187</span>};\r\n\r\n    test_array = sorting::<span class=\"hljs-built_in\">pigeonSort</span>&lt;n&gt;(test_array);\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(test_array), std::<span class=\"hljs-built_in\">end</span>(test_array)));\r\n\r\n    <span class=\"hljs-comment\">// Printing sorted array</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        std::cout &lt;&lt; test_array.<span class=\"hljs-built_in\">at</span>(i) &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test function 1 with unsorted array\r\n * {11,13,12,14}\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_3</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">4</span>;\r\n    std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; test_array = {<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>};\r\n\r\n    test_array = sorting::<span class=\"hljs-built_in\">pigeonSort</span>&lt;n&gt;(test_array);\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(test_array), std::<span class=\"hljs-built_in\">end</span>(test_array)));\r\n\r\n    <span class=\"hljs-comment\">// Printing sorted array</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        std::cout &lt;&lt; test_array.<span class=\"hljs-built_in\">at</span>(i) &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test_1</span>();\r\n    <span class=\"hljs-built_in\">test_2</span>();\r\n    <span class=\"hljs-built_in\">test_3</span>();\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\pigeonhole_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\pigeonhole_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pigeonholeSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> size)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, j, min = arr[<span class=\"hljs-number\">0</span>], max = arr[<span class=\"hljs-number\">0</span>], range;\r\n\r\n    <span class=\"hljs-comment\">// Getting range of the array using max and min</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; size; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (arr[i] &lt; min)\r\n            min = arr[i];\r\n        <span class=\"hljs-keyword\">if</span> (arr[i] &gt; max)\r\n            max = arr[i];\r\n    }\r\n    range = max - min + <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-comment\">// Make &#x27;holes&#x27; and put array&#x27;s numbers in holes</span>\r\n    <span class=\"hljs-type\">int</span> *holes = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * range);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; range; i++)\r\n    {\r\n        holes[i] = <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\r\n    {\r\n        holes[arr[i] - min]++;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Copy the numbers back to the original array</span>\r\n    j = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; range; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">while</span> (holes[i] &gt; <span class=\"hljs-number\">0</span>)\r\n        {\r\n            arr[j] = i + min;\r\n            holes[i]--;\r\n            j++;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">free</span>(holes);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, n;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the size of the array: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\r\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * n);\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number #%d: &quot;</span>, i + <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;You entered:  &quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\r\n    }\r\n    pigeonholeSort(arr, n);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSorted array: &quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n\r\n    <span class=\"hljs-built_in\">free</span>(arr);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}"
    },
    "go": {
      "dir": "sort\\pigeonholesort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sort\\pigeonholesort.go",
      "code": "<span class=\"hljs-comment\">// Pigeonhole algorithm&#x27;s working at wikipedia.</span>\r\n<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Pigeonhole_sort</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> sort\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/max&quot;</span>\r\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/min&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-comment\">// Pigeonhole sorts a slice using pigeonhole sorting algorithm.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Pigeonhole</span><span class=\"hljs-params\">(arr []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) == <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> arr\r\n\t}\r\n\r\n\tmax := max.Int(arr...)\r\n\tmin := min.Int(arr...)\r\n\r\n\tsize := max - min + <span class=\"hljs-number\">1</span>\r\n\r\n\tholes := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, size)\r\n\r\n\t<span class=\"hljs-keyword\">for</span> _, element := <span class=\"hljs-keyword\">range</span> arr {\r\n\t\tholes[element-min]++\r\n\t}\r\n\r\n\ti := <span class=\"hljs-number\">0</span>\r\n\r\n\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; size; j++ {\r\n\t\t<span class=\"hljs-keyword\">for</span> holes[j] &gt; <span class=\"hljs-number\">0</span> {\r\n\t\t\tholes[j]--\r\n\t\t\tarr[i] = j + min\r\n\t\t\ti++\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> arr\r\n}\r\n"
    },
    "dart": {
      "dir": "sort\\pigeonhole_sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort\\pigeonhole_sort.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-keyword\">void</span> pigeonholeSort(<span class=\"hljs-built_in\">List</span> arr) {\r\n  <span class=\"hljs-comment\">//The length of the list</span>\r\n  <span class=\"hljs-built_in\">int</span> n = arr.length;\r\n\r\n  <span class=\"hljs-comment\">//checking the size</span>\r\n  <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) {\r\n    <span class=\"hljs-keyword\">return</span>;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">//Find minimum and maximum values in arr</span>\r\n  <span class=\"hljs-built_in\">int</span> min = arr[<span class=\"hljs-number\">0</span>];\r\n  <span class=\"hljs-built_in\">int</span> max = arr[<span class=\"hljs-number\">0</span>];\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\r\n    <span class=\"hljs-keyword\">if</span> (arr[i] &lt; min) min = arr[i];\r\n    <span class=\"hljs-keyword\">if</span> (arr[i] &gt; max) max = arr[i];\r\n  }\r\n\r\n  <span class=\"hljs-built_in\">int</span> range = max - min;\r\n  range++;\r\n\r\n  <span class=\"hljs-built_in\">List</span> phole = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>(range);\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; range; i++) {\r\n    phole[i] = <span class=\"hljs-number\">0</span>;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">//Populate the pigeonholes.</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n    phole[arr[i] - min];\r\n    phole[arr[i] - min] = phole[arr[i] - min] + <span class=\"hljs-number\">1</span>;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">//Put the elements back into the array in order</span>\r\n  <span class=\"hljs-built_in\">int</span> index = <span class=\"hljs-number\">0</span>;\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; range; j++) <span class=\"hljs-keyword\">while</span> (phole[j]-- &gt; <span class=\"hljs-number\">0</span>) arr[index++] = j + min;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  test(<span class=\"hljs-string\">&quot;Sort empty list returns empty list&quot;</span>, () {\r\n    <span class=\"hljs-built_in\">List</span> list = [];\r\n    pigeonholeSort(list);\r\n    expect(list, isEmpty);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Already sorted list remain sorted&quot;</span>, () {\r\n    <span class=\"hljs-built_in\">List</span> list = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\r\n    pigeonholeSort(list);\r\n    expect(list, equals([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Sort&quot;</span>, () {\r\n    <span class=\"hljs-built_in\">List</span> list = [<span class=\"hljs-number\">87</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">135</span>, <span class=\"hljs-number\">85</span>];\r\n    pigeonholeSort(list);\r\n    expect(list, equals([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">87</span>, <span class=\"hljs-number\">135</span>]));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Sorted list size doesnt change&quot;</span>, () {\r\n    <span class=\"hljs-built_in\">List</span> list = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-12</span>, <span class=\"hljs-number\">-12</span>, <span class=\"hljs-number\">77</span>];\r\n    pigeonholeSort(list);\r\n    expect(list.length, equals(<span class=\"hljs-number\">7</span>));\r\n    expect(list, [<span class=\"hljs-number\">-12</span>, <span class=\"hljs-number\">-12</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">77</span>]);\r\n  });\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Hiyabye",
      "email": "jihoon7373@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Lownish Rai Sookha",
      "email": "69192570+Lownish@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Níkolas Vargas",
      "email": "vargasnikolass@gmail.com",
      "commits": 1
    },
    {
      "name": "SHAKTI SINGH",
      "email": "mohittanwar2323@gmail.com",
      "commits": 1
    },
    {
      "name": "Chris Kolonas",
      "email": "ckolonas@csd.auth.gr",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}