{
  "slug": "depth-first-search",
  "name": "Depth First Search",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\depth_first_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\depth_first_search.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Non recursive implementation of a DFS algorithm.&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depth_first_search</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span>, start: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">set</span>[<span class=\"hljs-built_in\">str</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Depth First Search on Graph\r\n    :param graph: directed graph in dictionary format\r\n    :param start: starting vertex as a string\r\n    :returns: the trace of the search\r\n    &gt;&gt;&gt; input_G = { &quot;A&quot;: [&quot;B&quot;, &quot;C&quot;, &quot;D&quot;], &quot;B&quot;: [&quot;A&quot;, &quot;D&quot;, &quot;E&quot;],\r\n    ... &quot;C&quot;: [&quot;A&quot;, &quot;F&quot;], &quot;D&quot;: [&quot;B&quot;, &quot;D&quot;], &quot;E&quot;: [&quot;B&quot;, &quot;F&quot;],\r\n    ... &quot;F&quot;: [&quot;C&quot;, &quot;E&quot;, &quot;G&quot;], &quot;G&quot;: [&quot;F&quot;] }\r\n    &gt;&gt;&gt; output_G = list({&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;})\r\n    &gt;&gt;&gt; all(x in output_G for x in list(depth_first_search(input_G, &quot;A&quot;)))\r\n    True\r\n    &gt;&gt;&gt; all(x in output_G for x in list(depth_first_search(input_G, &quot;G&quot;)))\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    explored, stack = <span class=\"hljs-built_in\">set</span>(start), [start]\r\n\r\n    <span class=\"hljs-keyword\">while</span> stack:\r\n        v = stack.pop()\r\n        explored.add(v)\r\n        <span class=\"hljs-comment\"># Differences from BFS:</span>\r\n        <span class=\"hljs-comment\"># 1) pop last element instead of first one</span>\r\n        <span class=\"hljs-comment\"># 2) add adjacent elements to stack without exploring them</span>\r\n        <span class=\"hljs-keyword\">for</span> adj <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">reversed</span>(graph[v]):\r\n            <span class=\"hljs-keyword\">if</span> adj <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> explored:\r\n                stack.append(adj)\r\n    <span class=\"hljs-keyword\">return</span> explored\r\n\r\n\r\nG = {\r\n    <span class=\"hljs-string\">&quot;A&quot;</span>: [<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;B&quot;</span>: [<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>, <span class=\"hljs-string\">&quot;E&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;C&quot;</span>: [<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;F&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;D&quot;</span>: [<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;E&quot;</span>: [<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;F&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;F&quot;</span>: [<span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-string\">&quot;E&quot;</span>, <span class=\"hljs-string\">&quot;G&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;G&quot;</span>: [<span class=\"hljs-string\">&quot;F&quot;</span>],\r\n}\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    <span class=\"hljs-built_in\">print</span>(depth_first_search(G, <span class=\"hljs-string\">&quot;A&quot;</span>))\r\n"
    },
    "javascript": {
      "dir": "Trees\\DepthFirstSearch.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Trees\\DepthFirstSearch.js",
      "code": "<span class=\"hljs-comment\">/*\r\n * Author: Surendra Kumar\r\n * DFS Algorithm implementation in JavaScript\r\n * DFS Algorithm for traversing or searching graph data structures.\r\n*/</span>\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">traverseDFS</span> (root) {\r\n  <span class=\"hljs-keyword\">const</span> stack = [root]\r\n  <span class=\"hljs-keyword\">const</span> res = []\r\n\r\n  <span class=\"hljs-keyword\">while</span> (stack.<span class=\"hljs-property\">length</span>) {\r\n    <span class=\"hljs-keyword\">const</span> curr = stack.<span class=\"hljs-title function_\">pop</span>()\r\n    res.<span class=\"hljs-title function_\">push</span>(curr.<span class=\"hljs-property\">key</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> (curr.<span class=\"hljs-property\">right</span>) {\r\n      stack.<span class=\"hljs-title function_\">push</span>(curr.<span class=\"hljs-property\">right</span>)\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> (curr.<span class=\"hljs-property\">left</span>) {\r\n      stack.<span class=\"hljs-title function_\">push</span>(curr.<span class=\"hljs-property\">left</span>)\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">reverse</span>()\r\n}\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">searchDFS</span> (tree, value) {\r\n  <span class=\"hljs-keyword\">const</span> stack = []\r\n\r\n  stack.<span class=\"hljs-title function_\">push</span>(tree[<span class=\"hljs-number\">0</span>])\r\n\r\n  <span class=\"hljs-keyword\">while</span> (stack.<span class=\"hljs-property\">length</span> !== <span class=\"hljs-number\">0</span>) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; stack.<span class=\"hljs-property\">length</span>; i++) {\r\n      <span class=\"hljs-keyword\">const</span> node = stack.<span class=\"hljs-title function_\">pop</span>()\r\n\r\n      <span class=\"hljs-keyword\">if</span> (node.<span class=\"hljs-property\">value</span> === value) {\r\n        <span class=\"hljs-keyword\">return</span> node\r\n      }\r\n      <span class=\"hljs-keyword\">if</span> (node.<span class=\"hljs-property\">right</span>) {\r\n        stack.<span class=\"hljs-title function_\">push</span>(tree[node.<span class=\"hljs-property\">right</span>])\r\n      }\r\n      <span class=\"hljs-keyword\">if</span> (node.<span class=\"hljs-property\">left</span>) {\r\n        stack.<span class=\"hljs-title function_\">push</span>(tree[node.<span class=\"hljs-property\">left</span>])\r\n      }\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\r\n}\r\n\r\n<span class=\"hljs-keyword\">const</span> tree = [\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-number\">2</span> },\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-number\">4</span> },\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">7</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-number\">5</span> },\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-literal\">null</span> },\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-literal\">null</span> },\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">9</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">7</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-number\">8</span> },\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">9</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-literal\">null</span> },\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">8</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-literal\">null</span> },\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-literal\">null</span> },\r\n  { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">left</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">right</span>: <span class=\"hljs-literal\">null</span> }\r\n]\r\n\r\n<span class=\"hljs-title function_\">searchDFS</span>(tree, <span class=\"hljs-number\">9</span>)\r\n<span class=\"hljs-title function_\">searchDFS</span>(tree, <span class=\"hljs-number\">10</span>)\r\n\r\n<span class=\"hljs-title function_\">traverseDFS</span>(<span class=\"hljs-number\">6</span>)\r\n\r\n<span class=\"hljs-comment\">//            6</span>\r\n<span class=\"hljs-comment\">//           / \\</span>\r\n<span class=\"hljs-comment\">//          5   7</span>\r\n<span class=\"hljs-comment\">//         / \\   \\</span>\r\n<span class=\"hljs-comment\">//        3   4   9</span>\r\n<span class=\"hljs-comment\">//       /       / \\</span>\r\n<span class=\"hljs-comment\">//      2       8   10</span>\r\n<span class=\"hljs-comment\">//     /</span>\r\n<span class=\"hljs-comment\">//    1</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "graph\\depth_first_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graph\\depth_first_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n *\r\n * \\file\r\n * \\brief [Depth First Search Algorithm\r\n * (Depth First Search)](https://en.wikipedia.org/wiki/Depth-first_search)\r\n *\r\n * \\author [Ayaan Khan](http://github.com/ayaankhan98)\r\n *\r\n * \\details\r\n * Depth First Search also quoted as DFS is a Graph Traversal Algorithm.\r\n * Time Complexity O(|V| + |E|) where V is number of vertices and E\r\n * is number of edges in graph.\r\n *\r\n * Application of Depth First Search are\r\n *\r\n * 1. Finding connected components\r\n * 2. Finding 2-(edge or vertex)-connected components.\r\n * 3. Finding 3-(edge or vertex)-connected components.\r\n * 4. Finding the bridges of a graph.\r\n * 5. Generating words in order to plot the limit set of a group.\r\n * 6. Finding strongly connected components.\r\n *\r\n * And there are many more...\r\n *\r\n * &lt;h4&gt;Working&lt;/h4&gt;\r\n * 1. Mark all vertices as unvisited first\r\n * 2. start exploring from some starting vertex.\r\n *\r\n *      While exploring vertex we mark the vertex as visited\r\n *      and start exploring the vertices connected to this\r\n *      vertex in recursive way.\r\n *\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n *\r\n * \\namespace graph\r\n * \\brief Graph Algorithms\r\n *\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> graph {\r\n<span class=\"hljs-comment\">/**\r\n * \\brief\r\n * Adds and edge between two vertices of graph say u and v in this\r\n * case.\r\n *\r\n * @param adj Adjacency list representation of graph\r\n * @param u first vertex\r\n * @param v second vertex\r\n *\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(std::vector&lt;std::vector&lt;<span class=\"hljs-type\">size_t</span>&gt;&gt; *adj, <span class=\"hljs-type\">size_t</span> u, <span class=\"hljs-type\">size_t</span> v)</span> </span>{\r\n    <span class=\"hljs-comment\">/*\r\n     *\r\n     * Here we are considering undirected graph that&#x27;s the\r\n     * reason we are adding v to the adjacency list representation of u\r\n     * and also adding u to the adjacency list representation of v\r\n     *\r\n     */</span>\r\n    (*adj)[u - <span class=\"hljs-number\">1</span>].<span class=\"hljs-built_in\">push_back</span>(v - <span class=\"hljs-number\">1</span>);\r\n    (*adj)[v - <span class=\"hljs-number\">1</span>].<span class=\"hljs-built_in\">push_back</span>(u - <span class=\"hljs-number\">1</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n *\r\n * \\brief\r\n * Explores the given vertex, exploring a vertex means traversing\r\n * over all the vertices which are connected to the vertex that is\r\n * currently being explored.\r\n *\r\n * @param adj garph\r\n * @param v vertex to be explored\r\n * @param visited already visited vertices\r\n *\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">explore</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">size_t</span>&gt;&gt; &amp;adj, <span class=\"hljs-type\">size_t</span> v,\r\n             std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; *visited)</span> </span>{\r\n    std::cout &lt;&lt; v + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    (*visited)[v] = <span class=\"hljs-literal\">true</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> x : adj[v]) {\r\n        <span class=\"hljs-keyword\">if</span> (!(*visited)[x]) {\r\n            <span class=\"hljs-built_in\">explore</span>(adj, x, visited);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * \\brief\r\n * initiates depth first search algorithm.\r\n *\r\n * @param adj adjacency list of graph\r\n * @param start vertex from where DFS starts traversing.\r\n *\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">depth_first_search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">size_t</span>&gt;&gt; &amp;adj,\r\n                        <span class=\"hljs-type\">size_t</span> start)</span> </span>{\r\n    <span class=\"hljs-type\">size_t</span> vertices = adj.<span class=\"hljs-built_in\">size</span>();\r\n\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">visited</span><span class=\"hljs-params\">(vertices, <span class=\"hljs-literal\">false</span>)</span></span>;\r\n    <span class=\"hljs-built_in\">explore</span>(adj, start, &amp;visited);\r\n}\r\n}  <span class=\"hljs-comment\">// namespace graph</span>\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">size_t</span> vertices = <span class=\"hljs-number\">0</span>, edges = <span class=\"hljs-number\">0</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the Vertices : &quot;</span>;\r\n    std::cin &gt;&gt; vertices;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the Edges : &quot;</span>;\r\n    std::cin &gt;&gt; edges;\r\n\r\n    <span class=\"hljs-comment\">/// creating graph</span>\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">size_t</span>&gt;&gt; <span class=\"hljs-built_in\">adj</span>(vertices, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">size_t</span>&gt;());\r\n\r\n    <span class=\"hljs-comment\">/// taking input for edges</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the vertices which have edges between them : &quot;</span>\r\n              &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">while</span> (edges--) {\r\n        <span class=\"hljs-type\">size_t</span> u = <span class=\"hljs-number\">0</span>, v = <span class=\"hljs-number\">0</span>;\r\n        std::cin &gt;&gt; u &gt;&gt; v;\r\n        graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj, u, v);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// running depth first search over graph</span>\r\n    graph::<span class=\"hljs-built_in\">depth_first_search</span>(adj, <span class=\"hljs-number\">2</span>);\r\n\r\n    std::cout &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\searches\\DepthFirstSearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\searches\\DepthFirstSearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.searches;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\r\n<span class=\"hljs-keyword\">import</span> java.util.Optional;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span>: caos321\r\n * <span class=\"hljs-doctag\">@date</span>: 31 October 2021 (Sunday)\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DepthFirstSearch</span> {\r\n\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String name;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&lt;Node&gt; subNodes;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String name)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.name = name;\r\n            <span class=\"hljs-built_in\">this</span>.subNodes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String name, <span class=\"hljs-keyword\">final</span> List&lt;Node&gt; subNodes)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.name = name;\r\n            <span class=\"hljs-built_in\">this</span>.subNodes = subNodes;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> name;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> List&lt;Node&gt; <span class=\"hljs-title function_\">getSubNodes</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> subNodes;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Optional&lt;Node&gt; <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Node node, <span class=\"hljs-keyword\">final</span> String name)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (node.getName().equals(name)) {\r\n            <span class=\"hljs-keyword\">return</span> Optional.of(node);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> node.getSubNodes()\r\n                .stream()\r\n                .map(value -&gt; search(value, name))\r\n                .flatMap(Optional::stream)\r\n                .findAny();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">assertThat</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Object actual, <span class=\"hljs-keyword\">final</span> Object expected)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (!Objects.equals(actual, expected)) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AssertionError</span>(String.format(<span class=\"hljs-string\">&quot;expected=%s but was actual=%s&quot;</span>, expected, actual));\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String[] args)</span> {\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">rootNode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-string\">&quot;A&quot;</span>, List.of(\r\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-string\">&quot;B&quot;</span>, List.of(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-string\">&quot;D&quot;</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-string\">&quot;F&quot;</span>, List.of(\r\n                        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-string\">&quot;H&quot;</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-string\">&quot;I&quot;</span>)\r\n                )))),\r\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-string\">&quot;C&quot;</span>, List.of(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-string\">&quot;G&quot;</span>))),\r\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-string\">&quot;E&quot;</span>)\r\n        ));\r\n\r\n        {\r\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">expected</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;I&quot;</span>;\r\n\r\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> search(rootNode, expected)\r\n                    .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AssertionError</span>(<span class=\"hljs-string\">&quot;Node not found!&quot;</span>));\r\n\r\n            assertThat(result.getName(), expected);\r\n        }\r\n\r\n        {\r\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">expected</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;G&quot;</span>;\r\n\r\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> search(rootNode, expected)\r\n                    .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AssertionError</span>(<span class=\"hljs-string\">&quot;Node not found!&quot;</span>));\r\n\r\n            assertThat(result.getName(), expected);\r\n        }\r\n\r\n        {\r\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">expected</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;E&quot;</span>;\r\n\r\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> search(rootNode, expected)\r\n                    .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AssertionError</span>(<span class=\"hljs-string\">&quot;Node not found!&quot;</span>));\r\n\r\n            assertThat(result.getName(), expected);\r\n        }\r\n    }\r\n}\r\n"
    },
    "go": {
      "dir": "graph\\depthfirstsearch.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph\\depthfirstsearch.go",
      "code": "<span class=\"hljs-keyword\">package</span> graph\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetIdx</span><span class=\"hljs-params\">(target <span class=\"hljs-type\">int</span>, nodes []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(nodes); i++ {\r\n\t\t<span class=\"hljs-keyword\">if</span> nodes[i] == target {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> i\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NotExist</span><span class=\"hljs-params\">(target <span class=\"hljs-type\">int</span>, slice []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> {\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(slice); i++ {\r\n\t\t<span class=\"hljs-keyword\">if</span> slice[i] == target {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">DepthFirstSearchHelper</span><span class=\"hljs-params\">(start, end <span class=\"hljs-type\">int</span>, nodes []<span class=\"hljs-type\">int</span>, edges [][]<span class=\"hljs-type\">bool</span>, showroute <span class=\"hljs-type\">bool</span>)</span></span> ([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">bool</span>) {\r\n\t<span class=\"hljs-keyword\">var</span> route []<span class=\"hljs-type\">int</span>\r\n\t<span class=\"hljs-keyword\">var</span> stack []<span class=\"hljs-type\">int</span>\r\n\tstartIdx := GetIdx(start, nodes)\r\n\tstack = <span class=\"hljs-built_in\">append</span>(stack, startIdx)\r\n\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(stack) &gt; <span class=\"hljs-number\">0</span> {\r\n\t\tnow := stack[<span class=\"hljs-built_in\">len</span>(stack)<span class=\"hljs-number\">-1</span>]\r\n\t\troute = <span class=\"hljs-built_in\">append</span>(route, nodes[now])\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) &gt; <span class=\"hljs-number\">1</span> {\r\n\t\t\tstack = stack[:<span class=\"hljs-built_in\">len</span>(stack)<span class=\"hljs-number\">-1</span>]\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\tstack = stack[:<span class=\"hljs-built_in\">len</span>(stack)<span class=\"hljs-number\">-1</span>]\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(edges[now]); i++ {\r\n\t\t\t<span class=\"hljs-keyword\">if</span> edges[now][i] &amp;&amp; NotExist(i, stack) {\r\n\t\t\t\tstack = <span class=\"hljs-built_in\">append</span>(stack, i)\r\n\t\t\t}\r\n\t\t\tedges[now][i] = <span class=\"hljs-literal\">false</span>\r\n\t\t\tedges[i][now] = <span class=\"hljs-literal\">false</span>\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">if</span> route[<span class=\"hljs-built_in\">len</span>(route)<span class=\"hljs-number\">-1</span>] == end {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> route, <span class=\"hljs-literal\">true</span>\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">if</span> showroute {\r\n\t\t<span class=\"hljs-keyword\">return</span> route, <span class=\"hljs-literal\">false</span>\r\n\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span>\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">DepthFirstSearch</span><span class=\"hljs-params\">(start, end <span class=\"hljs-type\">int</span>, nodes []<span class=\"hljs-type\">int</span>, edges [][]<span class=\"hljs-type\">bool</span>)</span></span> ([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">bool</span>) {\r\n\t<span class=\"hljs-keyword\">return</span> DepthFirstSearchHelper(start, end, nodes, edges, <span class=\"hljs-literal\">false</span>)\r\n}\r\n\r\n<span class=\"hljs-comment\">// func main() {</span>\r\n<span class=\"hljs-comment\">// \tnodes := []int{</span>\r\n<span class=\"hljs-comment\">// \t\t1, 2, 3, 4, 5, 6,</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n<span class=\"hljs-comment\">// \t/*</span>\r\n<span class=\"hljs-comment\">// \t\tsample graph</span>\r\n<span class=\"hljs-comment\">// \t\t①-②</span>\r\n<span class=\"hljs-comment\">// \t\t|  |</span>\r\n<span class=\"hljs-comment\">// \t\t③-④-⑤-⑥</span>\r\n<span class=\"hljs-comment\">// \t*/</span>\r\n<span class=\"hljs-comment\">// \tedges := [][]bool{</span>\r\n<span class=\"hljs-comment\">// \t\t{false, true, true, false, false, false},</span>\r\n<span class=\"hljs-comment\">// \t\t{true, false, false, true, false, false},</span>\r\n<span class=\"hljs-comment\">// \t\t{true, false, false, true, false, false},</span>\r\n<span class=\"hljs-comment\">// \t\t{false, true, true, false, true, false},</span>\r\n<span class=\"hljs-comment\">// \t\t{false, false, false, true, false, true},</span>\r\n<span class=\"hljs-comment\">// \t\t{false, false, false, false, true, false},</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n<span class=\"hljs-comment\">// \tstart := 1</span>\r\n<span class=\"hljs-comment\">// \tend := 6</span>\r\n<span class=\"hljs-comment\">// \troute, _ := dfs(start, end, nodes, edges)</span>\r\n<span class=\"hljs-comment\">// \tfmt.Println(route)</span>\r\n<span class=\"hljs-comment\">// }</span>\r\n"
    },
    "rust": {
      "dir": "src\\graph\\depth_first_search.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\graph\\depth_first_search.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::collections::HashSet;\r\n<span class=\"hljs-keyword\">use</span> std::collections::VecDeque;\r\n\r\n<span class=\"hljs-comment\">// Perform a Depth First Search Algorithm to find a element in a graph</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Return a Optional with a vector with history of vertex visiteds</span>\r\n<span class=\"hljs-comment\">// or a None if the element not exists on the graph</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">depth_first_search</span>(graph: &amp;Graph, root: Vertex, objective: Vertex) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt;&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">visited</span>: HashSet&lt;Vertex&gt; = HashSet::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">history</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">queue</span> = VecDeque::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n    queue.<span class=\"hljs-title function_ invoke__\">push_back</span>(root);\r\n\r\n    <span class=\"hljs-comment\">// While there is an element in the queue</span>\r\n    <span class=\"hljs-comment\">// get the first element of the vertex queue</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(current_vertex) = queue.<span class=\"hljs-title function_ invoke__\">pop_front</span>() {\r\n        <span class=\"hljs-comment\">// Added current vertex in the history of visiteds vertex</span>\r\n        history.<span class=\"hljs-title function_ invoke__\">push</span>(current_vertex.<span class=\"hljs-title function_ invoke__\">value</span>());\r\n\r\n        <span class=\"hljs-comment\">// Verify if this vertex is the objective</span>\r\n        <span class=\"hljs-keyword\">if</span> current_vertex == objective {\r\n            <span class=\"hljs-comment\">// Return the Optional with the history of visiteds vertex</span>\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(history);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// For each over the neighbors of current vertex</span>\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">neighbor</span> <span class=\"hljs-keyword\">in</span> current_vertex.<span class=\"hljs-title function_ invoke__\">neighbors</span>(graph).<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">rev</span>() {\r\n            <span class=\"hljs-comment\">// Insert in the HashSet of visiteds if this value not exist yet</span>\r\n            <span class=\"hljs-keyword\">if</span> visited.<span class=\"hljs-title function_ invoke__\">insert</span>(neighbor) {\r\n                <span class=\"hljs-comment\">// Add the neighbor on front of queue</span>\r\n                queue.<span class=\"hljs-title function_ invoke__\">push_front</span>(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// If all vertex is visited and the objective is not found</span>\r\n    <span class=\"hljs-comment\">// return a Optional with None value</span>\r\n    <span class=\"hljs-literal\">None</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Data Structures</span>\r\n\r\n<span class=\"hljs-meta\">#[derive(Copy, Clone, PartialEq, Eq, Hash)]</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Vertex</span>(<span class=\"hljs-type\">u32</span>);\r\n<span class=\"hljs-meta\">#[derive(Copy, Clone, PartialEq, Eq, Hash)]</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Edge</span>(<span class=\"hljs-type\">u32</span>, <span class=\"hljs-type\">u32</span>);\r\n<span class=\"hljs-meta\">#[derive(Clone)]</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Graph</span> {\r\n    <span class=\"hljs-meta\">#[allow(dead_code)]</span>\r\n    vertices: <span class=\"hljs-type\">Vec</span>&lt;Vertex&gt;,\r\n    edges: <span class=\"hljs-type\">Vec</span>&lt;Edge&gt;,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Graph</span> {\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(vertices: <span class=\"hljs-type\">Vec</span>&lt;Vertex&gt;, edges: <span class=\"hljs-type\">Vec</span>&lt;Edge&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        Graph { vertices, edges }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">From</span>&lt;<span class=\"hljs-type\">u32</span>&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Vertex</span> {\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">from</span>(item: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        <span class=\"hljs-title function_ invoke__\">Vertex</span>(item)\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Vertex</span> {\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">value</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u32</span> {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">neighbors</span>(&amp;<span class=\"hljs-keyword\">self</span>, graph: &amp;Graph) <span class=\"hljs-punctuation\">-&gt;</span> VecDeque&lt;Vertex&gt; {\r\n        graph\r\n            .edges\r\n            .<span class=\"hljs-title function_ invoke__\">iter</span>()\r\n            .<span class=\"hljs-title function_ invoke__\">filter</span>(|e| e.<span class=\"hljs-number\">0</span> == <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>)\r\n            .<span class=\"hljs-title function_ invoke__\">map</span>(|e| e.<span class=\"hljs-number\">1</span>.<span class=\"hljs-title function_ invoke__\">into</span>())\r\n            .<span class=\"hljs-title function_ invoke__\">collect</span>()\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">From</span>&lt;(<span class=\"hljs-type\">u32</span>, <span class=\"hljs-type\">u32</span>)&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Edge</span> {\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">from</span>(item: (<span class=\"hljs-type\">u32</span>, <span class=\"hljs-type\">u32</span>)) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        <span class=\"hljs-title function_ invoke__\">Edge</span>(item.<span class=\"hljs-number\">0</span>, item.<span class=\"hljs-number\">1</span>)\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">find_1_fail</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vertices</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">edges</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>)];\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">root</span> = <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">objective</span> = <span class=\"hljs-number\">99</span>;\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">graph</span> = Graph::<span class=\"hljs-title function_ invoke__\">new</span>(\r\n            vertices.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|v| v.<span class=\"hljs-title function_ invoke__\">into</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>(),\r\n            edges.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|e| e.<span class=\"hljs-title function_ invoke__\">into</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>(),\r\n        );\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">depth_first_search</span>(&amp;graph, root.<span class=\"hljs-title function_ invoke__\">into</span>(), objective.<span class=\"hljs-title function_ invoke__\">into</span>()),\r\n            <span class=\"hljs-literal\">None</span>\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">find_1_sucess</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vertices</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">edges</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>), (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>)];\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">root</span> = <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">objective</span> = <span class=\"hljs-number\">7</span>;\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">correct_path</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>];\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">graph</span> = Graph::<span class=\"hljs-title function_ invoke__\">new</span>(\r\n            vertices.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|v| v.<span class=\"hljs-title function_ invoke__\">into</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>(),\r\n            edges.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|e| e.<span class=\"hljs-title function_ invoke__\">into</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>(),\r\n        );\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">depth_first_search</span>(&amp;graph, root.<span class=\"hljs-title function_ invoke__\">into</span>(), objective.<span class=\"hljs-title function_ invoke__\">into</span>()),\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(correct_path)\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">find_2_sucess</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vertices</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">edges</span> = <span class=\"hljs-built_in\">vec!</span>[\r\n            (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>),\r\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>),\r\n            (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>),\r\n            (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>),\r\n            (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>),\r\n            (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>),\r\n            (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>),\r\n            (<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>),\r\n            (<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>),\r\n        ];\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">root</span> = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">objective</span> = <span class=\"hljs-number\">6</span>;\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">correct_path</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>];\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">graph</span> = Graph::<span class=\"hljs-title function_ invoke__\">new</span>(\r\n            vertices.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|v| v.<span class=\"hljs-title function_ invoke__\">into</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>(),\r\n            edges.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|e| e.<span class=\"hljs-title function_ invoke__\">into</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>(),\r\n        );\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">depth_first_search</span>(&amp;graph, root.<span class=\"hljs-title function_ invoke__\">into</span>(), objective.<span class=\"hljs-title function_ invoke__\">into</span>()),\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(correct_path)\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">find_3_sucess</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vertices</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">edges</span> = <span class=\"hljs-built_in\">vec!</span>[\r\n            (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>),\r\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>),\r\n            (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>),\r\n            (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>),\r\n            (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>),\r\n            (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>),\r\n            (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>),\r\n            (<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>),\r\n            (<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>),\r\n        ];\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">root</span> = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">objective</span> = <span class=\"hljs-number\">4</span>;\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">correct_path</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>];\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">graph</span> = Graph::<span class=\"hljs-title function_ invoke__\">new</span>(\r\n            vertices.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|v| v.<span class=\"hljs-title function_ invoke__\">into</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>(),\r\n            edges.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|e| e.<span class=\"hljs-title function_ invoke__\">into</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>(),\r\n        );\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">depth_first_search</span>(&amp;graph, root.<span class=\"hljs-title function_ invoke__\">into</span>(), objective.<span class=\"hljs-title function_ invoke__\">into</span>()),\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(correct_path)\r\n        );\r\n    }\r\n}\r\n"
    },
    "dart": {
      "dir": "graphs\\depth_first_search.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/graphs\\depth_first_search.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:collection&#x27;</span>;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Implementation of Depth First Search</span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">https://en.wikipedia.org/wiki/Depth-first<span class=\"hljs-emphasis\">_search</span></span></span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span> </span>{\r\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">Adjacency List representation using dynamic list and HashMap</span></span></span>\r\n  HashMap graph = <span class=\"hljs-keyword\">new</span> HashMap&lt;<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">dynamic</span>&gt;&gt;();\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; nodes;\r\n\r\n  <span class=\"hljs-keyword\">void</span> makeGraph() {\r\n    <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">initialise all nodes with empty lists.</span></span></span>\r\n    <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">each node will have a list as value which stores</span></span></span>\r\n    <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">the nodes to which it is connected to</span></span></span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.nodes.length; i++) {\r\n      <span class=\"hljs-keyword\">this</span>.graph[nodes[i]] = <span class=\"hljs-built_in\">List</span>();\r\n    }\r\n  }\r\n\r\n  Graph(<span class=\"hljs-keyword\">this</span>.nodes) {\r\n    <span class=\"hljs-keyword\">this</span>.makeGraph();\r\n  }\r\n\r\n  <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">get</span> numberOfNodesInGraph {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.nodes.length;\r\n  }\r\n\r\n  HashMap <span class=\"hljs-keyword\">get</span> graphDataStructure {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.graph;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> addNodes(<span class=\"hljs-built_in\">int</span> newNode) {\r\n    <span class=\"hljs-keyword\">this</span>.nodes.add(newNode);\r\n    <span class=\"hljs-keyword\">this</span>.graph[newNode] = <span class=\"hljs-built_in\">List</span>();\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> addEdges(<span class=\"hljs-built_in\">int</span> start, <span class=\"hljs-built_in\">int</span> end) {\r\n    <span class=\"hljs-keyword\">this</span>.graph[start].add(end);\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> depthFirstSearchHelper(graph, visitedNodes, node, answer) {\r\n  <span class=\"hljs-keyword\">if</span> (visitedNodes[node]) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\r\n  }\r\n  visitedNodes[node] = <span class=\"hljs-keyword\">true</span>;\r\n  answer.add(node);\r\n  <span class=\"hljs-keyword\">if</span> (graph.containsKey(node)) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> child <span class=\"hljs-keyword\">in</span> graph[node]) {\r\n      <span class=\"hljs-keyword\">if</span> (!visitedNodes[child]) {\r\n        depthFirstSearchHelper(graph, visitedNodes, child, answer);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; depthFirstSearch(Graph graph, <span class=\"hljs-built_in\">int</span> numberOfNodes, <span class=\"hljs-built_in\">int</span> startNode) {\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">bool</span>&gt; visitedNodes =\r\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">bool</span>&gt;.generate(numberOfNodes, (index) =&gt; <span class=\"hljs-keyword\">false</span>);\r\n\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; answer = <span class=\"hljs-built_in\">List</span>();\r\n  depthFirstSearchHelper(graph.graph, visitedNodes, startNode, answer);\r\n  <span class=\"hljs-keyword\">return</span> answer;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  test((<span class=\"hljs-string\">&#x27;Test case 1:&#x27;</span>), () {\r\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; nodes = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\r\n    <span class=\"hljs-built_in\">int</span> numberOfEdges = <span class=\"hljs-number\">3</span>;\r\n\r\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;&gt; edges = [\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],\r\n      [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>],\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>]\r\n    ];\r\n    Graph graph = Graph(nodes);\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; numberOfEdges; i++) {\r\n      <span class=\"hljs-built_in\">int</span> start = edges[i][<span class=\"hljs-number\">0</span>];\r\n      <span class=\"hljs-built_in\">int</span> end = edges[i][<span class=\"hljs-number\">1</span>];\r\n      graph.addEdges(start, end);\r\n    }\r\n    <span class=\"hljs-built_in\">int</span> startNode = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; answer =\r\n        depthFirstSearch(graph, graph.numberOfNodesInGraph, startNode);\r\n    expect(answer, equals([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]));\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;Test case 2:&#x27;</span>), () {\r\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; nodes = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\r\n    <span class=\"hljs-built_in\">int</span> numberOfEdges = <span class=\"hljs-number\">4</span>;\r\n\r\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;&gt; edges = [\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>],\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>],\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>],\r\n      [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]\r\n    ];\r\n    Graph graph = Graph(nodes);\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; numberOfEdges; i++) {\r\n      <span class=\"hljs-built_in\">int</span> start = edges[i][<span class=\"hljs-number\">0</span>];\r\n      <span class=\"hljs-built_in\">int</span> end = edges[i][<span class=\"hljs-number\">1</span>];\r\n      graph.addEdges(start, end);\r\n    }\r\n    <span class=\"hljs-built_in\">int</span> startNode = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; answer =\r\n        depthFirstSearch(graph, graph.numberOfNodesInGraph, startNode);\r\n    expect(answer, equals([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>]));\r\n  });\r\n}\r\n"
    },
    "ruby": {
      "dir": "searches\\depth_first_search.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/searches\\depth_first_search.rb",
      "code": "<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> [Integer] start</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> [Integer] target</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> [Array] adjacency_list</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> [Array] routes</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(start, target, adjacency_list)</span></span>\r\n  is_visited = Hash.new(<span class=\"hljs-literal\">false</span>)\r\n  parent = {}\r\n  stack = [start]\r\n  loop <span class=\"hljs-keyword\">do</span>\r\n    <span class=\"hljs-keyword\">break</span> <span class=\"hljs-keyword\">if</span> stack.empty?\r\n\r\n    current_node = stack.pop\r\n    is_visited[current_node] = <span class=\"hljs-literal\">true</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> get_path(parent, target) <span class=\"hljs-keyword\">if</span> current_node == target\r\n\r\n    adjacency_list[current_node].each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|neighbor|</span>\r\n      <span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">if</span> is_visited[neighbor]\r\n\r\n      stack &lt;&lt; neighbor\r\n      is_visited[neighbor] = <span class=\"hljs-literal\">true</span>\r\n      parent[neighbor] = current_node\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n  []\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> [Hash] parent</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> [Integer] dest</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> [Array] path</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_path</span><span class=\"hljs-params\">(parent, dest)</span></span>\r\n  iterator = dest\r\n  path = [dest]\r\n  <span class=\"hljs-keyword\">while</span> parent.has_key?(iterator)\r\n    path &lt;&lt; parent[iterator]\r\n    iterator = parent[iterator]\r\n  <span class=\"hljs-keyword\">end</span>\r\n  path.reverse\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span></span>\r\n  adjacency_list = [\r\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-comment\"># 0</span>\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-comment\"># 1</span>\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-comment\"># 2</span>\r\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-comment\"># 3</span>\r\n    [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-comment\"># 4</span>\r\n    [<span class=\"hljs-number\">4</span>] <span class=\"hljs-comment\"># 5</span>\r\n  ]\r\n  p dfs(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, adjacency_list)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nmain\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Graph/DepthFirstSearch.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Graph\\DepthFirstSearch.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> DataStructures.Graph;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Graph</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Depth First Search - algorithm for traversing graph.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Algorithm starts from root node that is selected by the user.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Algorithm explores as far as possible along each branch before backtracking.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Vertex data type.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DepthFirstSearch</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IGraphSearch</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">IComparable</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Traverses graph from start vertex.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;graph&quot;&gt;</span>Graph instance.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;startVertex&quot;&gt;</span>Vertex that search starts from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;action&quot;&gt;</span>Action that needs to be executed on each graph vertex.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">VisitAll</span>(<span class=\"hljs-params\">IDirectedWeightedGraph&lt;T&gt; graph, Vertex&lt;T&gt; startVertex, Action&lt;Vertex&lt;T&gt;&gt;? action = <span class=\"hljs-literal\">default</span></span>)</span>\r\n        {\r\n            Dfs(graph, startVertex, action, <span class=\"hljs-keyword\">new</span> HashSet&lt;Vertex&lt;T&gt;&gt;());\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Traverses graph from start vertex.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;graph&quot;&gt;</span>Graph instance.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;startVertex&quot;&gt;</span>Vertex that search starts from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;action&quot;&gt;</span>Action that needs to be executed on each graph vertex.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;visited&quot;&gt;</span>Hash set with visited vertices.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Dfs</span>(<span class=\"hljs-params\">IDirectedWeightedGraph&lt;T&gt; graph, Vertex&lt;T&gt; startVertex, Action&lt;Vertex&lt;T&gt;&gt;? action, HashSet&lt;Vertex&lt;T&gt;&gt; visited</span>)</span>\r\n        {\r\n            action?.Invoke(startVertex);\r\n\r\n            visited.Add(startVertex);\r\n\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> vertex <span class=\"hljs-keyword\">in</span> graph.GetNeighbors(startVertex))\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (vertex == <span class=\"hljs-literal\">null</span> || visited.Contains(vertex))\r\n                {\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                Dfs(graph, vertex!, action, visited);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "scturtle",
      "email": "scturtle@gmail.com",
      "commits": 1
    },
    {
      "name": "Matheus Muriel",
      "email": "matheus.muriel@outlook.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "BohdanLev",
      "email": "43375672+BohdanLev@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dandy Naufaldi",
      "email": "dandy.naufaldi@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Metta Ong",
      "email": "ongspxm@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "caos321",
      "email": "36530240+caos321@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 1
    },
    {
      "name": "Marcos Cannabrava",
      "email": "54267712+marcoscannabrava@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "rxaru",
      "email": "ai.kanaria.ai@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}