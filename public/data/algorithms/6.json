{
  "slug": "6",
  "name": "6",
  "categories": [
    "leetcode"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "leetcode\\src\\6.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/leetcode\\src\\6.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of the [ZigZag\r\n * Conversion](https://leetcode.com/problems/zigzag-conversion/) Leetcode\r\n * problem\r\n * @details\r\n * A decent solution to the ZigZag conversion problem.\r\n * Take advantage of the fact that the maximum gap between the chars is 2 times\r\n * the depth(the number of rows).\r\n * The actual gap between the two first chars of a rows depends on the depth of\r\n * the row. The gaps between successives chars on the same row is the complement\r\n * of the first gap to the maximum gap.\r\n * @author [straight_into_the_wall](https://github.com/straight-into-the-wall)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>  <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span>  <span class=\"hljs-comment\">/// for unsigned int with fixed size</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>  <span class=\"hljs-comment\">/// for malloc</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span>  <span class=\"hljs-comment\">/// for string tools</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Convert a string to the it&#x27;s zigzag equivalent on a given number of\r\n * rows.\r\n * @param in the string in input.\r\n * @param numRows the desired number of rows.\r\n * @returns the converted new (malloced) string.\r\n */</span>\r\n<span class=\"hljs-type\">char</span>* <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* in, <span class=\"hljs-type\">uint16_t</span> numRows)</span>\r\n{\r\n    <span class=\"hljs-type\">uint16_t</span> len = <span class=\"hljs-built_in\">strlen</span>(in);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (len &lt; numRows)\r\n    {\r\n        numRows = len;\r\n    }\r\n    <span class=\"hljs-type\">char</span>* out = <span class=\"hljs-built_in\">calloc</span>(len + <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));\r\n\r\n    <span class=\"hljs-keyword\">if</span> (numRows &lt; <span class=\"hljs-number\">2</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">memcpy</span>(out, in, len + <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-keyword\">return</span> out;\r\n    }\r\n\r\n    <span class=\"hljs-type\">uint16_t</span> max = numRows - <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-type\">uint16_t</span> rr = <span class=\"hljs-number\">2</span> * max;\r\n    <span class=\"hljs-type\">uint16_t</span> i = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">uint16_t</span> o = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">uint16_t</span> delta = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// first row</span>\r\n    <span class=\"hljs-keyword\">while</span> (i &lt; len)\r\n    {\r\n        out[o++] = in[i];\r\n        i += rr;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// middle rows</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint16_t</span> l = <span class=\"hljs-number\">1</span>; l &lt; max; l++)\r\n    {\r\n        i = l;\r\n        delta = <span class=\"hljs-number\">2</span> * l;\r\n        <span class=\"hljs-keyword\">while</span> (i &lt; len)\r\n        {\r\n            out[o++] = in[i];\r\n            delta = rr - delta;\r\n            i += delta;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// last row</span>\r\n    i = max;\r\n    <span class=\"hljs-keyword\">while</span> (i &lt; len)\r\n    {\r\n        out[o++] = in[i];\r\n        i += rr;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> out;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">testZigZag</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* s, <span class=\"hljs-type\">int</span> numRows, <span class=\"hljs-type\">char</span>* expected)</span>\r\n{\r\n    <span class=\"hljs-type\">char</span>* ret = convert(s, numRows);\r\n    <span class=\"hljs-type\">int</span> len = <span class=\"hljs-built_in\">strlen</span>(s);\r\n    <span class=\"hljs-type\">int</span> cmp = <span class=\"hljs-built_in\">strncmp</span>(ret, expected, len);\r\n    assert(!cmp);\r\n\r\n    <span class=\"hljs-built_in\">free</span>(ret);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">char</span>* s01 = <span class=\"hljs-string\">&quot;PAYPALISHIRING&quot;</span>;\r\n\r\n    <span class=\"hljs-type\">char</span>* r01 = <span class=\"hljs-string\">&quot;PINALSIGYAHRPI&quot;</span>;\r\n    testZigZag(s01, <span class=\"hljs-number\">4</span>, r01);\r\n\r\n    <span class=\"hljs-type\">char</span>* r02 = <span class=\"hljs-string\">&quot;PAHNAPLSIIGYIR&quot;</span>;\r\n    testZigZag(s01, <span class=\"hljs-number\">3</span>, r02);\r\n\r\n    <span class=\"hljs-type\">char</span>* s03 = <span class=\"hljs-string\">&quot;A&quot;</span>;\r\n    testZigZag(s03, <span class=\"hljs-number\">1</span>, s03);\r\n    testZigZag(s03, <span class=\"hljs-number\">3</span>, s03);\r\n\r\n    <span class=\"hljs-type\">char</span>* s04 =\r\n        <span class=\"hljs-string\">&quot;cbxdwjccgtdoqiscyspqzvuqivzptlpvooynyapgvswoaosaghrffnxnjyeeltzaiznicc&quot;</span>\r\n        <span class=\"hljs-string\">&quot;ozwknwyhzgpqlwfkjqipuu&quot;</span>\r\n        <span class=\"hljs-string\">&quot;jvwtxlbznryjdohbvghmyuiggtyqjtmuqinntqmihntkddnalwnmsxsatqqeldacnnpjfe&quot;</span>\r\n        <span class=\"hljs-string\">&quot;rmrnyuqnwbjjpdjhdeavkn&quot;</span>\r\n        <span class=\"hljs-string\">&quot;ykpoxhxclqqedqavdwzoiorrwwxyrhlsrdgqkduvtmzzczufvtvfioygkvedervvudnegh&quot;</span>\r\n        <span class=\"hljs-string\">&quot;bctcbxdxezrzgbpfhzanff&quot;</span>\r\n        <span class=\"hljs-string\">&quot;eccbgqfmzjqtlrsppxqiywjobspefujlxnmddurddiyobqfspvcoulcvdrzkmkwlyiqdch&quot;</span>\r\n        <span class=\"hljs-string\">&quot;ghrgytzdnobqcvdeqjystm&quot;</span>\r\n        <span class=\"hljs-string\">&quot;epxcaniewqmoxkjwpymqorluxedvywhcoghotpusfgiestckrpaigocfufbubiyrrffmwa&quot;</span>\r\n        <span class=\"hljs-string\">&quot;eeimidfnnzcphkflpbqsvt&quot;</span>\r\n        <span class=\"hljs-string\">&quot;dwludsgaungfzoihbxifoprwcjzsdxngtacw&quot;</span>;\r\n\r\n    <span class=\"hljs-type\">char</span>* r04 =\r\n        <span class=\"hljs-string\">&quot;cbxdwjccgtdoqiscyspqzvuqivzptlpvooynyapgvswoaosaghrffnxnjyeeltzaiznicc&quot;</span>\r\n        <span class=\"hljs-string\">&quot;ozwknwyhzgpqlwfkjqipuu&quot;</span>\r\n        <span class=\"hljs-string\">&quot;jvwtxlbznryjdohbvghmyuiggtyqjtmuqinntqmihntkddnalwnmsxsatqqeldacnnpjfe&quot;</span>\r\n        <span class=\"hljs-string\">&quot;rmrnyuqnwbjjpdjhdeavkn&quot;</span>\r\n        <span class=\"hljs-string\">&quot;ykpoxhxclqqedqavdwzoiorrwwxyrhlsrdgqkduvtmzzczufvtvfioygkvedervvudnegh&quot;</span>\r\n        <span class=\"hljs-string\">&quot;bctcbxdxezrzgbpfhzanff&quot;</span>\r\n        <span class=\"hljs-string\">&quot;eccbgqfmzjqtlrsppxqiywjobspefujlxnmddurddiyobqfspvcoulcvdrzkmkwlyiqdch&quot;</span>\r\n        <span class=\"hljs-string\">&quot;ghrgytzdnobqcvdeqjystm&quot;</span>\r\n        <span class=\"hljs-string\">&quot;epxcaniewqmoxkjwpymqorluxedvywhcoghotpusfgiestckrpaigocfufbubiyrrffmwa&quot;</span>\r\n        <span class=\"hljs-string\">&quot;eeimidfnnzwccpahtkgfnl&quot;</span>\r\n        <span class=\"hljs-string\">&quot;xpdbsqzsjvctwdrwploufdisxgbahuinogzf&quot;</span>;\r\n\r\n    testZigZag(s04, <span class=\"hljs-number\">472</span>, r04);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    test();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "straight-into-the-wall",
      "email": "92807553+straight-into-the-wall@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}