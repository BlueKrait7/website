{
  "slug": "double-factorial",
  "name": "Double Factorial",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\double_factorial.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\double_factorial.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Compute [double\r\n * factorial](https://en.wikipedia.org/wiki/Double_factorial): \\f$n!!\\f$\r\n *\r\n * Double factorial of a non-negative integer `n`, is defined as the product of\r\n * all the integers from 1 to n that have the same parity (odd or even) as n.\r\n * &lt;br/&gt;It is also called as semifactorial of a number and is denoted by\r\n * \\f$n!!\\f$\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** Compute double factorial using iterative method\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">double_factorial_iterative</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> res = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = n;; i -= <span class=\"hljs-number\">2</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || i == <span class=\"hljs-number\">1</span>)\r\n            <span class=\"hljs-keyword\">return</span> res;\r\n        res *= i;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> res;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Compute double factorial using resursive method.\r\n * &lt;br/&gt;Recursion can be costly for large numbers.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">double_factorial_recursive</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">return</span> n * <span class=\"hljs-built_in\">double_factorial_recursive</span>(n - <span class=\"hljs-number\">2</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Wrapper to run tests using both recursive and iterative implementations.\r\n * The checks are only valid in debug builds due to the use of `assert()`\r\n * statements.\r\n * \\param [in] n number to check double factorial for\r\n * \\param [in] expected expected result\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n, <span class=\"hljs-type\">uint64_t</span> expected)</span> </span>{\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">double_factorial_iterative</span>(n) == expected);\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">double_factorial_recursive</span>(n) == expected);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test implementations\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1:\\t n=5\\t...&quot;</span>;\r\n    <span class=\"hljs-built_in\">test</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">15</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2:\\t n=15\\t...&quot;</span>;\r\n    <span class=\"hljs-built_in\">test</span>(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">2027025</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3:\\t n=0\\t...&quot;</span>;\r\n    <span class=\"hljs-built_in\">test</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">tests</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}