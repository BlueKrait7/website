{
  "slug": "graham-scan-algorithm",
  "name": "Graham Scan Algorithm",
  "categories": [
    "geometry"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "geometry\\graham_scan_algorithm.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/geometry\\graham_scan_algorithm.cpp",
      "code": "<span class=\"hljs-comment\">/******************************************************************************\r\n * @file\r\n * @brief Implementation of the [Convex\r\n * Hull](https://en.wikipedia.org/wiki/Convex_hull) implementation using [Graham\r\n * Scan](https://en.wikipedia.org/wiki/Graham_scan)\r\n * @details\r\n * In geometry, the convex hull or convex envelope or convex closure of a shape\r\n * is the smallest convex set that contains it. The convex hull may be defined\r\n * either as the intersection of all convex sets containing a given subset of a\r\n * Euclidean space, or equivalently as the set of all convex combinations of\r\n * points in the subset. For a bounded subset of the plane, the convex hull may\r\n * be visualized as the shape enclosed by a rubber band stretched around the\r\n * subset.\r\n *\r\n * The worst case time complexity of Jarvis’s Algorithm is O(n^2). Using\r\n * Graham’s scan algorithm, we can find Convex Hull in O(nLogn) time.\r\n *\r\n * ### Implementation\r\n *\r\n * Sort points\r\n * We first find the bottom-most point. The idea is to pre-process\r\n * points be sorting them with respect to the bottom-most point. Once the points\r\n * are sorted, they form a simple closed path.\r\n * The sorting criteria is to use the orientation to compare angles without\r\n * actually computing them (See the compare() function below) because\r\n * computation of actual angles would be inefficient since trigonometric\r\n * functions are not simple to evaluate.\r\n *\r\n * Accept or Reject Points\r\n * Once we have the closed path, the next step is to traverse the path and\r\n * remove concave points on this path using orientation. The first two points in\r\n * sorted array are always part of Convex Hull. For remaining points, we keep\r\n * track of recent three points, and find the angle formed by them. Let the\r\n * three points be prev(p), curr(c) and next(n). If the orientation of these\r\n * points (considering them in the same order) is not counterclockwise, we\r\n * discard c, otherwise we keep it.\r\n *\r\n * @author [Lajat Manekar](https://github.com/Lazeeez)\r\n *\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for std::assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO Operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;./graham_scan_functions.hpp&quot;</span>  <span class=\"hljs-comment\">/// for all the functions used</span></span>\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Self-test implementations\r\n * @returns void\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::vector&lt;geometry::grahamscan::Point&gt; points = {\r\n        {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>}, {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>}, {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>}};\r\n    std::vector&lt;geometry::grahamscan::Point&gt; expected_result = {\r\n        {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>}, {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}};\r\n    std::vector&lt;geometry::grahamscan::Point&gt; derived_result;\r\n    std::vector&lt;geometry::grahamscan::Point&gt; res;\r\n\r\n    derived_result = geometry::grahamscan::<span class=\"hljs-built_in\">convexHull</span>(points, points.<span class=\"hljs-built_in\">size</span>());\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test: &quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; expected_result.<span class=\"hljs-built_in\">size</span>(); i++) {\r\n        <span class=\"hljs-built_in\">assert</span>(derived_result[i].x == expected_result[i].x);\r\n        <span class=\"hljs-built_in\">assert</span>(derived_result[i].y == expected_result[i].y);\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed!&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Main function\r\n * @returns 0 on exit\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}