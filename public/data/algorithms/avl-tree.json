{
  "slug": "avl-tree",
  "name": "AVL Tree",
  "categories": [
    "datastructures",
    "binarytree"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\binary_tree\\avl_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\binary_tree\\avl_tree.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nImplementation of an auto-balanced binary tree!\r\nFor doctests run following command:\r\npython3 -m doctest -v avl_tree.py\r\nFor testing run:\r\npython avl_tree.py\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n<span class=\"hljs-keyword\">import</span> random\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">my_queue</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.data: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-type\">Any</span>] = []\r\n        self.head: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\r\n        self.tail: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-keyword\">return</span> self.head == self.tail\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.data.append(data)\r\n        self.tail = self.tail + <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\r\n        ret = self.data[self.head]\r\n        self.head = self.head + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> ret\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">count</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-keyword\">return</span> self.tail - self.head\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">print</span>(self.data)\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;**************&quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>(self.data[self.head : self.tail])\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">my_node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.data = data\r\n        self.left: my_node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.right: my_node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.height: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_data</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\r\n        <span class=\"hljs-keyword\">return</span> self.data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_left</span>(<span class=\"hljs-params\">self</span>) -&gt; my_node | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">return</span> self.left\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_right</span>(<span class=\"hljs-params\">self</span>) -&gt; my_node | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">return</span> self.right\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_height</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-keyword\">return</span> self.height\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_data</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.data = data\r\n        <span class=\"hljs-keyword\">return</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_left</span>(<span class=\"hljs-params\">self, node: my_node | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.left = node\r\n        <span class=\"hljs-keyword\">return</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_right</span>(<span class=\"hljs-params\">self, node: my_node | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.right = node\r\n        <span class=\"hljs-keyword\">return</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_height</span>(<span class=\"hljs-params\">self, height: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.height = height\r\n        <span class=\"hljs-keyword\">return</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_height</span>(<span class=\"hljs-params\">node: my_node | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">return</span> node.get_height()\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">my_max</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-keyword\">if</span> a &gt; b:\r\n        <span class=\"hljs-keyword\">return</span> a\r\n    <span class=\"hljs-keyword\">return</span> b\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">right_rotation</span>(<span class=\"hljs-params\">node: my_node</span>) -&gt; my_node:\r\n    <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n            A                      B\r\n           / \\                    / \\\r\n          B   C                  Bl  A\r\n         / \\       --&gt;          /   / \\\r\n        Bl  Br                 UB Br  C\r\n       /\r\n     UB\r\n    UB = unbalanced node\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;left rotation node:&quot;</span>, node.get_data())\r\n    ret = node.get_left()\r\n    <span class=\"hljs-keyword\">assert</span> ret <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n    node.set_left(ret.get_right())\r\n    ret.set_right(node)\r\n    h1 = my_max(get_height(node.get_right()), get_height(node.get_left())) + <span class=\"hljs-number\">1</span>\r\n    node.set_height(h1)\r\n    h2 = my_max(get_height(ret.get_right()), get_height(ret.get_left())) + <span class=\"hljs-number\">1</span>\r\n    ret.set_height(h2)\r\n    <span class=\"hljs-keyword\">return</span> ret\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">left_rotation</span>(<span class=\"hljs-params\">node: my_node</span>) -&gt; my_node:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    a mirror symmetry rotation of the left_rotation\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;right rotation node:&quot;</span>, node.get_data())\r\n    ret = node.get_right()\r\n    <span class=\"hljs-keyword\">assert</span> ret <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n    node.set_right(ret.get_left())\r\n    ret.set_left(node)\r\n    h1 = my_max(get_height(node.get_right()), get_height(node.get_left())) + <span class=\"hljs-number\">1</span>\r\n    node.set_height(h1)\r\n    h2 = my_max(get_height(ret.get_right()), get_height(ret.get_left())) + <span class=\"hljs-number\">1</span>\r\n    ret.set_height(h2)\r\n    <span class=\"hljs-keyword\">return</span> ret\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lr_rotation</span>(<span class=\"hljs-params\">node: my_node</span>) -&gt; my_node:\r\n    <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n            A              A                    Br\r\n           / \\            / \\                  /  \\\r\n          B   C    LR    Br  C       RR       B    A\r\n         / \\       --&gt;  /  \\         --&gt;    /     / \\\r\n        Bl  Br         B   UB              Bl    UB  C\r\n             \\        /\r\n             UB     Bl\r\n    RR = right_rotation   LR = left_rotation\r\n    &quot;&quot;&quot;</span>\r\n    left_child = node.get_left()\r\n    <span class=\"hljs-keyword\">assert</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n    node.set_left(left_rotation(left_child))\r\n    <span class=\"hljs-keyword\">return</span> right_rotation(node)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rl_rotation</span>(<span class=\"hljs-params\">node: my_node</span>) -&gt; my_node:\r\n    right_child = node.get_right()\r\n    <span class=\"hljs-keyword\">assert</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n    node.set_right(right_rotation(right_child))\r\n    <span class=\"hljs-keyword\">return</span> left_rotation(node)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_node</span>(<span class=\"hljs-params\">node: my_node | <span class=\"hljs-literal\">None</span>, data: <span class=\"hljs-type\">Any</span></span>) -&gt; my_node | <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">return</span> my_node(data)\r\n    <span class=\"hljs-keyword\">if</span> data &lt; node.get_data():\r\n        node.set_left(insert_node(node.get_left(), data))\r\n        <span class=\"hljs-keyword\">if</span> (\r\n            get_height(node.get_left()) - get_height(node.get_right()) == <span class=\"hljs-number\">2</span>\r\n        ):  <span class=\"hljs-comment\"># an unbalance detected</span>\r\n            left_child = node.get_left()\r\n            <span class=\"hljs-keyword\">assert</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">if</span> (\r\n                data &lt; left_child.get_data()\r\n            ):  <span class=\"hljs-comment\"># new node is the left child of the left child</span>\r\n                node = right_rotation(node)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                node = lr_rotation(node)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        node.set_right(insert_node(node.get_right(), data))\r\n        <span class=\"hljs-keyword\">if</span> get_height(node.get_right()) - get_height(node.get_left()) == <span class=\"hljs-number\">2</span>:\r\n            right_child = node.get_right()\r\n            <span class=\"hljs-keyword\">assert</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">if</span> data &lt; right_child.get_data():\r\n                node = rl_rotation(node)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                node = left_rotation(node)\r\n    h1 = my_max(get_height(node.get_right()), get_height(node.get_left())) + <span class=\"hljs-number\">1</span>\r\n    node.set_height(h1)\r\n    <span class=\"hljs-keyword\">return</span> node\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_rightMost</span>(<span class=\"hljs-params\">root: my_node</span>) -&gt; <span class=\"hljs-type\">Any</span>:\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n        right_child = root.get_right()\r\n        <span class=\"hljs-keyword\">if</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">break</span>\r\n        root = right_child\r\n    <span class=\"hljs-keyword\">return</span> root.get_data()\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_leftMost</span>(<span class=\"hljs-params\">root: my_node</span>) -&gt; <span class=\"hljs-type\">Any</span>:\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n        left_child = root.get_left()\r\n        <span class=\"hljs-keyword\">if</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">break</span>\r\n        root = left_child\r\n    <span class=\"hljs-keyword\">return</span> root.get_data()\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">del_node</span>(<span class=\"hljs-params\">root: my_node, data: <span class=\"hljs-type\">Any</span></span>) -&gt; my_node | <span class=\"hljs-literal\">None</span>:\r\n    left_child = root.get_left()\r\n    right_child = root.get_right()\r\n    <span class=\"hljs-keyword\">if</span> root.get_data() == data:\r\n        <span class=\"hljs-keyword\">if</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            temp_data = get_leftMost(right_child)\r\n            root.set_data(temp_data)\r\n            root.set_right(del_node(right_child, temp_data))\r\n        <span class=\"hljs-keyword\">elif</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            root = left_child\r\n        <span class=\"hljs-keyword\">elif</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            root = right_child\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n    <span class=\"hljs-keyword\">elif</span> root.get_data() &gt; data:\r\n        <span class=\"hljs-keyword\">if</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;No such data&quot;</span>)\r\n            <span class=\"hljs-keyword\">return</span> root\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            root.set_left(del_node(left_child, data))\r\n    <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># root.get_data() &lt; data</span>\r\n        <span class=\"hljs-keyword\">if</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> root\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            root.set_right(del_node(right_child, data))\r\n\r\n    <span class=\"hljs-keyword\">if</span> get_height(right_child) - get_height(left_child) == <span class=\"hljs-number\">2</span>:\r\n        <span class=\"hljs-keyword\">assert</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">if</span> get_height(right_child.get_right()) &gt; get_height(right_child.get_left()):\r\n            root = left_rotation(root)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            root = rl_rotation(root)\r\n    <span class=\"hljs-keyword\">elif</span> get_height(right_child) - get_height(left_child) == -<span class=\"hljs-number\">2</span>:\r\n        <span class=\"hljs-keyword\">assert</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">if</span> get_height(left_child.get_left()) &gt; get_height(left_child.get_right()):\r\n            root = right_rotation(root)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            root = lr_rotation(root)\r\n    height = my_max(get_height(root.get_right()), get_height(root.get_left())) + <span class=\"hljs-number\">1</span>\r\n    root.set_height(height)\r\n    <span class=\"hljs-keyword\">return</span> root\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AVLtree</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    An AVL tree doctest\r\n    Examples:\r\n    &gt;&gt;&gt; t = AVLtree()\r\n    &gt;&gt;&gt; t.insert(4)\r\n    insert:4\r\n    &gt;&gt;&gt; print(str(t).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;))\r\n     4\r\n    *************************************\r\n    &gt;&gt;&gt; t.insert(2)\r\n    insert:2\r\n    &gt;&gt;&gt; print(str(t).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;))\r\n      4\r\n     2  *\r\n    *************************************\r\n    &gt;&gt;&gt; t.insert(3)\r\n    insert:3\r\n    right rotation node: 2\r\n    left rotation node: 4\r\n    &gt;&gt;&gt; print(str(t).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;))\r\n      3\r\n     2  4\r\n    *************************************\r\n    &gt;&gt;&gt; t.get_height()\r\n    2\r\n    &gt;&gt;&gt; t.del_node(3)\r\n    delete:3\r\n    &gt;&gt;&gt; print(str(t).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;).replace(&quot; \\\\n&quot;,&quot;\\\\n&quot;))\r\n      4\r\n     2  *\r\n    *************************************\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.root: my_node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_height</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-keyword\">return</span> get_height(self.root)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;insert:&quot;</span> + <span class=\"hljs-built_in\">str</span>(data))\r\n        self.root = insert_node(self.root, data)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">del_node</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;delete:&quot;</span> + <span class=\"hljs-built_in\">str</span>(data))\r\n        <span class=\"hljs-keyword\">if</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Tree is empty!&quot;</span>)\r\n            <span class=\"hljs-keyword\">return</span>\r\n        self.root = del_node(self.root, data)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">\r\n        self,\r\n    </span>) -&gt; <span class=\"hljs-built_in\">str</span>:  <span class=\"hljs-comment\"># a level traversale, gives a more intuitive look on the tree</span>\r\n        output = <span class=\"hljs-string\">&quot;&quot;</span>\r\n        q = my_queue()\r\n        q.push(self.root)\r\n        layer = self.get_height()\r\n        <span class=\"hljs-keyword\">if</span> layer == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">return</span> output\r\n        cnt = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> q.is_empty():\r\n            node = q.pop()\r\n            space = <span class=\"hljs-string\">&quot; &quot;</span> * <span class=\"hljs-built_in\">int</span>(math.<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, layer - <span class=\"hljs-number\">1</span>))\r\n            output += space\r\n            <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                output += <span class=\"hljs-string\">&quot;*&quot;</span>\r\n                q.push(<span class=\"hljs-literal\">None</span>)\r\n                q.push(<span class=\"hljs-literal\">None</span>)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                output += <span class=\"hljs-built_in\">str</span>(node.get_data())\r\n                q.push(node.get_left())\r\n                q.push(node.get_right())\r\n            output += space\r\n            cnt = cnt + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">100</span>):\r\n                <span class=\"hljs-keyword\">if</span> cnt == math.<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, i) - <span class=\"hljs-number\">1</span>:\r\n                    layer = layer - <span class=\"hljs-number\">1</span>\r\n                    <span class=\"hljs-keyword\">if</span> layer == <span class=\"hljs-number\">0</span>:\r\n                        output += <span class=\"hljs-string\">&quot;\\n*************************************&quot;</span>\r\n                        <span class=\"hljs-keyword\">return</span> output\r\n                    output += <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n                    <span class=\"hljs-keyword\">break</span>\r\n        output += <span class=\"hljs-string\">&quot;\\n*************************************&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> output\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_test</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    _test()\r\n    t = AVLtree()\r\n    lst = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>))\r\n    random.shuffle(lst)\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> lst:\r\n        t.insert(i)\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(t))\r\n    random.shuffle(lst)\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> lst:\r\n        t.del_node(i)\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(t))\r\n"
    },
    "javascript": {
      "dir": "Data-Structures\\Tree\\test\\AVLTree.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures\\Tree\\test\\AVLTree.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AVLTree</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../AVLTree&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;AVLTree Implementation: &#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> avlTree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AVLTree</span>()\r\n  <span class=\"hljs-keyword\">const</span> dataList = []\r\n  <span class=\"hljs-keyword\">const</span> demoData = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">66</span>, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">98</span>]\r\n\r\n  <span class=\"hljs-title function_\">beforeAll</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n    demoData.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\r\n      <span class=\"hljs-keyword\">if</span> (avlTree.<span class=\"hljs-title function_\">add</span>(item)) {\r\n        dataList.<span class=\"hljs-title function_\">push</span>(item)\r\n      }\r\n    })\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;checks if element is inserted properly&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(dataList.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toEqual</span>(avlTree.<span class=\"hljs-property\">size</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;search if inserted element is present&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    demoData.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(avlTree.<span class=\"hljs-title function_\">find</span>(data)).<span class=\"hljs-title function_\">toBeTruthy</span>()\r\n    })\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;deletes the inserted element&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> deleteElement = dataList[<span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-title function_\">expect</span>(avlTree.<span class=\"hljs-title function_\">remove</span>(deleteElement)).<span class=\"hljs-title function_\">toBeTruthy</span>()\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "data_structures\\avltree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures\\avltree.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\brief A simple tree implementation using nodes\r\n *\r\n * \\todo update code to use C++ STL library features and OO structure\r\n * \\warning This program is a poor implementation and does not utilize any of\r\n * the C++ STL features.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\r\n    <span class=\"hljs-type\">int</span> data;\r\n    <span class=\"hljs-type\">int</span> height;\r\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> *left;\r\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> *right;\r\n} node;\r\n\r\n<span class=\"hljs-comment\">/** Create and return a new Node */</span>\r\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> </span>{\r\n    node *nn = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">node</span>();\r\n    nn-&gt;data = data;\r\n    nn-&gt;height = <span class=\"hljs-number\">0</span>;\r\n    nn-&gt;left = <span class=\"hljs-literal\">NULL</span>;\r\n    nn-&gt;right = <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-keyword\">return</span> nn;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Returns height of tree */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">height</span><span class=\"hljs-params\">(node *root)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + std::<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">height</span>(root-&gt;left), <span class=\"hljs-built_in\">height</span>(root-&gt;right));\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Returns difference between height of left and right subtree */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getBalance</span><span class=\"hljs-params\">(node *root)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">height</span>(root-&gt;left) - <span class=\"hljs-built_in\">height</span>(root-&gt;right); }\r\n\r\n<span class=\"hljs-comment\">/** Returns Node after Right Rotation */</span>\r\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">rightRotate</span><span class=\"hljs-params\">(node *root)</span> </span>{\r\n    node *t = root-&gt;left;\r\n    node *u = t-&gt;right;\r\n    t-&gt;right = root;\r\n    root-&gt;left = u;\r\n    <span class=\"hljs-keyword\">return</span> t;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Returns Node after Left Rotation */</span>\r\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">leftRotate</span><span class=\"hljs-params\">(node *root)</span> </span>{\r\n    node *t = root-&gt;right;\r\n    node *u = t-&gt;left;\r\n    t-&gt;left = root;\r\n    root-&gt;right = u;\r\n    <span class=\"hljs-keyword\">return</span> t;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Returns node with minimum value in the tree */</span>\r\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">minValue</span><span class=\"hljs-params\">(node *root)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (root-&gt;left == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> root;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">minValue</span>(root-&gt;left);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Balanced Insertion */</span>\r\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(node *root, <span class=\"hljs-type\">int</span> item)</span> </span>{\r\n    node *nn = <span class=\"hljs-built_in\">createNode</span>(item);\r\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> nn;\r\n    <span class=\"hljs-keyword\">if</span> (item &lt; root-&gt;data)\r\n        root-&gt;left = <span class=\"hljs-built_in\">insert</span>(root-&gt;left, item);\r\n    <span class=\"hljs-keyword\">else</span>\r\n        root-&gt;right = <span class=\"hljs-built_in\">insert</span>(root-&gt;right, item);\r\n    <span class=\"hljs-type\">int</span> b = <span class=\"hljs-built_in\">getBalance</span>(root);\r\n    <span class=\"hljs-keyword\">if</span> (b &gt; <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">getBalance</span>(root-&gt;left) &lt; <span class=\"hljs-number\">0</span>)\r\n            root-&gt;left = <span class=\"hljs-built_in\">leftRotate</span>(root-&gt;left);  <span class=\"hljs-comment\">// Left-Right Case</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">rightRotate</span>(root);                 <span class=\"hljs-comment\">// Left-Left Case</span>\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (b &lt; <span class=\"hljs-number\">-1</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">getBalance</span>(root-&gt;right) &gt; <span class=\"hljs-number\">0</span>)\r\n            root-&gt;right = <span class=\"hljs-built_in\">rightRotate</span>(root-&gt;right);  <span class=\"hljs-comment\">// Right-Left Case</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">leftRotate</span>(root);                     <span class=\"hljs-comment\">// Right-Right Case</span>\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> root;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Balanced Deletion */</span>\r\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">deleteNode</span><span class=\"hljs-params\">(node *root, <span class=\"hljs-type\">int</span> key)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> root;\r\n    <span class=\"hljs-keyword\">if</span> (key &lt; root-&gt;data)\r\n        root-&gt;left = <span class=\"hljs-built_in\">deleteNode</span>(root-&gt;left, key);\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &gt; root-&gt;data)\r\n        root-&gt;right = <span class=\"hljs-built_in\">deleteNode</span>(root-&gt;right, key);\r\n\r\n    <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-comment\">// Node to be deleted is leaf node or have only one Child</span>\r\n        <span class=\"hljs-keyword\">if</span> (!root-&gt;right) {\r\n            node *temp = root-&gt;left;\r\n            <span class=\"hljs-built_in\">delete</span> (root);\r\n            root = <span class=\"hljs-literal\">NULL</span>;\r\n            <span class=\"hljs-keyword\">return</span> temp;\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!root-&gt;left) {\r\n            node *temp = root-&gt;right;\r\n            <span class=\"hljs-built_in\">delete</span> (root);\r\n            root = <span class=\"hljs-literal\">NULL</span>;\r\n            <span class=\"hljs-keyword\">return</span> temp;\r\n        }\r\n        <span class=\"hljs-comment\">// Node to be deleted have both left and right subtrees</span>\r\n        node *temp = <span class=\"hljs-built_in\">minValue</span>(root-&gt;right);\r\n        root-&gt;data = temp-&gt;data;\r\n        root-&gt;right = <span class=\"hljs-built_in\">deleteNode</span>(root-&gt;right, temp-&gt;data);\r\n    }\r\n    <span class=\"hljs-comment\">// Balancing Tree after deletion</span>\r\n    <span class=\"hljs-keyword\">return</span> root;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** LevelOrder (Breadth First Search) */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">levelOrder</span><span class=\"hljs-params\">(node *root)</span> </span>{\r\n    std::queue&lt;node *&gt; q;\r\n    q.<span class=\"hljs-built_in\">push</span>(root);\r\n    <span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>()) {\r\n        root = q.<span class=\"hljs-built_in\">front</span>();\r\n        std::cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n        q.<span class=\"hljs-built_in\">pop</span>();\r\n        <span class=\"hljs-keyword\">if</span> (root-&gt;left)\r\n            q.<span class=\"hljs-built_in\">push</span>(root-&gt;left);\r\n        <span class=\"hljs-keyword\">if</span> (root-&gt;right)\r\n            q.<span class=\"hljs-built_in\">push</span>(root-&gt;right);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Testing AVL Tree</span>\r\n    node *root = <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">7</span>; i++) root = <span class=\"hljs-built_in\">insert</span>(root, i);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;LevelOrder: &quot;</span>;\r\n    <span class=\"hljs-built_in\">levelOrder</span>(root);\r\n    root = <span class=\"hljs-built_in\">deleteNode</span>(root, <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// Deleting key with value 1</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nLevelOrder: &quot;</span>;\r\n    <span class=\"hljs-built_in\">levelOrder</span>(root);\r\n    root = <span class=\"hljs-built_in\">deleteNode</span>(root, <span class=\"hljs-number\">4</span>);  <span class=\"hljs-comment\">// Deletin key with value 4</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nLevelOrder: &quot;</span>;\r\n    <span class=\"hljs-built_in\">levelOrder</span>(root);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\AVLTree.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\AVLTree.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AVLTree</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> Node root;\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> key;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> balance;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> height;\r\n        <span class=\"hljs-keyword\">private</span> Node left, right, parent;\r\n\r\n        Node(<span class=\"hljs-type\">int</span> k, Node p) {\r\n            key = k;\r\n            parent = p;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) {\r\n            root = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, <span class=\"hljs-literal\">null</span>);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> root;\r\n            Node parent;\r\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\r\n                <span class=\"hljs-keyword\">if</span> (n.key == key) {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n\r\n                parent = n;\r\n\r\n                <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">goLeft</span> <span class=\"hljs-operator\">=</span> n.key &gt; key;\r\n                n = goLeft ? n.left : n.right;\r\n\r\n                <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-literal\">null</span>) {\r\n                    <span class=\"hljs-keyword\">if</span> (goLeft) {\r\n                        parent.left = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, parent);\r\n                    } <span class=\"hljs-keyword\">else</span> {\r\n                        parent.right = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, parent);\r\n                    }\r\n                    rebalance(parent);\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(Node node)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (node.left == <span class=\"hljs-literal\">null</span> &amp;&amp; node.right == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (node.parent == <span class=\"hljs-literal\">null</span>) {\r\n                root = <span class=\"hljs-literal\">null</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">parent</span> <span class=\"hljs-operator\">=</span> node.parent;\r\n                <span class=\"hljs-keyword\">if</span> (parent.left == node) {\r\n                    parent.left = <span class=\"hljs-literal\">null</span>;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    parent.right = <span class=\"hljs-literal\">null</span>;\r\n                }\r\n                rebalance(parent);\r\n            }\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (node.left != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> node.left;\r\n            <span class=\"hljs-keyword\">while</span> (child.right != <span class=\"hljs-literal\">null</span>) {\r\n                child = child.right;\r\n            }\r\n            node.key = child.key;\r\n            delete(child);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> node.right;\r\n            <span class=\"hljs-keyword\">while</span> (child.left != <span class=\"hljs-literal\">null</span>) {\r\n                child = child.left;\r\n            }\r\n            node.key = child.key;\r\n            delete(child);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> delKey)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> root;\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> root;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (child != <span class=\"hljs-literal\">null</span>) {\r\n            node = child;\r\n            child = delKey &gt;= node.key ? node.right : node.left;\r\n            <span class=\"hljs-keyword\">if</span> (delKey == node.key) {\r\n                delete(node);\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rebalance</span><span class=\"hljs-params\">(Node n)</span> {\r\n        setBalance(n);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (n.balance == -<span class=\"hljs-number\">2</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (height(n.left.left) &gt;= height(n.left.right)) {\r\n                n = rotateRight(n);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                n = rotateLeftThenRight(n);\r\n            }\r\n\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (n.balance == <span class=\"hljs-number\">2</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (height(n.right.right) &gt;= height(n.right.left)) {\r\n                n = rotateLeft(n);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                n = rotateRightThenLeft(n);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (n.parent != <span class=\"hljs-literal\">null</span>) {\r\n            rebalance(n.parent);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            root = n;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateLeft</span><span class=\"hljs-params\">(Node a)</span> {\r\n\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> a.right;\r\n        b.parent = a.parent;\r\n\r\n        a.right = b.left;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (a.right != <span class=\"hljs-literal\">null</span>) {\r\n            a.right.parent = a;\r\n        }\r\n\r\n        b.left = a;\r\n        a.parent = b;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (b.parent != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (b.parent.right == a) {\r\n                b.parent.right = b;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                b.parent.left = b;\r\n            }\r\n        }\r\n\r\n        setBalance(a, b);\r\n\r\n        <span class=\"hljs-keyword\">return</span> b;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateRight</span><span class=\"hljs-params\">(Node a)</span> {\r\n\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> a.left;\r\n        b.parent = a.parent;\r\n\r\n        a.left = b.right;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (a.left != <span class=\"hljs-literal\">null</span>) {\r\n            a.left.parent = a;\r\n        }\r\n\r\n        b.right = a;\r\n        a.parent = b;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (b.parent != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (b.parent.right == a) {\r\n                b.parent.right = b;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                b.parent.left = b;\r\n            }\r\n        }\r\n\r\n        setBalance(a, b);\r\n\r\n        <span class=\"hljs-keyword\">return</span> b;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateLeftThenRight</span><span class=\"hljs-params\">(Node n)</span> {\r\n        n.left = rotateLeft(n.left);\r\n        <span class=\"hljs-keyword\">return</span> rotateRight(n);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateRightThenLeft</span><span class=\"hljs-params\">(Node n)</span> {\r\n        n.right = rotateRight(n.right);\r\n        <span class=\"hljs-keyword\">return</span> rotateLeft(n);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">height</span><span class=\"hljs-params\">(Node n)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> n.height;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setBalance</span><span class=\"hljs-params\">(Node... nodes)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (Node n : nodes) {\r\n            reheight(n);\r\n            n.balance = height(n.right) - height(n.left);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printBalance</span><span class=\"hljs-params\">()</span> {\r\n        printBalance(root);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printBalance</span><span class=\"hljs-params\">(Node n)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">null</span>) {\r\n            printBalance(n.left);\r\n            System.out.printf(<span class=\"hljs-string\">&quot;%s &quot;</span>, n.balance);\r\n            printBalance(n.right);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reheight</span><span class=\"hljs-params\">(Node node)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">null</span>) {\r\n            node.height = <span class=\"hljs-number\">1</span> + Math.max(height(node.left), height(node.right));\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> searchHelper(<span class=\"hljs-built_in\">this</span>.root, key);\r\n        <span class=\"hljs-keyword\">if</span> (result != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">searchHelper</span><span class=\"hljs-params\">(Node root, <span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-comment\">// root is null or key is present at root</span>\r\n        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span> || root.key == key) {\r\n            <span class=\"hljs-keyword\">return</span> root;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// key is greater than root&#x27;s key</span>\r\n        <span class=\"hljs-keyword\">if</span> (root.key &gt; key) {\r\n            <span class=\"hljs-keyword\">return</span> searchHelper(root.left, key); <span class=\"hljs-comment\">// call the function on the node&#x27;s left child</span>\r\n        }\r\n        <span class=\"hljs-comment\">// key is less than root&#x27;s key then</span>\r\n        <span class=\"hljs-comment\">// call the function on the node&#x27;s right child as it is greater</span>\r\n        <span class=\"hljs-keyword\">return</span> searchHelper(root.right, key);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">AVLTree</span> <span class=\"hljs-variable\">tree</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AVLTree</span>();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Inserting values 1 to 10&quot;</span>);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\r\n            tree.insert(i);\r\n        }\r\n\r\n        System.out.print(<span class=\"hljs-string\">&quot;Printing balance: &quot;</span>);\r\n        tree.printBalance();\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "data_structures\\binary_trees\\avl_tree.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\binary_trees\\avl_tree.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AVLnode</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> key;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AVLnode</span> *<span class=\"hljs-title\">left</span>;</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AVLnode</span> *<span class=\"hljs-title\">right</span>;</span>\r\n    <span class=\"hljs-type\">int</span> height;\r\n};\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AVLnode</span> <span class=\"hljs-title\">avlNode</span>;</span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> { <span class=\"hljs-keyword\">return</span> (a &gt; b) ? a : b; }\r\n\r\navlNode *<span class=\"hljs-title function_\">newNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span>\r\n{\r\n    avlNode *node = (avlNode *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(avlNode));\r\n\r\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;!! Out of Space !!\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        node-&gt;key = key;\r\n        node-&gt;left = <span class=\"hljs-literal\">NULL</span>;\r\n        node-&gt;right = <span class=\"hljs-literal\">NULL</span>;\r\n        node-&gt;height = <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> node;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">nodeHeight</span><span class=\"hljs-params\">(avlNode *node)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> (node-&gt;height);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">heightDiff</span><span class=\"hljs-params\">(avlNode *node)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> (nodeHeight(node-&gt;left) - nodeHeight(node-&gt;right));\r\n}\r\n\r\n<span class=\"hljs-comment\">/* Returns the node with min key in the left subtree*/</span>\r\navlNode *<span class=\"hljs-title function_\">minNode</span><span class=\"hljs-params\">(avlNode *node)</span>\r\n{\r\n    avlNode *temp = node;\r\n\r\n    <span class=\"hljs-keyword\">while</span> (temp-&gt;left != <span class=\"hljs-literal\">NULL</span>) temp = temp-&gt;left;\r\n\r\n    <span class=\"hljs-keyword\">return</span> temp;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printAVL</span><span class=\"hljs-params\">(avlNode *node, <span class=\"hljs-type\">int</span> level)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        printAVL(node-&gt;right, level + <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\n&quot;</span>);\r\n\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; level; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t&quot;</span>);\r\n\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, node-&gt;key);\r\n\r\n        printAVL(node-&gt;left, level + <span class=\"hljs-number\">1</span>);\r\n    }\r\n}\r\n\r\navlNode *<span class=\"hljs-title function_\">rightRotate</span><span class=\"hljs-params\">(avlNode *z)</span>\r\n{\r\n    avlNode *y = z-&gt;left;\r\n    avlNode *T3 = y-&gt;right;\r\n\r\n    y-&gt;right = z;\r\n    z-&gt;left = T3;\r\n\r\n    z-&gt;height = (max(nodeHeight(z-&gt;left), nodeHeight(z-&gt;right)) + <span class=\"hljs-number\">1</span>);\r\n    y-&gt;height = (max(nodeHeight(y-&gt;left), nodeHeight(y-&gt;right)) + <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-keyword\">return</span> y;\r\n}\r\n\r\navlNode *<span class=\"hljs-title function_\">leftRotate</span><span class=\"hljs-params\">(avlNode *z)</span>\r\n{\r\n    avlNode *y = z-&gt;right;\r\n    avlNode *T3 = y-&gt;left;\r\n\r\n    y-&gt;left = z;\r\n    z-&gt;right = T3;\r\n\r\n    z-&gt;height = (max(nodeHeight(z-&gt;left), nodeHeight(z-&gt;right)) + <span class=\"hljs-number\">1</span>);\r\n    y-&gt;height = (max(nodeHeight(y-&gt;left), nodeHeight(y-&gt;right)) + <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-keyword\">return</span> y;\r\n}\r\n\r\navlNode *<span class=\"hljs-title function_\">LeftRightRotate</span><span class=\"hljs-params\">(avlNode *z)</span>\r\n{\r\n    z-&gt;left = leftRotate(z-&gt;left);\r\n\r\n    <span class=\"hljs-keyword\">return</span> (rightRotate(z));\r\n}\r\n\r\navlNode *<span class=\"hljs-title function_\">RightLeftRotate</span><span class=\"hljs-params\">(avlNode *z)</span>\r\n{\r\n    z-&gt;right = rightRotate(z-&gt;right);\r\n\r\n    <span class=\"hljs-keyword\">return</span> (leftRotate(z));\r\n}\r\n\r\navlNode *<span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(avlNode *node, <span class=\"hljs-type\">int</span> key)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> (newNode(key));\r\n\r\n    <span class=\"hljs-comment\">/*Binary Search Tree insertion*/</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (key &lt; node-&gt;key)\r\n        node-&gt;left =\r\n            insert(node-&gt;left, key); <span class=\"hljs-comment\">/*Recursive insertion in L subtree*/</span>\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &gt; node-&gt;key)\r\n        node-&gt;right =\r\n            insert(node-&gt;right, key); <span class=\"hljs-comment\">/*Recursive insertion in R subtree*/</span>\r\n\r\n    <span class=\"hljs-comment\">/* Node  Height as per the AVL formula*/</span>\r\n    node-&gt;height = (max(nodeHeight(node-&gt;left), nodeHeight(node-&gt;right)) + <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-comment\">/*Checking for the balance condition*/</span>\r\n    <span class=\"hljs-type\">int</span> balance = heightDiff(node);\r\n\r\n    <span class=\"hljs-comment\">/*Left Left */</span>\r\n    <span class=\"hljs-keyword\">if</span> (balance &gt; <span class=\"hljs-number\">1</span> &amp;&amp; key &lt; (node-&gt;left-&gt;key))\r\n        <span class=\"hljs-keyword\">return</span> rightRotate(node);\r\n\r\n    <span class=\"hljs-comment\">/*Right Right */</span>\r\n    <span class=\"hljs-keyword\">if</span> (balance &lt; <span class=\"hljs-number\">-1</span> &amp;&amp; key &gt; (node-&gt;right-&gt;key))\r\n        <span class=\"hljs-keyword\">return</span> leftRotate(node);\r\n\r\n    <span class=\"hljs-comment\">/*Left Right */</span>\r\n    <span class=\"hljs-keyword\">if</span> (balance &gt; <span class=\"hljs-number\">1</span> &amp;&amp; key &gt; (node-&gt;left-&gt;key))\r\n    {\r\n        node = LeftRightRotate(node);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/*Right Left */</span>\r\n    <span class=\"hljs-keyword\">if</span> (balance &lt; <span class=\"hljs-number\">-1</span> &amp;&amp; key &lt; (node-&gt;right-&gt;key))\r\n    {\r\n        node = RightLeftRotate(node);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> node;\r\n}\r\n\r\navlNode *<span class=\"hljs-title function_\">delete</span> <span class=\"hljs-params\">(avlNode *node, <span class=\"hljs-type\">int</span> queryNum)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> node;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (queryNum &lt; node-&gt;key)\r\n        node-&gt;left =\r\n            delete (node-&gt;left, queryNum); <span class=\"hljs-comment\">/*Recursive deletion in L subtree*/</span>\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (queryNum &gt; node-&gt;key)\r\n        node-&gt;right =\r\n            delete (node-&gt;right, queryNum); <span class=\"hljs-comment\">/*Recursive deletion in R subtree*/</span>\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-comment\">/*Single or No Child*/</span>\r\n        <span class=\"hljs-keyword\">if</span> ((node-&gt;left == <span class=\"hljs-literal\">NULL</span>) || (node-&gt;right == <span class=\"hljs-literal\">NULL</span>))\r\n        {\r\n            avlNode *temp = node-&gt;left ? node-&gt;left : node-&gt;right;\r\n\r\n            <span class=\"hljs-comment\">/* No Child*/</span>\r\n            <span class=\"hljs-keyword\">if</span> (temp == <span class=\"hljs-literal\">NULL</span>)\r\n            {\r\n                temp = node;\r\n                node = <span class=\"hljs-literal\">NULL</span>;\r\n            }\r\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">/*Single Child : copy data to the parent*/</span>\r\n                *node = *temp;\r\n\r\n            <span class=\"hljs-built_in\">free</span>(temp);\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            <span class=\"hljs-comment\">/*Two Child*/</span>\r\n\r\n            <span class=\"hljs-comment\">/*Get the smallest key in the R subtree*/</span>\r\n            avlNode *temp = minNode(node-&gt;right);\r\n            node-&gt;key = temp-&gt;key; <span class=\"hljs-comment\">/*Copy that to the root*/</span>\r\n            node-&gt;right =\r\n                delete (node-&gt;right,\r\n                        temp-&gt;key); <span class=\"hljs-comment\">/*Delete the smallest in the R subtree.*/</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/*single node in tree*/</span>\r\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> node;\r\n\r\n    <span class=\"hljs-comment\">/*Update height*/</span>\r\n    node-&gt;height = (max(nodeHeight(node-&gt;left), nodeHeight(node-&gt;right)) + <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-type\">int</span> balance = heightDiff(node);\r\n\r\n    <span class=\"hljs-comment\">/*Left Left */</span>\r\n    <span class=\"hljs-keyword\">if</span> ((balance &gt; <span class=\"hljs-number\">1</span>) &amp;&amp; (heightDiff(node-&gt;left) &gt;= <span class=\"hljs-number\">0</span>))\r\n        <span class=\"hljs-keyword\">return</span> rightRotate(node);\r\n\r\n    <span class=\"hljs-comment\">/*Left Right */</span>\r\n    <span class=\"hljs-keyword\">if</span> ((balance &gt; <span class=\"hljs-number\">1</span>) &amp;&amp; (heightDiff(node-&gt;left) &lt; <span class=\"hljs-number\">0</span>))\r\n    {\r\n        node = LeftRightRotate(node);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/*Right Right */</span>\r\n    <span class=\"hljs-keyword\">if</span> ((balance &lt; <span class=\"hljs-number\">-1</span>) &amp;&amp; (heightDiff(node-&gt;right) &gt;= <span class=\"hljs-number\">0</span>))\r\n        <span class=\"hljs-keyword\">return</span> leftRotate(node);\r\n\r\n    <span class=\"hljs-comment\">/*Right Left */</span>\r\n    <span class=\"hljs-keyword\">if</span> ((balance &lt; <span class=\"hljs-number\">-1</span>) &amp;&amp; (heightDiff(node-&gt;right) &lt; <span class=\"hljs-number\">0</span>))\r\n    {\r\n        node = RightLeftRotate(node);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> node;\r\n}\r\n\r\navlNode *<span class=\"hljs-title function_\">findNode</span><span class=\"hljs-params\">(avlNode *node, <span class=\"hljs-type\">int</span> queryNum)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (queryNum &lt; node-&gt;key)\r\n            node = findNode(node-&gt;left, queryNum);\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (queryNum &gt; node-&gt;key)\r\n            node = findNode(node-&gt;right, queryNum);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> node;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printPreOrder</span><span class=\"hljs-params\">(avlNode *node)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  %d  &quot;</span>, (node-&gt;key));\r\n    printPreOrder(node-&gt;left);\r\n    printPreOrder(node-&gt;right);\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printInOrder</span><span class=\"hljs-params\">(avlNode *node)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    printInOrder(node-&gt;left);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  %d  &quot;</span>, (node-&gt;key));\r\n    printInOrder(node-&gt;right);\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printPostOrder</span><span class=\"hljs-params\">(avlNode *node)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    printPostOrder(node-&gt;left);\r\n    printPostOrder(node-&gt;right);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;  %d  &quot;</span>, (node-&gt;key));\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> choice;\r\n    <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-type\">int</span> insertNum;\r\n    <span class=\"hljs-type\">int</span> queryNum;\r\n\r\n    avlNode *root = <span class=\"hljs-literal\">NULL</span>;\r\n    avlNode *tempNode;\r\n\r\n    <span class=\"hljs-keyword\">while</span> (flag == <span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\nEnter the Step to Run : \\n&quot;</span>);\r\n\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t1: Insert a node into AVL tree\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t2: Delete a node in AVL tree\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t3: Search a node into AVL tree\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t4: printPreOrder (Ro L R) Tree\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t5: printInOrder (L Ro R) Tree\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t6: printPostOrder (L R Ro) Tree\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t7: printAVL Tree\\n&quot;</span>);\r\n\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t0: EXIT\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;choice);\r\n\r\n        <span class=\"hljs-keyword\">switch</span> (choice)\r\n        {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\r\n        {\r\n            flag = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t\\tExiting, Thank You !!\\n&quot;</span>);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tEnter the Number to insert: &quot;</span>);\r\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;insertNum);\r\n\r\n            tempNode = findNode(root, insertNum);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (tempNode != <span class=\"hljs-literal\">NULL</span>)\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t %d Already exists in the tree\\n&quot;</span>, insertNum);\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\r\n                printAVL(root, <span class=\"hljs-number\">1</span>);\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n\r\n                root = insert(root, insertNum);\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\r\n                printAVL(root, <span class=\"hljs-number\">1</span>);\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tEnter the Number to Delete: &quot;</span>);\r\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;queryNum);\r\n\r\n            tempNode = findNode(root, queryNum);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (tempNode == <span class=\"hljs-literal\">NULL</span>)\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t %d Does not exist in the tree\\n&quot;</span>, queryNum);\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\r\n                printAVL(root, <span class=\"hljs-number\">1</span>);\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n                root = delete (root, queryNum);\r\n\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\r\n                printAVL(root, <span class=\"hljs-number\">1</span>);\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tEnter the Number to Search: &quot;</span>);\r\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;queryNum);\r\n\r\n            tempNode = findNode(root, queryNum);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (tempNode == <span class=\"hljs-literal\">NULL</span>)\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t %d : Not Found\\n&quot;</span>, queryNum);\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t %d : Found at height %d \\n&quot;</span>, queryNum,\r\n                       tempNode-&gt;height);\r\n\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\tPrinting AVL Tree\\n&quot;</span>);\r\n                printAVL(root, <span class=\"hljs-number\">1</span>);\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPrinting Tree preOrder\\n&quot;</span>);\r\n            printPreOrder(root);\r\n\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPrinting Tree inOrder\\n&quot;</span>);\r\n            printInOrder(root);\r\n\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPrinting Tree PostOrder\\n&quot;</span>);\r\n            printPostOrder(root);\r\n\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">7</span>:\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPrinting AVL Tree\\n&quot;</span>);\r\n            printAVL(root, <span class=\"hljs-number\">1</span>);\r\n\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">default</span>:\r\n        {\r\n            flag = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\t\\tExiting, Thank You !!\\n&quot;</span>);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "go": {
      "dir": "structure\\avl\\avl.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure\\avl\\avl.go",
      "code": "<span class=\"hljs-comment\">// Package avl is a Adelson-Velskii and Landis tree implemnation</span>\r\n<span class=\"hljs-comment\">// avl is self-balancing tree, i.e for all node in a tree, height difference</span>\r\n<span class=\"hljs-comment\">// between its left and right child will not exceed 1</span>\r\n<span class=\"hljs-comment\">// more information : https://en.wikipedia.org/wiki/AVL_tree</span>\r\n<span class=\"hljs-keyword\">package</span> avl\r\n\r\n<span class=\"hljs-comment\">// Node of a tree</span>\r\n<span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> {\r\n\tKey         <span class=\"hljs-type\">int</span>\r\n\tHeight      <span class=\"hljs-type\">int</span>\r\n\tLeft, Right *Node\r\n}\r\n\r\n<span class=\"hljs-comment\">// NewTree create a new AVL tree</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewTree</span><span class=\"hljs-params\">()</span></span> *Node {\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Get : return node with given key</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Get</span><span class=\"hljs-params\">(root *Node, key <span class=\"hljs-type\">int</span>)</span></span> *Node {\r\n\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> root.Key == key {\r\n\t\t<span class=\"hljs-keyword\">return</span> root\r\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> root.Key &lt; key {\r\n\t\troot = root.Right\r\n\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\troot = root.Left\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> Get(root, key)\r\n}\r\n\r\n<span class=\"hljs-comment\">// Insert a new item</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(root **Node, key <span class=\"hljs-type\">int</span>)</span></span> {\r\n\t<span class=\"hljs-keyword\">if</span> *root == <span class=\"hljs-literal\">nil</span> {\r\n\t\t*root = &amp;Node{\r\n\t\t\tKey:    key,\r\n\t\t\tHeight: <span class=\"hljs-number\">1</span>,\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> (*root).Key &lt; key {\r\n\t\tInsert(&amp;(*root).Right, key)\r\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*root).Key &gt; key {\r\n\t\tInsert(&amp;(*root).Left, key)\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// update height</span>\r\n\t(*root).Height = height(*root)\r\n\r\n\tbFactor := balanceFactor(*root)\r\n\r\n\t<span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">2</span> { <span class=\"hljs-comment\">// L</span>\r\n\t\tbFactor = balanceFactor((*root).Left)\r\n\t\t<span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">1</span> { <span class=\"hljs-comment\">// LL</span>\r\n\t\t\tllRotation(root)\r\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">-1</span> { <span class=\"hljs-comment\">// LR</span>\r\n\t\t\tlrRotation(root)\r\n\t\t}\r\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">-2</span> { <span class=\"hljs-comment\">// R</span>\r\n\t\tbFactor = balanceFactor((*root).Right)\r\n\t\t<span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">1</span> { <span class=\"hljs-comment\">// RL</span>\r\n\t\t\trlRotation(root)\r\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">-1</span> { <span class=\"hljs-comment\">// RR</span>\r\n\t\t\trrRotation(root)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">// Delete : remove given key from the tree</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Delete</span><span class=\"hljs-params\">(root **Node, key <span class=\"hljs-type\">int</span>)</span></span> {\r\n\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> (*root).Key &lt; key {\r\n\t\tDelete(&amp;(*root).Right, key)\r\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*root).Key &gt; key {\r\n\t\tDelete(&amp;(*root).Left, key)\r\n\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t<span class=\"hljs-comment\">// 3 cases</span>\r\n\t\t<span class=\"hljs-comment\">// 1. No Child</span>\r\n\t\t<span class=\"hljs-comment\">// 2. With One Child</span>\r\n\t\t<span class=\"hljs-comment\">// 3. With Two Child</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> (*root).Left == <span class=\"hljs-literal\">nil</span> &amp;&amp; (*root).Right == <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t*root = <span class=\"hljs-literal\">nil</span>\r\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*root).Left == <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t*root = (*root).Right\r\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*root).Right == <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t*root = (*root).Left\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\tminVal := min((*root).Right)\r\n\t\t\t(*root).Key = minVal\r\n\t\t\tDelete(root, minVal)\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// update height</span>\r\n\t(*root).Height = height(*root)\r\n\r\n\tbFactor := balanceFactor(*root)\r\n\r\n\t<span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">2</span> { <span class=\"hljs-comment\">// L</span>\r\n\t\t<span class=\"hljs-keyword\">switch</span> balanceFactor((*root).Left) {\r\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>: <span class=\"hljs-comment\">// LL</span>\r\n\t\t\tllRotation(root)\r\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">-1</span>: <span class=\"hljs-comment\">// LR</span>\r\n\t\t\tlrRotation(root)\r\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\">//  LL OR LR</span>\r\n\t\t\tllRotation(root)\r\n\t\t}\r\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> bFactor == <span class=\"hljs-number\">-2</span> { <span class=\"hljs-comment\">// L</span>\r\n\t\t<span class=\"hljs-keyword\">switch</span> balanceFactor((*root).Right) {\r\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>: <span class=\"hljs-comment\">// RL</span>\r\n\t\t\trlRotation(root)\r\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">-1</span>: <span class=\"hljs-comment\">// RR</span>\r\n\t\t\trrRotation(root)\r\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>: <span class=\"hljs-comment\">// RL OR RR</span>\r\n\t\t\trrRotation(root)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">// rotations</span>\r\n<span class=\"hljs-comment\">// 1. LL</span>\r\n<span class=\"hljs-comment\">// 2. LR</span>\r\n<span class=\"hljs-comment\">// 3. RR</span>\r\n<span class=\"hljs-comment\">// 4. RL</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">llRotation</span><span class=\"hljs-params\">(root **Node)</span></span> {\r\n\tb := (*root).Left\r\n\tbr := b.Right\r\n\tb.Right = *root\r\n\t(*root).Left = br\r\n\t(*root).Height = height(*root)\r\n\tb.Height = height(b)\r\n\t*root = b\r\n}\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">lrRotation</span><span class=\"hljs-params\">(root **Node)</span></span> {\r\n\tc := (*root).Left.Right\r\n\tcl := c.Left\r\n\tcr := c.Right\r\n\r\n\tc.Left = (*root).Left\r\n\tc.Right = (*root)\r\n\tc.Left.Right = cl\r\n\r\n\t(*root).Left = cr\r\n\r\n\t(*root).Height = height(*root)\r\n\tc.Left.Height = height(c.Left)\r\n\tc.Height = height(c)\r\n\r\n\t*root = c\r\n\r\n}\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rrRotation</span><span class=\"hljs-params\">(root **Node)</span></span> {\r\n\tb := (*root).Right\r\n\tbl := b.Left\r\n\tb.Left = *root\r\n\r\n\t(*root).Right = bl\r\n\t(*root).Height = height(*root)\r\n\tb.Height = height(b)\r\n\t*root = b\r\n\r\n}\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rlRotation</span><span class=\"hljs-params\">(root **Node)</span></span> {\r\n\tc := (*root).Right.Left\r\n\tcl := c.Left\r\n\tcr := c.Right\r\n\r\n\tc.Right = (*root).Right\r\n\tc.Right.Left = cr\r\n\tc.Left = *root\r\n\t(*root).Right = cl\r\n\r\n\t(*root).Height = height(*root)\r\n\tc.Right.Height = height(c.Right)\r\n\tc.Height = height(c)\r\n\t*root = c\r\n}\r\n\r\n<span class=\"hljs-comment\">// balanceFactor : -ve balance factor means subtree root is heavy toward left</span>\r\n<span class=\"hljs-comment\">// and +ve balance factor means subtree root is heavy toward right side</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">balanceFactor</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">var</span> leftHeight, rightHeight <span class=\"hljs-type\">int</span>\r\n\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> {\r\n\t\tleftHeight = root.Left.Height\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> {\r\n\t\trightHeight = root.Right.Height\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> leftHeight - rightHeight\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">height</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">var</span> leftHeight, rightHeight <span class=\"hljs-type\">int</span>\r\n\t<span class=\"hljs-keyword\">if</span> root.Left != <span class=\"hljs-literal\">nil</span> {\r\n\t\tleftHeight = root.Left.Height\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> root.Right != <span class=\"hljs-literal\">nil</span> {\r\n\t\trightHeight = root.Right.Height\r\n\t}\r\n\tmax := leftHeight\r\n\t<span class=\"hljs-keyword\">if</span> rightHeight &gt; leftHeight {\r\n\t\tmax = rightHeight\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + max\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(root *Node)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">if</span> root.Left == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> root.Key\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> min(root.Left)\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\data_structures\\avl_tree.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\data_structures\\avl_tree.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::{\r\n    cmp::{max, Ordering},\r\n    iter::FromIterator,\r\n    mem,\r\n    ops::Not,\r\n};\r\n\r\n<span class=\"hljs-comment\">/// An internal node of an `AVLTree`.</span>\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">AVLNode</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; {\r\n    value: T,\r\n    height: <span class=\"hljs-type\">usize</span>,\r\n    left: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;,\r\n    right: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;,\r\n}\r\n\r\n<span class=\"hljs-comment\">/// A set based on an AVL Tree.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// An AVL Tree is a self-balancing binary search tree. It tracks the height of each node</span>\r\n<span class=\"hljs-comment\">/// and performs internal rotations to maintain a height difference of at most 1 between</span>\r\n<span class=\"hljs-comment\">/// each sibling pair.</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">AVLTree</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; {\r\n    root: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;,\r\n    length: <span class=\"hljs-type\">usize</span>,\r\n}\r\n\r\n<span class=\"hljs-comment\">/// Refers to the left or right subtree of an `AVLNode`.</span>\r\n<span class=\"hljs-meta\">#[derive(Clone, Copy)]</span>\r\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Side</span> {\r\n    Left,\r\n    Right,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; AVLTree&lt;T&gt; {\r\n    <span class=\"hljs-comment\">/// Creates an empty `AVLTree`.</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> AVLTree&lt;T&gt; {\r\n        AVLTree {\r\n            root: <span class=\"hljs-literal\">None</span>,\r\n            length: <span class=\"hljs-number\">0</span>,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns `true` if the tree contains a value.</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains</span>(&amp;<span class=\"hljs-keyword\">self</span>, value: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">current</span> = &amp;<span class=\"hljs-keyword\">self</span>.root;\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = current {\r\n            current = <span class=\"hljs-keyword\">match</span> value.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;node.value) {\r\n                Ordering::Equal =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>,\r\n                Ordering::Less =&gt; &amp;node.left,\r\n                Ordering::Greater =&gt; &amp;node.right,\r\n            }\r\n        }\r\n        <span class=\"hljs-literal\">false</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Adds a value to the tree.</span>\r\n    <span class=\"hljs-comment\">///</span>\r\n    <span class=\"hljs-comment\">/// Returns `true` if the tree did not yet contain the value.</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">inserted</span> = <span class=\"hljs-title function_ invoke__\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.root, value);\r\n        <span class=\"hljs-keyword\">if</span> inserted {\r\n            <span class=\"hljs-keyword\">self</span>.length += <span class=\"hljs-number\">1</span>;\r\n        }\r\n        inserted\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Removes a value from the tree.</span>\r\n    <span class=\"hljs-comment\">///</span>\r\n    <span class=\"hljs-comment\">/// Returns `true` if the tree contained the value.</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">remove</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">removed</span> = <span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.root, value);\r\n        <span class=\"hljs-keyword\">if</span> removed {\r\n            <span class=\"hljs-keyword\">self</span>.length -= <span class=\"hljs-number\">1</span>;\r\n        }\r\n        removed\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the number of values in the tree.</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">len</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\r\n        <span class=\"hljs-keyword\">self</span>.length\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns `true` if the tree contains no values.</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_empty</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">self</span>.length == <span class=\"hljs-number\">0</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns an iterator that visits the nodes in the tree in order.</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">node_iter</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> NodeIter&lt;T&gt; {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cap</span> = <span class=\"hljs-keyword\">self</span>.root.<span class=\"hljs-title function_ invoke__\">as_ref</span>().<span class=\"hljs-title function_ invoke__\">map_or</span>(<span class=\"hljs-number\">0</span>, |n| n.height);\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node_iter</span> = NodeIter {\r\n            stack: Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(cap),\r\n        };\r\n        <span class=\"hljs-comment\">// Initialize stack with path to leftmost child</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">child</span> = &amp;<span class=\"hljs-keyword\">self</span>.root;\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = child {\r\n            node_iter.stack.<span class=\"hljs-title function_ invoke__\">push</span>(node.<span class=\"hljs-title function_ invoke__\">as_ref</span>());\r\n            child = &amp;node.left;\r\n        }\r\n        node_iter\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns an iterator that visits the values in the tree in ascending order.</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">iter</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> Iter&lt;T&gt; {\r\n        Iter {\r\n            node_iter: <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">node_iter</span>(),\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/// Recursive helper function for `AVLTree` insertion.</span>\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;, value: T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = tree {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">inserted</span> = <span class=\"hljs-keyword\">match</span> value.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;node.value) {\r\n            Ordering::Equal =&gt; <span class=\"hljs-literal\">false</span>,\r\n            Ordering::Less =&gt; <span class=\"hljs-title function_ invoke__\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.left, value),\r\n            Ordering::Greater =&gt; <span class=\"hljs-title function_ invoke__\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.right, value),\r\n        };\r\n        <span class=\"hljs-keyword\">if</span> inserted {\r\n            node.<span class=\"hljs-title function_ invoke__\">rebalance</span>();\r\n        }\r\n        inserted\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        *tree = <span class=\"hljs-title function_ invoke__\">Some</span>(Box::<span class=\"hljs-title function_ invoke__\">new</span>(AVLNode {\r\n            value,\r\n            height: <span class=\"hljs-number\">1</span>,\r\n            left: <span class=\"hljs-literal\">None</span>,\r\n            right: <span class=\"hljs-literal\">None</span>,\r\n        }));\r\n        <span class=\"hljs-literal\">true</span>\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/// Recursive helper function for `AVLTree` deletion.</span>\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">remove</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;, value: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = tree {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">removed</span> = <span class=\"hljs-keyword\">match</span> value.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;node.value) {\r\n            Ordering::Less =&gt; <span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.left, value),\r\n            Ordering::Greater =&gt; <span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.right, value),\r\n            Ordering::Equal =&gt; {\r\n                *tree = <span class=\"hljs-title function_ invoke__\">match</span> (node.left.<span class=\"hljs-title function_ invoke__\">take</span>(), node.right.<span class=\"hljs-title function_ invoke__\">take</span>()) {\r\n                    (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>) =&gt; <span class=\"hljs-literal\">None</span>,\r\n                    (<span class=\"hljs-title function_ invoke__\">Some</span>(b), <span class=\"hljs-literal\">None</span>) | (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-title function_ invoke__\">Some</span>(b)) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(b),\r\n                    (<span class=\"hljs-title function_ invoke__\">Some</span>(left), <span class=\"hljs-title function_ invoke__\">Some</span>(right)) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-title function_ invoke__\">merge</span>(left, right)),\r\n                };\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        };\r\n        <span class=\"hljs-keyword\">if</span> removed {\r\n            node.<span class=\"hljs-title function_ invoke__\">rebalance</span>();\r\n        }\r\n        removed\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-literal\">false</span>\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/// Merges two trees and returns the root of the merged tree.</span>\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">merge</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(left: <span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;, right: <span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">op_right</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(right);\r\n    <span class=\"hljs-comment\">// Guaranteed not to panic since right has at least one node</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">root</span> = <span class=\"hljs-title function_ invoke__\">take_min</span>(&amp;<span class=\"hljs-keyword\">mut</span> op_right).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\r\n    root.left = <span class=\"hljs-title function_ invoke__\">Some</span>(left);\r\n    root.right = op_right;\r\n    root.<span class=\"hljs-title function_ invoke__\">rebalance</span>();\r\n    root\r\n}\r\n\r\n<span class=\"hljs-comment\">/// Removes the smallest node from the tree, if one exists.</span>\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">take_min</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(tree: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt; {\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(<span class=\"hljs-keyword\">mut</span> node) = tree.<span class=\"hljs-title function_ invoke__\">take</span>() {\r\n        <span class=\"hljs-comment\">// Recurse along the left side</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(small) = <span class=\"hljs-title function_ invoke__\">take_min</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.left) {\r\n            <span class=\"hljs-comment\">// Took the smallest from below; update this node and put it back in the tree</span>\r\n            node.<span class=\"hljs-title function_ invoke__\">rebalance</span>();\r\n            *tree = <span class=\"hljs-title function_ invoke__\">Some</span>(node);\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(small)\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">// Take this node and replace it with its right child</span>\r\n            *tree = node.right.<span class=\"hljs-title function_ invoke__\">take</span>();\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node)\r\n        }\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-literal\">None</span>\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; AVLNode&lt;T&gt; {\r\n    <span class=\"hljs-comment\">/// Returns a reference to the left or right child.</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">child</span>(&amp;<span class=\"hljs-keyword\">self</span>, side: Side) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt; {\r\n        <span class=\"hljs-keyword\">match</span> side {\r\n            Side::Left =&gt; &amp;<span class=\"hljs-keyword\">self</span>.left,\r\n            Side::Right =&gt; &amp;<span class=\"hljs-keyword\">self</span>.right,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns a mutable reference to the left or right child.</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">child_mut</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, side: Side) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;AVLNode&lt;T&gt;&gt;&gt; {\r\n        <span class=\"hljs-keyword\">match</span> side {\r\n            Side::Left =&gt; &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.left,\r\n            Side::Right =&gt; &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.right,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the height of the left or right subtree.</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">height</span>(&amp;<span class=\"hljs-keyword\">self</span>, side: Side) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child</span>(side).<span class=\"hljs-title function_ invoke__\">as_ref</span>().<span class=\"hljs-title function_ invoke__\">map_or</span>(<span class=\"hljs-number\">0</span>, |n| n.height)\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the height difference between the left and right subtrees.</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">balance_factor</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">i8</span> {\r\n        <span class=\"hljs-keyword\">let</span> (left, right) = (<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">height</span>(Side::Left), <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">height</span>(Side::Right));\r\n        <span class=\"hljs-keyword\">if</span> left &lt; right {\r\n            (right - left) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i8</span>\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            -((left - right) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">i8</span>)\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Recomputes the `height` field.</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">update_height</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\r\n        <span class=\"hljs-keyword\">self</span>.height = <span class=\"hljs-number\">1</span> + <span class=\"hljs-title function_ invoke__\">max</span>(<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">height</span>(Side::Left), <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">height</span>(Side::Right));\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Performs a left or right rotation.</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">rotate</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, side: Side) {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">subtree</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child_mut</span>(!side).<span class=\"hljs-title function_ invoke__\">take</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\r\n        *<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child_mut</span>(!side) = subtree.<span class=\"hljs-title function_ invoke__\">child_mut</span>(side).<span class=\"hljs-title function_ invoke__\">take</span>();\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">update_height</span>();\r\n        <span class=\"hljs-comment\">// Swap root and child nodes in memory</span>\r\n        mem::<span class=\"hljs-title function_ invoke__\">swap</span>(<span class=\"hljs-keyword\">self</span>, subtree.<span class=\"hljs-title function_ invoke__\">as_mut</span>());\r\n        <span class=\"hljs-comment\">// Set old root (subtree) as child of new root (self)</span>\r\n        *<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child_mut</span>(side) = <span class=\"hljs-title function_ invoke__\">Some</span>(subtree);\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">update_height</span>();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Performs left or right tree rotations to balance this node.</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">rebalance</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">update_height</span>();\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">side</span> = <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">balance_factor</span>() {\r\n            -<span class=\"hljs-number\">2</span> =&gt; Side::Left,\r\n            <span class=\"hljs-number\">2</span> =&gt; Side::Right,\r\n            _ =&gt; <span class=\"hljs-keyword\">return</span>,\r\n        };\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">subtree</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">child_mut</span>(side).<span class=\"hljs-title function_ invoke__\">as_mut</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\r\n        <span class=\"hljs-comment\">// Left-Right and Right-Left require rotation of heavy subtree</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> (Side::Left, <span class=\"hljs-number\">1</span>) | (Side::Right, -<span class=\"hljs-number\">1</span>) = (side, subtree.<span class=\"hljs-title function_ invoke__\">balance_factor</span>()) {\r\n            subtree.<span class=\"hljs-title function_ invoke__\">rotate</span>(side);\r\n        }\r\n        <span class=\"hljs-comment\">// Rotate in opposite direction of heavy side</span>\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">rotate</span>(!side);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; <span class=\"hljs-built_in\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">AVLTree</span>&lt;T&gt; {\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">new</span>()\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Not</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Side</span> {\r\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Output</span> = Side;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not</span>(<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span>::Output {\r\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\r\n            Side::Left =&gt; Side::Right,\r\n            Side::Right =&gt; Side::Left,\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt; FromIterator&lt;T&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">AVLTree</span>&lt;T&gt; {\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">from_iter</span>&lt;I: <span class=\"hljs-built_in\">IntoIterator</span>&lt;Item = T&gt;&gt;(iter: I) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span> = AVLTree::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-keyword\">in</span> iter {\r\n            tree.<span class=\"hljs-title function_ invoke__\">insert</span>(value);\r\n        }\r\n        tree\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/// An iterator over the nodes of an `AVLTree`.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// This struct is created by the `node_iter` method of `AVLTree`.</span>\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">NodeIter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T: <span class=\"hljs-built_in\">Ord</span>&gt; {\r\n    stack: <span class=\"hljs-type\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> AVLNode&lt;T&gt;&gt;,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T: <span class=\"hljs-built_in\">Ord</span>&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">NodeIter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; {\r\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = &amp;<span class=\"hljs-symbol\">&#x27;a</span> AVLNode&lt;T&gt;;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-keyword\">Self</span>::Item&gt; {\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(node) = <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">pop</span>() {\r\n            <span class=\"hljs-comment\">// Push left path of right subtree to stack</span>\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">child</span> = &amp;node.right;\r\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(subtree) = child {\r\n                <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">push</span>(subtree.<span class=\"hljs-title function_ invoke__\">as_ref</span>());\r\n                child = &amp;subtree.left;\r\n            }\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node)\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-literal\">None</span>\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/// An iterator over the items of an `AVLTree`.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// This struct is created by the `iter` method of `AVLTree`.</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Iter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T: <span class=\"hljs-built_in\">Ord</span>&gt; {\r\n    node_iter: NodeIter&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt;,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T: <span class=\"hljs-built_in\">Ord</span>&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Iter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; {\r\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = &amp;<span class=\"hljs-symbol\">&#x27;a</span> T;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> T&gt; {\r\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.node_iter.<span class=\"hljs-title function_ invoke__\">next</span>() {\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;node.value),\r\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::AVLTree;\r\n\r\n    <span class=\"hljs-comment\">/// Returns `true` if all nodes in the tree are balanced.</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_balanced</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(tree: &amp;AVLTree&lt;T&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        tree.<span class=\"hljs-title function_ invoke__\">node_iter</span>()\r\n            .<span class=\"hljs-title function_ invoke__\">all</span>(|n| (-<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">contains</span>(&amp;n.<span class=\"hljs-title function_ invoke__\">balance_factor</span>()))\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">len</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">4</span>).<span class=\"hljs-title function_ invoke__\">collect</span>();\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(tree.<span class=\"hljs-title function_ invoke__\">len</span>(), <span class=\"hljs-number\">3</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">4</span>).<span class=\"hljs-title function_ invoke__\">collect</span>();\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">contains</span>(&amp;<span class=\"hljs-number\">1</span>));\r\n        <span class=\"hljs-built_in\">assert!</span>(!tree.<span class=\"hljs-title function_ invoke__\">contains</span>(&amp;<span class=\"hljs-number\">4</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span> = AVLTree::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        <span class=\"hljs-comment\">// First insert succeeds</span>\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">1</span>));\r\n        <span class=\"hljs-comment\">// Second insert fails</span>\r\n        <span class=\"hljs-built_in\">assert!</span>(!tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">1</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">remove</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_ invoke__\">collect</span>();\r\n        <span class=\"hljs-comment\">// First remove succeeds</span>\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-number\">4</span>));\r\n        <span class=\"hljs-comment\">// Second remove fails</span>\r\n        <span class=\"hljs-built_in\">assert!</span>(!tree.<span class=\"hljs-title function_ invoke__\">remove</span>(&amp;<span class=\"hljs-number\">4</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">sorted</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_ invoke__\">rev</span>().<span class=\"hljs-title function_ invoke__\">collect</span>();\r\n        <span class=\"hljs-built_in\">assert!</span>((<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_ invoke__\">eq</span>(tree.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|&amp;x| x)));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">balanced</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span>: AVLTree&lt;_&gt; = (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span>).<span class=\"hljs-title function_ invoke__\">collect</span>();\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_balanced</span>(&amp;tree));\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span> {\r\n            tree.<span class=\"hljs-title function_ invoke__\">remove</span>(&amp;x);\r\n            <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_balanced</span>(&amp;tree));\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "lakhan_nad",
      "email": "lakhannad1999@gmail.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Ryan Lowe",
      "email": "rlowe13@me.com",
      "commits": 1
    },
    {
      "name": "Mikel Woo",
      "email": "asianwoo919@yahoo.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "James Mc Dermott",
      "email": "james.mcdermott89@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Moetez Skouri",
      "email": "moetezskouri@Moetezs-MacBook.local",
      "commits": 1
    },
    {
      "name": "Leonardo Galves",
      "email": "leonardogalves1@hotmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "unknown",
      "email": "cnddhks846@naver.com",
      "commits": 1
    },
    {
      "name": "Hao LI",
      "email": "8520588+Leo-LiHao@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Markgolzh",
      "email": "1134386961@qq.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mickaël Schoentgen",
      "email": "contact@tiger-222.fr",
      "commits": 1
    },
    {
      "name": "Rahul Raj",
      "email": "43320722+rraj798@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Shruti Sheoran",
      "email": "shruti.sheoran03@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Awfifcuihc",
      "email": "21129044@zju.edu.cn",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}