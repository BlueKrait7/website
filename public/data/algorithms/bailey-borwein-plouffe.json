{
  "slug": "bailey-borwein-plouffe",
  "name": "Bailey Borwein Plouffe",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\bailey_borwein_plouffe.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\bailey_borwein_plouffe.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bailey_borwein_plouffe</span>(<span class=\"hljs-params\">digit_position: <span class=\"hljs-built_in\">int</span>, precision: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">1000</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Implement a popular pi-digit-extraction algorithm known as the\r\n    Bailey-Borwein-Plouffe (BBP) formula to calculate the nth hex digit of pi.\r\n    Wikipedia page:\r\n    https://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula\r\n    @param digit_position: a positive integer representing the position of the digit to\r\n    extract.\r\n    The digit immediately after the decimal point is located at position 1.\r\n    @param precision: number of terms in the second summation to calculate.\r\n    A higher number reduces the chance of an error but increases the runtime.\r\n    @return: a hexadecimal digit representing the digit at the nth position\r\n    in pi&#x27;s decimal expansion.\r\n\r\n    &gt;&gt;&gt; &quot;&quot;.join(bailey_borwein_plouffe(i) for i in range(1, 11))\r\n    &#x27;243f6a8885&#x27;\r\n    &gt;&gt;&gt; bailey_borwein_plouffe(5, 10000)\r\n    &#x27;6&#x27;\r\n    &gt;&gt;&gt; bailey_borwein_plouffe(-10)\r\n    Traceback (most recent call last):\r\n      ...\r\n    ValueError: Digit position must be a positive integer\r\n    &gt;&gt;&gt; bailey_borwein_plouffe(0)\r\n    Traceback (most recent call last):\r\n      ...\r\n    ValueError: Digit position must be a positive integer\r\n    &gt;&gt;&gt; bailey_borwein_plouffe(1.7)\r\n    Traceback (most recent call last):\r\n      ...\r\n    ValueError: Digit position must be a positive integer\r\n    &gt;&gt;&gt; bailey_borwein_plouffe(2, -10)\r\n    Traceback (most recent call last):\r\n      ...\r\n    ValueError: Precision must be a nonnegative integer\r\n    &gt;&gt;&gt; bailey_borwein_plouffe(2, 1.6)\r\n    Traceback (most recent call last):\r\n      ...\r\n    ValueError: Precision must be a nonnegative integer\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(digit_position, <span class=\"hljs-built_in\">int</span>)) <span class=\"hljs-keyword\">or</span> (digit_position &lt;= <span class=\"hljs-number\">0</span>):\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Digit position must be a positive integer&quot;</span>)\r\n    <span class=\"hljs-keyword\">elif</span> (<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(precision, <span class=\"hljs-built_in\">int</span>)) <span class=\"hljs-keyword\">or</span> (precision &lt; <span class=\"hljs-number\">0</span>):\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Precision must be a nonnegative integer&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># compute an approximation of (16 ** (n - 1)) * pi whose fractional part is mostly</span>\r\n    <span class=\"hljs-comment\"># accurate</span>\r\n    sum_result = (\r\n        <span class=\"hljs-number\">4</span> * _subsum(digit_position, <span class=\"hljs-number\">1</span>, precision)\r\n        - <span class=\"hljs-number\">2</span> * _subsum(digit_position, <span class=\"hljs-number\">4</span>, precision)\r\n        - _subsum(digit_position, <span class=\"hljs-number\">5</span>, precision)\r\n        - _subsum(digit_position, <span class=\"hljs-number\">6</span>, precision)\r\n    )\r\n\r\n    <span class=\"hljs-comment\"># return the first hex digit of the fractional part of the result</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">hex</span>(<span class=\"hljs-built_in\">int</span>((sum_result % <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">16</span>))[<span class=\"hljs-number\">2</span>:]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_subsum</span>(<span class=\"hljs-params\">\r\n    digit_pos_to_extract: <span class=\"hljs-built_in\">int</span>, denominator_addend: <span class=\"hljs-built_in\">int</span>, precision: <span class=\"hljs-built_in\">int</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-comment\"># only care about first digit of fractional part; don&#x27;t need decimal</span>\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Private helper function to implement the summation\r\n    functionality.\r\n    @param digit_pos_to_extract: digit position to extract\r\n    @param denominator_addend: added to denominator of fractions in the formula\r\n    @param precision: same as precision in main function\r\n    @return: floating-point number whose integer part is not important\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0.0</span>\r\n    <span class=\"hljs-keyword\">for</span> sum_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(digit_pos_to_extract + precision):\r\n        denominator = <span class=\"hljs-number\">8</span> * sum_index + denominator_addend\r\n        <span class=\"hljs-keyword\">if</span> sum_index &lt; digit_pos_to_extract:\r\n            <span class=\"hljs-comment\"># if the exponential term is an integer and we mod it by the denominator</span>\r\n            <span class=\"hljs-comment\"># before dividing, only the integer part of the sum will change;</span>\r\n            <span class=\"hljs-comment\"># the fractional part will not</span>\r\n            exponential_term = <span class=\"hljs-built_in\">pow</span>(\r\n                <span class=\"hljs-number\">16</span>, digit_pos_to_extract - <span class=\"hljs-number\">1</span> - sum_index, denominator\r\n            )\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            exponential_term = <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">16</span>, digit_pos_to_extract - <span class=\"hljs-number\">1</span> - sum_index)\r\n        <span class=\"hljs-built_in\">sum</span> += exponential_term / denominator\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Elisha Hollander",
      "email": "just4now666666@gmail.com",
      "commits": 1
    },
    {
      "name": "Kenneth P",
      "email": "41343159+ken437@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}