{
  "slug": "fft",
  "name": "FFT",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\FFT.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\FFT.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Class for calculating the Fast Fourier Transform (FFT) of a discrete signal\r\n * using the Cooley-Tukey algorithm.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Ioannis Karavitsis\r\n * <span class=\"hljs-doctag\">@version</span> 1.0\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FFT</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This class represents a complex number and has methods for basic\r\n     * operations.\r\n     *\r\n     * &lt;p&gt;\r\n     * More info:\r\n     * https://introcs.cs.princeton.edu/java/32class/Complex.java.html\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Complex</span> {\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> real, img;\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Default Constructor. Creates the complex number 0.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Complex</span><span class=\"hljs-params\">()</span> {\r\n            real = <span class=\"hljs-number\">0</span>;\r\n            img = <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Constructor. Creates a complex number.\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> r The real part of the number.\r\n         * <span class=\"hljs-doctag\">@param</span> i The imaginary part of the number.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Complex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> r, <span class=\"hljs-type\">double</span> i)</span> {\r\n            real = r;\r\n            img = i;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Returns the real part of the complex number.\r\n         *\r\n         * <span class=\"hljs-doctag\">@return</span> The real part of the complex number.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getReal</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> real;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Returns the imaginary part of the complex number.\r\n         *\r\n         * <span class=\"hljs-doctag\">@return</span> The imaginary part of the complex number.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getImaginary</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> img;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Adds this complex number to another.\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> z The number to be added.\r\n         * <span class=\"hljs-doctag\">@return</span> The sum.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(Complex z)</span> {\r\n            <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\r\n            temp.real = <span class=\"hljs-built_in\">this</span>.real + z.real;\r\n            temp.img = <span class=\"hljs-built_in\">this</span>.img + z.img;\r\n            <span class=\"hljs-keyword\">return</span> temp;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Subtracts a number from this complex number.\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> z The number to be subtracted.\r\n         * <span class=\"hljs-doctag\">@return</span> The difference.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">subtract</span><span class=\"hljs-params\">(Complex z)</span> {\r\n            <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\r\n            temp.real = <span class=\"hljs-built_in\">this</span>.real - z.real;\r\n            temp.img = <span class=\"hljs-built_in\">this</span>.img - z.img;\r\n            <span class=\"hljs-keyword\">return</span> temp;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Multiplies this complex number by another.\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> z The number to be multiplied.\r\n         * <span class=\"hljs-doctag\">@return</span> The product.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">multiply</span><span class=\"hljs-params\">(Complex z)</span> {\r\n            <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\r\n            temp.real = <span class=\"hljs-built_in\">this</span>.real * z.real - <span class=\"hljs-built_in\">this</span>.img * z.img;\r\n            temp.img = <span class=\"hljs-built_in\">this</span>.real * z.img + <span class=\"hljs-built_in\">this</span>.img * z.real;\r\n            <span class=\"hljs-keyword\">return</span> temp;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Multiplies this complex number by a scalar.\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> n The real number to be multiplied.\r\n         * <span class=\"hljs-doctag\">@return</span> The product.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">multiply</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n)</span> {\r\n            <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\r\n            temp.real = <span class=\"hljs-built_in\">this</span>.real * n;\r\n            temp.img = <span class=\"hljs-built_in\">this</span>.img * n;\r\n            <span class=\"hljs-keyword\">return</span> temp;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Finds the conjugate of this complex number.\r\n         *\r\n         * <span class=\"hljs-doctag\">@return</span> The conjugate.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">conjugate</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\r\n            temp.real = <span class=\"hljs-built_in\">this</span>.real;\r\n            temp.img = -<span class=\"hljs-built_in\">this</span>.img;\r\n            <span class=\"hljs-keyword\">return</span> temp;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Finds the magnitude of the complex number.\r\n         *\r\n         * <span class=\"hljs-doctag\">@return</span> The magnitude.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">abs</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> Math.hypot(<span class=\"hljs-built_in\">this</span>.real, <span class=\"hljs-built_in\">this</span>.img);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Divides this complex number by another.\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> z The divisor.\r\n         * <span class=\"hljs-doctag\">@return</span> The quotient.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">divide</span><span class=\"hljs-params\">(Complex z)</span> {\r\n            <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\r\n            temp.real = (<span class=\"hljs-built_in\">this</span>.real * z.real + <span class=\"hljs-built_in\">this</span>.img * z.img) / (z.abs() * z.abs());\r\n            temp.img = (<span class=\"hljs-built_in\">this</span>.img * z.real - <span class=\"hljs-built_in\">this</span>.real * z.img) / (z.abs() * z.abs());\r\n            <span class=\"hljs-keyword\">return</span> temp;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Divides this complex number by a scalar.\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> n The divisor which is a real number.\r\n         * <span class=\"hljs-doctag\">@return</span> The quotient.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">divide</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n)</span> {\r\n            <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\r\n            temp.real = <span class=\"hljs-built_in\">this</span>.real / n;\r\n            temp.img = <span class=\"hljs-built_in\">this</span>.img / n;\r\n            <span class=\"hljs-keyword\">return</span> temp;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Iterative In-Place Radix-2 Cooley-Tukey Fast Fourier Transform Algorithm\r\n     * with Bit-Reversal. The size of the input signal must be a power of 2. If\r\n     * it isn&#x27;t then it is padded with zeros and the output FFT will be bigger\r\n     * than the input signal.\r\n     *\r\n     * &lt;p&gt;\r\n     * More info:\r\n     * https://www.algorithm-archive.org/contents/cooley_tukey/cooley_tukey.html\r\n     * https://www.geeksforgeeks.org/iterative-fast-fourier-transformation-polynomial-multiplication/\r\n     * https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm\r\n     * https://cp-algorithms.com/algebra/fft.html\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> x The discrete signal which is then converted to the FFT or the\r\n     * IFFT of signal x.\r\n     * <span class=\"hljs-doctag\">@param</span> inverse True if you want to find the inverse FFT.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fft</span><span class=\"hljs-params\">(ArrayList&lt;Complex&gt; x, <span class=\"hljs-type\">boolean</span> inverse)</span> {\r\n        <span class=\"hljs-comment\">/* Pad the signal with zeros if necessary */</span>\r\n        paddingPowerOfTwo(x);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> x.size();\r\n\r\n        <span class=\"hljs-comment\">/* Find the log2(N) */</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">log2N</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">while</span> ((<span class=\"hljs-number\">1</span> &lt;&lt; log2N) &lt; N) {\r\n            log2N++;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* Swap the values of the signal with bit-reversal method */</span>\r\n        <span class=\"hljs-type\">int</span> reverse;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n            reverse = reverseBits(i, log2N);\r\n            <span class=\"hljs-keyword\">if</span> (i &lt; reverse) {\r\n                Collections.swap(x, i, reverse);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">direction</span> <span class=\"hljs-operator\">=</span> inverse ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-comment\">/* Main loop of the algorithm */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; len &lt;= N; len *= <span class=\"hljs-number\">2</span>) {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">angle</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">2</span> * Math.PI / len * direction;\r\n            <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">wlen</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>(Math.cos(angle), Math.sin(angle));\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i += len) {\r\n                <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">w</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; len / <span class=\"hljs-number\">2</span>; j++) {\r\n                    <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">u</span> <span class=\"hljs-operator\">=</span> x.get(i + j);\r\n                    <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">=</span> w.multiply(x.get(i + j + len / <span class=\"hljs-number\">2</span>));\r\n                    x.set(i + j, u.add(v));\r\n                    x.set(i + j + len / <span class=\"hljs-number\">2</span>, u.subtract(v));\r\n                    w = w.multiply(wlen);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* Divide by N if we want the inverse FFT */</span>\r\n        <span class=\"hljs-keyword\">if</span> (inverse) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; x.size(); i++) {\r\n                <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">z</span> <span class=\"hljs-operator\">=</span> x.get(i);\r\n                x.set(i, z.divide(N));\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This function reverses the bits of a number. It is used in Cooley-Tukey\r\n     * FFT algorithm.\r\n     *\r\n     * &lt;p&gt;\r\n     * E.g. num = 13 = 00001101 in binary log2N = 8 Then reversed = 176 =\r\n     * 10110000 in binary\r\n     *\r\n     * &lt;p&gt;\r\n     * More info: https://cp-algorithms.com/algebra/fft.html\r\n     * https://www.geeksforgeeks.org/write-an-efficient-c-program-to-reverse-bits-of-a-number/\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> num The integer you want to reverse its bits.\r\n     * <span class=\"hljs-doctag\">@param</span> log2N The number of bits you want to reverse.\r\n     * <span class=\"hljs-doctag\">@return</span> The reversed number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">reverseBits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num, <span class=\"hljs-type\">int</span> log2N)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">reversed</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; log2N; i++) {\r\n            <span class=\"hljs-keyword\">if</span> ((num &amp; (<span class=\"hljs-number\">1</span> &lt;&lt; i)) != <span class=\"hljs-number\">0</span>) {\r\n                reversed |= <span class=\"hljs-number\">1</span> &lt;&lt; (log2N - <span class=\"hljs-number\">1</span> - i);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> reversed;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method pads an ArrayList with zeros in order to have a size equal to\r\n     * the next power of two of the previous size.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> x The ArrayList to be padded.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">paddingPowerOfTwo</span><span class=\"hljs-params\">(ArrayList&lt;Complex&gt; x)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldSize</span> <span class=\"hljs-operator\">=</span> x.size();\r\n        <span class=\"hljs-keyword\">while</span> (n &lt; oldSize) {\r\n            n *= <span class=\"hljs-number\">2</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n - oldSize; i++) {\r\n            x.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>());\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "JohnKara",
      "email": "kcioannis@csd.auth.gr",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}