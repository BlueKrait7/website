{
  "slug": "28",
  "name": "28",
  "categories": [
    "leetcode"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "leetcode\\src\\28.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/leetcode\\src\\28.c",
      "code": "<span class=\"hljs-comment\">/*\r\n * brute force approach\r\n * time complexity: O(mn)\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">strStr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *haystack, <span class=\"hljs-type\">char</span> *needle)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> hlen = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> nlen = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (needle == <span class=\"hljs-literal\">NULL</span> || *needle == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (haystack == <span class=\"hljs-literal\">NULL</span> || *haystack == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n\r\n    hlen = <span class=\"hljs-built_in\">strlen</span>(haystack);\r\n    nlen = <span class=\"hljs-built_in\">strlen</span>(needle);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (hlen &lt; nlen)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= hlen - nlen; i++)\r\n    {\r\n        j = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">if</span> (haystack[i] != needle[j++])\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n\r\n        k = i + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">for</span> (; j &lt; nlen; j++)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (haystack[k] != needle[j])\r\n            {\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n                k++;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (j == nlen)\r\n            <span class=\"hljs-keyword\">return</span> i;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/* ----------------------------------------------------------------------------------------\r\n */</span>\r\n\r\n<span class=\"hljs-comment\">/*\r\n * KMP algorithm\r\n * time complexity: O(m + n)\r\n */</span>\r\n\r\n<span class=\"hljs-comment\">/* fills overlap with longest proper prefix which is also suffix for each index\r\n * in needle */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fill_overlap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *needle, <span class=\"hljs-type\">int</span> len_needle, <span class=\"hljs-type\">int</span> *overlap)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> len = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n\r\n    overlap[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; len_needle;)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (needle[i] == needle[len])\r\n        {\r\n            len++;\r\n            overlap[i++] = len;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (len)\r\n                len = overlap[len - <span class=\"hljs-number\">1</span>];\r\n            <span class=\"hljs-keyword\">else</span>\r\n                overlap[i++] = <span class=\"hljs-number\">0</span>;\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">strStr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *haystack, <span class=\"hljs-type\">char</span> *needle)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* index for haystack */</span>\r\n    <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* index for needle */</span>\r\n\r\n    <span class=\"hljs-type\">int</span> len_needle = <span class=\"hljs-built_in\">strlen</span>(needle);\r\n    <span class=\"hljs-type\">int</span> len_haystack = <span class=\"hljs-built_in\">strlen</span>(haystack);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (!len_needle)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-type\">int</span> overlap[len_needle];\r\n\r\n    fill_overlap(needle, len_needle, overlap);\r\n\r\n    <span class=\"hljs-keyword\">while</span> (i &lt; len_haystack)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (needle[j] == haystack[i])\r\n        {\r\n            i++;\r\n            j++;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (j == len_needle)\r\n        {\r\n            <span class=\"hljs-keyword\">return</span> (i - j);\r\n        }\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; len_haystack &amp;&amp; needle[j] != haystack[i])\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (j != <span class=\"hljs-number\">0</span>)\r\n                j = overlap[j - <span class=\"hljs-number\">1</span>];\r\n            <span class=\"hljs-keyword\">else</span>\r\n                i = i + <span class=\"hljs-number\">1</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/* ----------------------------------------------------------------------------------------\r\n */</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Shubham Patil",
      "email": "shubhampatil.patil@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}