{
  "slug": "mergesort",
  "name": "Mergesort",
  "categories": [
    "divideandconquer"
  ],
  "body": {
    "es": "<h4>Declaración de problema</h4>\n<p>Dada una matriz de n elementos, escriba una función para ordenar la matriz</p>\n<h4>Enfoque</h4>\n<ul>\n<li>Encontrar un punto medio y dividir la matriz en mitades basadas en el punto medio</li>\n<li>Llamar recursivamente a la función de ordenación de fusión para las dos mitades</li>\n<li>Combinar las dos mitades ordenadas para obtener la matriz ordenada</li>\n</ul>\n<h4>Complejidad temporal</h4>\n<p><code>O(n log n)</code></p>\n<h4>Complejidad espacial</h4>\n<p><code>O(n)</code></p>\n<h4>Ejemplo</h4>\n<pre><code class=\"hljs language-markdown\">arr = [1, 3, 9, 5, 0, 2]  \r\n\r\nDivida la matriz en dos mitades [1, 3, 9] y [5, 0, 2]\r\n\r\nVuelva a llamar a la función de ordenación de combinación de llamadas para estas dos mitades, lo que proporcionará mitades ordenadas\r\n=> [1, 3, 9] &#x26; [0, 2, 5]\r\n\r\nAhora combine ambas mitades para obtener la matriz ordenada [0, 1, 2, 3, 5, 9]\n</code></pre>\n<h4>Enlaces de la implementación del código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/MergeSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/sorting/merge_sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/merge_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Comparison/MergeSorter.cs\">C-Sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/merge_sort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/sorting/merge_sort.rb\">Ruby</a></li>\n</ul>\n<h4>Explicación de vídeo</h4>\n<p><a href=\"https://www.youtube.com/watch?v=EeQ8pwjQxTM\">Un vídeo CS50 que explica el algoritmo de ordemaniento de fusión</a></p>",
    "en": "<h4>Problem Statement</h4>\n<p>Given an array of n elements, write a function to sort the array</p>\n<h4>Approach</h4>\n<ul>\n<li>Find a mid point and divide the array into to halves based on the mid point</li>\n<li>Recursively call the merge sort function for both the halves</li>\n<li>Merge the two sorted halves to get the sorted array</li>\n</ul>\n<h4>Time Complexity</h4>\n<pre><code class=\"hljs language-reasonml\">Best case - <span class=\"hljs-constructor\">O(<span class=\"hljs-params\">n</span> <span class=\"hljs-params\">log</span> <span class=\"hljs-params\">n</span>)</span>\r\nAverage - <span class=\"hljs-constructor\">O(<span class=\"hljs-params\">n</span> <span class=\"hljs-params\">log</span> <span class=\"hljs-params\">n</span>)</span>\r\nWorst case - <span class=\"hljs-constructor\">O(<span class=\"hljs-params\">n</span> <span class=\"hljs-params\">log</span> <span class=\"hljs-params\">n</span>)</span>\n</code></pre>\n<h4>Space Complexity</h4>\n<p><code>O(n)</code></p>\n<h4>Example 1</h4>\n<pre><code class=\"hljs language-json\">arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>]  \r\n\r\nDivide the array in two halves [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>] and [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>]\r\n\r\nRecursively call merge sort function for both these halves which will provide sorted halves\r\n=> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>] &#x26; [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>]\r\n\r\nNow merge both these halves to get the sorted array [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>]\n</code></pre>\n<h4>Example 2</h4>\n<pre><code class=\"hljs language-json\">arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>]  \r\n\r\nDivide the array into two halves [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>] and [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>]\r\n\r\nAs you can see that the above two halves are not yet sorted, so divide both of them into two halves again.\r\n\r\nThis time we get four arrays as [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>] and [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>].\r\n\r\nWe see that the last two arrays are again not sorted, so we divide them again into two halves and we will get [<span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">6</span>], and [<span class=\"hljs-number\">4</span>].\r\n\r\nSince an array of a single element is sorted, we now have all the arrays sorted, now we only need to merge them appropriately.\r\n\r\nFirst, the arrays of one element will be merged as they were divided in last, and are at top of the recursion stack, so we get [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>] and [<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>].\r\n\r\nNow the merge will occur accordingly to the recursion stack, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>] and [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>] will be merged and will make [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>].\r\n\r\nSimilarly [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>] and [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>] will be merged and made [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>].\r\n\r\nAt the next stack level [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>] and [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>] will be merged and we will get the final sorted array as [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>].\n</code></pre>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/MergeSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/sorting/merge_sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/merge_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Comparison/MergeSorter.cs\">C-Sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/merge_sort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/sorting/merge_sort.rb\">Ruby</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=EeQ8pwjQxTM\">A CS50 video explaining the Merge Sort Algorithm</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "sorts\\merge_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\merge_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is a pure Python implementation of the merge sort algorithm\r\nFor doctests run following command:\r\npython -m doctest -v merge_sort.py\r\nor\r\npython3 -m doctest -v merge_sort.py\r\nFor manual testing run:\r\npython merge_sort.py\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge_sort</span>(<span class=\"hljs-params\">collection: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of the merge sort algorithm in Python\r\n    :param collection: some mutable ordered collection with heterogeneous\r\n    comparable items inside\r\n    :return: the same collection ordered by ascending\r\n    Examples:\r\n    &gt;&gt;&gt; merge_sort([0, 5, 3, 2, 2])\r\n    [0, 2, 2, 3, 5]\r\n    &gt;&gt;&gt; merge_sort([])\r\n    []\r\n    &gt;&gt;&gt; merge_sort([-2, -5, -45])\r\n    [-45, -5, -2]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">left: <span class=\"hljs-built_in\">list</span>, right: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;merge left and right\r\n        :param left: left collection\r\n        :param right: right collection\r\n        :return: merge result\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_merge</span>():\r\n            <span class=\"hljs-keyword\">while</span> left <span class=\"hljs-keyword\">and</span> right:\r\n                <span class=\"hljs-keyword\">yield</span> (left <span class=\"hljs-keyword\">if</span> left[<span class=\"hljs-number\">0</span>] &lt;= right[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">else</span> right).pop(<span class=\"hljs-number\">0</span>)\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> left\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> right\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(_merge())\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(collection) &lt;= <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> collection\r\n    mid = <span class=\"hljs-built_in\">len</span>(collection) // <span class=\"hljs-number\">2</span>\r\n    <span class=\"hljs-keyword\">return</span> merge(merge_sort(collection[:mid]), merge_sort(collection[mid:]))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n    <span class=\"hljs-built_in\">print</span>(*merge_sort(unsorted), sep=<span class=\"hljs-string\">&quot;,&quot;</span>)\r\n"
    },
    "javascript": {
      "dir": "Sorts\\test\\MergeSort.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\test\\MergeSort.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { merge, mergeSort } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../MergeSort&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;merge&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should merge arrays correctly&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">merge</span>([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">merge</span>([], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">merge</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">merge</span>([], [])).<span class=\"hljs-title function_\">toEqual</span>([])\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;MergeSort&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should work for empty arrays&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">mergeSort</span>([])).<span class=\"hljs-title function_\">toEqual</span>([])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should sort arrays correctly&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">mergeSort</span>([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">mergeSort</span>([<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">9</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">mergeSort</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">mergeSort</span>([<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>])\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\merge_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\merge_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n *  \\addtogroup sorting Sorting Algorithms\r\n *  @{\r\n *  \\file\r\n *  \\brief [Merege Sort Algorithm\r\n *  (MEREGE SORT)](https://en.wikipedia.org/wiki/Merge_sort) implementation\r\n *\r\n *  \\author [Ayaan Khan](http://github.com/ayaankhan98)\r\n *\r\n *  \\details\r\n *  Merge Sort is an efficient, general purpose, comparison\r\n *  based sorting algorithm.\r\n *  Merge Sort is a divide and conquer algorithm\r\n *\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n *\r\n * The merge() function is used for merging two halves.\r\n * The merge(arr, l, m, r) is key process that assumes that\r\n * arr[l..m] and arr[m+1..r] are sorted and merges the two\r\n * sorted sub-arrays into one.\r\n *\r\n * @param arr - array with two halves arr[l...m] and arr[m+1...l]\r\n * @param l - left index or start index of first half array\r\n * @param m - right index or end index of first half array\r\n *\r\n * (The second array starts form m+1 and goes till l)\r\n *\r\n * @param l - end index or right index of second half array\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> r)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> i, j, k;\r\n    <span class=\"hljs-type\">int</span> n1 = m - l + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-type\">int</span> n2 = r - m;\r\n\r\n    <span class=\"hljs-type\">int</span> *L = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[n1], *R = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[n2];\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n1; i++) L[i] = arr[l + i];\r\n    <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; n2; j++) R[j] = arr[m + <span class=\"hljs-number\">1</span> + j];\r\n\r\n    i = <span class=\"hljs-number\">0</span>;\r\n    j = <span class=\"hljs-number\">0</span>;\r\n    k = l;\r\n    <span class=\"hljs-keyword\">while</span> (i &lt; n1 || j &lt; n2) {\r\n        <span class=\"hljs-keyword\">if</span> (j &gt;= n2 || (i &lt; n1 &amp;&amp; L[i] &lt;= R[j])) {\r\n            arr[k] = L[i];\r\n            i++;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            arr[k] = R[j];\r\n            j++;\r\n        }\r\n        k++;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">delete</span>[] L;\r\n    <span class=\"hljs-keyword\">delete</span>[] R;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Merge sort is a divide and conquer algorithm, it divides the\r\n * input array into two halves and calls itself for the two halves\r\n * and then calls merge() to merge the two halves\r\n *\r\n * @param arr - array to be sorted\r\n * @param l - left index or start index of array\r\n * @param r - right index or end index of array\r\n *\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">mergeSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (l &lt; r) {\r\n        <span class=\"hljs-type\">int</span> m = l + (r - l) / <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-built_in\">mergeSort</span>(arr, l, m);\r\n        <span class=\"hljs-built_in\">mergeSort</span>(arr, m + <span class=\"hljs-number\">1</span>, r);\r\n        <span class=\"hljs-built_in\">merge</span>(arr, l, m, r);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Utility function used to print the array after\r\n * sorting\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span> </span>{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> size;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number of elements : &quot;</span>;\r\n    std::cin &gt;&gt; size;\r\n    <span class=\"hljs-type\">int</span> *arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[size];\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the unsorted elements : &quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\r\n        std::cin &gt;&gt; arr[i];\r\n    }\r\n    <span class=\"hljs-built_in\">mergeSort</span>(arr, <span class=\"hljs-number\">0</span>, size - <span class=\"hljs-number\">1</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array : &quot;</span>;\r\n    <span class=\"hljs-built_in\">show</span>(arr, size);\r\n    <span class=\"hljs-keyword\">delete</span>[] arr;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n<span class=\"hljs-comment\">/** @} */</span>\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\MergeSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\MergeSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Generic merge sort algorithm.\r\n *\r\n * <span class=\"hljs-doctag\">@see</span> SortAlgorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MergeSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Generic merge sort algorithm implements.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> unsorted the array which should be sorted.\r\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; Comparable class.\r\n     * <span class=\"hljs-doctag\">@return</span> sorted array.\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] unsorted) {\r\n        doSort(unsorted, <span class=\"hljs-number\">0</span>, unsorted.length - <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-keyword\">return</span> unsorted;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> arr the array to be sorted.\r\n     * <span class=\"hljs-doctag\">@param</span> left the first index of the array.\r\n     * <span class=\"hljs-doctag\">@param</span> right the last index of the array.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doSort</span><span class=\"hljs-params\">(T[] arr, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (left &lt; right) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> (left + right) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\r\n            doSort(arr, left, mid);\r\n            doSort(arr, mid + <span class=\"hljs-number\">1</span>, right);\r\n            merge(arr, left, mid, right);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Merges two parts of an array.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arr the array to be merged.\r\n     * <span class=\"hljs-doctag\">@param</span> left the first index of the array.\r\n     * <span class=\"hljs-doctag\">@param</span> mid the middle index of the array.\r\n     * <span class=\"hljs-doctag\">@param</span> right the last index of the array merges two parts of an array in\r\n     * increasing order.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">(T[] arr, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> mid, <span class=\"hljs-type\">int</span> right)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> right - left + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-meta\">@SuppressWarnings(&quot;unchecked&quot;)</span>\r\n        T[] temp = (T[]) <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparable</span>[length];\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> left;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> mid + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) {\r\n            <span class=\"hljs-keyword\">if</span> (arr[i].compareTo(arr[j]) &lt;= <span class=\"hljs-number\">0</span>) {\r\n                temp[k++] = arr[i++];\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                temp[k++] = arr[j++];\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">while</span> (i &lt;= mid) {\r\n            temp[k++] = arr[i++];\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">while</span> (j &lt;= right) {\r\n            temp[k++] = arr[j++];\r\n        }\r\n\r\n        System.arraycopy(temp, <span class=\"hljs-number\">0</span>, arr, left, length);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Driver code\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">MergeSort</span> <span class=\"hljs-variable\">mergeSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MergeSort</span>();\r\n\r\n        Integer[] arr = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\r\n        mergeSort.sort(arr);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length - <span class=\"hljs-number\">1</span>; ++i) {\r\n            <span class=\"hljs-keyword\">assert</span> arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>];\r\n        }\r\n\r\n        String[] stringArray = {<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>};\r\n        mergeSort.sort(stringArray);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; stringArray.length - <span class=\"hljs-number\">1</span>; ++i) {\r\n            <span class=\"hljs-keyword\">assert</span> arr[i].compareTo(arr[i + <span class=\"hljs-number\">1</span>]) &lt;= <span class=\"hljs-number\">0</span>;\r\n        }\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\merge_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\merge_sort.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [merge\r\n * sort](https://en.wikipedia.org/wiki/Merge_sort) algorithm\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @addtogroup sorting Sorting algorithms\r\n * @{\r\n */</span>\r\n<span class=\"hljs-comment\">/** Swap two integer variables\r\n * @param [in,out] a pointer to first variable\r\n * @param [in,out] b pointer to second variable\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> *b)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> t;\r\n    t = *a;\r\n    *a = *b;\r\n    *b = t;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Perform merge of segments.\r\n *\r\n * @param a array to sort\r\n * @param l left index for merge\r\n * @param r right index for merge\r\n * @param n total number of elements in the array\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> *b = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>)); <span class=\"hljs-comment\">/* dynamic memory must be freed */</span>\r\n    <span class=\"hljs-type\">int</span> c = l;\r\n    <span class=\"hljs-type\">int</span> p1, p2;\r\n    p1 = l;\r\n    p2 = ((l + r) / <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">while</span> ((p1 &lt; ((l + r) / <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>) &amp;&amp; (p2 &lt; r + <span class=\"hljs-number\">1</span>))\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (a[p1] &lt;= a[p2])\r\n        {\r\n            b[c++] = a[p1];\r\n            p1++;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            b[c++] = a[p2];\r\n            p2++;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> (p2 == r + <span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">while</span> ((p1 &lt; ((l + r) / <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>))\r\n        {\r\n            b[c++] = a[p1];\r\n            p1++;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-keyword\">while</span> ((p2 &lt; r + <span class=\"hljs-number\">1</span>))\r\n        {\r\n            b[c++] = a[p2];\r\n            p2++;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (c = l; c &lt; r + <span class=\"hljs-number\">1</span>; c++) a[c] = b[c];\r\n\r\n    <span class=\"hljs-built_in\">free</span>(b);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Merge sort algorithm implementation\r\n * @param a array to sort\r\n * @param n number of elements in the array\r\n * @param l index to sort from\r\n * @param r index to sort till\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (r - l == <span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (a[l] &gt; a[r])\r\n            swap(&amp;a[l], &amp;a[r]);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (l != r)\r\n    {\r\n        merge_sort(a, n, l, (l + r) / <span class=\"hljs-number\">2</span>);\r\n        merge_sort(a, n, ((l + r) / <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>, r);\r\n        merge(a, l, r, n);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* no change if l == r */</span>\r\n}\r\n<span class=\"hljs-comment\">/** @} */</span>\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> *a, n, i;\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\r\n    a = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);\r\n    }\r\n\r\n    merge_sort(a, n, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; %d&quot;</span>, a[i]);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">free</span>(a);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "haskell": {
      "dir": "src\\Sorts\\MergeSort.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src\\Sorts\\MergeSort.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Sorts.MergeSort <span class=\"hljs-keyword\">where</span>\r\n\r\n<span class=\"hljs-title\">listToSort</span> = [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">20</span>]\r\n\r\n<span class=\"hljs-title\">mergeSort</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [a]\r\n<span class=\"hljs-title\">mergeSort</span> [] = [] <span class=\"hljs-comment\">-- Empty list is empty</span>\r\n<span class=\"hljs-title\">mergeSort</span> [x] = [x] <span class=\"hljs-comment\">-- Singleton lists are trivially sorted.</span>\r\n<span class=\"hljs-title\">mergeSort</span> [x, y] = [(min x y), (max x y)]\r\n<span class=\"hljs-title\">mergeSort</span> lst = merge (mergeSort leftL) (mergeSort rightL)\r\n                <span class=\"hljs-keyword\">where</span> leftL = take splitPoint lst\r\n                      rightL = drop splitPoint lst\r\n                      splitPoint = (length lst) `div` <span class=\"hljs-number\">2</span>\r\n\r\n<span class=\"hljs-comment\">-- Function to execute a merge of two sorted lists</span>\r\n<span class=\"hljs-title\">merge</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [a] -&gt; [a]\r\n<span class=\"hljs-title\">merge</span> l1 [] = l1\r\n<span class=\"hljs-title\">merge</span> [] l2 = l2\r\n<span class=\"hljs-title\">merge</span> lst1@(x:xs) lst2@(y:ys) = <span class=\"hljs-keyword\">if</span> x &lt; y \r\n                                <span class=\"hljs-keyword\">then</span> x:(merge xs lst2)\r\n                                <span class=\"hljs-keyword\">else</span> y:(merge lst1 ys)\r\n\r\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\r\n    putStrLn $ <span class=\"hljs-string\">&quot;Unsorted: &quot;</span> ++ show listToSort\r\n    putStrLn $ <span class=\"hljs-string\">&quot;Sorted: &quot;</span> ++ show (mergeSort listToSort)"
    },
    "f-sharp": {
      "dir": "Algorithms\\Sort\\Merge_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Sort\\Merge_Sort.fs",
      "code": "<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\r\n\r\n<span class=\"hljs-keyword\">module</span> MergeSort <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-keyword\">let</span> split list <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> aux l acc1 acc2 <span class=\"hljs-operator\">=</span>\r\n            <span class=\"hljs-keyword\">match</span> l <span class=\"hljs-keyword\">with</span>\r\n            <span class=\"hljs-operator\">|</span> [] <span class=\"hljs-operator\">-&gt;</span> (acc1, acc2)\r\n            <span class=\"hljs-operator\">|</span> [ x ] <span class=\"hljs-operator\">-&gt;</span> (x <span class=\"hljs-operator\">::</span> acc1, acc2)\r\n            <span class=\"hljs-operator\">|</span> x <span class=\"hljs-operator\">::</span> y <span class=\"hljs-operator\">::</span> tail <span class=\"hljs-operator\">-&gt;</span> aux tail (x <span class=\"hljs-operator\">::</span> acc1) (y <span class=\"hljs-operator\">::</span> acc2)\r\n\r\n        aux list [] []\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> merge l1 l2 <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">match</span> (l1, l2) <span class=\"hljs-keyword\">with</span>\r\n        <span class=\"hljs-operator\">|</span> (x, []) <span class=\"hljs-operator\">-&gt;</span> x\r\n        <span class=\"hljs-operator\">|</span> ([], y) <span class=\"hljs-operator\">-&gt;</span> y\r\n        <span class=\"hljs-operator\">|</span> (x <span class=\"hljs-operator\">::</span> tx, y <span class=\"hljs-operator\">::</span> ty) <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-keyword\">if</span> x <span class=\"hljs-operator\">&lt;=</span> y <span class=\"hljs-keyword\">then</span> x <span class=\"hljs-operator\">::</span> merge tx l2 <span class=\"hljs-keyword\">else</span> y <span class=\"hljs-operator\">::</span> merge l1 ty\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> sort list <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">match</span> list <span class=\"hljs-keyword\">with</span>\r\n        <span class=\"hljs-operator\">|</span> [] <span class=\"hljs-operator\">-&gt;</span> []\r\n        <span class=\"hljs-operator\">|</span> [ x ] <span class=\"hljs-operator\">-&gt;</span> [ x ]\r\n        <span class=\"hljs-operator\">|</span> _ <span class=\"hljs-operator\">-&gt;</span>\r\n            <span class=\"hljs-keyword\">let</span> (l1, l2) <span class=\"hljs-operator\">=</span> split list\r\n            merge (sort l1) (sort l2)\r\n"
    },
    "go": {
      "dir": "sort\\mergesort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sort\\mergesort.go",
      "code": "<span class=\"hljs-keyword\">package</span> sort\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/min&quot;</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(a []<span class=\"hljs-type\">int</span>, b []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\r\n\t<span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(a)+<span class=\"hljs-built_in\">len</span>(b))\r\n\t<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>\r\n\t<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i &lt; <span class=\"hljs-built_in\">len</span>(a) &amp;&amp; j &lt; <span class=\"hljs-built_in\">len</span>(b) {\r\n\r\n\t\t<span class=\"hljs-keyword\">if</span> a[i] &lt;= b[j] {\r\n\t\t\tr[i+j] = a[i]\r\n\t\t\ti++\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\tr[i+j] = b[j]\r\n\t\t\tj++\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i &lt; <span class=\"hljs-built_in\">len</span>(a) {\r\n\t\tr[i+j] = a[i]\r\n\t\ti++\r\n\t}\r\n\t<span class=\"hljs-keyword\">for</span> j &lt; <span class=\"hljs-built_in\">len</span>(b) {\r\n\t\tr[i+j] = b[j]\r\n\t\tj++\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> r\r\n\r\n}\r\n\r\n<span class=\"hljs-comment\">//Mergesort Perform mergesort on a slice of ints</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Mergesort</span><span class=\"hljs-params\">(items []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(items) &lt; <span class=\"hljs-number\">2</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> items\r\n\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">var</span> middle = <span class=\"hljs-built_in\">len</span>(items) / <span class=\"hljs-number\">2</span>\r\n\t<span class=\"hljs-keyword\">var</span> a = Mergesort(items[:middle])\r\n\t<span class=\"hljs-keyword\">var</span> b = Mergesort(items[middle:])\r\n\t<span class=\"hljs-keyword\">return</span> merge(a, b)\r\n\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MergeIter</span><span class=\"hljs-params\">(items []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">for</span> step := <span class=\"hljs-number\">1</span>; step &lt; <span class=\"hljs-built_in\">len</span>(items); step += step {\r\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i+step &lt; <span class=\"hljs-built_in\">len</span>(items); i += <span class=\"hljs-number\">2</span> * step {\r\n\t\t\ttmp := merge(items[i:i+step], items[i+step:min.Int(i+<span class=\"hljs-number\">2</span>*step, <span class=\"hljs-built_in\">len</span>(items))])\r\n\t\t\t<span class=\"hljs-built_in\">copy</span>(items[i:], tmp)\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> items\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\sorting\\merge_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\sorting\\merge_sort.rs",
      "code": "<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_merge</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T], lo: <span class=\"hljs-type\">usize</span>, mid: <span class=\"hljs-type\">usize</span>, hi: <span class=\"hljs-type\">usize</span>) {\r\n    <span class=\"hljs-comment\">// create temporary arrays to support merge</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">left_half</span> = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">right_half</span> = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-keyword\">in</span> arr.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">take</span>(mid + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">skip</span>(lo) {\r\n        left_half.<span class=\"hljs-title function_ invoke__\">push</span>(*v);\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-keyword\">in</span> arr.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">take</span>(hi + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">skip</span>(mid + <span class=\"hljs-number\">1</span>) {\r\n        right_half.<span class=\"hljs-title function_ invoke__\">push</span>(*v);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">lsize</span> = left_half.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rsize</span> = right_half.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n\r\n    <span class=\"hljs-comment\">// pointers to track the positions while merging</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">l</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">r</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">a</span> = lo;\r\n\r\n    <span class=\"hljs-comment\">// pick smaller element one by one from either left or right half</span>\r\n    <span class=\"hljs-keyword\">while</span> l &lt; lsize &amp;&amp; r &lt; rsize {\r\n        <span class=\"hljs-keyword\">if</span> left_half[l] &lt; right_half[r] {\r\n            arr[a] = left_half[l];\r\n            l += <span class=\"hljs-number\">1</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            arr[a] = right_half[r];\r\n            r += <span class=\"hljs-number\">1</span>;\r\n        }\r\n        a += <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// put all the remaining ones</span>\r\n    <span class=\"hljs-keyword\">while</span> l &lt; lsize {\r\n        arr[a] = left_half[l];\r\n        l += <span class=\"hljs-number\">1</span>;\r\n        a += <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">while</span> r &lt; rsize {\r\n        arr[a] = right_half[r];\r\n        r += <span class=\"hljs-number\">1</span>;\r\n        a += <span class=\"hljs-number\">1</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_merge_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T], lo: <span class=\"hljs-type\">usize</span>, hi: <span class=\"hljs-type\">usize</span>) {\r\n    <span class=\"hljs-keyword\">if</span> lo &lt; hi {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid</span> = lo + (hi - lo) / <span class=\"hljs-number\">2</span>;\r\n        _merge_sort(arr, lo, mid);\r\n        _merge_sort(arr, mid + <span class=\"hljs-number\">1</span>, hi);\r\n        _merge(arr, lo, mid, hi);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">merge_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n    <span class=\"hljs-keyword\">if</span> len &gt; <span class=\"hljs-number\">1</span> {\r\n        _merge_sort(arr, <span class=\"hljs-number\">0</span>, len - <span class=\"hljs-number\">1</span>);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\r\n        <span class=\"hljs-title function_ invoke__\">merge_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic_string</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;bb&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;cc&quot;</span>];\r\n        <span class=\"hljs-title function_ invoke__\">merge_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;bb&quot;</span>, <span class=\"hljs-string\">&quot;cc&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = Vec::&lt;<span class=\"hljs-type\">u8</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        <span class=\"hljs-title function_ invoke__\">merge_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-title function_ invoke__\">merge_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">pre_sorted</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\r\n        <span class=\"hljs-title function_ invoke__\">merge_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">reverse_sorted</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-title function_ invoke__\">merge_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\r\n    }\r\n}\r\n"
    },
    "aarch64_assembly": {
      "dir": "sorters\\merge_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters\\merge_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\r\n<span class=\"hljs-comment\">/*  program mergeSort64.s  */</span>\r\n \r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\r\n \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* Initialized data              */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.data</span>\r\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\r\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n \r\n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-symbol\">TableNumber:</span>      .quad   <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>\r\n<span class=\"hljs-comment\">#TableNumber:     .quad   10,9,8,7,6,-5,4,3,2,1</span>\r\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.bss</span>\r\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/*  code section                 */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.text</span>\r\n<span class=\"hljs-symbol\">.global</span> main \r\n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// first element</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> mergeSort\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">bl</span> displayTable\r\n \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\r\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\r\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\r\n \r\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\r\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\r\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\r\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\r\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\r\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\r\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\r\n<span class=\"hljs-symbol\">isSorted:</span>\r\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\r\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x4,x3\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\r\n<span class=\"hljs-number\">98</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">99</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*         merge                                              */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* r0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* r1 contains first start index\r\n/* r2 contains second start index */</span>\r\n<span class=\"hljs-comment\">/* r3 contains the last index   */</span> \r\n<span class=\"hljs-symbol\">merge:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">str</span> x8,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!\r\n    <span class=\"hljs-keyword\">mov</span> x5,x2                  <span class=\"hljs-comment\">// init index x2-&gt;x5 </span>\r\n<span class=\"hljs-number\">1</span>:                             <span class=\"hljs-comment\">// begin loop first section</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x1,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value first section index r1</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x7,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value second section index r5</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x6,x7\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">4</span>f                     <span class=\"hljs-comment\">// &lt;=  -&gt; location first section OK</span>\r\n    <span class=\"hljs-keyword\">str</span> x7,[x0,x1,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// store value second section in first section</span>\r\n    <span class=\"hljs-keyword\">add</span> x8,x5,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x8,x3                  <span class=\"hljs-comment\">// end second section ?</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">2</span>f\r\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">4</span>f                       <span class=\"hljs-comment\">// loop</span>\r\n<span class=\"hljs-number\">2</span>:                             <span class=\"hljs-comment\">// loop insert element part 1 into part 2</span>\r\n    <span class=\"hljs-keyword\">sub</span> x4,x8,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x7,[x0,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value 2</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x6,x7                  <span class=\"hljs-comment\">// value &lt; </span>\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">3</span>f\r\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// store value </span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">4</span>f                       <span class=\"hljs-comment\">// loop</span>\r\n<span class=\"hljs-number\">3</span>:\r\n    <span class=\"hljs-keyword\">str</span> x7,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// store value 2</span>\r\n    <span class=\"hljs-keyword\">add</span> x8,x8,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x8,x3                  <span class=\"hljs-comment\">// end second section ?</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">2</span>b                     <span class=\"hljs-comment\">// no loop </span>\r\n    <span class=\"hljs-keyword\">sub</span> x8,x8,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x8,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// store value 1</span>\r\n<span class=\"hljs-number\">4</span>:\r\n    <span class=\"hljs-keyword\">add</span> x1,x1,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x1,x2                  <span class=\"hljs-comment\">// end first section ?</span>\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b\r\n \r\n<span class=\"hljs-number\">100</span>:\r\n    <span class=\"hljs-keyword\">ldr</span> x8,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>             <span class=\"hljs-comment\">// restaur 1 register</span>\r\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                        <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*      merge sort                                                */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the index of first element */</span>\r\n<span class=\"hljs-comment\">/* x2 contains the number of element */</span>\r\n<span class=\"hljs-symbol\">mergeSort:</span>\r\n    stp x3,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!    <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!    <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!    <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">2</span>               <span class=\"hljs-comment\">// end ?</span>\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">100</span>f\r\n    <span class=\"hljs-keyword\">lsr</span> x4,x2,<span class=\"hljs-number\">1</span>            <span class=\"hljs-comment\">// number of element of each subset</span>\r\n    <span class=\"hljs-keyword\">add</span> x5,x4,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">tst</span> x2,<span class=\"hljs-number\">#1</span>              <span class=\"hljs-comment\">// odd ?</span>\r\n    csel x4,x5,x4,ne\r\n    <span class=\"hljs-keyword\">mov</span> x5,x1              <span class=\"hljs-comment\">// save first element</span>\r\n    <span class=\"hljs-keyword\">mov</span> x6,x2              <span class=\"hljs-comment\">// save number of element</span>\r\n    <span class=\"hljs-keyword\">mov</span> x7,x4              <span class=\"hljs-comment\">// save number of element of each subset</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x4\r\n    <span class=\"hljs-keyword\">bl</span> mergeSort\r\n    <span class=\"hljs-keyword\">mov</span> x1,x7              <span class=\"hljs-comment\">// restaur number of element of each subset</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x6              <span class=\"hljs-comment\">// restaur  number of element</span>\r\n    <span class=\"hljs-keyword\">sub</span> x2,x2,x1\r\n    <span class=\"hljs-keyword\">mov</span> x3,x5              <span class=\"hljs-comment\">// restaur first element</span>\r\n    <span class=\"hljs-keyword\">add</span> x1,x1,x3              <span class=\"hljs-comment\">// + 1</span>\r\n    <span class=\"hljs-keyword\">bl</span> mergeSort           <span class=\"hljs-comment\">// sort first subset</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,x5              <span class=\"hljs-comment\">// restaur first element</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x7              <span class=\"hljs-comment\">// restaur number of element of each subset</span>\r\n    <span class=\"hljs-keyword\">add</span> x2,x2,x1\r\n    <span class=\"hljs-keyword\">mov</span> x3,x6              <span class=\"hljs-comment\">// restaur  number of element</span>\r\n    <span class=\"hljs-keyword\">add</span> x3,x3,x1 \r\n    <span class=\"hljs-keyword\">sub</span> x3,x3,<span class=\"hljs-number\">1</span>              <span class=\"hljs-comment\">// last index</span>\r\n    <span class=\"hljs-keyword\">bl</span> merge\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x3,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                        <span class=\"hljs-comment\">// return to address lr x30</span>\r\n \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-symbol\">displayTable:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> conversion10S                  <span class=\"hljs-comment\">// décimal conversion</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at // character</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\r\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">mov</span> x0,x2\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\r\n"
    },
    "dart": {
      "dir": "sort\\merge_sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort\\merge_sort.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span> <span class=\"hljs-keyword\">show</span> Random;\r\n\r\n<span class=\"hljs-keyword\">void</span> merge(<span class=\"hljs-built_in\">List</span> list, <span class=\"hljs-built_in\">int</span> lIndex, <span class=\"hljs-built_in\">int</span> mIndex, <span class=\"hljs-built_in\">int</span> rIndex) {\r\n  <span class=\"hljs-built_in\">int</span> lSize = mIndex - lIndex + <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-built_in\">int</span> rSize = rIndex - mIndex;\r\n\r\n  <span class=\"hljs-built_in\">List</span> lList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>(lSize);\r\n  <span class=\"hljs-built_in\">List</span> rList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>(rSize);\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; lSize; i++) lList[i] = list[lIndex + i];\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; rSize; j++) rList[j] = list[mIndex + j + <span class=\"hljs-number\">1</span>];\r\n\r\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;\r\n  <span class=\"hljs-built_in\">int</span> k = lIndex;\r\n\r\n  <span class=\"hljs-keyword\">while</span> (i &lt; lSize &amp;&amp; j &lt; rSize) {\r\n    <span class=\"hljs-keyword\">if</span> (lList[i] &lt;= rList[j]) {\r\n      list[k] = lList[i];\r\n      i++;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      list[k] = rList[j];\r\n      j++;\r\n    }\r\n    k++;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">while</span> (i &lt; lSize) {\r\n    list[k] = lList[i];\r\n    i++;\r\n    k++;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">while</span> (j &lt; rSize) {\r\n    list[k] = rList[j];\r\n    j++;\r\n    k++;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> mergeSort(<span class=\"hljs-built_in\">List</span> list, <span class=\"hljs-built_in\">int</span> lIndex, <span class=\"hljs-built_in\">int</span> rIndex) {\r\n  <span class=\"hljs-keyword\">if</span> (lIndex &lt; rIndex) {\r\n    <span class=\"hljs-built_in\">int</span> mIndex = (rIndex + lIndex) ~/ <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// finds the middle index</span>\r\n\r\n    mergeSort(list, lIndex, mIndex); <span class=\"hljs-comment\">// sorts the first half of the list</span>\r\n    mergeSort(list, mIndex + <span class=\"hljs-number\">1</span>, rIndex); <span class=\"hljs-comment\">// sorts the second half of the list</span>\r\n\r\n    merge(list, lIndex, mIndex, rIndex);\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-keyword\">final</span> seed = <span class=\"hljs-number\">100</span>, rnd = Random(), length = <span class=\"hljs-number\">100</span>;\r\n  <span class=\"hljs-keyword\">var</span> list =\r\n      <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;.generate(length, (i) =&gt; rnd.nextInt(seed), growable: <span class=\"hljs-keyword\">false</span>);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;before sorting:&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(list);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;--------------------------------------&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;After sorting:&#x27;</span>);\r\n  mergeSort(list, <span class=\"hljs-number\">0</span>, list.length - <span class=\"hljs-number\">1</span>);\r\n  <span class=\"hljs-built_in\">print</span>(list);\r\n}\r\n"
    },
    "r": {
      "dir": "Sorting-Algorithms\\merge_sort.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Sorting-Algorithms\\merge_sort.R",
      "code": "<span class=\"hljs-comment\"># Merge sort in R:</span>\r\n\r\nmerge.func <span class=\"hljs-operator\">&lt;-</span><span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>leftArray<span class=\"hljs-punctuation\">,</span> rightArray<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n    l <span class=\"hljs-operator\">&lt;-</span> numeric<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>leftArray<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>rightArray<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\r\n    leftIndex <span class=\"hljs-operator\">&lt;-</span> 1; rightIndex <span class=\"hljs-operator\">&lt;-</span> 1; i <span class=\"hljs-operator\">&lt;-</span> 1;\r\n    <span class=\"hljs-keyword\">for</span><span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>l<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-punctuation\">(</span>leftIndex <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>leftArray<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">&amp;&amp;</span> leftArray<span class=\"hljs-punctuation\">[</span>leftIndex<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;</span> rightArray<span class=\"hljs-punctuation\">[</span>rightIndex<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">||</span> rightIndex <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>rightArray<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n            l<span class=\"hljs-punctuation\">[</span>i<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;-</span> leftArray<span class=\"hljs-punctuation\">[</span>leftIndex<span class=\"hljs-punctuation\">]</span>\r\n            leftIndex <span class=\"hljs-operator\">&lt;-</span> leftIndex <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-punctuation\">}</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-punctuation\">{</span>\r\n            l<span class=\"hljs-punctuation\">[</span>i<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;-</span> rightArray<span class=\"hljs-punctuation\">[</span>rightIndex<span class=\"hljs-punctuation\">]</span>\r\n            rightIndex <span class=\"hljs-operator\">&lt;-</span> rightIndex <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-punctuation\">}</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>l<span class=\"hljs-punctuation\">)</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n\r\nmerge.sort <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span> \r\n        m <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">ceiling</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span>\r\n        leftArray <span class=\"hljs-operator\">&lt;-</span> merge.sort<span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span>m<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\r\n        rightArray <span class=\"hljs-operator\">&lt;-</span> merge.sort<span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">(</span>m <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">:</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\r\n        merge.func<span class=\"hljs-punctuation\">(</span>leftArray<span class=\"hljs-punctuation\">,</span> rightArray<span class=\"hljs-punctuation\">)</span>\r\n    <span class=\"hljs-punctuation\">}</span> \r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n\r\n<span class=\"hljs-comment\"># Example:</span>\r\n<span class=\"hljs-comment\"># merge.sort(c(5, 2, 3, 1, 4)) </span>\r\n<span class=\"hljs-comment\"># [1] 1 2 3 4 5</span>\r\n"
    },
    "ruby": {
      "dir": "sorting\\merge_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting\\merge_sort.rb",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge_sort</span><span class=\"hljs-params\">(array)</span></span>\r\n  <span class=\"hljs-keyword\">return</span> array <span class=\"hljs-keyword\">if</span> array.length &lt;= <span class=\"hljs-number\">1</span>\r\n\r\n  mid = array.length / <span class=\"hljs-number\">2</span>\r\n  first_array = array.slice(<span class=\"hljs-number\">0</span>..mid - <span class=\"hljs-number\">1</span>)\r\n  second_array = array.slice(mid..-<span class=\"hljs-number\">1</span>)\r\n\r\n  first_array = merge_sort first_array\r\n  second_array = merge_sort second_array\r\n\r\n  <span class=\"hljs-comment\"># merge</span>\r\n  result = []\r\n  <span class=\"hljs-keyword\">until</span> first_array.empty? &amp;&amp; second_array.empty?\r\n    <span class=\"hljs-keyword\">if</span> first_array.empty?\r\n      result.concat(second_array)\r\n      second_array.clear\r\n    <span class=\"hljs-keyword\">elsif</span> second_array.empty?\r\n      result.concat(first_array)\r\n      first_array.clear\r\n    <span class=\"hljs-keyword\">else</span>\r\n      result &lt;&lt; <span class=\"hljs-keyword\">if</span> first_array.first &lt; second_array.first\r\n                  first_array.shift\r\n                <span class=\"hljs-keyword\">else</span>\r\n                  second_array.shift\r\n                <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n  result\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-keyword\">__FILE__</span>\r\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\r\n\r\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\r\n  p merge_sort(list)\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "php": {
      "dir": "sorting\\mergeSort.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/sorting\\mergeSort.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">merge</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$arr1</span>,<span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$arr2</span></span>)</span>{\r\n    <span class=\"hljs-variable\">$result</span>=[];\r\n    <span class=\"hljs-variable\">$i</span>=<span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-variable\">$j</span>=<span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable\">$i</span>&lt;<span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$arr1</span>)&amp;&amp;<span class=\"hljs-variable\">$j</span>&lt;<span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$arr2</span>)){\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$arr2</span>[<span class=\"hljs-variable\">$j</span>]&gt;<span class=\"hljs-variable\">$arr1</span>[<span class=\"hljs-variable\">$i</span>]){\r\n            <span class=\"hljs-variable\">$result</span>[]=<span class=\"hljs-variable\">$arr1</span>[<span class=\"hljs-variable\">$i</span>];\r\n            <span class=\"hljs-variable\">$i</span>++;\r\n        }<span class=\"hljs-keyword\">else</span>{\r\n            <span class=\"hljs-variable\">$result</span>[]=<span class=\"hljs-variable\">$arr2</span>[<span class=\"hljs-variable\">$j</span>];\r\n            <span class=\"hljs-variable\">$j</span>++;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable\">$i</span>&lt;<span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$arr1</span>)){\r\n        <span class=\"hljs-variable\">$result</span>[]=<span class=\"hljs-variable\">$arr1</span>[<span class=\"hljs-variable\">$i</span>];\r\n        <span class=\"hljs-variable\">$i</span>++;\r\n    }\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable\">$j</span>&lt;<span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$arr2</span>)){\r\n        <span class=\"hljs-variable\">$result</span>[]=<span class=\"hljs-variable\">$arr2</span>[<span class=\"hljs-variable\">$j</span>];\r\n        <span class=\"hljs-variable\">$j</span>++;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$result</span>;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mergeSort</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$arr</span></span>)</span>{\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$arr</span>)&lt;=<span class=\"hljs-number\">1</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$arr</span>;\r\n    <span class=\"hljs-variable\">$mid</span>=<span class=\"hljs-title function_ invoke__\">floor</span>(<span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$arr</span>)/<span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-variable\">$left</span>=<span class=\"hljs-title function_ invoke__\">mergeSort</span>(<span class=\"hljs-title function_ invoke__\">array_slice</span>(<span class=\"hljs-variable\">$arr</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-variable\">$mid</span>));\r\n    <span class=\"hljs-variable\">$right</span>=<span class=\"hljs-title function_ invoke__\">mergeSort</span>(<span class=\"hljs-title function_ invoke__\">array_slice</span>(<span class=\"hljs-variable\">$arr</span>,<span class=\"hljs-variable\">$mid</span>));\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">merge</span>(<span class=\"hljs-variable\">$left</span>,<span class=\"hljs-variable\">$right</span>);\r\n\r\n\r\n}\r\n\r\n\r\n"
    },
    "elixir": {
      "dir": "lib\\sorting\\merge_sort.ex",
      "url": "https://github.com/TheAlgorithms/elixir/tree/master/lib\\sorting\\merge_sort.ex",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Algorithms.Sorting.MergeSort</span></span> <span class=\"hljs-keyword\">do</span>\r\n  <span class=\"hljs-variable\">@moduledoc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\r\n  Implementation of MergeSort algorithm (https://en.wikipedia.org/wiki/Merge_sort)\r\n\r\n  You will be given an array of numbers, you have to sort numbers in ascending order\r\n  using merge sort algorithm.\r\n\r\n  Merge sort algorithm uses a divide and conquer strategy.\r\n  It divide a list in two half. We compare the two heads of the halfs. \r\n  If the left one is smaller, we recursively sort with merge on tail of\r\n  left and the all right, and we put the head left at the top.\r\n  Else we do the same on reversed. \r\n\r\n  Example:\r\n    1. [2, 1, 5, 4, 3]\r\n    2. [2, 1, 5] [4, 3]\r\n    3. [2] [1, 5] | [3] [4]\r\n    4. [1, 2, 5] | [3] [4]\r\n    5. [1, 2, 3, 4, 5]  # Recursite reunite all the small lists\r\n\r\n   [2, 1, 5, 4, 3] =&gt; [1, 2, 3, 4, 5]\r\n\r\n  Complexity: O(n log n)\r\n  &quot;&quot;&quot;</span>\r\n  <span class=\"hljs-keyword\">require</span> Integer\r\n\r\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    take a List and return the List with the numbers ordered\r\n  &quot;&quot;&quot;</span>\r\n  <span class=\"hljs-variable\">@spec</span> merge_sort(list(Integer)) :: list(Integer)\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge_sort</span></span>([]), <span class=\"hljs-symbol\">do:</span> []\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge_sort</span></span>([x]), <span class=\"hljs-symbol\">do:</span> [x]\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge_sort</span></span>(numbers) <span class=\"hljs-keyword\">do</span>\r\n    l = length(numbers)\r\n    half = div(l, <span class=\"hljs-number\">2</span>)\r\n    right = merge_sort(Enum.take(numbers, half))\r\n    left = merge_sort(Enum.drop(numbers, half))\r\n    merge(right, left)\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-variable\">@spec</span> merge(list(Integer), list(Integer)) :: list(Integer)\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">merge</span></span>(left, []), <span class=\"hljs-symbol\">do:</span> Enum.concat([left])\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">merge</span></span>([], right), <span class=\"hljs-symbol\">do:</span> Enum.concat([right])\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">merge</span></span>([h_left | t_left], [h_right | t_right]) <span class=\"hljs-keyword\">do</span>\r\n    <span class=\"hljs-keyword\">case</span> h_left &lt; h_right <span class=\"hljs-keyword\">do</span>\r\n      <span class=\"hljs-literal\">true</span> -&gt; merge(t_left, [h_right] ++ t_right) |&gt; concat(h_left)\r\n      <span class=\"hljs-literal\">false</span> -&gt; Enum.concat([h_left], t_left) |&gt; merge(t_right) |&gt; concat(h_right)\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-variable\">@spec</span> concat(list(Integer), Integer) :: list(Integer)\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">concat</span></span>(list, element), <span class=\"hljs-symbol\">do:</span> Enum.concat([element], list)\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "kotlin": {
      "dir": "src\\main\\kotlin\\sort\\MergeSort.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src\\main\\kotlin\\sort\\MergeSort.kt",
      "code": "<span class=\"hljs-keyword\">package</span> sort\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This function implements Merge Sort\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\r\n * It is a Divide and Conquer algorithm. It sorts the array by dividing it into two halves and comparing the elements.\r\n *\r\n * Worst-case performance\t    O(n log n)\r\n * Best-case performance\t    O(n log n)\r\n * Average performance      \tO(n log n)\r\n * Worst-case space complexity\tO(n)\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">mergeSort</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;, start: <span class=\"hljs-type\">Int</span>, end: <span class=\"hljs-type\">Int</span>)</span></span> {\r\n\r\n    <span class=\"hljs-keyword\">val</span> temp = arrayOfNulls&lt;Comparable&lt;*&gt;&gt;(array.size) <span class=\"hljs-keyword\">as</span> Array&lt;T&gt;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (start &lt; end) {\r\n        <span class=\"hljs-keyword\">val</span> mid = start + (end - start) / <span class=\"hljs-number\">2</span>\r\n        mergeSort(array, start, mid)\r\n        mergeSort(array, mid + <span class=\"hljs-number\">1</span>, end)\r\n        merge(array, temp, start, mid, end)\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This function merges the two halves after comparing them\r\n * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\r\n * <span class=\"hljs-doctag\">@param</span> temp The temp array containing the values\r\n * <span class=\"hljs-doctag\">@param</span> start Starting index of the array\r\n * <span class=\"hljs-doctag\">@param</span> mid Middle index of the array\r\n * <span class=\"hljs-doctag\">@param</span> end Ending index of the array\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;, temp: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;, start: <span class=\"hljs-type\">Int</span>, mid: <span class=\"hljs-type\">Int</span>, end: <span class=\"hljs-type\">Int</span>)</span></span> {\r\n\r\n    System.arraycopy(array, start, temp, start, end - start + <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">var</span> i = start\r\n    <span class=\"hljs-keyword\">var</span> j = mid + <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">var</span> k = start\r\n\r\n    <span class=\"hljs-keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= end) {\r\n        <span class=\"hljs-keyword\">if</span> (temp[i] &lt; temp[j]) {\r\n            array[k++] = temp[i++]\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            array[k++] = temp[j++]\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">while</span> (i &lt;= mid) {\r\n        array[k++] = temp[i++]\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">while</span> (j &lt;= end) {\r\n        array[k++] = temp[j++]\r\n    }\r\n}"
    },
    "scala": {
      "dir": "src\\main\\scala\\Sort\\MergeSort.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src\\main\\scala\\Sort\\MergeSort.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Sort</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">MergeSort</span> </span>{\r\n\r\n  <span class=\"hljs-comment\">/** @param array\r\n    *   - a sequence of unsorted integers\r\n    * @return\r\n    *   - sequence of sorted integers @array\r\n    */</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mergeSort</span></span>(array: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>]): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sort</span></span>(array: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>]): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\r\n      <span class=\"hljs-type\">MS</span>(array, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>)\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">MS</span></span>(array: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>], low: <span class=\"hljs-type\">Int</span>, high: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\r\n      <span class=\"hljs-keyword\">if</span> (low &lt; high) {\r\n        <span class=\"hljs-keyword\">val</span> mid = (low + high) / <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-type\">MS</span>(array, low, mid)\r\n        <span class=\"hljs-type\">MS</span>(array, mid + <span class=\"hljs-number\">1</span>, high)\r\n        merge(array, low, mid, high)\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        array\r\n      }\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge</span></span>(array: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>], low: <span class=\"hljs-type\">Int</span>, mid: <span class=\"hljs-type\">Int</span>, high: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\r\n      <span class=\"hljs-comment\">// copy subarrays</span>\r\n      <span class=\"hljs-keyword\">val</span> left  = array.slice(low, mid + <span class=\"hljs-number\">1</span>)\r\n      <span class=\"hljs-keyword\">val</span> right = array.slice(mid + <span class=\"hljs-number\">1</span>, high + <span class=\"hljs-number\">1</span>)\r\n\r\n      <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>\r\n      <span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>\r\n      <span class=\"hljs-keyword\">var</span> k = low\r\n      <span class=\"hljs-keyword\">while</span> (k &lt; high + <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-comment\">// must check if empty to avoid exceptions</span>\r\n        <span class=\"hljs-keyword\">if</span> (i &gt; left.length - <span class=\"hljs-number\">1</span>) {\r\n          array(k) = right(j)\r\n          j = j + <span class=\"hljs-number\">1</span>\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j &gt; right.length - <span class=\"hljs-number\">1</span>) {\r\n          array(k) = left(i)\r\n          i = i + <span class=\"hljs-number\">1</span>\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (left(i) &lt;= right(j)) {\r\n          array(k) = left(i)\r\n          i = i + <span class=\"hljs-number\">1</span>\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n          array(k) = right(j)\r\n          j = j + <span class=\"hljs-number\">1</span>\r\n        }\r\n        k = k + <span class=\"hljs-number\">1</span>\r\n      }\r\n\r\n      array\r\n\r\n    }\r\n\r\n    sort(array)\r\n  }\r\n\r\n}\r\n"
    },
    "swift": {
      "dir": "sorts\\MergeSort.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/sorts\\MergeSort.swift",
      "code": "\r\n<span class=\"hljs-keyword\">import</span> Foundation\r\n\r\n<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">Array</span> <span class=\"hljs-title class_\">where</span> <span class=\"hljs-title class_\">Element</span>: <span class=\"hljs-title class_\">Comparable</span> {\r\n\t\r\n\t<span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">mergeSort</span>(<span class=\"hljs-params\">by</span> <span class=\"hljs-params\">comparison</span>: (<span class=\"hljs-type\">Element</span>, <span class=\"hljs-type\">Element</span>) -&gt; <span class=\"hljs-type\">Bool</span>) {\r\n\t\t<span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">self</span>.count <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> {\r\n\t\t\t<span class=\"hljs-keyword\">return</span>\r\n\t\t}\r\n\t\t_mergeSort(from: <span class=\"hljs-number\">0</span>, to: count <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>, by: comparison)\r\n\t}\r\n\t\r\n\t<span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">_mergeSort</span>(\r\n\t\t<span class=\"hljs-params\">from</span> <span class=\"hljs-params\">left</span>: <span class=\"hljs-type\">Int</span>,\r\n\t\t<span class=\"hljs-params\">to</span> <span class=\"hljs-params\">right</span>: <span class=\"hljs-type\">Int</span>,\r\n\t\t<span class=\"hljs-params\">by</span> <span class=\"hljs-params\">comparison</span>: (<span class=\"hljs-type\">Element</span>, <span class=\"hljs-type\">Element</span>) -&gt; <span class=\"hljs-type\">Bool</span>\r\n\t) {\r\n\t\t<span class=\"hljs-keyword\">if</span> left <span class=\"hljs-operator\">&lt;</span> right {\r\n\t\t\t<span class=\"hljs-keyword\">let</span> mid <span class=\"hljs-operator\">=</span> left <span class=\"hljs-operator\">+</span> (right <span class=\"hljs-operator\">-</span> left) <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2</span>\r\n\t\t\t_mergeSort(from: <span class=\"hljs-number\">0</span>, to: mid, by: comparison)\r\n\t\t\t_mergeSort(from: mid <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>, to: right, by: comparison)\r\n\t\t\t_merge(from: left, mid: mid, to: right, by: comparison)\r\n\t\t}\r\n\t}\r\n\t\r\n\t<span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">_merge</span>(\r\n\t\t<span class=\"hljs-params\">from</span> <span class=\"hljs-params\">left</span>: <span class=\"hljs-type\">Int</span>,\r\n\t\t<span class=\"hljs-params\">mid</span>: <span class=\"hljs-type\">Int</span>,\r\n\t\t<span class=\"hljs-params\">to</span> <span class=\"hljs-params\">right</span>: <span class=\"hljs-type\">Int</span>,\r\n\t\t<span class=\"hljs-params\">by</span> <span class=\"hljs-params\">comparison</span>: (<span class=\"hljs-type\">Element</span>, <span class=\"hljs-type\">Element</span>) -&gt; <span class=\"hljs-type\">Bool</span>\r\n\t) {\r\n\t\t<span class=\"hljs-keyword\">var</span> copy <span class=\"hljs-operator\">=</span> [<span class=\"hljs-type\">Element</span>](repeating: <span class=\"hljs-keyword\">self</span>[left], count: right <span class=\"hljs-operator\">-</span> left <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)\r\n\t\t<span class=\"hljs-keyword\">var</span> (leftStartIndex, rightStartIndex, currentIndex) <span class=\"hljs-operator\">=</span> (left, mid <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)\r\n\t\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">_</span> <span class=\"hljs-keyword\">in</span> left <span class=\"hljs-operator\">...</span> right {\r\n\t\t\t<span class=\"hljs-keyword\">if</span> leftStartIndex <span class=\"hljs-operator\">&gt;</span> mid {\r\n\t\t\t\tcopy[currentIndex] <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>[rightStartIndex]\r\n\t\t\t\trightStartIndex <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\r\n\t\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> rightStartIndex <span class=\"hljs-operator\">&gt;</span> right {\r\n\t\t\t\tcopy[currentIndex] <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>[leftStartIndex]\r\n\t\t\t\tleftStartIndex <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\r\n\t\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> comparison(<span class=\"hljs-keyword\">self</span>[leftStartIndex], <span class=\"hljs-keyword\">self</span>[rightStartIndex]) {\r\n\t\t\t\tcopy[currentIndex] <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>[leftStartIndex]\r\n\t\t\t\tleftStartIndex <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\r\n\t\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\t\tcopy[currentIndex] <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>[rightStartIndex]\r\n\t\t\t\trightStartIndex <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\r\n\t\t\t}\r\n\t\t\tcurrentIndex <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\r\n\t\t}\r\n\t\tleftStartIndex <span class=\"hljs-operator\">=</span> left\r\n\t\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> copy.indices {\r\n\t\t\t<span class=\"hljs-keyword\">self</span>[leftStartIndex] <span class=\"hljs-operator\">=</span> copy[i]\r\n\t\t\tleftStartIndex <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\r\n\t\t}\r\n\t}\r\n\t\r\n\t<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">mergeSorted</span>(<span class=\"hljs-params\">by</span> <span class=\"hljs-params\">comparison</span>: (<span class=\"hljs-type\">Element</span>, <span class=\"hljs-type\">Element</span>) -&gt; <span class=\"hljs-type\">Bool</span>) -&gt; <span class=\"hljs-type\">Array</span> {\r\n\t\t<span class=\"hljs-keyword\">var</span> copy <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>\r\n\t\tcopy.mergeSort(by: comparison)\r\n\t\t<span class=\"hljs-keyword\">return</span> copy\r\n\t}\r\n\t\r\n}\r\n\r\n<span class=\"hljs-comment\">// The code below can be used for testing</span>\r\n<span class=\"hljs-comment\">// var numberList = [15, 2, 23, 11, 3, 9]</span>\r\n<span class=\"hljs-comment\">// debugPrint(numberList.mergeSorted(by: &gt;))</span>\r\n<span class=\"hljs-comment\">// numberList.mergeSort(by: &lt;)</span>\r\n<span class=\"hljs-comment\">// debugPrint(numberList)</span>\r\n"
    },
    "elm": {
      "dir": "src\\Sorting\\MergeSort.elm",
      "url": "https://github.com/TheAlgorithms/elm/tree/master/src\\Sorting\\MergeSort.elm",
      "code": "<span class=\"hljs-keyword\">module</span> MergeSort <span class=\"hljs-keyword\">exposing</span> (..)\r\n\r\n<span class=\"hljs-keyword\">import</span> List <span class=\"hljs-keyword\">exposing</span> (drop, length, take)\r\n<span class=\"hljs-keyword\">import</span> Util <span class=\"hljs-keyword\">exposing</span> (sortingOutputDef)\r\n\r\n\r\n<span class=\"hljs-title\">insertInto</span> : <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">insertInto</span> toInsert lesserList greaterList =\r\n    <span class=\"hljs-keyword\">case</span> greaterList <span class=\"hljs-keyword\">of</span>\r\n        [] -&gt;\r\n            lesserList ++ [ toInsert ]\r\n\r\n        gHead :: gTail -&gt;\r\n            <span class=\"hljs-keyword\">if</span> toInsert &gt; gHead <span class=\"hljs-keyword\">then</span>\r\n                insertInto toInsert (lesserList ++ [ gHead ]) gTail\r\n\r\n            <span class=\"hljs-keyword\">else</span>\r\n                lesserList ++ [ toInsert ] ++ greaterList\r\n\r\n\r\n<span class=\"hljs-title\">mergeJoin</span> : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">mergeJoin</span> firstHalf secondHalf =\r\n    <span class=\"hljs-keyword\">case</span> firstHalf <span class=\"hljs-keyword\">of</span>\r\n        [] -&gt;\r\n            secondHalf\r\n\r\n        fHead :: fTail -&gt;\r\n            mergeJoin fTail (insertInto fHead [] secondHalf)\r\n\r\n\r\n<span class=\"hljs-title\">mergeSort</span> : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">mergeSort</span> inputList =\r\n    <span class=\"hljs-keyword\">case</span> inputList <span class=\"hljs-keyword\">of</span>\r\n        [] -&gt;\r\n            []\r\n\r\n        head :: [] -&gt;\r\n            [ head ]\r\n\r\n        _ -&gt;\r\n            mergeJoin (mergeSort &lt;| take (length inputList // <span class=\"hljs-number\">2</span>) inputList)\r\n                (mergeSort &lt;| drop (length inputList // <span class=\"hljs-number\">2</span>) inputList)\r\n\r\n\r\n<span class=\"hljs-title\">output</span> : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">String</span> -&gt; <span class=\"hljs-type\">String</span>\r\n<span class=\"hljs-title\">output</span> args =\r\n    sortingOutputDef args mergeSort\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\sorting\\merge_sort.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\sorting\\merge_sort.m",
      "code": "<span class=\"hljs-comment\">%% Merge sorting Algorithm:</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span> = <span class=\"hljs-title\">merge_sort</span><span class=\"hljs-params\">(x)</span></span>\r\n<span class=\"hljs-comment\">% function to sort vector &#x27;x&#x27; with using the merge sort algorithm</span>\r\n<span class=\"hljs-comment\">% INPUT: &#x27;x&#x27; array</span>\r\n<span class=\"hljs-comment\">% OUTPUT: sorted array</span>\r\nn = <span class=\"hljs-built_in\">length</span>(x);\r\n<span class=\"hljs-keyword\">if</span> n==<span class=\"hljs-number\">1</span>\r\n    y = x;\r\n<span class=\"hljs-keyword\">else</span>\r\n    m = <span class=\"hljs-built_in\">floor</span>(n/<span class=\"hljs-number\">2</span>);\r\n    left = merge_sort(x(<span class=\"hljs-number\">1</span>:m))    <span class=\"hljs-comment\">% sorting left part of vector</span>\r\n    right = merge_sort(x(m+<span class=\"hljs-number\">1</span>:n)) <span class=\"hljs-comment\">% sorting right part of vector</span>\r\n    y = merge(left,right)        <span class=\"hljs-comment\">% with using &#x27;merge&#x27; function, 2 part will be merged</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\">%% Merge Algorithm:</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">z</span> = <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(x,y)</span></span>\r\nn = <span class=\"hljs-built_in\">length</span>(x); m = <span class=\"hljs-built_in\">length</span>(y); z = <span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-number\">1</span>,n+m);\r\nix = <span class=\"hljs-number\">1</span>; \r\niy = <span class=\"hljs-number\">1</span>; \r\n<span class=\"hljs-keyword\">for</span> iz=<span class=\"hljs-number\">1</span>:(n+m)\r\n    <span class=\"hljs-comment\">% Deteremin the iz-th value for the merged array.</span>\r\n    <span class=\"hljs-keyword\">if</span> ix &gt; n\r\n        <span class=\"hljs-comment\">% All done with x-values. Select the next y-value.</span>\r\n        z(iz) = y(iy); iy = iy+<span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">elseif</span> iy &gt; m\r\n        <span class=\"hljs-comment\">% All done with y-values. Select the next x-value.</span>\r\n        z(iz) = x(ix); ix = ix + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">elseif</span> x(ix) &lt;= y(iy)\r\n        <span class=\"hljs-comment\">% The next x-value is less than or equal to the next y-value</span>\r\n        z(iz) = x(ix); ix = ix + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-comment\">% The next y-value is less than the next x-value</span>\r\n        z(iz) = y(iy); iy = iy + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "julia": {
      "dir": "src\\sorts\\merge_sort.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\sorts\\merge_sort.jl",
      "code": "<span class=\"hljs-keyword\">function</span> merge_sort!(arr::<span class=\"hljs-built_in\">Vector</span>{T},l::<span class=\"hljs-built_in\">Int</span>=<span class=\"hljs-number\">1</span>,r::<span class=\"hljs-built_in\">Int</span>=length(arr),temp::<span class=\"hljs-built_in\">Vector</span>{T}=<span class=\"hljs-built_in\">Vector</span>{T}(<span class=\"hljs-literal\">undef</span>,r-l+<span class=\"hljs-number\">1</span>))<span class=\"hljs-keyword\">where</span> T\r\n    <span class=\"hljs-keyword\">if</span> l&gt;=r\r\n        <span class=\"hljs-keyword\">return</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-comment\"># split</span>\r\n    mid=(l+r)&gt;&gt;<span class=\"hljs-number\">1</span>\r\n    merge_sort!(arr,l,mid)\r\n    merge_sort!(arr,mid+<span class=\"hljs-number\">1</span>,r)\r\n    <span class=\"hljs-comment\"># merge</span>\r\n    l_pos=l <span class=\"hljs-comment\"># pos of the left part</span>\r\n    r_pos=mid+<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\"># pos of the right part</span>\r\n    <span class=\"hljs-keyword\">for</span> t_pos <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:r-l+<span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">if</span> l_pos&lt;=mid &amp;&amp; (r_pos&gt;r || arr[l_pos]&lt;arr[r_pos])\r\n            temp[t_pos]=arr[l_pos]\r\n            l_pos+=<span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>\r\n            temp[t_pos]=arr[r_pos]\r\n            r_pos+=<span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> l:r\r\n        arr[i]=temp[i-l+<span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "lua": {
      "dir": "src\\sorting\\mergesort.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src\\sorting\\mergesort.lua",
      "code": "<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\r\n\t<span class=\"hljs-comment\">-- list to be sorted in-place</span>\r\n\tlist,\r\n\t<span class=\"hljs-comment\">-- function(a, b) -&gt; truthy value if a &lt; b</span>\r\n\tless_than\r\n)</span></span>\r\n\tless_than = less_than <span class=\"hljs-keyword\">or</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span></span>\r\n\t\t<span class=\"hljs-keyword\">return</span> a &lt; b\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-comment\">-- Merges two sorted lists; elements of a come before those of b</span>\r\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(result, list_1, list_2)</span></span>\r\n\t\t<span class=\"hljs-keyword\">local</span> result_index = <span class=\"hljs-number\">1</span>\r\n\t\t<span class=\"hljs-keyword\">local</span> index_1 = <span class=\"hljs-number\">1</span>\r\n\t\t<span class=\"hljs-keyword\">local</span> index_2 = <span class=\"hljs-number\">1</span>\r\n\t\t<span class=\"hljs-keyword\">while</span> index_1 &lt;= #list_1 <span class=\"hljs-keyword\">and</span> index_2 &lt;= #list_2 <span class=\"hljs-keyword\">do</span>\r\n\t\t\t<span class=\"hljs-comment\">-- Compare &quot;head&quot; element, insert &quot;winner&quot;</span>\r\n\t\t\t<span class=\"hljs-keyword\">if</span> less_than(list_2[index_2], list_1[index_1]) <span class=\"hljs-keyword\">then</span>\r\n\t\t\t\tresult[result_index] = list_2[index_2]\r\n\t\t\t\tindex_2 = index_2 + <span class=\"hljs-number\">1</span>\r\n\t\t\t<span class=\"hljs-keyword\">else</span>\r\n\t\t\t\tresult[result_index] = list_1[index_1]\r\n\t\t\t\tindex_1 = index_1 + <span class=\"hljs-number\">1</span>\r\n\t\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t\tresult_index = result_index + <span class=\"hljs-number\">1</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-comment\">-- Add remaining elements of either list or other_list</span>\r\n\t\t<span class=\"hljs-keyword\">for</span> offset = <span class=\"hljs-number\">0</span>, #list_1 - index_1 <span class=\"hljs-keyword\">do</span>\r\n\t\t\tresult[result_index + offset] = list_1[index_1 + offset]\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">for</span> offset = <span class=\"hljs-number\">0</span>, #list_2 - index_2 <span class=\"hljs-keyword\">do</span>\r\n\t\t\tresult[result_index + offset] = list_2[index_2 + offset]\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\r\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mergesort</span><span class=\"hljs-params\">(list_to_sort, lower_index, upper_index)</span></span>\r\n\t\t<span class=\"hljs-keyword\">if</span> lower_index == upper_index <span class=\"hljs-keyword\">then</span>\r\n\t\t\tlist_to_sort[<span class=\"hljs-number\">1</span>] = list[lower_index]\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> lower_index &gt;= upper_index <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">local</span> middle_index = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">floor</span>((upper_index + lower_index) / <span class=\"hljs-number\">2</span>)\r\n\r\n\t\t<span class=\"hljs-keyword\">local</span> left = {}\r\n\t\tmergesort(left, lower_index, middle_index)\r\n\t\t<span class=\"hljs-keyword\">local</span> right = {}\r\n\t\tmergesort(right, middle_index + <span class=\"hljs-number\">1</span>, upper_index)\r\n\r\n\t\tmerge(list_to_sort, left, right)\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\tmergesort(list, <span class=\"hljs-number\">1</span>, #list)\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/External/ExternalMergeSorter.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sorters\\External\\ExternalMergeSorter.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.External</span>\r\n{\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExternalMergeSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IExternalSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">\r\n            ISequentialStorage&lt;T&gt; mainMemory,\r\n            ISequentialStorage&lt;T&gt; temporaryMemory,\r\n            IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> originalSource = mainMemory;\r\n            <span class=\"hljs-keyword\">var</span> source = mainMemory;\r\n            <span class=\"hljs-keyword\">var</span> temp = temporaryMemory;\r\n            <span class=\"hljs-keyword\">var</span> totalLength = mainMemory.Length;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> stripLength = <span class=\"hljs-number\">1L</span>; stripLength &lt; totalLength; stripLength *= <span class=\"hljs-number\">2</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> left = source.GetReader();\r\n                <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> right = source.GetReader();\r\n                <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> output = temp.GetWriter();\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0L</span>; i &lt; stripLength; i++)\r\n                {\r\n                    right.Read();\r\n                }\r\n\r\n                Merge(left, right, output, stripLength, Math.Min(stripLength, totalLength - stripLength), comparer);\r\n                <span class=\"hljs-keyword\">var</span> step = <span class=\"hljs-number\">2</span> * stripLength;\r\n                <span class=\"hljs-built_in\">long</span> rightStripStart;\r\n                <span class=\"hljs-keyword\">for</span> (rightStripStart = stripLength + step; rightStripStart &lt; mainMemory.Length; rightStripStart += step)\r\n                {\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0L</span>; i &lt; stripLength; i++)\r\n                    {\r\n                        left.Read();\r\n                        right.Read();\r\n                    }\r\n\r\n                    Merge(\r\n                        left,\r\n                        right,\r\n                        output,\r\n                        stripLength,\r\n                        Math.Min(stripLength, totalLength - rightStripStart),\r\n                        comparer);\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0L</span>; i &lt; totalLength + stripLength - rightStripStart; i++)\r\n                {\r\n                    output.Write(right.Read());\r\n                }\r\n\r\n                (source, temp) = (temp, source);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (source == originalSource)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> sorted = source.GetReader();\r\n            <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">var</span> dest = originalSource.GetWriter();\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; totalLength; i++)\r\n            {\r\n                dest.Write(sorted.Read());\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Merge</span>(<span class=\"hljs-params\">\r\n            ISequentialStorageReader&lt;T&gt; left,\r\n            ISequentialStorageReader&lt;T&gt; right,\r\n            ISequentialStorageWriter&lt;T&gt; output,\r\n            <span class=\"hljs-built_in\">long</span> leftLength,\r\n            <span class=\"hljs-built_in\">long</span> rightLength,\r\n            IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> leftIndex = <span class=\"hljs-number\">0L</span>;\r\n            <span class=\"hljs-keyword\">var</span> rightIndex = <span class=\"hljs-number\">0L</span>;\r\n\r\n            <span class=\"hljs-keyword\">var</span> l = left.Read();\r\n            <span class=\"hljs-keyword\">var</span> r = right.Read();\r\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (comparer.Compare(l, r) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    output.Write(l);\r\n                    leftIndex++;\r\n                    <span class=\"hljs-keyword\">if</span> (leftIndex == leftLength)\r\n                    {\r\n                        <span class=\"hljs-keyword\">break</span>;\r\n                    }\r\n\r\n                    l = left.Read();\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    output.Write(r);\r\n                    rightIndex++;\r\n                    <span class=\"hljs-keyword\">if</span> (rightIndex == rightLength)\r\n                    {\r\n                        <span class=\"hljs-keyword\">break</span>;\r\n                    }\r\n\r\n                    r = right.Read();\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (leftIndex &lt; leftLength)\r\n            {\r\n                output.Write(l);\r\n                Copy(left, output, leftLength - leftIndex - <span class=\"hljs-number\">1</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (rightIndex &lt; rightLength)\r\n            {\r\n                output.Write(r);\r\n                Copy(right, output, rightLength - rightIndex - <span class=\"hljs-number\">1</span>);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Copy</span>(<span class=\"hljs-params\">ISequentialStorageReader&lt;T&gt; <span class=\"hljs-keyword\">from</span>, ISequentialStorageWriter&lt;T&gt; to, <span class=\"hljs-built_in\">long</span> count</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; count; i++)\r\n            {\r\n                to.Write(<span class=\"hljs-keyword\">from</span>.Read());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Lalit Umbarkar",
      "email": "MrL1605@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "abdelrhman",
      "email": "mohamed95zoytak@gmail.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Emil Suleymanov",
      "email": "emil.suleymanov@tum.de",
      "commits": 1
    },
    {
      "name": "Bhavya Karia",
      "email": "bhavyakaria@yahoo.in",
      "commits": 1
    },
    {
      "name": "Anirban166",
      "email": "bloodraven166@gmail.com",
      "commits": 1
    },
    {
      "name": "Matthias Gilch",
      "email": "matthias.gilch.mg@gmail.com",
      "commits": 1
    },
    {
      "name": "Nitin Bhojwani",
      "email": "nitinbhojwani1993@gmail.com",
      "commits": 1
    },
    {
      "name": "Ashwin Narayan",
      "email": "ashwinnarayan1994@gmail.com",
      "commits": 1
    },
    {
      "name": "Artur Parowicz",
      "email": "arturparowicz@gmail,com",
      "commits": 1
    },
    {
      "name": "Mohsen Asi",
      "email": "mohsen.asi87@gmail.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 1
    },
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 1
    },
    {
      "name": "t-mangoe",
      "email": "m.takashi.raruba.101.112@gmail.com",
      "commits": 1
    },
    {
      "name": "PoolOfDeath20",
      "email": "53143214+GervinFung@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "Rratic@163.com",
      "commits": 1
    },
    {
      "name": "Connor Bottum",
      "email": "cbb692@gmail.com",
      "commits": 1
    },
    {
      "name": "Navid Salehi",
      "email": "nvdsalehi@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "sayoojkz",
      "email": "35601680+sayoojkz@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ayanzunaid",
      "email": "ayanzunaid10@gmail.com",
      "commits": 1
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 1
    },
    {
      "name": "Sukhpreet K Sekhon",
      "email": "sukhpreetsekhon@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ed Mendoza",
      "email": "polyneue@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "Guo_1_9",
      "email": "gxx632364@gmail.com",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "Rakshit Raj",
      "email": "rraj.rakshit@gmail.com",
      "commits": 1
    },
    {
      "name": "@8848hg",
      "email": "53469557+Himalay12@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "wuyudi",
      "email": "wuyudi1109@gmail.com",
      "commits": 1
    },
    {
      "name": "Ekansh Mangal",
      "email": "43078195+EkanshMangal@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jigyasa G",
      "email": "jigsgandhi97@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashok Bakthavathsalam",
      "email": "kgashok@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Tommy.Liu",
      "email": "447569003@qq.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "JakeBonek",
      "email": "jake.bonek@gmail.com",
      "commits": 1
    },
    {
      "name": "varunu28",
      "email": "varun.u28@gmail.com",
      "commits": 2
    },
    {
      "name": "Rolf1e",
      "email": "tigran.slama@laposte.net",
      "commits": 2
    },
    {
      "name": "Erez Shomron",
      "email": "48328872+eshom@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "vzvu3k6k",
      "email": "vzvu3k6k@gmail.com",
      "commits": 2
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 2
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 2
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Guy Ariely",
      "email": "guyariely@gmail.com",
      "commits": 2
    },
    {
      "name": "wzx",
      "email": "hero22@qq.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Sanjeev",
      "email": "thedevelopersanjeev@gmail.com",
      "commits": 5
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es\\Algoritmos de Ordenamiento\\Ordenamiento de fusión.md",
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en\\Sorting Algorithms\\Merge Sort.md"
  }
}