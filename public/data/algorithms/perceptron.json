{
  "slug": "perceptron",
  "name": "Perceptron",
  "categories": [
    "neuralnetwork"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "neural_network\\perceptron.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/neural_network\\perceptron.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Perceptron\r\n    w = w + N * (d(k) - y) * x(k)\r\n\r\n    Using perceptron network for oil analysis, with Measuring of 3 parameters\r\n    that represent chemical characteristics we can classify the oil, in p1 or p2\r\n    p1 = -1\r\n    p2 = 1\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> random\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Perceptron</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">\r\n        self,\r\n        sample: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]],\r\n        target: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>],\r\n        learning_rate: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0.01</span>,\r\n        epoch_number: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">1000</span>,\r\n        bias: <span class=\"hljs-built_in\">float</span> = -<span class=\"hljs-number\">1</span>,\r\n    </span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Initializes a Perceptron network for oil analysis\r\n        :param sample: sample dataset of 3 parameters with shape [30,3]\r\n        :param target: variable for classification with two possible states -1 or 1\r\n        :param learning_rate: learning rate used in optimizing.\r\n        :param epoch_number: number of epochs to train network on.\r\n        :param bias: bias value for the network.\r\n\r\n        &gt;&gt;&gt; p = Perceptron([], (0, 1, 2))\r\n        Traceback (most recent call last):\r\n        ...\r\n        ValueError: Sample data can not be empty\r\n        &gt;&gt;&gt; p = Perceptron(([0], 1, 2), [])\r\n        Traceback (most recent call last):\r\n        ...\r\n        ValueError: Target data can not be empty\r\n        &gt;&gt;&gt; p = Perceptron(([0], 1, 2), (0, 1))\r\n        Traceback (most recent call last):\r\n        ...\r\n        ValueError: Sample data and Target data do not have matching lengths\r\n        &quot;&quot;&quot;</span>\r\n        self.sample = sample\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.sample) == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Sample data can not be empty&quot;</span>)\r\n        self.target = target\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.target) == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Target data can not be empty&quot;</span>)\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.sample) != <span class=\"hljs-built_in\">len</span>(self.target):\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Sample data and Target data do not have matching lengths&quot;</span>)\r\n        self.learning_rate = learning_rate\r\n        self.epoch_number = epoch_number\r\n        self.bias = bias\r\n        self.number_sample = <span class=\"hljs-built_in\">len</span>(sample)\r\n        self.col_sample = <span class=\"hljs-built_in\">len</span>(sample[<span class=\"hljs-number\">0</span>])  <span class=\"hljs-comment\"># number of columns in dataset</span>\r\n        self.weight: <span class=\"hljs-built_in\">list</span> = []\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">training</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Trains perceptron for epochs &lt;= given number of epochs\r\n        :return: None\r\n        &gt;&gt;&gt; data = [[2.0149, 0.6192, 10.9263]]\r\n        &gt;&gt;&gt; targets = [-1]\r\n        &gt;&gt;&gt; perceptron = Perceptron(data,targets)\r\n        &gt;&gt;&gt; perceptron.training() # doctest: +ELLIPSIS\r\n        (&#x27;\\\\nEpoch:\\\\n&#x27;, ...)\r\n        ...\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">for</span> sample <span class=\"hljs-keyword\">in</span> self.sample:\r\n            sample.insert(<span class=\"hljs-number\">0</span>, self.bias)\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.col_sample):\r\n            self.weight.append(random.random())\r\n\r\n        self.weight.insert(<span class=\"hljs-number\">0</span>, self.bias)\r\n\r\n        epoch_count = <span class=\"hljs-number\">0</span>\r\n\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            has_misclassified = <span class=\"hljs-literal\">False</span>\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.number_sample):\r\n                u = <span class=\"hljs-number\">0</span>\r\n                <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.col_sample + <span class=\"hljs-number\">1</span>):\r\n                    u = u + self.weight[j] * self.sample[i][j]\r\n                y = self.sign(u)\r\n                <span class=\"hljs-keyword\">if</span> y != self.target[i]:\r\n                    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.col_sample + <span class=\"hljs-number\">1</span>):\r\n                        self.weight[j] = (\r\n                            self.weight[j]\r\n                            + self.learning_rate\r\n                            * (self.target[i] - y)\r\n                            * self.sample[i][j]\r\n                        )\r\n                    has_misclassified = <span class=\"hljs-literal\">True</span>\r\n            <span class=\"hljs-comment\"># print(&#x27;Epoch: \\n&#x27;,epoch_count)</span>\r\n            epoch_count = epoch_count + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-comment\"># if you want control the epoch or just by error</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> has_misclassified:\r\n                <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot;\\nEpoch:\\n&quot;</span>, epoch_count))\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;------------------------\\n&quot;</span>)\r\n                <span class=\"hljs-comment\"># if epoch_count &gt; self.epoch_number or not error:</span>\r\n                <span class=\"hljs-keyword\">break</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-params\">self, sample: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        :param sample: example row to classify as P1 or P2\r\n        :return: None\r\n        &gt;&gt;&gt; data = [[2.0149, 0.6192, 10.9263]]\r\n        &gt;&gt;&gt; targets = [-1]\r\n        &gt;&gt;&gt; perceptron = Perceptron(data,targets)\r\n        &gt;&gt;&gt; perceptron.training() # doctest: +ELLIPSIS\r\n        (&#x27;\\\\nEpoch:\\\\n&#x27;, ...)\r\n        ...\r\n        &gt;&gt;&gt; perceptron.sort([-0.6508, 0.1097, 4.0009]) # doctest: +ELLIPSIS\r\n        (&#x27;Sample: &#x27;, ...)\r\n        classification: P...\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.sample) == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Sample data can not be empty&quot;</span>)\r\n        sample.insert(<span class=\"hljs-number\">0</span>, self.bias)\r\n        u = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.col_sample + <span class=\"hljs-number\">1</span>):\r\n            u = u + self.weight[i] * sample[i]\r\n\r\n        y = self.sign(u)\r\n\r\n        <span class=\"hljs-keyword\">if</span> y == -<span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot;Sample: &quot;</span>, sample))\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;classification: P1&quot;</span>)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot;Sample: &quot;</span>, sample))\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;classification: P2&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sign</span>(<span class=\"hljs-params\">self, u: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        threshold function for classification\r\n        :param u: input number\r\n        :return: 1 if the input is greater than 0, otherwise -1\r\n        &gt;&gt;&gt; data = [[0],[-0.5],[0.5]]\r\n        &gt;&gt;&gt; targets = [1,-1,1]\r\n        &gt;&gt;&gt; perceptron = Perceptron(data,targets)\r\n        &gt;&gt;&gt; perceptron.sign(0)\r\n        1\r\n        &gt;&gt;&gt; perceptron.sign(-0.5)\r\n        -1\r\n        &gt;&gt;&gt; perceptron.sign(0.5)\r\n        1\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> u &gt;= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> -<span class=\"hljs-number\">1</span>\r\n\r\n\r\nsamples = [\r\n    [-<span class=\"hljs-number\">0.6508</span>, <span class=\"hljs-number\">0.1097</span>, <span class=\"hljs-number\">4.0009</span>],\r\n    [-<span class=\"hljs-number\">1.4492</span>, <span class=\"hljs-number\">0.8896</span>, <span class=\"hljs-number\">4.4005</span>],\r\n    [<span class=\"hljs-number\">2.0850</span>, <span class=\"hljs-number\">0.6876</span>, <span class=\"hljs-number\">12.0710</span>],\r\n    [<span class=\"hljs-number\">0.2626</span>, <span class=\"hljs-number\">1.1476</span>, <span class=\"hljs-number\">7.7985</span>],\r\n    [<span class=\"hljs-number\">0.6418</span>, <span class=\"hljs-number\">1.0234</span>, <span class=\"hljs-number\">7.0427</span>],\r\n    [<span class=\"hljs-number\">0.2569</span>, <span class=\"hljs-number\">0.6730</span>, <span class=\"hljs-number\">8.3265</span>],\r\n    [<span class=\"hljs-number\">1.1155</span>, <span class=\"hljs-number\">0.6043</span>, <span class=\"hljs-number\">7.4446</span>],\r\n    [<span class=\"hljs-number\">0.0914</span>, <span class=\"hljs-number\">0.3399</span>, <span class=\"hljs-number\">7.0677</span>],\r\n    [<span class=\"hljs-number\">0.0121</span>, <span class=\"hljs-number\">0.5256</span>, <span class=\"hljs-number\">4.6316</span>],\r\n    [-<span class=\"hljs-number\">0.0429</span>, <span class=\"hljs-number\">0.4660</span>, <span class=\"hljs-number\">5.4323</span>],\r\n    [<span class=\"hljs-number\">0.4340</span>, <span class=\"hljs-number\">0.6870</span>, <span class=\"hljs-number\">8.2287</span>],\r\n    [<span class=\"hljs-number\">0.2735</span>, <span class=\"hljs-number\">1.0287</span>, <span class=\"hljs-number\">7.1934</span>],\r\n    [<span class=\"hljs-number\">0.4839</span>, <span class=\"hljs-number\">0.4851</span>, <span class=\"hljs-number\">7.4850</span>],\r\n    [<span class=\"hljs-number\">0.4089</span>, -<span class=\"hljs-number\">0.1267</span>, <span class=\"hljs-number\">5.5019</span>],\r\n    [<span class=\"hljs-number\">1.4391</span>, <span class=\"hljs-number\">0.1614</span>, <span class=\"hljs-number\">8.5843</span>],\r\n    [-<span class=\"hljs-number\">0.9115</span>, -<span class=\"hljs-number\">0.1973</span>, <span class=\"hljs-number\">2.1962</span>],\r\n    [<span class=\"hljs-number\">0.3654</span>, <span class=\"hljs-number\">1.0475</span>, <span class=\"hljs-number\">7.4858</span>],\r\n    [<span class=\"hljs-number\">0.2144</span>, <span class=\"hljs-number\">0.7515</span>, <span class=\"hljs-number\">7.1699</span>],\r\n    [<span class=\"hljs-number\">0.2013</span>, <span class=\"hljs-number\">1.0014</span>, <span class=\"hljs-number\">6.5489</span>],\r\n    [<span class=\"hljs-number\">0.6483</span>, <span class=\"hljs-number\">0.2183</span>, <span class=\"hljs-number\">5.8991</span>],\r\n    [-<span class=\"hljs-number\">0.1147</span>, <span class=\"hljs-number\">0.2242</span>, <span class=\"hljs-number\">7.2435</span>],\r\n    [-<span class=\"hljs-number\">0.7970</span>, <span class=\"hljs-number\">0.8795</span>, <span class=\"hljs-number\">3.8762</span>],\r\n    [-<span class=\"hljs-number\">1.0625</span>, <span class=\"hljs-number\">0.6366</span>, <span class=\"hljs-number\">2.4707</span>],\r\n    [<span class=\"hljs-number\">0.5307</span>, <span class=\"hljs-number\">0.1285</span>, <span class=\"hljs-number\">5.6883</span>],\r\n    [-<span class=\"hljs-number\">1.2200</span>, <span class=\"hljs-number\">0.7777</span>, <span class=\"hljs-number\">1.7252</span>],\r\n    [<span class=\"hljs-number\">0.3957</span>, <span class=\"hljs-number\">0.1076</span>, <span class=\"hljs-number\">5.6623</span>],\r\n    [-<span class=\"hljs-number\">0.1013</span>, <span class=\"hljs-number\">0.5989</span>, <span class=\"hljs-number\">7.1812</span>],\r\n    [<span class=\"hljs-number\">2.4482</span>, <span class=\"hljs-number\">0.9455</span>, <span class=\"hljs-number\">11.2095</span>],\r\n    [<span class=\"hljs-number\">2.0149</span>, <span class=\"hljs-number\">0.6192</span>, <span class=\"hljs-number\">10.9263</span>],\r\n    [<span class=\"hljs-number\">0.2012</span>, <span class=\"hljs-number\">0.2611</span>, <span class=\"hljs-number\">5.4631</span>],\r\n]\r\n\r\nexit = [\r\n    -<span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n    -<span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-number\">1</span>,\r\n]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n    network = Perceptron(\r\n        sample=samples, target=exit, learning_rate=<span class=\"hljs-number\">0.01</span>, epoch_number=<span class=\"hljs-number\">1000</span>, bias=-<span class=\"hljs-number\">1</span>\r\n    )\r\n    network.training()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Finished training perceptron&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Enter values to predict or q to exit&quot;</span>)\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n        sample: <span class=\"hljs-built_in\">list</span> = []\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(samples[<span class=\"hljs-number\">0</span>])):\r\n            user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;value: &quot;</span>).strip()\r\n            <span class=\"hljs-keyword\">if</span> user_input == <span class=\"hljs-string\">&quot;q&quot;</span>:\r\n                <span class=\"hljs-keyword\">break</span>\r\n            observation = <span class=\"hljs-built_in\">float</span>(user_input)\r\n            sample.insert(i, observation)\r\n        network.sort(sample)\r\n"
    }
  },
  "contributors": [
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "percy07",
      "email": "56677891+percy07@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "himanshujain171",
      "email": "43314193+himanshujain171@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Janith Wanniarachchi",
      "email": "janithcwanni@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "dilson",
      "email": "dilsonlira@gmail..com",
      "commits": 1
    },
    {
      "name": "Rafa leyva",
      "email": "rafael.leyva@4iq.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 2
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 2
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 2
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 3
    },
    {
      "name": "Francisco Matias",
      "email": "franciscomatias@alu.ufc.br",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}