{
  "slug": "ode-forward-euler",
  "name": "Ode Forward Euler",
  "categories": [
    "numericalmethods"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "numerical_methods\\ode_forward_euler.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods\\ode_forward_euler.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\authors [Krishna Vedala](https://github.com/kvedala)\r\n * \\brief Solve a multivariable first order [ordinary differential equation\r\n * (ODEs)](https://en.wikipedia.org/wiki/Ordinary_differential_equation) using\r\n * [forward Euler\r\n * method](https://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations#Euler_method)\r\n *\r\n * \\details\r\n * The ODE being solved is:\r\n * \\f{eqnarray*}{\r\n * \\dot{u} &amp;=&amp; v\\\\\r\n * \\dot{v} &amp;=&amp; -\\omega^2 u\\\\\r\n * \\omega &amp;=&amp; 1\\\\\r\n * [x_0, u_0, v_0] &amp;=&amp; [0,1,0]\\qquad\\ldots\\text{(initial values)}\r\n * \\f}\r\n * The exact solution for the above problem is:\r\n * \\f{eqnarray*}{\r\n * u(x) &amp;=&amp; \\cos(x)\\\\\r\n * v(x) &amp;=&amp; -\\sin(x)\\\\\r\n * \\f}\r\n * The computation results are stored to a text file `forward_euler.csv` and the\r\n * exact soltuion results in `exact.csv` for comparison.\r\n * &lt;img\r\n * src=&quot;https://raw.githubusercontent.com/TheAlgorithms/C-Plus-Plus/docs/images/numerical_methods/ode_forward_euler.svg&quot;\r\n * alt=&quot;Implementation solution&quot;/&gt;\r\n *\r\n * To implement [Van der Pol\r\n * oscillator](https://en.wikipedia.org/wiki/Van_der_Pol_oscillator), change the\r\n * ::problem function to:\r\n * ```cpp\r\n * const double mu = 2.0;\r\n * dy[0] = y[1];\r\n * dy[1] = mu * (1.f - y[0] * y[0]) * y[1] - y[0];\r\n * ```\r\n * \\see ode_midpoint_euler.cpp, ode_semi_implicit_euler.cpp\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fstream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;valarray&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Problem statement for a system with first-order differential\r\n * equations. Updates the system differential variables.\r\n * \\note This function can be updated to and ode of any order.\r\n *\r\n * @param[in] \t\tx \t\tindependent variable(s)\r\n * @param[in,out]\ty\t\tdependent variable(s)\r\n * @param[in,out]\tdy\t    first-derivative of dependent variable(s)\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">problem</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> &amp;x, std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *y,\r\n             std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *dy)</span> </span>{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> omega = <span class=\"hljs-number\">1.F</span>;             <span class=\"hljs-comment\">// some const for the problem</span>\r\n    (*dy)[<span class=\"hljs-number\">0</span>] = (*y)[<span class=\"hljs-number\">1</span>];                   <span class=\"hljs-comment\">// x dot // NOLINT</span>\r\n    (*dy)[<span class=\"hljs-number\">1</span>] = -omega * omega * (*y)[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">// y dot // NOLINT</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Exact solution of the problem. Used for solution comparison.\r\n *\r\n * @param[in] \t\tx \t\tindependent variable\r\n * @param[in,out]\ty\t\tdependent variable\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">exact_solution</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> &amp;x, std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *y)</span> </span>{\r\n    y[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = std::<span class=\"hljs-built_in\">cos</span>(x);\r\n    y[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = -std::<span class=\"hljs-built_in\">sin</span>(x);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** \\addtogroup ode Ordinary Differential Equations\r\n * Integration functions for implementations with solving [ordinary differential\r\n * equations](https://en.wikipedia.org/wiki/Ordinary_differential_equation)\r\n * (ODEs) of any order and and any number of independent variables.\r\n * @{\r\n */</span>\r\n<span class=\"hljs-comment\">/**\r\n * @brief Compute next step approximation using the forward-Euler\r\n * method. @f[y_{n+1}=y_n + dx\\cdot f\\left(x_n,y_n\\right)@f]\r\n * @param[in] \t\tdx\tstep size\r\n * @param[in] \t    x\ttake \\f$x_n\\f$ and compute \\f$x_{n+1}\\f$\r\n * @param[in,out] \ty\ttake \\f$y_n\\f$ and compute \\f$y_{n+1}\\f$\r\n * @param[in,out]\tdy\tcompute \\f$f\\left(x_n,y_n\\right)\\f$\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">forward_euler_step</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> dx, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> x,\r\n                        std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *y, std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *dy)</span> </span>{\r\n    <span class=\"hljs-built_in\">problem</span>(x, y, dy);\r\n    *y += *dy * dx;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Compute approximation using the forward-Euler\r\n * method in the given limits.\r\n * @param[in] \t\tdx  \tstep size\r\n * @param[in]   \tx0  \tinitial value of independent variable\r\n * @param[in] \t    x_max\tfinal value of independent variable\r\n * @param[in,out] \ty\t    take \\f$y_n\\f$ and compute \\f$y_{n+1}\\f$\r\n * @param[in] save_to_file\tflag to save results to a CSV file (1) or not (0)\r\n * @returns time taken for computation in seconds\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">forward_euler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> dx, <span class=\"hljs-type\">double</span> x0, <span class=\"hljs-type\">double</span> x_max,\r\n                     std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *y, <span class=\"hljs-type\">bool</span> save_to_file = <span class=\"hljs-literal\">false</span>)</span> </span>{\r\n    std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; dy = *y;\r\n\r\n    std::ofstream fp;\r\n    <span class=\"hljs-keyword\">if</span> (save_to_file) {\r\n        fp.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;forward_euler.csv&quot;</span>, std::ofstream::out);\r\n        <span class=\"hljs-keyword\">if</span> (!fp.<span class=\"hljs-built_in\">is_open</span>()) {\r\n            std::<span class=\"hljs-built_in\">perror</span>(<span class=\"hljs-string\">&quot;Error! &quot;</span>);\r\n        }\r\n    }\r\n\r\n    std::<span class=\"hljs-type\">size_t</span> L = y-&gt;<span class=\"hljs-built_in\">size</span>();\r\n\r\n    <span class=\"hljs-comment\">/* start integration */</span>\r\n    std::<span class=\"hljs-type\">clock_t</span> t1 = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-type\">double</span> x = x0;\r\n\r\n    <span class=\"hljs-keyword\">do</span> {  <span class=\"hljs-comment\">// iterate for each step of independent variable</span>\r\n        <span class=\"hljs-keyword\">if</span> (save_to_file &amp;&amp; fp.<span class=\"hljs-built_in\">is_open</span>()) {\r\n            <span class=\"hljs-comment\">// write to file</span>\r\n            fp &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; L - <span class=\"hljs-number\">1</span>; i++) {\r\n                fp &lt;&lt; y[<span class=\"hljs-number\">0</span>][i] &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;  <span class=\"hljs-comment\">// NOLINT</span>\r\n            }\r\n            fp &lt;&lt; y[<span class=\"hljs-number\">0</span>][L - <span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;  <span class=\"hljs-comment\">// NOLINT</span>\r\n        }\r\n\r\n        forward_euler_step(dx, x, y, &amp;dy);  <span class=\"hljs-comment\">// perform integration</span>\r\n        x += dx;                            <span class=\"hljs-comment\">// update step</span>\r\n    } <span class=\"hljs-keyword\">while</span> (x &lt;= x_max);  <span class=\"hljs-comment\">// till upper limit of independent variable</span>\r\n    <span class=\"hljs-comment\">/* end of integration */</span>\r\n    std::<span class=\"hljs-type\">clock_t</span> t2 = std::<span class=\"hljs-built_in\">clock</span>();\r\n\r\n    <span class=\"hljs-keyword\">if</span> (fp.<span class=\"hljs-built_in\">is_open</span>()) {\r\n        fp.<span class=\"hljs-built_in\">close</span>();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(t2 - t1) / CLOCKS_PER_SEC;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** @} */</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to compute and save exact solution for comparison\r\n *\r\n * \\param [in]    X0  \t    initial value of independent variable\r\n * \\param [in] \t  X_MAX\t    final value of independent variable\r\n * \\param [in] \t  step_size\tindependent variable step size\r\n * \\param [in]    Y0\t    initial values of dependent variables\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">save_exact_solution</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> &amp;X0, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> &amp;X_MAX,\r\n                         <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> &amp;step_size,\r\n                         <span class=\"hljs-type\">const</span> std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; &amp;Y0)</span> </span>{\r\n    <span class=\"hljs-type\">double</span> x = X0;\r\n    <span class=\"hljs-function\">std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; <span class=\"hljs-title\">y</span><span class=\"hljs-params\">(Y0)</span></span>;\r\n\r\n    <span class=\"hljs-function\">std::ofstream <span class=\"hljs-title\">fp</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;exact.csv&quot;</span>, std::ostream::out)</span></span>;\r\n    <span class=\"hljs-keyword\">if</span> (!fp.<span class=\"hljs-built_in\">is_open</span>()) {\r\n        std::<span class=\"hljs-built_in\">perror</span>(<span class=\"hljs-string\">&quot;Error! &quot;</span>);\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Finding exact solution\\n&quot;</span>;\r\n\r\n    std::<span class=\"hljs-type\">clock_t</span> t1 = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-keyword\">do</span> {\r\n        fp &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; y.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i++) {\r\n            fp &lt;&lt; y[i] &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;  <span class=\"hljs-comment\">// NOLINT</span>\r\n        }\r\n        fp &lt;&lt; y[y.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;  <span class=\"hljs-comment\">// NOLINT</span>\r\n\r\n        <span class=\"hljs-built_in\">exact_solution</span>(x, &amp;y);\r\n\r\n        x += step_size;\r\n    } <span class=\"hljs-keyword\">while</span> (x &lt;= X_MAX);\r\n\r\n    std::<span class=\"hljs-type\">clock_t</span> t2 = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-type\">double</span> total_time = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(t2 - t1) / CLOCKS_PER_SEC;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tTime = &quot;</span> &lt;&lt; total_time &lt;&lt; <span class=\"hljs-string\">&quot; ms\\n&quot;</span>;\r\n\r\n    fp.<span class=\"hljs-built_in\">close</span>();\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main Function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\r\n    <span class=\"hljs-type\">double</span> X0 = <span class=\"hljs-number\">0.f</span>;                    <span class=\"hljs-comment\">/* initial value of x0 */</span>\r\n    <span class=\"hljs-type\">double</span> X_MAX = <span class=\"hljs-number\">10.F</span>;                <span class=\"hljs-comment\">/* upper limit of integration */</span>\r\n    std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; Y0{<span class=\"hljs-number\">1.f</span>, <span class=\"hljs-number\">0.f</span>}; <span class=\"hljs-comment\">/* initial value Y = y(x = x_0) */</span>\r\n    <span class=\"hljs-type\">double</span> step_size = NAN;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">1</span>) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the step size: &quot;</span>;\r\n        std::cin &gt;&gt; step_size;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-comment\">// use commandline argument as independent variable step size</span>\r\n        step_size = std::<span class=\"hljs-built_in\">atof</span>(argv[<span class=\"hljs-number\">1</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// get approximate solution</span>\r\n    <span class=\"hljs-type\">double</span> total_time = forward_euler(step_size, X0, X_MAX, &amp;Y0, <span class=\"hljs-literal\">true</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tTime = &quot;</span> &lt;&lt; total_time &lt;&lt; <span class=\"hljs-string\">&quot; ms\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">/* compute exact solution for comparion */</span>\r\n    <span class=\"hljs-built_in\">save_exact_solution</span>(X0, X_MAX, step_size, Y0);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "c": {
      "dir": "numerical_methods\\ode_forward_euler.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/numerical_methods\\ode_forward_euler.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\authors [Krishna Vedala](https://github.com/kvedala)\r\n * \\brief Solve a multivariable first order [ordinary differential equation\r\n * (ODEs)](https://en.wikipedia.org/wiki/Ordinary_differential_equation) using\r\n * [forward Euler\r\n * method](https://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations#Euler_method)\r\n *\r\n * \\details\r\n * The ODE being solved is:\r\n * \\f{eqnarray*}{\r\n * \\dot{u} &amp;=&amp; v\\\\\r\n * \\dot{v} &amp;=&amp; -\\omega^2 u\\\\\r\n * \\omega &amp;=&amp; 1\\\\\r\n * [x_0, u_0, v_0] &amp;=&amp; [0,1,0]\\qquad\\ldots\\text{(initial values)}\r\n * \\f}\r\n * The exact solution for the above problem is:\r\n * \\f{eqnarray*}{\r\n * u(x) &amp;=&amp; \\cos(x)\\\\\r\n * v(x) &amp;=&amp; -\\sin(x)\\\\\r\n * \\f}\r\n * The computation results are stored to a text file `forward_euler.csv` and the\r\n * exact soltuion results in `exact.csv` for comparison.\r\n * &lt;img\r\n * src=&quot;https://raw.githubusercontent.com/TheAlgorithms/C/docs/images/numerical_methods/ode_forward_euler.svg&quot;\r\n * alt=&quot;Implementation solution&quot;/&gt;\r\n *\r\n * To implement [Van der Pol\r\n * oscillator](https://en.wikipedia.org/wiki/Van_der_Pol_oscillator), change the\r\n * ::problem function to:\r\n * ```cpp\r\n * const double mu = 2.0;\r\n * dy[0] = y[1];\r\n * dy[1] = mu * (1.f - y[0] * y[0]) * y[1] - y[0];\r\n * ```\r\n * \\see ode_midpoint_euler.c, ode_semi_implicit_euler.c\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> order 2 <span class=\"hljs-comment\">/**&lt; number of dependent variables in ::problem */</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Problem statement for a system with first-order differential\r\n * equations. Updates the system differential variables.\r\n * \\note This function can be updated to and ode of any order.\r\n *\r\n * @param[in] \t\tx \t\tindependent variable(s)\r\n * @param[in,out]\ty\t\tdependent variable(s)\r\n * @param[in,out]\tdy\t    first-derivative of dependent variable(s)\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">problem</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> *x, <span class=\"hljs-type\">double</span> *y, <span class=\"hljs-type\">double</span> *dy)</span>\r\n{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> omega = <span class=\"hljs-number\">1.F</span>;       <span class=\"hljs-comment\">// some const for the problem</span>\r\n    dy[<span class=\"hljs-number\">0</span>] = y[<span class=\"hljs-number\">1</span>];                   <span class=\"hljs-comment\">// x dot</span>\r\n    dy[<span class=\"hljs-number\">1</span>] = -omega * omega * y[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">// y dot</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Exact solution of the problem. Used for solution comparison.\r\n *\r\n * @param[in] \t\tx \t\tindependent variable\r\n * @param[in,out]\ty\t\tdependent variable\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">exact_solution</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> *x, <span class=\"hljs-type\">double</span> *y)</span>\r\n{\r\n    y[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-built_in\">cos</span>(x[<span class=\"hljs-number\">0</span>]);\r\n    y[<span class=\"hljs-number\">1</span>] = -<span class=\"hljs-built_in\">sin</span>(x[<span class=\"hljs-number\">0</span>]);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Compute next step approximation using the forward-Euler\r\n * method. @f[y_{n+1}=y_n + dx\\cdot f\\left(x_n,y_n\\right)@f]\r\n * @param[in] \t\tdx\tstep size\r\n * @param[in,out] \tx\ttake \\f$x_n\\f$ and compute \\f$x_{n+1}\\f$\r\n * @param[in,out] \ty\ttake \\f$y_n\\f$ and compute \\f$y_{n+1}\\f$\r\n * @param[in,out]\tdy\tcompute \\f$f\\left(x_n,y_n\\right)\\f$\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">forward_euler_step</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> dx, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> *x, <span class=\"hljs-type\">double</span> *y, <span class=\"hljs-type\">double</span> *dy)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> o;\r\n    problem(x, y, dy);\r\n    <span class=\"hljs-keyword\">for</span> (o = <span class=\"hljs-number\">0</span>; o &lt; order; o++) y[o] += dx * dy[o];\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Compute approximation using the forward-Euler\r\n * method in the given limits.\r\n * @param[in] \t\tdx  \tstep size\r\n * @param[in]   \tx0  \tinitial value of independent variable\r\n * @param[in] \t    x_max\tfinal value of independent variable\r\n * @param[in,out] \ty\t    take \\f$y_n\\f$ and compute \\f$y_{n+1}\\f$\r\n * @param[in] save_to_file\tflag to save results to a CSV file (1) or not (0)\r\n * @returns time taken for computation in seconds\r\n */</span>\r\n<span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">forward_euler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> dx, <span class=\"hljs-type\">double</span> x0, <span class=\"hljs-type\">double</span> x_max, <span class=\"hljs-type\">double</span> *y,\r\n                     <span class=\"hljs-type\">char</span> save_to_file)</span>\r\n{\r\n    <span class=\"hljs-type\">double</span> dy[order];\r\n\r\n    FILE *fp = <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-keyword\">if</span> (save_to_file)\r\n    {\r\n        fp = fopen(<span class=\"hljs-string\">&quot;forward_euler.csv&quot;</span>, <span class=\"hljs-string\">&quot;w+&quot;</span>);\r\n        <span class=\"hljs-keyword\">if</span> (fp == <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            perror(<span class=\"hljs-string\">&quot;Error! &quot;</span>);\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* start integration */</span>\r\n    <span class=\"hljs-type\">clock_t</span> t1 = clock();\r\n    <span class=\"hljs-type\">double</span> x = x0;\r\n    <span class=\"hljs-keyword\">do</span>  <span class=\"hljs-comment\">// iterate for each step of independent variable</span>\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (save_to_file &amp;&amp; fp)\r\n            <span class=\"hljs-built_in\">fprintf</span>(fp, <span class=\"hljs-string\">&quot;%.4g,%.4g,%.4g\\n&quot;</span>, x, y[<span class=\"hljs-number\">0</span>], y[<span class=\"hljs-number\">1</span>]);  <span class=\"hljs-comment\">// write to file</span>\r\n        forward_euler_step(dx, &amp;x, y, dy);  <span class=\"hljs-comment\">// perform integration</span>\r\n        x += dx;                            <span class=\"hljs-comment\">// update step</span>\r\n    } <span class=\"hljs-keyword\">while</span> (x &lt;= x_max);  <span class=\"hljs-comment\">// till upper limit of independent variable</span>\r\n    <span class=\"hljs-comment\">/* end of integration */</span>\r\n    <span class=\"hljs-type\">clock_t</span> t2 = clock();\r\n\r\n    <span class=\"hljs-keyword\">if</span> (save_to_file &amp;&amp; fp)\r\n        fclose(fp);\r\n\r\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">double</span>)(t2 - t1) / CLOCKS_PER_SEC;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n    Main Function\r\n*/</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\r\n{\r\n    <span class=\"hljs-type\">double</span> X0 = <span class=\"hljs-number\">0.f</span>;          <span class=\"hljs-comment\">/* initial value of x0 */</span>\r\n    <span class=\"hljs-type\">double</span> X_MAX = <span class=\"hljs-number\">10.F</span>;      <span class=\"hljs-comment\">/* upper limit of integration */</span>\r\n    <span class=\"hljs-type\">double</span> Y0[] = {<span class=\"hljs-number\">1.f</span>, <span class=\"hljs-number\">0.f</span>}; <span class=\"hljs-comment\">/* initial value Y = y(x = x_0) */</span>\r\n    <span class=\"hljs-type\">double</span> step_size;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEnter the step size: &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lg&quot;</span>, &amp;step_size);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-comment\">// use commandline argument as independent variable step size</span>\r\n        step_size = atof(argv[<span class=\"hljs-number\">1</span>]);\r\n\r\n    <span class=\"hljs-comment\">// get approximate solution</span>\r\n    <span class=\"hljs-type\">double</span> total_time = forward_euler(step_size, X0, X_MAX, Y0, <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\tTime = %.6g ms\\n&quot;</span>, total_time);\r\n\r\n    <span class=\"hljs-comment\">/* compute exact solution for comparion */</span>\r\n    FILE *fp = fopen(<span class=\"hljs-string\">&quot;exact.csv&quot;</span>, <span class=\"hljs-string\">&quot;w+&quot;</span>);\r\n    <span class=\"hljs-keyword\">if</span> (fp == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        perror(<span class=\"hljs-string\">&quot;Error! &quot;</span>);\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n    }\r\n    <span class=\"hljs-type\">double</span> x = X0;\r\n    <span class=\"hljs-type\">double</span> *y = &amp;(Y0[<span class=\"hljs-number\">0</span>]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Finding exact solution\\n&quot;</span>);\r\n    <span class=\"hljs-type\">clock_t</span> t1 = clock();\r\n\r\n    <span class=\"hljs-keyword\">do</span>\r\n    {\r\n        <span class=\"hljs-built_in\">fprintf</span>(fp, <span class=\"hljs-string\">&quot;%.4g,%.4g,%.4g\\n&quot;</span>, x, y[<span class=\"hljs-number\">0</span>], y[<span class=\"hljs-number\">1</span>]);  <span class=\"hljs-comment\">// write to file</span>\r\n        exact_solution(&amp;x, y);\r\n        x += step_size;\r\n    } <span class=\"hljs-keyword\">while</span> (x &lt;= X_MAX);\r\n\r\n    <span class=\"hljs-type\">clock_t</span> t2 = clock();\r\n    total_time = (t2 - t1) / CLOCKS_PER_SEC;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\tTime = %.6g ms\\n&quot;</span>, total_time);\r\n    fclose(fp);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 13
    }
  ],
  "explanationUrl": {}
}