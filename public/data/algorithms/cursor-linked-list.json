{
  "slug": "cursor-linked-list",
  "name": "Cursor Linked List",
  "categories": [
    "datastructures",
    "list"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\lists\\CursorLinkedList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\lists\\CursorLinkedList.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.lists;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This class implements a Cursor Linked List.\r\n *\r\n * A CursorLinkedList is an array version of a Linked List. Essentially you have\r\n * an array of list nodes but instead of each node containing a pointer to the\r\n * next item in the linked list, each node element in the array contains the\r\n * index for the next node element.\r\n *\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CursorLinkedList</span>&lt;T&gt; {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;T&gt; {\r\n\r\n        T element;\r\n        <span class=\"hljs-type\">int</span> next;\r\n\r\n        Node(T element, <span class=\"hljs-type\">int</span> next) {\r\n            <span class=\"hljs-built_in\">this</span>.element = element;\r\n            <span class=\"hljs-built_in\">this</span>.next = next;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> os;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> head;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Node&lt;T&gt;[] cursorSpace;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> count;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">CURSOR_SPACE_SIZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\r\n\r\n    {\r\n        <span class=\"hljs-comment\">// init at loading time</span>\r\n        cursorSpace = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>[CURSOR_SPACE_SIZE];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; CURSOR_SPACE_SIZE; i++) {\r\n            cursorSpace[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>&lt;&gt;(<span class=\"hljs-literal\">null</span>, i + <span class=\"hljs-number\">1</span>);\r\n        }\r\n        cursorSpace[CURSOR_SPACE_SIZE - <span class=\"hljs-number\">1</span>].next = <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CursorLinkedList</span><span class=\"hljs-params\">()</span> {\r\n        os = <span class=\"hljs-number\">0</span>;\r\n        count = <span class=\"hljs-number\">0</span>;\r\n        head = -<span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printList</span><span class=\"hljs-params\">()</span> {\r\n\r\n        <span class=\"hljs-keyword\">if</span> (head != -<span class=\"hljs-number\">1</span>) {\r\n\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> head;\r\n            <span class=\"hljs-keyword\">while</span> (start != -<span class=\"hljs-number\">1</span>) {\r\n\r\n                <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> cursorSpace[start].element;\r\n                System.out.println(element.toString());\r\n                start = cursorSpace[start].next;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> the logical index of the element within the list , not the actual\r\n     * index of the [cursorSpace] array\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">indexOf</span><span class=\"hljs-params\">(T element)</span> {\r\n\r\n        Objects.requireNonNull(element);\r\n        Node&lt;T&gt; iterator = cursorSpace[head];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; count; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (iterator.element.equals(element)) {\r\n                <span class=\"hljs-keyword\">return</span> i;\r\n            }\r\n            iterator = cursorSpace[iterator.next];\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> position , the logical index of the element , not the actual one\r\n     * within the [cursorSpace] array . this method should be used to get the\r\n     * index give by indexOf() method.\r\n     * <span class=\"hljs-doctag\">@return</span>\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> position)</span> {\r\n\r\n        <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt; count) {\r\n\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> head;\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">counter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">while</span> (start != -<span class=\"hljs-number\">1</span>) {\r\n\r\n                <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> cursorSpace[start].element;\r\n                <span class=\"hljs-keyword\">if</span> (counter == position) {\r\n                    <span class=\"hljs-keyword\">return</span> element;\r\n                }\r\n\r\n                start = cursorSpace[start].next;\r\n                counter++;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeByIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> {\r\n\r\n        <span class=\"hljs-keyword\">if</span> (index &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; index &lt; count) {\r\n\r\n            <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> get(index);\r\n            remove(element);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(T element)</span> {\r\n\r\n        Objects.requireNonNull(element);\r\n\r\n        <span class=\"hljs-comment\">// case element is in the head</span>\r\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">temp_element</span> <span class=\"hljs-operator\">=</span> cursorSpace[head].element;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp_next</span> <span class=\"hljs-operator\">=</span> cursorSpace[head].next;\r\n        <span class=\"hljs-keyword\">if</span> (temp_element.equals(element)) {\r\n            free(head);\r\n            head = temp_next;\r\n        } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// otherwise cases</span>\r\n\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">prev_index</span> <span class=\"hljs-operator\">=</span> head;\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">current_index</span> <span class=\"hljs-operator\">=</span> cursorSpace[prev_index].next;\r\n\r\n            <span class=\"hljs-keyword\">while</span> (current_index != -<span class=\"hljs-number\">1</span>) {\r\n\r\n                <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">current_element</span> <span class=\"hljs-operator\">=</span> cursorSpace[current_index].element;\r\n                <span class=\"hljs-keyword\">if</span> (current_element.equals(element)) {\r\n                    cursorSpace[prev_index].next = cursorSpace[current_index].next;\r\n                    free(current_index);\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n\r\n                prev_index = current_index;\r\n                current_index = cursorSpace[prev_index].next;\r\n            }\r\n        }\r\n\r\n        count--;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">free</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> {\r\n\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">os_node</span> <span class=\"hljs-operator\">=</span> cursorSpace[os];\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">os_next</span> <span class=\"hljs-operator\">=</span> os_node.next;\r\n        cursorSpace[os].next = index;\r\n        cursorSpace[index].element = <span class=\"hljs-literal\">null</span>;\r\n        cursorSpace[index].next = os_next;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">append</span><span class=\"hljs-params\">(T element)</span> {\r\n\r\n        Objects.requireNonNull(element);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">availableIndex</span> <span class=\"hljs-operator\">=</span> alloc();\r\n        cursorSpace[availableIndex].element = element;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (head == -<span class=\"hljs-number\">1</span>) {\r\n            head = availableIndex;\r\n        }\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">iterator</span> <span class=\"hljs-operator\">=</span> head;\r\n        <span class=\"hljs-keyword\">while</span> (cursorSpace[iterator].next != -<span class=\"hljs-number\">1</span>) {\r\n            iterator = cursorSpace[iterator].next;\r\n        }\r\n\r\n        cursorSpace[iterator].next = availableIndex;\r\n        cursorSpace[availableIndex].next = -<span class=\"hljs-number\">1</span>;\r\n\r\n        count++;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> the index of the next available node\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">alloc</span><span class=\"hljs-params\">()</span> {\r\n\r\n        <span class=\"hljs-comment\">// 1- get the index at which the os is pointing</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">availableNodeIndex</span> <span class=\"hljs-operator\">=</span> cursorSpace[os].next;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (availableNodeIndex == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutOfMemoryError</span>();\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// 2- make the os point to the next of the  @var{availableNodeIndex}</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">availableNext</span> <span class=\"hljs-operator\">=</span> cursorSpace[availableNodeIndex].next;\r\n        cursorSpace[os].next = availableNext;\r\n\r\n        <span class=\"hljs-comment\">// this to indicate an end of the list , helpful at testing since any err</span>\r\n        <span class=\"hljs-comment\">// would throw an outOfBoundException</span>\r\n        cursorSpace[availableNodeIndex].next = -<span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-keyword\">return</span> availableNodeIndex;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "aayushi-kunwar13",
      "email": "51057675+aayushi-kunwar13@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "saeed jinat",
      "email": "saeed.jeebat@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}