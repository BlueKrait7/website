{
  "slug": "matrix-chain-order",
  "name": "Matrix Chain Order",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming\\matrix_chain_order.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming\\matrix_chain_order.py",
      "code": "<span class=\"hljs-keyword\">import</span> sys\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nDynamic Programming\r\nImplementation of Matrix Chain Multiplication\r\nTime Complexity: O(n^3)\r\nSpace Complexity: O(n^2)\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">MatrixChainOrder</span>(<span class=\"hljs-params\">array</span>):\r\n    N = <span class=\"hljs-built_in\">len</span>(array)\r\n    Matrix = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N)] <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N)]\r\n    Sol = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N)] <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N)]\r\n\r\n    <span class=\"hljs-keyword\">for</span> ChainLength <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, N):\r\n        <span class=\"hljs-keyword\">for</span> a <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, N - ChainLength + <span class=\"hljs-number\">1</span>):\r\n            b = a + ChainLength - <span class=\"hljs-number\">1</span>\r\n\r\n            Matrix[a][b] = sys.maxsize\r\n            <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(a, b):\r\n                cost = (\r\n                    Matrix[a][c] + Matrix[c + <span class=\"hljs-number\">1</span>][b] + array[a - <span class=\"hljs-number\">1</span>] * array[c] * array[b]\r\n                )\r\n                <span class=\"hljs-keyword\">if</span> cost &lt; Matrix[a][b]:\r\n                    Matrix[a][b] = cost\r\n                    Sol[a][b] = c\r\n    <span class=\"hljs-keyword\">return</span> Matrix, Sol\r\n\r\n\r\n<span class=\"hljs-comment\"># Print order of matrix with Ai as Matrix</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">PrintOptimalSolution</span>(<span class=\"hljs-params\">OptimalSolution, i, j</span>):\r\n    <span class=\"hljs-keyword\">if</span> i == j:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;A&quot;</span> + <span class=\"hljs-built_in\">str</span>(i), end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;(&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n        PrintOptimalSolution(OptimalSolution, i, OptimalSolution[i][j])\r\n        PrintOptimalSolution(OptimalSolution, OptimalSolution[i][j] + <span class=\"hljs-number\">1</span>, j)\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;)&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    array = [<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">25</span>]\r\n    n = <span class=\"hljs-built_in\">len</span>(array)\r\n    <span class=\"hljs-comment\"># Size of matrix created from above array will be</span>\r\n    <span class=\"hljs-comment\"># 30*35 35*15 15*5 5*10 10*20 20*25</span>\r\n    Matrix, OptimalSolution = MatrixChainOrder(array)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;No. of Operation required: &quot;</span> + <span class=\"hljs-built_in\">str</span>(Matrix[<span class=\"hljs-number\">1</span>][n - <span class=\"hljs-number\">1</span>]))\r\n    PrintOptimalSolution(OptimalSolution, <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    }
  },
  "contributors": [
    {
      "name": "shivg7706",
      "email": "shivamgupta7706@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Benedikt Werner",
      "email": "1benediktwerner@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}