{
  "slug": "bucket-sort",
  "name": "Bucket Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\bucket_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\bucket_sort.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nIllustrate how to implement bucket sort algorithm.\r\n\r\nAuthor: OMKAR PATHAK\r\nThis program will illustrate how to implement bucket sort algorithm\r\n\r\nWikipedia says: Bucket sort, or bin sort, is a sorting algorithm that works\r\nby distributing the elements of an array into a number of buckets.\r\nEach bucket is then sorted individually, either using a different sorting\r\nalgorithm, or by recursively applying the bucket sorting algorithm. It is a\r\ndistribution sort, and is a cousin of radix sort in the most to least\r\nsignificant digit flavour.\r\nBucket sort is a generalization of pigeonhole sort. Bucket sort can be\r\nimplemented with comparisons and therefore can also be considered a\r\ncomparison sort algorithm. The computational complexity estimates involve the\r\nnumber of buckets.\r\n\r\nTime Complexity of Solution:\r\nWorst case scenario occurs when all the elements are placed in a single bucket.\r\nThe overall performance would then be dominated by the algorithm used to sort each\r\nbucket. In this case, O(n log n), because of TimSort\r\n\r\nAverage Case O(n + (n^2)/k + k), where k is the number of buckets\r\n\r\nIf k = O(n), time complexity is O(n)\r\n\r\nSource: https://en.wikipedia.org/wiki/Bucket_sort\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bucket_sort</span>(<span class=\"hljs-params\">my_list: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; data = [-1, 2, -5, 0]\r\n    &gt;&gt;&gt; bucket_sort(data) == sorted(data)\r\n    True\r\n    &gt;&gt;&gt; data = [9, 8, 7, 6, -12]\r\n    &gt;&gt;&gt; bucket_sort(data) == sorted(data)\r\n    True\r\n    &gt;&gt;&gt; data = [.4, 1.2, .1, .2, -.9]\r\n    &gt;&gt;&gt; bucket_sort(data) == sorted(data)\r\n    True\r\n    &gt;&gt;&gt; bucket_sort([]) == sorted([])\r\n    True\r\n    &gt;&gt;&gt; import random\r\n    &gt;&gt;&gt; collection = random.sample(range(-50, 50), 50)\r\n    &gt;&gt;&gt; bucket_sort(collection) == sorted(collection)\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(my_list) == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> []\r\n    min_value, max_value = <span class=\"hljs-built_in\">min</span>(my_list), <span class=\"hljs-built_in\">max</span>(my_list)\r\n    bucket_count = <span class=\"hljs-built_in\">int</span>(max_value - min_value) + <span class=\"hljs-number\">1</span>\r\n    buckets: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>] = [[] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(bucket_count)]\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(my_list)):\r\n        buckets[(<span class=\"hljs-built_in\">int</span>(my_list[i] - min_value) // bucket_count)].append(my_list[i])\r\n\r\n    <span class=\"hljs-keyword\">return</span> [v <span class=\"hljs-keyword\">for</span> bucket <span class=\"hljs-keyword\">in</span> buckets <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">sorted</span>(bucket)]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n    <span class=\"hljs-keyword\">assert</span> bucket_sort([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]) == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\r\n    <span class=\"hljs-keyword\">assert</span> bucket_sort([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">2</span>]) == [-<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>]\r\n"
    },
    "javascript": {
      "dir": "Sorts\\test\\BucketSort.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\test\\BucketSort.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { bucketSort } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../BucketSort&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Tests for bucketSort function&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that is sorted backwards&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>(array)).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that is unsorted&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2224</span>, <span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>(array)).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">2224</span>])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Variations of input array lengths&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return an empty list with the input list is an empty list&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([])).<span class=\"hljs-title function_\">toEqual</span>([])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list of length 1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([<span class=\"hljs-number\">100</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">100</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list of an odd length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([<span class=\"hljs-number\">101</span>, -<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">321</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-number\">321</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list of an even length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">56</span>])\r\n    })\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Variations of input array elements&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only positive numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">50</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only negative numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">21</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">35</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">35</span>, -<span class=\"hljs-number\">21</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only a mix of positive and negative numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([-<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">56</span>, -<span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">45</span>, -<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">56</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only whole numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">15</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only decimal numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.42</span>, <span class=\"hljs-number\">2.56</span>, <span class=\"hljs-number\">33.45</span>, <span class=\"hljs-number\">13.12</span>, <span class=\"hljs-number\">2.3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.42</span>, <span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">2.56</span>, <span class=\"hljs-number\">13.12</span>, <span class=\"hljs-number\">33.45</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only a mix of whole and decimal&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([<span class=\"hljs-number\">32.40</span>, <span class=\"hljs-number\">12.42</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">12.42</span>, <span class=\"hljs-number\">32.40</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">56</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only fractional numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([<span class=\"hljs-number\">0.98</span>, <span class=\"hljs-number\">0.4259</span>, <span class=\"hljs-number\">0.56</span>, -<span class=\"hljs-number\">0.456</span>, -<span class=\"hljs-number\">0.12</span>, <span class=\"hljs-number\">0.322</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">0.456</span>, -<span class=\"hljs-number\">0.12</span>, <span class=\"hljs-number\">0.322</span>, <span class=\"hljs-number\">0.4259</span>, <span class=\"hljs-number\">0.56</span>, <span class=\"hljs-number\">0.98</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only a mix of whole, decimal, and fractional&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([-<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">0.222</span>, <span class=\"hljs-number\">5.6</span>, -<span class=\"hljs-number\">4.5</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0.333</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">4.5</span>, -<span class=\"hljs-number\">0.222</span>, <span class=\"hljs-number\">0.333</span>, <span class=\"hljs-number\">5.6</span>, <span class=\"hljs-number\">12</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains duplicates&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bucketSort</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>])\r\n    })\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\bucket_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\bucket_sort.cpp",
      "code": "<span class=\"hljs-comment\">// C++ program to sort an array using bucket sort</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">// Function to sort arr[] of size n using bucket sort</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bucketSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> arr[], <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-comment\">// 1) Create n empty buckets</span>\r\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; *b = <span class=\"hljs-keyword\">new</span> std::vector&lt;<span class=\"hljs-type\">float</span>&gt;[n];\r\n\r\n    <span class=\"hljs-comment\">// 2) Put array elements in different buckets</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        <span class=\"hljs-type\">int</span> bi = n * arr[i];  <span class=\"hljs-comment\">// Index in bucket</span>\r\n        b[bi].<span class=\"hljs-built_in\">push_back</span>(arr[i]);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// 3) Sort individual buckets</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) std::<span class=\"hljs-built_in\">sort</span>(b[i].<span class=\"hljs-built_in\">begin</span>(), b[i].<span class=\"hljs-built_in\">end</span>());\r\n\r\n    <span class=\"hljs-comment\">// 4) Concatenate all buckets into arr[]</span>\r\n    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; b[i].<span class=\"hljs-built_in\">size</span>(); j++) arr[index++] = b[i][j];\r\n    <span class=\"hljs-keyword\">delete</span>[] b;\r\n}\r\n\r\n<span class=\"hljs-comment\">/* Driver program to test above funtion */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">float</span> arr[] = {<span class=\"hljs-number\">0.897</span>, <span class=\"hljs-number\">0.565</span>, <span class=\"hljs-number\">0.656</span>, <span class=\"hljs-number\">0.1234</span>, <span class=\"hljs-number\">0.665</span>, <span class=\"hljs-number\">0.3434</span>};\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\r\n    <span class=\"hljs-built_in\">bucketSort</span>(arr, n);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array is \\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\BucketSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\BucketSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Wikipedia: https://en.wikipedia.org/wiki/Bucket_sort\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BucketSort</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">int</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>];\r\n\r\n        <span class=\"hljs-comment\">/* generate 10 random numbers from -50 to 49 */</span>\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length; ++i) {\r\n            arr[i] = random.nextInt(<span class=\"hljs-number\">100</span>) - <span class=\"hljs-number\">50</span>;\r\n        }\r\n\r\n        bucketSort(arr);\r\n\r\n        <span class=\"hljs-comment\">/* check array is sorted or not */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, limit = arr.length - <span class=\"hljs-number\">1</span>; i &lt; limit; ++i) {\r\n            <span class=\"hljs-keyword\">assert</span> arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>];\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * BucketSort algorithms implements\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arr the array contains elements\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bucketSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr)</span> {\r\n        <span class=\"hljs-comment\">/* get max value of arr */</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> max(arr);\r\n\r\n        <span class=\"hljs-comment\">/* get min value of arr */</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> min(arr);\r\n\r\n        <span class=\"hljs-comment\">/* number of buckets */</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">numberOfBuckets</span> <span class=\"hljs-operator\">=</span> max - min + <span class=\"hljs-number\">1</span>;\r\n\r\n        List&lt;List&lt;Integer&gt;&gt; buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(numberOfBuckets);\r\n\r\n        <span class=\"hljs-comment\">/* init buckets */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; numberOfBuckets; ++i) {\r\n            buckets.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;());\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* store elements to buckets */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : arr) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hash(value, min, numberOfBuckets);\r\n            buckets.get(hash).add(value);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* sort individual bucket */</span>\r\n        <span class=\"hljs-keyword\">for</span> (List&lt;Integer&gt; bucket : buckets) {\r\n            Collections.sort(bucket);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* concatenate buckets to origin array */</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (List&lt;Integer&gt; bucket : buckets) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : bucket) {\r\n                arr[index++] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Get index of bucket which of our elements gets placed into it.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> elem the element of array to be sorted\r\n     * <span class=\"hljs-doctag\">@param</span> min min value of array\r\n     * <span class=\"hljs-doctag\">@param</span> numberOfBucket the number of bucket\r\n     * <span class=\"hljs-doctag\">@return</span> index of bucket\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elem, <span class=\"hljs-type\">int</span> min, <span class=\"hljs-type\">int</span> numberOfBucket)</span> {\r\n        <span class=\"hljs-keyword\">return</span> (elem - min) / numberOfBucket;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate max value of array\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arr the array contains elements\r\n     * <span class=\"hljs-doctag\">@return</span> max value of given array\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> arr[<span class=\"hljs-number\">0</span>];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : arr) {\r\n            <span class=\"hljs-keyword\">if</span> (value &gt; max) {\r\n                max = value;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> max;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate min value of array\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arr the array contains elements\r\n     * <span class=\"hljs-doctag\">@return</span> min value of given array\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">min</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> arr[<span class=\"hljs-number\">0</span>];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : arr) {\r\n            <span class=\"hljs-keyword\">if</span> (value &lt; min) {\r\n                min = value;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> min;\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\bucket_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\bucket_sort.c",
      "code": "<span class=\"hljs-comment\">/*\r\n * Algorithm : Bucket Sort\r\n * Time-Complexity : O(n)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NARRAY 8    <span class=\"hljs-comment\">/* array size */</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NBUCKET 5   <span class=\"hljs-comment\">/* bucket size */</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INTERVAL 10 <span class=\"hljs-comment\">/* bucket range */</span></span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> data;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">next</span>;</span>\r\n};\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">BucketSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span>;\r\n<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-title function_\">InsertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-built_in\">list</span>)</span>;\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span>;\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printBuckets</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-built_in\">list</span>)</span>;\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getBucketIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span>;\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">BucketSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, j;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> **<span class=\"hljs-title\">buckets</span>;</span>\r\n\r\n    <span class=\"hljs-comment\">/* allocate memory for array of pointers to the buckets */</span>\r\n    buckets = (<span class=\"hljs-keyword\">struct</span> Node **)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node *) * NBUCKET);\r\n\r\n    <span class=\"hljs-comment\">/* initialize pointers to the buckets */</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; ++i)\r\n    {\r\n        buckets[i] = <span class=\"hljs-literal\">NULL</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* put items into the buckets */</span>\r\n    <span class=\"hljs-comment\">/* creates a link list in each bucket slot */</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NARRAY; ++i)\r\n    {\r\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">current</span>;</span>\r\n        <span class=\"hljs-type\">int</span> pos = getBucketIndex(arr[i]);\r\n        current = (<span class=\"hljs-keyword\">struct</span> Node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));\r\n        current-&gt;data = arr[i];\r\n        current-&gt;next = buckets[pos];\r\n        buckets[pos] = current;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* check what&#x27;s in each bucket */</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Bucket[\\&quot;%d\\&quot;] : &quot;</span>, i);\r\n        printBuckets(buckets[i]);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* sorting bucket using Insertion Sort */</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; ++i)\r\n    {\r\n        buckets[i] = InsertionSort(buckets[i]);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* check what&#x27;s in each bucket */</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;--------------\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Buckets after sorted\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Bucket[\\&quot;%d\\&quot;] : &quot;</span>, i);\r\n        printBuckets(buckets[i]);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* put items back to original array */</span>\r\n    <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; ++i)\r\n    {\r\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">node</span>;</span>\r\n        node = buckets[i];\r\n        <span class=\"hljs-keyword\">while</span> (node)\r\n        {\r\n            <span class=\"hljs-comment\">// precondition for avoiding out of bounds by the array</span>\r\n            assert(j &lt; NARRAY);\r\n            arr[j++] = node-&gt;data;\r\n            node = node-&gt;next;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* free memory */</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; ++i)\r\n    {\r\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">node</span>;</span>\r\n        node = buckets[i];\r\n        <span class=\"hljs-keyword\">while</span> (node)\r\n        {\r\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">tmp</span>;</span>\r\n            tmp = node;\r\n            node = node-&gt;next;\r\n            <span class=\"hljs-built_in\">free</span>(tmp);\r\n        }\r\n    }\r\n    <span class=\"hljs-built_in\">free</span>(buckets);\r\n    <span class=\"hljs-keyword\">return</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/* Insertion Sort */</span>\r\n<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-title function_\">InsertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-built_in\">list</span>)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">k</span>, *<span class=\"hljs-title\">nodeList</span>;</span>\r\n    <span class=\"hljs-comment\">/* need at least two items to sort */</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">list</span> == <span class=\"hljs-literal\">NULL</span> || <span class=\"hljs-built_in\">list</span>-&gt;next == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\r\n    }\r\n\r\n    nodeList = <span class=\"hljs-built_in\">list</span>;\r\n    k = <span class=\"hljs-built_in\">list</span>-&gt;next;\r\n    nodeList-&gt;next = <span class=\"hljs-literal\">NULL</span>; <span class=\"hljs-comment\">/* 1st node is new list */</span>\r\n    <span class=\"hljs-keyword\">while</span> (k != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">ptr</span>;</span>\r\n        <span class=\"hljs-comment\">/* check if insert before first */</span>\r\n        <span class=\"hljs-keyword\">if</span> (nodeList-&gt;data &gt; k-&gt;data)\r\n        {\r\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">tmp</span>;</span>\r\n            tmp = k;\r\n            k = k-&gt;next;  <span class=\"hljs-comment\">// important for the while</span>\r\n            tmp-&gt;next = nodeList;\r\n            nodeList = tmp;\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// from begin up to end</span>\r\n        <span class=\"hljs-comment\">// finds [i] &gt; [i+1]</span>\r\n        <span class=\"hljs-keyword\">for</span> (ptr = nodeList; ptr-&gt;next != <span class=\"hljs-literal\">NULL</span>; ptr = ptr-&gt;next)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (ptr-&gt;next-&gt;data &gt; k-&gt;data)\r\n                <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// if found (above)</span>\r\n        <span class=\"hljs-keyword\">if</span> (ptr-&gt;next != <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">tmp</span>;</span>\r\n            tmp = k;\r\n            k = k-&gt;next;  <span class=\"hljs-comment\">// important for the while</span>\r\n            tmp-&gt;next = ptr-&gt;next;\r\n            ptr-&gt;next = tmp;\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            ptr-&gt;next = k;\r\n            k = k-&gt;next;  <span class=\"hljs-comment\">// important for the while</span>\r\n            ptr-&gt;next-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> nodeList;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getBucketIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> { <span class=\"hljs-keyword\">return</span> value / INTERVAL; }\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> ar[])</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NARRAY; ++i)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, ar[i]);\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printBuckets</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-built_in\">list</span>)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">cur</span> =</span> <span class=\"hljs-built_in\">list</span>;\r\n    <span class=\"hljs-keyword\">while</span> (cur)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, cur-&gt;data);\r\n        cur = cur-&gt;next;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[NARRAY] = {<span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">43</span>};\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Initial array\\n&quot;</span>);\r\n    print(<span class=\"hljs-built_in\">array</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;------------\\n&quot;</span>);\r\n\r\n    BucketSort(<span class=\"hljs-built_in\">array</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;------------\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array\\n&quot;</span>);\r\n    print(<span class=\"hljs-built_in\">array</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\sorting\\bucket_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\sorting\\bucket_sort.rs",
      "code": "<span class=\"hljs-comment\">/// Sort a slice using bucket sort algorithm.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Time complexity is `O(n + k)` on average, where `n` is the number of elements,</span>\r\n<span class=\"hljs-comment\">/// `k` is the number of buckets used in process.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Space complexity is `O(n + k)`, as it sorts not in-place.</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">bucket_sort</span>(arr: &amp;[<span class=\"hljs-type\">usize</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\r\n    <span class=\"hljs-keyword\">if</span> arr.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">vec!</span>[];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">max</span> = *arr.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">max</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">buckets</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[]; len + <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-keyword\">in</span> arr {\r\n        buckets[len * *x / max].<span class=\"hljs-title function_ invoke__\">push</span>(*x);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">bucket</span> <span class=\"hljs-keyword\">in</span> buckets.<span class=\"hljs-title function_ invoke__\">iter_mut</span>() {\r\n        super::<span class=\"hljs-title function_ invoke__\">insertion_sort</span>(bucket);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span> = <span class=\"hljs-built_in\">vec!</span>[];\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">bucket</span> <span class=\"hljs-keyword\">in</span> buckets {\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-keyword\">in</span> bucket {\r\n            result.<span class=\"hljs-title function_ invoke__\">push</span>(x);\r\n        }\r\n    }\r\n\r\n    result\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::super::is_sorted;\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr</span>: [<span class=\"hljs-type\">usize</span>; <span class=\"hljs-number\">0</span>] = [];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">bucket_sort</span>(&amp;arr);\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;res));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr</span>: [<span class=\"hljs-type\">usize</span>; <span class=\"hljs-number\">1</span>] = [<span class=\"hljs-number\">4</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">bucket_sort</span>(&amp;arr);\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;res));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">already_sorted</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr</span>: [<span class=\"hljs-type\">usize</span>; <span class=\"hljs-number\">3</span>] = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">105</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">bucket_sort</span>(&amp;arr);\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;res));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr</span>: [<span class=\"hljs-type\">usize</span>; <span class=\"hljs-number\">4</span>] = [<span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">53</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">bucket_sort</span>(&amp;arr);\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;res));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">odd_number_of_elements</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">58</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">bucket_sort</span>(&amp;arr);\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;res));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">repeated_elements</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">arr</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">bucket_sort</span>(&amp;arr);\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;res));\r\n    }\r\n}\r\n"
    },
    "ruby": {
      "dir": "sorting\\bucket_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting\\bucket_sort.rb",
      "code": "DEFAULT_BUCKET_SIZE = <span class=\"hljs-number\">5</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bucket_sort</span><span class=\"hljs-params\">(array, bucket_size = DEFAULT_BUCKET_SIZE)</span></span>\r\n  bucket_count = ((array.max - array.min) / bucket_size).floor + <span class=\"hljs-number\">1</span>\r\n\r\n  <span class=\"hljs-comment\"># create buckets</span>\r\n  buckets = []\r\n  bucket_count.times { buckets.push [] }\r\n\r\n  <span class=\"hljs-comment\"># fill buckets</span>\r\n  array.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|item|</span>\r\n    buckets[((item - array.min) / bucket_size).floor].push(item)\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># sort buckets</span>\r\n  buckets.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|bucket|</span>\r\n    bucket.sort!\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  buckets.flatten\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-keyword\">__FILE__</span>\r\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\r\n\r\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\r\n  p bucket_sort(list)\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "julia": {
      "dir": "src\\sorts\\bucket_sort.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\sorts\\bucket_sort.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n# Bucket Sort\r\n\r\nBucket Sort is a divide and conquer sorting algorithm.\r\nIt distributes elements into buckets and sort each bucket before merging all buckets\r\nBuckets are arrays that each stores a different range of elements\r\nInsertion sort is used to sort the buckets because its fast in small-sized arrays\r\n\r\n## Bucket Calculation\r\n\r\nnumber of buckets = length of array\r\nsize of buckets = (largest element - smallest element + 1) / length of array\r\n\r\n## Bucket Sort Steps\r\n\r\n1. Create an array of buckets\r\n2. Add each elements into its respective bucket\r\n3. Sort each non-empty bucket\r\n4. Concatenate elements of non-empty buckets\r\n\r\n## Example\r\n\r\n1. Array of [3, 5, 2, 9] has 4 buckets\r\n2. The size of buckets = (9 - 2 + 1) / 4 = 2\r\n3. The range of elements can be assign to each bucket, x\r\n    bucket 1: 2 &lt;= x &lt; 4\r\n    bucket 2: 4 &lt;= x &lt; 6\r\n    bucket 3: 6 &lt;= x &lt; 8\r\n    bucket 4: 8 &lt;= x &lt;= 9\r\n4. The distribution of elements in the buckets = [3, 2][5][][9]\r\n5. After sorting the elements each bucket = [2, 3][5][][9]\r\n6. Concatenate all elements = [2, 3, 5, 9]\r\n\r\n# Example\r\n```julia\r\nBucketSort!([3, 5, 2, 9]) # returns [2, 3, 5, 9]\r\n```\r\n\r\nContributed By:- [Ming Liang](https://github.com/DrakonDarquesse)\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">function</span> bucket_sort!(arr::<span class=\"hljs-built_in\">Vector</span>{T}, l::<span class=\"hljs-built_in\">Int</span>=length(arr)) <span class=\"hljs-keyword\">where</span> T\r\n    <span class=\"hljs-keyword\">if</span> l==<span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">return</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    max = maximum(arr)\r\n    min = minimum(arr)\r\n    r = (max-min+<span class=\"hljs-number\">1</span>)/l\r\n    buckets = <span class=\"hljs-built_in\">Array</span>{T, <span class=\"hljs-number\">1</span>}[[] <span class=\"hljs-keyword\">for</span> a <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:l]\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> arr\r\n        push!(buckets[floor(<span class=\"hljs-built_in\">Int</span>, (i-min)/r)+<span class=\"hljs-number\">1</span>], i)\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> bucket <span class=\"hljs-keyword\">in</span> buckets\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:length(bucket)\r\n            val = bucket[i]\r\n            idx = i\r\n            <span class=\"hljs-keyword\">while</span> idx &gt; <span class=\"hljs-number\">1</span> &amp;&amp; val &lt; bucket[idx-<span class=\"hljs-number\">1</span>]\r\n                bucket[idx] = bucket[idx-<span class=\"hljs-number\">1</span>]\r\n                idx = idx - <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">end</span>\r\n\r\n            bucket[idx] = val\r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    copy!(arr, vcat(buckets...))\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Integer/BucketSorter.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sorters\\Integer\\BucketSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Integer</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class that implements bucket sort algorithm.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BucketSorter</span> : <span class=\"hljs-title\">IIntegerSorter</span>\r\n    {\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> NumOfDigitsInBase10 = <span class=\"hljs-number\">10</span>;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array elements using BucketSort Algorithm.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] array</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (array.Length &lt;= <span class=\"hljs-number\">1</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// store maximum number of digits in numbers to sort</span>\r\n            <span class=\"hljs-keyword\">var</span> totalDigits = NumberOfDigits(array);\r\n\r\n            <span class=\"hljs-comment\">// bucket array where numbers will be placed</span>\r\n            <span class=\"hljs-keyword\">var</span> buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[NumOfDigitsInBase10, array.Length + <span class=\"hljs-number\">1</span>];\r\n\r\n            <span class=\"hljs-comment\">// go through all digit places and sort each number</span>\r\n            <span class=\"hljs-comment\">// according to digit place value</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> pass = <span class=\"hljs-number\">1</span>; pass &lt;= totalDigits; pass++)\r\n            {\r\n                DistributeElements(array, buckets, pass); <span class=\"hljs-comment\">// distribution pass</span>\r\n                CollectElements(array, buckets); <span class=\"hljs-comment\">// gathering pass</span>\r\n\r\n                <span class=\"hljs-keyword\">if</span> (pass != totalDigits)\r\n                {\r\n                    EmptyBucket(buckets); <span class=\"hljs-comment\">// set size of buckets to 0</span>\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Determines the number of digits in the largest number.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Number of digits.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">NumberOfDigits</span>(<span class=\"hljs-params\">IEnumerable&lt;<span class=\"hljs-built_in\">int</span>&gt; array</span>)</span> =&gt; (<span class=\"hljs-built_in\">int</span>)Math.Floor(Math.Log10(array.Max()) + <span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To distribute elements into buckets based on specified digit.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;buckets&quot;&gt;</span>Array of buckets.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;digit&quot;&gt;</span>Digit.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DistributeElements</span>(<span class=\"hljs-params\">IEnumerable&lt;<span class=\"hljs-built_in\">int</span>&gt; data, <span class=\"hljs-built_in\">int</span>[,] buckets, <span class=\"hljs-built_in\">int</span> digit</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// determine the divisor used to get specific digit</span>\r\n            <span class=\"hljs-keyword\">var</span> divisor = (<span class=\"hljs-built_in\">int</span>)Math.Pow(<span class=\"hljs-number\">10</span>, digit);\r\n\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> element <span class=\"hljs-keyword\">in</span> data)\r\n            {\r\n                <span class=\"hljs-comment\">// bucketNumber example for hundreds digit:</span>\r\n                <span class=\"hljs-comment\">// ( 1234 % 1000 ) / 100 --&gt; 2</span>\r\n                <span class=\"hljs-keyword\">var</span> bucketNumber = NumOfDigitsInBase10 * (element % divisor) / divisor;\r\n\r\n                <span class=\"hljs-comment\">// retrieve value in pail[ bucketNumber , 0 ] to</span>\r\n                <span class=\"hljs-comment\">// determine the location in row to store element</span>\r\n                <span class=\"hljs-keyword\">var</span> elementNumber = ++buckets[bucketNumber, <span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// location in bucket to place element</span>\r\n                buckets[bucketNumber, elementNumber] = element;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Return elements to original array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;buckets&quot;&gt;</span>Array of buckets.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CollectElements</span>(<span class=\"hljs-params\">IList&lt;<span class=\"hljs-built_in\">int</span>&gt; data, <span class=\"hljs-built_in\">int</span>[,] buckets</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> subscript = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// initialize location in data</span>\r\n\r\n            <span class=\"hljs-comment\">// loop over buckets</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; NumOfDigitsInBase10; i++)\r\n            {\r\n                <span class=\"hljs-comment\">// loop over elements in each bucket</span>\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">1</span>; j &lt;= buckets[i, <span class=\"hljs-number\">0</span>]; j++)\r\n                {\r\n                    data[subscript++] = buckets[i, j]; <span class=\"hljs-comment\">// add element to array</span>\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sets size of all buckets to zero.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;buckets&quot;&gt;</span>Array of buckets.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">EmptyBucket</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[,] buckets</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; NumOfDigitsInBase10; i++)\r\n            {\r\n                buckets[i, <span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// set size of bucket to 0</span>\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Arthur Kurbidaev",
      "email": "artkurbidaev@gmail.com",
      "commits": 1
    },
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Tiffany Ford",
      "email": "rhysma@gmail.com",
      "commits": 1
    },
    {
      "name": "MacBox7",
      "email": "ajankit2304@gmail.com",
      "commits": 1
    },
    {
      "name": "PoolOfDeath20",
      "email": "53143214+GervinFung@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "DrakonDarquesse",
      "email": "mingliangzheng17@gmail.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 1
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "KuLi",
      "email": "KuLi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hardik Kapadia",
      "email": "thecoderenroute@gmail.com",
      "commits": 1
    },
    {
      "name": "obelisk0114",
      "email": "obelisk0114@gmail.com",
      "commits": 1
    },
    {
      "name": "Sayantika Banik",
      "email": "sayantikabanik122@gmail.com",
      "commits": 1
    },
    {
      "name": "Matthew",
      "email": "MatthewG25@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    },
    {
      "name": "Níkolas Vargas",
      "email": "vargasnikolass@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Adam",
      "email": "34916469+coderpower0@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andy Lau",
      "email": "andy1970635726@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "rafa leyva ruiz",
      "email": "rafaelleru@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Vineet Rathor",
      "email": "35703327+THE-VR7@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Omkar Pathak",
      "email": "omkarpathak27@gmail.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    },
    {
      "name": "vzvu3k6k",
      "email": "vzvu3k6k@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Ming Liang",
      "email": "44579558+DrakonDarquesse@users.noreply.github.com",
      "commits": 4
    },
    {
      "name": "Charlie Moore",
      "email": "moorejchar@gmail.com",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}