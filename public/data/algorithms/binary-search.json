{
  "slug": "binary-search",
  "name": "Binary Search",
  "categories": [
    "searches"
  ],
  "body": {
    "es": "<h4>Declaración de problema</h4>\n<p>Dada una matriz ordenada de <code>n</code> elementos, escriba una función para buscar el índice de un elemento determinado (destino).</p>\n<h4>Enfoque</h4>\n<ul>\n<li>Se busca la matriz dividiendo la matriz por la mitad repetidamente.</li>\n<li>Inicialmente, se considera la matriz real y se selecciona el elemento en el índice medio.</li>\n<li>Se mantiene el índice más bajo, el número 0, y el más alto, la longitud de la matriz.</li>\n<li>Si es igual al elemento de destino, se devuelve el índice.</li>\n<li>De lo contrario, si es mayor que el elemento de destino, se condiera únicamente la mitad izquierda de la matriz (índice inferior = 0, superior = medio - 1).</li>\n<li>De lo contrario, si es menor que el elemento de destino, se considera únicamente la mitad derecha de la matriz (índice inferior = medio + 1, más alto = longitud de la matriz).</li>\n<li>Se devuelve -1 si el elemento de destino no se encuentra en la matriz (caso base: si el índice inferior es mayor o igual que el índice superior).</li>\n</ul>\n<h4>Complejidad temporal</h4>\n<p><code>O(log n)</code>- En el peor de los casos\r\n<code>O(1)</code>- En el mejor de los casos (Si el elemento central de la matriz inicial es el elemento de destino)</p>\n<h4>Complejidad espacial</h4>\n<p><code>O(1)</code>- Para un enfoque iterativo\r\n<code>O(log n)</code>- Para un enfoque recursivo debido a la pila de llamadas de recursividad</p>\n<h4>Ejemplo</h4>\n<pre><code class=\"hljs language-stata\">arr = [1,2,3,4,5,6,7]  \r\n\r\ntarget = 2\r\nInicialmente, el elemento <span class=\"hljs-keyword\">en</span> el índice medio es 4, <span class=\"hljs-keyword\">que</span> es mayor <span class=\"hljs-keyword\">que</span> 2. Por lo tanto, buscamos <span class=\"hljs-keyword\">la</span> mitad izquierda <span class=\"hljs-keyword\">de</span> <span class=\"hljs-keyword\">la</span>\r\nmatriz, es decir: [1,2,3].\r\nAquí encontramos el elemento central igual al elemento objetivo, por lo <span class=\"hljs-keyword\">que</span> devolvemos <span class=\"hljs-keyword\">su</span> índice: 1\r\n\r\ntarget = 9\r\nBúsqueda binaria debe devolver -1 dado <span class=\"hljs-keyword\">que</span> 9 <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">est</span>á presente <span class=\"hljs-keyword\">en</span> <span class=\"hljs-keyword\">la</span> matriz\n</code></pre>\n<h4>Enlaces de implementación de código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Searches/BinarySearch.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Search/Binary%20Search.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/searches/binary_search.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/searches/binary_search.cs\">C-Sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/searching/Binary_Search.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Search/BinarySearch.js\">JavaScript</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Haskell/blob/master/src/Misc/BinarySearch.hs\">Haskell</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/F-Sharp/blob/main/Algorithms/Search/BinarySearch.fs\">F-Sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/searches/binarysearch.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Rust/blob/master/src/searching/binary_search.rs\">Rust</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Dart/blob/master/search/binary_Search.dart\">Dart</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/Searches/binary_search.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/PHP/blob/master/searches/binary_search.php\">PHP</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Scala/blob/master/src/main/scala/Search/BinarySearch.scala\">Scala</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/MATLAB-Octave/blob/master/algorithms/Searching/binary_search.m\">MATLAB-Octave</a></li>\n</ul>\n<h4>Explicación en vídeo de YouTube</h4>\n<p><a href=\"https://www.youtube.com/watch?v=5xlIPT1FRcA\">Un vídeo CS50 explicando el algoritmo de búsqueda binaria</a></p>\n<h4>Explicación de animación</h4>\n<ul>\n<li><a href=\"https://boardhub.github.io/tute/?wd=binarySearchAlgo2\">Tute Board</a></li>\n</ul>",
    "en": "<h4>Problem Statement</h4>\n<p>Given a sorted  array of n elements, write a function to search for the index of a given element (target)</p>\n<h4>Approach</h4>\n<ul>\n<li>Search for the array by dividing the array in half repeatedly.</li>\n<li>Initially consider the actual array and pick the element at the middle index</li>\n<li>Keep a lower index i.e. 0 and higher index i.e. length of array</li>\n<li>If it is equal to the target element then return the index</li>\n<li>Else if it is greater than the target element then consider only the left half of array. (lower index = 0, higher = middle - 1)</li>\n<li>Else if it is less than the target element then consider only the right half of array. (lower index = middle + 1, higher = length of array)</li>\n<li>Return -(insertion index + 1) if the target element is not found in the array (If the lower index is greater than or equal to higher index). Some simpler implementations just return -1 if the element is not found. The offset of 1 must be added as the insertion index might be 0 (the searched value might be smaller than all elements in the array). As indexing starts at 0, this must be distinguishable from the case where the target element has the index 0.</li>\n</ul>\n<h4>Time Complexity</h4>\n<p>O(log n) Worst Case<br>\nO(1) Best Case (If middle element of initial array is the target element)</p>\n<h4>Space Complexity</h4>\n<p>O(1) For iterative approach<br>\nO(1) For recursive approach <em>if tail call optimization is used</em>, O(log n) due to recursion call stack, otherwise</p>\n<h4>Example</h4>\n<pre><code class=\"hljs language-n1ql\">arr = [1,2,3,4,5,6,7]  \r\n\r\ntarget = 2\r\nInitially the element at middle <span class=\"hljs-keyword\">index</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">4</span> which <span class=\"hljs-keyword\">is</span> greater than <span class=\"hljs-number\">2.</span> Therefore we search the <span class=\"hljs-keyword\">left</span> half of the\r\n<span class=\"hljs-keyword\">array</span> i.<span class=\"hljs-built_in\">e</span>. [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>].\r\nHere we find the middle <span class=\"hljs-keyword\">element</span> equal <span class=\"hljs-keyword\">to</span> target <span class=\"hljs-keyword\">element</span> so we <span class=\"hljs-keyword\">return</span> its <span class=\"hljs-keyword\">index</span> i.<span class=\"hljs-built_in\">e</span>. <span class=\"hljs-number\">1</span>\r\n\r\ntarget = <span class=\"hljs-number\">9</span>          \r\nA simple <span class=\"hljs-keyword\">Binary</span> Search implementation may <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> present <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-keyword\">array</span>. A more complex one would <span class=\"hljs-keyword\">return</span> the <span class=\"hljs-keyword\">index</span> at which <span class=\"hljs-number\">9</span> would have <span class=\"hljs-keyword\">to</span> be inserted, which would be <span class=\"hljs-symbol\">`-8`</span> (<span class=\"hljs-keyword\">last</span> <span class=\"hljs-built_in\">position</span> <span class=\"hljs-keyword\">in</span> the <span class=\"hljs-keyword\">array</span> (<span class=\"hljs-number\">7</span>) plus one (<span class=\"hljs-number\">7</span>+<span class=\"hljs-number\">1</span>), negated)<span class=\"hljs-symbol\">`.\n</span></code></pre>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Searches/BinarySearch.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Search/Binary%20Search.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/searches/binary_search.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/searches/binary_search.cs\">C-Sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/searching/Binary_Search.c\">C</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=5xlIPT1FRcA\">A CS50 video explaining the Binary Search Algorithm</a></p>\n<h4>Animation Explanation</h4>\n<ul>\n<li><a href=\"https://boardhub.github.io/tute/?wd=binarySearchAlgo2\">Tute Board</a></li>\n</ul>"
  },
  "implementations": {
    "python": {
      "dir": "searches\\binary_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/searches\\binary_search.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is pure Python implementation of binary search algorithms\r\n\r\nFor doctests run following command:\r\npython3 -m doctest -v binary_search.py\r\n\r\nFor manual testing run:\r\npython3 binary_search.py\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> bisect\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bisect_left</span>(<span class=\"hljs-params\">\r\n    sorted_collection: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], item: <span class=\"hljs-built_in\">int</span>, lo: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>, hi: <span class=\"hljs-built_in\">int</span> = -<span class=\"hljs-number\">1</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Locates the first element in a sorted array that is larger or equal to a given\r\n    value.\r\n\r\n    It has the same interface as\r\n    https://docs.python.org/3/library/bisect.html#bisect.bisect_left .\r\n\r\n    :param sorted_collection: some ascending sorted collection with comparable items\r\n    :param item: item to bisect\r\n    :param lo: lowest index to consider (as in sorted_collection[lo:hi])\r\n    :param hi: past the highest index to consider (as in sorted_collection[lo:hi])\r\n    :return: index i such that all values in sorted_collection[lo:i] are &lt; item and all\r\n        values in sorted_collection[i:hi] are &gt;= item.\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; bisect_left([0, 5, 7, 10, 15], 0)\r\n    0\r\n\r\n    &gt;&gt;&gt; bisect_left([0, 5, 7, 10, 15], 6)\r\n    2\r\n\r\n    &gt;&gt;&gt; bisect_left([0, 5, 7, 10, 15], 20)\r\n    5\r\n\r\n    &gt;&gt;&gt; bisect_left([0, 5, 7, 10, 15], 15, 1, 3)\r\n    3\r\n\r\n    &gt;&gt;&gt; bisect_left([0, 5, 7, 10, 15], 6, 2)\r\n    2\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> hi &lt; <span class=\"hljs-number\">0</span>:\r\n        hi = <span class=\"hljs-built_in\">len</span>(sorted_collection)\r\n\r\n    <span class=\"hljs-keyword\">while</span> lo &lt; hi:\r\n        mid = lo + (hi - lo) // <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">if</span> sorted_collection[mid] &lt; item:\r\n            lo = mid + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            hi = mid\r\n\r\n    <span class=\"hljs-keyword\">return</span> lo\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bisect_right</span>(<span class=\"hljs-params\">\r\n    sorted_collection: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], item: <span class=\"hljs-built_in\">int</span>, lo: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>, hi: <span class=\"hljs-built_in\">int</span> = -<span class=\"hljs-number\">1</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Locates the first element in a sorted array that is larger than a given value.\r\n\r\n    It has the same interface as\r\n    https://docs.python.org/3/library/bisect.html#bisect.bisect_right .\r\n\r\n    :param sorted_collection: some ascending sorted collection with comparable items\r\n    :param item: item to bisect\r\n    :param lo: lowest index to consider (as in sorted_collection[lo:hi])\r\n    :param hi: past the highest index to consider (as in sorted_collection[lo:hi])\r\n    :return: index i such that all values in sorted_collection[lo:i] are &lt;= item and\r\n        all values in sorted_collection[i:hi] are &gt; item.\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; bisect_right([0, 5, 7, 10, 15], 0)\r\n    1\r\n\r\n    &gt;&gt;&gt; bisect_right([0, 5, 7, 10, 15], 15)\r\n    5\r\n\r\n    &gt;&gt;&gt; bisect_right([0, 5, 7, 10, 15], 6)\r\n    2\r\n\r\n    &gt;&gt;&gt; bisect_right([0, 5, 7, 10, 15], 15, 1, 3)\r\n    3\r\n\r\n    &gt;&gt;&gt; bisect_right([0, 5, 7, 10, 15], 6, 2)\r\n    2\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> hi &lt; <span class=\"hljs-number\">0</span>:\r\n        hi = <span class=\"hljs-built_in\">len</span>(sorted_collection)\r\n\r\n    <span class=\"hljs-keyword\">while</span> lo &lt; hi:\r\n        mid = lo + (hi - lo) // <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">if</span> sorted_collection[mid] &lt;= item:\r\n            lo = mid + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            hi = mid\r\n\r\n    <span class=\"hljs-keyword\">return</span> lo\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insort_left</span>(<span class=\"hljs-params\">\r\n    sorted_collection: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], item: <span class=\"hljs-built_in\">int</span>, lo: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>, hi: <span class=\"hljs-built_in\">int</span> = -<span class=\"hljs-number\">1</span>\r\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Inserts a given value into a sorted array before other values with the same value.\r\n\r\n    It has the same interface as\r\n    https://docs.python.org/3/library/bisect.html#bisect.insort_left .\r\n\r\n    :param sorted_collection: some ascending sorted collection with comparable items\r\n    :param item: item to insert\r\n    :param lo: lowest index to consider (as in sorted_collection[lo:hi])\r\n    :param hi: past the highest index to consider (as in sorted_collection[lo:hi])\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; sorted_collection = [0, 5, 7, 10, 15]\r\n    &gt;&gt;&gt; insort_left(sorted_collection, 6)\r\n    &gt;&gt;&gt; sorted_collection\r\n    [0, 5, 6, 7, 10, 15]\r\n\r\n    &gt;&gt;&gt; sorted_collection = [(0, 0), (5, 5), (7, 7), (10, 10), (15, 15)]\r\n    &gt;&gt;&gt; item = (5, 5)\r\n    &gt;&gt;&gt; insort_left(sorted_collection, item)\r\n    &gt;&gt;&gt; sorted_collection\r\n    [(0, 0), (5, 5), (5, 5), (7, 7), (10, 10), (15, 15)]\r\n    &gt;&gt;&gt; item is sorted_collection[1]\r\n    True\r\n    &gt;&gt;&gt; item is sorted_collection[2]\r\n    False\r\n\r\n    &gt;&gt;&gt; sorted_collection = [0, 5, 7, 10, 15]\r\n    &gt;&gt;&gt; insort_left(sorted_collection, 20)\r\n    &gt;&gt;&gt; sorted_collection\r\n    [0, 5, 7, 10, 15, 20]\r\n\r\n    &gt;&gt;&gt; sorted_collection = [0, 5, 7, 10, 15]\r\n    &gt;&gt;&gt; insort_left(sorted_collection, 15, 1, 3)\r\n    &gt;&gt;&gt; sorted_collection\r\n    [0, 5, 7, 15, 10, 15]\r\n    &quot;&quot;&quot;</span>\r\n    sorted_collection.insert(bisect_left(sorted_collection, item, lo, hi), item)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insort_right</span>(<span class=\"hljs-params\">\r\n    sorted_collection: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], item: <span class=\"hljs-built_in\">int</span>, lo: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>, hi: <span class=\"hljs-built_in\">int</span> = -<span class=\"hljs-number\">1</span>\r\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Inserts a given value into a sorted array after other values with the same value.\r\n\r\n    It has the same interface as\r\n    https://docs.python.org/3/library/bisect.html#bisect.insort_right .\r\n\r\n    :param sorted_collection: some ascending sorted collection with comparable items\r\n    :param item: item to insert\r\n    :param lo: lowest index to consider (as in sorted_collection[lo:hi])\r\n    :param hi: past the highest index to consider (as in sorted_collection[lo:hi])\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; sorted_collection = [0, 5, 7, 10, 15]\r\n    &gt;&gt;&gt; insort_right(sorted_collection, 6)\r\n    &gt;&gt;&gt; sorted_collection\r\n    [0, 5, 6, 7, 10, 15]\r\n\r\n    &gt;&gt;&gt; sorted_collection = [(0, 0), (5, 5), (7, 7), (10, 10), (15, 15)]\r\n    &gt;&gt;&gt; item = (5, 5)\r\n    &gt;&gt;&gt; insort_right(sorted_collection, item)\r\n    &gt;&gt;&gt; sorted_collection\r\n    [(0, 0), (5, 5), (5, 5), (7, 7), (10, 10), (15, 15)]\r\n    &gt;&gt;&gt; item is sorted_collection[1]\r\n    False\r\n    &gt;&gt;&gt; item is sorted_collection[2]\r\n    True\r\n\r\n    &gt;&gt;&gt; sorted_collection = [0, 5, 7, 10, 15]\r\n    &gt;&gt;&gt; insort_right(sorted_collection, 20)\r\n    &gt;&gt;&gt; sorted_collection\r\n    [0, 5, 7, 10, 15, 20]\r\n\r\n    &gt;&gt;&gt; sorted_collection = [0, 5, 7, 10, 15]\r\n    &gt;&gt;&gt; insort_right(sorted_collection, 15, 1, 3)\r\n    &gt;&gt;&gt; sorted_collection\r\n    [0, 5, 7, 15, 10, 15]\r\n    &quot;&quot;&quot;</span>\r\n    sorted_collection.insert(bisect_right(sorted_collection, item, lo, hi), item)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search</span>(<span class=\"hljs-params\">sorted_collection: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], item: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of binary search algorithm in Python\r\n\r\n    Be careful collection must be ascending sorted, otherwise result will be\r\n    unpredictable\r\n\r\n    :param sorted_collection: some ascending sorted collection with comparable items\r\n    :param item: item value to search\r\n    :return: index of found item or None if item is not found\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; binary_search([0, 5, 7, 10, 15], 0)\r\n    0\r\n\r\n    &gt;&gt;&gt; binary_search([0, 5, 7, 10, 15], 15)\r\n    4\r\n\r\n    &gt;&gt;&gt; binary_search([0, 5, 7, 10, 15], 5)\r\n    1\r\n\r\n    &gt;&gt;&gt; binary_search([0, 5, 7, 10, 15], 6)\r\n\r\n    &quot;&quot;&quot;</span>\r\n    left = <span class=\"hljs-number\">0</span>\r\n    right = <span class=\"hljs-built_in\">len</span>(sorted_collection) - <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> left &lt;= right:\r\n        midpoint = left + (right - left) // <span class=\"hljs-number\">2</span>\r\n        current_item = sorted_collection[midpoint]\r\n        <span class=\"hljs-keyword\">if</span> current_item == item:\r\n            <span class=\"hljs-keyword\">return</span> midpoint\r\n        <span class=\"hljs-keyword\">elif</span> item &lt; current_item:\r\n            right = midpoint - <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            left = midpoint + <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search_std_lib</span>(<span class=\"hljs-params\">sorted_collection: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], item: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of binary search algorithm in Python using stdlib\r\n\r\n    Be careful collection must be ascending sorted, otherwise result will be\r\n    unpredictable\r\n\r\n    :param sorted_collection: some ascending sorted collection with comparable items\r\n    :param item: item value to search\r\n    :return: index of found item or None if item is not found\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; binary_search_std_lib([0, 5, 7, 10, 15], 0)\r\n    0\r\n\r\n    &gt;&gt;&gt; binary_search_std_lib([0, 5, 7, 10, 15], 15)\r\n    4\r\n\r\n    &gt;&gt;&gt; binary_search_std_lib([0, 5, 7, 10, 15], 5)\r\n    1\r\n\r\n    &gt;&gt;&gt; binary_search_std_lib([0, 5, 7, 10, 15], 6)\r\n\r\n    &quot;&quot;&quot;</span>\r\n    index = bisect.bisect_left(sorted_collection, item)\r\n    <span class=\"hljs-keyword\">if</span> index != <span class=\"hljs-built_in\">len</span>(sorted_collection) <span class=\"hljs-keyword\">and</span> sorted_collection[index] == item:\r\n        <span class=\"hljs-keyword\">return</span> index\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search_by_recursion</span>(<span class=\"hljs-params\">\r\n    sorted_collection: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], item: <span class=\"hljs-built_in\">int</span>, left: <span class=\"hljs-built_in\">int</span>, right: <span class=\"hljs-built_in\">int</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of binary search algorithm in Python by recursion\r\n\r\n    Be careful collection must be ascending sorted, otherwise result will be\r\n    unpredictable\r\n    First recursion should be started with left=0 and right=(len(sorted_collection)-1)\r\n\r\n    :param sorted_collection: some ascending sorted collection with comparable items\r\n    :param item: item value to search\r\n    :return: index of found item or None if item is not found\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; binary_search_by_recursion([0, 5, 7, 10, 15], 0, 0, 4)\r\n    0\r\n\r\n    &gt;&gt;&gt; binary_search_by_recursion([0, 5, 7, 10, 15], 15, 0, 4)\r\n    4\r\n\r\n    &gt;&gt;&gt; binary_search_by_recursion([0, 5, 7, 10, 15], 5, 0, 4)\r\n    1\r\n\r\n    &gt;&gt;&gt; binary_search_by_recursion([0, 5, 7, 10, 15], 6, 0, 4)\r\n\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> right &lt; left:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    midpoint = left + (right - left) // <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> sorted_collection[midpoint] == item:\r\n        <span class=\"hljs-keyword\">return</span> midpoint\r\n    <span class=\"hljs-keyword\">elif</span> sorted_collection[midpoint] &gt; item:\r\n        <span class=\"hljs-keyword\">return</span> binary_search_by_recursion(sorted_collection, item, left, midpoint - <span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">return</span> binary_search_by_recursion(sorted_collection, item, midpoint + <span class=\"hljs-number\">1</span>, right)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by comma:\\n&quot;</span>).strip()\r\n    collection = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>))\r\n    target = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter a single number to be found in the list:\\n&quot;</span>))\r\n    result = binary_search(collection, target)\r\n    <span class=\"hljs-keyword\">if</span> result <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{target}</span> was not found in <span class=\"hljs-subst\">{collection}</span>.&quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{target}</span> was found at position <span class=\"hljs-subst\">{result}</span> in <span class=\"hljs-subst\">{collection}</span>.&quot;</span>)\r\n"
    },
    "javascript": {
      "dir": "Search\\BinarySearch.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Search\\BinarySearch.js",
      "code": "<span class=\"hljs-comment\">/* Binary Search: https://en.wikipedia.org/wiki/Binary_search_algorithm\r\n *\r\n * Search a sorted array by repeatedly dividing the search interval\r\n * in half. Begin with an interval covering the whole array. If the value of the\r\n * search key is less than the item in the middle of the interval, narrow the interval\r\n * to the lower half. Otherwise narrow it to the upper half. Repeatedly check until the\r\n * value is found or the interval is empty.\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">binarySearchRecursive</span> (arr, x, low = <span class=\"hljs-number\">0</span>, high = arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) {\r\n  <span class=\"hljs-keyword\">const</span> mid = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(low + (high - low) / <span class=\"hljs-number\">2</span>)\r\n\r\n  <span class=\"hljs-keyword\">if</span> (high &gt;= low) {\r\n    <span class=\"hljs-keyword\">if</span> (arr[mid] === x) {\r\n      <span class=\"hljs-comment\">// item found =&gt; return its index</span>\r\n      <span class=\"hljs-keyword\">return</span> mid\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> (x &lt; arr[mid]) {\r\n      <span class=\"hljs-comment\">// arr[mid] is an upper bound for x, so if x is in arr =&gt; low &lt;= x &lt; mid</span>\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">binarySearchRecursive</span>(arr, x, low, mid - <span class=\"hljs-number\">1</span>)\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-comment\">// arr[mid] is a lower bound for x, so if x is in arr =&gt; mid &lt; x &lt;= high</span>\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">binarySearchRecursive</span>(arr, x, mid + <span class=\"hljs-number\">1</span>, high)\r\n    }\r\n  } <span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-comment\">// if low &gt; high =&gt; we have searched the whole array without finding the item</span>\r\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n  }\r\n}\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">binarySearchIterative</span> (arr, x, low = <span class=\"hljs-number\">0</span>, high = arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) {\r\n  <span class=\"hljs-keyword\">while</span> (high &gt;= low) {\r\n    <span class=\"hljs-keyword\">const</span> mid = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(low + (high - low) / <span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> (arr[mid] === x) {\r\n      <span class=\"hljs-comment\">// item found =&gt; return its index</span>\r\n      <span class=\"hljs-keyword\">return</span> mid\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> (x &lt; arr[mid]) {\r\n      <span class=\"hljs-comment\">// arr[mid] is an upper bound for x, so if x is in arr =&gt; low &lt;= x &lt; mid</span>\r\n      high = mid - <span class=\"hljs-number\">1</span>\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-comment\">// arr[mid] is a lower bound for x, so if x is in arr =&gt; mid &lt; x &lt;= high</span>\r\n      low = mid + <span class=\"hljs-number\">1</span>\r\n    }\r\n  }\r\n  <span class=\"hljs-comment\">// if low &gt; high =&gt; we have searched the whole array without finding the item</span>\r\n  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { binarySearchIterative, binarySearchRecursive }\r\n\r\n<span class=\"hljs-comment\">/* ---------------------------------- Test ---------------------------------- */</span>\r\n\r\n<span class=\"hljs-comment\">// const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>\r\n<span class=\"hljs-comment\">// const stringArr = [</span>\r\n<span class=\"hljs-comment\">//   &#x27;Alpha&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Bravo&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Charlie&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Delta&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Echo&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Foxtrot&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Golf&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Hotel&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;India&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Juliet&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Kilo&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Lima&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Mike&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;November&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Oscar&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Papa&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Quebec&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Romeo&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Sierra&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Tango&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Uniform&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Victor&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Whiskey&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;X-Ray&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Yankee&#x27;,</span>\r\n<span class=\"hljs-comment\">//   &#x27;Zulu&#x27;</span>\r\n<span class=\"hljs-comment\">// ]</span>\r\n\r\n<span class=\"hljs-comment\">// binarySearchRecursive(arr, 3)</span>\r\n<span class=\"hljs-comment\">// binarySearchIterative(arr, 7)</span>\r\n<span class=\"hljs-comment\">// binarySearchRecursive(arr, 13)</span>\r\n<span class=\"hljs-comment\">// binarySearchIterative(stringArr, &#x27;Charlie&#x27;)</span>\r\n<span class=\"hljs-comment\">// binarySearchRecursive(stringArr, &#x27;Zulu&#x27;)</span>\r\n<span class=\"hljs-comment\">// binarySearchIterative(stringArr, &#x27;Sierra&#x27;)</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "search\\binary_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search\\binary_search.cpp",
      "code": "<span class=\"hljs-comment\">/******************************************************************************\r\n * @file\r\n * @brief [Binary search\r\n * algorithm](https://en.wikipedia.org/wiki/Binary_search_algorithm)\r\n * @details\r\n * Binary search is a search algorithm that finds the position of a target value\r\n * within a sorted array. Binary search compares the target value to the middle\r\n * element of the array. If they are not equal, the half in which the target\r\n * cannot lie is eliminated and the search continues on the remaining half,\r\n * again taking the middle element to compare to the target value, and repeating\r\n * this until the target value is found. If the search ends with the remaining\r\n * half being empty, the target is not in the array.\r\n *\r\n * ### Implementation\r\n *\r\n * Binary search works on sorted arrays. Binary search begins by comparing an\r\n * element in the middle of the array with the target value. If the target value\r\n * matches the element, its position in the array is returned. If the target\r\n * value is less than the element, the search continues in the lower half of\r\n * the array. If the target value is greater than the element, the search\r\n * continues in the upper half of the array. By doing this, the algorithm\r\n * eliminates the half in which the target value cannot lie in each iteration.\r\n *\r\n * ### Complexities\r\n *\r\n * //n is the number of element in the array.\r\n *\r\n * Worst-case time complexity\tO(log n)\r\n * Best-case time complexity\tO(1)\r\n * Average time complexity\t    O(log n)\r\n * Worst-case space complexity  0(1)\r\n *\r\n * @author [Lajat Manekar](https://github.com/Lazeeez)\r\n * @author Unknown author\r\n *******************************************************************************/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::sort function</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for std::assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @namespace search\r\n * @brief Searching algorithms\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-keyword\">namespace</span> search {\r\n\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @namespace binary_search\r\n * @brief Binary search searching algorihm\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-keyword\">namespace</span> binary_search {\r\n\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @brief The main function which implements binary search\r\n * @param arr vector to be searched in\r\n * @param val value to be searched\r\n * @returns @param int index of val in vector arr\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr, <span class=\"hljs-type\">uint64_t</span> val)</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> low = <span class=\"hljs-number\">0</span>;                <span class=\"hljs-comment\">// set the lowest point of the vector.</span>\r\n    <span class=\"hljs-type\">uint64_t</span> high = arr.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// set the highest point of the vector.</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> (low &lt;= high) {\r\n        <span class=\"hljs-type\">uint64_t</span> m = low + (high - low) / <span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">// set the pivot point</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> (val == arr[m]) {\r\n            <span class=\"hljs-keyword\">return</span> m;\r\n        } <span class=\"hljs-comment\">/****************************************************\r\n           * if pivot point is the val, return it,\r\n           * else check if val is greater or smaller than pivot value\r\n           * and set the next pivot point accordingly.\r\n           ****************************************************/</span>\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (val &lt; arr[m]) {\r\n            high = m - <span class=\"hljs-number\">1</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            low = m + <span class=\"hljs-number\">1</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;  <span class=\"hljs-comment\">// if val is not in the array, return -1.</span>\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace binary_search</span>\r\n\r\n}  <span class=\"hljs-comment\">// namespace search</span>\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Self-test implementation #1\r\n * @returns void\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// testcase #1</span>\r\n    <span class=\"hljs-comment\">// array = [1,3,5,7,9,8,6,4,2] , Value = 4</span>\r\n    <span class=\"hljs-comment\">// should return 3</span>\r\n\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>}};\r\n    std::<span class=\"hljs-built_in\">sort</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());\r\n    <span class=\"hljs-type\">uint64_t</span> expected_ans = <span class=\"hljs-number\">3</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> derived_ans = search::binary_search::<span class=\"hljs-built_in\">binarySearch</span>(arr, <span class=\"hljs-number\">4</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test #1: &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(derived_ans == expected_ans);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed!&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Self-test implementation #2\r\n * @returns void\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// testcase #2</span>\r\n    <span class=\"hljs-comment\">// array = [1,23,25,4,2] , Value = 25</span>\r\n    <span class=\"hljs-comment\">// should return 4</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>}};\r\n    std::<span class=\"hljs-built_in\">sort</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());\r\n    <span class=\"hljs-type\">uint64_t</span> expected_ans = <span class=\"hljs-number\">4</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> derived_ans = search::binary_search::<span class=\"hljs-built_in\">binarySearch</span>(arr, <span class=\"hljs-number\">25</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test #2: &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(derived_ans == expected_ans);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed!&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Self-test implementation #3\r\n * @returns void\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// testcase #3</span>\r\n    <span class=\"hljs-comment\">// array = [1,31,231,12,12,2,5,51,21,23,12,3] , Value = 5</span>\r\n    <span class=\"hljs-comment\">// should return 8</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">51</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>}};\r\n    std::<span class=\"hljs-built_in\">sort</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());\r\n    <span class=\"hljs-type\">uint64_t</span> expected_ans = <span class=\"hljs-number\">8</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> derived_ans = search::binary_search::<span class=\"hljs-built_in\">binarySearch</span>(arr, <span class=\"hljs-number\">31</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test #3: &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(derived_ans == expected_ans);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed!&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Main function\r\n * @returns 0 on exit\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test1</span>();  <span class=\"hljs-comment\">// run self-test implementation #1</span>\r\n    <span class=\"hljs-built_in\">test2</span>();  <span class=\"hljs-comment\">// run self-test implementation #2</span>\r\n    <span class=\"hljs-built_in\">test3</span>();  <span class=\"hljs-comment\">// run self-test implementation #3</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\searches\\BinarySearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\searches\\BinarySearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.searches;\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.lang.String.format;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadLocalRandom;\r\n<span class=\"hljs-keyword\">import</span> java.util.stream.IntStream;\r\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.devutils.searches.SearchAlgorithm;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Binary search is one of the most popular algorithms The algorithm finds the\r\n * position of a target value within a sorted array\r\n *\r\n * &lt;p&gt;\r\n * Worst-case performance O(log n) Best-case performance O(1) Average\r\n * performance O(log n) Worst-case space complexity O(1)\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Varun Upadhyay (https://github.com/varunu28)\r\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\r\n * <span class=\"hljs-doctag\">@see</span> SearchAlgorithm\r\n * <span class=\"hljs-doctag\">@see</span> IterativeBinarySearch\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinarySearch</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SearchAlgorithm</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> array is an array where the element should be found\r\n     * <span class=\"hljs-doctag\">@param</span> key is an element which should be found\r\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; is any comparable type\r\n     * <span class=\"hljs-doctag\">@return</span> index of the element\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T[] array, T key)</span> {\r\n        <span class=\"hljs-keyword\">return</span> search(array, key, <span class=\"hljs-number\">0</span>, array.length);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method implements the Generic Binary Search\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> array The array to make the binary search\r\n     * <span class=\"hljs-doctag\">@param</span> key The number you are looking for\r\n     * <span class=\"hljs-doctag\">@param</span> left The lower bound\r\n     * <span class=\"hljs-doctag\">@param</span> right The upper bound\r\n     * <span class=\"hljs-doctag\">@return</span> the location of the key\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(T array[], T key, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (right &lt; left) {\r\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// this means that the key not found</span>\r\n        }\r\n        <span class=\"hljs-comment\">// find median</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">median</span> <span class=\"hljs-operator\">=</span> (left + right) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">comp</span> <span class=\"hljs-operator\">=</span> key.compareTo(array[median]);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (comp == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> median;\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (comp &lt; <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> search(array, key, left, median - <span class=\"hljs-number\">1</span>);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> search(array, key, median + <span class=\"hljs-number\">1</span>, right);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Driver Program</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">// Just generate data</span>\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> ThreadLocalRandom.current();\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxElement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100000</span>;\r\n\r\n        Integer[] integers\r\n                = IntStream.generate(() -&gt; r.nextInt(maxElement))\r\n                        .limit(size)\r\n                        .sorted()\r\n                        .boxed()\r\n                        .toArray(Integer[]::<span class=\"hljs-keyword\">new</span>);\r\n\r\n        <span class=\"hljs-comment\">// The element that should be found</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">shouldBeFound</span> <span class=\"hljs-operator\">=</span> integers[r.nextInt(size - <span class=\"hljs-number\">1</span>)];\r\n\r\n        <span class=\"hljs-type\">BinarySearch</span> <span class=\"hljs-variable\">search</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BinarySearch</span>();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">atIndex</span> <span class=\"hljs-operator\">=</span> search.find(integers, shouldBeFound);\r\n\r\n        System.out.println(\r\n                format(\r\n                        <span class=\"hljs-string\">&quot;Should be found: %d. Found %d at index %d. An array length %d&quot;</span>,\r\n                        shouldBeFound, integers[atIndex], atIndex, size));\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">toCheck</span> <span class=\"hljs-operator\">=</span> Arrays.binarySearch(integers, shouldBeFound);\r\n        System.out.println(\r\n                format(\r\n                        <span class=\"hljs-string\">&quot;Found by system method at an index: %d. Is equal: %b&quot;</span>, toCheck, toCheck == atIndex));\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "searching\\binary_search.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching\\binary_search.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Program to perform [binary\r\n * search](https://en.wikipedia.org/wiki/Binary_search_algorithm) of a target\r\n * value in a given *sorted* array.\r\n * @authors [James McDermott](https://github.com/theycallmemac) - recursive\r\n * algorithm\r\n * @authors [Krishna Vedala](https://github.com/kvedala) - iterative algorithm\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** Recursive implementation\r\n * \\param[in] arr array to search\r\n * \\param l left index of search range\r\n * \\param r right index of search range\r\n * \\param x target value to search for\r\n * \\returns location of x assuming array arr[l..r] is present\r\n * \\returns -1 otherwise\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">binarysearch1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> x)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (r &gt;= l)\r\n    {\r\n        <span class=\"hljs-type\">int</span> mid = l + (r - l) / <span class=\"hljs-number\">2</span>;\r\n\r\n        <span class=\"hljs-comment\">// If element is present at middle</span>\r\n        <span class=\"hljs-keyword\">if</span> (arr[mid] == x)\r\n            <span class=\"hljs-keyword\">return</span> mid;\r\n\r\n        <span class=\"hljs-comment\">// If element is smaller than middle</span>\r\n        <span class=\"hljs-keyword\">if</span> (arr[mid] &gt; x)\r\n            <span class=\"hljs-keyword\">return</span> binarysearch1(arr, l, mid - <span class=\"hljs-number\">1</span>, x);\r\n\r\n        <span class=\"hljs-comment\">// Else element is in right subarray</span>\r\n        <span class=\"hljs-keyword\">return</span> binarysearch1(arr, mid + <span class=\"hljs-number\">1</span>, r, x);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// When element is not present in array</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Iterative implementation\r\n * \\param[in] arr array to search\r\n * \\param l left index of search range\r\n * \\param r right index of search range\r\n * \\param x target value to search for\r\n * \\returns location of x assuming array arr[l..r] is present\r\n * \\returns -1 otherwise\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">binarysearch2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> x)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> mid = l + (r - l) / <span class=\"hljs-number\">2</span>;\r\n\r\n    <span class=\"hljs-keyword\">while</span> (arr[mid] != x)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (r &lt;= l || r &lt; <span class=\"hljs-number\">0</span>)\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (arr[mid] &gt; x)\r\n            <span class=\"hljs-comment\">// If element is smaller than middle</span>\r\n            r = mid - <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-comment\">// Else element is in right subarray</span>\r\n            l = mid + <span class=\"hljs-number\">1</span>;\r\n\r\n        mid = l + (r - l) / <span class=\"hljs-number\">2</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// When element is not present in array</span>\r\n    <span class=\"hljs-keyword\">return</span> mid;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Test implementations */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-comment\">// give function an array to work with</span>\r\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">40</span>};\r\n    <span class=\"hljs-comment\">// get size of array</span>\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-keyword\">sizeof</span>(arr) / <span class=\"hljs-keyword\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test 1.... &quot;</span>);\r\n    <span class=\"hljs-comment\">// set value to look for</span>\r\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">10</span>;\r\n    <span class=\"hljs-comment\">// set result to what is returned from binarysearch</span>\r\n    <span class=\"hljs-type\">int</span> result = binarysearch1(arr, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, x);\r\n    assert(result == <span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed recursive... &quot;</span>);\r\n    result = binarysearch2(arr, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, x);\r\n    assert(result == <span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed iterative...\\n&quot;</span>);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test 2.... &quot;</span>);\r\n    x = <span class=\"hljs-number\">5</span>;\r\n    <span class=\"hljs-comment\">// set result to what is returned from binarysearch</span>\r\n    result = binarysearch1(arr, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, x);\r\n    assert(result == <span class=\"hljs-number\">-1</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed recursive... &quot;</span>);\r\n    result = binarysearch2(arr, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, x);\r\n    assert(result == <span class=\"hljs-number\">-1</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed iterative...\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    test();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "haskell": {
      "dir": "src\\Misc\\BinarySearch.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src\\Misc\\BinarySearch.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Misc.BinarySearch <span class=\"hljs-keyword\">where</span>\r\n\r\n<span class=\"hljs-title\">bsWithIndex</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; a -&gt; <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Maybe</span> <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">bsWithIndex</span> list n i\r\n    | n == head list        = <span class=\"hljs-type\">Just</span> i\r\n    | len == <span class=\"hljs-number\">1</span>              = <span class=\"hljs-type\">Nothing</span>   <span class=\"hljs-comment\">-- only candidate in list is not the right elem</span>\r\n    | n &lt; head ys           = bsWithIndex xs n i\r\n    | otherwise             = bsWithIndex ys n (i + half)\r\n    <span class=\"hljs-keyword\">where</span> \r\n        len         = length list\r\n        half        = len `div` <span class=\"hljs-number\">2</span> \r\n        (xs, ys)    = splitAt half list\r\n\r\n<span class=\"hljs-title\">bs</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; a -&gt; <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">bs</span> list n = <span class=\"hljs-keyword\">case</span> bsWithIndex list n <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">of</span>\r\n    <span class=\"hljs-type\">Just</span> x  -&gt; x\r\n    <span class=\"hljs-type\">Nothing</span> -&gt; -<span class=\"hljs-number\">1</span>\r\n\r\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\r\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\r\n    <span class=\"hljs-keyword\">let</span> intList = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">30</span>]\r\n    print $ bs intList <span class=\"hljs-number\">29</span>  <span class=\"hljs-comment\">-- 29 -&gt; -1 as not in list</span>\r\n    print $ bs intList <span class=\"hljs-number\">7</span>   <span class=\"hljs-comment\">--  7 -&gt;  2 as in list</span>\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Search\\BinarySearch.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Search\\BinarySearch.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Search\r\n\r\n<span class=\"hljs-keyword\">module</span> BinarySearch <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-comment\">/// Search the target item in a sorted array.</span>\r\n    <span class=\"hljs-comment\">/// Returns -1 when the target is not found.</span>\r\n    <span class=\"hljs-comment\">/// Time complexity: O(log(sortedData.Length)))</span>\r\n    <span class=\"hljs-keyword\">let</span> findIndex target sortedData <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> search l r <span class=\"hljs-operator\">=</span>\r\n            <span class=\"hljs-keyword\">let</span> count <span class=\"hljs-operator\">=</span> r <span class=\"hljs-operator\">-</span> l\r\n            <span class=\"hljs-keyword\">let</span> mid <span class=\"hljs-operator\">=</span> (l <span class=\"hljs-operator\">+</span> r) <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2</span>\r\n            <span class=\"hljs-keyword\">let</span> midItem <span class=\"hljs-operator\">=</span> Array.item mid sortedData\r\n\r\n            <span class=\"hljs-keyword\">match</span> count <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-number\">1</span>, compare midItem target <span class=\"hljs-keyword\">with</span>\r\n            <span class=\"hljs-operator\">|</span> _, <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">-&gt;</span> mid\r\n            <span class=\"hljs-operator\">|</span> <span class=\"hljs-literal\">true</span>, _ <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-number\">-1</span>\r\n            <span class=\"hljs-operator\">|</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-operator\">-&gt;</span> search mid r\r\n            <span class=\"hljs-operator\">|</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">-&gt;</span> search l mid\r\n            <span class=\"hljs-operator\">|</span> _ <span class=\"hljs-operator\">-&gt;</span> exn () <span class=\"hljs-operator\">|&gt;</span> <span class=\"hljs-built_in\">raise</span>\r\n\r\n        search <span class=\"hljs-number\">0</span> (Array.length sortedData <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)\r\n"
    },
    "rust": {
      "dir": "src\\searching\\binary_search.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\searching\\binary_search.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">binary_search</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(item: &amp;T, arr: &amp;[T]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">left</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">right</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n\r\n    <span class=\"hljs-keyword\">while</span> left &lt; right {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid</span> = left + (right - left) / <span class=\"hljs-number\">2</span>;\r\n\r\n        <span class=\"hljs-keyword\">match</span> item.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;arr[mid]) {\r\n            Ordering::Less =&gt; right = mid,\r\n            Ordering::Equal =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(mid),\r\n            Ordering::Greater =&gt; left = mid + <span class=\"hljs-number\">1</span>,\r\n        }\r\n    }\r\n    <span class=\"hljs-literal\">None</span>\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;<span class=\"hljs-string\">&quot;a&quot;</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-literal\">None</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_item</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;<span class=\"hljs-string\">&quot;a&quot;</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">search_strings</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;<span class=\"hljs-string\">&quot;a&quot;</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;google&quot;</span>, <span class=\"hljs-string\">&quot;zoo&quot;</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">search_ints</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;<span class=\"hljs-number\">4</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">3</span>));\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;<span class=\"hljs-number\">3</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>));\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;<span class=\"hljs-number\">2</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">1</span>));\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;<span class=\"hljs-number\">1</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not_found</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">binary_search</span>(&amp;<span class=\"hljs-number\">5</span>, &amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-literal\">None</span>);\r\n    }\r\n}\r\n"
    },
    "dart": {
      "dir": "search\\binary_Search.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/search\\binary_Search.dart",
      "code": "<span class=\"hljs-built_in\">int</span> binary_search(<span class=\"hljs-built_in\">List</span> a, <span class=\"hljs-built_in\">int</span> l, <span class=\"hljs-built_in\">int</span> r, <span class=\"hljs-built_in\">int</span> x) {\r\n  <span class=\"hljs-keyword\">if</span> (r &gt;= l) {\r\n    <span class=\"hljs-built_in\">int</span> middle = (l + (r - l) / <span class=\"hljs-number\">2</span>).toInt();\r\n\r\n    <span class=\"hljs-comment\">//If the element is present at middle</span>\r\n    <span class=\"hljs-keyword\">if</span> (a[middle] == x) {\r\n      <span class=\"hljs-keyword\">return</span> middle;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//If the element is smaller than middle</span>\r\n    <span class=\"hljs-keyword\">if</span> (a[middle] &gt; x) {\r\n      <span class=\"hljs-keyword\">return</span> binary_search(a, l, middle - <span class=\"hljs-number\">1</span>, x);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> binary_search(a, middle + <span class=\"hljs-number\">1</span>, r, x);\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-built_in\">List</span> list = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">89</span>];\r\n  <span class=\"hljs-built_in\">int</span> x = <span class=\"hljs-number\">55</span>;\r\n  <span class=\"hljs-built_in\">int</span> n = list.length;\r\n  <span class=\"hljs-built_in\">int</span> index = binary_search(list, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, x);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;list:&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(list);\r\n  <span class=\"hljs-keyword\">if</span> (index != <span class=\"hljs-number\">-1</span>) {\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;<span class=\"hljs-subst\">$x</span> found at positions: <span class=\"hljs-subst\">$index</span>&#x27;</span>);\r\n  } <span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;<span class=\"hljs-subst\">$x</span> Not found&#x27;</span>);\r\n  }\r\n}\r\n"
    },
    "ruby": {
      "dir": "searches\\binary_search.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/searches\\binary_search.rb",
      "code": "<span class=\"hljs-comment\"># Searches through a list for a value in O(log(n)) time.</span>\r\n<span class=\"hljs-comment\"># The list must be sorted.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">binary_search</span><span class=\"hljs-params\">(array, key)</span></span>\r\n  front = <span class=\"hljs-number\">0</span>\r\n  back = array.length - <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">while</span> front &lt;= back\r\n    middle = (front + back) / <span class=\"hljs-number\">2</span>\r\n    <span class=\"hljs-keyword\">return</span> middle <span class=\"hljs-keyword\">if</span> array[middle] == key\r\n\r\n    <span class=\"hljs-keyword\">if</span> key &lt; array[middle]\r\n      back = middle - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">else</span>\r\n      front = middle + <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n  \r\n  <span class=\"hljs-literal\">nil</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs <span class=\"hljs-string\">&quot;Enter a sorted space-separated list:&quot;</span>\r\narr = gets.chomp.split(<span class=\"hljs-string\">&#x27; &#x27;</span>).map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\r\n\r\nputs <span class=\"hljs-string\">&quot;Enter the value to be searched:&quot;</span>\r\nvalue = gets.chomp.to_i\r\n\r\nputs <span class=\"hljs-keyword\">if</span> binary_search(arr, value) != <span class=\"hljs-literal\">nil</span>\r\n  <span class=\"hljs-string\">&quot;Found at index <span class=\"hljs-subst\">#{binary_search(arr, value)}</span>&quot;</span>\r\n<span class=\"hljs-keyword\">else</span>\r\n  <span class=\"hljs-string\">&quot;Not found&quot;</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "php": {
      "dir": "searches\\binary_search.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/searches\\binary_search.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">binarySearchIterative</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$list</span>, <span class=\"hljs-variable\">$target</span></span>)\r\n</span>{\r\n  <span class=\"hljs-comment\">/*\r\n   * Binary search algorithm in PHP\r\n   *\r\n   * Be careful collection must be ascending sorted, otherwise result will be unpredictable\r\n   *\r\n   * <span class=\"hljs-doctag\">@param</span> Array $list a sorted array list of integers to search\r\n   * <span class=\"hljs-doctag\">@param</span> integer $target an integer number to search for in the list\r\n   * <span class=\"hljs-doctag\">@return</span> integer the index where the target is found (or null if not found)\r\n   *\r\n   * Examples:\r\n   * binarySearchIterative([0, 5, 7, 10, 15], 0);\r\n   * 0\r\n   * binarySearchIterative([0, 5, 7, 10, 15], 15);\r\n   * 4\r\n   * binarySearchIterative([0, 5, 7, 10, 15], 5);\r\n   * 1\r\n   * binarySearchIterative([0, 5, 7, 10, 15], 6);\r\n   *\r\n   */</span>\r\n    <span class=\"hljs-variable\">$first</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-variable\">$last</span> = <span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$list</span>)-<span class=\"hljs-number\">1</span>;\r\n\r\n\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable\">$first</span> &lt;= <span class=\"hljs-variable\">$last</span>) {\r\n        <span class=\"hljs-variable\">$mid</span> = (<span class=\"hljs-variable\">$first</span> + <span class=\"hljs-variable\">$last</span>) &gt;&gt; <span class=\"hljs-number\">1</span>;\r\n\r\n\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$list</span>[<span class=\"hljs-variable\">$mid</span>] == <span class=\"hljs-variable\">$target</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$mid</span>;\r\n        } <span class=\"hljs-keyword\">elseif</span> (<span class=\"hljs-variable\">$list</span>[<span class=\"hljs-variable\">$mid</span>] &gt; <span class=\"hljs-variable\">$target</span>) {\r\n            <span class=\"hljs-variable\">$last</span> = <span class=\"hljs-variable\">$mid</span> - <span class=\"hljs-number\">1</span>;\r\n        } <span class=\"hljs-keyword\">elseif</span> (<span class=\"hljs-variable\">$list</span>[<span class=\"hljs-variable\">$mid</span>] &lt; <span class=\"hljs-variable\">$target</span>) {\r\n            <span class=\"hljs-variable\">$first</span> = <span class=\"hljs-variable\">$mid</span> + <span class=\"hljs-number\">1</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">binarySearchByRecursion</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$list</span>, <span class=\"hljs-variable\">$target</span>, <span class=\"hljs-variable\">$start</span>, <span class=\"hljs-variable\">$end</span></span>)\r\n</span>{\r\n  <span class=\"hljs-comment\">/*\r\n   * Binary search algorithm in PHP by recursion\r\n   *\r\n   * Be careful collection must be ascending sorted, otherwise result will be unpredictable\r\n   *\r\n   * <span class=\"hljs-doctag\">@param</span> Array $list a sorted array list of integers to search\r\n   * <span class=\"hljs-doctag\">@param</span> integer $target an integer number to search for in the list\r\n   * <span class=\"hljs-doctag\">@param</span> integer $start an integer number where to start searching in the list\r\n   * <span class=\"hljs-doctag\">@param</span> integer $end an integer number where to end searching in the list\r\n   * <span class=\"hljs-doctag\">@return</span> integer the index where the target is found (or null if not found)\r\n   *\r\n   * Examples:\r\n   * binarySearchByRecursion([0, 5, 7, 10, 15], 0, 0, 4);\r\n   * 0\r\n   * binarySearchByRecursion([0, 5, 7, 10, 15], 15, 0, 4);\r\n   * 4\r\n   * binarySearchByRecursion([0, 5, 7, 10, 15], 5, 0, 4);\r\n   * 1\r\n   * binarySearchByRecursion([0, 5, 7, 10, 15], 6, 0, 4);\r\n   *\r\n   */</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$start</span> &gt; <span class=\"hljs-variable\">$end</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n\r\n\r\n    <span class=\"hljs-variable\">$mid</span> = (<span class=\"hljs-variable\">$start</span> + <span class=\"hljs-variable\">$end</span>) &gt;&gt; <span class=\"hljs-number\">1</span>;\r\n\r\n\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$list</span>[<span class=\"hljs-variable\">$mid</span>] == <span class=\"hljs-variable\">$target</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$mid</span>;\r\n    } <span class=\"hljs-keyword\">elseif</span> (<span class=\"hljs-variable\">$list</span>[<span class=\"hljs-variable\">$mid</span>] &gt; <span class=\"hljs-variable\">$target</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">binarySearchByRecursion</span>(<span class=\"hljs-variable\">$list</span>, <span class=\"hljs-variable\">$target</span>, <span class=\"hljs-variable\">$start</span>, <span class=\"hljs-variable\">$mid</span>-<span class=\"hljs-number\">1</span>);\r\n    } <span class=\"hljs-keyword\">elseif</span> (<span class=\"hljs-variable\">$list</span>[<span class=\"hljs-variable\">$mid</span>] &lt; <span class=\"hljs-variable\">$target</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">binarySearchByRecursion</span>(<span class=\"hljs-variable\">$list</span>, <span class=\"hljs-variable\">$target</span>, <span class=\"hljs-variable\">$mid</span>+<span class=\"hljs-number\">1</span>, <span class=\"hljs-variable\">$end</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n}\r\n\r\n\r\n<span class=\"hljs-title function_ invoke__\">assert</span>(<span class=\"hljs-title function_ invoke__\">binarySearchIterative</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">0</span>);\r\n<span class=\"hljs-title function_ invoke__\">assert</span>(<span class=\"hljs-title function_ invoke__\">binarySearchIterative</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">7</span>) == <span class=\"hljs-number\">2</span>);\r\n<span class=\"hljs-title function_ invoke__\">assert</span>(<span class=\"hljs-title function_ invoke__\">binarySearchIterative</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">8</span>) == <span class=\"hljs-literal\">null</span>);\r\n\r\n<span class=\"hljs-title function_ invoke__\">assert</span>(<span class=\"hljs-title function_ invoke__\">binarySearchByRecursion</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">0</span>);\r\n<span class=\"hljs-title function_ invoke__\">assert</span>(<span class=\"hljs-title function_ invoke__\">binarySearchByRecursion</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">4</span>);\r\n<span class=\"hljs-title function_ invoke__\">assert</span>(<span class=\"hljs-title function_ invoke__\">binarySearchByRecursion</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">2</span>);\r\n<span class=\"hljs-title function_ invoke__\">assert</span>(<span class=\"hljs-title function_ invoke__\">binarySearchByRecursion</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>) == <span class=\"hljs-literal\">null</span>);\r\n"
    },
    "kotlin": {
      "dir": "src\\main\\kotlin\\search\\BinarySearch.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src\\main\\kotlin\\search\\BinarySearch.kt",
      "code": "<span class=\"hljs-keyword\">package</span> search\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Binary search is an algorithm which finds the position of a target value within an array (Sorted)\r\n *\r\n * Worst-case performance\tO(log(n))\r\n * Best-case performance\tO(1)\r\n * Average performance\tO(log(n))\r\n * Worst-case space complexity\tO(1)\r\n */</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@param</span> array is an array where the element should be found\r\n * <span class=\"hljs-doctag\">@param</span> key is an element which should be found\r\n * <span class=\"hljs-doctag\">@return</span> index of the element\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;, key: <span class=\"hljs-type\">T</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\r\n    <span class=\"hljs-keyword\">return</span> binarySearchHelper(array, key, <span class=\"hljs-number\">0</span>, array.size - <span class=\"hljs-number\">1</span>)\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@param</span> array The array to search\r\n * <span class=\"hljs-doctag\">@param</span> key The element you are looking for\r\n * <span class=\"hljs-doctag\">@return</span> the location of the key or -1 if the element is not found\r\n **/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">binarySearchHelper</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;, key: <span class=\"hljs-type\">T</span>, start: <span class=\"hljs-type\">Int</span>, end: <span class=\"hljs-type\">Int</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\r\n    <span class=\"hljs-keyword\">if</span> (start &gt; end) {\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">val</span> mid = start + (end - start) / <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">when</span> {\r\n        array[mid].compareTo(key) == <span class=\"hljs-number\">0</span> -&gt; mid\r\n        array[mid].compareTo(key) &gt; <span class=\"hljs-number\">0</span> -&gt; binarySearchHelper(array, key, start, mid - <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">else</span> -&gt; binarySearchHelper(array, key, mid + <span class=\"hljs-number\">1</span>, end)\r\n    }\r\n}\r\n"
    },
    "scala": {
      "dir": "src\\main\\scala\\Search\\BinarySearch.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src\\main\\scala\\Search\\BinarySearch.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Search</span>\r\n\r\n<span class=\"hljs-comment\">/** An implementation of binary search algorithm to search an element in a sorted list\r\n  */</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> scala.annotation.tailrec\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">BinarySearch</span> </span>{\r\n\r\n  <span class=\"hljs-comment\">/** @param arr\r\n    *   - a sequence of integers\r\n    * @param elem\r\n    *   - a integer to search for in the @args\r\n    * @return\r\n    *   - index of the @elem otherwise -1\r\n    */</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">binarySearch</span></span>(arr: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Int</span>], elem: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Int</span> = {\r\n    binarySearch(arr, elem, <span class=\"hljs-number\">0</span>, arr.length)\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/** @param arr\r\n    *   - a sequence of integers\r\n    * @param elem\r\n    *   - a integer to search for in the @args\r\n    * @param fromIndex\r\n    *   - the index of the first element (inclusive) to be searched\r\n    * @param toIndex\r\n    *   - toIndex the index of the last element (exclusive) to be searched\r\n    * @return\r\n    *   - index of the @elem otherwise -1\r\n    */</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">binarySearch</span></span>(arr: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Int</span>], elem: <span class=\"hljs-type\">Int</span>, fromIndex: <span class=\"hljs-type\">Int</span>, toIndex: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Int</span> = {\r\n\r\n    <span class=\"hljs-meta\">@tailrec</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">SearchImpl</span></span>(lo: <span class=\"hljs-type\">Int</span>, hi: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Int</span> = {\r\n      <span class=\"hljs-keyword\">if</span> (lo &gt; hi)\r\n        <span class=\"hljs-number\">-1</span>\r\n      <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">val</span> mid: <span class=\"hljs-type\">Int</span> = lo + (hi - lo) / <span class=\"hljs-number\">2</span>\r\n        arr(mid) <span class=\"hljs-keyword\">match</span> {\r\n          <span class=\"hljs-keyword\">case</span> mv <span class=\"hljs-keyword\">if</span> (mv == elem) =&gt; mid\r\n          <span class=\"hljs-keyword\">case</span> mv <span class=\"hljs-keyword\">if</span> (mv &lt;= elem) =&gt; <span class=\"hljs-type\">SearchImpl</span>(mid + <span class=\"hljs-number\">1</span>, hi)\r\n          <span class=\"hljs-keyword\">case</span> _                  =&gt; <span class=\"hljs-type\">SearchImpl</span>(lo, mid - <span class=\"hljs-number\">1</span>)\r\n        }\r\n      }\r\n    }\r\n\r\n    <span class=\"hljs-type\">SearchImpl</span>(fromIndex, toIndex - <span class=\"hljs-number\">1</span>)\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/** @param arr\r\n    *   - a sequence of integers\r\n    * @param elem\r\n    *   - a integer to search for in the @args\r\n    * @return\r\n    */</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lowerBound</span></span>(arr: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Int</span>], elem: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Int</span> = {\r\n    lowerBound(arr, elem, <span class=\"hljs-number\">0</span>, arr.length - <span class=\"hljs-number\">1</span>)\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/** @param arr\r\n    *   - a sequence of integers\r\n    * @param elem\r\n    *   - a integer to search for in the @args\r\n    * @param lo\r\n    *   - lowest value index\r\n    * @param hi\r\n    *   - highest value index\r\n    * @return\r\n    */</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lowerBound</span></span>(arr: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Int</span>], elem: <span class=\"hljs-type\">Int</span>, lo: <span class=\"hljs-type\">Int</span>, hi: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Int</span> = {\r\n    <span class=\"hljs-keyword\">if</span> (lo == hi) lo\r\n    <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-keyword\">val</span> m: <span class=\"hljs-type\">Int</span> = lo + (hi - lo) / <span class=\"hljs-number\">2</span>\r\n      arr(m) <span class=\"hljs-keyword\">match</span> {\r\n        <span class=\"hljs-keyword\">case</span> mv <span class=\"hljs-keyword\">if</span> (mv &lt; elem)  =&gt; lowerBound(arr, elem, m + <span class=\"hljs-number\">1</span>, hi)\r\n        <span class=\"hljs-keyword\">case</span> mv <span class=\"hljs-keyword\">if</span> (mv &gt;= elem) =&gt; lowerBound(arr, elem, lo, m)\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "swift": {
      "dir": "Search\\BinarySearch.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/Search\\BinarySearch.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">binarySearch</span>&lt;<span class=\"hljs-type\">T</span>: <span class=\"hljs-type\">Comparable</span>&gt;(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">a</span>: [<span class=\"hljs-type\">T</span>], <span class=\"hljs-params\">key</span>: <span class=\"hljs-type\">T</span>) -&gt; <span class=\"hljs-type\">Int</span>? {\r\n    <span class=\"hljs-keyword\">var</span> lowerBound <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">var</span> upperBound <span class=\"hljs-operator\">=</span> a.count\r\n    <span class=\"hljs-keyword\">while</span> lowerBound <span class=\"hljs-operator\">&lt;</span> upperBound {\r\n        <span class=\"hljs-keyword\">let</span> midIndex <span class=\"hljs-operator\">=</span> lowerBound <span class=\"hljs-operator\">+</span> (upperBound <span class=\"hljs-operator\">-</span> lowerBound) <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">if</span> a[midIndex] <span class=\"hljs-operator\">==</span> key {\r\n            <span class=\"hljs-keyword\">return</span> midIndex\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> a[midIndex] <span class=\"hljs-operator\">&lt;</span> key {\r\n            lowerBound <span class=\"hljs-operator\">=</span> midIndex <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            upperBound <span class=\"hljs-operator\">=</span> midIndex\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n}\r\n<span class=\"hljs-comment\">// The code below can be used for testing</span>\r\n\r\n<span class=\"hljs-comment\">// var numbers = [7, 10, 13, 17, 19, 24, 29, 31, 32, 37, 41, 43, 47, 51, 53, 119, 163, 611, 627]</span>\r\n<span class=\"hljs-comment\">// if let searchIndex = binarySearch(numbers, key: 10) {</span>\r\n<span class=\"hljs-comment\">//     print(&quot;Element found on index: \\(searchIndex)&quot;)</span>\r\n<span class=\"hljs-comment\">// }</span>\r\n<span class=\"hljs-comment\">// else {</span>\r\n<span class=\"hljs-comment\">// print(&quot;Element not found&quot;)</span>\r\n<span class=\"hljs-comment\">// }</span>\r\n\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\Searching\\binary_search.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\Searching\\binary_search.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">p</span> = <span class=\"hljs-title\">binary_search</span><span class=\"hljs-params\">(A,t)</span></span>\r\n<span class=\"hljs-comment\">%% Binary Search</span>\r\n<span class=\"hljs-comment\">% This function binary searches target value (t) in sorted (in increasing order) array A. </span>\r\n<span class=\"hljs-comment\">% Binary search compares the target value to the middle element of the</span>\r\n<span class=\"hljs-comment\">% array. If they are not equal, it determines the half part of array in which the taget might be existed,</span>\r\n<span class=\"hljs-comment\">% then changes the search range from left or right to half array range and</span>\r\n<span class=\"hljs-comment\">% repeat searching for this new range. </span>\r\n<span class=\"hljs-comment\">% If target can be found in array, this function returns its index.</span>\r\n<span class=\"hljs-comment\">% If target can not be found in array, it displays &quot;target is not found in</span>\r\n<span class=\"hljs-comment\">% array&quot;</span>\r\n\r\narray_length = <span class=\"hljs-built_in\">length</span>(A);\r\ncounter = <span class=\"hljs-number\">0</span>;                                      <span class=\"hljs-comment\">% number of iteration in searching algorithm</span>\r\nL_SearchRange = <span class=\"hljs-number\">1</span>;                                <span class=\"hljs-comment\">%initial search range</span>\r\nR_SearchRange = array_length;\r\n\r\n<span class=\"hljs-keyword\">while</span> counter &lt;= <span class=\"hljs-built_in\">floor</span>(<span class=\"hljs-built_in\">log2</span>(array_length))+<span class=\"hljs-number\">1</span>       <span class=\"hljs-comment\">%maximum iteration needed to find the target</span>\r\nmid = (L_SearchRange + R_SearchRange)/<span class=\"hljs-number\">2</span>;\r\n\r\n<span class=\"hljs-keyword\">if</span> t == A(<span class=\"hljs-built_in\">floor</span>(mid))\r\n    p = <span class=\"hljs-built_in\">floor</span>(mid);\r\n    <span class=\"hljs-keyword\">break</span>\r\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> t &gt; A(<span class=\"hljs-built_in\">floor</span>(mid))\r\n        L_SearchRange = <span class=\"hljs-built_in\">floor</span>(mid)+<span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">else</span> \r\n        R_SearchRange = <span class=\"hljs-built_in\">floor</span>(mid)<span class=\"hljs-number\">-1</span>;\r\n        <span class=\"hljs-keyword\">if</span> R_SearchRange == <span class=\"hljs-number\">0</span>            <span class=\"hljs-comment\">%to stop searching when t is less than the minimum value of array</span>\r\n           counter = counter +<span class=\"hljs-number\">1</span>;         \r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span> \r\n counter = counter+<span class=\"hljs-number\">1</span>; \r\n<span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">if</span> counter &gt; <span class=\"hljs-built_in\">floor</span>(<span class=\"hljs-built_in\">log2</span>(array_length))+<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-built_in\">disp</span>(<span class=\"hljs-string\">&#x27;target is not found in aray&#x27;</span>)\r\n<span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "julia": {
      "dir": "src\\searches\\binary_search.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\searches\\binary_search.jl",
      "code": "<span class=\"hljs-comment\"># Problem from https://exercism.io/my/tracks/julia#exercise-binary-search</span>\r\n<span class=\"hljs-comment\"># Based on my published solution https://exercism.io/tracks/julia/exercises/binary-search/solutions/5dcd7f36433245a28484889c42a957c0</span>\r\n\r\n<span class=\"hljs-comment\"># Problem Instructions:</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    binary_search(list, query; rev=false, lt=&lt;, by=identity)\r\n\r\nImplement a binary search algorithm.\r\nSearching a sorted collection is a common task. A dictionary is a sorted list of word definitions. Given a word, one can find its definition. A telephone book is a sorted list of people&#x27;s names, addresses, and telephone numbers. Knowing someone&#x27;s name allows one to quickly find their telephone number and address.\r\n\r\nIf the list to be searched contains more than a few items (a dozen, say) a binary search will require far fewer comparisons than a linear search, but it imposes the requirement that the list be sorted.\r\n\r\nIn computer science, a binary search or half-interval search algorithm finds the position of a specified input value (the search &quot;key&quot;) within an array sorted by key value.\r\n\r\nIn each step, the algorithm compares the search key value with the key value of the middle element of the array.\r\n\r\nIf the keys match, then a matching element has been found and the range of indices that equal the search key value are returned.\r\n\r\nOtherwise, if the search key is less than the middle element&#x27;s key, then the algorithm repeats its action on the sub-array to the left of the middle element or, if the search key is greater, on the sub-array to the right.\r\n\r\nIf the remaining array to be searched is empty, then the key cannot be found in the array and a special &quot;not found&quot; indication is returned. Search methods in Julia typically return an empty range located at the insertion point in this case.\r\n\r\nA binary search halves the number of items to check with each iteration, so locating an item (or determining its absence) takes logarithmic time. A binary search is a dichotomic divide and conquer search algorithm.\r\n\r\nBonus task:\r\nImplement keyword arguments by, lt and rev so that by specifies a transformation applied to all elements of the list, lt specifies a comparison and rev specifies if the list is ordered in reverse.\r\n\r\nContributed By:- [Soc Virnyl Estela](https://github.com/uncomfyhalomacro)\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> binary_search(list, query; rev=<span class=\"hljs-literal\">false</span>, lt=&lt;, by=identity)\r\n    <span class=\"hljs-keyword\">if</span> issorted(list) || issorted(list; rev=<span class=\"hljs-literal\">true</span>)\r\n        low = !rev ? <span class=\"hljs-number\">1</span> : length(list)\r\n        high = !rev ? length(list) : <span class=\"hljs-number\">1</span>\r\n        middle(l, h) = round(<span class=\"hljs-built_in\">Int</span>, (l + h)//<span class=\"hljs-number\">2</span>)\r\n        query = by(query)\r\n\r\n        <span class=\"hljs-keyword\">while</span> !rev ? low &lt;= high : high &lt;= low\r\n            mid = middle(low, high)\r\n            by(list[mid]) === query &amp;&amp; <span class=\"hljs-keyword\">return</span> mid:mid\r\n            <span class=\"hljs-keyword\">if</span> lt(by(list[mid]), query)\r\n                low = !rev ? mid + <span class=\"hljs-number\">1</span> : mid - <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">else</span>\r\n                high = !rev ? mid - <span class=\"hljs-number\">1</span> : mid + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">end</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n        <span class=\"hljs-keyword\">return</span> !rev ? (low:high) : (high:low)\r\n\r\n    <span class=\"hljs-keyword\">else</span>\r\n        throw(error(<span class=\"hljs-string\">&quot;List not sorted, unable to search value&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\"># See Issue https://github.com/TheAlgorithms/Julia/issues/34</span>\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    binary_search(arr::AbstractArray{T,1}, l::T, r::T, x::T) where {T&lt;:Real}\r\n\r\nThe implementation of this binary Search is recursive and requires O(Log n) space. With iterative Binary Search, we need only O(1) space. Useful for the implementation of `exponential_search`.\r\n\r\nContributed By:- [Ash](https://github.com/ashwani-rathee)\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> binary_search(arr::<span class=\"hljs-built_in\">AbstractArray</span>{T,<span class=\"hljs-number\">1</span>}, l::T, r::T, x::T) <span class=\"hljs-keyword\">where</span> {T&lt;:<span class=\"hljs-built_in\">Real</span>}\r\n    <span class=\"hljs-keyword\">if</span> (r &gt;= l)\r\n        mid = <span class=\"hljs-built_in\">Int</span>(ceil(l + (r - l) / <span class=\"hljs-number\">2</span>))\r\n        <span class=\"hljs-comment\"># println(mid)</span>\r\n        <span class=\"hljs-keyword\">if</span> (arr[mid] == x)\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Element present at index <span class=\"hljs-variable\">$mid</span>&quot;</span>\r\n        <span class=\"hljs-keyword\">elseif</span> (arr[mid] &gt; x)\r\n            binary_search(arr, l, mid - <span class=\"hljs-number\">1</span>, x)\r\n        <span class=\"hljs-keyword\">else</span>\r\n            binary_search(arr, mid + <span class=\"hljs-number\">1</span>, r, x)\r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Element not present in array&quot;</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "lua": {
      "dir": "src\\searches\\binary_search.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src\\searches\\binary_search.lua",
      "code": "<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\r\n\tlist,\r\n\t<span class=\"hljs-comment\">-- Value to be searched</span>\r\n\tvalue,\r\n\t<span class=\"hljs-comment\">-- Comparator</span>\r\n\tless_than\r\n)</span></span>\r\n\tless_than = less_than <span class=\"hljs-keyword\">or</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span></span>\r\n\t\t<span class=\"hljs-keyword\">return</span> a &lt; b\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-built_in\">min</span>, <span class=\"hljs-built_in\">max</span> = <span class=\"hljs-number\">1</span>, #list\r\n\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">min</span> &lt;= <span class=\"hljs-built_in\">max</span> <span class=\"hljs-keyword\">do</span>\r\n\t\t<span class=\"hljs-keyword\">local</span> pivot = <span class=\"hljs-built_in\">min</span> + <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">floor</span>((<span class=\"hljs-built_in\">max</span> - <span class=\"hljs-built_in\">min</span>) / <span class=\"hljs-number\">2</span>)\r\n\t\t<span class=\"hljs-keyword\">local</span> element = list[pivot]\r\n\t\t<span class=\"hljs-keyword\">if</span> less_than(value, element) <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-built_in\">max</span> = pivot - <span class=\"hljs-number\">1</span>\r\n\t\t<span class=\"hljs-keyword\">elseif</span> less_than(element, value) <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-built_in\">min</span> = pivot + <span class=\"hljs-number\">1</span>\r\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">-- Neither smaller nor larger =&gt; must be equal</span>\r\n\t\t\t<span class=\"hljs-comment\">-- Index if found</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span> pivot\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-comment\">-- Negative insertion index if not found</span>\r\n\t<span class=\"hljs-keyword\">return</span> -<span class=\"hljs-built_in\">min</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Search/BinarySearcher.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Search\\BinarySearcher.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Search</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>TODO. 2.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinarySearcher</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">IComparable</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds index of item in array that equals to item searched for,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(log(n)),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array size.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sortedData&quot;&gt;</span>Sorted array to search in.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>Item to search for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Index of item that equals to item searched for or -1 if none found.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindIndex</span>(<span class=\"hljs-params\">T[] sortedData, T item</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> leftIndex = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">var</span> rightIndex = sortedData.Length - <span class=\"hljs-number\">1</span>;\r\n\r\n            <span class=\"hljs-keyword\">while</span> (leftIndex &lt;= rightIndex)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> middleIndex = leftIndex + (rightIndex - leftIndex) / <span class=\"hljs-number\">2</span>;\r\n\r\n                <span class=\"hljs-keyword\">if</span> (item.CompareTo(sortedData[middleIndex]) &gt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    leftIndex = middleIndex + <span class=\"hljs-number\">1</span>;\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (item.CompareTo(sortedData[middleIndex]) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    rightIndex = middleIndex - <span class=\"hljs-number\">1</span>;\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">return</span> middleIndex;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Brandon Johnson",
      "email": "bbj1979@gmail.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Emil Suleymanov",
      "email": "emil.suleymanov@tum.de",
      "commits": 1
    },
    {
      "name": "i1e0",
      "email": "96235137+i1e0@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anant Kanchan",
      "email": "66024577+anantcodes@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "MaximSmolskiy",
      "email": "mithridatus@mail.ru",
      "commits": 1
    },
    {
      "name": "Atousa K",
      "email": "missa.k213@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Oleg Karasik",
      "email": "OlegKarasik@coherentsolutions.com",
      "commits": 1
    },
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "gaurav_miglani",
      "email": "gaurav.miglani@innovaccer.com",
      "commits": 1
    },
    {
      "name": "phillip055",
      "email": "vorathep055@gmail.com",
      "commits": 1
    },
    {
      "name": "SirjaMi",
      "email": "68983857+SirjaMi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "maxbarsukov",
      "email": "maximbarsukov@bk.ru",
      "commits": 1
    },
    {
      "name": "Thomas Huang",
      "email": "thomas.huang2017@gmail.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "66054069+ReneganRonin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "FuXiang Shu",
      "email": "6470547+Crazy3lf@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "mike zhang",
      "email": "zhangmingkai19892013@gmail.com",
      "commits": 1
    },
    {
      "name": "Jobin John",
      "email": "jobin1094@gmail.com",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "62670517+brayo-pip@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KylerSmith",
      "email": "Kyler@macBookAir.local",
      "commits": 1
    },
    {
      "name": "Ali Hassan",
      "email": "contact@alihassan.dev",
      "commits": 1
    },
    {
      "name": "Askanders",
      "email": "47815058+Askanders@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 1
    },
    {
      "name": "Leandro Doctors",
      "email": "ldoctors@gmail.com",
      "commits": 1
    },
    {
      "name": "Sourav Jyoti Kalita",
      "email": "31644207+Souravjyoti@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Guo_1_9",
      "email": "gxx632364@gmail.com",
      "commits": 1
    },
    {
      "name": "Sam",
      "email": "github@samdev.io",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "feng liu",
      "email": "fengxliu@gmail.com",
      "commits": 1
    },
    {
      "name": "Matheus Serrao",
      "email": "matheusprogrammer95@gmail.com",
      "commits": 1
    },
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "harshitkap00r",
      "email": "76745800+harshitkap00r@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Umair Kamran",
      "email": "umair.kamran96@gmail.com",
      "commits": 1
    },
    {
      "name": "Prashant Anand",
      "email": "prs0704@gmail.com",
      "commits": 1
    },
    {
      "name": "cschuerc",
      "email": "57899042+cschuerc@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "wuminbin",
      "email": "wuminbin@yeah.net",
      "commits": 1
    },
    {
      "name": "weixuanhu",
      "email": "44716380+weixuanhu@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Ant Fitch",
      "email": "amanda.fitch@outlook.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Sarbajit Saha",
      "email": "sarbajitsaha1@gmail.com",
      "commits": 1
    },
    {
      "name": "nandujkishor",
      "email": "nandujkishor@gmail.com",
      "commits": 1
    },
    {
      "name": "TaylorL19",
      "email": "tlockhart@tamu.edu",
      "commits": 1
    },
    {
      "name": "ZivLi",
      "email": "zivli23@163.com",
      "commits": 1
    },
    {
      "name": "Dmitry Samsonov",
      "email": "dmitriy.samsonov28@gmail.com",
      "commits": 2
    },
    {
      "name": "Marcus Willock",
      "email": "crazcalm@gmail.com",
      "commits": 2
    },
    {
      "name": "Arnav Borborah",
      "email": "arnavborborah11@gmail.com",
      "commits": 2
    },
    {
      "name": "Anders B. Clausen",
      "email": "anbclausen@gmail.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 2
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 2
    },
    {
      "name": "Keramot UL Islam",
      "email": "keramotul.islam@gmail.com",
      "commits": 2
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "Emilien Fugier",
      "email": "mail@emilienfugier.xyz",
      "commits": 3
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "RitikDua",
      "email": "rittikdua@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "66054069+uncomfyhalomacro@users.noreply.github.com",
      "commits": 4
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 4
    },
    {
      "name": "varunu28",
      "email": "varun.u28@gmail.com",
      "commits": 5
    },
    {
      "name": "Faizan Ahamed",
      "email": "faizanahamed1414@gmail.com",
      "commits": 9
    }
  ],
  "explanationUrl": {
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es\\Algoritmos de búsqueda\\Búsqueda binaria.md",
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en\\Search Algorithms\\Binary Search.md"
  }
}