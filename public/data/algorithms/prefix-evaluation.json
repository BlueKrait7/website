{
  "slug": "prefix-evaluation",
  "name": "Prefix Evaluation",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\stacks\\prefix_evaluation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\stacks\\prefix_evaluation.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nPython3 program to evaluate a prefix expression.\r\n&quot;&quot;&quot;</span>\r\n\r\ncalc = {\r\n    <span class=\"hljs-string\">&quot;+&quot;</span>: <span class=\"hljs-keyword\">lambda</span> x, y: x + y,\r\n    <span class=\"hljs-string\">&quot;-&quot;</span>: <span class=\"hljs-keyword\">lambda</span> x, y: x - y,\r\n    <span class=\"hljs-string\">&quot;*&quot;</span>: <span class=\"hljs-keyword\">lambda</span> x, y: x * y,\r\n    <span class=\"hljs-string\">&quot;/&quot;</span>: <span class=\"hljs-keyword\">lambda</span> x, y: x / y,\r\n}\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_operand</span>(<span class=\"hljs-params\">c</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return True if the given char c is an operand, e.g. it is a number\r\n\r\n    &gt;&gt;&gt; is_operand(&quot;1&quot;)\r\n    True\r\n    &gt;&gt;&gt; is_operand(&quot;+&quot;)\r\n    False\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> c.isdigit()\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">evaluate</span>(<span class=\"hljs-params\">expression</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Evaluate a given expression in prefix notation.\r\n    Asserts that the given expression is valid.\r\n\r\n    &gt;&gt;&gt; evaluate(&quot;+ 9 * 2 6&quot;)\r\n    21\r\n    &gt;&gt;&gt; evaluate(&quot;/ * 10 2 + 4 1 &quot;)\r\n    4.0\r\n    &quot;&quot;&quot;</span>\r\n    stack = []\r\n\r\n    <span class=\"hljs-comment\"># iterate over the string in reverse order</span>\r\n    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> expression.split()[::-<span class=\"hljs-number\">1</span>]:\r\n\r\n        <span class=\"hljs-comment\"># push operand to stack</span>\r\n        <span class=\"hljs-keyword\">if</span> is_operand(c):\r\n            stack.append(<span class=\"hljs-built_in\">int</span>(c))\r\n\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-comment\"># pop values from stack can calculate the result</span>\r\n            <span class=\"hljs-comment\"># push the result onto the stack again</span>\r\n            o1 = stack.pop()\r\n            o2 = stack.pop()\r\n            stack.append(calc[c](o1, o2))\r\n\r\n    <span class=\"hljs-keyword\">return</span> stack.pop()\r\n\r\n\r\n<span class=\"hljs-comment\"># Driver code</span>\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    test_expression = <span class=\"hljs-string\">&quot;+ 9 * 2 6&quot;</span>\r\n    <span class=\"hljs-built_in\">print</span>(evaluate(test_expression))\r\n\r\n    test_expression = <span class=\"hljs-string\">&quot;/ * 10 2 + 4 1 &quot;</span>\r\n    <span class=\"hljs-built_in\">print</span>(evaluate(test_expression))\r\n"
    }
  },
  "contributors": [
    {
      "name": "Leon Morten Richter",
      "email": "31622033+M0r13n@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}