{
  "slug": "horspool",
  "name": "Horspool",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "strings\\horspool.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/strings\\horspool.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Horspool&#x27;s algorithm that finds if a string contains a substring (https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm)\r\n * @author [Harry Kontakis](https://github.com/ckontakis)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unordered_map&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace strings\r\n * @brief Algorithms with strings\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> strings {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace horspool\r\n * @brief Functions for [Horspool&#x27;s](https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm) algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> horspool {\r\n<span class=\"hljs-comment\">/**\r\n * A function that finds the shift table of the given prototype string that we need in Horpool&#x27;s algorithm.\r\n * @param prototype is the substring that we use to find shift table\r\n * @return Shift Table of Horspool&#x27;s algorithm\r\n */</span>\r\n<span class=\"hljs-function\">std::unordered_map&lt;<span class=\"hljs-type\">char</span>, <span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">findShiftTable</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;prototype)</span> </span>{\r\n    std::unordered_map&lt;<span class=\"hljs-type\">char</span>, <span class=\"hljs-type\">int</span>&gt;\r\n        shiftTable;  <span class=\"hljs-comment\">// A HashMap for shift table that has characters for keys and integers for values</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; prototype.<span class=\"hljs-built_in\">size</span>();\r\n         i++) {  <span class=\"hljs-comment\">// Checking all characters of prototype string</span>\r\n        <span class=\"hljs-keyword\">if</span> (shiftTable.<span class=\"hljs-built_in\">find</span>(prototype[i]) ==\r\n            shiftTable.<span class=\"hljs-built_in\">end</span>()) {  <span class=\"hljs-comment\">// If character does not exist in HashMap</span>\r\n            <span class=\"hljs-keyword\">if</span> (i != prototype.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>) {\r\n                shiftTable.<span class=\"hljs-built_in\">insert</span>(std::<span class=\"hljs-built_in\">make_pair</span>(\r\n                    prototype[i], prototype.<span class=\"hljs-built_in\">size</span>() - i -\r\n                                      <span class=\"hljs-number\">1</span>));  <span class=\"hljs-comment\">// Insert the character as key and the size of prototype string - index of character - 1 as value</span>\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                shiftTable.<span class=\"hljs-built_in\">insert</span>(std::<span class=\"hljs-built_in\">make_pair</span>(\r\n                    prototype[i],\r\n                    prototype.<span class=\"hljs-built_in\">size</span>()));  <span class=\"hljs-comment\">// Insert the character as key and the size of prototype string as value</span>\r\n            }\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">if</span> (i != prototype.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>) {\r\n                shiftTable[prototype[i]] = prototype.<span class=\"hljs-built_in\">size</span>() - i - <span class=\"hljs-number\">1</span>;\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> shiftTable;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * A function that implements Horspool&#x27;s algorithm.\r\n * @param text is the string that we are searching if there is a substring\r\n * @param prototype is the substring that we are searching in text\r\n * @returns true if text string contains prototype string\r\n * @returns false if text string does not contain prototype string\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">horspool</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;text, <span class=\"hljs-type\">const</span> std::string &amp;prototype)</span> </span>{\r\n    std::unordered_map&lt;<span class=\"hljs-type\">char</span>, <span class=\"hljs-type\">int</span>&gt; shiftTable = <span class=\"hljs-built_in\">findShiftTable</span>(\r\n        prototype);  <span class=\"hljs-comment\">// Initialise shift table calling findShiftTable function</span>\r\n\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">int</span>&gt;(\r\n        prototype.<span class=\"hljs-built_in\">size</span>() -\r\n        <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// Index that we shift in text to find the substring</span>\r\n    <span class=\"hljs-keyword\">while</span> (i &lt; text.<span class=\"hljs-built_in\">size</span>()) {\r\n        <span class=\"hljs-type\">int</span> j = i, k = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">true</span>;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> z = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">int</span>&gt;(prototype.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>); z &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; flag;\r\n             z--) {  <span class=\"hljs-comment\">// Checking if all characters of substring are equal with all characters of string</span>\r\n            <span class=\"hljs-keyword\">if</span> (text[j] == prototype[z]) {\r\n                k++;\r\n                j--;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                flag = <span class=\"hljs-literal\">false</span>;  <span class=\"hljs-comment\">// If two characters are not equal set flag to false and break from loop</span>\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (k ==\r\n            prototype.<span class=\"hljs-built_in\">size</span>()) {  <span class=\"hljs-comment\">// If all characters match then return true</span>\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">if</span> (shiftTable.<span class=\"hljs-built_in\">find</span>(text[i]) != shiftTable.<span class=\"hljs-built_in\">end</span>()) {\r\n                i += shiftTable[text[i]];  <span class=\"hljs-comment\">// If shift table contains the character then shift index as many steps as value</span>\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                i += prototype.<span class=\"hljs-built_in\">size</span>();  <span class=\"hljs-comment\">// If character does not exist in shift table then shift index as many steps as size of prototype string</span>\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n}\r\n} <span class=\"hljs-comment\">// namespace horspool</span>\r\n} <span class=\"hljs-comment\">// namespace strings</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function with test cases for Horspool&#x27;s algorithm\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span>{\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>,<span class=\"hljs-string\">&quot;World&quot;</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>,<span class=\"hljs-string\">&quot; World&quot;</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>,<span class=\"hljs-string\">&quot;ello&quot;</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;Hello World&quot;</span>,<span class=\"hljs-string\">&quot;rld&quot;</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>,<span class=\"hljs-string\">&quot;Helo&quot;</span>) == <span class=\"hljs-literal\">false</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;c++_algorithms&quot;</span>,<span class=\"hljs-string\">&quot;c++_algorithms&quot;</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;c++_algorithms&quot;</span>,<span class=\"hljs-string\">&quot;c++_&quot;</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>,<span class=\"hljs-string\">&quot;Hello World&quot;</span>) == <span class=\"hljs-literal\">false</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;c++_algorithms&quot;</span>,<span class=\"hljs-string\">&quot;&quot;</span>) == <span class=\"hljs-literal\">false</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;c++&quot;</span>,<span class=\"hljs-string\">&quot;c&quot;</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;3458934793&quot;</span>,<span class=\"hljs-string\">&quot;4793&quot;</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(strings::horspool::<span class=\"hljs-built_in\">horspool</span>(<span class=\"hljs-string\">&quot;3458934793&quot;</span>,<span class=\"hljs-string\">&quot;123&quot;</span>) == <span class=\"hljs-literal\">false</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main Function that calls test function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "go": {
      "dir": "strings\\horspool\\horspool.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings\\horspool\\horspool.go",
      "code": "<span class=\"hljs-keyword\">package</span> horspool\r\n\r\n<span class=\"hljs-comment\">// User defined.</span>\r\n<span class=\"hljs-comment\">// Set to true to read input from two command line arguments</span>\r\n<span class=\"hljs-comment\">// Set to false to read input from two files &quot;pattern.txt&quot; and &quot;text.txt&quot;</span>\r\n<span class=\"hljs-comment\">// const commandLineInput bool = false</span>\r\n\r\n<span class=\"hljs-comment\">// Implementation of Boyer-Moore-Horspool algorithm (Suffix based approach).</span>\r\n<span class=\"hljs-comment\">// Requires either a two command line arguments separated by a single space,</span>\r\n<span class=\"hljs-comment\">// or two files in the same folder: &quot;pattern.txt&quot; containing the string to</span>\r\n<span class=\"hljs-comment\">// be searched for, &quot;text.txt&quot; containing the text to be searched in.</span>\r\n<span class=\"hljs-comment\">// func main() {</span>\r\n<span class=\"hljs-comment\">// \tif commandLineInput == true { // case of command line input</span>\r\n<span class=\"hljs-comment\">// \t\targs := os.Args</span>\r\n<span class=\"hljs-comment\">// \t\tif len(args) &lt;= 2 {</span>\r\n<span class=\"hljs-comment\">// \t\t\tlog.Fatal(&quot;Not enough arguments. Two string arguments separated by spaces are required!&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\tpattern := args[1]</span>\r\n<span class=\"hljs-comment\">// \t\ts := args[2]</span>\r\n<span class=\"hljs-comment\">// \t\tfor i := 3; i &lt; len(args); i++ {</span>\r\n<span class=\"hljs-comment\">// \t\t\ts = s + &quot; &quot; + args[i]</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\tif len(args[1]) &gt; len(s) {</span>\r\n<span class=\"hljs-comment\">// \t\t\tlog.Fatal(&quot;Pattern  is longer than text!&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;\\nRunning: Horspool algorithm.\\n\\n&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;Search word (%d chars long): %q.\\n&quot;, len(args[1]), pattern)</span>\r\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;Text        (%d chars long): %q.\\n\\n&quot;, len(s), s)</span>\r\n<span class=\"hljs-comment\">// \t\thorspool(s, pattern)</span>\r\n<span class=\"hljs-comment\">// \t} else if commandLineInput == false { // case of file line input</span>\r\n<span class=\"hljs-comment\">// \t\tpatFile, err := ioutil.ReadFile(&quot;pattern.txt&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\tif err != nil {</span>\r\n<span class=\"hljs-comment\">// \t\t\tlog.Fatal(err)</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\ttextFile, err := ioutil.ReadFile(&quot;text.txt&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\tif err != nil {</span>\r\n<span class=\"hljs-comment\">// \t\t\tlog.Fatal(err)</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\tif len(patFile) &gt; len(textFile) {</span>\r\n<span class=\"hljs-comment\">// \t\t\tlog.Fatal(&quot;Pattern  is longer than text!&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;\\nRunning: Horspool algorithm.\\n\\n&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;Search word (%d chars long): %q.\\n&quot;, len(patFile), patFile)</span>\r\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;Text        (%d chars long): %q.\\n\\n&quot;, len(textFile), textFile)</span>\r\n<span class=\"hljs-comment\">// \t\thorspool(string(textFile), string(patFile))</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n<span class=\"hljs-comment\">// }</span>\r\n\r\n<span class=\"hljs-comment\">// // Function horspool performing the Horspool algorithm.</span>\r\n<span class=\"hljs-comment\">// // Prints whether the word/pattern was found and on what position in the text or not.</span>\r\n<span class=\"hljs-comment\">// func horspool(t, p string) {</span>\r\n<span class=\"hljs-comment\">// \tm, n, c, pos := len(p), len(t), 0, 0</span>\r\n<span class=\"hljs-comment\">// \t//Perprocessing</span>\r\n<span class=\"hljs-comment\">// \td := preprocess(t, p)</span>\r\n<span class=\"hljs-comment\">// \t//Map output</span>\r\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;Precomputed shifts per symbol: &quot;)</span>\r\n<span class=\"hljs-comment\">// \tfor key, value := range d {</span>\r\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;%c:%d; &quot;, key, value)</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n<span class=\"hljs-comment\">// \tfmt.Println()</span>\r\n<span class=\"hljs-comment\">// \t//Searching</span>\r\n<span class=\"hljs-comment\">// \tfor pos &lt;= n-m {</span>\r\n<span class=\"hljs-comment\">// \t\tj := m</span>\r\n<span class=\"hljs-comment\">// \t\tif t[pos+j-1] != p[j-1] {</span>\r\n<span class=\"hljs-comment\">// \t\t\tfmt.Printf(&quot;\\n   comparing characters %c %c at positions %d %d&quot;, t[pos+j-1], p[j-1], pos+j-1, j-1)</span>\r\n<span class=\"hljs-comment\">// \t\t\tc++</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\tfor j &gt; 0 &amp;&amp; t[pos+j-1] == p[j-1] {</span>\r\n<span class=\"hljs-comment\">// \t\t\tfmt.Printf(&quot;\\n   comparing characters %c %c at positions %d %d&quot;, t[pos+j-1], p[j-1], pos+j-1, j-1)</span>\r\n<span class=\"hljs-comment\">// \t\t\tc++</span>\r\n<span class=\"hljs-comment\">// \t\t\tfmt.Printf(&quot; - match&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\t\tj--</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\tif j == 0 {</span>\r\n<span class=\"hljs-comment\">// \t\t\tfmt.Printf(&quot;\\n\\nWord %q was found at position %d in %q. \\n%d comparisons were done.&quot;, p, pos, t, c)</span>\r\n<span class=\"hljs-comment\">// \t\t\treturn</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\tpos = pos + d[t[pos+m]]</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\n\\nWord was not found.\\n%d comparisons were done.&quot;, c)</span>\r\n<span class=\"hljs-comment\">// \treturn</span>\r\n<span class=\"hljs-comment\">// }</span>\r\n\r\n<span class=\"hljs-comment\">// // Function that pre-computes map with Key: uint8 (char) Value: int.</span>\r\n<span class=\"hljs-comment\">// // Values determine safe shifting of search window.</span>\r\n<span class=\"hljs-comment\">// func preprocess(t, p string) (d map[uint8]int) {</span>\r\n<span class=\"hljs-comment\">// \td = make(map[uint8]int)</span>\r\n<span class=\"hljs-comment\">// \tfor i := 0; i &lt; len(t); i++ {</span>\r\n<span class=\"hljs-comment\">// \t\td[t[i]] = len(p)</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n<span class=\"hljs-comment\">// \tfor i := 0; i &lt; len(p); i++ {</span>\r\n<span class=\"hljs-comment\">// \t\td[p[i]] = len(p) - i</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n<span class=\"hljs-comment\">// \treturn d</span>\r\n<span class=\"hljs-comment\">// }</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "halafi",
      "email": "filiphalas74@gmail.com",
      "commits": 1
    },
    {
      "name": "ckontakis",
      "email": "36933662+ckontakis@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}