{
  "slug": "palindrome-singly-linked-list",
  "name": "Palindrome Singly Linked List",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\misc\\PalindromeSinglyLinkedList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\misc\\PalindromeSinglyLinkedList.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.misc;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\r\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.datastructures.lists.SinglyLinkedList;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * A simple way of knowing if a singly linked list is palindrome is to push all\r\n * the values into a Stack and then compare the list to popped vales from the\r\n * Stack.\r\n *\r\n * See more:\r\n * https://www.geeksforgeeks.org/function-to-check-if-a-singly-linked-list-is-palindrome/\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PalindromeSinglyLinkedList</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">SinglyLinkedList</span> <span class=\"hljs-variable\">linkedList</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>();\r\n\r\n        linkedList.insertHead(<span class=\"hljs-number\">3</span>);\r\n        linkedList.insertNth(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>);\r\n        linkedList.insertNth(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\r\n        linkedList.insertNth(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\r\n        linkedList.insertNth(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (isPalindrome(linkedList)) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;It&#x27;s a palindrome list&quot;</span>);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            System.out.println(<span class=\"hljs-string\">&quot;It&#x27;s NOT a palindrome list&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPalindrome</span><span class=\"hljs-params\">(SinglyLinkedList linkedList)</span> {\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">ret</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\r\n        Stack&lt;Integer&gt; linkedListValues = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;&gt;();\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; linkedList.size(); i++) {\r\n            linkedListValues.push(linkedList.getNth(i));\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; linkedList.size(); i++) {\r\n            <span class=\"hljs-keyword\">if</span> (linkedList.getNth(i) != linkedListValues.pop()) {\r\n                ret = <span class=\"hljs-literal\">false</span>;\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> ret;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}