{
  "slug": "extended-euclidean-algorithm",
  "name": "Extended Euclidean Algorithm",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\extended_euclidean_algorithm.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\extended_euclidean_algorithm.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nExtended Euclidean Algorithm.\r\n\r\nFinds 2 numbers a and b such that it satisfies\r\nthe equation am + bn = gcd(m, n) (a.k.a Bezout&#x27;s Identity)\r\n\r\nhttps://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-comment\"># @Author: S. Sharma &lt;silentcat&gt;</span>\r\n<span class=\"hljs-comment\"># @Date:   2019-02-25T12:08:53-06:00</span>\r\n<span class=\"hljs-comment\"># @Email:  silentcat@protonmail.com</span>\r\n<span class=\"hljs-comment\"># @Last modified by:   pikulet</span>\r\n<span class=\"hljs-comment\"># @Last modified time: 2020-10-02</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> sys\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extended_euclidean_algorithm</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Extended Euclidean Algorithm.\r\n\r\n    Finds 2 numbers a and b such that it satisfies\r\n    the equation am + bn = gcd(m, n) (a.k.a Bezout&#x27;s Identity)\r\n\r\n    &gt;&gt;&gt; extended_euclidean_algorithm(1, 24)\r\n    (1, 0)\r\n\r\n    &gt;&gt;&gt; extended_euclidean_algorithm(8, 14)\r\n    (2, -1)\r\n\r\n    &gt;&gt;&gt; extended_euclidean_algorithm(240, 46)\r\n    (-9, 47)\r\n\r\n    &gt;&gt;&gt; extended_euclidean_algorithm(1, -4)\r\n    (1, 0)\r\n\r\n    &gt;&gt;&gt; extended_euclidean_algorithm(-2, -4)\r\n    (-1, 0)\r\n\r\n    &gt;&gt;&gt; extended_euclidean_algorithm(0, -4)\r\n    (0, -1)\r\n\r\n    &gt;&gt;&gt; extended_euclidean_algorithm(2, 0)\r\n    (1, 0)\r\n\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># base cases</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">abs</span>(a) == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> a, <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">abs</span>(b) == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>, b\r\n\r\n    old_remainder, remainder = a, b\r\n    old_coeff_a, coeff_a = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>\r\n    old_coeff_b, coeff_b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> remainder != <span class=\"hljs-number\">0</span>:\r\n        quotient = old_remainder // remainder\r\n        old_remainder, remainder = remainder, old_remainder - quotient * remainder\r\n        old_coeff_a, coeff_a = coeff_a, old_coeff_a - quotient * coeff_a\r\n        old_coeff_b, coeff_b = coeff_b, old_coeff_b - quotient * coeff_b\r\n\r\n    <span class=\"hljs-comment\"># sign correction for negative numbers</span>\r\n    <span class=\"hljs-keyword\">if</span> a &lt; <span class=\"hljs-number\">0</span>:\r\n        old_coeff_a = -old_coeff_a\r\n    <span class=\"hljs-keyword\">if</span> b &lt; <span class=\"hljs-number\">0</span>:\r\n        old_coeff_b = -old_coeff_b\r\n\r\n    <span class=\"hljs-keyword\">return</span> old_coeff_a, old_coeff_b\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Call Extended Euclidean Algorithm.&quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(sys.argv) &lt; <span class=\"hljs-number\">3</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;2 integer arguments required&quot;</span>)\r\n        exit(<span class=\"hljs-number\">1</span>)\r\n    a = <span class=\"hljs-built_in\">int</span>(sys.argv[<span class=\"hljs-number\">1</span>])\r\n    b = <span class=\"hljs-built_in\">int</span>(sys.argv[<span class=\"hljs-number\">2</span>])\r\n    <span class=\"hljs-built_in\">print</span>(extended_euclidean_algorithm(a, b))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    },
    "rust": {
      "dir": "src\\math\\extended_euclidean_algorithm.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\math\\extended_euclidean_algorithm.rs",
      "code": "<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">update_step</span>(a: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">i32</span>, old_a: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">i32</span>, quotient: <span class=\"hljs-type\">i32</span>) {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">temp</span> = *a;\r\n    *a = *old_a - quotient * temp;\r\n    *old_a = temp;\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">extended_euclidean_algorithm</span>(a: <span class=\"hljs-type\">i32</span>, b: <span class=\"hljs-type\">i32</span>) <span class=\"hljs-punctuation\">-&gt;</span> (<span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">i32</span>) {\r\n    <span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> old_r, <span class=\"hljs-keyword\">mut</span> rem) = (a, b);\r\n    <span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> old_s, <span class=\"hljs-keyword\">mut</span> coeff_s) = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> old_t, <span class=\"hljs-keyword\">mut</span> coeff_t) = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-keyword\">while</span> rem != <span class=\"hljs-number\">0</span> {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">quotient</span> = old_r / rem;\r\n\r\n        <span class=\"hljs-title function_ invoke__\">update_step</span>(&amp;<span class=\"hljs-keyword\">mut</span> rem, &amp;<span class=\"hljs-keyword\">mut</span> old_r, quotient);\r\n        <span class=\"hljs-title function_ invoke__\">update_step</span>(&amp;<span class=\"hljs-keyword\">mut</span> coeff_s, &amp;<span class=\"hljs-keyword\">mut</span> old_s, quotient);\r\n        <span class=\"hljs-title function_ invoke__\">update_step</span>(&amp;<span class=\"hljs-keyword\">mut</span> coeff_t, &amp;<span class=\"hljs-keyword\">mut</span> old_t, quotient);\r\n    }\r\n\r\n    (old_r, old_s, old_t)\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">extended_euclidean_algorithm</span>(<span class=\"hljs-number\">101</span>, <span class=\"hljs-number\">13</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">31</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">extended_euclidean_algorithm</span>(<span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">19</span>), (<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">13</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">extended_euclidean_algorithm</span>(<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">36</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>, -<span class=\"hljs-number\">9</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">extended_euclidean_algorithm</span>(<span class=\"hljs-number\">69</span>, <span class=\"hljs-number\">54</span>), (<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">extended_euclidean_algorithm</span>(<span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">79</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">23</span>, -<span class=\"hljs-number\">16</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">extended_euclidean_algorithm</span>(<span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">44</span>), (<span class=\"hljs-number\">11</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">extended_euclidean_algorithm</span>(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">70</span>), (<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">2</span>));\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Jerrit Gläsker",
      "email": "50867655+cherrysrc@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Joyce",
      "email": "jycyeo@yahoo.com.sg",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "S. Sharma",
      "email": "36388139+s1l3ntcat@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}