{
  "slug": "longest-continuous-increasing-subsequence",
  "name": "Longest Continuous Increasing Subsequence",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src\\dynamic_programming\\longest_continuous_increasing_subsequence.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\dynamic_programming\\longest_continuous_increasing_subsequence.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">longest_continuous_increasing_subsequence</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(input_array: &amp;[T]) <span class=\"hljs-punctuation\">-&gt;</span> &amp;[T] {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">length</span>: <span class=\"hljs-type\">usize</span> = input_array.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n\r\n    <span class=\"hljs-comment\">//Handle the base cases</span>\r\n    <span class=\"hljs-keyword\">if</span> length &lt;= <span class=\"hljs-number\">1</span> {\r\n        <span class=\"hljs-keyword\">return</span> input_array;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//Create the array to store the longest subsequence at each location</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tracking_vec</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>; length];\r\n\r\n    <span class=\"hljs-comment\">//Iterate through the input and store longest subsequences at each location in the vector</span>\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>..length - <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">rev</span>() {\r\n        <span class=\"hljs-keyword\">if</span> input_array[i] &lt; input_array[i + <span class=\"hljs-number\">1</span>] {\r\n            tracking_vec[i] = tracking_vec[i + <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//Find the longest subsequence</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">max_index</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">max_value</span>: <span class=\"hljs-type\">i32</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-title function_ invoke__\">for</span> (index, value) <span class=\"hljs-keyword\">in</span> tracking_vec.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\r\n        <span class=\"hljs-keyword\">if</span> value &gt; &amp;max_value {\r\n            max_value = *value;\r\n            max_index = index;\r\n        }\r\n    }\r\n\r\n    &amp;input_array[max_index..max_index + max_value <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>]\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::longest_continuous_increasing_subsequence;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_longest_increasing_subsequence</span>() {\r\n        <span class=\"hljs-comment\">//Base Cases</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">base_case_array</span>: [<span class=\"hljs-type\">i32</span>; <span class=\"hljs-number\">0</span>] = [];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            &amp;<span class=\"hljs-title function_ invoke__\">longest_continuous_increasing_subsequence</span>(&amp;base_case_array),\r\n            &amp;[]\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_continuous_increasing_subsequence</span>(&amp;[<span class=\"hljs-number\">1</span>]), &amp;[<span class=\"hljs-number\">1</span>]);\r\n\r\n        <span class=\"hljs-comment\">//Normal i32 Cases</span>\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            &amp;<span class=\"hljs-title function_ invoke__\">longest_continuous_increasing_subsequence</span>(&amp;[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]),\r\n            &amp;[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            &amp;<span class=\"hljs-title function_ invoke__\">longest_continuous_increasing_subsequence</span>(&amp;[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>]),\r\n            &amp;[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            &amp;<span class=\"hljs-title function_ invoke__\">longest_continuous_increasing_subsequence</span>(&amp;[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]),\r\n            &amp;[<span class=\"hljs-number\">5</span>]\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            &amp;<span class=\"hljs-title function_ invoke__\">longest_continuous_increasing_subsequence</span>(&amp;[<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]),\r\n            &amp;[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\r\n        );\r\n\r\n        <span class=\"hljs-comment\">//Non-Numeric case</span>\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            &amp;<span class=\"hljs-title function_ invoke__\">longest_continuous_increasing_subsequence</span>(&amp;[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]),\r\n            &amp;[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            &amp;<span class=\"hljs-title function_ invoke__\">longest_continuous_increasing_subsequence</span>(&amp;[<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]),\r\n            &amp;[<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>]\r\n        );\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}