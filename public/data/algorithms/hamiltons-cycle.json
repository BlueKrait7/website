{
  "slug": "hamiltons-cycle",
  "name": "Hamiltons Cycle",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "graph\\hamiltons_cycle.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graph\\hamiltons_cycle.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief The implementation of [Hamilton&#x27;s\r\n * cycle](https://en.wikipedia.org/wiki/Hamiltonian_path) dynamic solution for\r\n * vertices number less than 20.\r\n * @details\r\n * I use \\f$2^n\\times n\\f$ matrix and for every \\f$[i, j]\\f$ (\\f$i &lt; 2^n\\f$ and\r\n * \\f$j &lt; n\\f$) in the matrix I store `true` if it is possible to get to all\r\n * vertices on which position in `i`&#x27;s binary representation is `1` so as\r\n * \\f$j\\f$ would be the last one.\r\n *\r\n * In the the end if any cell in \\f$(2^n - 1)^{\\mbox{th}}\\f$ row is `true` there\r\n * exists hamiltonian cycle.\r\n *\r\n * @author [vakhokoto](https://github.com/vakhokoto)\r\n * @author [Krishna Vedala](https://github.com/kvedala)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * The function determines if there is a hamilton&#x27;s cycle in the graph\r\n *\r\n * @param routes nxn boolean matrix of \\f$[i, j]\\f$ where \\f$[i, j]\\f$ is `true`\r\n * if there is a road from \\f$i\\f$ to \\f$j\\f$\r\n * @return `true` if there is Hamiltonian cycle in the graph\r\n * @return `false` if there is no Hamiltonian cycle in the graph\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">hamilton_cycle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt; &amp;routes)</span> </span>{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">size_t</span> n = routes.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-comment\">// height of dp array which is 2^n</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">size_t</span> height = <span class=\"hljs-number\">1</span> &lt;&lt; n;\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt; <span class=\"hljs-built_in\">dp</span>(height, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;(n, <span class=\"hljs-literal\">false</span>));\r\n\r\n    <span class=\"hljs-comment\">// to fill in the [2^i, i] cells with true</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n        dp[<span class=\"hljs-number\">1</span> &lt;&lt; i][i] = <span class=\"hljs-literal\">true</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">1</span>; i &lt; height; i++) {\r\n        std::vector&lt;<span class=\"hljs-type\">size_t</span>&gt; zeros, ones;\r\n        <span class=\"hljs-comment\">// finding positions with 1s and 0s and separate them</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> pos = <span class=\"hljs-number\">0</span>; pos &lt; n; ++pos) {\r\n            <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-number\">1</span> &lt;&lt; pos) &amp; i) {\r\n                ones.<span class=\"hljs-built_in\">push_back</span>(pos);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                zeros.<span class=\"hljs-built_in\">push_back</span>(pos);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;o : ones) {\r\n            <span class=\"hljs-keyword\">if</span> (!dp[i][o]) {\r\n                <span class=\"hljs-keyword\">continue</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;z : zeros) {\r\n                <span class=\"hljs-keyword\">if</span> (!routes[o][z]) {\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n                dp[i + (<span class=\"hljs-number\">1</span> &lt;&lt; z)][z] = <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-type\">bool</span> is_cycle = <span class=\"hljs-literal\">false</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        is_cycle |= dp[height - <span class=\"hljs-number\">1</span>][i];\r\n        <span class=\"hljs-keyword\">if</span> (is_cycle) {  <span class=\"hljs-comment\">// if true, all subsequent loop will be true. hence</span>\r\n                         <span class=\"hljs-comment\">// break</span>\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> is_cycle;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * this test is testing if ::hamilton_cycle returns `true` for\r\n * graph: `1 -&gt; 2 -&gt; 3 -&gt; 4`\r\n * @return None\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt; arr{\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>}),\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>}),\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>}),\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>})};\r\n\r\n    <span class=\"hljs-type\">bool</span> ans = <span class=\"hljs-built_in\">hamilton_cycle</span>(arr);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1... &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(ans);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * this test is testing if ::hamilton_cycle returns `false` for\r\n * \\n graph:&lt;pre&gt;\r\n *  1 -&gt; 2 -&gt; 3\r\n *       |\r\n *       V\r\n *       4&lt;/pre&gt;\r\n * @return None\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt; arr{\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>}),\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>}),\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>}),\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>})};\r\n\r\n    <span class=\"hljs-type\">bool</span> ans = <span class=\"hljs-built_in\">hamilton_cycle</span>(arr);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2... &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(!ans);  <span class=\"hljs-comment\">// not a cycle</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * this test is testing if ::hamilton_cycle returns `true` for\r\n * clique with 4 vertices\r\n * @return None\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt; arr{\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>}),\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>}),\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>}),\r\n        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;({<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>})};\r\n\r\n    <span class=\"hljs-type\">bool</span> ans = <span class=\"hljs-built_in\">hamilton_cycle</span>(arr);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3... &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(ans);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n *\r\n * @param argc commandline argument count (ignored)\r\n * @param argv commandline array of arguments (ignored)\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> **argv)</span> </span>{\r\n    <span class=\"hljs-built_in\">test1</span>();\r\n    <span class=\"hljs-built_in\">test2</span>();\r\n    <span class=\"hljs-built_in\">test3</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}