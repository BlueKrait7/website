{
  "slug": "damm",
  "name": "Damm",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\Damm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\Damm.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Damm algorithm is a check digit algorithm that detects all single-digit\r\n * errors and all adjacent transposition errors. It was presented by H. Michael\r\n * Damm in 2004. Essential part of the algorithm is a quasigroup of order 10\r\n * (i.e. having a 10 Ã— 10 Latin square as the body of its operation table) with\r\n * the special feature of being weakly totally anti-symmetric. Damm revealed\r\n * several methods to create totally anti-symmetric quasigroups of order 10 and\r\n * gave some examples in his doctoral dissertation.\r\n *\r\n * <span class=\"hljs-doctag\">@see</span> &lt;a href=&quot;https://en.wikipedia.org/wiki/Damm_algorithm&quot;&gt;Wiki. Damm\r\n * algorithm&lt;/a&gt;\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Damm</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Weakly totally anti-symmetric quasigroup of order 10. This table is not\r\n     * the only possible realisation of weak totally anti-symmetric quasigroup\r\n     * but the most common one (taken from Damm doctoral dissertation). All\r\n     * zeros lay on the diagonal because it simplifies the check digit\r\n     * calculation.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">byte</span>[][] DAMM_TABLE = {\r\n        {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>},\r\n        {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>},\r\n        {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>},\r\n        {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>},\r\n        {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>},\r\n        {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>},\r\n        {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>},\r\n        {<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>},\r\n        {<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>},\r\n        {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>}\r\n    };\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Check input digits by Damm algorithm.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> digits input to check\r\n     * <span class=\"hljs-doctag\">@return</span> true if check was successful, false otherwise\r\n     * <span class=\"hljs-doctag\">@throws</span> IllegalArgumentException if input parameter contains not only\r\n     * digits\r\n     * <span class=\"hljs-doctag\">@throws</span> NullPointerException if input is null\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">dammCheck</span><span class=\"hljs-params\">(String digits)</span> {\r\n        checkInput(digits);\r\n        <span class=\"hljs-type\">int</span>[] numbers = toIntArray(digits);\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">checksum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> number : numbers) {\r\n            checksum = DAMM_TABLE[checksum][number];\r\n        }\r\n\r\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">checksum</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate check digit for initial digits and add it tho the last\r\n     * position.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> initialDigits initial value\r\n     * <span class=\"hljs-doctag\">@return</span> digits with the checksum in the last position\r\n     * <span class=\"hljs-doctag\">@throws</span> IllegalArgumentException if input parameter contains not only\r\n     * digits\r\n     * <span class=\"hljs-doctag\">@throws</span> NullPointerException if input is null\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">addDammChecksum</span><span class=\"hljs-params\">(String initialDigits)</span> {\r\n        checkInput(initialDigits);\r\n        <span class=\"hljs-type\">int</span>[] numbers = toIntArray(initialDigits);\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">checksum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> number : numbers) {\r\n            checksum = DAMM_TABLE[checksum][number];\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> initialDigits + checksum;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        System.out.println(<span class=\"hljs-string\">&quot;Damm algorithm usage examples:&quot;</span>);\r\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">validInput</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;5724&quot;</span>;\r\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">invalidInput</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;5824&quot;</span>;\r\n        checkAndPrint(validInput);\r\n        checkAndPrint(invalidInput);\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;\\nCheck digit generation example:&quot;</span>);\r\n        <span class=\"hljs-type\">var</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;572&quot;</span>;\r\n        generateAndPrint(input);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkAndPrint</span><span class=\"hljs-params\">(String input)</span> {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">validationResult</span> <span class=\"hljs-operator\">=</span> Damm.dammCheck(input)\r\n                ? <span class=\"hljs-string\">&quot;valid&quot;</span>\r\n                : <span class=\"hljs-string\">&quot;not valid&quot;</span>;\r\n        System.out.println(<span class=\"hljs-string\">&quot;Input &#x27;&quot;</span> + input + <span class=\"hljs-string\">&quot;&#x27; is &quot;</span> + validationResult);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generateAndPrint</span><span class=\"hljs-params\">(String input)</span> {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> addDammChecksum(input);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Generate and add checksum to initial value &#x27;&quot;</span> + input + <span class=\"hljs-string\">&quot;&#x27;. Result: &#x27;&quot;</span> + result + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkInput</span><span class=\"hljs-params\">(String input)</span> {\r\n        Objects.requireNonNull(input);\r\n        <span class=\"hljs-keyword\">if</span> (!input.matches(<span class=\"hljs-string\">&quot;\\\\d+&quot;</span>)) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Input &#x27;&quot;</span> + input + <span class=\"hljs-string\">&quot;&#x27; contains not only digits&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] toIntArray(String string) {\r\n        <span class=\"hljs-keyword\">return</span> string.chars()\r\n                .map(i -&gt; Character.digit(i, <span class=\"hljs-number\">10</span>))\r\n                .toArray();\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Artem Boiarshinov",
      "email": "54187376+Boiarshinov@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}