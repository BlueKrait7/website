{
  "slug": "fibonacci-dp",
  "name": "Fibonacci Dp",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc\\fibonacci_dp.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc\\fibonacci_dp.c",
      "code": "<span class=\"hljs-comment\">// Fibonacci Series using Dynamic Programming</span>\r\n\r\n<span class=\"hljs-comment\">/* Author: Moinak Banerjee(moinak878)\r\n   Date : 1 October ,2019\r\n*/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-comment\">// Out of Range checking</span>\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nNo Such term !\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\r\n    }\r\n    <span class=\"hljs-comment\">// declaring array to store fibonacci numbers -- memoization</span>\r\n    <span class=\"hljs-type\">int</span> *f = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(\r\n        (n + <span class=\"hljs-number\">2</span>) * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));  <span class=\"hljs-comment\">//  one extra to handle edge case, n = 0</span>\r\n    <span class=\"hljs-type\">int</span> i;\r\n\r\n    <span class=\"hljs-comment\">/* let 0th and 1st number of the series be 0 and 1*/</span>\r\n    f[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n    f[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++)\r\n    {\r\n        <span class=\"hljs-comment\">// Adding the previous 2 terms to make the 3rd term</span>\r\n        f[i] = f[i - <span class=\"hljs-number\">1</span>] + f[i - <span class=\"hljs-number\">2</span>];\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> out = f[n];\r\n    <span class=\"hljs-built_in\">free</span>(f);\r\n    <span class=\"hljs-keyword\">return</span> out;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> number;\r\n\r\n    <span class=\"hljs-comment\">// Asks for the number/position of term in Fibonnacci sequence</span>\r\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">2</span>)\r\n        number = atoi(argv[<span class=\"hljs-number\">1</span>]);\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the value of n(n starts from 0 ): &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;number);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The nth term is : %d \\n&quot;</span>, fib(number));\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}