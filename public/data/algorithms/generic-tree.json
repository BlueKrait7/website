{
  "slug": "generic-tree",
  "name": "Generic Tree",
  "categories": [
    "datastructures",
    "tree"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\GenericTree.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\GenericTree.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * A generic tree is a tree which can have as many children as it can be It\r\n * might be possible that every node present is directly connected to root node.\r\n *\r\n * &lt;p&gt;\r\n * In this code Every function has two copies: one function is helper function\r\n * which can be called from main and from that function a private function is\r\n * called which will do the actual work. I have done this, while calling from\r\n * main one have to give minimum parameters.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GenericTree</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n\r\n        <span class=\"hljs-type\">int</span> data;\r\n        ArrayList&lt;Node&gt; child = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Node root;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">GenericTree</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-comment\">// Constructor</span>\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scn</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        root = create_treeG(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">0</span>, scn);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">create_treeG</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> childindx, Scanner scn)</span> {\r\n        <span class=\"hljs-comment\">// display</span>\r\n        <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Enter root&#x27;s data&quot;</span>);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Enter data of parent of index &quot;</span> + node.data + <span class=\"hljs-string\">&quot; &quot;</span> + childindx);\r\n        }\r\n        <span class=\"hljs-comment\">// input</span>\r\n        node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>();\r\n        node.data = scn.nextInt();\r\n        System.out.println(<span class=\"hljs-string\">&quot;number of children&quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">number</span> <span class=\"hljs-operator\">=</span> scn.nextInt();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; number; i++) {\r\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> create_treeG(node, i, scn);\r\n            size++;\r\n            node.child.add(child);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> node;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to display the generic tree\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-comment\">// Helper function</span>\r\n        display_1(root);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">display_1</span><span class=\"hljs-params\">(Node parent)</span> {\r\n        System.out.print(parent.data + <span class=\"hljs-string\">&quot;=&gt;&quot;</span>);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; parent.child.size(); i++) {\r\n            System.out.print(parent.child.get(i).data + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;.&quot;</span>);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; parent.child.size(); i++) {\r\n            display_1(parent.child.get(i));\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * One call store the size directly but if you are asked compute size this\r\n     * function to calculate size goes as follows\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> size\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size2call</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> size2(root);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size2</span><span class=\"hljs-params\">(Node roott)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sz</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; roott.child.size(); i++) {\r\n            sz += size2(roott.child.get(i));\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> sz + <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to compute maximum value in the generic tree\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> maximum value\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">maxcall</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxi</span> <span class=\"hljs-operator\">=</span> root.data;\r\n        <span class=\"hljs-keyword\">return</span> max(root, maxi);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(Node roott, <span class=\"hljs-type\">int</span> maxi)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (maxi &lt; roott.data) {\r\n            maxi = roott.data;\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; roott.child.size(); i++) {\r\n            maxi = max(roott.child.get(i), maxi);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> maxi;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to compute HEIGHT of the generic tree\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> height\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">heightcall</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> height(root) - <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">height</span><span class=\"hljs-params\">(Node node)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> height(node.child.get(i));\r\n            <span class=\"hljs-keyword\">if</span> (k &gt; h) {\r\n                h = k;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> h + <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to find whether a number is present in the generic tree or not\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> info number\r\n     * <span class=\"hljs-doctag\">@return</span> present or not\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">findcall</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> info)</span> {\r\n        <span class=\"hljs-keyword\">return</span> find(root, info);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> info)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (node.data == info) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) {\r\n            <span class=\"hljs-keyword\">if</span> (find(node.child.get(i), info)) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to calculate depth of generic tree\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> dep depth\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">depthcaller</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> dep)</span> {\r\n        depth(root, dep);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">depth</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> dep)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (dep == <span class=\"hljs-number\">0</span>) {\r\n            System.out.println(node.data);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) {\r\n            depth(node.child.get(i), dep - <span class=\"hljs-number\">1</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to print generic tree in pre-order\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">preordercall</span><span class=\"hljs-params\">()</span> {\r\n        preorder(root);\r\n        System.out.println(<span class=\"hljs-string\">&quot;.&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">preorder</span><span class=\"hljs-params\">(Node node)</span> {\r\n        System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) {\r\n            preorder(node.child.get(i));\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to print generic tree in post-order\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postordercall</span><span class=\"hljs-params\">()</span> {\r\n        postorder(root);\r\n        System.out.println(<span class=\"hljs-string\">&quot;.&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postorder</span><span class=\"hljs-params\">(Node node)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) {\r\n            postorder(node.child.get(i));\r\n        }\r\n        System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to print generic tree in level-order\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">levelorder</span><span class=\"hljs-params\">()</span> {\r\n        LinkedList&lt;Node&gt; q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();\r\n        q.addLast(root);\r\n        <span class=\"hljs-keyword\">while</span> (!q.isEmpty()) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> q.getFirst().data;\r\n            System.out.print(k + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; q.getFirst().child.size(); i++) {\r\n                q.addLast(q.getFirst().child.get(i));\r\n            }\r\n            q.removeFirst();\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;.&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to remove all leaves of generic tree\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeleavescall</span><span class=\"hljs-params\">()</span> {\r\n        removeleaves(root);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeleaves</span><span class=\"hljs-params\">(Node node)</span> {\r\n        ArrayList&lt;Integer&gt; arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) {\r\n            <span class=\"hljs-keyword\">if</span> (node.child.get(i).child.size() == <span class=\"hljs-number\">0</span>) {\r\n                arr.add(i);\r\n                <span class=\"hljs-comment\">// node.child.remove(i);</span>\r\n                <span class=\"hljs-comment\">// i--;</span>\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                removeleaves(node.child.get(i));\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> arr.size() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n            node.child.remove(arr.get(i) + <span class=\"hljs-number\">0</span>);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "JayH2018",
      "email": "42029911+JayH2018@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "ParitoshAggarwal",
      "email": "paritoshmait@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}