{
  "slug": "kmp",
  "name": "KMP",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\KMP.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\KMP.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Implementation of Knuth–Morris–Pratt algorithm Usage: see the main function\r\n * for an example\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KMP</span> {\r\n    <span class=\"hljs-comment\">// a working example</span>\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">haystack</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;AAAAABAAABA&quot;</span>; <span class=\"hljs-comment\">// This is the full string</span>\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">needle</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;AAAA&quot;</span>; <span class=\"hljs-comment\">// This is the substring that we want to find</span>\r\n        KMPmatcher(haystack, needle);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// find the starting index in string haystack[] that matches the search word P[]</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">KMPmatcher</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String haystack, <span class=\"hljs-keyword\">final</span> String needle)</span> {\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> haystack.length();\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> needle.length();\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span>[] pi = computePrefixFunction(needle);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; m; i++) {\r\n            <span class=\"hljs-keyword\">while</span> (q &gt; <span class=\"hljs-number\">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(q)) {\r\n                q = pi[q - <span class=\"hljs-number\">1</span>];\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (haystack.charAt(i) == needle.charAt(q)) {\r\n                q++;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (q == n) {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Pattern starts: &quot;</span> + (i + <span class=\"hljs-number\">1</span> - n));\r\n                q = pi[q - <span class=\"hljs-number\">1</span>];\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// return the prefix function</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] computePrefixFunction(<span class=\"hljs-keyword\">final</span> String P) {\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> P.length();\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span>[] pi = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\r\n        pi[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\r\n            <span class=\"hljs-keyword\">while</span> (q &gt; <span class=\"hljs-number\">0</span> &amp;&amp; P.charAt(q) != P.charAt(i)) {\r\n                q = pi[q - <span class=\"hljs-number\">1</span>];\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (P.charAt(q) == P.charAt(i)) {\r\n                q++;\r\n            }\r\n\r\n            pi[i] = q;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> pi;\r\n    }\r\n}\r\n"
    },
    "go": {
      "dir": "strings\\kmp\\kmp.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings\\kmp\\kmp.go",
      "code": "<span class=\"hljs-keyword\">package</span> kmp\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-comment\">// User defined.</span>\r\n<span class=\"hljs-comment\">// Set to true to read input from two command line arguments</span>\r\n<span class=\"hljs-comment\">// Set to false to read input from two files &quot;pattern.txt&quot; and &quot;text.txt&quot;</span>\r\n\r\n<span class=\"hljs-comment\">// const isTakingInputFromCommandLine bool = true</span>\r\n\r\n<span class=\"hljs-keyword\">const</span> notFoundPosition <span class=\"hljs-type\">int</span> = <span class=\"hljs-number\">-1</span>\r\n\r\n<span class=\"hljs-keyword\">type</span> Result <span class=\"hljs-keyword\">struct</span> {\r\n\tresultPosition     <span class=\"hljs-type\">int</span>\r\n\tnumberOfComparison <span class=\"hljs-type\">int</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Implementation of Knuth-Morris-Pratt algorithm (Prefix based approach).</span>\r\n<span class=\"hljs-comment\">// Requires either a two command line arguments separated by a single space,</span>\r\n<span class=\"hljs-comment\">// or two files in the same folder: &quot;pattern.txt&quot; containing the string to</span>\r\n<span class=\"hljs-comment\">// be searched for, &quot;text.txt&quot; containing the text to be searched in.</span>\r\n<span class=\"hljs-comment\">// func main() {</span>\r\n<span class=\"hljs-comment\">// \tvar text string</span>\r\n<span class=\"hljs-comment\">// \tvar word string</span>\r\n\r\n<span class=\"hljs-comment\">// \tif isTakingInputFromCommandLine { // case of command line input</span>\r\n<span class=\"hljs-comment\">// \t\targs := os.Args</span>\r\n<span class=\"hljs-comment\">// \t\tif len(args) &lt;= 2 {</span>\r\n<span class=\"hljs-comment\">// \t\t\tlog.Fatal(&quot;Not enough arguments. Two string arguments separated by spaces are required!&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\tword = args[1]</span>\r\n<span class=\"hljs-comment\">// \t\ttext = args[2]</span>\r\n<span class=\"hljs-comment\">// \t\tfor i := 3; i &lt; len(args); i++ {</span>\r\n<span class=\"hljs-comment\">// \t\t\ttext = text + &quot; &quot; + args[i]</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t} else { // case of file input</span>\r\n<span class=\"hljs-comment\">// \t\tpatFile, err := ioutil.ReadFile(&quot;../pattern.txt&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\tif err != nil {</span>\r\n<span class=\"hljs-comment\">// \t\t\tlog.Fatal(err)</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\ttextFile, err := ioutil.ReadFile(&quot;../text.txt&quot;)</span>\r\n<span class=\"hljs-comment\">// \t\tif err != nil {</span>\r\n<span class=\"hljs-comment\">// \t\t\tlog.Fatal(err)</span>\r\n<span class=\"hljs-comment\">// \t\t}</span>\r\n<span class=\"hljs-comment\">// \t\ttext = string(textFile)</span>\r\n<span class=\"hljs-comment\">// \t\tword = string(patFile)</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n\r\n<span class=\"hljs-comment\">// \tif len(word) &gt; len(text) {</span>\r\n<span class=\"hljs-comment\">// \t\tlog.Fatal(&quot;Pattern is longer than text!&quot;)</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\nRunning: Knuth-Morris-Pratt algorithm.\\n\\n&quot;)</span>\r\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;Search word (%d chars long): %q.\\n&quot;, len(word), word)</span>\r\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;Text        (%d chars long): %q.\\n\\n&quot;, len(text), text)</span>\r\n\r\n<span class=\"hljs-comment\">// \tr := kmp(text, word)</span>\r\n<span class=\"hljs-comment\">// \tif r.resultPosition == notFoundPosition {</span>\r\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;\\n\\nWord was not found.\\n%d comparisons were done.&quot;, r.numberOfComparison)</span>\r\n<span class=\"hljs-comment\">// \t} else {</span>\r\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;\\n\\nWord %q was found at position %d in %q. \\n%d comparisons were done.&quot;, word,</span>\r\n<span class=\"hljs-comment\">// \t\t\tr.resultPosition, text, r.numberOfComparison)</span>\r\n<span class=\"hljs-comment\">// \t}</span>\r\n<span class=\"hljs-comment\">// }</span>\r\n\r\n<span class=\"hljs-comment\">// Kmp Function kmp performing the Knuth-Morris-Pratt algorithm.</span>\r\n<span class=\"hljs-comment\">// Prints whether the word/pattern was found and on what position in the text or not.</span>\r\n<span class=\"hljs-comment\">// m - current match in text, i - current character in w, c - amount of comparisons.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Kmp</span><span class=\"hljs-params\">(text <span class=\"hljs-type\">string</span>, word <span class=\"hljs-type\">string</span>)</span></span> Result {\r\n\tm, i, c := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\r\n\tt := kmpTable(word)\r\n\t<span class=\"hljs-keyword\">for</span> m+i &lt; <span class=\"hljs-built_in\">len</span>(text) {\r\n\t\tfmt.Printf(<span class=\"hljs-string\">&quot;\\n   comparing characters %c %c at positions %d %d&quot;</span>, text[m+i], word[i], m+i, i)\r\n\t\tc++\r\n\t\t<span class=\"hljs-keyword\">if</span> word[i] == text[m+i] {\r\n\t\t\tfmt.Printf(<span class=\"hljs-string\">&quot; - match&quot;</span>)\r\n\t\t\t<span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-built_in\">len</span>(word)<span class=\"hljs-number\">-1</span> {\r\n\t\t\t\t<span class=\"hljs-keyword\">return</span> Result{\r\n\t\t\t\t\tm, c,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\tm = m + i - t[i]\r\n\t\t\t<span class=\"hljs-keyword\">if</span> t[i] &gt; <span class=\"hljs-number\">-1</span> {\r\n\t\t\t\ti = t[i]\r\n\t\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\t\ti = <span class=\"hljs-number\">0</span>\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> Result{notFoundPosition,\r\n\t\tc,\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">// Table building algorithm.</span>\r\n<span class=\"hljs-comment\">// Takes word to be analyzed and table to be filled.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">kmpTable</span><span class=\"hljs-params\">(word <span class=\"hljs-type\">string</span>)</span></span> (t []<span class=\"hljs-type\">int</span>) {\r\n\tt = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(word))\r\n\tpos, cnd := <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>\r\n\tt[<span class=\"hljs-number\">0</span>], t[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>\r\n\t<span class=\"hljs-keyword\">for</span> pos &lt; <span class=\"hljs-built_in\">len</span>(word) {\r\n\t\t<span class=\"hljs-keyword\">if</span> word[pos<span class=\"hljs-number\">-1</span>] == word[cnd] {\r\n\t\t\tcnd++\r\n\t\t\tt[pos] = cnd\r\n\t\t\tpos++\r\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> cnd &gt; <span class=\"hljs-number\">0</span> {\r\n\t\t\tcnd = t[cnd]\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\tt[pos] = <span class=\"hljs-number\">0</span>\r\n\t\t\tpos++\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> t\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "halafi",
      "email": "filiphalas74@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "_0",
      "email": "_0@m-PC",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}