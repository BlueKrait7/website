{
  "slug": "array-right-rotation",
  "name": "Array Right Rotation",
  "categories": [
    "operationsondatastructures"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "operations_on_datastructures\\array_right_rotation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/operations_on_datastructures\\array_right_rotation.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation for the [Array right\r\n * Rotation](https://www.javatpoint.com/program-to-right-rotate-the-elements-of-an-array)\r\n * algorithm.\r\n * @details Shifting an array to the right involves moving each element of the\r\n * array so that it occupies a position of a certain shift value after its\r\n * current one. This implementation uses a result vector and does not mutate the\r\n * input.\r\n * @see array_left_rotation.cpp\r\n * @author [Alvin](https://github.com/polarvoid)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace operations_on_datastructures\r\n * @brief Operations on Data Structures\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> operations_on_datastructures {\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Prints the values of a vector sequentially, ending with a newline\r\n * character.\r\n * @param array Reference to the array to be printed\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; &amp;array)</span> </span>{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int32_t</span> i : array) {\r\n        std::cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;  <span class=\"hljs-comment\">/// Print each value in the array</span>\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;  <span class=\"hljs-comment\">/// Print newline</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Shifts the given vector to the right by the shift amount and returns a\r\n * new vector with the result. The original vector is not mutated.\r\n * @details Shifts the values of the vector, by creating a new vector and adding\r\n * values from the shift index to the end, then appending the rest of the\r\n * elements to the start of the vector.\r\n * @param array A reference to the input std::vector\r\n * @param shift The amount to be shifted to the right\r\n * @returns A std::vector with the shifted values\r\n */</span>\r\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; <span class=\"hljs-title\">shift_right</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; &amp;array,\r\n                                 <span class=\"hljs-type\">size_t</span> shift)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (array.<span class=\"hljs-built_in\">size</span>() &lt;= shift) {\r\n        <span class=\"hljs-keyword\">return</span> {};  <span class=\"hljs-comment\">///&lt; We got an invalid shift, return empty array</span>\r\n    }\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; <span class=\"hljs-title\">res</span><span class=\"hljs-params\">(array.size())</span></span>;  <span class=\"hljs-comment\">///&lt; Result array</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = shift; i &lt; array.<span class=\"hljs-built_in\">size</span>(); i++) {\r\n        res[i] = array[i - shift];  <span class=\"hljs-comment\">///&lt; Add values after the shift index</span>\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; shift; i++) {\r\n        res[i] =\r\n            array[array.<span class=\"hljs-built_in\">size</span>() - shift + i];  <span class=\"hljs-comment\">///&lt; Add the values from the start</span>\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> res;\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace operations_on_datastructures</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace tests\r\n * @brief Testcases to check Union of Two Arrays.\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> tests {\r\n<span class=\"hljs-keyword\">using</span> operations_on_datastructures::print;\r\n<span class=\"hljs-keyword\">using</span> operations_on_datastructures::shift_right;\r\n<span class=\"hljs-comment\">/**\r\n * @brief A Test to check an simple case\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 1\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initialized arr = {1, 2, 3, 4, 5}\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: {4, 5, 1, 2, 3}\\n&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; arr = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; res = <span class=\"hljs-built_in\">shift_right</span>(arr, <span class=\"hljs-number\">2</span>);\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; expected = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>};\r\n    <span class=\"hljs-built_in\">assert</span>(res == expected);\r\n    <span class=\"hljs-built_in\">print</span>(res);  <span class=\"hljs-comment\">///&lt; Should print 4 5 1 2 3</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief A Test to check an empty vector\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 2\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initialized arr = {}\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: {}\\n&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; arr = {};\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; res = <span class=\"hljs-built_in\">shift_right</span>(arr, <span class=\"hljs-number\">2</span>);\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; expected = {};\r\n    <span class=\"hljs-built_in\">assert</span>(res == expected);\r\n    <span class=\"hljs-built_in\">print</span>(res);  <span class=\"hljs-comment\">///&lt; Should print empty newline</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief A Test to check an invalid shift value\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 3\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initialized arr = {1, 2, 3, 4, 5}\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: {}\\n&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; arr = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; res = <span class=\"hljs-built_in\">shift_right</span>(arr, <span class=\"hljs-number\">7</span>);  <span class=\"hljs-comment\">///&lt; 7 &gt; 5</span>\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; expected = {};\r\n    <span class=\"hljs-built_in\">assert</span>(res == expected);\r\n    <span class=\"hljs-built_in\">print</span>(res);  <span class=\"hljs-comment\">///&lt; Should print empty newline</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief A Test to check a very large input\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test4</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 4\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initialized arr = {2, 4, ..., 420}\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: {420, 2, 4, ..., 418}\\n&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; arr;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">210</span>; i++) {\r\n        arr.<span class=\"hljs-built_in\">push_back</span>(i * <span class=\"hljs-number\">2</span>);\r\n    }\r\n    <span class=\"hljs-built_in\">print</span>(arr);\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; res = <span class=\"hljs-built_in\">shift_right</span>(arr, <span class=\"hljs-number\">1</span>);\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; expected;\r\n    expected.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-number\">420</span>);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">209</span>; i++) {\r\n        expected.<span class=\"hljs-built_in\">push_back</span>(arr[i]);\r\n    }\r\n    <span class=\"hljs-built_in\">assert</span>(res == expected);\r\n    <span class=\"hljs-built_in\">print</span>(res);  <span class=\"hljs-comment\">///&lt; Should print {420, 2, 4, ..., 418}</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief A Test to check a shift of zero\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test5</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST CASE 5\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initialized arr = {1, 2, 3, 4, 5}\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected result: {1, 2, 3, 4, 5}\\n&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; arr = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\r\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; res = <span class=\"hljs-built_in\">shift_right</span>(arr, <span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(res == arr);\r\n    <span class=\"hljs-built_in\">print</span>(res);  <span class=\"hljs-comment\">///&lt; Should print 1 2 3 4 5</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED!\\n\\n&quot;</span>;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace tests</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function to test the correctness of shift_right() function\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    tests::<span class=\"hljs-built_in\">test1</span>();\r\n    tests::<span class=\"hljs-built_in\">test2</span>();\r\n    tests::<span class=\"hljs-built_in\">test3</span>();\r\n    tests::<span class=\"hljs-built_in\">test4</span>();\r\n    tests::<span class=\"hljs-built_in\">test5</span>();\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Alvin Philips",
      "email": "alvinphilips257@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}