{
  "slug": "integration-by-simpson-approx",
  "name": "Integration by Simpson Approx",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\integration_by_simpson_approx.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\integration_by_simpson_approx.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nAuthor : Syed Faizan ( 3rd Year IIIT Pune )\r\nGithub : faizan2700\r\n\r\nPurpose : You have one function f(x) which takes float integer and returns\r\nfloat you have to integrate the function in limits a to b.\r\nThe approximation proposed by Thomas Simpsons in 1743 is one way to calculate\r\nintegration.\r\n\r\n( read article : https://cp-algorithms.com/num_methods/simpson-integration.html )\r\n\r\nsimpson_integration() takes function,lower_limit=a,upper_limit=b,precision and\r\nreturns the integration of function in given limit.\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-comment\"># constants</span>\r\n<span class=\"hljs-comment\"># the more the number of steps the more accurate</span>\r\nN_STEPS = <span class=\"hljs-number\">1000</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-keyword\">return</span> x * x\r\n\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nSummary of Simpson Approximation :\r\n\r\nBy simpsons integration :\r\n1. integration of fxdx with limit a to b is =\r\n    f(x0) + 4 * f(x1) + 2 * f(x2) + 4 * f(x3) + 2 * f(x4)..... + f(xn)\r\nwhere x0 = a\r\nxi = a + i * h\r\nxn = b\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simpson_integration</span>(<span class=\"hljs-params\">function, a: <span class=\"hljs-built_in\">float</span>, b: <span class=\"hljs-built_in\">float</span>, precision: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">4</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Args:\r\n        function : the function which&#x27;s integration is desired\r\n        a : the lower limit of integration\r\n        b : upper limit of integraion\r\n        precision : precision of the result,error required default is 4\r\n\r\n    Returns:\r\n        result : the value of the approximated integration of function in range a to b\r\n\r\n    Raises:\r\n        AssertionError: function is not callable\r\n        AssertionError: a is not float or integer\r\n        AssertionError: function should return float or integer\r\n        AssertionError: b is not float or integer\r\n        AssertionError: precision is not positive integer\r\n\r\n    &gt;&gt;&gt; simpson_integration(lambda x : x*x,1,2,3)\r\n    2.333\r\n\r\n    &gt;&gt;&gt; simpson_integration(lambda x : x*x,&#x27;wrong_input&#x27;,2,3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    AssertionError: a should be float or integer your input : wrong_input\r\n\r\n    &gt;&gt;&gt; simpson_integration(lambda x : x*x,1,&#x27;wrong_input&#x27;,3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    AssertionError: b should be float or integer your input : wrong_input\r\n\r\n    &gt;&gt;&gt; simpson_integration(lambda x : x*x,1,2,&#x27;wrong_input&#x27;)\r\n    Traceback (most recent call last):\r\n        ...\r\n    AssertionError: precision should be positive integer your input : wrong_input\r\n    &gt;&gt;&gt; simpson_integration(&#x27;wrong_input&#x27;,2,3,4)\r\n    Traceback (most recent call last):\r\n        ...\r\n    AssertionError: the function(object) passed should be callable your input : ...\r\n\r\n    &gt;&gt;&gt; simpson_integration(lambda x : x*x,3.45,3.2,1)\r\n    -2.8\r\n\r\n    &gt;&gt;&gt; simpson_integration(lambda x : x*x,3.45,3.2,0)\r\n    Traceback (most recent call last):\r\n        ...\r\n    AssertionError: precision should be positive integer your input : 0\r\n\r\n    &gt;&gt;&gt; simpson_integration(lambda x : x*x,3.45,3.2,-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    AssertionError: precision should be positive integer your input : -1\r\n\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">callable</span>(\r\n        function\r\n    ), <span class=\"hljs-string\">f&quot;the function(object) passed should be callable your input : <span class=\"hljs-subst\">{function}</span>&quot;</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(a, <span class=\"hljs-built_in\">float</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(\r\n        a, <span class=\"hljs-built_in\">int</span>\r\n    ), <span class=\"hljs-string\">f&quot;a should be float or integer your input : <span class=\"hljs-subst\">{a}</span>&quot;</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(function(a), <span class=\"hljs-built_in\">float</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(function(a), <span class=\"hljs-built_in\">int</span>), (\r\n        <span class=\"hljs-string\">&quot;the function should return integer or float return type of your function, &quot;</span>\r\n        <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">type</span>(a)}</span>&quot;</span>\r\n    )\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(b, <span class=\"hljs-built_in\">float</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(\r\n        b, <span class=\"hljs-built_in\">int</span>\r\n    ), <span class=\"hljs-string\">f&quot;b should be float or integer your input : <span class=\"hljs-subst\">{b}</span>&quot;</span>\r\n    <span class=\"hljs-keyword\">assert</span> (\r\n        <span class=\"hljs-built_in\">isinstance</span>(precision, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> precision &gt; <span class=\"hljs-number\">0</span>\r\n    ), <span class=\"hljs-string\">f&quot;precision should be positive integer your input : <span class=\"hljs-subst\">{precision}</span>&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># just applying the formula of simpson for approximate integraion written in</span>\r\n    <span class=\"hljs-comment\"># mentioned article in first comment of this file and above this function</span>\r\n\r\n    h = (b - a) / N_STEPS\r\n    result = function(a) + function(b)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, N_STEPS):\r\n        a1 = a + h * i\r\n        result += function(a1) * (<span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">if</span> i % <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">2</span>)\r\n\r\n    result *= h / <span class=\"hljs-number\">3</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">round</span>(result, precision)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}