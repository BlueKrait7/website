{
  "slug": "gradient-boosting-regressor",
  "name": "Gradient Boosting Regressor",
  "categories": [
    "machinelearning"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning\\gradient_boosting_regressor.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning\\gradient_boosting_regressor.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Implementation of GradientBoostingRegressor in sklearn using the\r\n   boston dataset which is very popular for regression problem to\r\n   predict house price.\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\r\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\r\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_boston\r\n<span class=\"hljs-keyword\">from</span> sklearn.ensemble <span class=\"hljs-keyword\">import</span> GradientBoostingRegressor\r\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_squared_error, r2_score\r\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n\r\n    <span class=\"hljs-comment\"># loading the dataset from the sklearn</span>\r\n    df = load_boston()\r\n    <span class=\"hljs-built_in\">print</span>(df.keys())\r\n    <span class=\"hljs-comment\"># now let construct a data frame</span>\r\n    df_boston = pd.DataFrame(df.data, columns=df.feature_names)\r\n    <span class=\"hljs-comment\"># let add the target to the dataframe</span>\r\n    df_boston[<span class=\"hljs-string\">&quot;Price&quot;</span>] = df.target\r\n    <span class=\"hljs-comment\"># print the first five rows using the head function</span>\r\n    <span class=\"hljs-built_in\">print</span>(df_boston.head())\r\n    <span class=\"hljs-comment\"># Summary statistics</span>\r\n    <span class=\"hljs-built_in\">print</span>(df_boston.describe().T)\r\n    <span class=\"hljs-comment\"># Feature selection</span>\r\n\r\n    X = df_boston.iloc[:, :-<span class=\"hljs-number\">1</span>]\r\n    y = df_boston.iloc[:, -<span class=\"hljs-number\">1</span>]  <span class=\"hljs-comment\"># target variable</span>\r\n    <span class=\"hljs-comment\"># split the data with 75% train and 25% test sets.</span>\r\n    X_train, X_test, y_train, y_test = train_test_split(\r\n        X, y, random_state=<span class=\"hljs-number\">0</span>, test_size=<span class=\"hljs-number\">0.25</span>\r\n    )\r\n\r\n    model = GradientBoostingRegressor(\r\n        n_estimators=<span class=\"hljs-number\">500</span>, max_depth=<span class=\"hljs-number\">5</span>, min_samples_split=<span class=\"hljs-number\">4</span>, learning_rate=<span class=\"hljs-number\">0.01</span>\r\n    )\r\n    <span class=\"hljs-comment\"># training the model</span>\r\n    model.fit(X_train, y_train)\r\n    <span class=\"hljs-comment\"># to see how good the model fit the data</span>\r\n    training_score = model.score(X_train, y_train).<span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">3</span>)\r\n    test_score = model.score(X_test, y_test).<span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">3</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Training score of GradientBoosting is :&quot;</span>, training_score)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The test score of GradientBoosting is :&quot;</span>, test_score)\r\n    <span class=\"hljs-comment\"># Let us evaluation the model by finding the errors</span>\r\n    y_pred = model.predict(X_test)\r\n\r\n    <span class=\"hljs-comment\"># The mean squared error</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Mean squared error: %.2f&quot;</span> % mean_squared_error(y_test, y_pred))\r\n    <span class=\"hljs-comment\"># Explained variance score: 1 is perfect prediction</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Test Variance score: %.2f&quot;</span> % r2_score(y_test, y_pred))\r\n\r\n    <span class=\"hljs-comment\"># So let&#x27;s run the model against the test data</span>\r\n    fig, ax = plt.subplots()\r\n    ax.scatter(y_test, y_pred, edgecolors=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>))\r\n    ax.plot([y_test.<span class=\"hljs-built_in\">min</span>(), y_test.<span class=\"hljs-built_in\">max</span>()], [y_test.<span class=\"hljs-built_in\">min</span>(), y_test.<span class=\"hljs-built_in\">max</span>()], <span class=\"hljs-string\">&quot;k--&quot;</span>, lw=<span class=\"hljs-number\">4</span>)\r\n    ax.set_xlabel(<span class=\"hljs-string\">&quot;Actual&quot;</span>)\r\n    ax.set_ylabel(<span class=\"hljs-string\">&quot;Predicted&quot;</span>)\r\n    ax.set_title(<span class=\"hljs-string\">&quot;Truth vs Predicted&quot;</span>)\r\n    <span class=\"hljs-comment\"># this show function will display the plotting</span>\r\n    plt.show()\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Abdoulaye Balde",
      "email": "51192943+abdoulayegk@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}