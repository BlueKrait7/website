{
  "slug": "prefix-function",
  "name": "Prefix Function",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings\\prefix_function.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings\\prefix_function.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nhttps://cp-algorithms.com/string/prefix-function.html\r\n\r\nPrefix function Knuth–Morris–Pratt algorithm\r\n\r\nDifferent algorithm than Knuth-Morris-Pratt pattern finding\r\n\r\nE.x. Finding longest prefix which is also suffix\r\n\r\nTime Complexity: O(n) - where n is the length of the string\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prefix_function</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    For the given string this function computes value for each index(i),\r\n    which represents the longest coincidence of prefix and suffix\r\n    for given substring (input_str[0...i])\r\n\r\n    For the value of the first element the algorithm always returns 0\r\n\r\n    &gt;&gt;&gt; prefix_function(&quot;aabcdaabc&quot;)\r\n    [0, 1, 0, 0, 0, 1, 2, 3, 4]\r\n    &gt;&gt;&gt; prefix_function(&quot;asdasdad&quot;)\r\n    [0, 0, 0, 1, 2, 3, 4, 0]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># list for the result values</span>\r\n    prefix_result = [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-built_in\">len</span>(input_string)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(input_string)):\r\n\r\n        <span class=\"hljs-comment\"># use last results for better performance - dynamic programming</span>\r\n        j = prefix_result[i - <span class=\"hljs-number\">1</span>]\r\n        <span class=\"hljs-keyword\">while</span> j &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> input_string[i] != input_string[j]:\r\n            j = prefix_result[j - <span class=\"hljs-number\">1</span>]\r\n\r\n        <span class=\"hljs-keyword\">if</span> input_string[i] == input_string[j]:\r\n            j += <span class=\"hljs-number\">1</span>\r\n        prefix_result[i] = j\r\n\r\n    <span class=\"hljs-keyword\">return</span> prefix_result\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">longest_prefix</span>(<span class=\"hljs-params\">input_str: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Prefix-function use case\r\n    Finding longest prefix which is suffix as well\r\n\r\n    &gt;&gt;&gt; longest_prefix(&quot;aabcdaabc&quot;)\r\n    4\r\n    &gt;&gt;&gt; longest_prefix(&quot;asdasdad&quot;)\r\n    4\r\n    &gt;&gt;&gt; longest_prefix(&quot;abcab&quot;)\r\n    2\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># just returning maximum value of the array gives us answer</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>(prefix_function(input_str))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Strings\\PrefixFunction.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Strings\\PrefixFunction.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\r\n\r\n<span class=\"hljs-comment\">/// https://cp-algorithms.com/string/prefix-function.html</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Prefix function Knuth–Morris–Pratt algorithm</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Different algorithm than Knuth-Morris-Pratt pattern finding</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// E.x. Finding longest prefix which is also suffix</span>\r\n<span class=\"hljs-comment\">/// Time Complexity: O(n) - where n is the length of the string</span>\r\n<span class=\"hljs-keyword\">module</span> PrefixFunction <span class=\"hljs-operator\">=</span>\r\n\r\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// For the given string this function computes value for each &lt;c&gt;index(i)&lt;/c&gt;,</span>\r\n    <span class=\"hljs-comment\">/// which represents the longest coincidence of prefix and suffix</span>\r\n    <span class=\"hljs-comment\">/// for given substring &lt;c&gt;inputString[0...i]&lt;/c&gt;.</span>\r\n    <span class=\"hljs-comment\">/// For the value of the first element the algorithm always returns 0</span>\r\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;example&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;code&gt;</span>\r\n    <span class=\"hljs-comment\">/// prefix_function &quot;aabcdaabc&quot;</span>\r\n    <span class=\"hljs-comment\">/// [0, 1, 0, 0, 0, 1, 2, 3, 4]</span>\r\n    <span class=\"hljs-comment\">///</span>\r\n    <span class=\"hljs-comment\">/// prefix_function(&quot;asdasdad&quot;)</span>\r\n    <span class=\"hljs-comment\">/// [0, 0, 0, 1, 2, 3, 4, 0]</span>\r\n    <span class=\"hljs-comment\">/// &lt;/code&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;/example&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;inputString&quot;&gt;&lt;/param&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;returns&gt;A string of &lt;c&gt;int&lt;/c&gt;&lt;/returns&gt;</span>\r\n    <span class=\"hljs-keyword\">let</span> prefixFunction (inputString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">int</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span>\r\n\r\n        <span class=\"hljs-comment\">// List for the result values</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> prefixResult <span class=\"hljs-operator\">=</span>\r\n            [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> (inputString.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>) <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">|</span>]\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">to</span> (inputString.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-comment\">// Use last results for better performance - dynamic programming</span>\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> j <span class=\"hljs-operator\">=</span> prefixResult.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]\r\n\r\n            <span class=\"hljs-keyword\">while</span> j <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">&amp;&amp;</span> inputString.[i] <span class=\"hljs-operator\">&lt;&gt;</span> inputString.[j] <span class=\"hljs-keyword\">do</span>\r\n                j <span class=\"hljs-operator\">&lt;-</span> prefixResult.[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]\r\n\r\n            <span class=\"hljs-keyword\">if</span> inputString.[i] <span class=\"hljs-operator\">=</span> inputString.[j] <span class=\"hljs-keyword\">then</span>\r\n                j <span class=\"hljs-operator\">&lt;-</span> j <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n\r\n            prefixResult.SetValue(j, i)\r\n\r\n        prefixResult <span class=\"hljs-operator\">|&gt;</span> List.ofArray\r\n\r\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// Prefix-function use case</span>\r\n    <span class=\"hljs-comment\">/// Finding longest prefix which is suffix as well</span>\r\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;example&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;code&gt;</span>\r\n    <span class=\"hljs-comment\">/// longest_prefix &quot;aabcdaabc&quot;</span>\r\n    <span class=\"hljs-comment\">/// 4</span>\r\n    <span class=\"hljs-comment\">/// longest_prefix &quot;asdasdad&quot;</span>\r\n    <span class=\"hljs-comment\">/// 4</span>\r\n    <span class=\"hljs-comment\">/// longest_prefix &quot;abcab&quot;</span>\r\n    <span class=\"hljs-comment\">/// 2</span>\r\n    <span class=\"hljs-comment\">/// &lt;/code&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;/example&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;inputString&quot;&gt;&lt;/param&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;returns&gt;Returns &lt;c&gt;int&lt;/c&gt;&lt;/returns&gt;</span>\r\n    <span class=\"hljs-keyword\">let</span> longestPrefix (inputString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-comment\">// Just returning maximum value of the array gives us answer</span>\r\n        prefixFunction (inputString)\r\n        <span class=\"hljs-operator\">|&gt;</span> System.Linq.Enumerable.Max\r\n"
    }
  },
  "contributors": [
    {
      "name": "Sarvesh Kumar Dwivedi",
      "email": "georgiansarvesh4396@gmail.com",
      "commits": 1
    },
    {
      "name": "Nika Losaberidze",
      "email": "nlosa16@freeuni.edu.ge",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}