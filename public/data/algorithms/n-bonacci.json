{
  "slug": "n-bonacci",
  "name": "N Bonacci",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\n_bonacci.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\n_bonacci.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of the\r\n * [N-bonacci](http://oeis.org/wiki/N-bonacci_numbers) series\r\n *\r\n * @details\r\n * In general, in N-bonacci sequence,\r\n * we generate sum of preceding N numbers from the next term.\r\n *\r\n * For example, a 3-bonacci sequence is the following:\r\n * 0, 0, 1, 1, 2, 4, 7, 13, 24, 44, 81\r\n * In this code we take N and M as input where M is the number of terms\r\n * to be printed of the N-bonacci series\r\n *\r\n * @author [Swastika Gupta](https://github.com/Swastyy)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::is_equal, std::swap</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace math\r\n * @brief Mathematical algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> math {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace n_bonacci\r\n * @brief Functions for the [N-bonacci](http://oeis.org/wiki/N-bonacci_numbers)\r\n * implementation\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> n_bonacci {\r\n<span class=\"hljs-comment\">/**\r\n * @brief Finds the N-Bonacci series for the `n` parameter value and `m`\r\n * parameter terms\r\n * @param n is in the N-Bonacci series\r\n * @param m is the number of terms in the N-Bonacci sequence\r\n * @returns the n-bonacci sequence as vector array\r\n */</span>\r\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">N_bonacci</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;n, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;m)</span> </span>{\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(m, <span class=\"hljs-number\">0</span>)</span></span>;  <span class=\"hljs-comment\">// we create an empty array of size m</span>\r\n\r\n    a[n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// we initialise the (n-1)th term as 1 which is the sum of</span>\r\n                   <span class=\"hljs-comment\">/// preceding N zeros</span>\r\n    a[n] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// similarily the sum of preceding N zeros and the (N+1)th 1 is</span>\r\n               <span class=\"hljs-comment\">/// also 1</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = n + <span class=\"hljs-number\">1</span>; i &lt; m; i++) {\r\n        <span class=\"hljs-comment\">// this is an optimized solution that works in O(M) time and takes O(M)</span>\r\n        <span class=\"hljs-comment\">// extra space here we use the concept of the sliding window the current</span>\r\n        <span class=\"hljs-comment\">// term can be computed using the given formula</span>\r\n        a[i] = <span class=\"hljs-number\">2</span> * a[i - <span class=\"hljs-number\">1</span>] - a[i - <span class=\"hljs-number\">1</span> - n];\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> a;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace n_bonacci</span>\r\n}  <span class=\"hljs-comment\">// namespace math</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// n = 1 m = 1 return [1, 1]</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr1 = math::n_bonacci::<span class=\"hljs-built_in\">N_bonacci</span>(\r\n        <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// first input is the param n and second one is the param m for</span>\r\n                <span class=\"hljs-comment\">// N-bonacci func</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; output_array1 = {\r\n        <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>};  <span class=\"hljs-comment\">// It is the expected output series of length m</span>\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">equal</span>(std::<span class=\"hljs-built_in\">begin</span>(arr1), std::<span class=\"hljs-built_in\">end</span>(arr1),\r\n                      std::<span class=\"hljs-built_in\">begin</span>(output_array1)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// n = 5 m = 15 return [0, 0, 0, 0, 1, 1, 2, 4, 8, 16, 31, 61, 120, 236,</span>\r\n    <span class=\"hljs-comment\">// 464]</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr2 = math::n_bonacci::<span class=\"hljs-built_in\">N_bonacci</span>(\r\n        <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">15</span>);  <span class=\"hljs-comment\">// first input is the param n and second one is the param m for</span>\r\n                 <span class=\"hljs-comment\">// N-bonacci func</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; output_array2 = {\r\n        <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">1</span>,   <span class=\"hljs-number\">1</span>,   <span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">4</span>,\r\n        <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">236</span>, <span class=\"hljs-number\">464</span>};  <span class=\"hljs-comment\">// It is the expected output series of</span>\r\n                                        <span class=\"hljs-comment\">// length m</span>\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">equal</span>(std::<span class=\"hljs-built_in\">begin</span>(arr2), std::<span class=\"hljs-built_in\">end</span>(arr2),\r\n                      std::<span class=\"hljs-built_in\">begin</span>(output_array2)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// n = 6 m = 17 return [0, 0, 0, 0, 0, 1, 1, 2, 4, 8, 16, 32, 63, 125, 248,</span>\r\n    <span class=\"hljs-comment\">// 492, 976]</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr3 = math::n_bonacci::<span class=\"hljs-built_in\">N_bonacci</span>(\r\n        <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">17</span>);  <span class=\"hljs-comment\">// first input is the param n and second one is the param m for</span>\r\n                 <span class=\"hljs-comment\">// N-bonacci func</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; output_array3 = {\r\n        <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">0</span>,   <span class=\"hljs-number\">1</span>,   <span class=\"hljs-number\">1</span>,   <span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">4</span>,\r\n        <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">125</span>, <span class=\"hljs-number\">248</span>, <span class=\"hljs-number\">492</span>, <span class=\"hljs-number\">976</span>};  <span class=\"hljs-comment\">// It is the expected output series</span>\r\n                                             <span class=\"hljs-comment\">// of length m</span>\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">equal</span>(std::<span class=\"hljs-built_in\">begin</span>(arr3), std::<span class=\"hljs-built_in\">end</span>(arr3),\r\n                      std::<span class=\"hljs-built_in\">begin</span>(output_array3)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// n = 56 m = 15 return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4th test&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr4 = math::n_bonacci::<span class=\"hljs-built_in\">N_bonacci</span>(\r\n        <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">15</span>);  <span class=\"hljs-comment\">// first input is the param n and second one is the param m</span>\r\n                  <span class=\"hljs-comment\">// for N-bonacci func</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; output_array4 = {\r\n        <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\r\n        <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>};  <span class=\"hljs-comment\">// It is the expected output series of length m</span>\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">equal</span>(std::<span class=\"hljs-built_in\">begin</span>(arr4), std::<span class=\"hljs-built_in\">end</span>(arr4),\r\n                      std::<span class=\"hljs-built_in\">begin</span>(output_array4)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "other\\N_bonacci.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/other\\N_bonacci.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-built_in\">List</span> N_bonacci(<span class=\"hljs-built_in\">int</span> n, <span class=\"hljs-built_in\">int</span> m) {\r\n  <span class=\"hljs-built_in\">List</span> v = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>(m);\r\n  <span class=\"hljs-keyword\">var</span> i;\r\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) {\r\n    v[i] = <span class=\"hljs-number\">0</span>;\r\n  }\r\n  v[n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\r\n  v[n] = <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-keyword\">for</span> (i = n + <span class=\"hljs-number\">1</span>; i &lt; m; i++) {\r\n    v[i] = <span class=\"hljs-number\">2</span> * v[i - <span class=\"hljs-number\">1</span>] - v[i - <span class=\"hljs-number\">1</span> - n];\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> v;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  test(<span class=\"hljs-string\">&quot;For n=2 N_bonacci is same as fibbonaci&quot;</span>, () {\r\n    expect(N_bonacci(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>), equals([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>]));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;For n=3 N_bonacci is same as tribbonaci&quot;</span>, () {\r\n    expect(N_bonacci(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>), equals([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>]));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;n=4 N_bonacci&quot;</span>, () {\r\n    expect(N_bonacci(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>), equals([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">29</span>]));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;n=6 N_bonacci&quot;</span>, () {\r\n    expect(N_bonacci(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>), equals([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>]));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;n=8 N_bonacci&quot;</span>, () {\r\n    expect(N_bonacci(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>), equals([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]));\r\n  });\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}