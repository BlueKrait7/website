{
  "slug": "lcm-sum",
  "name": "Lcm Sum",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\lcm_sum.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\lcm_sum.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief An algorithm to calculate the sum of LCM: \\f$\\mathrm{LCM}(1,n) +\r\n * \\mathrm{LCM}(2,n) + \\ldots + \\mathrm{LCM}(n,n)\\f$\r\n * @details An algorithm to calculate the sum of LCM: \\f$\\mathrm{LCM}(1,n) +\r\n * \\mathrm{LCM}(2,n) + \\ldots + \\mathrm{LCM}(n,n)\\f$ where\r\n * \\f$\\mathrm{LCM}(i,n)\\f$ denotes the Least Common Multiple of the integers i\r\n * and n. For n greater than or equal to 1. The value of the sum is calculated\r\n * by formula: \\f[ \\sum\\mathrm{LCM}(i, n) = \\frac{1}{2} \\left[\\left(\\sum (d *\r\n * \\mathrm{ETF}(d)) + 1\\right) * n\\right] \\f] where \\mathrm{ETF}(i) represents\r\n * Euler totient function of i.\r\n * @author [Chesta Mittal](https://github.com/chestamittal)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for std::cin and std::cout</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace math\r\n * @brief Mathematical algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> math {\r\n<span class=\"hljs-comment\">/**\r\n * Function to compute sum of euler totients in sumOfEulerTotient vector\r\n * @param num input number\r\n * @returns int Sum of LCMs, i.e. âˆ‘LCM(i, num) from i = 1 to num\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">lcmSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint16_t</span>&amp; num)</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">eulerTotient</span><span class=\"hljs-params\">(num + <span class=\"hljs-number\">1</span>)</span></span>;\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">sumOfEulerTotient</span><span class=\"hljs-params\">(num + <span class=\"hljs-number\">1</span>)</span></span>;\r\n\r\n    <span class=\"hljs-comment\">// storing initial values in eulerTotient vector</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= num; i++) {\r\n        eulerTotient[i] = i;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// applying totient sieve</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">2</span>; i &lt;= num; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (eulerTotient[i] == i) {\r\n            <span class=\"hljs-keyword\">for</span> (j = i; j &lt;= num; j += i) {\r\n                eulerTotient[j] = eulerTotient[j] / i;\r\n                eulerTotient[j] = eulerTotient[j] * (i - <span class=\"hljs-number\">1</span>);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// computing sum of euler totients</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= num; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (j = i; j &lt;= num; j += i) {\r\n            sumOfEulerTotient[j] += eulerTotient[i] * i;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> ((sumOfEulerTotient[num] + <span class=\"hljs-number\">1</span>) * num) / <span class=\"hljs-number\">2</span>;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace math</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function for testing lcmSum function.\r\n * test cases and assert statement.\r\n * @returns `void`\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> n = <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> test_1 = math::<span class=\"hljs-built_in\">lcmSum</span>(n);\r\n    <span class=\"hljs-built_in\">assert</span>(test_1 == <span class=\"hljs-number\">4</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 1!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    n = <span class=\"hljs-number\">5</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> test_2 = math::<span class=\"hljs-built_in\">lcmSum</span>(n);\r\n    <span class=\"hljs-built_in\">assert</span>(test_2 == <span class=\"hljs-number\">55</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 2!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    n = <span class=\"hljs-number\">10</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> test_3 = math::<span class=\"hljs-built_in\">lcmSum</span>(n);\r\n    <span class=\"hljs-built_in\">assert</span>(test_3 == <span class=\"hljs-number\">320</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 3!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    n = <span class=\"hljs-number\">11</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> test_4 = math::<span class=\"hljs-built_in\">lcmSum</span>(n);\r\n    <span class=\"hljs-built_in\">assert</span>(test_4 == <span class=\"hljs-number\">616</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 4!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    n = <span class=\"hljs-number\">15</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> test_5 = math::<span class=\"hljs-built_in\">lcmSum</span>(n);\r\n    <span class=\"hljs-built_in\">assert</span>(test_5 == <span class=\"hljs-number\">1110</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 5!&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the tests</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}