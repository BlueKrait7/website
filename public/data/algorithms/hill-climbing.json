{
  "slug": "hill-climbing",
  "name": "Hill Climbing",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "searches\\hill_climbing.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/searches\\hill_climbing.py",
      "code": "<span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/Hill_climbing</span>\r\n<span class=\"hljs-keyword\">import</span> math\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SearchProblem</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    An interface to define search problems.\r\n    The interface will be illustrated using the example of mathematical function.\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span>, step_size: <span class=\"hljs-built_in\">int</span>, function_to_optimize</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        The constructor of the search problem.\r\n\r\n        x: the x coordinate of the current search state.\r\n        y: the y coordinate of the current search state.\r\n        step_size: size of the step to take when looking for neighbors.\r\n        function_to_optimize: a function to optimize having the signature f(x, y).\r\n        &quot;&quot;&quot;</span>\r\n        self.x = x\r\n        self.y = y\r\n        self.step_size = step_size\r\n        self.function = function_to_optimize\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">score</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Returns the output of the function called with current x and y coordinates.\r\n        &gt;&gt;&gt; def test_function(x, y):\r\n        ...     return x + y\r\n        &gt;&gt;&gt; SearchProblem(0, 0, 1, test_function).score()  # 0 + 0 = 0\r\n        0\r\n        &gt;&gt;&gt; SearchProblem(5, 7, 1, test_function).score()  # 5 + 7 = 12\r\n        12\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.function(self.x, self.y)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_neighbors</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Returns a list of coordinates of neighbors adjacent to the current coordinates.\r\n\r\n        Neighbors:\r\n        | 0 | 1 | 2 |\r\n        | 3 | _ | 4 |\r\n        | 5 | 6 | 7 |\r\n        &quot;&quot;&quot;</span>\r\n        step_size = self.step_size\r\n        <span class=\"hljs-keyword\">return</span> [\r\n            SearchProblem(x, y, step_size, self.function)\r\n            <span class=\"hljs-keyword\">for</span> x, y <span class=\"hljs-keyword\">in</span> (\r\n                (self.x - step_size, self.y - step_size),\r\n                (self.x - step_size, self.y),\r\n                (self.x - step_size, self.y + step_size),\r\n                (self.x, self.y - step_size),\r\n                (self.x, self.y + step_size),\r\n                (self.x + step_size, self.y - step_size),\r\n                (self.x + step_size, self.y),\r\n                (self.x + step_size, self.y + step_size),\r\n            )\r\n        ]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__hash__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        hash the string representation of the current search state.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">hash</span>(<span class=\"hljs-built_in\">str</span>(self))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__eq__</span>(<span class=\"hljs-params\">self, obj</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Check if the 2 objects are equal.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(obj, SearchProblem):\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">hash</span>(<span class=\"hljs-built_in\">str</span>(self)) == <span class=\"hljs-built_in\">hash</span>(<span class=\"hljs-built_in\">str</span>(obj))\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        string representation of the current search state.\r\n        &gt;&gt;&gt; str(SearchProblem(0, 0, 1, None))\r\n        &#x27;x: 0 y: 0&#x27;\r\n        &gt;&gt;&gt; str(SearchProblem(2, 5, 1, None))\r\n        &#x27;x: 2 y: 5&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;x: <span class=\"hljs-subst\">{self.x}</span> y: <span class=\"hljs-subst\">{self.y}</span>&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hill_climbing</span>(<span class=\"hljs-params\">\r\n    search_prob,\r\n    find_max: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">True</span>,\r\n    max_x: <span class=\"hljs-built_in\">float</span> = math.inf,\r\n    min_x: <span class=\"hljs-built_in\">float</span> = -math.inf,\r\n    max_y: <span class=\"hljs-built_in\">float</span> = math.inf,\r\n    min_y: <span class=\"hljs-built_in\">float</span> = -math.inf,\r\n    visualization: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span>,\r\n    max_iter: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">10000</span>,\r\n</span>) -&gt; SearchProblem:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Implementation of the hill climbling algorithm.\r\n    We start with a given state, find all its neighbors,\r\n    move towards the neighbor which provides the maximum (or minimum) change.\r\n    We keep doing this until we are at a state where we do not have any\r\n    neighbors which can improve the solution.\r\n        Args:\r\n            search_prob: The search state at the start.\r\n            find_max: If True, the algorithm should find the maximum else the minimum.\r\n            max_x, min_x, max_y, min_y: the maximum and minimum bounds of x and y.\r\n            visualization: If True, a matplotlib graph is displayed.\r\n            max_iter: number of times to run the iteration.\r\n        Returns a search state having the maximum (or minimum) score.\r\n    &quot;&quot;&quot;</span>\r\n    current_state = search_prob\r\n    scores = []  <span class=\"hljs-comment\"># list to store the current score at each iteration</span>\r\n    iterations = <span class=\"hljs-number\">0</span>\r\n    solution_found = <span class=\"hljs-literal\">False</span>\r\n    visited = <span class=\"hljs-built_in\">set</span>()\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> solution_found <span class=\"hljs-keyword\">and</span> iterations &lt; max_iter:\r\n        visited.add(current_state)\r\n        iterations += <span class=\"hljs-number\">1</span>\r\n        current_score = current_state.score()\r\n        scores.append(current_score)\r\n        neighbors = current_state.get_neighbors()\r\n        max_change = -math.inf\r\n        min_change = math.inf\r\n        next_state = <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># to hold the next best neighbor</span>\r\n        <span class=\"hljs-keyword\">for</span> neighbor <span class=\"hljs-keyword\">in</span> neighbors:\r\n            <span class=\"hljs-keyword\">if</span> neighbor <span class=\"hljs-keyword\">in</span> visited:\r\n                <span class=\"hljs-keyword\">continue</span>  <span class=\"hljs-comment\"># do not want to visit the same state again</span>\r\n            <span class=\"hljs-keyword\">if</span> (\r\n                neighbor.x &gt; max_x\r\n                <span class=\"hljs-keyword\">or</span> neighbor.x &lt; min_x\r\n                <span class=\"hljs-keyword\">or</span> neighbor.y &gt; max_y\r\n                <span class=\"hljs-keyword\">or</span> neighbor.y &lt; min_y\r\n            ):\r\n                <span class=\"hljs-keyword\">continue</span>  <span class=\"hljs-comment\"># neighbor outside our bounds</span>\r\n            change = neighbor.score() - current_score\r\n            <span class=\"hljs-keyword\">if</span> find_max:  <span class=\"hljs-comment\"># finding max</span>\r\n                <span class=\"hljs-comment\"># going to direction with greatest ascent</span>\r\n                <span class=\"hljs-keyword\">if</span> change &gt; max_change <span class=\"hljs-keyword\">and</span> change &gt; <span class=\"hljs-number\">0</span>:\r\n                    max_change = change\r\n                    next_state = neighbor\r\n            <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># finding min</span>\r\n                <span class=\"hljs-comment\"># to direction with greatest descent</span>\r\n                <span class=\"hljs-keyword\">if</span> change &lt; min_change <span class=\"hljs-keyword\">and</span> change &lt; <span class=\"hljs-number\">0</span>:\r\n                    min_change = change\r\n                    next_state = neighbor\r\n        <span class=\"hljs-keyword\">if</span> next_state <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-comment\"># we found at least one neighbor which improved the current state</span>\r\n            current_state = next_state\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-comment\"># since we have no neighbor that improves the solution we stop the search</span>\r\n            solution_found = <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> visualization:\r\n        <span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt\r\n\r\n        plt.plot(<span class=\"hljs-built_in\">range</span>(iterations), scores)\r\n        plt.xlabel(<span class=\"hljs-string\">&quot;Iterations&quot;</span>)\r\n        plt.ylabel(<span class=\"hljs-string\">&quot;Function values&quot;</span>)\r\n        plt.show()\r\n\r\n    <span class=\"hljs-keyword\">return</span> current_state\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_f1</span>(<span class=\"hljs-params\">x, y</span>):\r\n        <span class=\"hljs-keyword\">return</span> (x**<span class=\"hljs-number\">2</span>) + (y**<span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-comment\"># starting the problem with initial coordinates (3, 4)</span>\r\n    prob = SearchProblem(x=<span class=\"hljs-number\">3</span>, y=<span class=\"hljs-number\">4</span>, step_size=<span class=\"hljs-number\">1</span>, function_to_optimize=test_f1)\r\n    local_min = hill_climbing(prob, find_max=<span class=\"hljs-literal\">False</span>)\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;The minimum score for f(x, y) = x^2 + y^2 found via hill climbing: &quot;</span>\r\n        <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{local_min.score()}</span>&quot;</span>\r\n    )\r\n\r\n    <span class=\"hljs-comment\"># starting the problem with initial coordinates (12, 47)</span>\r\n    prob = SearchProblem(x=<span class=\"hljs-number\">12</span>, y=<span class=\"hljs-number\">47</span>, step_size=<span class=\"hljs-number\">1</span>, function_to_optimize=test_f1)\r\n    local_min = hill_climbing(\r\n        prob, find_max=<span class=\"hljs-literal\">False</span>, max_x=<span class=\"hljs-number\">100</span>, min_x=<span class=\"hljs-number\">5</span>, max_y=<span class=\"hljs-number\">50</span>, min_y=-<span class=\"hljs-number\">5</span>, visualization=<span class=\"hljs-literal\">True</span>\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;The minimum score for f(x, y) = x^2 + y^2 with the domain 100 &gt; x &gt; 5 &quot;</span>\r\n        <span class=\"hljs-string\">f&quot;and 50 &gt; y &gt; - 5 found via hill climbing: <span class=\"hljs-subst\">{local_min.score()}</span>&quot;</span>\r\n    )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_f2</span>(<span class=\"hljs-params\">x, y</span>):\r\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">3</span> * x**<span class=\"hljs-number\">2</span>) - (<span class=\"hljs-number\">6</span> * y)\r\n\r\n    prob = SearchProblem(x=<span class=\"hljs-number\">3</span>, y=<span class=\"hljs-number\">4</span>, step_size=<span class=\"hljs-number\">1</span>, function_to_optimize=test_f1)\r\n    local_min = hill_climbing(prob, find_max=<span class=\"hljs-literal\">True</span>)\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;The maximum score for f(x, y) = x^2 + y^2 found via hill climbing: &quot;</span>\r\n        <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{local_min.score()}</span>&quot;</span>\r\n    )\r\n"
    }
  },
  "contributors": [
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Faraz Ahmed Khan",
      "email": "31242842+fk03983@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}