{
  "slug": "a181391-van-ecks",
  "name": "A181391 Van Eck's",
  "categories": [
    "sequences"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Sequences/VanEcksSequence.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sequences\\VanEcksSequence.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Numerics;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sequences</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Van Eck&#x27;s sequence. For n &gt;= 1, if there exists an m &amp;lt; n such that a(m) = a(n), take the largest such m and set a(n+1) = n-m; otherwise a(n+1) = 0. Start with a(1)=0.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         OEIS: http://oeis.org/A181391.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VanEcksSequence</span> : <span class=\"hljs-title\">ISequence</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets Van Eck&#x27;s sequence.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> IEnumerable&lt;BigInteger&gt; Sequence\r\n        {\r\n            <span class=\"hljs-keyword\">get</span>\r\n            {\r\n                <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">var</span> dictionary = <span class=\"hljs-keyword\">new</span> Dictionary&lt;BigInteger, BigInteger&gt;();\r\n                BigInteger previous = <span class=\"hljs-number\">0</span>;\r\n                BigInteger currentIndex = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 1-based index</span>\r\n                <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)\r\n                {\r\n                    BigInteger element = <span class=\"hljs-number\">0</span>;\r\n                    <span class=\"hljs-keyword\">if</span> (dictionary.TryGetValue(previous, <span class=\"hljs-keyword\">out</span> <span class=\"hljs-keyword\">var</span> previousIndex))\r\n                    {\r\n                        element = currentIndex - previousIndex;\r\n                    }\r\n\r\n                    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> element;\r\n\r\n                    dictionary[previous] = currentIndex;\r\n                    previous = element;\r\n                    currentIndex++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}