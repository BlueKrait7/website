{
  "slug": "bstree",
  "name": "Bstree",
  "categories": [
    "structure",
    "binarysearchtree"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "structure\\binarysearchtree\\bstree.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure\\binarysearchtree\\bstree.go",
      "code": "<span class=\"hljs-keyword\">package</span> binarytree\r\n\r\n<span class=\"hljs-comment\">// BSTree Returns a binary search tree structure which contains only a root Node</span>\r\n<span class=\"hljs-keyword\">type</span> BSTree <span class=\"hljs-keyword\">struct</span> {\r\n\tRoot *Node\r\n}\r\n\r\n<span class=\"hljs-comment\">// calculateDepth helper function for BSTree&#x27;s depth()</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculateDepth</span><span class=\"hljs-params\">(n *Node, depth <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> depth\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> Max(calculateDepth(n.left, depth+<span class=\"hljs-number\">1</span>), calculateDepth(n.right, depth+<span class=\"hljs-number\">1</span>))\r\n}\r\n\r\n<span class=\"hljs-comment\">// Insert a value in the BSTree</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(root *Node, val <span class=\"hljs-type\">int</span>)</span></span> *Node {\r\n\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> NewNode(val)\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> val &lt; root.val {\r\n\t\troot.left = Insert(root.left, val)\r\n\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\troot.right = Insert(root.right, val)\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> root\r\n}\r\n\r\n<span class=\"hljs-comment\">// Depth returns the calculated depth of a binary saerch tree</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(t *BSTree)</span></span> Depth() <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">return</span> calculateDepth(t.Root, <span class=\"hljs-number\">0</span>)\r\n}\r\n\r\n<span class=\"hljs-comment\">// InOrderSuccessor Goes to the left</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">InOrderSuccessor</span><span class=\"hljs-params\">(root *Node)</span></span> *Node {\r\n\tcur := root\r\n\t<span class=\"hljs-keyword\">for</span> cur.left != <span class=\"hljs-literal\">nil</span> {\r\n\t\tcur = cur.left\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> cur\r\n}\r\n\r\n<span class=\"hljs-comment\">// BstDelete removes the node</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BstDelete</span><span class=\"hljs-params\">(root *Node, val <span class=\"hljs-type\">int</span>)</span></span> *Node {\r\n\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> val &lt; root.val {\r\n\t\troot.left = BstDelete(root.left, val)\r\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> val &gt; root.val {\r\n\t\troot.right = BstDelete(root.right, val)\r\n\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t<span class=\"hljs-comment\">// this is the node to delete</span>\r\n\t\t<span class=\"hljs-comment\">// node with one child</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> root.left == <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> root.right\r\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> root.right == <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> root.left\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\tn := root.right\r\n\t\t\td := InOrderSuccessor(n)\r\n\t\t\td.left = root.left\r\n\t\t\t<span class=\"hljs-keyword\">return</span> root.right\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> root\r\n}\r\n\r\n<span class=\"hljs-comment\">// InOrder add&#x27;s children to a node in order left first then right recursively</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">inOrderRecursive</span><span class=\"hljs-params\">(n *Node, traversal *[]<span class=\"hljs-type\">int</span>)</span></span> {\r\n\t<span class=\"hljs-keyword\">if</span> n != <span class=\"hljs-literal\">nil</span> {\r\n\t\tinOrderRecursive(n.left, traversal)\r\n\t\t*traversal = <span class=\"hljs-built_in\">append</span>(*traversal, n.val)\r\n\t\tinOrderRecursive(n.right, traversal)\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">// Travers the tree in the following order left --&gt; root --&gt; right</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">InOrder</span><span class=\"hljs-params\">(root *Node)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\ttraversal := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">0</span>)\r\n\tinOrderRecursive(root, &amp;traversal)\r\n\t<span class=\"hljs-keyword\">return</span> traversal\r\n}\r\n\r\n<span class=\"hljs-comment\">// PreOrder Preorder</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">preOrderRecursive</span><span class=\"hljs-params\">(n *Node, traversal *[]<span class=\"hljs-type\">int</span>)</span></span> {\r\n\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t}\r\n\t*traversal = <span class=\"hljs-built_in\">append</span>(*traversal, n.val)\r\n\tpreOrderRecursive(n.left, traversal)\r\n\tpreOrderRecursive(n.right, traversal)\r\n}\r\n\r\n<span class=\"hljs-comment\">// Travers the tree in the following order root --&gt; left --&gt; right</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PreOrder</span><span class=\"hljs-params\">(root *Node)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\ttraversal := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">0</span>)\r\n\tpreOrderRecursive(root, &amp;traversal)\r\n\t<span class=\"hljs-keyword\">return</span> traversal\r\n}\r\n\r\n<span class=\"hljs-comment\">// PostOrder PostOrder</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">postOrderRecursive</span><span class=\"hljs-params\">(n *Node, traversal *[]<span class=\"hljs-type\">int</span>)</span></span> {\r\n\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t}\r\n\tpostOrderRecursive(n.left, traversal)\r\n\tpostOrderRecursive(n.right, traversal)\r\n\t*traversal = <span class=\"hljs-built_in\">append</span>(*traversal, n.val)\r\n}\r\n\r\n<span class=\"hljs-comment\">// Travers the tree in the following order left --&gt; right --&gt; root</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PostOrder</span><span class=\"hljs-params\">(root *Node)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\ttraversal := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">0</span>)\r\n\tpostOrderRecursive(root, &amp;traversal)\r\n\t<span class=\"hljs-keyword\">return</span> traversal\r\n}\r\n\r\n<span class=\"hljs-comment\">// LevelOrder LevelOrder</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">levelOrderRecursive</span><span class=\"hljs-params\">(root *Node, traversal *[]<span class=\"hljs-type\">int</span>)</span></span> {\r\n\t<span class=\"hljs-keyword\">var</span> q []*Node <span class=\"hljs-comment\">// queue</span>\r\n\t<span class=\"hljs-keyword\">var</span> n *Node   <span class=\"hljs-comment\">// temporary node</span>\r\n\r\n\tq = <span class=\"hljs-built_in\">append</span>(q, root)\r\n\r\n\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(q) != <span class=\"hljs-number\">0</span> {\r\n\t\tn, q = q[<span class=\"hljs-number\">0</span>], q[<span class=\"hljs-number\">1</span>:]\r\n\t\t*traversal = <span class=\"hljs-built_in\">append</span>(*traversal, n.val)\r\n\t\t<span class=\"hljs-keyword\">if</span> n.left != <span class=\"hljs-literal\">nil</span> {\r\n\t\t\tq = <span class=\"hljs-built_in\">append</span>(q, n.left)\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">if</span> n.right != <span class=\"hljs-literal\">nil</span> {\r\n\t\t\tq = <span class=\"hljs-built_in\">append</span>(q, n.right)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LevelOrder</span><span class=\"hljs-params\">(root *Node)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\ttraversal := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">0</span>)\r\n\tlevelOrderRecursive(root, &amp;traversal)\r\n\t<span class=\"hljs-keyword\">return</span> traversal\r\n}\r\n\r\n<span class=\"hljs-comment\">// AccessNodesByLayer Function that access nodes layer by layer instead of printing the results as one line.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">AccessNodesByLayer</span><span class=\"hljs-params\">(root *Node)</span></span> [][]<span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">var</span> res [][]<span class=\"hljs-type\">int</span>\r\n\t<span class=\"hljs-keyword\">if</span> root == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> res\r\n\t}\r\n\t<span class=\"hljs-keyword\">var</span> q []*Node\r\n\t<span class=\"hljs-keyword\">var</span> n *Node\r\n\t<span class=\"hljs-keyword\">var</span> idx = <span class=\"hljs-number\">0</span>\r\n\tq = <span class=\"hljs-built_in\">append</span>(q, root)\r\n\r\n\t<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">len</span>(q) != <span class=\"hljs-number\">0</span> {\r\n\t\tres = <span class=\"hljs-built_in\">append</span>(res, []<span class=\"hljs-type\">int</span>{})\r\n\t\tqLen := <span class=\"hljs-built_in\">len</span>(q)\r\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; qLen; i++ {\r\n\t\t\tn, q = q[<span class=\"hljs-number\">0</span>], q[<span class=\"hljs-number\">1</span>:]\r\n\t\t\tres[idx] = <span class=\"hljs-built_in\">append</span>(res[idx], n.val)\r\n\t\t\t<span class=\"hljs-keyword\">if</span> n.left != <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t\tq = <span class=\"hljs-built_in\">append</span>(q, n.left)\r\n\t\t\t}\r\n\t\t\t<span class=\"hljs-keyword\">if</span> n.right != <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t\tq = <span class=\"hljs-built_in\">append</span>(q, n.right)\r\n\t\t\t}\r\n\t\t}\r\n\t\tidx++\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> res\r\n}\r\n\r\n<span class=\"hljs-comment\">// Max Function that returns max of two numbers - possibly already declared.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">if</span> a &gt; b {\r\n\t\t<span class=\"hljs-keyword\">return</span> a\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> b\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}