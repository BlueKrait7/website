{
  "slug": "check-bipartite-graph-dfs",
  "name": "Check Bipartite Graph Dfs",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\check_bipartite_graph_dfs.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\check_bipartite_graph_dfs.py",
      "code": "<span class=\"hljs-comment\"># Check whether Graph is Bipartite or Not using DFS</span>\r\n\r\n\r\n<span class=\"hljs-comment\"># A Bipartite Graph is a graph whose vertices can be divided into two independent sets,</span>\r\n<span class=\"hljs-comment\"># U and V such that every edge (u, v) either connects a vertex from U to V or a vertex</span>\r\n<span class=\"hljs-comment\"># from V to U. In other words, for every edge (u, v), either u belongs to U and v to V,</span>\r\n<span class=\"hljs-comment\"># or u belongs to V and v to U. We can also say that there is no edge that connects</span>\r\n<span class=\"hljs-comment\"># vertices of same set.</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_bipartite_dfs</span>(<span class=\"hljs-params\">graph</span>):\r\n    visited = [<span class=\"hljs-literal\">False</span>] * <span class=\"hljs-built_in\">len</span>(graph)\r\n    color = [-<span class=\"hljs-number\">1</span>] * <span class=\"hljs-built_in\">len</span>(graph)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">v, c</span>):\r\n        visited[v] = <span class=\"hljs-literal\">True</span>\r\n        color[v] = c\r\n        <span class=\"hljs-keyword\">for</span> u <span class=\"hljs-keyword\">in</span> graph[v]:\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[u]:\r\n                dfs(u, <span class=\"hljs-number\">1</span> - c)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(graph)):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\r\n            dfs(i, <span class=\"hljs-number\">0</span>)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(graph)):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> graph[i]:\r\n            <span class=\"hljs-keyword\">if</span> color[i] == color[j]:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-comment\"># Adjacency list of graph</span>\r\ngraph = {<span class=\"hljs-number\">0</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">4</span>: []}\r\n<span class=\"hljs-built_in\">print</span>(check_bipartite_dfs(graph))\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erfan Alimohammadi",
      "email": "erfan.aa@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}