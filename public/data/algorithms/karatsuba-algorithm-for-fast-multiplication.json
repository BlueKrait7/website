{
  "slug": "karatsuba-algorithm-for-fast-multiplication",
  "name": "Karatsuba Algorithm for Fast Multiplication",
  "categories": [
    "divideandconquer"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "divide_and_conquer\\karatsuba_algorithm_for_fast_multiplication.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/divide_and_conquer\\karatsuba_algorithm_for_fast_multiplication.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of the [Karatsuba algorithm for fast\r\n * multiplication](https://en.wikipedia.org/wiki/Karatsuba_algorithm)\r\n * @details\r\n * Given two strings in binary notation we want to multiply them and return the\r\n * value Simple approach is to multiply bits one by one which will give the time\r\n * complexity of around O(n^2). To make it more efficient we will be using\r\n * Karatsuba&#x27; algorithm to find the product which will solve the problem\r\n * O(nlogn) of time.\r\n * @author [Swastika Gupta](https://github.com/Swastyy)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span>   <span class=\"hljs-comment\">/// for string</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace divide_and_conquer\r\n * @brief Divide and Conquer algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> divide_and_conquer {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace karatsuba_algorithm\r\n * @brief Functions for the [Karatsuba algorithm for fast\r\n * multiplication](https://en.wikipedia.org/wiki/Karatsuba_algorithm)\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> karatsuba_algorithm {\r\n<span class=\"hljs-comment\">/**\r\n * @brief Helper function for the main function, that implements Karatsuba&#x27;s\r\n * algorithm for fast multiplication\r\n * @param first the input string 1\r\n * @param second the input string 2\r\n * @returns the concatenated string\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">addStrings</span><span class=\"hljs-params\">(std::string first, std::string second)</span> </span>{\r\n    std::string result;  <span class=\"hljs-comment\">// To store the resulting sum bits</span>\r\n\r\n    <span class=\"hljs-type\">int64_t</span> len1 = first.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-type\">int64_t</span> len2 = second.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-type\">int64_t</span> length = std::<span class=\"hljs-built_in\">max</span>(len1, len2);\r\n    std::string zero = <span class=\"hljs-string\">&quot;0&quot;</span>;\r\n    <span class=\"hljs-keyword\">if</span> (len1 &lt; len2)  <span class=\"hljs-comment\">// make the string lengths equal</span>\r\n    {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; len2 - len1; i++) {\r\n            zero += first;\r\n            first = zero;\r\n        }\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (len1 &gt; len2) {\r\n        zero = <span class=\"hljs-string\">&quot;0&quot;</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; len1 - len2; i++) {\r\n            zero += second;\r\n            second = zero;\r\n        }\r\n    }\r\n    <span class=\"hljs-type\">int64_t</span> carry = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n        <span class=\"hljs-type\">int64_t</span> firstBit = first.<span class=\"hljs-built_in\">at</span>(i) - <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n        <span class=\"hljs-type\">int64_t</span> secondBit = second.<span class=\"hljs-built_in\">at</span>(i) - <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n\r\n        <span class=\"hljs-type\">int64_t</span> sum = (firstBit ^ secondBit ^ carry) + <span class=\"hljs-string\">&#x27;0&#x27;</span>;  <span class=\"hljs-comment\">// sum of 3 bits</span>\r\n        std::string temp;\r\n        temp = std::<span class=\"hljs-built_in\">to_string</span>(sum);\r\n        temp += result;\r\n        result = temp;\r\n\r\n        carry = (firstBit &amp; secondBit) | (secondBit &amp; carry) |\r\n                (firstBit &amp; carry);  <span class=\"hljs-comment\">// sum of 3 bits</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> (carry) {\r\n        result = <span class=\"hljs-string\">&#x27;1&#x27;</span> + result;  <span class=\"hljs-comment\">// adding 1 incase of overflow</span>\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief The main function implements Karatsuba&#x27;s algorithm for fast\r\n * multiplication\r\n * @param str1 the input string 1\r\n * @param str2 the input string 2\r\n * @returns the multiplicative number value\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title\">karatsuba_algorithm</span><span class=\"hljs-params\">(std::string str1, std::string str2)</span> </span>{\r\n    <span class=\"hljs-type\">int64_t</span> len1 = str1.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-type\">int64_t</span> len2 = str2.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-type\">int64_t</span> n = std::<span class=\"hljs-built_in\">max</span>(len1, len2);\r\n    std::string zero = <span class=\"hljs-string\">&quot;0&quot;</span>;\r\n    <span class=\"hljs-keyword\">if</span> (len1 &lt; len2) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; len2 - len1; i++) {\r\n            zero += str1;\r\n            str1 = zero;\r\n        }\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (len1 &gt; len2) {\r\n        zero = <span class=\"hljs-string\">&quot;0&quot;</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; len1 - len2; i++) {\r\n            zero += str2;\r\n            str2 = zero;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-keyword\">return</span> (str1[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-string\">&#x27;0&#x27;</span>) * (str2[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-string\">&#x27;0&#x27;</span>);\r\n    }\r\n    <span class=\"hljs-type\">int64_t</span> fh = n / <span class=\"hljs-number\">2</span>;     <span class=\"hljs-comment\">// first half of string</span>\r\n    <span class=\"hljs-type\">int64_t</span> sh = (n - fh);  <span class=\"hljs-comment\">// second half of string</span>\r\n\r\n    std::string Xl = str1.<span class=\"hljs-built_in\">substr</span>(<span class=\"hljs-number\">0</span>, fh);   <span class=\"hljs-comment\">// first half of first string</span>\r\n    std::string Xr = str1.<span class=\"hljs-built_in\">substr</span>(fh, sh);  <span class=\"hljs-comment\">// second half of first string</span>\r\n\r\n    std::string Yl = str2.<span class=\"hljs-built_in\">substr</span>(<span class=\"hljs-number\">0</span>, fh);   <span class=\"hljs-comment\">// first half of second string</span>\r\n    std::string Yr = str2.<span class=\"hljs-built_in\">substr</span>(fh, sh);  <span class=\"hljs-comment\">// second half of second string</span>\r\n\r\n    <span class=\"hljs-comment\">// Calculating the three products of inputs of size n/2 recursively</span>\r\n    <span class=\"hljs-type\">int64_t</span> product1 = <span class=\"hljs-built_in\">karatsuba_algorithm</span>(Xl, Yl);\r\n    <span class=\"hljs-type\">int64_t</span> product2 = <span class=\"hljs-built_in\">karatsuba_algorithm</span>(Xr, Yr);\r\n    <span class=\"hljs-type\">int64_t</span> product3 = <span class=\"hljs-built_in\">karatsuba_algorithm</span>(\r\n        divide_and_conquer::karatsuba_algorithm::<span class=\"hljs-built_in\">addStrings</span>(Xl, Xr),\r\n        divide_and_conquer::karatsuba_algorithm::<span class=\"hljs-built_in\">addStrings</span>(Yl, Yr));\r\n\r\n    <span class=\"hljs-keyword\">return</span> product1 * (<span class=\"hljs-number\">1</span> &lt;&lt; (<span class=\"hljs-number\">2</span> * sh)) +\r\n           (product3 - product1 - product2) * (<span class=\"hljs-number\">1</span> &lt;&lt; sh) +\r\n           product2;  <span class=\"hljs-comment\">// combining the three products to get the final result.</span>\r\n}\r\n}  <span class=\"hljs-comment\">// namespace karatsuba_algorithm</span>\r\n}  <span class=\"hljs-comment\">// namespace divide_and_conquer</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// 1st test</span>\r\n    std::string s11 = <span class=\"hljs-string\">&quot;1&quot;</span>;\r\n    std::string s12 = <span class=\"hljs-string\">&quot;1010&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test... &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(divide_and_conquer::karatsuba_algorithm::<span class=\"hljs-built_in\">karatsuba_algorithm</span>(\r\n               s11, s12) == <span class=\"hljs-number\">10</span>);  <span class=\"hljs-comment\">// here the multiplication is 10</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 2nd test</span>\r\n    std::string s21 = <span class=\"hljs-string\">&quot;11&quot;</span>;\r\n    std::string s22 = <span class=\"hljs-string\">&quot;1010&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test... &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(divide_and_conquer::karatsuba_algorithm::<span class=\"hljs-built_in\">karatsuba_algorithm</span>(\r\n               s21, s22) == <span class=\"hljs-number\">30</span>);  <span class=\"hljs-comment\">// here the multiplication is 30</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 3rd test</span>\r\n    std::string s31 = <span class=\"hljs-string\">&quot;110&quot;</span>;\r\n    std::string s32 = <span class=\"hljs-string\">&quot;1010&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test... &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(divide_and_conquer::karatsuba_algorithm::<span class=\"hljs-built_in\">karatsuba_algorithm</span>(\r\n               s31, s32) == <span class=\"hljs-number\">60</span>);  <span class=\"hljs-comment\">// here the multiplication is 60</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}