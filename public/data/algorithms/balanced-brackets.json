{
  "slug": "balanced-brackets",
  "name": "Balanced Brackets",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\stacks\\BalancedBrackets.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\stacks\\BalancedBrackets.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.stacks;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * The nested brackets problem is a problem that determines if a sequence of\r\n * brackets are properly nested. A sequence of brackets s is considered properly\r\n * nested if any of the following conditions are true: - s is empty - s has the\r\n * form (U) or [U] or {U} where U is a properly nested string - s has the form\r\n * VW where V and W are properly nested strings For example, the string\r\n * &quot;()()[()]&quot; is properly nested but &quot;[(()]&quot; is not. The function called\r\n * is_balanced takes as input a string S which is a sequence of brackets and\r\n * returns true if S is nested and false otherwise.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> akshay sharma\r\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=&quot;https://github.com/khalil2535&quot;&gt;khalil2535&lt;a&gt;\r\n * <span class=\"hljs-doctag\">@author</span> shellhub\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BalancedBrackets</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Check if {<span class=\"hljs-doctag\">@code</span> leftBracket} and {<span class=\"hljs-doctag\">@code</span> rightBracket} is paired or not\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> leftBracket left bracket\r\n     * <span class=\"hljs-doctag\">@param</span> rightBracket right bracket\r\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if {<span class=\"hljs-doctag\">@code</span> leftBracket} and {<span class=\"hljs-doctag\">@code</span> rightBracket} is\r\n     * paired, otherwise {<span class=\"hljs-doctag\">@code</span> false}\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPaired</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> leftBracket, <span class=\"hljs-type\">char</span> rightBracket)</span> {\r\n        <span class=\"hljs-type\">char</span>[][] pairedBrackets = {\r\n            {<span class=\"hljs-string\">&#x27;(&#x27;</span>, <span class=\"hljs-string\">&#x27;)&#x27;</span>},\r\n            {<span class=\"hljs-string\">&#x27;[&#x27;</span>, <span class=\"hljs-string\">&#x27;]&#x27;</span>},\r\n            {<span class=\"hljs-string\">&#x27;{&#x27;</span>, <span class=\"hljs-string\">&#x27;}&#x27;</span>},\r\n            {<span class=\"hljs-string\">&#x27;&lt;&#x27;</span>, <span class=\"hljs-string\">&#x27;&gt;&#x27;</span>}\r\n        };\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span>[] pairedBracket : pairedBrackets) {\r\n            <span class=\"hljs-keyword\">if</span> (pairedBracket[<span class=\"hljs-number\">0</span>] == leftBracket &amp;&amp; pairedBracket[<span class=\"hljs-number\">1</span>] == rightBracket) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Check if {<span class=\"hljs-doctag\">@code</span> brackets} is balanced\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> brackets the brackets\r\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if {<span class=\"hljs-doctag\">@code</span> brackets} is balanced, otherwise\r\n     * {<span class=\"hljs-doctag\">@code</span> false}\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isBalanced</span><span class=\"hljs-params\">(String brackets)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (brackets == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;brackets is null&quot;</span>);\r\n        }\r\n        Stack&lt;Character&gt; bracketsStack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> bracket : brackets.toCharArray()) {\r\n            <span class=\"hljs-keyword\">switch</span> (bracket) {\r\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;(&#x27;</span>:\r\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;[&#x27;</span>:\r\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;{&#x27;</span>:\r\n                    bracketsStack.push(bracket);\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;)&#x27;</span>:\r\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;]&#x27;</span>:\r\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;}&#x27;</span>:\r\n                    <span class=\"hljs-keyword\">if</span> (bracketsStack.isEmpty() || !isPaired(bracketsStack.pop(), bracket)) {\r\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                    }\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                <span class=\"hljs-keyword\">default</span>:\r\n                    <span class=\"hljs-comment\">/* other character is invalid */</span>\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> bracketsStack.isEmpty();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isBalanced</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;[()]{}{[()()]()}&quot;</span>)</span>;\r\n        <span class=\"hljs-keyword\">assert</span> !isBalanced(<span class=\"hljs-string\">&quot;[(])&quot;</span>);\r\n    }\r\n}\r\n"
    },
    "dart": {
      "dir": "data_structures\\Stack\\balanced_brackets.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures\\Stack\\balanced_brackets.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:stack/stack.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-built_in\">bool</span> isBalancedBrackets(<span class=\"hljs-built_in\">String</span> string) {\r\n  Stack&lt;<span class=\"hljs-built_in\">String</span>&gt; stack = Stack();\r\n\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; openingBrackets = [<span class=\"hljs-string\">&#x27;(&#x27;</span>, <span class=\"hljs-string\">&#x27;{&#x27;</span>, <span class=\"hljs-string\">&#x27;[&#x27;</span>];\r\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">String</span>&gt; matchingBracket = {<span class=\"hljs-string\">&#x27;}&#x27;</span>: <span class=\"hljs-string\">&#x27;{&#x27;</span>, <span class=\"hljs-string\">&#x27;)&#x27;</span>: <span class=\"hljs-string\">&#x27;(&#x27;</span>, <span class=\"hljs-string\">&#x27;]&#x27;</span>: <span class=\"hljs-string\">&#x27;[&#x27;</span>};\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; string.length; i++) {\r\n    <span class=\"hljs-keyword\">var</span> currentChar = string[i];\r\n\r\n    <span class=\"hljs-keyword\">if</span> (openingBrackets.contains(currentChar)) {\r\n      stack.push(currentChar);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-keyword\">if</span> (stack.isNotEmpty) {\r\n        <span class=\"hljs-keyword\">if</span> (stack.top() == matchingBracket[currentChar]) {\r\n          stack.pop();\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\r\n        }\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\r\n      }\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> stack.isEmpty;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\r\n    expect(isBalancedBrackets(<span class=\"hljs-string\">&#x27;([])(){}(())()()&#x27;</span>), isTrue);\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\r\n    expect(isBalancedBrackets(<span class=\"hljs-string\">&#x27;()[]{}{&#x27;</span>), isFalse);\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\r\n    expect(isBalancedBrackets(<span class=\"hljs-string\">&#x27;()()[{()})]&#x27;</span>), isFalse);\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\r\n    expect(isBalancedBrackets(<span class=\"hljs-string\">&#x27;()([])&#x27;</span>), isTrue);\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\r\n    expect(\r\n        isBalancedBrackets(\r\n            <span class=\"hljs-string\">&#x27;(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())&#x27;</span>),\r\n        isTrue);\r\n  });\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 3
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}