{
  "slug": "a-1z-26-cipher",
  "name": "A 1z 26 Cipher",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "ciphers\\a1z26_cipher.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers\\a1z26_cipher.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of the [A1Z26\r\n * cipher](https://www.dcode.fr/letter-number-cipher)\r\n * @details The A1Z26 cipher is a simple substiution cipher where each letter is\r\n * replaced by the number of the order they&#x27;re in. For example, A corresponds to\r\n * 1, B = 2, C = 3, etc.\r\n *\r\n * @author [Focusucof](https://github.com/Focusucof)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::transform and std::replace</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span>    <span class=\"hljs-comment\">/// for uint8_t</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;map&gt;</span>        <span class=\"hljs-comment\">/// for std::map</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sstream&gt;</span>    <span class=\"hljs-comment\">/// for std::stringstream</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>     <span class=\"hljs-comment\">/// for std::string</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace ciphers\r\n * @brief Algorithms for encryption and decryption\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> ciphers {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace a1z26\r\n * @brief Functions for [A1Z26](https://www.dcode.fr/letter-number-cipher)\r\n * encryption and decryption implementation\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> a1z26 {\r\n\r\nstd::map&lt;<span class=\"hljs-type\">uint8_t</span>, <span class=\"hljs-type\">char</span>&gt; a1z26_decrypt_map = {\r\n    {<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>},  {<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>},  {<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>},  {<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>},  {<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>},  {<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>},  {<span class=\"hljs-number\">7</span>, <span class=\"hljs-string\">&#x27;g&#x27;</span>},\r\n    {<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&#x27;h&#x27;</span>},  {<span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>},  {<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&#x27;j&#x27;</span>}, {<span class=\"hljs-number\">11</span>, <span class=\"hljs-string\">&#x27;k&#x27;</span>}, {<span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">&#x27;l&#x27;</span>}, {<span class=\"hljs-number\">13</span>, <span class=\"hljs-string\">&#x27;m&#x27;</span>}, {<span class=\"hljs-number\">14</span>, <span class=\"hljs-string\">&#x27;n&#x27;</span>},\r\n    {<span class=\"hljs-number\">15</span>, <span class=\"hljs-string\">&#x27;o&#x27;</span>}, {<span class=\"hljs-number\">16</span>, <span class=\"hljs-string\">&#x27;p&#x27;</span>}, {<span class=\"hljs-number\">17</span>, <span class=\"hljs-string\">&#x27;q&#x27;</span>}, {<span class=\"hljs-number\">18</span>, <span class=\"hljs-string\">&#x27;r&#x27;</span>}, {<span class=\"hljs-number\">19</span>, <span class=\"hljs-string\">&#x27;s&#x27;</span>}, {<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">&#x27;t&#x27;</span>}, {<span class=\"hljs-number\">21</span>, <span class=\"hljs-string\">&#x27;u&#x27;</span>},\r\n    {<span class=\"hljs-number\">22</span>, <span class=\"hljs-string\">&#x27;v&#x27;</span>}, {<span class=\"hljs-number\">23</span>, <span class=\"hljs-string\">&#x27;w&#x27;</span>}, {<span class=\"hljs-number\">24</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>}, {<span class=\"hljs-number\">25</span>, <span class=\"hljs-string\">&#x27;y&#x27;</span>}, {<span class=\"hljs-number\">26</span>, <span class=\"hljs-string\">&#x27;z&#x27;</span>},\r\n};\r\n\r\nstd::map&lt;<span class=\"hljs-type\">char</span>, <span class=\"hljs-type\">uint8_t</span>&gt; a1z26_encrypt_map = {\r\n    {<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>},  {<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">2</span>},  {<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">3</span>},  {<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-number\">4</span>},  {<span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-number\">5</span>},  {<span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-number\">6</span>},  {<span class=\"hljs-string\">&#x27;g&#x27;</span>, <span class=\"hljs-number\">7</span>},\r\n    {<span class=\"hljs-string\">&#x27;h&#x27;</span>, <span class=\"hljs-number\">8</span>},  {<span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-number\">9</span>},  {<span class=\"hljs-string\">&#x27;j&#x27;</span>, <span class=\"hljs-number\">10</span>}, {<span class=\"hljs-string\">&#x27;k&#x27;</span>, <span class=\"hljs-number\">11</span>}, {<span class=\"hljs-string\">&#x27;l&#x27;</span>, <span class=\"hljs-number\">12</span>}, {<span class=\"hljs-string\">&#x27;m&#x27;</span>, <span class=\"hljs-number\">13</span>}, {<span class=\"hljs-string\">&#x27;n&#x27;</span>, <span class=\"hljs-number\">14</span>},\r\n    {<span class=\"hljs-string\">&#x27;o&#x27;</span>, <span class=\"hljs-number\">15</span>}, {<span class=\"hljs-string\">&#x27;p&#x27;</span>, <span class=\"hljs-number\">16</span>}, {<span class=\"hljs-string\">&#x27;q&#x27;</span>, <span class=\"hljs-number\">17</span>}, {<span class=\"hljs-string\">&#x27;r&#x27;</span>, <span class=\"hljs-number\">18</span>}, {<span class=\"hljs-string\">&#x27;s&#x27;</span>, <span class=\"hljs-number\">19</span>}, {<span class=\"hljs-string\">&#x27;t&#x27;</span>, <span class=\"hljs-number\">20</span>}, {<span class=\"hljs-string\">&#x27;u&#x27;</span>, <span class=\"hljs-number\">21</span>},\r\n    {<span class=\"hljs-string\">&#x27;v&#x27;</span>, <span class=\"hljs-number\">22</span>}, {<span class=\"hljs-string\">&#x27;w&#x27;</span>, <span class=\"hljs-number\">23</span>}, {<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-number\">24</span>}, {<span class=\"hljs-string\">&#x27;y&#x27;</span>, <span class=\"hljs-number\">25</span>}, {<span class=\"hljs-string\">&#x27;z&#x27;</span>, <span class=\"hljs-number\">26</span>}};\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief a1z26 encryption implementation\r\n * @param text is the plaintext input\r\n * @returns encoded string with dashes to seperate letters\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">encrypt</span><span class=\"hljs-params\">(std::string text)</span> </span>{\r\n    std::string result;\r\n    std::<span class=\"hljs-built_in\">transform</span>(text.<span class=\"hljs-built_in\">begin</span>(), text.<span class=\"hljs-built_in\">end</span>(), text.<span class=\"hljs-built_in\">begin</span>(),\r\n                   ::tolower);  <span class=\"hljs-comment\">// convert string to lowercase</span>\r\n    std::<span class=\"hljs-built_in\">replace</span>(text.<span class=\"hljs-built_in\">begin</span>(), text.<span class=\"hljs-built_in\">end</span>(), <span class=\"hljs-string\">&#x27;:&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> letter : text) {\r\n        <span class=\"hljs-keyword\">if</span> (letter != <span class=\"hljs-string\">&#x27; &#x27;</span>) {\r\n            result += std::<span class=\"hljs-built_in\">to_string</span>(\r\n                a1z26_encrypt_map[letter]);  <span class=\"hljs-comment\">// convert int to string and append</span>\r\n                                             <span class=\"hljs-comment\">// to result</span>\r\n            result += <span class=\"hljs-string\">&quot;-&quot;</span>;  <span class=\"hljs-comment\">// space out each set of numbers with spaces</span>\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            result.<span class=\"hljs-built_in\">pop_back</span>();\r\n            result += <span class=\"hljs-string\">&#x27; &#x27;</span>;\r\n        }\r\n    }\r\n    result.<span class=\"hljs-built_in\">pop_back</span>();  <span class=\"hljs-comment\">// remove leading dash</span>\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief a1z26 decryption implementation\r\n * @param text is the encrypted text input\r\n * @param bReturnUppercase is if the decoded string should be in uppercase or\r\n * not\r\n * @returns the decrypted string in all uppercase or all lowercase\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">decrypt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string&amp; text, <span class=\"hljs-type\">bool</span> bReturnUppercase = <span class=\"hljs-literal\">false</span>)</span> </span>{\r\n    std::string result;\r\n\r\n    <span class=\"hljs-comment\">// split words seperated by spaces into a vector array</span>\r\n    std::vector&lt;std::string&gt; word_array;\r\n    <span class=\"hljs-function\">std::stringstream <span class=\"hljs-title\">sstream</span><span class=\"hljs-params\">(text)</span></span>;\r\n    std::string word;\r\n    <span class=\"hljs-keyword\">while</span> (sstream &gt;&gt; word) {\r\n        word_array.<span class=\"hljs-built_in\">push_back</span>(word);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span>&amp; i : word_array) {\r\n        std::<span class=\"hljs-built_in\">replace</span>(i.<span class=\"hljs-built_in\">begin</span>(), i.<span class=\"hljs-built_in\">end</span>(), <span class=\"hljs-string\">&#x27;-&#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>);\r\n        std::vector&lt;std::string&gt; text_array;\r\n\r\n        <span class=\"hljs-function\">std::stringstream <span class=\"hljs-title\">ss</span><span class=\"hljs-params\">(i)</span></span>;\r\n        std::string res_text;\r\n        <span class=\"hljs-keyword\">while</span> (ss &gt;&gt; res_text) {\r\n            text_array.<span class=\"hljs-built_in\">push_back</span>(res_text);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span>&amp; i : text_array) {\r\n            result += a1z26_decrypt_map[<span class=\"hljs-built_in\">stoi</span>(i)];\r\n        }\r\n\r\n        result += <span class=\"hljs-string\">&#x27; &#x27;</span>;\r\n    }\r\n    result.<span class=\"hljs-built_in\">pop_back</span>();  <span class=\"hljs-comment\">// remove any leading whitespace</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (bReturnUppercase) {\r\n        std::<span class=\"hljs-built_in\">transform</span>(result.<span class=\"hljs-built_in\">begin</span>(), result.<span class=\"hljs-built_in\">end</span>(), result.<span class=\"hljs-built_in\">begin</span>(), ::toupper);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace a1z26</span>\r\n}  <span class=\"hljs-comment\">// namespace ciphers</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// 1st test</span>\r\n    std::string input = <span class=\"hljs-string\">&quot;Hello World&quot;</span>;\r\n    std::string expected = <span class=\"hljs-string\">&quot;8-5-12-12-15 23-15-18-12-4&quot;</span>;\r\n    std::string output = ciphers::a1z26::<span class=\"hljs-built_in\">encrypt</span>(input);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input: &quot;</span> &lt;&lt; input &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected: &quot;</span> &lt;&lt; expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; output &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(output == expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">// 2nd test</span>\r\n    input = <span class=\"hljs-string\">&quot;12-15-23-5-18-3-1-19-5&quot;</span>;\r\n    expected = <span class=\"hljs-string\">&quot;lowercase&quot;</span>;\r\n    output = ciphers::a1z26::<span class=\"hljs-built_in\">decrypt</span>(input);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input: &quot;</span> &lt;&lt; input &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected: &quot;</span> &lt;&lt; expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; output &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(output == expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">// 3rd test</span>\r\n    input = <span class=\"hljs-string\">&quot;21-16-16-5-18-3-1-19-5&quot;</span>;\r\n    expected = <span class=\"hljs-string\">&quot;UPPERCASE&quot;</span>;\r\n    output = ciphers::a1z26::<span class=\"hljs-built_in\">decrypt</span>(input, <span class=\"hljs-literal\">true</span>);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input: &quot;</span> &lt;&lt; input &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected: &quot;</span> &lt;&lt; expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; output &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(output == expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Focus",
      "email": "65309793+Focusucof@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}