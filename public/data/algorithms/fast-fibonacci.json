{
  "slug": "fast-fibonacci",
  "name": "Fast Fibonacci",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming\\fast_fibonacci.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming\\fast_fibonacci.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis program calculates the nth Fibonacci number in O(log(n)).\r\nIt&#x27;s possible to calculate F(1_000_000) in less than a second.\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> sys\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    return F(n)\r\n    &gt;&gt;&gt; [fibonacci(i) for i in range(13)]\r\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Negative arguments are not supported&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> _fib(n)[<span class=\"hljs-number\">0</span>]\r\n\r\n\r\n<span class=\"hljs-comment\"># returns (F(n), F(n-1))</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_fib</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># (F(0), F(1))</span>\r\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-comment\"># F(2n) = F(n)[2F(n+1) − F(n)]</span>\r\n    <span class=\"hljs-comment\"># F(2n+1) = F(n+1)^2+F(n)^2</span>\r\n    a, b = _fib(n // <span class=\"hljs-number\">2</span>)\r\n    c = a * (b * <span class=\"hljs-number\">2</span> - a)\r\n    d = a * a + b * b\r\n    <span class=\"hljs-keyword\">return</span> (d, c + d) <span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">else</span> (c, d)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    n = <span class=\"hljs-built_in\">int</span>(sys.argv[<span class=\"hljs-number\">1</span>])\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;fibonacci(<span class=\"hljs-subst\">{n}</span>) is <span class=\"hljs-subst\">{fibonacci(n)}</span>&quot;</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Kilian Rueß",
      "email": "kilian.ruess@student.uni-augsburg.de",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 3
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}