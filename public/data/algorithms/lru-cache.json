{
  "slug": "lru-cache",
  "name": "Lru Cache",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other\\lru_cache.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other\\lru_cache.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>, <span class=\"hljs-type\">Generic</span>, TypeVar\r\n\r\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\r\nU = TypeVar(<span class=\"hljs-string\">&quot;U&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedListNode</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Double Linked List Node built specifically for LRU Cache\r\n\r\n    &gt;&gt;&gt; DoubleLinkedListNode(1,1)\r\n    Node: key: 1, val: 1, has next: False, has prev: False\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, key: T | <span class=\"hljs-literal\">None</span>, val: U | <span class=\"hljs-literal\">None</span></span>):\r\n        self.key = key\r\n        self.val = val\r\n        self.<span class=\"hljs-built_in\">next</span>: DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.prev: DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Node: key: {}, val: {}, has next: {}, has prev: {}&quot;</span>.<span class=\"hljs-built_in\">format</span>(\r\n            self.key, self.val, self.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>, self.prev <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        )\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Double Linked List built specifically for LRU Cache\r\n\r\n    &gt;&gt;&gt; dll: DoubleLinkedList = DoubleLinkedList()\r\n    &gt;&gt;&gt; dll\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, has next: True, has prev: False,\r\n        Node: key: None, val: None, has next: False, has prev: True\r\n\r\n    &gt;&gt;&gt; first_node = DoubleLinkedListNode(1,10)\r\n    &gt;&gt;&gt; first_node\r\n    Node: key: 1, val: 10, has next: False, has prev: False\r\n\r\n\r\n    &gt;&gt;&gt; dll.add(first_node)\r\n    &gt;&gt;&gt; dll\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, has next: True, has prev: False,\r\n        Node: key: 1, val: 10, has next: True, has prev: True,\r\n        Node: key: None, val: None, has next: False, has prev: True\r\n\r\n    &gt;&gt;&gt; # node is mutated\r\n    &gt;&gt;&gt; first_node\r\n    Node: key: 1, val: 10, has next: True, has prev: True\r\n\r\n    &gt;&gt;&gt; second_node = DoubleLinkedListNode(2,20)\r\n    &gt;&gt;&gt; second_node\r\n    Node: key: 2, val: 20, has next: False, has prev: False\r\n\r\n    &gt;&gt;&gt; dll.add(second_node)\r\n    &gt;&gt;&gt; dll\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, has next: True, has prev: False,\r\n        Node: key: 1, val: 10, has next: True, has prev: True,\r\n        Node: key: 2, val: 20, has next: True, has prev: True,\r\n        Node: key: None, val: None, has next: False, has prev: True\r\n\r\n    &gt;&gt;&gt; removed_node = dll.remove(first_node)\r\n    &gt;&gt;&gt; assert removed_node == first_node\r\n    &gt;&gt;&gt; dll\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, has next: True, has prev: False,\r\n        Node: key: 2, val: 20, has next: True, has prev: True,\r\n        Node: key: None, val: None, has next: False, has prev: True\r\n\r\n\r\n    &gt;&gt;&gt; # Attempt to remove node not on list\r\n    &gt;&gt;&gt; removed_node = dll.remove(first_node)\r\n    &gt;&gt;&gt; removed_node is None\r\n    True\r\n\r\n    &gt;&gt;&gt; # Attempt to remove head or rear\r\n    &gt;&gt;&gt; dll.head\r\n    Node: key: None, val: None, has next: True, has prev: False\r\n    &gt;&gt;&gt; dll.remove(dll.head) is None\r\n    True\r\n\r\n    &gt;&gt;&gt; # Attempt to remove head or rear\r\n    &gt;&gt;&gt; dll.rear\r\n    Node: key: None, val: None, has next: False, has prev: True\r\n    &gt;&gt;&gt; dll.remove(dll.rear) is None\r\n    True\r\n\r\n\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.head: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\r\n        self.rear: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\r\n        self.head.<span class=\"hljs-built_in\">next</span>, self.rear.prev = self.rear, self.head\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        rep = [<span class=\"hljs-string\">&quot;DoubleLinkedList&quot;</span>]\r\n        node = self.head\r\n        <span class=\"hljs-keyword\">while</span> node.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            rep.append(<span class=\"hljs-built_in\">str</span>(node))\r\n            node = node.<span class=\"hljs-built_in\">next</span>\r\n        rep.append(<span class=\"hljs-built_in\">str</span>(self.rear))\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;,\\n    &quot;</span>.join(rep)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">self, node: DoubleLinkedListNode[T, U]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Adds the given node to the end of the list (before rear)\r\n        &quot;&quot;&quot;</span>\r\n\r\n        previous = self.rear.prev\r\n\r\n        <span class=\"hljs-comment\"># All nodes other than self.head are guaranteed to have non-None previous</span>\r\n        <span class=\"hljs-keyword\">assert</span> previous <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n\r\n        previous.<span class=\"hljs-built_in\">next</span> = node\r\n        node.prev = previous\r\n        self.rear.prev = node\r\n        node.<span class=\"hljs-built_in\">next</span> = self.rear\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">\r\n        self, node: DoubleLinkedListNode[T, U]\r\n    </span>) -&gt; DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Removes and returns the given node from the list\r\n\r\n        Returns None if node.prev or node.next is None\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> node.prev <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> node.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n        node.prev.<span class=\"hljs-built_in\">next</span> = node.<span class=\"hljs-built_in\">next</span>\r\n        node.<span class=\"hljs-built_in\">next</span>.prev = node.prev\r\n        node.prev = <span class=\"hljs-literal\">None</span>\r\n        node.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">return</span> node\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    LRU Cache to store a given capacity of data. Can be used as a stand-alone object\r\n    or as a function decorator.\r\n\r\n    &gt;&gt;&gt; cache = LRUCache(2)\r\n\r\n    &gt;&gt;&gt; cache.set(1, 1)\r\n    &gt;&gt;&gt; cache.set(2, 2)\r\n    &gt;&gt;&gt; cache.get(1)\r\n    1\r\n\r\n    &gt;&gt;&gt; cache.list\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, has next: True, has prev: False,\r\n        Node: key: 2, val: 2, has next: True, has prev: True,\r\n        Node: key: 1, val: 1, has next: True, has prev: True,\r\n        Node: key: None, val: None, has next: False, has prev: True\r\n\r\n    &gt;&gt;&gt; cache.cache  # doctest: +NORMALIZE_WHITESPACE\r\n    {1: Node: key: 1, val: 1, has next: True, has prev: True, \\\r\n     2: Node: key: 2, val: 2, has next: True, has prev: True}\r\n\r\n    &gt;&gt;&gt; cache.set(3, 3)\r\n\r\n    &gt;&gt;&gt; cache.list\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, has next: True, has prev: False,\r\n        Node: key: 1, val: 1, has next: True, has prev: True,\r\n        Node: key: 3, val: 3, has next: True, has prev: True,\r\n        Node: key: None, val: None, has next: False, has prev: True\r\n\r\n    &gt;&gt;&gt; cache.cache  # doctest: +NORMALIZE_WHITESPACE\r\n    {1: Node: key: 1, val: 1, has next: True, has prev: True, \\\r\n     3: Node: key: 3, val: 3, has next: True, has prev: True}\r\n\r\n    &gt;&gt;&gt; cache.get(2) is None\r\n    True\r\n\r\n    &gt;&gt;&gt; cache.set(4, 4)\r\n\r\n    &gt;&gt;&gt; cache.get(1) is None\r\n    True\r\n\r\n    &gt;&gt;&gt; cache.get(3)\r\n    3\r\n\r\n    &gt;&gt;&gt; cache.get(4)\r\n    4\r\n\r\n    &gt;&gt;&gt; cache\r\n    CacheInfo(hits=3, misses=2, capacity=2, current size=2)\r\n\r\n    &gt;&gt;&gt; @LRUCache.decorator(100)\r\n    ... def fib(num):\r\n    ...     if num in (1, 2):\r\n    ...         return 1\r\n    ...     return fib(num - 1) + fib(num - 2)\r\n\r\n    &gt;&gt;&gt; for i in range(1, 100):\r\n    ...     res = fib(i)\r\n\r\n    &gt;&gt;&gt; fib.cache_info()\r\n    CacheInfo(hits=194, misses=99, capacity=100, current size=99)\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># class variable to map the decorator functions to their respective instance</span>\r\n    decorator_function_to_instance_map: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-type\">Callable</span>[[T], U], LRUCache[T, U]] = {}\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, capacity: <span class=\"hljs-built_in\">int</span></span>):\r\n        self.<span class=\"hljs-built_in\">list</span>: DoubleLinkedList[T, U] = DoubleLinkedList()\r\n        self.capacity = capacity\r\n        self.num_keys = <span class=\"hljs-number\">0</span>\r\n        self.hits = <span class=\"hljs-number\">0</span>\r\n        self.miss = <span class=\"hljs-number\">0</span>\r\n        self.cache: <span class=\"hljs-built_in\">dict</span>[T, DoubleLinkedListNode[T, U]] = {}\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the details for the cache instance\r\n        [hits, misses, capacity, current_size]\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"hljs-string\">f&quot;CacheInfo(hits=<span class=\"hljs-subst\">{self.hits}</span>, misses=<span class=\"hljs-subst\">{self.miss}</span>, &quot;</span>\r\n            <span class=\"hljs-string\">f&quot;capacity=<span class=\"hljs-subst\">{self.capacity}</span>, current size=<span class=\"hljs-subst\">{self.num_keys}</span>)&quot;</span>\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__contains__</span>(<span class=\"hljs-params\">self, key: T</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; cache = LRUCache(1)\r\n\r\n        &gt;&gt;&gt; 1 in cache\r\n        False\r\n\r\n        &gt;&gt;&gt; cache.set(1, 1)\r\n\r\n        &gt;&gt;&gt; 1 in cache\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">return</span> key <span class=\"hljs-keyword\">in</span> self.cache\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self, key: T</span>) -&gt; U | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Returns the value for the input key and updates the Double Linked List.\r\n        Returns None if key is not present in cache\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-comment\"># Note: pythonic interface would throw KeyError rather than return None</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">in</span> self.cache:\r\n            self.hits += <span class=\"hljs-number\">1</span>\r\n            value_node: DoubleLinkedListNode[T, U] = self.cache[key]\r\n            node = self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key])\r\n            <span class=\"hljs-keyword\">assert</span> node == value_node\r\n\r\n            <span class=\"hljs-comment\"># node is guaranteed not None because it is in self.cache</span>\r\n            <span class=\"hljs-keyword\">assert</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n            self.<span class=\"hljs-built_in\">list</span>.add(node)\r\n            <span class=\"hljs-keyword\">return</span> node.val\r\n        self.miss += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">self, key: T, value: U</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Sets the value for the input key and updates the Double Linked List\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.cache:\r\n            <span class=\"hljs-keyword\">if</span> self.num_keys &gt;= self.capacity:\r\n                <span class=\"hljs-comment\"># delete first node (oldest) when over capacity</span>\r\n                first_node = self.<span class=\"hljs-built_in\">list</span>.head.<span class=\"hljs-built_in\">next</span>\r\n\r\n                <span class=\"hljs-comment\"># guaranteed to have a non-None first node when num_keys &gt; 0</span>\r\n                <span class=\"hljs-comment\"># explain to type checker via assertions</span>\r\n                <span class=\"hljs-keyword\">assert</span> first_node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n                <span class=\"hljs-keyword\">assert</span> first_node.key <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n                <span class=\"hljs-keyword\">assert</span> (\r\n                    self.<span class=\"hljs-built_in\">list</span>.remove(first_node) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n                )  <span class=\"hljs-comment\"># node guaranteed to be in list assert node.key is not None</span>\r\n\r\n                <span class=\"hljs-keyword\">del</span> self.cache[first_node.key]\r\n                self.num_keys -= <span class=\"hljs-number\">1</span>\r\n            self.cache[key] = DoubleLinkedListNode(key, value)\r\n            self.<span class=\"hljs-built_in\">list</span>.add(self.cache[key])\r\n            self.num_keys += <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-comment\"># bump node to the end of the list, update value</span>\r\n            node = self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key])\r\n            <span class=\"hljs-keyword\">assert</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># node guaranteed to be in list</span>\r\n            node.val = value\r\n            self.<span class=\"hljs-built_in\">list</span>.add(node)\r\n\r\n<span class=\"hljs-meta\">    @classmethod</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decorator</span>(<span class=\"hljs-params\">\r\n        cls, size: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">128</span>\r\n    </span>) -&gt; <span class=\"hljs-type\">Callable</span>[[<span class=\"hljs-type\">Callable</span>[[T], U]], <span class=\"hljs-type\">Callable</span>[..., U]]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Decorator version of LRU Cache\r\n\r\n        Decorated function must be function of T -&gt; U\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_inner</span>(<span class=\"hljs-params\">func: <span class=\"hljs-type\">Callable</span>[[T], U]</span>) -&gt; <span class=\"hljs-type\">Callable</span>[..., U]:\r\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_wrapper</span>(<span class=\"hljs-params\">*args: T</span>) -&gt; U:\r\n                <span class=\"hljs-keyword\">if</span> func <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> cls.decorator_function_to_instance_map:\r\n                    cls.decorator_function_to_instance_map[func] = LRUCache(size)\r\n\r\n                result = cls.decorator_function_to_instance_map[func].get(args[<span class=\"hljs-number\">0</span>])\r\n                <span class=\"hljs-keyword\">if</span> result <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                    result = func(*args)\r\n                    cls.decorator_function_to_instance_map[func].<span class=\"hljs-built_in\">set</span>(args[<span class=\"hljs-number\">0</span>], result)\r\n                <span class=\"hljs-keyword\">return</span> result\r\n\r\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_info</span>() -&gt; LRUCache[T, U]:\r\n                <span class=\"hljs-keyword\">return</span> cls.decorator_function_to_instance_map[func]\r\n\r\n            <span class=\"hljs-built_in\">setattr</span>(cache_decorator_wrapper, <span class=\"hljs-string\">&quot;cache_info&quot;</span>, cache_info)\r\n\r\n            <span class=\"hljs-keyword\">return</span> cache_decorator_wrapper\r\n\r\n        <span class=\"hljs-keyword\">return</span> cache_decorator_inner\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Cache\\test\\LRUCache.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Cache\\test\\LRUCache.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">LRUCache</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../LRUCache&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;LRUCache&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Example 1 (Small Cache, size=2)&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LRUCache</span>(<span class=\"hljs-number\">2</span>)\r\n    cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\r\n    cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-comment\">// Additional entries triggers cache rotate</span>\r\n    cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\r\n\r\n    <span class=\"hljs-comment\">// Then we should have a cache miss for the first entry added</span>\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">null</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">3</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>)\r\n\r\n    cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// cache miss</span>\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// cache miss</span>\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">3</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">4</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">4</span>)\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">cacheInfo</span>()).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;CacheInfo(hits=6, misses=3, capacity=2, current size=2)&#x27;</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Example 2 (Computing Fibonacci Series, size=100)&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LRUCache</span>(<span class=\"hljs-number\">100</span>)\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">100</span>; i++) {\r\n      <span class=\"hljs-title function_\">fib</span>(i, cache)\r\n    }\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">cacheInfo</span>()).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;CacheInfo(hits=193, misses=103, capacity=100, current size=98)&#x27;</span>)\r\n  })\r\n})\r\n\r\n<span class=\"hljs-comment\">// Helper for building and caching Fibonacci series</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fib</span> (num, cache = <span class=\"hljs-literal\">null</span>) {\r\n  <span class=\"hljs-keyword\">if</span> (cache) {\r\n    <span class=\"hljs-keyword\">const</span> value = cache.<span class=\"hljs-title function_\">get</span>(num)\r\n    <span class=\"hljs-keyword\">if</span> (value) {\r\n      <span class=\"hljs-keyword\">return</span> value\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">if</span> (num === <span class=\"hljs-number\">1</span> || num === <span class=\"hljs-number\">2</span>) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\r\n  }\r\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">fib</span>(num - <span class=\"hljs-number\">1</span>, cache) + <span class=\"hljs-title function_\">fib</span>(num - <span class=\"hljs-number\">2</span>, cache)\r\n  <span class=\"hljs-keyword\">if</span> (cache) {\r\n    cache.<span class=\"hljs-title function_\">set</span>(num, result)\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> result\r\n}\r\n"
    },
    "c-plus-plus": {
      "dir": "others\\lru_cache.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others\\lru_cache.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief An implementation of\r\n * [LRU\r\n * Cache](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)).\r\n * Lru is a part of cache algorithms (also frequently called cache replacement\r\n * algorithms or cache replacement policies).\r\n *\r\n * ### Logic\r\n *      * Discards the least recently used items first.\r\n *      * This algorithm requires keeping track of what was used when, which is\r\n * expensive if one wants to make sure the algorithm always discards the least\r\n * recently used item.\r\n *      * General implementations of this technique require keeping &quot;age bits&quot;\r\n * for cache-lines and track the &quot;Least Recently Used&quot; cache-line based on\r\n * age-bits.\r\n *      * In such an implementation, every time a cache-line is used, the age of\r\n * all other cache-lines changes\r\n *\r\n * ### Algorithm explanation\r\n *      For a cache of page frame x:\r\n *          * Check if the page is present in cache.\r\n *          * If not present, then check is the cache is full or not:\r\n *          * If the cache is full, REMOVE the last element from the cache.\r\n *          * If the element is present in cache, then shift that element to\r\n * first position in cache from its original position.\r\n *              * This way you can keep the least recently used elements in the\r\n * last and most recently used in front of the cache.\r\n *\r\n *  Every time a requested page is  not found in cache, that is a miss or page\r\n * fault, and if the page is present in cache, then its a hit.\r\n *\r\n * ## Data Structure used\r\n *  * In the algorithm below we used two different data structure, one is linked\r\n * list and other one is a hash map\r\n *  * The linked list is used to contain the pages and the hash map contains the\r\n * pages and their address.\r\n *  * Every time a new page is requested, we first check in the hash map if the\r\n * page is present or not.\r\n *  * If not present, and the cache is full, we simply delete the last entry in\r\n * the cache.\r\n *  * If present, we shift that page from its current location to beginning of\r\n * the cache and update the address in hash map for that page.\r\n *\r\n * @author [Nitin Sharma](https://github.com/foo290)\r\n * */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>        <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>       <span class=\"hljs-comment\">/// for IO Operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;list&gt;</span>           <span class=\"hljs-comment\">/// for std::list</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unordered_map&gt;</span>  <span class=\"hljs-comment\">/// for std::unordered_map</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace others\r\n * @brief Other algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> others {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace lru_cache\r\n * @brief Implementation of the [LRU caching\r\n * algorithm](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU))\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> lru_cache {\r\n<span class=\"hljs-comment\">/**\r\n * @brief LRU cache class\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span> {\r\n    <span class=\"hljs-type\">uint64_t</span> pageFrame;         <span class=\"hljs-comment\">///&lt; Page frame, or total size of the cache.</span>\r\n    std::list&lt;<span class=\"hljs-type\">uint64_t</span>&gt; cache;  <span class=\"hljs-comment\">///&lt; Cache linked list (using the STL)</span>\r\n    std::unordered_map&lt;<span class=\"hljs-type\">uint64_t</span>, std::list&lt;<span class=\"hljs-type\">uint64_t</span>&gt;::iterator&gt;\r\n        pageMap;  <span class=\"hljs-comment\">///&lt; Hash map containing pages and their addresses</span>\r\n\r\n    <span class=\"hljs-type\">uint64_t</span> hits =\r\n        <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">///&lt; Total number of hits, or total number of times a page</span>\r\n    <span class=\"hljs-comment\">///&lt; was found in cache.</span>\r\n    <span class=\"hljs-type\">uint64_t</span> pageFault = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">///&lt; Total number of miss/page fault, or total</span>\r\n                             <span class=\"hljs-comment\">///&lt; number of times a page was not found in cache</span>\r\n\r\n <span class=\"hljs-keyword\">public</span>:\r\n    <span class=\"hljs-comment\">/**\r\n     * @brief Constructor, Initialize thee LRU class with page frame.\r\n     * @param pf Page frame or total size of cache.\r\n     * */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">LRUCache</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> pf)</span> </span>{ pageFrame = pf; }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * @brief Refer to a page, or request a page from memory.\r\n     * @param page The page that you are referring to.\r\n     * @returns void\r\n     * */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">refer</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> page)</span> </span>{\r\n        <span class=\"hljs-comment\">// If the page requested not in cache.</span>\r\n        <span class=\"hljs-keyword\">if</span> (pageMap.<span class=\"hljs-built_in\">find</span>(page) == pageMap.<span class=\"hljs-built_in\">end</span>()) {\r\n            pageFault++;  <span class=\"hljs-comment\">///&lt; Increase the page fault by one.</span>\r\n\r\n            <span class=\"hljs-comment\">// Check if the cache is full</span>\r\n            <span class=\"hljs-keyword\">if</span> (cache.<span class=\"hljs-built_in\">size</span>() == pageFrame) {\r\n                <span class=\"hljs-comment\">// delete the last page from cache</span>\r\n                <span class=\"hljs-type\">uint64_t</span> lastPage = cache.<span class=\"hljs-built_in\">back</span>();\r\n                cache.<span class=\"hljs-built_in\">pop_back</span>();\r\n                pageMap.<span class=\"hljs-built_in\">erase</span>(lastPage);\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">// The requested page is in the cache</span>\r\n        <span class=\"hljs-keyword\">else</span> {\r\n            hits++;\r\n            <span class=\"hljs-comment\">// present in cache, erase from current position to bring in front</span>\r\n            cache.<span class=\"hljs-built_in\">erase</span>(pageMap[page]);\r\n        }\r\n        <span class=\"hljs-comment\">// Push it in the front of the cache and update the page reference in</span>\r\n        <span class=\"hljs-comment\">// page map.</span>\r\n        cache.<span class=\"hljs-built_in\">push_front</span>(page);\r\n        pageMap[page] = cache.<span class=\"hljs-built_in\">begin</span>();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * @brief A function to display the current cache\r\n     * @returns Void\r\n     * */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> &amp;it : cache) {\r\n            std::cout &lt;&lt; it &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n        }\r\n        std::cout &lt;&lt; std::endl;\r\n    }\r\n    <span class=\"hljs-comment\">/**\r\n     * @brief A function to get page hits\r\n     * @returns int\r\n     * */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">getHits</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> hits; }\r\n    <span class=\"hljs-comment\">/**\r\n     * @brief A function to get page fault\r\n     * @returns int\r\n     * */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">getPageFault</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> pageFault; }\r\n};\r\n\r\n}  <span class=\"hljs-comment\">// namespace lru_cache</span>\r\n}  <span class=\"hljs-comment\">// namespace others</span>\r\n\r\n<span class=\"hljs-keyword\">namespace</span> lru_tests {\r\n<span class=\"hljs-comment\">/**\r\n * @brief A function to print given message on console.\r\n * @tparam T Type of the given message.\r\n * @returns void\r\n * */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">log</span><span class=\"hljs-params\">(T msg)</span> </span>{\r\n    <span class=\"hljs-comment\">// It&#x27;s just to avoid writing cout and endl</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;[TESTS] : ---&gt; &quot;</span> &lt;&lt; msg &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief A simple test case\r\n * The assert statement will check expected hist and miss to resultant hits and\r\n * miss\r\n * @returns void\r\n * */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_1</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> expected_hits = <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> expected_pageFault = <span class=\"hljs-number\">4</span>;\r\n\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running Test-1...&quot;</span>);\r\n\r\n    others::<span class=\"hljs-function\">lru_cache::LRUCache <span class=\"hljs-title\">cache</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>;\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">2</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">4</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\r\n\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert statement...&quot;</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(cache.<span class=\"hljs-built_in\">getHits</span>() == expected_hits &amp;&amp;\r\n           cache.<span class=\"hljs-built_in\">getPageFault</span>() == expected_pageFault);\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assert successful!&quot;</span>);\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Test-1 complete!&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief A test case contains hits more than cache size\r\n * The assert statement will check expected hist and miss to resultant hits and\r\n * miss\r\n * @returns void\r\n * */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_2</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> expected_hits = <span class=\"hljs-number\">4</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> expected_pageFault = <span class=\"hljs-number\">2</span>;\r\n\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running Test-2...&quot;</span>);\r\n\r\n    others::<span class=\"hljs-function\">lru_cache::LRUCache <span class=\"hljs-title\">cache</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>;\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\r\n\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert statement...&quot;</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(cache.<span class=\"hljs-built_in\">getHits</span>() == expected_hits &amp;&amp;\r\n           cache.<span class=\"hljs-built_in\">getPageFault</span>() == expected_pageFault);\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assert successful!&quot;</span>);\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Test-2 complete!&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief A simple test case\r\n * The assert statement will check expected hist and miss to resultant hits and\r\n * miss\r\n * @returns void\r\n * */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_3</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> expected_hits = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> expected_pageFault = <span class=\"hljs-number\">5</span>;\r\n\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running Test-3...&quot;</span>);\r\n\r\n    others::<span class=\"hljs-function\">lru_cache::LRUCache <span class=\"hljs-title\">cache</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>;\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">2</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">3</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">4</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\r\n\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert statement...&quot;</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(cache.<span class=\"hljs-built_in\">getHits</span>() == expected_hits &amp;&amp;\r\n           cache.<span class=\"hljs-built_in\">getPageFault</span>() == expected_pageFault);\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assert successful!&quot;</span>);\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Test-3 complete!&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief A function to invoke all test cases\r\n * @returns void\r\n * */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">run_tests</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test_1</span>();\r\n    <span class=\"hljs-built_in\">test_2</span>();\r\n    <span class=\"hljs-built_in\">test_3</span>();\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\r\n    <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;TESTS COMPLETED!&quot;</span>);\r\n}\r\n}  <span class=\"hljs-comment\">// namespace lru_tests</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    lru_tests::<span class=\"hljs-built_in\">run_tests</span>();\r\n\r\n    <span class=\"hljs-comment\">// Usage</span>\r\n    others::<span class=\"hljs-function\">lru_cache::LRUCache <span class=\"hljs-title\">cache</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>)</span></span>;\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">1</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">2</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">3</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">4</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\r\n    cache.<span class=\"hljs-built_in\">refer</span>(<span class=\"hljs-number\">5</span>);\r\n\r\n    cache.<span class=\"hljs-built_in\">display</span>();\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hits: &quot;</span> &lt;&lt; cache.<span class=\"hljs-built_in\">getHits</span>()\r\n              &lt;&lt; <span class=\"hljs-string\">&quot; Miss: &quot;</span> &lt;&lt; cache.<span class=\"hljs-built_in\">getPageFault</span>() &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\caches\\LRUCache.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\caches\\LRUCache.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.caches;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\r\n<span class=\"hljs-keyword\">import</span> java.util.Map;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Least recently used (LRU)\r\n * &lt;p&gt;\r\n * Discards the least recently used items first. This algorithm requires keeping\r\n * track of what was used when, which is expensive if one wants to make sure the\r\n * algorithm always discards the least recently used item.\r\n * https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> &lt;K&gt; key type\r\n * <span class=\"hljs-doctag\">@param</span> &lt;V&gt; value type\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span>&lt;K, V&gt; {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;K, Entry&lt;K, V&gt;&gt; data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\r\n    <span class=\"hljs-keyword\">private</span> Entry&lt;K, V&gt; head;\r\n    <span class=\"hljs-keyword\">private</span> Entry&lt;K, V&gt; tail;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> cap;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAP</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LRUCache</span><span class=\"hljs-params\">()</span> {\r\n        setCapacity(DEFAULT_CAP);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LRUCache</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> cap)</span> {\r\n        setCapacity(cap);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> newCapacity)</span> {\r\n        checkCapacity(newCapacity);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> data.size(); i &gt; newCapacity; i--) {\r\n            Entry&lt;K, V&gt; evicted = evict();\r\n            data.remove(evicted.getKey());\r\n        }\r\n        <span class=\"hljs-built_in\">this</span>.cap = newCapacity;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Entry&lt;K, V&gt; <span class=\"hljs-title function_\">evict</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;cache cannot be empty!&quot;</span>);\r\n        }\r\n        Entry&lt;K, V&gt; evicted = head;\r\n        head = evicted.getNextEntry();\r\n        head.setPreEntry(<span class=\"hljs-literal\">null</span>);\r\n        evicted.setNextEntry(<span class=\"hljs-literal\">null</span>);\r\n        <span class=\"hljs-keyword\">return</span> evicted;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> capacity)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (capacity &lt;= <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;capacity must greater than 0!&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(K key)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (!data.containsKey(key)) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; entry = data.get(key);\r\n        moveNodeToLast(entry);\r\n        <span class=\"hljs-keyword\">return</span> entry.getValue();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">moveNodeToLast</span><span class=\"hljs-params\">(Entry&lt;K, V&gt; entry)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (tail == entry) {\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; preEntry = entry.getPreEntry();\r\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; nextEntry = entry.getNextEntry();\r\n        <span class=\"hljs-keyword\">if</span> (preEntry != <span class=\"hljs-literal\">null</span>) {\r\n            preEntry.setNextEntry(nextEntry);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (nextEntry != <span class=\"hljs-literal\">null</span>) {\r\n            nextEntry.setPreEntry(preEntry);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (head == entry) {\r\n            head = nextEntry;\r\n        }\r\n        tail.setNextEntry(entry);\r\n        entry.setPreEntry(tail);\r\n        entry.setNextEntry(<span class=\"hljs-literal\">null</span>);\r\n        tail = entry;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K key, V value)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (data.containsKey(key)) {\r\n            <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; existingEntry = data.get(key);\r\n            existingEntry.setValue(value);\r\n            moveNodeToLast(existingEntry);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        Entry&lt;K, V&gt; newEntry;\r\n        <span class=\"hljs-keyword\">if</span> (data.size() == cap) {\r\n            newEntry = evict();\r\n            data.remove(newEntry.getKey());\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            newEntry = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>&lt;&gt;();\r\n        }\r\n\r\n        newEntry.setKey(key);\r\n        newEntry.setValue(value);\r\n        addNewEntry(newEntry);\r\n        data.put(key, newEntry);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addNewEntry</span><span class=\"hljs-params\">(Entry&lt;K, V&gt; newEntry)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (data.isEmpty()) {\r\n            head = newEntry;\r\n            tail = newEntry;\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        tail.setNextEntry(newEntry);\r\n        newEntry.setPreEntry(tail);\r\n        newEntry.setNextEntry(<span class=\"hljs-literal\">null</span>);\r\n        tail = newEntry;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Entry</span>&lt;I, J&gt; {\r\n\r\n        <span class=\"hljs-keyword\">private</span> Entry&lt;I, J&gt; preEntry;\r\n        <span class=\"hljs-keyword\">private</span> Entry&lt;I, J&gt; nextEntry;\r\n        <span class=\"hljs-keyword\">private</span> I key;\r\n        <span class=\"hljs-keyword\">private</span> J value;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Entry</span><span class=\"hljs-params\">()</span> {\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Entry</span><span class=\"hljs-params\">(Entry&lt;I, J&gt; preEntry, Entry&lt;I, J&gt; nextEntry, I key, J value)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.preEntry = preEntry;\r\n            <span class=\"hljs-built_in\">this</span>.nextEntry = nextEntry;\r\n            <span class=\"hljs-built_in\">this</span>.key = key;\r\n            <span class=\"hljs-built_in\">this</span>.value = value;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> Entry&lt;I, J&gt; <span class=\"hljs-title function_\">getPreEntry</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> preEntry;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setPreEntry</span><span class=\"hljs-params\">(Entry&lt;I, J&gt; preEntry)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.preEntry = preEntry;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> Entry&lt;I, J&gt; <span class=\"hljs-title function_\">getNextEntry</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> nextEntry;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNextEntry</span><span class=\"hljs-params\">(Entry&lt;I, J&gt; nextEntry)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.nextEntry = nextEntry;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> I <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> key;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setKey</span><span class=\"hljs-params\">(I key)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.key = key;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> J <span class=\"hljs-title function_\">getValue</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> value;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setValue</span><span class=\"hljs-params\">(J value)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.value = value;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-keyword\">final</span> LRUCache&lt;String, Integer&gt; cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LRUCache</span>&lt;&gt;(<span class=\"hljs-number\">2</span>);\r\n        cache.put(<span class=\"hljs-string\">&quot;Key1&quot;</span>, <span class=\"hljs-number\">1</span>);\r\n        cache.put(<span class=\"hljs-string\">&quot;Key2&quot;</span>, <span class=\"hljs-number\">2</span>);\r\n        cache.put(<span class=\"hljs-string\">&quot;Key3&quot;</span>, <span class=\"hljs-number\">3</span>);\r\n        cache.put(<span class=\"hljs-string\">&quot;Key4&quot;</span>, <span class=\"hljs-number\">4</span>);\r\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key1): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key1&quot;</span>));\r\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key2): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key2&quot;</span>));\r\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key3): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key3&quot;</span>));\r\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key4): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key4&quot;</span>));\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aditya Kumar",
      "email": "aditya1944@live.com",
      "commits": 1
    },
    {
      "name": "januslinhc",
      "email": "januslinhc@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nitin Sharma",
      "email": "32377892+foo290@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andrew Grangaard",
      "email": "granny-github@ofb.net",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}