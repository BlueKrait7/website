{
  "slug": "hamiltonian",
  "name": "Hamiltonian",
  "categories": [
    "datastructures",
    "graphs"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures\\graphs\\hamiltonian.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\graphs\\hamiltonian.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;Graph.h&quot;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_NODES 1000</span>\r\n\r\n<span class=\"hljs-type\">bool</span> visited[MAX_NODES];\r\n\r\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">hamiltonR</span><span class=\"hljs-params\">(Graph g, <span class=\"hljs-type\">int</span> nV, Vertex v, Vertex dest, <span class=\"hljs-type\">int</span> d)</span>\r\n{\r\n    <span class=\"hljs-comment\">// v = current vertex considered</span>\r\n    <span class=\"hljs-comment\">// dest = destination vertex</span>\r\n    <span class=\"hljs-comment\">// d = distance &quot;remaining&quot; until path found</span>\r\n\r\n    Vertex w;\r\n    <span class=\"hljs-keyword\">if</span> (v == dest)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> (d == <span class=\"hljs-number\">0</span>);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        visited[v] = <span class=\"hljs-literal\">true</span>;\r\n        <span class=\"hljs-keyword\">for</span> (w = <span class=\"hljs-number\">0</span>; w &lt; nV; w++)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (adjacent(g, v, w) &amp;&amp; !visited[w])\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (hamiltonR(g, nV, w, dest, d - <span class=\"hljs-number\">1</span>))\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    visited[v] = <span class=\"hljs-literal\">false</span>;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">hasHamiltonianPath</span><span class=\"hljs-params\">(Graph g, <span class=\"hljs-type\">int</span> nV, Vertex src, Vertex dest)</span>\r\n{\r\n    Vertex v;\r\n    <span class=\"hljs-keyword\">for</span> (v = <span class=\"hljs-number\">0</span>; v &lt; nV; v++) visited[v] = <span class=\"hljs-literal\">false</span>;\r\n    <span class=\"hljs-keyword\">return</span> hamiltonR(g, nV, src, dest, nV - <span class=\"hljs-number\">1</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    Edge e;\r\n    <span class=\"hljs-type\">int</span> n;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of vertices: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\r\n    Graph g = newGraph(n);\r\n\r\n    Vertex src, dest;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter source node: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;src);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter destination node: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;dest);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter an edge (from): &quot;</span>);\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;e.v) == <span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter an edge (to): &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;e.w);\r\n        insertEdge(g, e);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter an edge (from): &quot;</span>);\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Finished.\\n&quot;</span>);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The graph has &quot;</span>);\r\n    <span class=\"hljs-keyword\">if</span> (hasHamiltonianPath(g, n, src, dest))\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;a&quot;</span>);\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;no&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; Hamiltonian path from %d to %d.\\n&quot;</span>, src, dest);\r\n\r\n    freeGraph(g);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">// By</span>\r\n<span class=\"hljs-comment\">//  .----------------.  .----------------.  .----------------.</span>\r\n<span class=\"hljs-comment\">//  .-----------------.  .----------------.  .----------------.</span>\r\n<span class=\"hljs-comment\">// | .--------------. || .--------------. || .--------------. ||</span>\r\n<span class=\"hljs-comment\">// .--------------. | | .--------------. || .--------------. | | |  _________ |</span>\r\n<span class=\"hljs-comment\">// || | _____  _____ | || |      __      | || | ____  _____  | | | |  ____  ____</span>\r\n<span class=\"hljs-comment\">// | || |     ____     | | | | |  _   _  |  | || ||_   _||_   _|| || |     /  \\</span>\r\n<span class=\"hljs-comment\">// | || ||_   \\|_   _| | | | | |_   ||   _| | || |   .&#x27;    `.   | | | | |_/ | |</span>\r\n<span class=\"hljs-comment\">// \\_|  | || |  | |    | |  | || |    / /\\ \\    | || |  |   \\ | |   | | | |   |</span>\r\n<span class=\"hljs-comment\">// |__| |   | || |  /  .--.  \\  | | | |     | |      | || |  | &#x27;    &#x27; |  | || |</span>\r\n<span class=\"hljs-comment\">// / ____ \\   | || |  | |\\ \\| |   | | | |   |  __  |   | || |  | |    | |  | |</span>\r\n<span class=\"hljs-comment\">// | |    _| |_     | || |   \\ `--&#x27; /   | || | _/ /    \\ \\_ | || | _| |_\\   |_</span>\r\n<span class=\"hljs-comment\">// | | | |  _| |  | |_  | || |  \\  `--&#x27;  /  | | | |   |_____|    | || | `.__.&#x27;</span>\r\n<span class=\"hljs-comment\">// | || ||____|  |____|| || ||_____|\\____| | | | | |____||____| | || | `.____.&#x27;</span>\r\n<span class=\"hljs-comment\">// | | | |              | || |              | || |              | || | | | | |</span>\r\n<span class=\"hljs-comment\">// | || |              | | | &#x27;--------------&#x27; || &#x27;--------------&#x27; ||</span>\r\n<span class=\"hljs-comment\">// &#x27;--------------&#x27; || &#x27;--------------&#x27; | | &#x27;--------------&#x27; || &#x27;--------------&#x27;</span>\r\n<span class=\"hljs-comment\">// |</span>\r\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\r\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;   &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\r\n\r\n<span class=\"hljs-comment\">//  Email :    z5261243@unsw.edu.au</span>\r\n<span class=\"hljs-comment\">//             hhoanhtuann@gmail.com</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "ttuanho",
      "email": "hhoanhtuann@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}