{
  "slug": "jaro-winkler",
  "name": "Jaro Winkler",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings\\jaro_winkler.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings\\jaro_winkler.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">jaro_winkler</span>(<span class=\"hljs-params\">str1: <span class=\"hljs-built_in\">str</span>, str2: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Jaro–Winkler distance is a string metric measuring an edit distance between two\r\n    sequences.\r\n    Output value is between 0.0 and 1.0.\r\n\r\n    &gt;&gt;&gt; jaro_winkler(&quot;martha&quot;, &quot;marhta&quot;)\r\n    0.9611111111111111\r\n    &gt;&gt;&gt; jaro_winkler(&quot;CRATE&quot;, &quot;TRACE&quot;)\r\n    0.7333333333333334\r\n    &gt;&gt;&gt; jaro_winkler(&quot;test&quot;, &quot;dbdbdbdb&quot;)\r\n    0.0\r\n    &gt;&gt;&gt; jaro_winkler(&quot;test&quot;, &quot;test&quot;)\r\n    1.0\r\n    &gt;&gt;&gt; jaro_winkler(&quot;hello world&quot;, &quot;HeLLo W0rlD&quot;)\r\n    0.6363636363636364\r\n    &gt;&gt;&gt; jaro_winkler(&quot;test&quot;, &quot;&quot;)\r\n    0.0\r\n    &gt;&gt;&gt; jaro_winkler(&quot;hello&quot;, &quot;world&quot;)\r\n    0.4666666666666666\r\n    &gt;&gt;&gt; jaro_winkler(&quot;hell**o&quot;, &quot;*world&quot;)\r\n    0.4365079365079365\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_matched_characters</span>(<span class=\"hljs-params\">_str1: <span class=\"hljs-built_in\">str</span>, _str2: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        matched = []\r\n        limit = <span class=\"hljs-built_in\">min</span>(<span class=\"hljs-built_in\">len</span>(_str1), <span class=\"hljs-built_in\">len</span>(_str2)) // <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">for</span> i, l <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(_str1):\r\n            left = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-number\">0</span>, i - limit))\r\n            right = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">min</span>(i + limit + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(_str2)))\r\n            <span class=\"hljs-keyword\">if</span> l <span class=\"hljs-keyword\">in</span> _str2[left:right]:\r\n                matched.append(l)\r\n                _str2 = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{_str2[<span class=\"hljs-number\">0</span>:_str2.index(l)]}</span> <span class=\"hljs-subst\">{_str2[_str2.index(l) + <span class=\"hljs-number\">1</span>:]}</span>&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(matched)\r\n\r\n    <span class=\"hljs-comment\"># matching characters</span>\r\n    matching_1 = get_matched_characters(str1, str2)\r\n    matching_2 = get_matched_characters(str2, str1)\r\n    match_count = <span class=\"hljs-built_in\">len</span>(matching_1)\r\n\r\n    <span class=\"hljs-comment\"># transposition</span>\r\n    transpositions = (\r\n        <span class=\"hljs-built_in\">len</span>([(c1, c2) <span class=\"hljs-keyword\">for</span> c1, c2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(matching_1, matching_2) <span class=\"hljs-keyword\">if</span> c1 != c2]) // <span class=\"hljs-number\">2</span>\r\n    )\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> match_count:\r\n        jaro = <span class=\"hljs-number\">0.0</span>\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        jaro = (\r\n            <span class=\"hljs-number\">1</span>\r\n            / <span class=\"hljs-number\">3</span>\r\n            * (\r\n                match_count / <span class=\"hljs-built_in\">len</span>(str1)\r\n                + match_count / <span class=\"hljs-built_in\">len</span>(str2)\r\n                + (match_count - transpositions) / match_count\r\n            )\r\n        )\r\n\r\n    <span class=\"hljs-comment\"># common prefix up to 4 characters</span>\r\n    prefix_len = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> c1, c2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(str1[:<span class=\"hljs-number\">4</span>], str2[:<span class=\"hljs-number\">4</span>]):\r\n        <span class=\"hljs-keyword\">if</span> c1 == c2:\r\n            prefix_len += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">break</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> jaro + <span class=\"hljs-number\">0.1</span> * prefix_len * (<span class=\"hljs-number\">1</span> - jaro)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    <span class=\"hljs-built_in\">print</span>(jaro_winkler(<span class=\"hljs-string\">&quot;hello&quot;</span>, <span class=\"hljs-string\">&quot;world&quot;</span>))\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Strings\\JaroWinkler.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Strings\\JaroWinkler.fs",
      "code": "<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\r\n\r\n<span class=\"hljs-keyword\">open</span> Microsoft.FSharp.Collections\r\n\r\n<span class=\"hljs-keyword\">module</span> JaroWinkler <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// Jaro–Winkler distance is a string metric measuring an edit distance between two</span>\r\n    <span class=\"hljs-comment\">/// sequences.</span>\r\n    <span class=\"hljs-comment\">/// Output value is between 0.0 and 1.0.</span>\r\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;str1&quot;&gt;&lt;/param&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;str2&quot;&gt;&lt;/param&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\r\n    <span class=\"hljs-keyword\">let</span> jaroWinkler (str1<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>, str2<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> getMatchedCharacters (_str1<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>, _str2<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span> <span class=\"hljs-operator\">=</span>\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> istr1 <span class=\"hljs-operator\">=</span> _str1\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> istr2 <span class=\"hljs-operator\">=</span> _str2\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> matched <span class=\"hljs-operator\">=</span> []\r\n    \r\n            <span class=\"hljs-keyword\">let</span> limit <span class=\"hljs-operator\">=</span>\r\n                int (floor (double (min _str1.Length str2.Length) <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2.0</span>))\r\n    \r\n            istr1\r\n            <span class=\"hljs-operator\">|&gt;</span> Seq.iteri\r\n                (<span class=\"hljs-keyword\">fun</span> i l <span class=\"hljs-operator\">-&gt;</span>\r\n                    <span class=\"hljs-keyword\">let</span> left <span class=\"hljs-operator\">=</span> int(max <span class=\"hljs-number\">0</span> (i <span class=\"hljs-operator\">-</span> limit))\r\n    \r\n                    <span class=\"hljs-keyword\">let</span> right <span class=\"hljs-operator\">=</span> int(min (i <span class=\"hljs-operator\">+</span> limit <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>) istr2.Length)\r\n    \r\n                    <span class=\"hljs-keyword\">if</span> (istr2.[left<span class=\"hljs-operator\">..</span>right <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]).Contains(l) <span class=\"hljs-keyword\">then</span>\r\n                        matched <span class=\"hljs-operator\">&lt;-</span> List.append matched [ (string) l ]\r\n                        <span class=\"hljs-keyword\">let</span> myIndex <span class=\"hljs-operator\">=</span> (istr2.IndexOf(l))\r\n                        istr2 <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{istr2.[<span class=\"hljs-number\">0.</span>.istr2.IndexOf(l) <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]}</span> <span class=\"hljs-subst\">{istr2.[istr2.IndexOf(l) <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1.</span>.]}</span>&quot;</span>)\r\n    \r\n            matched <span class=\"hljs-operator\">|&gt;</span> List.fold (<span class=\"hljs-operator\">+</span>) <span class=\"hljs-string\">&quot;&quot;</span>\r\n    \r\n        <span class=\"hljs-comment\">// matching characters</span>\r\n        <span class=\"hljs-keyword\">let</span> matching1 <span class=\"hljs-operator\">=</span> getMatchedCharacters (str1, str2)\r\n        <span class=\"hljs-keyword\">let</span> matching2 <span class=\"hljs-operator\">=</span> getMatchedCharacters (str2, str1)\r\n        <span class=\"hljs-keyword\">let</span> matchCount <span class=\"hljs-operator\">=</span> matching1.Length\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> jaro <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0.0</span>\r\n    \r\n        <span class=\"hljs-comment\">// Transposition</span>\r\n        <span class=\"hljs-keyword\">let</span> transpositions <span class=\"hljs-operator\">=</span>\r\n            floor (\r\n                double (\r\n                    (double)\r\n                        [ <span class=\"hljs-keyword\">for</span> c1, c2 <span class=\"hljs-keyword\">in</span> List.zip [ matching1 ] [ matching2 ] <span class=\"hljs-keyword\">do</span> <span class=\"hljs-keyword\">if</span> c1 <span class=\"hljs-operator\">&lt;&gt;</span> c2 <span class=\"hljs-keyword\">then</span> (c1, c2) ]\r\n                            .Length\r\n                )\r\n            )\r\n    \r\n        <span class=\"hljs-keyword\">if</span> matchCount <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\r\n            jaro <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-number\">0.0</span>\r\n        <span class=\"hljs-keyword\">else</span>\r\n            jaro <span class=\"hljs-operator\">&lt;-</span>\r\n                <span class=\"hljs-number\">1.0</span> <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">3.0</span>\r\n                <span class=\"hljs-operator\">*</span> ((double) matchCount <span class=\"hljs-operator\">/</span> (double) str1.Length\r\n                   <span class=\"hljs-operator\">+</span> (double) matchCount <span class=\"hljs-operator\">/</span> (double) str2.Length\r\n                   <span class=\"hljs-operator\">+</span> ((double) matchCount <span class=\"hljs-operator\">-</span> transpositions)\r\n                     <span class=\"hljs-operator\">/</span> (double) matchCount)\r\n    \r\n        <span class=\"hljs-comment\">// Common prefix up to 4 characters</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> prefixLen <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> c1C2BoolList <span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-type\">list</span> <span class=\"hljs-operator\">=</span> []\r\n\r\n        <span class=\"hljs-keyword\">if</span> str1.Length <span class=\"hljs-operator\">=</span> str2.Length <span class=\"hljs-keyword\">then</span>\r\n            <span class=\"hljs-keyword\">for</span> c1, c2 <span class=\"hljs-keyword\">in</span> Array.zip (str1.[<span class=\"hljs-operator\">..</span><span class=\"hljs-number\">4</span>].ToCharArray()) (str2.[<span class=\"hljs-operator\">..</span><span class=\"hljs-number\">4</span>].ToCharArray()) <span class=\"hljs-keyword\">do</span>\r\n                <span class=\"hljs-keyword\">if</span> c1 <span class=\"hljs-operator\">=</span> c2 <span class=\"hljs-keyword\">then</span>\r\n                    c1C2BoolList <span class=\"hljs-operator\">&lt;-</span> List.append c1C2BoolList [<span class=\"hljs-literal\">true</span>]\r\n                <span class=\"hljs-keyword\">else</span>\r\n                    c1C2BoolList <span class=\"hljs-operator\">&lt;-</span> List.append c1C2BoolList [<span class=\"hljs-literal\">false</span>]\r\n            <span class=\"hljs-keyword\">if</span> (c1C2BoolList <span class=\"hljs-operator\">|&gt;</span> List.exists(<span class=\"hljs-keyword\">fun</span> x <span class=\"hljs-operator\">-&gt;</span> (<span class=\"hljs-built_in\">not</span> x))) <span class=\"hljs-keyword\">then</span>\r\n                prefixLen <span class=\"hljs-operator\">&lt;-</span> prefixLen <span class=\"hljs-operator\">+</span> (c1C2BoolList <span class=\"hljs-operator\">|&gt;</span> List.findIndex(<span class=\"hljs-keyword\">fun</span> x <span class=\"hljs-operator\">-&gt;</span> (<span class=\"hljs-built_in\">not</span> x)))\r\n        jaro <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">0.1</span> <span class=\"hljs-operator\">*</span> (double) prefixLen <span class=\"hljs-operator\">*</span> (<span class=\"hljs-number\">1.0</span> <span class=\"hljs-operator\">-</span> jaro)"
    }
  },
  "contributors": [
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}