{
  "slug": "hill",
  "name": "Hill",
  "categories": [
    "encoders"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Encoders/HillEncoder.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Encoders\\HillEncoder.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n<span class=\"hljs-keyword\">using</span> Algorithms.Numeric;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Encoders</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Lester S. Hill&#x27;s polygraphic substitution cipher,</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     without representing letters using mod26, using</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     corresponding &quot;(char)value&quot; instead.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HillEncoder</span> : <span class=\"hljs-title\">IEncoder</span>&lt;<span class=\"hljs-title\">double</span>[,]&gt;\r\n    {\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> GaussJordanElimination linearEquationSolver;\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HillEncoder</span>()</span> =&gt; linearEquationSolver = <span class=\"hljs-keyword\">new</span> GaussJordanElimination(); <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> add DI</span>\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">double</span>[,] key</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> preparedText = FillGaps(text);\r\n            <span class=\"hljs-keyword\">var</span> chunked = ChunkTextToArray(preparedText);\r\n            <span class=\"hljs-keyword\">var</span> splitted = SplitToCharArray(chunked);\r\n\r\n            <span class=\"hljs-keyword\">var</span> ciphered = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[chunked.Length][];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; chunked.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> vector = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[<span class=\"hljs-number\">3</span>];\r\n                Array.Copy(splitted, i * <span class=\"hljs-number\">3</span>, vector, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);\r\n                <span class=\"hljs-keyword\">var</span> product = MatrixCipher(vector, key);\r\n                ciphered[i] = product;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> merged = MergeArrayList(ciphered);\r\n\r\n            <span class=\"hljs-keyword\">return</span> BuildStringFromArray(merged);\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">double</span>[,] key</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> chunked = ChunkTextToArray(text);\r\n            <span class=\"hljs-keyword\">var</span> split = SplitToCharArray(chunked);\r\n\r\n            <span class=\"hljs-keyword\">var</span> deciphered = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[chunked.Length][];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; chunked.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> vector = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[<span class=\"hljs-number\">3</span>];\r\n                Array.Copy(split, i * <span class=\"hljs-number\">3</span>, vector, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);\r\n                <span class=\"hljs-keyword\">var</span> product = MatrixDeCipher(vector, key);\r\n                deciphered[i] = product;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> merged = MergeArrayList(deciphered);\r\n            <span class=\"hljs-keyword\">var</span> str = BuildStringFromArray(merged);\r\n\r\n            <span class=\"hljs-keyword\">return</span> UnFillGaps(str);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Converts elements from the array to their corresponding Unicode characters.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;arr&quot;&gt;</span>array of vectors.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Message.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">BuildStringFromArray</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[] arr</span>)</span> =&gt; <span class=\"hljs-keyword\">new</span>(arr.Select(c =&gt; (<span class=\"hljs-built_in\">char</span>)c).ToArray());\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Multiplies the key for the given scalar.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;vector&quot;&gt;</span>list of splitted words as numbers.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Cipher selected key.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Ciphered vector.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span>[] <span class=\"hljs-title\">MatrixCipher</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[] vector, <span class=\"hljs-built_in\">double</span>[,] key</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> multiplied = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[vector.Length];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; key.GetLength(<span class=\"hljs-number\">1</span>); i++)\r\n            {\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; key.GetLength(<span class=\"hljs-number\">0</span>); j++)\r\n                {\r\n                    multiplied[i] += key[i, j] * vector[j];\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> multiplied;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Given a list of vectors, returns a single array of elements.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;list&quot;&gt;</span>List of ciphered arrays.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>unidimensional list.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span>[] <span class=\"hljs-title\">MergeArrayList</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[][] list</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> merged = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[list.Length * <span class=\"hljs-number\">3</span>];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.Length; i++)\r\n            {\r\n                Array.Copy(list[i], <span class=\"hljs-number\">0</span>, merged, i * <span class=\"hljs-number\">3</span>, list[<span class=\"hljs-number\">0</span>].Length);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> merged;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Splits the input text message as chunks of words.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;chunked&quot;&gt;</span>chunked words list.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>spliiter char array.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">char</span>[] <span class=\"hljs-title\">SplitToCharArray</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span>[] chunked</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> splitted = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">char</span>[chunked.Length * <span class=\"hljs-number\">3</span>];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; chunked.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">3</span>; j++)\r\n                {\r\n                    splitted[i * <span class=\"hljs-number\">3</span> + j] = chunked[i].ToCharArray()[j];\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> splitted;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Chunks the input text message.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>text message.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>array of words.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">string</span>[] <span class=\"hljs-title\">ChunkTextToArray</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// To split the message into chunks</span>\r\n            <span class=\"hljs-keyword\">var</span> div = text.Length / <span class=\"hljs-number\">3</span>;\r\n            <span class=\"hljs-keyword\">var</span> chunks = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[div];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; div; i++)\r\n            {\r\n                chunks.SetValue(text.Substring(i * <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), i);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> chunks;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Fills a text message with spaces at the end</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     to enable a simple split by 3-length-word.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text Message.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Modified text Message.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">FillGaps</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> remainder = text.Length % <span class=\"hljs-number\">3</span>;\r\n            <span class=\"hljs-keyword\">return</span> remainder == <span class=\"hljs-number\">0</span> ? text : text + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-number\">3</span> - remainder);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes the extra spaces included on the cipher phase.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text message.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Deciphered Message.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">UnFillGaps</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span> =&gt; text.TrimEnd();\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds the inverse of the given matrix using a linear equation solver.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;vector&quot;&gt;</span>Splitted words vector.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key used for the cipher.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>TODO.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">double</span>[] <span class=\"hljs-title\">MatrixDeCipher</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[] vector, <span class=\"hljs-built_in\">double</span>[,] key</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// To augment the original key with the given vector.</span>\r\n            <span class=\"hljs-keyword\">var</span> augM = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; key.GetLength(<span class=\"hljs-number\">0</span>); i++)\r\n            {\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; key.GetLength(<span class=\"hljs-number\">1</span>); j++)\r\n                {\r\n                    augM[i, j] = key[i, j];\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k = <span class=\"hljs-number\">0</span>; k &lt; vector.Length; k++)\r\n            {\r\n                augM[k, <span class=\"hljs-number\">3</span>] = vector[k];\r\n            }\r\n\r\n            _ = linearEquationSolver.Solve(augM);\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span>[] { augM[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], augM[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], augM[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>] };\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}