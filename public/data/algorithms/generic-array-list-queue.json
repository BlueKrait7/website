{
  "slug": "generic-array-list-queue",
  "name": "Generic Array List Queue",
  "categories": [
    "datastructures",
    "queues"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\queues\\GenericArrayListQueue.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\queues\\GenericArrayListQueue.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.queues;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This class implements a GenericArrayListQueue.\r\n *\r\n * A GenericArrayListQueue data structure functions the same as any\r\n * specific-typed queue. The GenericArrayListQueue holds elements of types\r\n * to-be-specified at runtime. The elements that are added first are the first\r\n * to be removed (FIFO). New elements are added to the back/rear of the queue.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GenericArrayListQueue</span>&lt;T&gt; {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * The generic ArrayList for the queue T is the generic element\r\n     */</span>\r\n    ArrayList&lt;T&gt; _queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Checks if the queue has elements (not empty).\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> True if the queue has elements. False otherwise.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">hasElements</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> !_queue.isEmpty();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Checks what&#x27;s at the front of the queue.\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> If queue is not empty, element at the front of the queue.\r\n     * Otherwise, null\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">peek</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.hasElements()) {\r\n            result = _queue.get(<span class=\"hljs-number\">0</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Inserts an element of type T to the queue.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> element of type T to be added\r\n     * <span class=\"hljs-doctag\">@return</span> True if the element was added successfully\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(T element)</span> {\r\n        <span class=\"hljs-keyword\">return</span> _queue.add(element);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Retrieve what&#x27;s at the front of the queue\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> If queue is not empty, element retrieved. Otherwise, null\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">pull</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.hasElements()) {\r\n            result = _queue.remove(<span class=\"hljs-number\">0</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Main method\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> args Command line arguments\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        GenericArrayListQueue&lt;Integer&gt; queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GenericArrayListQueue</span>&lt;&gt;();\r\n        System.out.println(<span class=\"hljs-string\">&quot;Running...&quot;</span>);\r\n        <span class=\"hljs-keyword\">assert</span> queue.peek() == <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.pull() == <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.add(<span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-keyword\">assert</span> queue.peek() == <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.add(<span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-keyword\">assert</span> queue.peek() == <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.pull() == <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.peek() == <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.pull() == <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.peek() == <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-keyword\">assert</span> queue.pull() == <span class=\"hljs-literal\">null</span>;\r\n        System.out.println(<span class=\"hljs-string\">&quot;Finished.&quot;</span>);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Abhinandan Padmakar Pandey",
      "email": "53622998+AbhinandanPadmakarPandey@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Daher Daher",
      "email": "40135454+daher928@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}