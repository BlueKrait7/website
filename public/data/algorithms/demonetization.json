{
  "slug": "demonetization",
  "name": "Demonetization",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc\\demonetization.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc\\demonetization.c",
      "code": "<span class=\"hljs-comment\">// Recursion problem</span>\r\n<span class=\"hljs-comment\">// Given the denominations of currencies available in a system, find the number</span>\r\n<span class=\"hljs-comment\">// of ways an ATM machine can generate notes for an entered amount N.</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">ways</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> k)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span> || k &lt; <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">return</span> ways(n, a, k - <span class=\"hljs-number\">1</span>) + ways(n - a[k - <span class=\"hljs-number\">1</span>], a, k);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> m;\r\n    <span class=\"hljs-type\">int</span> t;\r\n    <span class=\"hljs-type\">int</span> n;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of coins? &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;m);\r\n    <span class=\"hljs-type\">int</span> *coin = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(m * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>)), i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; m; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;coin? &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;coin[i]);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;---- your requests --- \\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;amount? exit(0) &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\r\n        <span class=\"hljs-keyword\">if</span> (!n)\r\n        {\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, ways(n, coin, m));\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">free</span>(coin);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}