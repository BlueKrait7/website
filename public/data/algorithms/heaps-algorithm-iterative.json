{
  "slug": "heaps-algorithm-iterative",
  "name": "Heaps Algorithm Iterative",
  "categories": [
    "divideandconquer"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "divide_and_conquer\\heaps_algorithm_iterative.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/divide_and_conquer\\heaps_algorithm_iterative.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nHeap&#x27;s (iterative) algorithm returns the list of all permutations possible from a list.\r\nIt minimizes movement by generating each permutation from the previous one\r\nby swapping only two elements.\r\nMore information:\r\nhttps://en.wikipedia.org/wiki/Heap%27s_algorithm.\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heaps</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Pure python implementation of the iterative Heap&#x27;s algorithm,\r\n    returning all permutations of a list.\r\n    &gt;&gt;&gt; heaps([])\r\n    [()]\r\n    &gt;&gt;&gt; heaps([0])\r\n    [(0,)]\r\n    &gt;&gt;&gt; heaps([-1, 1])\r\n    [(-1, 1), (1, -1)]\r\n    &gt;&gt;&gt; heaps([1, 2, 3])\r\n    [(1, 2, 3), (2, 1, 3), (3, 1, 2), (1, 3, 2), (2, 3, 1), (3, 2, 1)]\r\n    &gt;&gt;&gt; from itertools import permutations\r\n    &gt;&gt;&gt; sorted(heaps([1,2,3])) == sorted(permutations([1,2,3]))\r\n    True\r\n    &gt;&gt;&gt; all(sorted(heaps(x)) == sorted(permutations(x))\r\n    ...     for x in ([], [0], [-1, 1], [1, 2, 3]))\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) &lt;= <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">tuple</span>(arr)]\r\n\r\n    res = []\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, arr: <span class=\"hljs-built_in\">list</span></span>):\r\n        c = [<span class=\"hljs-number\">0</span>] * n\r\n        res.append(<span class=\"hljs-built_in\">tuple</span>(arr))\r\n\r\n        i = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">while</span> i &lt; n:\r\n            <span class=\"hljs-keyword\">if</span> c[i] &lt; i:\r\n                <span class=\"hljs-keyword\">if</span> i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\r\n                    arr[<span class=\"hljs-number\">0</span>], arr[i] = arr[i], arr[<span class=\"hljs-number\">0</span>]\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    arr[c[i]], arr[i] = arr[i], arr[c[i]]\r\n                res.append(<span class=\"hljs-built_in\">tuple</span>(arr))\r\n                c[i] += <span class=\"hljs-number\">1</span>\r\n                i = <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                c[i] = <span class=\"hljs-number\">0</span>\r\n                i += <span class=\"hljs-number\">1</span>\r\n\r\n    generate(<span class=\"hljs-built_in\">len</span>(arr), arr)\r\n    <span class=\"hljs-keyword\">return</span> res\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    arr = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n    <span class=\"hljs-built_in\">print</span>(heaps(arr))\r\n"
    }
  },
  "contributors": [
    {
      "name": "Guillaume Rochedix",
      "email": "33205665+grochedix@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}