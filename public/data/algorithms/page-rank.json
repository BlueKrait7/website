{
  "slug": "page-rank",
  "name": "Page Rank",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\page_rank.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\page_rank.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nAuthor: https://github.com/bhushan-borole\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThe input graph for the algorithm is:\r\n\r\n  A B C\r\nA 0 1 1\r\nB 0 0 1\r\nC 1 0 0\r\n\r\n&quot;&quot;&quot;</span>\r\n\r\ngraph = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]]\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name</span>):\r\n        self.name = name\r\n        self.inbound = []\r\n        self.outbound = []\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_inbound</span>(<span class=\"hljs-params\">self, node</span>):\r\n        self.inbound.append(node)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_outbound</span>(<span class=\"hljs-params\">self, node</span>):\r\n        self.outbound.append(node)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;Node <span class=\"hljs-subst\">{self.name}</span>: Inbound: <span class=\"hljs-subst\">{self.inbound}</span> ; Outbound: <span class=\"hljs-subst\">{self.outbound}</span>&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">page_rank</span>(<span class=\"hljs-params\">nodes, limit=<span class=\"hljs-number\">3</span>, d=<span class=\"hljs-number\">0.85</span></span>):\r\n    ranks = {}\r\n    <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> nodes:\r\n        ranks[node.name] = <span class=\"hljs-number\">1</span>\r\n\r\n    outbounds = {}\r\n    <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> nodes:\r\n        outbounds[node.name] = <span class=\"hljs-built_in\">len</span>(node.outbound)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(limit):\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;======= Iteration <span class=\"hljs-subst\">{i + <span class=\"hljs-number\">1</span>}</span> =======&quot;</span>)\r\n        <span class=\"hljs-keyword\">for</span> j, node <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nodes):\r\n            ranks[node.name] = (<span class=\"hljs-number\">1</span> - d) + d * <span class=\"hljs-built_in\">sum</span>(\r\n                ranks[ib] / outbounds[ib] <span class=\"hljs-keyword\">for</span> ib <span class=\"hljs-keyword\">in</span> node.inbound\r\n            )\r\n        <span class=\"hljs-built_in\">print</span>(ranks)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    names = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter Names of the Nodes: &quot;</span>).split())\r\n\r\n    nodes = [Node(name) <span class=\"hljs-keyword\">for</span> name <span class=\"hljs-keyword\">in</span> names]\r\n\r\n    <span class=\"hljs-keyword\">for</span> ri, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(graph):\r\n        <span class=\"hljs-keyword\">for</span> ci, col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(row):\r\n            <span class=\"hljs-keyword\">if</span> col == <span class=\"hljs-number\">1</span>:\r\n                nodes[ci].add_inbound(names[ri])\r\n                nodes[ri].add_outbound(names[ci])\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;======= Nodes =======&quot;</span>)\r\n    <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> nodes:\r\n        <span class=\"hljs-built_in\">print</span>(node)\r\n\r\n    page_rank(nodes)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\PageRank.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\PageRank.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PageRank</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\r\n        <span class=\"hljs-type\">int</span> nodes, i, j;\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        System.out.print(<span class=\"hljs-string\">&quot;Enter the Number of WebPages: &quot;</span>);\r\n        nodes = in.nextInt();\r\n        <span class=\"hljs-type\">PageRank</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PageRank</span>();\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the Adjacency Matrix with 1-&gt;PATH &amp; 0-&gt;NO PATH Between two WebPages: &quot;</span>);\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= nodes; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">1</span>; j &lt;= nodes; j++) {\r\n                p.path[i][j] = in.nextInt();\r\n                <span class=\"hljs-keyword\">if</span> (j == i) {\r\n                    p.path[i][j] = <span class=\"hljs-number\">0</span>;\r\n                }\r\n            }\r\n        }\r\n        p.calc(nodes);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> path[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>];\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> pagerank[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[<span class=\"hljs-number\">10</span>];\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">calc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> totalNodes)</span> {\r\n\r\n        <span class=\"hljs-type\">double</span> InitialPageRank;\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">OutgoingLinks</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">DampingFactor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0.85</span>;\r\n        <span class=\"hljs-type\">double</span> TempPageRank[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[<span class=\"hljs-number\">10</span>];\r\n        <span class=\"hljs-type\">int</span> ExternalNodeNumber;\r\n        <span class=\"hljs-type\">int</span> InternalNodeNumber;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// For Traversing</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ITERATION_STEP</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n        InitialPageRank = <span class=\"hljs-number\">1</span> / totalNodes;\r\n        System.out.printf(\r\n                <span class=\"hljs-string\">&quot; Total Number of Nodes :&quot;</span> + totalNodes + <span class=\"hljs-string\">&quot;\\t Initial PageRank  of All Nodes :&quot;</span> + InitialPageRank + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n\r\n        <span class=\"hljs-comment\">// 0th ITERATION _ OR _ INITIALIZATION PHASE //</span>\r\n        <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>; k &lt;= totalNodes; k++) {\r\n            <span class=\"hljs-built_in\">this</span>.pagerank[k] = InitialPageRank;\r\n        }\r\n        System.out.printf(<span class=\"hljs-string\">&quot;\\n Initial PageRank Values , 0th Step \\n&quot;</span>);\r\n\r\n        <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>; k &lt;= totalNodes; k++) {\r\n            System.out.printf(<span class=\"hljs-string\">&quot; Page Rank of &quot;</span> + k + <span class=\"hljs-string\">&quot; is :\\t&quot;</span> + <span class=\"hljs-built_in\">this</span>.pagerank[k] + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">while</span> (ITERATION_STEP &lt;= <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// Iterations</span>\r\n        {\r\n            <span class=\"hljs-comment\">// Store the PageRank for All Nodes in Temporary Array</span>\r\n            <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>; k &lt;= totalNodes; k++) {\r\n                TempPageRank[k] = <span class=\"hljs-built_in\">this</span>.pagerank[k];\r\n                <span class=\"hljs-built_in\">this</span>.pagerank[k] = <span class=\"hljs-number\">0</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">for</span> (InternalNodeNumber = <span class=\"hljs-number\">1</span>; InternalNodeNumber &lt;= totalNodes; InternalNodeNumber++) {\r\n                <span class=\"hljs-keyword\">for</span> (ExternalNodeNumber = <span class=\"hljs-number\">1</span>; ExternalNodeNumber &lt;= totalNodes; ExternalNodeNumber++) {\r\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.path[ExternalNodeNumber][InternalNodeNumber] == <span class=\"hljs-number\">1</span>) {\r\n                        k = <span class=\"hljs-number\">1</span>;\r\n                        OutgoingLinks = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Count the Number of Outgoing Links for each ExternalNodeNumber</span>\r\n                        <span class=\"hljs-keyword\">while</span> (k &lt;= totalNodes) {\r\n                            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.path[ExternalNodeNumber][k] == <span class=\"hljs-number\">1</span>) {\r\n                                OutgoingLinks = OutgoingLinks + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Counter for Outgoing Links</span>\r\n                            }\r\n                            k = k + <span class=\"hljs-number\">1</span>;\r\n                        }\r\n                        <span class=\"hljs-comment\">// Calculate PageRank</span>\r\n                        <span class=\"hljs-built_in\">this</span>.pagerank[InternalNodeNumber] += TempPageRank[ExternalNodeNumber] * (<span class=\"hljs-number\">1</span> / OutgoingLinks);\r\n                    }\r\n                }\r\n                System.out.printf(<span class=\"hljs-string\">&quot;\\n After &quot;</span> + ITERATION_STEP + <span class=\"hljs-string\">&quot;th Step \\n&quot;</span>);\r\n\r\n                <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>; k &lt;= totalNodes; k++) {\r\n                    System.out.printf(<span class=\"hljs-string\">&quot; Page Rank of &quot;</span> + k + <span class=\"hljs-string\">&quot; is :\\t&quot;</span> + <span class=\"hljs-built_in\">this</span>.pagerank[k] + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n                }\r\n\r\n                ITERATION_STEP = ITERATION_STEP + <span class=\"hljs-number\">1</span>;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// Add the Damping Factor to PageRank</span>\r\n            <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>; k &lt;= totalNodes; k++) {\r\n                <span class=\"hljs-built_in\">this</span>.pagerank[k] = (<span class=\"hljs-number\">1</span> - DampingFactor) + DampingFactor * <span class=\"hljs-built_in\">this</span>.pagerank[k];\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// Display PageRank</span>\r\n            System.out.printf(<span class=\"hljs-string\">&quot;\\n Final Page Rank : \\n&quot;</span>);\r\n            <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">1</span>; k &lt;= totalNodes; k++) {\r\n                System.out.printf(<span class=\"hljs-string\">&quot; Page Rank of &quot;</span> + k + <span class=\"hljs-string\">&quot; is :\\t&quot;</span> + <span class=\"hljs-built_in\">this</span>.pagerank[k] + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dilrose Reji",
      "email": "70878223+dilroseR@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Bhushan Borole",
      "email": "37565807+bhushan-borole@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}