{
  "slug": "b-tree",
  "name": "B Tree",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src\\data_structures\\b_tree.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\data_structures\\b_tree.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::convert::TryFrom;\r\n<span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Debug</span>;\r\n<span class=\"hljs-keyword\">use</span> std::mem;\r\n\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Node</span>&lt;T&gt; {\r\n    keys: <span class=\"hljs-type\">Vec</span>&lt;T&gt;,\r\n    children: <span class=\"hljs-type\">Vec</span>&lt;Node&lt;T&gt;&gt;,\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">BTree</span>&lt;T&gt; {\r\n    root: Node&lt;T&gt;,\r\n    props: BTreeProps,\r\n}\r\n\r\n<span class=\"hljs-comment\">// Why to need a different Struct for props...</span>\r\n<span class=\"hljs-comment\">// Check - http://smallcultfollowing.com/babysteps/blog/2018/11/01/after-nll-interprocedural-conflicts/#fnref:improvement</span>\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">BTreeProps</span> {\r\n    degree: <span class=\"hljs-type\">usize</span>,\r\n    max_keys: <span class=\"hljs-type\">usize</span>,\r\n    mid_key_index: <span class=\"hljs-type\">usize</span>,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Node&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Ord</span>,\r\n{\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(degree: <span class=\"hljs-type\">usize</span>, _keys: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;T&gt;&gt;, _children: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;Node&lt;T&gt;&gt;&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        Node {\r\n            keys: <span class=\"hljs-keyword\">match</span> _keys {\r\n                <span class=\"hljs-title function_ invoke__\">Some</span>(_keys) =&gt; _keys,\r\n                <span class=\"hljs-literal\">None</span> =&gt; Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(degree - <span class=\"hljs-number\">1</span>),\r\n            },\r\n            children: <span class=\"hljs-keyword\">match</span> _children {\r\n                <span class=\"hljs-title function_ invoke__\">Some</span>(_children) =&gt; _children,\r\n                <span class=\"hljs-literal\">None</span> =&gt; Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(degree),\r\n            },\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_leaf</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">self</span>.children.<span class=\"hljs-title function_ invoke__\">is_empty</span>()\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">BTreeProps</span> {\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(degree: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        BTreeProps {\r\n            degree,\r\n            max_keys: degree - <span class=\"hljs-number\">1</span>,\r\n            mid_key_index: (degree - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_maxed_out</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>, node: &amp;Node&lt;T&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        node.keys.<span class=\"hljs-title function_ invoke__\">len</span>() == <span class=\"hljs-keyword\">self</span>.max_keys\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Split Child expects the Child Node to be full</span>\r\n    <span class=\"hljs-comment\">/// Move the middle_key to parent node and split the child_node&#x27;s</span>\r\n    <span class=\"hljs-comment\">/// keys/chilren_nodes into half</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">split_child</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span> + <span class=\"hljs-built_in\">Default</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>, parent: &amp;<span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;, child_index: <span class=\"hljs-type\">usize</span>) {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">child</span> = &amp;<span class=\"hljs-keyword\">mut</span> parent.children[child_index];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">middle_key</span> = child.keys[<span class=\"hljs-keyword\">self</span>.mid_key_index];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right_keys</span> = <span class=\"hljs-keyword\">match</span> child.keys.<span class=\"hljs-title function_ invoke__\">split_off</span>(<span class=\"hljs-keyword\">self</span>.mid_key_index).<span class=\"hljs-title function_ invoke__\">split_first</span>() {\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>((_first, _others)) =&gt; {\r\n                <span class=\"hljs-comment\">// We don&#x27;t need _first, as it will move to parent node.</span>\r\n                _others.<span class=\"hljs-title function_ invoke__\">to_vec</span>()\r\n            }\r\n            <span class=\"hljs-literal\">None</span> =&gt; Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(<span class=\"hljs-keyword\">self</span>.max_keys),\r\n        };\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right_children</span> = <span class=\"hljs-keyword\">if</span> !child.<span class=\"hljs-title function_ invoke__\">is_leaf</span>() {\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(child.children.<span class=\"hljs-title function_ invoke__\">split_off</span>(<span class=\"hljs-keyword\">self</span>.mid_key_index + <span class=\"hljs-number\">1</span>))\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-literal\">None</span>\r\n        };\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">new_child_node</span>: Node&lt;T&gt; = Node::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-keyword\">self</span>.degree, <span class=\"hljs-title function_ invoke__\">Some</span>(right_keys), right_children);\r\n\r\n        parent.keys.<span class=\"hljs-title function_ invoke__\">insert</span>(child_index, middle_key);\r\n        parent.children.<span class=\"hljs-title function_ invoke__\">insert</span>(child_index + <span class=\"hljs-number\">1</span>, new_child_node);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert_non_full</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span> + <span class=\"hljs-built_in\">Default</span>&gt;(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, node: &amp;<span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;, key: T) {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">index</span>: <span class=\"hljs-type\">isize</span> = isize::<span class=\"hljs-title function_ invoke__\">try_from</span>(node.keys.<span class=\"hljs-title function_ invoke__\">len</span>()).<span class=\"hljs-title function_ invoke__\">ok</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>() - <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">while</span> index &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; node.keys[index <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] &gt;= key {\r\n            index -= <span class=\"hljs-number\">1</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">u_index</span>: <span class=\"hljs-type\">usize</span> = usize::<span class=\"hljs-title function_ invoke__\">try_from</span>(index + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">ok</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\r\n        <span class=\"hljs-keyword\">if</span> node.<span class=\"hljs-title function_ invoke__\">is_leaf</span>() {\r\n            <span class=\"hljs-comment\">// Just insert it, as we know this method will be called only when node is not full</span>\r\n            node.keys.<span class=\"hljs-title function_ invoke__\">insert</span>(u_index, key);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">is_maxed_out</span>(&amp;node.children[u_index]) {\r\n                <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">split_child</span>(node, u_index);\r\n                <span class=\"hljs-keyword\">if</span> node.keys[u_index] &lt; key {\r\n                    u_index += <span class=\"hljs-number\">1</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">insert_non_full</span>(&amp;<span class=\"hljs-keyword\">mut</span> node.children[u_index], key);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">traverse_node</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Debug</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>, node: &amp;Node&lt;T&gt;, depth: <span class=\"hljs-type\">usize</span>) {\r\n        <span class=\"hljs-keyword\">if</span> node.<span class=\"hljs-title function_ invoke__\">is_leaf</span>() {\r\n            <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">&quot; {0:{&lt;1$}{2:?}{0:}&lt;1$} &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>, depth, node.keys);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">_depth</span> = depth + <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-title function_ invoke__\">for</span> (index, key) <span class=\"hljs-keyword\">in</span> node.keys.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\r\n                <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">traverse_node</span>(&amp;node.children[index], _depth);\r\n                <span class=\"hljs-comment\">// Check https://doc.rust-lang.org/std/fmt/index.html</span>\r\n                <span class=\"hljs-comment\">// And https://stackoverflow.com/a/35280799/2849127</span>\r\n                <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">&quot;{0:{&lt;1$}{2:?}{0:}&lt;1$}&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>, depth, key);\r\n            }\r\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">traverse_node</span>(node.children.<span class=\"hljs-title function_ invoke__\">last</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), _depth);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; BTree&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span> + <span class=\"hljs-built_in\">Debug</span> + <span class=\"hljs-built_in\">Default</span>,\r\n{\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(branch_factor: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">degree</span> = <span class=\"hljs-number\">2</span> * branch_factor;\r\n        BTree {\r\n            root: Node::<span class=\"hljs-title function_ invoke__\">new</span>(degree, <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>),\r\n            props: BTreeProps::<span class=\"hljs-title function_ invoke__\">new</span>(degree),\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, key: T) {\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.props.<span class=\"hljs-title function_ invoke__\">is_maxed_out</span>(&amp;<span class=\"hljs-keyword\">self</span>.root) {\r\n            <span class=\"hljs-comment\">// Create an empty root and split the old root...</span>\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">new_root</span> = Node::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-keyword\">self</span>.props.degree, <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>);\r\n            mem::<span class=\"hljs-title function_ invoke__\">swap</span>(&amp;<span class=\"hljs-keyword\">mut</span> new_root, &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.root);\r\n            <span class=\"hljs-keyword\">self</span>.root.children.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">0</span>, new_root);\r\n            <span class=\"hljs-keyword\">self</span>.props.<span class=\"hljs-title function_ invoke__\">split_child</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.root, <span class=\"hljs-number\">0</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">self</span>.props.<span class=\"hljs-title function_ invoke__\">insert_non_full</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.root, key);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">traverse</span>(&amp;<span class=\"hljs-keyword\">self</span>) {\r\n        <span class=\"hljs-keyword\">self</span>.props.<span class=\"hljs-title function_ invoke__\">traverse_node</span>(&amp;<span class=\"hljs-keyword\">self</span>.root, <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-built_in\">println!</span>();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">search</span>(&amp;<span class=\"hljs-keyword\">self</span>, key: T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">current_node</span> = &amp;<span class=\"hljs-keyword\">self</span>.root;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">index</span>: <span class=\"hljs-type\">isize</span>;\r\n        <span class=\"hljs-keyword\">loop</span> {\r\n            index = isize::<span class=\"hljs-title function_ invoke__\">try_from</span>(current_node.keys.<span class=\"hljs-title function_ invoke__\">len</span>()).<span class=\"hljs-title function_ invoke__\">ok</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>() - <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">while</span> index &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; current_node.keys[index <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] &gt; key {\r\n                index -= <span class=\"hljs-number\">1</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">u_index</span>: <span class=\"hljs-type\">usize</span> = usize::<span class=\"hljs-title function_ invoke__\">try_from</span>(index + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">ok</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\r\n            <span class=\"hljs-keyword\">if</span> index &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; current_node.keys[u_index - <span class=\"hljs-number\">1</span>] == key {\r\n                <span class=\"hljs-keyword\">break</span> <span class=\"hljs-literal\">true</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> current_node.<span class=\"hljs-title function_ invoke__\">is_leaf</span>() {\r\n                <span class=\"hljs-keyword\">break</span> <span class=\"hljs-literal\">false</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                current_node = &amp;current_node.children[u_index];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> test {\r\n    <span class=\"hljs-keyword\">use</span> super::BTree;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_search</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span> = BTree::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-number\">2</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">10</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">20</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">30</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">5</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">6</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">7</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">11</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">12</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">15</span>);\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">search</span>(<span class=\"hljs-number\">15</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(tree.<span class=\"hljs-title function_ invoke__\">search</span>(<span class=\"hljs-number\">16</span>), <span class=\"hljs-literal\">false</span>);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Boyd Johnson",
      "email": "boydjohnson@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Subroto",
      "email": "shub1493biswas@gmail.com",
      "commits": 1
    },
    {
      "name": "Matthias Gilch",
      "email": "matthias.gilch.mg@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Femi Novia Lina",
      "email": "77434812+FemiNoviaLina@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "liyl",
      "email": "30368453+yaolin-Li@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Milad",
      "email": "14594374+Miraddo@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}