{
  "slug": "create-and-detect-loop",
  "name": "Create And Detect Loop",
  "categories": [
    "datastructures",
    "list"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\lists\\CreateAndDetectLoop.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\lists\\CreateAndDetectLoop.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.lists;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreateAndDetectLoop</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Prints the linked list.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span>\thead\thead node of the linked list\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printList</span><span class=\"hljs-params\">(Node head)</span> {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> head;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span>) {\r\n            System.out.print(cur.value + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n            cur = cur.next;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Creates a loop in the linked list.\r\n     *\r\n     * <span class=\"hljs-doctag\">@see</span>\r\n     * \t&lt;a href=&quot;https://www.geeksforgeeks.org/make-loop-k-th-position-linked-list/&quot;&gt;\r\n     * GeeksForGeeks: Make a loop at K-th position&lt;/a&gt;\r\n     * <span class=\"hljs-doctag\">@param</span>\thead\thead node of the linked list\r\n     * <span class=\"hljs-doctag\">@param</span>\tk\tposition of node where loop is to be created\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">createLoop</span><span class=\"hljs-params\">(Node head, <span class=\"hljs-type\">int</span> k)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> head;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">while</span> (count &lt; k) { \t\t<span class=\"hljs-comment\">// Traverse the list till the kth node</span>\r\n            temp = temp.next;\r\n            count++;\r\n        }\r\n\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">connectedPoint</span> <span class=\"hljs-operator\">=</span> temp;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (temp.next != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// Traverse remaining nodes</span>\r\n        {\r\n            temp = temp.next;\r\n        }\r\n\r\n        temp.next = connectedPoint; <span class=\"hljs-comment\">// Connect last node to k-th element</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Detects the presence of a loop in the linked list.\r\n     *\r\n     * <span class=\"hljs-doctag\">@see</span>\r\n     * \t&lt;a href=&quot;https://en.wikipedia.org/wiki/Cycle_detection#Floyd&#x27;s_tortoise_and_hare&quot;&gt;\r\n     * Floyd&#x27;s Cycle Detection Algorithm&lt;/a&gt;\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> head the head node of the linked list\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> true if loop exists else false\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">detectLoop</span><span class=\"hljs-params\">(Node head)</span> {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">sptr</span> <span class=\"hljs-operator\">=</span> head;\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">fptr</span> <span class=\"hljs-operator\">=</span> head;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (fptr != <span class=\"hljs-literal\">null</span> &amp;&amp; fptr.next != <span class=\"hljs-literal\">null</span>) {\r\n            sptr = sptr.next;\r\n            fptr = fptr.next.next;\r\n            <span class=\"hljs-keyword\">if</span> (fptr == sptr) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">SinglyLinkedList</span> <span class=\"hljs-variable\">singlyLinkedList</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>();\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the number of elements to be inserted: &quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\r\n        System.out.printf(<span class=\"hljs-string\">&quot;Enter the %d elements: \\n&quot;</span>, n);\r\n        <span class=\"hljs-keyword\">while</span> (n-- &gt; <span class=\"hljs-number\">0</span>) {\r\n            singlyLinkedList.insert(sc.nextInt());\r\n        }\r\n\r\n        System.out.print(<span class=\"hljs-string\">&quot;Given list: &quot;</span>);\r\n        printList(singlyLinkedList.getHead());\r\n        System.out.println();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the location to generate loop: &quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\r\n\r\n        createLoop(singlyLinkedList.getHead(), k);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (detectLoop(singlyLinkedList.getHead())) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Loop found&quot;</span>);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            System.out.println(<span class=\"hljs-string\">&quot;No loop found&quot;</span>);\r\n        }\r\n\r\n        sc.close();\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shivam Shrey",
      "email": "31056227+shivamshrey@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}