{
  "slug": "knuth-morris-prat",
  "name": "Knuth Morris Prat",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "dart": {
      "dir": "strings\\knuth_morris_prat.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/strings\\knuth_morris_prat.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Preprocess pattern to identify any suffixes that are identical to prefixes</span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">in the given string.</span></span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Build a pattern which tells us where to continue iteration from if we</span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\"> get a mismatch between the character</span></span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Step through the text one character at a time and compare it to a character in</span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">the pattern updating our location within the pattern if necessary</span></span>\r\n<span class=\"hljs-built_in\">bool</span> stringCompare(<span class=\"hljs-built_in\">String</span> string, <span class=\"hljs-built_in\">String</span> subString) {\r\n  <span class=\"hljs-keyword\">if</span> (subString.isEmpty) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\r\n  }\r\n\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; pattern =\r\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;.generate(subString.length, (<span class=\"hljs-built_in\">int</span> index) =&gt; <span class=\"hljs-number\">-1</span>);\r\n\r\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>;\r\n\r\n  <span class=\"hljs-keyword\">while</span> (i &lt; subString.length) {\r\n    <span class=\"hljs-keyword\">if</span> (subString[i] == subString[j]) {\r\n      pattern[i] = j;\r\n      i++;\r\n      j++;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j &gt; <span class=\"hljs-number\">0</span>) {\r\n      j = pattern[j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      i++;\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> stringCompareHelper(string, subString, pattern);\r\n}\r\n\r\n<span class=\"hljs-built_in\">bool</span> stringCompareHelper(<span class=\"hljs-built_in\">String</span> string, <span class=\"hljs-built_in\">String</span> subString, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; pattern) {\r\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n  <span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>;\r\n\r\n  <span class=\"hljs-keyword\">while</span> (i + subString.length - j &lt;= string.length) {\r\n    <span class=\"hljs-keyword\">if</span> (string[i] == subString[j]) {\r\n      <span class=\"hljs-keyword\">if</span> (j == subString.length - <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\r\n      }\r\n      i++;\r\n      j++;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j &gt; <span class=\"hljs-number\">0</span>) {\r\n      j = pattern[j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      i++;\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-built_in\">String</span> string;\r\n  <span class=\"hljs-built_in\">String</span> subString;\r\n\r\n  test((<span class=\"hljs-string\">&#x27;KMP: &#x27;</span>), () {\r\n    string = <span class=\"hljs-string\">&#x27;aefoaefcdaefcdaed&#x27;</span>;\r\n    subString = <span class=\"hljs-string\">&#x27;aefcdaed&#x27;</span>;\r\n    expect(stringCompare(string, subString), isTrue);\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;KMP: &#x27;</span>), () {\r\n    string = <span class=\"hljs-string\">&#x27;testwafwafawfawfawfawfawfawfawfa&#x27;</span>;\r\n    subString = <span class=\"hljs-string\">&#x27;fawfawfawfawfa&#x27;</span>;\r\n    expect(stringCompare(string, subString), isTrue);\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;KMP: &#x27;</span>), () {\r\n    string = <span class=\"hljs-string\">&#x27;aabc&#x27;</span>;\r\n    subString = <span class=\"hljs-string\">&#x27;abc&#x27;</span>;\r\n    expect(stringCompare(string, subString), isTrue);\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;KMP: &#x27;</span>), () {\r\n    string = <span class=\"hljs-string\">&#x27;adafccfefbbbfeeccbcfd&#x27;</span>;\r\n    subString = <span class=\"hljs-string\">&#x27;ecb&#x27;</span>;\r\n    expect(stringCompare(string, subString), isFalse);\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;KMP: &#x27;</span>), () {\r\n    string = <span class=\"hljs-string\">&#x27;akash&#x27;</span>;\r\n    subString = <span class=\"hljs-string\">&#x27;christy&#x27;</span>;\r\n    expect(stringCompare(string, subString), isFalse);\r\n  });\r\n  test((<span class=\"hljs-string\">&#x27;KMP: &#x27;</span>), () {\r\n    string = <span class=\"hljs-string\">&#x27;&#x27;</span>;\r\n    subString = <span class=\"hljs-string\">&#x27;asd&#x27;</span>;\r\n    expect(stringCompare(string, subString), isFalse);\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;KMP: &#x27;</span>), () {\r\n    string = <span class=\"hljs-string\">&#x27;asd&#x27;</span>;\r\n    subString = <span class=\"hljs-string\">&#x27;&#x27;</span>;\r\n    expect(stringCompare(string, subString), isFalse);\r\n  });\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}