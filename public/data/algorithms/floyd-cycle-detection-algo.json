{
  "slug": "floyd-cycle-detection-algo",
  "name": "Floyd Cycle Detection Algo",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "search\\floyd_cycle_detection_algo.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search\\floyd_cycle_detection_algo.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [Floyd&#x27;s Cycle\r\n * Detection](https://en.wikipedia.org/wiki/Cycle_detection) algorithm\r\n * @details\r\n * Given an array of integers containing &#x27;n + 1&#x27; integers, where each\r\n * integer is in the range [1, n] inclusive. If there is only one duplicate\r\n * number in the input array, this algorithm returns the duplicate number in\r\n * O(1) space and the time complexity is less than O(n^2) without modifying the\r\n * original array, otherwise, it returns -1.\r\n * @author [Swastika Gupta](https://github.com/Swastyy)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace search\r\n * @brief Search algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> search {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace cycle_detection\r\n * @brief Functions for the [Floyd&#x27;s Cycle\r\n * Detection](https://en.wikipedia.org/wiki/Cycle_detection) algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> cycle_detection {\r\n<span class=\"hljs-comment\">/**\r\n * @brief The main function implements search algorithm\r\n * @tparam T type of array\r\n * @param in_arr the input array\r\n * @param n size of array\r\n * @returns the duplicate number\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int32_t</span> <span class=\"hljs-title\">duplicateNumber</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;T&gt; &amp;in_arr, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint32_t</span> &amp;n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span> ||\r\n        n == <span class=\"hljs-number\">1</span>) {  <span class=\"hljs-comment\">// to find duplicate in an array its size should be atleast 2</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n    }\r\n    <span class=\"hljs-type\">uint32_t</span> tortoise = in_arr[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">// variable tortoise is used for the longer</span>\r\n                                    <span class=\"hljs-comment\">// jumps in the array</span>\r\n    <span class=\"hljs-type\">uint32_t</span> hare =\r\n        in_arr[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">// variable hare is used for shorter jumps in the array</span>\r\n    <span class=\"hljs-keyword\">do</span> {\r\n        tortoise = in_arr[tortoise];\r\n        hare = in_arr[in_arr[hare]];\r\n    } <span class=\"hljs-keyword\">while</span> (tortoise != hare);\r\n    tortoise = in_arr[<span class=\"hljs-number\">0</span>];\r\n    <span class=\"hljs-keyword\">while</span> (tortoise != hare) {\r\n        tortoise = in_arr[tortoise];\r\n        hare = in_arr[hare];\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> tortoise;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace cycle_detection</span>\r\n}  <span class=\"hljs-comment\">// namespace search</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// 1st test</span>\r\n    <span class=\"hljs-comment\">// [3, 4, 8, 5, 9, 1, 2, 6, 7, 4] return 4</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array1 = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>};\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1... &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(search::cycle_detection::<span class=\"hljs-built_in\">duplicateNumber</span>(array1, array1.<span class=\"hljs-built_in\">size</span>()) ==\r\n           <span class=\"hljs-number\">4</span>);  <span class=\"hljs-comment\">// here the duplicate number is 4</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 2nd test</span>\r\n    <span class=\"hljs-comment\">// [1, 2, 3, 4, 2] return 2</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array2 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>};\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2... &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(search::cycle_detection::<span class=\"hljs-built_in\">duplicateNumber</span>(array2, array2.<span class=\"hljs-built_in\">size</span>()) ==\r\n           <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// here the duplicate number is 2</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 3rd test</span>\r\n    <span class=\"hljs-comment\">// [] return -1</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array3 = {};\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3... &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(search::cycle_detection::<span class=\"hljs-built_in\">duplicateNumber</span>(array3, array3.<span class=\"hljs-built_in\">size</span>()) ==\r\n           <span class=\"hljs-number\">-1</span>);  <span class=\"hljs-comment\">// since the input array is empty no duplicate number exists in</span>\r\n                 <span class=\"hljs-comment\">// this case</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ERR !",
      "email": "75872316+amino19@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}