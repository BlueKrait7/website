{
  "slug": "bankers-algorithm",
  "name": "Bankers Algorithm",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\BankersAlgorithm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\BankersAlgorithm.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This file contains an implementation of BANKER&#x27;S ALGORITM Wikipedia:\r\n * https://en.wikipedia.org/wiki/Banker%27s_algorithm\r\n *\r\n * The algorithm for finding out whether or not a system is in a safe state can\r\n * be described as follows: 1. Let Work and Finish be vectors of length ‘m’ and\r\n * ‘n’ respectively. Initialize: Work= Available Finish [i]=false; for\r\n * i=1,2,……,n 2. Find an i such that both a) Finish [i]=false b) Need_i&lt;=work\r\n *\r\n * if no such i exists goto step (4) 3. Work=Work + Allocation_i Finish[i]= true\r\n * goto step(2) 4. If Finish[i]=true for all i, then the system is in safe\r\n * state.\r\n *\r\n * Time Complexity: O(n*n*m) Space Complexity: O(n*m) where n = number of\r\n * processes and m = number of resources.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> AMRITESH ANAND (https://github.com/amritesh19)\r\n */</span>\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankersAlgorithm</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method finds the need of each process\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">calculateNeed</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> needArray[][], <span class=\"hljs-type\">int</span> maxArray[][], <span class=\"hljs-type\">int</span> allocationArray[][], <span class=\"hljs-type\">int</span> totalProcess, <span class=\"hljs-type\">int</span> totalResources)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; totalProcess; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; totalResources; j++) {\r\n                needArray[i][j] = maxArray[i][j] - allocationArray[i][j];\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method find the system is in safe state or not\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> processes[] int array of processes (0...n-1), size = n\r\n     * <span class=\"hljs-doctag\">@param</span> availableArray[] int array of number of instances of each\r\n     * resource, size = m\r\n     * <span class=\"hljs-doctag\">@param</span> maxArray[][] int matrix(2-D array) of maximum demand of each\r\n     * process in a system, size = n*m\r\n     * <span class=\"hljs-doctag\">@param</span> allocationArray[][] int matrix(2-D array) of the number of\r\n     * resources of each type currently allocated to each process, size = n*m\r\n     * <span class=\"hljs-doctag\">@param</span> totalProcess number of total processes, n\r\n     * <span class=\"hljs-doctag\">@param</span> totalResources number of total resources, m\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> boolean if the system is in safe state or not\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">checkSafeSystem</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> processes[], <span class=\"hljs-type\">int</span> availableArray[], <span class=\"hljs-type\">int</span> maxArray[][], <span class=\"hljs-type\">int</span> allocationArray[][], <span class=\"hljs-type\">int</span> totalProcess, <span class=\"hljs-type\">int</span> totalResources)</span> {\r\n        <span class=\"hljs-type\">int</span>[][] needArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[totalProcess][totalResources];\r\n\r\n        calculateNeed(needArray, maxArray, allocationArray, totalProcess, totalResources);\r\n\r\n        <span class=\"hljs-type\">boolean</span>[] finishProcesses = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">boolean</span>[totalProcess];\r\n\r\n        <span class=\"hljs-type\">int</span>[] safeSequenceArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[totalProcess];\r\n\r\n        <span class=\"hljs-type\">int</span>[] workArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[totalResources];\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; totalResources; i++) {\r\n            workArray[i] = availableArray[i];\r\n        }\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">// While all processes are not finished or system is not in safe state.</span>\r\n        <span class=\"hljs-keyword\">while</span> (count &lt; totalProcess) {\r\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">foundSafeSystem</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; m &lt; totalProcess; m++) {\r\n                <span class=\"hljs-keyword\">if</span> (finishProcesses[m] == <span class=\"hljs-literal\">false</span>) {\r\n                    <span class=\"hljs-type\">int</span> j;\r\n\r\n                    <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; totalResources; j++) {\r\n                        <span class=\"hljs-keyword\">if</span> (needArray[m][j] &gt; workArray[j]) {\r\n                            <span class=\"hljs-keyword\">break</span>;\r\n                        }\r\n                    }\r\n\r\n                    <span class=\"hljs-keyword\">if</span> (j == totalResources) {\r\n                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; k &lt; totalResources; k++) {\r\n                            workArray[k] += allocationArray[m][k];\r\n                        }\r\n\r\n                        safeSequenceArray[count++] = m;\r\n\r\n                        finishProcesses[m] = <span class=\"hljs-literal\">true</span>;\r\n\r\n                        foundSafeSystem = <span class=\"hljs-literal\">true</span>;\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// If we could not find a next process in safe sequence.</span>\r\n            <span class=\"hljs-keyword\">if</span> (foundSafeSystem == <span class=\"hljs-literal\">false</span>) {\r\n                System.out.print(<span class=\"hljs-string\">&quot;The system is not in the safe state because lack of resources&quot;</span>);\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n\r\n        System.out.print(<span class=\"hljs-string\">&quot;The system is in safe sequence and the sequence is as follows: &quot;</span>);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; totalProcess; i++) {\r\n            System.out.print(<span class=\"hljs-string\">&quot;P&quot;</span> + safeSequenceArray[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This is main method of Banker&#x27;s Algorithm\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">int</span> numberOfProcesses, numberOfResources;\r\n\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter total number of processes&quot;</span>);\r\n        numberOfProcesses = sc.nextInt();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter total number of resources&quot;</span>);\r\n        numberOfResources = sc.nextInt();\r\n\r\n        <span class=\"hljs-type\">int</span> processes[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[numberOfProcesses];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; numberOfProcesses; i++) {\r\n            processes[i] = i;\r\n        }\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;--Enter the availability of--&quot;</span>);\r\n\r\n        <span class=\"hljs-type\">int</span> availableArray[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[numberOfResources];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; numberOfResources; i++) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;resource &quot;</span> + i + <span class=\"hljs-string\">&quot;: &quot;</span>);\r\n            availableArray[i] = sc.nextInt();\r\n        }\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;--Enter the maximum matrix--&quot;</span>);\r\n\r\n        <span class=\"hljs-type\">int</span> maxArray[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[numberOfProcesses][numberOfResources];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; numberOfProcesses; i++) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;For process &quot;</span> + i + <span class=\"hljs-string\">&quot;: &quot;</span>);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; numberOfResources; j++) {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Enter the maximum instances of resource &quot;</span> + j);\r\n                maxArray[i][j] = sc.nextInt();\r\n            }\r\n        }\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;--Enter the allocation matrix--&quot;</span>);\r\n\r\n        <span class=\"hljs-type\">int</span> allocationArray[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[numberOfProcesses][numberOfResources];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; numberOfProcesses; i++) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;For process &quot;</span> + i + <span class=\"hljs-string\">&quot;: &quot;</span>);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; numberOfResources; j++) {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Allocated instances of resource &quot;</span> + j);\r\n                allocationArray[i][j] = sc.nextInt();\r\n            }\r\n        }\r\n\r\n        checkSafeSystem(processes, availableArray, maxArray, allocationArray, numberOfProcesses, numberOfResources);\r\n\r\n        sc.close();\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/*\r\n    Example: \r\n    n = 5\r\n    m = 3\r\n\r\n    Process     Allocation      Max       Available\r\n                0   1   2    0   1   2    0   1   2\r\n\r\n        0       0   1   0    7   5   3    3   3   2\r\n        1       2   0   0    3   2   2 \r\n        2       3   0   2    9   0   2\r\n        3       2   1   1    2   2   2\r\n        4       0   0   2    4   3   3\r\n\r\n    Result: The system is in safe sequence and the sequence is as follows: P1, P3, P4, P0, P2 \r\n */</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Amritesh Anand",
      "email": "73696688+amritesh19@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}