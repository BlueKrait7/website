{
  "slug": "coin-change",
  "name": "Coin Change",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {
    "en": "<h4>Problem Statement</h4>\n<p>Given a value <code>N</code>, if we want to make change for <code>N</code> cents, and we have infinite supply of each of <code>S = {S1, S2, .. , Sm}</code> valued coins, how many ways can we make the change? The order of coins doesn’t matter.</p>\n<h4>Approach</h4>\n<p>Let the <code>dp[i]</code> be the length of the coin change of prefix <code>N[1..i]</code>. Our answer is <code>dp[N]</code>.\r\nWe fill <code>dp[0]</code> as 1 because there is only one way to get 0 coins (We pick no coins).</p>\n<p>Now let's try calculate <code>dp[i]</code> for any <code>i</code>. <code>dp[0..i]</code> will store each sub problems from <code>0</code> to <code>N</code>. That's why the answer will be <code>dp[N]</code>. First, we need to iterate each coin types to pick them one-by-one. Then we iterate the sub problems from current coin that we pick before  to <code>N</code> cents. That's why we must make dp table with <code>N</code> columns.</p>\n<p>This is the codes for the Coin Change algorithm:</p>\n<pre><code class=\"hljs language-json\">    for coin_val in S:\r\n        for i in range(coin_val, n + <span class=\"hljs-number\">1</span>):\r\n            dp[i] += dp[i - coin_val]\n</code></pre>\n<p>In the second iteration, for every cent that can be exchanged, we take it by subtracting the i-th column by the value of the coin we take and adding it into the current column. So <code>dp[i]</code> will store the current sub problem.</p>\n<h4>Time Complexity</h4>\n<p><code>O(N * S)</code> in any case</p>\n<h4>Space Complexity</h4>\n<p><code>O(N)</code> - simple implementation. We only need 1D array to store the answer.</p>\n<h4>Example</h4>\n<p>Let's say we have 3 coin types <code>[1,2,3]</code> and we want to change for <code>7</code> cents. So we will define our table like this.</p>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\n</code></pre>\n<p>0th column will store 1 since there is only one way to get 0 cents.</p>\n<ul>\n<li>For the first iteration we take a coin that has a value of 1. Then for all sub problems, there is only one way to make change. For 7 cents, the only way is <code>{1,1,1,1,1,1,1}</code>. On the final iteration, our table be like:</li>\n</ul>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]\n</code></pre>\n<ul>\n<li>For the second iteration, we take a coin that has a value of 2. From here, all sub problems that can be divided by 2 will store another new way to make change. So, when the iteration stopped at 2nd column it will be like <code>dp[2] += dp[0]</code>. We know that <code>dp[0]</code> stored a value of 1. Thus, dp[2] will store the value of <code>1 + 1 = 2</code>. From here we know that for 2 cents, there are 2 ways <code>{1,1}</code> and <code>{2}</code>. And this operation will continue. Now our table be like:</li>\n</ul>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n<p>4 ways to make 7 cents using value of 1 and 2. <code>{{1,1,1,1,1,1,1}, {1,1,1,1,1,2}, {1,1,1,2,2}, {1,2,2,2}}</code></p>\n<ul>\n<li>For the final iteration (3rd iteration), we take a coin that has a value of 3. Like before, now all the columns that can be divided by 3 will store another new way. And the final result will be like:</li>\n</ul>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]\n</code></pre>\n<p>So the final answer is <strong>8</strong>. 8 ways to make change of 7 cents using all coin types. <code>{{1,1,1,1,1,1,1}, {1,1,1,1,1,2}, {1,1,1,2,2}, {1,2,2,2}, {1,1,1,1,3}, {1,3,3}, {2,2,3}, {1,1,2,3}}</code></p>\n<h4>Code Implementation Link</h4>\n<p><a href=\"https://github.com/TheAlgorithms/Python/blob/master/dynamic_programming/coin_change.py\">Python</a></p>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=DJ4a7cmjZY0\">Total Unique Ways To Make Change by Back To Back SWE</a></p>",
    "es": "<h4>Declaración de problema</h4>\n<p>Dado un valor <code>N</code>, si queremos hacer un cambio para los centavos <code>N</code>, y tenemos una oferta infinita de cada una de las monedas valoradas <code>S = {S1, S2, .. , Sm}</code>, ¿cuántas maneras podemos hacer el cambio? El orden de las monedas no importa.</p>\n<h4>Enfoque</h4>\n<p>Deje que el <code>dp[i]</code> sea la longitud del cambio de moneda del prefijo <code>N[1..i]</code>. Nuestra respuesta es <code>dp[N]</code>.\r\nLlenamos <code>dp[0]</code> como 1 porque sólo hay una manera de conseguir 0 monedas (No recogemos monedas).</p>\n<p>Ahora vamos a tratar de calcular <code>dp[i]</code> para cualquier <code>i</code>. <code>dp[0..i]</code> almacenará cada sub-problema de <code>0</code> a <code>N</code>. Es por eso que la respuesta será <code>dp[N]</code>. En primer lugar, necesitamos iterar cada tipo de moneda para elegirlos uno por uno. Luego iteramos los sub problemas de la moneda actual que recogemos antes a los centavos <code>N</code>. Es por eso que debemos hacer la tabla dp con columnas <code>N</code>.</p>\n<p>Estos son los códigos para el algoritmo coin change:</p>\n<pre><code class=\"hljs language-json\">    para coin_val en S:\r\n        para i en rango (coin_val, n + <span class=\"hljs-number\">1</span>):\r\n            dp[i] += dp[i - coin_val]\n</code></pre>\n<p>En la segunda iteración, por cada centavo que se puede intercambiar, lo tomamos restando la columna enésima por el valor de la moneda que tomamos y añadiéndolo a la columna actual. Así que <code>dp[i]</code> almacenará el sub problema actual.</p>\n<h4>Complejidad temporal</h4>\n<p><code>O(N * S)</code> - en cualquier caso</p>\n<h4>Complejidad espacial</h4>\n<p><code>O(N)</code> - implementación simple. Sólo necesitamos arreglos de discos 1D para almacenar la respuesta.</p>\n<h4>Ejemplo</h4>\n<p>Digamos que tenemos 3 tipos de monedas <code>[1,2,3]</code>, y queremos cambiarlas por 7 centavos. Así que definiremos nuestra mesa así:</p>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\n</code></pre>\n<p>0ª columna almacenará 1, ya que sólo hay una manera de obtener 0 centavos.</p>\n<ul>\n<li>Para la primera iteración, tomamos una moneda que tiene un valor de 1. Entonces para todos los sub problemas, sólo hay una manera de hacer el cambio. Por 7 céntimos, la única vía es <code>{1,1,1,1,1,1,1}</code>. En la iteración final, nuestra mesa es como esta:</li>\n</ul>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]\n</code></pre>\n<ul>\n<li>Para la segunda iteración, tomamos una moneda que tiene un valor de 2. A partir de aquí, todos los sub problemas que se pueden dividir por 2 almacenarán otra nueva forma de hacer un cambio. Por lo tanto, cuando la iteración se detuvo en la 2ª columna será como <code>dp[2] += dp[0]</code>. Sabemos que <code>dp[0]</code> almacenaba un valor de 1. Por lo tanto, dp[2] almacenará el valor de <code>1 + 1 = 2</code>. Desde aquí sabemos que por 2 centavos, hay 2 maneras <code>{1,1}</code> y <code>{2}</code>. Y esta operación continuará. Ahora nuestra mesa es como esta:</li>\n</ul>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n<p>4 maneras de ganar 7 centavos usando el valor de 1 y 2. <code>{{1,1,1,1,1,1,1}, {1,1,1,1,1,2}, {1,1,1,2,2}, {1,2,2,2}}</code></p>\n<ul>\n<li>Para la iteración final (3ª iteración), tomamos una moneda que tiene un valor de 3. Como antes, ahora todas las columnas que se pueden vided por 3 almacenarán otra nueva manera. Y el resultado final, será así:</li>\n</ul>\n<pre><code class=\"hljs language-json\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]\n</code></pre>\n<p>Así que la respuesta final es <strong>8</strong>. 8 maneras de hacer un cambio de 7 centavos usando todos los tipos de monedas. <code>{{1,1,1,1,1,1,1}, {1,1,1,1,1,2}, {1,1,1,2,2}, {1,2,2,2}, {1,1,1,1,3}, {1,3,3}, {2,2,3}, {1,1,2,3}}</code></p>\n<h4>Enlace de implementación de código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/dynamic_programming/coin_change.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/dynamic_programming/coin_change.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/DynamicProgramming/CoinChange.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Dart/blob/master/dynamic_programming/coin_change.dart\">Dart</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/dynamic_programming/coin_change.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Scala/blob/master/src/main/scala/DynamicProgramming/CoinChange.scala\">Scala</a></li>\n</ul>\n<h4>Vídeo de explicación</h4>\n<p><a href=\"https://www.youtube.com/watch?v=DJ4a7cmjZY0\">Formas únicas totales de hacer el cambio de espaldas a espaldas SWE</a></p>"
  },
  "implementations": {
    "javascript": {
      "dir": "Dynamic-Programming\\tests\\CoinChange.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming\\tests\\CoinChange.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { change, coinChangeMin } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../CoinChange&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Base Case 1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> coins = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>]\r\n  <span class=\"hljs-keyword\">const</span> amount = <span class=\"hljs-number\">0</span>\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">change</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">coinChangeMin</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n})\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Base Case 2&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> coins = []\r\n  <span class=\"hljs-keyword\">const</span> amount = <span class=\"hljs-number\">100</span>\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">change</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">coinChangeMin</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(-<span class=\"hljs-number\">1</span>)\r\n})\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Test Case 1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> coins = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\r\n  <span class=\"hljs-keyword\">const</span> amount = <span class=\"hljs-number\">12</span>\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">change</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">coinChangeMin</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>)\r\n})\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Test Case 2&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> coins = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">15</span>]\r\n  <span class=\"hljs-keyword\">const</span> amount = <span class=\"hljs-number\">45</span>\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">change</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">12372</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">coinChangeMin</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>)\r\n})\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Test Case 3&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> coins = [<span class=\"hljs-number\">2</span>]\r\n  <span class=\"hljs-keyword\">const</span> amount = <span class=\"hljs-number\">3</span>\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">change</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">coinChangeMin</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(-<span class=\"hljs-number\">1</span>)\r\n})\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Test Case 4&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> coins = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>]\r\n  <span class=\"hljs-keyword\">const</span> amount = <span class=\"hljs-number\">500</span>\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">change</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">35502874</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">coinChangeMin</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">46</span>)\r\n})\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Test Case 5&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> coins = [<span class=\"hljs-number\">10</span>]\r\n  <span class=\"hljs-keyword\">const</span> amount = <span class=\"hljs-number\">10</span>\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">change</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">coinChangeMin</span>(coins, amount)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming\\coin_change.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\coin_change.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\r\n\r\n<span class=\"hljs-comment\">// Function to find the Minimum number of coins required to get Sum S</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findMinCoins</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> N)</span> </span>{\r\n    <span class=\"hljs-comment\">// dp[i] = no of coins required to get a total of i</span>\r\n    <span class=\"hljs-type\">int</span> dp[N + <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-comment\">// 0 coins are needed for 0 sum</span>\r\n\r\n    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= N; i++) {\r\n        <span class=\"hljs-comment\">// initialize minimum number of coins needed to infinity</span>\r\n        dp[i] = INT_MAX;\r\n        <span class=\"hljs-type\">int</span> res = INT_MAX;\r\n\r\n        <span class=\"hljs-comment\">// do for each coin</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>; c &lt; n; c++) {\r\n            <span class=\"hljs-keyword\">if</span> (i - arr[c] &gt;=\r\n                <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// check if coins doesn&#x27;t become negative by including it</span>\r\n                res = dp[i - arr[c]];\r\n\r\n            <span class=\"hljs-comment\">// if total can be reached by including current coin c,</span>\r\n            <span class=\"hljs-comment\">// update minimum number of coins needed dp[i]</span>\r\n            <span class=\"hljs-keyword\">if</span> (res != INT_MAX)\r\n                dp[i] = <span class=\"hljs-built_in\">min</span>(dp[i], res + <span class=\"hljs-number\">1</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// The Minimum No of Coins Required for N = dp[N]</span>\r\n    <span class=\"hljs-keyword\">return</span> dp[N];\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// No of Coins We Have</span>\r\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>};\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\r\n\r\n    <span class=\"hljs-comment\">// Total Change Required</span>\r\n    <span class=\"hljs-type\">int</span> N = <span class=\"hljs-number\">15</span>;\r\n\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Minimum Number of Coins Required &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">findMinCoins</span>(arr, n, N)\r\n         &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\CoinChange.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\CoinChange.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span> Varun Upadhyay (https://github.com/varunu28)\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CoinChange</span> {\r\n\r\n    <span class=\"hljs-comment\">// Driver Program</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">amount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">12</span>;\r\n        <span class=\"hljs-type\">int</span>[] coins = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\r\n\r\n        System.out.println(\r\n                <span class=\"hljs-string\">&quot;Number of combinations of getting change for &quot;</span> + amount + <span class=\"hljs-string\">&quot; is: &quot;</span> + change(coins, amount));\r\n        System.out.println(\r\n                <span class=\"hljs-string\">&quot;Minimum number of coins required for amount :&quot;</span>\r\n                + amount\r\n                + <span class=\"hljs-string\">&quot; is: &quot;</span>\r\n                + minimumCoins(coins, amount));\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method finds the number of combinations of getting change for a\r\n     * given amount and change coins\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> coins The list of coins\r\n     * <span class=\"hljs-doctag\">@param</span> amount The amount for which we need to find the change Finds the\r\n     * number of combinations of change\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">change</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] coins, <span class=\"hljs-type\">int</span> amount)</span> {\r\n\r\n        <span class=\"hljs-type\">int</span>[] combinations = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[amount + <span class=\"hljs-number\">1</span>];\r\n        combinations[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> coin : coins) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> coin; i &lt; amount + <span class=\"hljs-number\">1</span>; i++) {\r\n                combinations[i] += combinations[i - coin];\r\n            }\r\n            <span class=\"hljs-comment\">// Uncomment the below line to see the state of combinations for each coin</span>\r\n            <span class=\"hljs-comment\">// printAmount(combinations);</span>\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> combinations[amount];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method finds the minimum number of coins needed for a given amount.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> coins The list of coins\r\n     * <span class=\"hljs-doctag\">@param</span> amount The amount for which we need to find the minimum number of\r\n     * coins. Finds the the minimum number of coins that make a given value.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minimumCoins</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] coins, <span class=\"hljs-type\">int</span> amount)</span> {\r\n        <span class=\"hljs-comment\">// minimumCoins[i] will store the minimum coins needed for amount i</span>\r\n        <span class=\"hljs-type\">int</span>[] minimumCoins = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[amount + <span class=\"hljs-number\">1</span>];\r\n\r\n        minimumCoins[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= amount; i++) {\r\n            minimumCoins[i] = Integer.MAX_VALUE;\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= amount; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> coin : coins) {\r\n                <span class=\"hljs-keyword\">if</span> (coin &lt;= i) {\r\n                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sub_res</span> <span class=\"hljs-operator\">=</span> minimumCoins[i - coin];\r\n                    <span class=\"hljs-keyword\">if</span> (sub_res != Integer.MAX_VALUE &amp;&amp; sub_res + <span class=\"hljs-number\">1</span> &lt; minimumCoins[i]) {\r\n                        minimumCoins[i] = sub_res + <span class=\"hljs-number\">1</span>;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">// Uncomment the below line to see the state of combinations for each coin</span>\r\n        <span class=\"hljs-comment\">// printAmount(minimumCoins);</span>\r\n        <span class=\"hljs-keyword\">return</span> minimumCoins[amount];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// A basic print method which prints all the contents of the array</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printAmount</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\r\n            System.out.print(arr[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n        }\r\n        System.out.println();\r\n    }\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\dynamic_programming\\coin_change.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\dynamic_programming\\coin_change.rs",
      "code": "<span class=\"hljs-comment\">/// Coin change via Dynamic Programming</span>\r\n\r\n<span class=\"hljs-comment\">/// coin_change(coins, amount) returns the fewest number of coins that need to make up that amount.</span>\r\n<span class=\"hljs-comment\">/// If that amount of money cannot be made up by any combination of the coins, return `None`.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Arguments:</span>\r\n<span class=\"hljs-comment\">///     * `coins` - coins of different denominations</span>\r\n<span class=\"hljs-comment\">///     * `amount` - a total amount of money be made up.</span>\r\n<span class=\"hljs-comment\">/// Complexity</span>\r\n<span class=\"hljs-comment\">///     - time complexity: O(amount * coins.length),</span>\r\n<span class=\"hljs-comment\">///     - space complexity: O(amount),</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">coin_change</span>(coins: &amp;[<span class=\"hljs-type\">usize</span>], amount: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dp</span> = <span class=\"hljs-built_in\">vec!</span>[std::usize::MAX; amount + <span class=\"hljs-number\">1</span>];\r\n    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// Assume dp[i] is the fewest number of coins making up amount i,</span>\r\n    <span class=\"hljs-comment\">// then for every coin in coins, dp[i] = min(dp[i - coin] + 1).</span>\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..=amount {\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..coins.<span class=\"hljs-title function_ invoke__\">len</span>() {\r\n            <span class=\"hljs-keyword\">if</span> i &gt;= coins[j] &amp;&amp; dp[i - coins[j]] != std::usize::MAX {\r\n                dp[i] = dp[i].<span class=\"hljs-title function_ invoke__\">min</span>(dp[i - coins[j]] + <span class=\"hljs-number\">1</span>);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">match</span> dp[amount] {\r\n        std::usize::MAX =&gt; <span class=\"hljs-literal\">None</span>,\r\n        _ =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(dp[amount]),\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\r\n        <span class=\"hljs-comment\">// 11 = 5 * 2 + 1 * 1</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">coins</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-title function_ invoke__\">coin_change</span>(&amp;coins, <span class=\"hljs-number\">11</span>));\r\n\r\n        <span class=\"hljs-comment\">// 119 = 11 * 10 + 7 * 1 + 2 * 1</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">coins</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">12</span>), <span class=\"hljs-title function_ invoke__\">coin_change</span>(&amp;coins, <span class=\"hljs-number\">119</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">coins_empty</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">coins</span> = <span class=\"hljs-built_in\">vec!</span>[];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-title function_ invoke__\">coin_change</span>(&amp;coins, <span class=\"hljs-number\">1</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">amount_zero</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">coins</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-title function_ invoke__\">coin_change</span>(&amp;coins, <span class=\"hljs-number\">0</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fail_change</span>() {\r\n        <span class=\"hljs-comment\">// 3 can&#x27;t be change by 2.</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">coins</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-title function_ invoke__\">coin_change</span>(&amp;coins, <span class=\"hljs-number\">3</span>));\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">coins</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">100</span>];\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-title function_ invoke__\">coin_change</span>(&amp;coins, <span class=\"hljs-number\">5</span>));\r\n    }\r\n}\r\n"
    },
    "dart": {
      "dir": "dynamic_programming\\coin_change.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/dynamic_programming\\coin_change.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">we build an array which calculates the min coins for all amounts upto n</span></span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\"> bottom up approach where we calculate the number of coins used for each</span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\"> amount from 1 to n for each coin.</span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\"> time complexity O(targetAmount <span class=\"hljs-emphasis\">* coinDenoms)</span></span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\"> space complexity O(targetAmount)</span></span></span>\r\n<span class=\"hljs-built_in\">int</span> minNumberOfCoins(<span class=\"hljs-built_in\">int</span> targetAmount, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; coinDenoms) {\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; amounts =\r\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;.generate(targetAmount + <span class=\"hljs-number\">1</span>, (<span class=\"hljs-built_in\">int</span> index) =&gt; <span class=\"hljs-number\">1000000000000</span>);\r\n\r\n  amounts[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> currentCoin <span class=\"hljs-keyword\">in</span> coinDenoms) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> amount = currentCoin; amount &lt;= targetAmount; amount++) {\r\n      amounts[amount] = min(amounts[amount], amounts[amount - currentCoin] + <span class=\"hljs-number\">1</span>);\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">if</span> (amounts[targetAmount] != <span class=\"hljs-number\">1000000000000</span>) {\r\n    <span class=\"hljs-keyword\">return</span> amounts[targetAmount];\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  test((<span class=\"hljs-string\">&#x27;testCase #1&#x27;</span>), () {\r\n    expect(minNumberOfCoins(<span class=\"hljs-number\">7</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>]), equals(<span class=\"hljs-number\">3</span>));\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;testCase #2&#x27;</span>), () {\r\n    expect(minNumberOfCoins(<span class=\"hljs-number\">7</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>]), equals(<span class=\"hljs-number\">-1</span>));\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;testCase #3&#x27;</span>), () {\r\n    expect(minNumberOfCoins(<span class=\"hljs-number\">9</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]), equals(<span class=\"hljs-number\">2</span>));\r\n  });\r\n}\r\n"
    },
    "ruby": {
      "dir": "dynamic_programming\\coin_change.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/dynamic_programming\\coin_change.rb",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coin_change_minimum</span><span class=\"hljs-params\">(coins, amount)</span></span>\r\n  dp = Array.new(amount + <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>)\r\n  dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>\r\n\r\n  coins.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|coin|</span>\r\n    (coin..amount).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n      <span class=\"hljs-keyword\">if</span> dp[i - coin] != -<span class=\"hljs-number\">1</span>\r\n        dp[i] = -<span class=\"hljs-number\">1</span> == dp[i] ? dp[i - coin] + <span class=\"hljs-number\">1</span> : [dp[i], dp[i - coin] + <span class=\"hljs-number\">1</span>].min\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  dp[amount]\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coin_change_combinations</span><span class=\"hljs-params\">(coins, amount)</span></span>\r\n  dp = Array.new(coins.length + <span class=\"hljs-number\">1</span>) { Array.new(amount + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) }\r\n  dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>\r\n  (<span class=\"hljs-number\">1</span>..coins.length).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n    (<span class=\"hljs-number\">0</span>..amount).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|j|</span>\r\n      dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j] + (j &lt; coins[i - <span class=\"hljs-number\">1</span>] ? <span class=\"hljs-number\">0</span> : dp[i][j - coins[i - <span class=\"hljs-number\">1</span>]])\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n  dp[coins.length][amount]\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\ncoins = Array[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\r\namount = <span class=\"hljs-number\">12</span>\r\nputs <span class=\"hljs-string\">&#x27;Number of combinations of getting change for &#x27;</span> + amount.to_s + <span class=\"hljs-string\">&#x27; is &#x27;</span> + coin_change_combinations(coins,\r\n                                                                                                       amount).to_s + <span class=\"hljs-string\">&#x27;.&#x27;</span>\r\nputs <span class=\"hljs-string\">&#x27;Minimum number of coins required for &#x27;</span> + amount.to_s + <span class=\"hljs-string\">&#x27; is &#x27;</span> + coin_change_minimum(coins, amount).to_s + <span class=\"hljs-string\">&#x27;.&#x27;</span>\r\n"
    },
    "scala": {
      "dir": "src\\main\\scala\\DynamicProgramming\\CoinChange.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src\\main\\scala\\DynamicProgramming\\CoinChange.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">DynamicProgramming</span>\r\n\r\n<span class=\"hljs-comment\">/** An implementation of famous dynamic programming Coin Change Problem Problem Statement: Given an amount and a\r\n  * list of coin change, find number of possible combinations to get the amount\r\n  */</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">CoinChange</span> </span>{\r\n\r\n  <span class=\"hljs-comment\">/** @param coins\r\n    *   - a list of integers i.e. change coins\r\n    * @param money\r\n    *   - the target amount\r\n    * @return\r\n    *   - number of combinations possible to get the amount\r\n    */</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coinChange</span></span>(coins: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Int</span>], money: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Int</span> = {\r\n    <span class=\"hljs-keyword\">val</span> combinations: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>](money + <span class=\"hljs-number\">1</span>)\r\n\r\n    combinations(<span class=\"hljs-number\">0</span>) = <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> (coin &lt;- coins) {\r\n      <span class=\"hljs-keyword\">for</span> (i &lt;- coin to money) {\r\n        <span class=\"hljs-keyword\">if</span> (i &gt;= coin) {\r\n          combinations(i) += combinations(i - coin)\r\n        }\r\n      }\r\n    }\r\n\r\n    combinations(money)\r\n  }\r\n}\r\n"
    },
    "lua": {
      "dir": "src\\misc\\coin_change.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src\\misc\\coin_change.lua",
      "code": "<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\r\n\t<span class=\"hljs-comment\">-- value to be achieved as a coin sum</span>\r\n\ttarget_value,\r\n\t<span class=\"hljs-comment\">-- list of available coin values</span>\r\n\tcoin_values\r\n)</span></span>\r\n\t<span class=\"hljs-keyword\">local</span> values = { [<span class=\"hljs-number\">0</span>] = { count = <span class=\"hljs-number\">0</span> } }\r\n\t<span class=\"hljs-keyword\">for</span> value = <span class=\"hljs-number\">1</span>, target_value <span class=\"hljs-keyword\">do</span>\r\n\t\t<span class=\"hljs-keyword\">for</span> _, coin_value <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">ipairs</span>(coin_values) <span class=\"hljs-keyword\">do</span>\r\n\t\t\t<span class=\"hljs-keyword\">if</span> coin_value &lt;= value <span class=\"hljs-keyword\">then</span>\r\n\t\t\t\t<span class=\"hljs-keyword\">local</span> count_using_coin = values[value - coin_value].count + <span class=\"hljs-number\">1</span>\r\n\t\t\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> values[value] <span class=\"hljs-keyword\">or</span> count_using_coin &lt; values[value].count <span class=\"hljs-keyword\">then</span>\r\n\t\t\t\t\tvalues[value] = { count = count_using_coin, used_coin_value = coin_value }\r\n\t\t\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">local</span> used_coin_values = {}\r\n\t<span class=\"hljs-keyword\">while</span> target_value &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">do</span>\r\n\t\t<span class=\"hljs-keyword\">local</span> used_coin_value = values[target_value].used_coin_value\r\n\t\t<span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">insert</span>(used_coin_values, used_coin_value)\r\n\t\ttarget_value = target_value - used_coin_value\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-comment\">-- values may appear multiple times in the list if a coin is used multiple times</span>\r\n\t<span class=\"hljs-keyword\">return</span> used_coin_values\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 1
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "nttzamos",
      "email": "36950737+nttzamos@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Keshav",
      "email": "bansal_k@worksap.co.jp",
      "commits": 1
    },
    {
      "name": "Ravi Desai",
      "email": "ravidesai47@gmail.com",
      "commits": 1
    },
    {
      "name": "Abhishek Chaturvedi",
      "email": "abhishekchaturvedi987@gmail.com",
      "commits": 1
    },
    {
      "name": "Himadri Ganguly",
      "email": "himadri@colourdrift.com",
      "commits": 1
    },
    {
      "name": "Iqrar Agalosi Nureyza",
      "email": "misteriqrar@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "pradyotd",
      "email": "pradyot.dhulipala@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "varunu28",
      "email": "varun.u28@gmail.com",
      "commits": 2
    },
    {
      "name": "Luis Vaz",
      "email": "me@rastrian.dev",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Erdenezul",
      "email": "erdenezul@shine.mn",
      "commits": 2
    },
    {
      "name": "Mandy8055",
      "email": "msankrit8055@gmail.com",
      "commits": 8
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en\\Dynamic Programming\\Coin Change.md",
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es\\Programación dinamica\\Cambio de monedas.md"
  }
}