{
  "slug": "circular-queue-linked-list",
  "name": "Circular Queue Linked List",
  "categories": [
    "datastructures",
    "queues"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\queue\\circular_queue_linked_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\queue\\circular_queue_linked_list.py",
      "code": "<span class=\"hljs-comment\"># Implementation of Circular Queue using linked lists</span>\r\n<span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/Circular_buffer</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularQueueLinkedList</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Circular FIFO list with the given capacity (default queue length : 6)\r\n\r\n    &gt;&gt;&gt; cq = CircularQueueLinkedList(2)\r\n    &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\r\n    &gt;&gt;&gt; cq.enqueue(&#x27;b&#x27;)\r\n    &gt;&gt;&gt; cq.enqueue(&#x27;c&#x27;)\r\n    Traceback (most recent call last):\r\n       ...\r\n    Exception: Full Queue\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, initial_capacity: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">6</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.front: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.rear: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.create_linked_list(initial_capacity)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_linked_list</span>(<span class=\"hljs-params\">self, initial_capacity: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        current_node = Node()\r\n        self.front = current_node\r\n        self.rear = current_node\r\n        previous_node = current_node\r\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, initial_capacity):\r\n            current_node = Node()\r\n            previous_node.<span class=\"hljs-built_in\">next</span> = current_node\r\n            current_node.prev = previous_node\r\n            previous_node = current_node\r\n        previous_node.<span class=\"hljs-built_in\">next</span> = self.front\r\n        self.front.prev = previous_node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Checks where the queue is empty or not\r\n        &gt;&gt;&gt; cq = CircularQueueLinkedList()\r\n        &gt;&gt;&gt; cq.is_empty()\r\n        True\r\n        &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\r\n        &gt;&gt;&gt; cq.is_empty()\r\n        False\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        &#x27;a&#x27;\r\n        &gt;&gt;&gt; cq.is_empty()\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">return</span> (\r\n            self.front == self.rear\r\n            <span class=\"hljs-keyword\">and</span> self.front <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">and</span> self.front.data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">first</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Returns the first element of the queue\r\n        &gt;&gt;&gt; cq = CircularQueueLinkedList()\r\n        &gt;&gt;&gt; cq.first()\r\n        Traceback (most recent call last):\r\n           ...\r\n        Exception: Empty Queue\r\n        &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\r\n        &gt;&gt;&gt; cq.first()\r\n        &#x27;a&#x27;\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        &#x27;a&#x27;\r\n        &gt;&gt;&gt; cq.first()\r\n        Traceback (most recent call last):\r\n           ...\r\n        Exception: Empty Queue\r\n        &gt;&gt;&gt; cq.enqueue(&#x27;b&#x27;)\r\n        &gt;&gt;&gt; cq.enqueue(&#x27;c&#x27;)\r\n        &gt;&gt;&gt; cq.first()\r\n        &#x27;b&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        self.check_can_perform_operation()\r\n        <span class=\"hljs-keyword\">return</span> self.front.data <span class=\"hljs-keyword\">if</span> self.front <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Saves data at the end of the queue\r\n\r\n        &gt;&gt;&gt; cq = CircularQueueLinkedList()\r\n        &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\r\n        &gt;&gt;&gt; cq.enqueue(&#x27;b&#x27;)\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        &#x27;a&#x27;\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        &#x27;b&#x27;\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        Traceback (most recent call last):\r\n           ...\r\n        Exception: Empty Queue\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.rear <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span>\r\n\r\n        self.check_is_full()\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.is_empty():\r\n            self.rear = self.rear.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-keyword\">if</span> self.rear:\r\n            self.rear.data = data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dequeue</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Removes and retrieves the first element of the queue\r\n\r\n        &gt;&gt;&gt; cq = CircularQueueLinkedList()\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        Traceback (most recent call last):\r\n           ...\r\n        Exception: Empty Queue\r\n        &gt;&gt;&gt; cq.enqueue(&#x27;a&#x27;)\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        &#x27;a&#x27;\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        Traceback (most recent call last):\r\n           ...\r\n        Exception: Empty Queue\r\n        &quot;&quot;&quot;</span>\r\n        self.check_can_perform_operation()\r\n        <span class=\"hljs-keyword\">if</span> self.rear <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> self.front <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span>\r\n        <span class=\"hljs-keyword\">if</span> self.front == self.rear:\r\n            data = self.front.data\r\n            self.front.data = <span class=\"hljs-literal\">None</span>\r\n            <span class=\"hljs-keyword\">return</span> data\r\n\r\n        old_front = self.front\r\n        self.front = old_front.<span class=\"hljs-built_in\">next</span>\r\n        data = old_front.data\r\n        old_front.data = <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">return</span> data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_can_perform_operation</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Empty Queue&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_is_full</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">if</span> self.rear <span class=\"hljs-keyword\">and</span> self.rear.<span class=\"hljs-built_in\">next</span> == self.front:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Full Queue&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.data: <span class=\"hljs-type\">Any</span> | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.<span class=\"hljs-built_in\">next</span>: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.prev: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Dylan Buchi",
      "email": "devybuchi@gmail.com",
      "commits": 1
    },
    {
      "name": "Víctor A. Rodríguez",
      "email": "victor@bit-man.guru",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}