{
  "slug": "edmonds-karp-multiple-source-and-sink",
  "name": "Edmonds Karp Multiple Source and Sink",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\edmonds_karp_multiple_source_and_sink.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\edmonds_karp_multiple_source_and_sink.py",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FlowNetwork</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, graph, sources, sinks</span>):\r\n        self.sourceIndex = <span class=\"hljs-literal\">None</span>\r\n        self.sinkIndex = <span class=\"hljs-literal\">None</span>\r\n        self.graph = graph\r\n\r\n        self._normalizeGraph(sources, sinks)\r\n        self.verticesCount = <span class=\"hljs-built_in\">len</span>(graph)\r\n        self.maximumFlowAlgorithm = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-comment\"># make only one source and one sink</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_normalizeGraph</span>(<span class=\"hljs-params\">self, sources, sinks</span>):\r\n        <span class=\"hljs-keyword\">if</span> sources <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">int</span>:\r\n            sources = [sources]\r\n        <span class=\"hljs-keyword\">if</span> sinks <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">int</span>:\r\n            sinks = [sinks]\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(sources) == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(sinks) == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">return</span>\r\n\r\n        self.sourceIndex = sources[<span class=\"hljs-number\">0</span>]\r\n        self.sinkIndex = sinks[<span class=\"hljs-number\">0</span>]\r\n\r\n        <span class=\"hljs-comment\"># make fake vertex if there are more</span>\r\n        <span class=\"hljs-comment\"># than one source or sink</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(sources) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(sinks) &gt; <span class=\"hljs-number\">1</span>:\r\n            maxInputFlow = <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> sources:\r\n                maxInputFlow += <span class=\"hljs-built_in\">sum</span>(self.graph[i])\r\n\r\n            size = <span class=\"hljs-built_in\">len</span>(self.graph) + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">for</span> room <span class=\"hljs-keyword\">in</span> self.graph:\r\n                room.insert(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n            self.graph.insert(<span class=\"hljs-number\">0</span>, [<span class=\"hljs-number\">0</span>] * size)\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> sources:\r\n                self.graph[<span class=\"hljs-number\">0</span>][i + <span class=\"hljs-number\">1</span>] = maxInputFlow\r\n            self.sourceIndex = <span class=\"hljs-number\">0</span>\r\n\r\n            size = <span class=\"hljs-built_in\">len</span>(self.graph) + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">for</span> room <span class=\"hljs-keyword\">in</span> self.graph:\r\n                room.append(<span class=\"hljs-number\">0</span>)\r\n            self.graph.append([<span class=\"hljs-number\">0</span>] * size)\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> sinks:\r\n                self.graph[i + <span class=\"hljs-number\">1</span>][size - <span class=\"hljs-number\">1</span>] = maxInputFlow\r\n            self.sinkIndex = size - <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">findMaximumFlow</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">if</span> self.maximumFlowAlgorithm <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;You need to set maximum flow algorithm before.&quot;</span>)\r\n        <span class=\"hljs-keyword\">if</span> self.sourceIndex <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> self.sinkIndex <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n\r\n        self.maximumFlowAlgorithm.execute()\r\n        <span class=\"hljs-keyword\">return</span> self.maximumFlowAlgorithm.getMaximumFlow()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">setMaximumFlowAlgorithm</span>(<span class=\"hljs-params\">self, Algorithm</span>):\r\n        self.maximumFlowAlgorithm = Algorithm(self)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FlowNetworkAlgorithmExecutor</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, flowNetwork</span>):\r\n        self.flowNetwork = flowNetwork\r\n        self.verticesCount = flowNetwork.verticesCount\r\n        self.sourceIndex = flowNetwork.sourceIndex\r\n        self.sinkIndex = flowNetwork.sinkIndex\r\n        <span class=\"hljs-comment\"># it&#x27;s just a reference, so you shouldn&#x27;t change</span>\r\n        <span class=\"hljs-comment\"># it in your algorithms, use deep copy before doing that</span>\r\n        self.graph = flowNetwork.graph\r\n        self.executed = <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.executed:\r\n            self._algorithm()\r\n            self.executed = <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-comment\"># You should override it</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_algorithm</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">pass</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MaximumFlowAlgorithmExecutor</span>(<span class=\"hljs-title class_ inherited__\">FlowNetworkAlgorithmExecutor</span>):\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, flowNetwork</span>):\r\n        <span class=\"hljs-built_in\">super</span>().__init__(flowNetwork)\r\n        <span class=\"hljs-comment\"># use this to save your result</span>\r\n        self.maximumFlow = -<span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getMaximumFlow</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.executed:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;You should execute algorithm before using its result!&quot;</span>)\r\n\r\n        <span class=\"hljs-keyword\">return</span> self.maximumFlow\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PushRelabelExecutor</span>(<span class=\"hljs-title class_ inherited__\">MaximumFlowAlgorithmExecutor</span>):\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, flowNetwork</span>):\r\n        <span class=\"hljs-built_in\">super</span>().__init__(flowNetwork)\r\n\r\n        self.preflow = [[<span class=\"hljs-number\">0</span>] * self.verticesCount <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.verticesCount)]\r\n\r\n        self.heights = [<span class=\"hljs-number\">0</span>] * self.verticesCount\r\n        self.excesses = [<span class=\"hljs-number\">0</span>] * self.verticesCount\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_algorithm</span>(<span class=\"hljs-params\">self</span>):\r\n        self.heights[self.sourceIndex] = self.verticesCount\r\n\r\n        <span class=\"hljs-comment\"># push some substance to graph</span>\r\n        <span class=\"hljs-keyword\">for</span> nextVertexIndex, bandwidth <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.graph[self.sourceIndex]):\r\n            self.preflow[self.sourceIndex][nextVertexIndex] += bandwidth\r\n            self.preflow[nextVertexIndex][self.sourceIndex] -= bandwidth\r\n            self.excesses[nextVertexIndex] += bandwidth\r\n\r\n        <span class=\"hljs-comment\"># Relabel-to-front selection rule</span>\r\n        verticesList = [\r\n            i\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.verticesCount)\r\n            <span class=\"hljs-keyword\">if</span> i != self.sourceIndex <span class=\"hljs-keyword\">and</span> i != self.sinkIndex\r\n        ]\r\n\r\n        <span class=\"hljs-comment\"># move through list</span>\r\n        i = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">while</span> i &lt; <span class=\"hljs-built_in\">len</span>(verticesList):\r\n            vertexIndex = verticesList[i]\r\n            previousHeight = self.heights[vertexIndex]\r\n            self.processVertex(vertexIndex)\r\n            <span class=\"hljs-keyword\">if</span> self.heights[vertexIndex] &gt; previousHeight:\r\n                <span class=\"hljs-comment\"># if it was relabeled, swap elements</span>\r\n                <span class=\"hljs-comment\"># and start from 0 index</span>\r\n                verticesList.insert(<span class=\"hljs-number\">0</span>, verticesList.pop(i))\r\n                i = <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                i += <span class=\"hljs-number\">1</span>\r\n\r\n        self.maximumFlow = <span class=\"hljs-built_in\">sum</span>(self.preflow[self.sourceIndex])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">processVertex</span>(<span class=\"hljs-params\">self, vertexIndex</span>):\r\n        <span class=\"hljs-keyword\">while</span> self.excesses[vertexIndex] &gt; <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">for</span> neighbourIndex <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.verticesCount):\r\n                <span class=\"hljs-comment\"># if it&#x27;s neighbour and current vertex is higher</span>\r\n                <span class=\"hljs-keyword\">if</span> (\r\n                    self.graph[vertexIndex][neighbourIndex]\r\n                    - self.preflow[vertexIndex][neighbourIndex]\r\n                    &gt; <span class=\"hljs-number\">0</span>\r\n                    <span class=\"hljs-keyword\">and</span> self.heights[vertexIndex] &gt; self.heights[neighbourIndex]\r\n                ):\r\n                    self.push(vertexIndex, neighbourIndex)\r\n\r\n            self.relabel(vertexIndex)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">self, fromIndex, toIndex</span>):\r\n        preflowDelta = <span class=\"hljs-built_in\">min</span>(\r\n            self.excesses[fromIndex],\r\n            self.graph[fromIndex][toIndex] - self.preflow[fromIndex][toIndex],\r\n        )\r\n        self.preflow[fromIndex][toIndex] += preflowDelta\r\n        self.preflow[toIndex][fromIndex] -= preflowDelta\r\n        self.excesses[fromIndex] -= preflowDelta\r\n        self.excesses[toIndex] += preflowDelta\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">relabel</span>(<span class=\"hljs-params\">self, vertexIndex</span>):\r\n        minHeight = <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">for</span> toIndex <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.verticesCount):\r\n            <span class=\"hljs-keyword\">if</span> (\r\n                self.graph[vertexIndex][toIndex] - self.preflow[vertexIndex][toIndex]\r\n                &gt; <span class=\"hljs-number\">0</span>\r\n            ):\r\n                <span class=\"hljs-keyword\">if</span> minHeight <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> self.heights[toIndex] &lt; minHeight:\r\n                    minHeight = self.heights[toIndex]\r\n\r\n        <span class=\"hljs-keyword\">if</span> minHeight <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            self.heights[vertexIndex] = minHeight + <span class=\"hljs-number\">1</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    entrances = [<span class=\"hljs-number\">0</span>]\r\n    exits = [<span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-comment\"># graph = [</span>\r\n    <span class=\"hljs-comment\">#     [0, 0, 4, 6, 0, 0],</span>\r\n    <span class=\"hljs-comment\">#     [0, 0, 5, 2, 0, 0],</span>\r\n    <span class=\"hljs-comment\">#     [0, 0, 0, 0, 4, 4],</span>\r\n    <span class=\"hljs-comment\">#     [0, 0, 0, 0, 6, 6],</span>\r\n    <span class=\"hljs-comment\">#     [0, 0, 0, 0, 0, 0],</span>\r\n    <span class=\"hljs-comment\">#     [0, 0, 0, 0, 0, 0],</span>\r\n    <span class=\"hljs-comment\"># ]</span>\r\n    graph = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]]\r\n\r\n    <span class=\"hljs-comment\"># prepare our network</span>\r\n    flowNetwork = FlowNetwork(graph, entrances, exits)\r\n    <span class=\"hljs-comment\"># set algorithm</span>\r\n    flowNetwork.setMaximumFlowAlgorithm(PushRelabelExecutor)\r\n    <span class=\"hljs-comment\"># and calculate</span>\r\n    maximumFlow = flowNetwork.findMaximumFlow()\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;maximum flow is <span class=\"hljs-subst\">{maximumFlow}</span>&quot;</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Viraat Das",
      "email": "viraat.laldas@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}