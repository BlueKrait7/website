{
  "slug": "node-stack",
  "name": "Node Stack",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\stacks\\NodeStack.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\stacks\\NodeStack.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.stacks;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Implementation of a stack using nodes. Unlimited size, no arraylist.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Kyler Smith, 2017\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NodeStack</span>&lt;Item&gt; {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Entry point for the program.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        NodeStack&lt;Integer&gt; Stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NodeStack</span>&lt;Integer&gt;();\r\n\r\n        Stack.push(<span class=\"hljs-number\">3</span>);\r\n        Stack.push(<span class=\"hljs-number\">4</span>);\r\n        Stack.push(<span class=\"hljs-number\">5</span>);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Testing :&quot;</span>);\r\n        Stack.print(); <span class=\"hljs-comment\">// prints : 5 4 3</span>\r\n\r\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> Stack.pop(); <span class=\"hljs-comment\">// x = 5</span>\r\n        Stack.push(<span class=\"hljs-number\">1</span>);\r\n        Stack.push(<span class=\"hljs-number\">8</span>);\r\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> Stack.peek(); <span class=\"hljs-comment\">// y = 8</span>\r\n        System.out.println(<span class=\"hljs-string\">&quot;Testing :&quot;</span>);\r\n        Stack.print(); <span class=\"hljs-comment\">// prints : 8 1 4 3</span>\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Testing :&quot;</span>);\r\n        System.out.println(<span class=\"hljs-string\">&quot;x : &quot;</span> + x);\r\n        System.out.println(<span class=\"hljs-string\">&quot;y : &quot;</span> + y);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Information each node should contain.\r\n     *\r\n     * <span class=\"hljs-doctag\">@value</span> data : information of the value in the node\r\n     * <span class=\"hljs-doctag\">@value</span> head : the head of the stack\r\n     * <span class=\"hljs-doctag\">@value</span> next : the next value from this node\r\n     * <span class=\"hljs-doctag\">@value</span> previous : the last value from this node\r\n     * <span class=\"hljs-doctag\">@value</span> size : size of the stack\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> Item data;\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> NodeStack&lt;?&gt; head;\r\n    <span class=\"hljs-keyword\">private</span> NodeStack&lt;?&gt; next;\r\n    <span class=\"hljs-keyword\">private</span> NodeStack&lt;?&gt; previous;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Constructors for the NodeStack.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">NodeStack</span><span class=\"hljs-params\">()</span> {\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">NodeStack</span><span class=\"hljs-params\">(Item item)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.data = item;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Put a value onto the stack.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> item : value to be put on the stack.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(Item item)</span> {\r\n\r\n        NodeStack&lt;Item&gt; newNs = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NodeStack</span>&lt;Item&gt;(item);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.isEmpty()) {\r\n            NodeStack.setHead(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NodeStack</span>&lt;&gt;(item));\r\n            newNs.setNext(<span class=\"hljs-literal\">null</span>);\r\n            newNs.setPrevious(<span class=\"hljs-literal\">null</span>);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            newNs.setPrevious(NodeStack.head);\r\n            NodeStack.head.setNext(newNs);\r\n            NodeStack.head.setHead(newNs);\r\n        }\r\n\r\n        NodeStack.setSize(NodeStack.getSize() + <span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Value to be taken off the stack.\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> item : value that is returned.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> Item <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">()</span> {\r\n\r\n        <span class=\"hljs-type\">Item</span> <span class=\"hljs-variable\">item</span> <span class=\"hljs-operator\">=</span> (Item) NodeStack.head.getData();\r\n\r\n        NodeStack.head.setHead(NodeStack.head.getPrevious());\r\n        NodeStack.head.setNext(<span class=\"hljs-literal\">null</span>);\r\n\r\n        NodeStack.setSize(NodeStack.getSize() - <span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-keyword\">return</span> item;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Value that is next to be taken off the stack.\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> item : the next value that would be popped off the stack.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> Item <span class=\"hljs-title function_\">peek</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> (Item) NodeStack.head.getData();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * If the stack is empty or there is a value in.\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> boolean : whether or not the stack has anything in it.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> NodeStack.getSize() == <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Returns the size of the stack.\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> int : number of values in the stack.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> NodeStack.getSize();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Print the contents of the stack in the following format.\r\n     *\r\n     * &lt;p&gt;\r\n     * x &lt;- head (next out) y z &lt;- tail (first in) . . .\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (NodeStack&lt;?&gt; n = NodeStack.head; n != <span class=\"hljs-literal\">null</span>; n = n.previous) {\r\n            System.out.println(n.getData().toString());\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Getters and setters (private)\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> NodeStack&lt;?&gt; getHead() {\r\n        <span class=\"hljs-keyword\">return</span> NodeStack.head;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setHead</span><span class=\"hljs-params\">(NodeStack&lt;?&gt; ns)</span> {\r\n        NodeStack.head = ns;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> NodeStack&lt;?&gt; getNext() {\r\n        <span class=\"hljs-keyword\">return</span> next;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNext</span><span class=\"hljs-params\">(NodeStack&lt;?&gt; next)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.next = next;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> NodeStack&lt;?&gt; getPrevious() {\r\n        <span class=\"hljs-keyword\">return</span> previous;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setPrevious</span><span class=\"hljs-params\">(NodeStack&lt;?&gt; previous)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.previous = previous;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getSize</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> size;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setSize</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> {\r\n        NodeStack.size = size;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Item <span class=\"hljs-title function_\">getData</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.data;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setData</span><span class=\"hljs-params\">(Item item)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.data = item;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "KylerSmith",
      "email": "Kyler@macBookAir.local",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}