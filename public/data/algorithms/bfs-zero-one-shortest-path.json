{
  "slug": "bfs-zero-one-shortest-path",
  "name": "Bfs Zero One Shortest Path",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\bfs_zero_one_shortest_path.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\bfs_zero_one_shortest_path.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nFinding the shortest path in 0-1-graph in O(E + V) which is faster than dijkstra.\r\n0-1-graph is the weighted graph with the weights equal to 0 or 1.\r\nLink: https://codeforces.com/blog/entry/22276\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> deque\r\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> Iterator\r\n<span class=\"hljs-keyword\">from</span> dataclasses <span class=\"hljs-keyword\">import</span> dataclass\r\n\r\n\r\n<span class=\"hljs-meta\">@dataclass</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Edge</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Weighted directed graph edge.&quot;&quot;&quot;</span>\r\n\r\n    destination_vertex: <span class=\"hljs-built_in\">int</span>\r\n    weight: <span class=\"hljs-built_in\">int</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AdjacencyList</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Graph adjacency list.&quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, size: <span class=\"hljs-built_in\">int</span></span>):\r\n        self._graph: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[Edge]] = [[] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)]\r\n        self._size = size\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__getitem__</span>(<span class=\"hljs-params\">self, vertex: <span class=\"hljs-built_in\">int</span></span>) -&gt; Iterator[Edge]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Get all the vertices adjacent to the given one.&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">iter</span>(self._graph[vertex])\r\n\r\n<span class=\"hljs-meta\">    @property</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">size</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self._size\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_edge</span>(<span class=\"hljs-params\">self, from_vertex: <span class=\"hljs-built_in\">int</span>, to_vertex: <span class=\"hljs-built_in\">int</span>, weight: <span class=\"hljs-built_in\">int</span></span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; g = AdjacencyList(2)\r\n        &gt;&gt;&gt; g.add_edge(0, 1, 0)\r\n        &gt;&gt;&gt; g.add_edge(1, 0, 1)\r\n        &gt;&gt;&gt; list(g[0])\r\n        [Edge(destination_vertex=1, weight=0)]\r\n        &gt;&gt;&gt; list(g[1])\r\n        [Edge(destination_vertex=0, weight=1)]\r\n        &gt;&gt;&gt; g.add_edge(0, 1, 2)\r\n        Traceback (most recent call last):\r\n            ...\r\n        ValueError: Edge weight must be either 0 or 1.\r\n        &gt;&gt;&gt; g.add_edge(0, 2, 1)\r\n        Traceback (most recent call last):\r\n            ...\r\n        ValueError: Vertex indexes must be in [0; size).\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> weight <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>):\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Edge weight must be either 0 or 1.&quot;</span>)\r\n\r\n        <span class=\"hljs-keyword\">if</span> to_vertex &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> to_vertex &gt;= self.size:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Vertex indexes must be in [0; size).&quot;</span>)\r\n\r\n        self._graph[from_vertex].append(Edge(to_vertex, weight))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_shortest_path</span>(<span class=\"hljs-params\">self, start_vertex: <span class=\"hljs-built_in\">int</span>, finish_vertex: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the shortest distance from start_vertex to finish_vertex in 0-1-graph.\r\n              1                  1         1\r\n         0---------&gt;3        6--------7&gt;-------&gt;8\r\n         |          ^        ^        ^         |1\r\n         |          |        |        |0        v\r\n        0|          |0      1|        9--------&gt;10\r\n         |          |        |        ^    1\r\n         v          |        |        |0\r\n         1---------&gt;2&lt;-------4-------&gt;5\r\n              0         1        1\r\n        &gt;&gt;&gt; g = AdjacencyList(11)\r\n        &gt;&gt;&gt; g.add_edge(0, 1, 0)\r\n        &gt;&gt;&gt; g.add_edge(0, 3, 1)\r\n        &gt;&gt;&gt; g.add_edge(1, 2, 0)\r\n        &gt;&gt;&gt; g.add_edge(2, 3, 0)\r\n        &gt;&gt;&gt; g.add_edge(4, 2, 1)\r\n        &gt;&gt;&gt; g.add_edge(4, 5, 1)\r\n        &gt;&gt;&gt; g.add_edge(4, 6, 1)\r\n        &gt;&gt;&gt; g.add_edge(5, 9, 0)\r\n        &gt;&gt;&gt; g.add_edge(6, 7, 1)\r\n        &gt;&gt;&gt; g.add_edge(7, 8, 1)\r\n        &gt;&gt;&gt; g.add_edge(8, 10, 1)\r\n        &gt;&gt;&gt; g.add_edge(9, 7, 0)\r\n        &gt;&gt;&gt; g.add_edge(9, 10, 1)\r\n        &gt;&gt;&gt; g.add_edge(1, 2, 2)\r\n        Traceback (most recent call last):\r\n            ...\r\n        ValueError: Edge weight must be either 0 or 1.\r\n        &gt;&gt;&gt; g.get_shortest_path(0, 3)\r\n        0\r\n        &gt;&gt;&gt; g.get_shortest_path(0, 4)\r\n        Traceback (most recent call last):\r\n            ...\r\n        ValueError: No path from start_vertex to finish_vertex.\r\n        &gt;&gt;&gt; g.get_shortest_path(4, 10)\r\n        2\r\n        &gt;&gt;&gt; g.get_shortest_path(4, 8)\r\n        2\r\n        &gt;&gt;&gt; g.get_shortest_path(0, 1)\r\n        0\r\n        &gt;&gt;&gt; g.get_shortest_path(1, 0)\r\n        Traceback (most recent call last):\r\n            ...\r\n        ValueError: No path from start_vertex to finish_vertex.\r\n        &quot;&quot;&quot;</span>\r\n        queue = deque([start_vertex])\r\n        distances: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>] = [<span class=\"hljs-literal\">None</span>] * self.size\r\n        distances[start_vertex] = <span class=\"hljs-number\">0</span>\r\n\r\n        <span class=\"hljs-keyword\">while</span> queue:\r\n            current_vertex = queue.popleft()\r\n            current_distance = distances[current_vertex]\r\n            <span class=\"hljs-keyword\">if</span> current_distance <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                <span class=\"hljs-keyword\">continue</span>\r\n\r\n            <span class=\"hljs-keyword\">for</span> edge <span class=\"hljs-keyword\">in</span> self[current_vertex]:\r\n                new_distance = current_distance + edge.weight\r\n                dest_vertex_distance = distances[edge.destination_vertex]\r\n                <span class=\"hljs-keyword\">if</span> (\r\n                    <span class=\"hljs-built_in\">isinstance</span>(dest_vertex_distance, <span class=\"hljs-built_in\">int</span>)\r\n                    <span class=\"hljs-keyword\">and</span> new_distance &gt;= dest_vertex_distance\r\n                ):\r\n                    <span class=\"hljs-keyword\">continue</span>\r\n                distances[edge.destination_vertex] = new_distance\r\n                <span class=\"hljs-keyword\">if</span> edge.weight == <span class=\"hljs-number\">0</span>:\r\n                    queue.appendleft(edge.destination_vertex)\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    queue.append(edge.destination_vertex)\r\n\r\n        <span class=\"hljs-keyword\">if</span> distances[finish_vertex] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;No path from start_vertex to finish_vertex.&quot;</span>)\r\n\r\n        <span class=\"hljs-keyword\">return</span> distances[finish_vertex]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "Phil Bazun",
      "email": "Phil9lne@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}