{
  "slug": "millerrabinprimalitytest",
  "name": "Millerrabinprimalitytest",
  "categories": [
    "math",
    "prime"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "math\\prime\\millerrabinprimalitytest.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math\\prime\\millerrabinprimalitytest.go",
      "code": "<span class=\"hljs-comment\">// millerrabinprimalitytest.go</span>\r\n<span class=\"hljs-comment\">// description: An implementation of Miller-Rabin primality test</span>\r\n<span class=\"hljs-comment\">// details:</span>\r\n<span class=\"hljs-comment\">// A simple implementation of Miller-Rabin Primality Test</span>\r\n<span class=\"hljs-comment\">// [Miller-Rabin primality test Wiki](https://en.wikipedia.org/wiki/Millerâ€“Rabin_primality_test)</span>\r\n<span class=\"hljs-comment\">// author(s) [Taj](https://github.com/tjgurwara99)</span>\r\n<span class=\"hljs-comment\">// see millerrabinprimalitytest_test.go</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> prime\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;math/rand&quot;</span>\r\n\r\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/modular&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-comment\">// findD accepts a number and returns the</span>\r\n<span class=\"hljs-comment\">// odd number d such that num = 2^r * d - 1</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findRD</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">int64</span>, <span class=\"hljs-type\">int64</span>) {\r\n\tr := <span class=\"hljs-type\">int64</span>(<span class=\"hljs-number\">0</span>)\r\n\td := num - <span class=\"hljs-number\">1</span>\r\n\t<span class=\"hljs-keyword\">for</span> num%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\r\n\t\td /= <span class=\"hljs-number\">2</span>\r\n\t\tr++\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> d, r\r\n}\r\n\r\n<span class=\"hljs-comment\">// MillerTest This is the intermediate step that repeats within the</span>\r\n<span class=\"hljs-comment\">// miller rabin primality test for better probabilitic chances of</span>\r\n<span class=\"hljs-comment\">// receiving the correct result.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MillerTest</span><span class=\"hljs-params\">(d, num <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">bool</span>, <span class=\"hljs-type\">error</span>) {\r\n\trandom := rand.Int63n(num<span class=\"hljs-number\">-1</span>) + <span class=\"hljs-number\">2</span>\r\n\r\n\tres, err := modular.Exponentiation(random, d, num)\r\n\r\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, err\r\n\t}\r\n\t<span class=\"hljs-comment\">// miller conditions checks</span>\r\n\t<span class=\"hljs-keyword\">if</span> res == <span class=\"hljs-number\">1</span> || res == num<span class=\"hljs-number\">-1</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">for</span> d != num<span class=\"hljs-number\">-1</span> {\r\n\t\tres = (res * res) % num\r\n\t\td *= <span class=\"hljs-number\">2</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> res == <span class=\"hljs-number\">1</span> {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">nil</span>\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">if</span> res == num<span class=\"hljs-number\">-1</span> {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span>\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">nil</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// MillerRabinTest Probabilistic test for primality of an integer based of the algorithm devised by Miller and Rabin.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MillerRabinTest</span><span class=\"hljs-params\">(num, rounds <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">bool</span>, <span class=\"hljs-type\">error</span>) {\r\n\t<span class=\"hljs-keyword\">if</span> num &lt;= <span class=\"hljs-number\">4</span> {\r\n\t\t<span class=\"hljs-keyword\">if</span> num == <span class=\"hljs-number\">2</span> || num == <span class=\"hljs-number\">3</span> {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span>\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">nil</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> num%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">nil</span>\r\n\t}\r\n\td, _ := findRD(num)\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-type\">int64</span>(<span class=\"hljs-number\">0</span>); i &lt; rounds; i++ {\r\n\t\tval, err := MillerTest(d, num)\r\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, err\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">if</span> !val {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">nil</span>\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span>\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Ilia Opiakin",
      "email": "13718260+GF1977@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}