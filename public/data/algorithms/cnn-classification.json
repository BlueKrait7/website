{
  "slug": "cnn-classification",
  "name": "Cnn Classification",
  "categories": [
    "computervision"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "computer_vision\\cnn_classification.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/computer_vision\\cnn_classification.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nConvolutional Neural Network\r\n\r\nObjective : To train a CNN model detect if TB is present in Lung X-ray or not.\r\n\r\nResources CNN Theory :\r\n    https://en.wikipedia.org/wiki/Convolutional_neural_network\r\nResources Tensorflow : https://www.tensorflow.org/tutorials/images/cnn\r\n\r\nDownload dataset from :\r\nhttps://lhncbc.nlm.nih.gov/LHC-publications/pubs/TuberculosisChestXrayImageDataSets.html\r\n\r\n1. Download the dataset folder and create two folder training set and test set\r\nin the parent dataste folder\r\n2. Move 30-40 image from both TB positive and TB Negative folder\r\nin the test set folder\r\n3. The labels of the iamges will be extracted from the folder name\r\nthe image is present in.\r\n\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-comment\"># Part 1 - Building the CNN</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\n<span class=\"hljs-comment\"># Importing the Keras libraries and packages</span>\r\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\r\n<span class=\"hljs-keyword\">from</span> tensorflow.keras <span class=\"hljs-keyword\">import</span> layers, models\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n\r\n    <span class=\"hljs-comment\"># Initialising the CNN</span>\r\n    classifier = models.Sequential()\r\n\r\n    <span class=\"hljs-comment\"># Step 1 - Convolution</span>\r\n    classifier.add(\r\n        layers.Conv2D(<span class=\"hljs-number\">32</span>, (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), input_shape=(<span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">3</span>), activation=<span class=\"hljs-string\">&quot;relu&quot;</span>)\r\n    )\r\n\r\n    <span class=\"hljs-comment\"># Step 2 - Pooling</span>\r\n    classifier.add(layers.MaxPooling2D(pool_size=(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))\r\n\r\n    <span class=\"hljs-comment\"># Adding a second convolutional layer</span>\r\n    classifier.add(layers.Conv2D(<span class=\"hljs-number\">32</span>, (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>), activation=<span class=\"hljs-string\">&quot;relu&quot;</span>))\r\n    classifier.add(layers.MaxPooling2D(pool_size=(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)))\r\n\r\n    <span class=\"hljs-comment\"># Step 3 - Flattening</span>\r\n    classifier.add(layers.Flatten())\r\n\r\n    <span class=\"hljs-comment\"># Step 4 - Full connection</span>\r\n    classifier.add(layers.Dense(units=<span class=\"hljs-number\">128</span>, activation=<span class=\"hljs-string\">&quot;relu&quot;</span>))\r\n    classifier.add(layers.Dense(units=<span class=\"hljs-number\">1</span>, activation=<span class=\"hljs-string\">&quot;sigmoid&quot;</span>))\r\n\r\n    <span class=\"hljs-comment\"># Compiling the CNN</span>\r\n    classifier.<span class=\"hljs-built_in\">compile</span>(\r\n        optimizer=<span class=\"hljs-string\">&quot;adam&quot;</span>, loss=<span class=\"hljs-string\">&quot;binary_crossentropy&quot;</span>, metrics=[<span class=\"hljs-string\">&quot;accuracy&quot;</span>]\r\n    )\r\n\r\n    <span class=\"hljs-comment\"># Part 2 - Fitting the CNN to the images</span>\r\n\r\n    <span class=\"hljs-comment\"># Load Trained model weights</span>\r\n\r\n    <span class=\"hljs-comment\"># from keras.models import load_model</span>\r\n    <span class=\"hljs-comment\"># regressor=load_model(&#x27;cnn.h5&#x27;)</span>\r\n\r\n    train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\r\n        rescale=<span class=\"hljs-number\">1.0</span> / <span class=\"hljs-number\">255</span>, shear_range=<span class=\"hljs-number\">0.2</span>, zoom_range=<span class=\"hljs-number\">0.2</span>, horizontal_flip=<span class=\"hljs-literal\">True</span>\r\n    )\r\n\r\n    test_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=<span class=\"hljs-number\">1.0</span> / <span class=\"hljs-number\">255</span>)\r\n\r\n    training_set = train_datagen.flow_from_directory(\r\n        <span class=\"hljs-string\">&quot;dataset/training_set&quot;</span>, target_size=(<span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">64</span>), batch_size=<span class=\"hljs-number\">32</span>, class_mode=<span class=\"hljs-string\">&quot;binary&quot;</span>\r\n    )\r\n\r\n    test_set = test_datagen.flow_from_directory(\r\n        <span class=\"hljs-string\">&quot;dataset/test_set&quot;</span>, target_size=(<span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">64</span>), batch_size=<span class=\"hljs-number\">32</span>, class_mode=<span class=\"hljs-string\">&quot;binary&quot;</span>\r\n    )\r\n\r\n    classifier.fit_generator(\r\n        training_set, steps_per_epoch=<span class=\"hljs-number\">5</span>, epochs=<span class=\"hljs-number\">30</span>, validation_data=test_set\r\n    )\r\n\r\n    classifier.save(<span class=\"hljs-string\">&quot;cnn.h5&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># Part 3 - Making new predictions</span>\r\n\r\n    test_image = tf.keras.preprocessing.image.load_img(\r\n        <span class=\"hljs-string\">&quot;dataset/single_prediction/image.png&quot;</span>, target_size=(<span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">64</span>)\r\n    )\r\n    test_image = tf.keras.preprocessing.image.img_to_array(test_image)\r\n    test_image = np.expand_dims(test_image, axis=<span class=\"hljs-number\">0</span>)\r\n    result = classifier.predict(test_image)\r\n    training_set.class_indices\r\n    <span class=\"hljs-keyword\">if</span> result[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">0</span>:\r\n        prediction = <span class=\"hljs-string\">&quot;Normal&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> result[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span>:\r\n        prediction = <span class=\"hljs-string\">&quot;Abnormality detected&quot;</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Harshit Agarwal",
      "email": "43147421+9harshit@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}