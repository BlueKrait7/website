{
  "slug": "djikstra",
  "name": "Djikstra",
  "categories": [
    "greedyapproach"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "greedy_approach\\djikstra.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/greedy_approach\\djikstra.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 20</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INF 999</span>\r\n\r\n<span class=\"hljs-type\">int</span> mat[MAX][MAX];\r\n<span class=\"hljs-type\">int</span> V;\r\n\r\n<span class=\"hljs-type\">int</span> dist[MAX];\r\n\r\n<span class=\"hljs-type\">int</span> q[MAX];\r\n<span class=\"hljs-type\">int</span> qp = <span class=\"hljs-number\">0</span>;\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span> { q[qp++] = v; }\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">cf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *a, <span class=\"hljs-type\">void</span> *b)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> *x = (<span class=\"hljs-type\">int</span> *)a;\r\n    <span class=\"hljs-type\">int</span> *y = (<span class=\"hljs-type\">int</span> *)b;\r\n    <span class=\"hljs-keyword\">return</span> *y - *x;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">dequeue</span><span class=\"hljs-params\">()</span>\r\n{\r\n    qsort(q, qp, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>), cf);\r\n    <span class=\"hljs-keyword\">return</span> q[--qp];\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">queue_has_something</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-keyword\">return</span> (qp &gt; <span class=\"hljs-number\">0</span>); }\r\n\r\n<span class=\"hljs-type\">int</span> visited[MAX];\r\n<span class=\"hljs-type\">int</span> vp = <span class=\"hljs-number\">0</span>;\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s)</span>\r\n{\r\n    dist[s] = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (i != s)\r\n        {\r\n            dist[i] = INF;\r\n        }\r\n        enqueue(i);\r\n    }\r\n    <span class=\"hljs-keyword\">while</span> (queue_has_something())\r\n    {\r\n        <span class=\"hljs-type\">int</span> u = dequeue();\r\n        visited[vp++] = u;\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (mat[u][i])\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (dist[i] &gt; dist[u] + mat[u][i])\r\n                {\r\n                    dist[i] = dist[u] + mat[u][i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> <span class=\"hljs-type\">const</span> *argv[])</span>\r\n{\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of vertices: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot; %d&quot;</span>, &amp;V);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the adj matrix: &quot;</span>);\r\n    <span class=\"hljs-type\">int</span> i, j;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i)\r\n    {\r\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; V; ++j)\r\n        {\r\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot; %d&quot;</span>, &amp;mat[i][j]);\r\n        }\r\n    }\r\n\r\n    dijkstra(<span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nNode\\tDist\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\t%d\\n&quot;</span>, i, dist[i]);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "sagnik-chatterjee",
      "email": "chatterjeesagnik88@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}