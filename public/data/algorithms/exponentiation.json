{
  "slug": "exponentiation",
  "name": "Exponentiation",
  "categories": [
    "math",
    "modular"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "math\\modular\\exponentiation.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math\\modular\\exponentiation.go",
      "code": "<span class=\"hljs-comment\">// exponentiation.go</span>\r\n<span class=\"hljs-comment\">// description: Implementation of Modular Exponentiation Algorithm</span>\r\n<span class=\"hljs-comment\">// details:</span>\r\n<span class=\"hljs-comment\">// A simple implementation of Modular Exponentiation - [Modular Exponenetation wiki](https://en.wikipedia.org/wiki/Modular_exponentiation)</span>\r\n<span class=\"hljs-comment\">// author(s) [Taj](https://github.com/tjgurwara99)</span>\r\n<span class=\"hljs-comment\">// see exponentiation_test.go</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> modular\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;errors&quot;</span>\r\n\t<span class=\"hljs-string\">&quot;math&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-comment\">// ErrorIntOverflow For asserting that the values do not overflow in Int64</span>\r\n<span class=\"hljs-keyword\">var</span> ErrorIntOverflow = errors.New(<span class=\"hljs-string\">&quot;integer overflow&quot;</span>)\r\n\r\n<span class=\"hljs-comment\">// ErrorNegativeExponent for asserting that the exponent we receive is positive</span>\r\n<span class=\"hljs-keyword\">var</span> ErrorNegativeExponent = errors.New(<span class=\"hljs-string\">&quot;negative Exponent provided&quot;</span>)\r\n\r\n<span class=\"hljs-comment\">// Exponentiation returns base^exponent % mod</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Exponentiation</span><span class=\"hljs-params\">(base, exponent, mod <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">int64</span>, <span class=\"hljs-type\">error</span>) {\r\n\t<span class=\"hljs-keyword\">if</span> mod == <span class=\"hljs-number\">1</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">nil</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">if</span> exponent &lt; <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, ErrorNegativeExponent\r\n\t}\r\n\t_, err := Multiply64BitInt(mod<span class=\"hljs-number\">-1</span>, mod<span class=\"hljs-number\">-1</span>)\r\n\r\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, err\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">var</span> result <span class=\"hljs-type\">int64</span> = <span class=\"hljs-number\">1</span>\r\n\r\n\tbase = base % mod\r\n\r\n\t<span class=\"hljs-keyword\">for</span> exponent &gt; <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">if</span> exponent%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> {\r\n\t\t\tresult = (result * base) % mod\r\n\t\t}\r\n\t\texponent = exponent &gt;&gt; <span class=\"hljs-number\">1</span>\r\n\t\tbase = (base * base) % mod\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> result, <span class=\"hljs-literal\">nil</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Multiply64BitInt Checking if the integer multiplication overflows</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Multiply64BitInt</span><span class=\"hljs-params\">(left, right <span class=\"hljs-type\">int64</span>)</span></span> (<span class=\"hljs-type\">int64</span>, <span class=\"hljs-type\">error</span>) {\r\n\t<span class=\"hljs-keyword\">if</span> math.Abs(<span class=\"hljs-type\">float64</span>(left)) &gt; <span class=\"hljs-type\">float64</span>(math.MaxInt64)/math.Abs(<span class=\"hljs-type\">float64</span>(right)) {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>, ErrorIntOverflow\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> left * right, <span class=\"hljs-literal\">nil</span>\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}