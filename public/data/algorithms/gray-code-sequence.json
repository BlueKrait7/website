{
  "slug": "gray-code-sequence",
  "name": "Gray Code Sequence",
  "categories": [
    "bitmanipulation"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "bit_manipulation\\gray_code_sequence.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/bit_manipulation\\gray_code_sequence.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gray_code</span>(<span class=\"hljs-params\">bit_count: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Takes in an integer n and returns a n-bit\r\n    gray code sequence\r\n    An n-bit gray code sequence is a sequence of 2^n\r\n    integers where:\r\n\r\n    a) Every integer is between [0,2^n -1] inclusive\r\n    b) The sequence begins with 0\r\n    c) An integer appears at most one times in the sequence\r\n    d)The binary representation of every pair of integers differ\r\n       by exactly one bit\r\n    e) The binary representation of first and last bit also\r\n       differ by exactly one bit\r\n\r\n    &gt;&gt;&gt; gray_code(2)\r\n    [0, 1, 3, 2]\r\n\r\n    &gt;&gt;&gt; gray_code(1)\r\n    [0, 1]\r\n\r\n    &gt;&gt;&gt; gray_code(3)\r\n    [0, 1, 3, 2, 6, 7, 5, 4]\r\n\r\n    &gt;&gt;&gt; gray_code(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: The given input must be positive\r\n\r\n    &gt;&gt;&gt; gray_code(10.6)\r\n    Traceback (most recent call last):\r\n        ...\r\n    TypeError: unsupported operand type(s) for &lt;&lt;: &#x27;int&#x27; and &#x27;float&#x27;\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># bit count represents no. of bits in the gray code</span>\r\n    <span class=\"hljs-keyword\">if</span> bit_count &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;The given input must be positive&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># get the generated string sequence</span>\r\n    sequence = gray_code_sequence_string(bit_count)\r\n    <span class=\"hljs-comment\">#</span>\r\n    <span class=\"hljs-comment\"># convert them to integers</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(sequence)):\r\n        sequence[i] = <span class=\"hljs-built_in\">int</span>(sequence[i], <span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-keyword\">return</span> sequence\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gray_code_sequence_string</span>(<span class=\"hljs-params\">bit_count: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Will output the n-bit grey sequence as a\r\n    string of bits\r\n\r\n    &gt;&gt;&gt; gray_code_sequence_string(2)\r\n    [&#x27;00&#x27;, &#x27;01&#x27;, &#x27;11&#x27;, &#x27;10&#x27;]\r\n\r\n    &gt;&gt;&gt; gray_code_sequence_string(1)\r\n    [&#x27;0&#x27;, &#x27;1&#x27;]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># The approach is a recursive one</span>\r\n    <span class=\"hljs-comment\"># Base case achieved when either n = 0 or n=1</span>\r\n    <span class=\"hljs-keyword\">if</span> bit_count == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&quot;0&quot;</span>]\r\n\r\n    <span class=\"hljs-keyword\">if</span> bit_count == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&quot;0&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>]\r\n\r\n    seq_len = <span class=\"hljs-number\">1</span> &lt;&lt; bit_count  <span class=\"hljs-comment\"># defines the length of the sequence</span>\r\n    <span class=\"hljs-comment\"># 1&lt;&lt; n is equivalent to 2^n</span>\r\n\r\n    <span class=\"hljs-comment\"># recursive answer will generate answer for n-1 bits</span>\r\n    smaller_sequence = gray_code_sequence_string(bit_count - <span class=\"hljs-number\">1</span>)\r\n\r\n    sequence = []\r\n\r\n    <span class=\"hljs-comment\"># append 0 to first half of the smaller sequence generated</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(seq_len // <span class=\"hljs-number\">2</span>):\r\n        generated_no = <span class=\"hljs-string\">&quot;0&quot;</span> + smaller_sequence[i]\r\n        sequence.append(generated_no)\r\n\r\n    <span class=\"hljs-comment\"># append 1 to second half ... start from the end of the list</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">reversed</span>(<span class=\"hljs-built_in\">range</span>(seq_len // <span class=\"hljs-number\">2</span>)):\r\n        generated_no = <span class=\"hljs-string\">&quot;1&quot;</span> + smaller_sequence[i]\r\n        sequence.append(generated_no)\r\n\r\n    <span class=\"hljs-keyword\">return</span> sequence\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "krishchopra02",
      "email": "77331421+krishchopra02@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}