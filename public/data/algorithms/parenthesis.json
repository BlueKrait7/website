{
  "slug": "parenthesis",
  "name": "Parenthesis",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures\\stack\\parenthesis.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\stack\\parenthesis.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> SIZE 100</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\r\n{</span>\r\n    <span class=\"hljs-type\">char</span> data;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">link</span>;</span>\r\n};\r\n\r\n<span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;          <span class=\"hljs-comment\">// c used as counter to check if stack is empty or not</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">head</span>;</span>  <span class=\"hljs-comment\">// declaring head pointer globally assigned to NULL</span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> x)</span>  <span class=\"hljs-comment\">// function for pushing</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span> =</span> head, *temp;\r\n    temp = (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\r\n    temp-&gt;data = x;\r\n    <span class=\"hljs-keyword\">if</span> (head ==\r\n        <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// will be execute only one time i.e, 1st time push is called</span>\r\n    {\r\n        head = temp;\r\n        p = head;\r\n        p-&gt;link = <span class=\"hljs-literal\">NULL</span>;\r\n        c++;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        temp-&gt;link = p;\r\n        p = temp;\r\n        head = p;\r\n        c++;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>  <span class=\"hljs-comment\">// function for pop</span>\r\n{\r\n    <span class=\"hljs-type\">char</span> x;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span> =</span> head;\r\n    x = p-&gt;data;\r\n    head = p-&gt;link;\r\n    <span class=\"hljs-built_in\">free</span>(p);\r\n    c--;\r\n    <span class=\"hljs-keyword\">return</span> x;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isBalanced</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">char</span> x;\r\n    <span class=\"hljs-keyword\">while</span> (s[i] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)  <span class=\"hljs-comment\">// loop for covering entire string of brackets</span>\r\n    {\r\n        <span class=\"hljs-comment\">// printf(&quot;\\t s[i]=%c\\n&quot;, s[i]); //DEBUG</span>\r\n        <span class=\"hljs-keyword\">if</span> (s[i] == <span class=\"hljs-string\">&#x27;{&#x27;</span> || s[i] == <span class=\"hljs-string\">&#x27;(&#x27;</span> ||\r\n            s[i] == <span class=\"hljs-string\">&#x27;[&#x27;</span>)  <span class=\"hljs-comment\">// if opening bracket then push</span>\r\n            push(s[i]);\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (c &lt;= <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// i.e, stack is empty as only opening brackets are</span>\r\n                         <span class=\"hljs-comment\">// added to stack</span>\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n\r\n            x = pop();\r\n            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-string\">&#x27;{&#x27;</span> &amp;&amp; s[i] != <span class=\"hljs-string\">&#x27;}&#x27;</span>)\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-string\">&#x27;[&#x27;</span> &amp;&amp; s[i] != <span class=\"hljs-string\">&#x27;]&#x27;</span>)\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-string\">&#x27;(&#x27;</span> &amp;&amp; s[i] != <span class=\"hljs-string\">&#x27;)&#x27;</span>)\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n        }\r\n        i++;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// at end if stack is empy which means whole process has been performed</span>\r\n    <span class=\"hljs-comment\">// correctly so return 1</span>\r\n    <span class=\"hljs-keyword\">return</span> (c == <span class=\"hljs-number\">0</span>) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">destroyStack</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span> =</span> head;\r\n    <span class=\"hljs-keyword\">if</span> (c &gt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">while</span> (p-&gt;link)\r\n        {\r\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">tmp</span> =</span> p;\r\n            p = p-&gt;link;\r\n            <span class=\"hljs-built_in\">free</span>(tmp);\r\n        }\r\n\r\n        c = <span class=\"hljs-number\">0</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> t;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t\\tBalanced parenthesis\\n\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPlease enter the number of processing rounds? &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;t);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> a0 = <span class=\"hljs-number\">0</span>; a0 &lt; t; a0++)\r\n    {\r\n        <span class=\"hljs-type\">char</span> s[SIZE];\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPlease enter the expression? &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>, s);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (isBalanced(s))\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nYES\\n&quot;</span>);\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nNO\\n&quot;</span>);\r\n\r\n        <span class=\"hljs-comment\">/* tidy up stack for new round */</span>\r\n        destroyStack();\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}