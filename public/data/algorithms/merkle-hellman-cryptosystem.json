{
  "slug": "merkle-hellman-cryptosystem",
  "name": "Merkle Hellman Cryptosystem",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "ciphers\\merkle_hellman_cryptosystem.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/ciphers\\merkle_hellman_cryptosystem.rb",
      "code": "<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">&#x27;openssl&#x27;</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MerkleHellman</span></span>\r\n  SMALLEST_KNAPSACK_ITEM = <span class=\"hljs-number\">2</span>**<span class=\"hljs-number\">32</span>\r\n  STEP = <span class=\"hljs-number\">2</span>**<span class=\"hljs-number\">32</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(size)</span></span>\r\n    <span class=\"hljs-variable\">@size</span> = size\r\n    sum = SMALLEST_KNAPSACK_ITEM\r\n    <span class=\"hljs-variable\">@easy_knapsack</span> = size.times.map <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|_k|</span>\r\n      x = sum + rand(STEP)\r\n      sum += x\r\n      x\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-variable\">@n</span> = sum + rand(STEP)\r\n\r\n    loop <span class=\"hljs-keyword\">do</span>\r\n      <span class=\"hljs-variable\">@a</span> = rand(<span class=\"hljs-number\">0</span>..<span class=\"hljs-variable\">@n</span>)\r\n      <span class=\"hljs-keyword\">break</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@a</span>.gcd(<span class=\"hljs-variable\">@n</span>) == <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-variable\">@hard_knapsack</span> = <span class=\"hljs-variable\">@easy_knapsack</span>.map <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|x|</span>\r\n      (<span class=\"hljs-variable\">@a</span> * x) % <span class=\"hljs-variable\">@n</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">encrypt</span><span class=\"hljs-params\">(msg)</span></span>\r\n    raise ArgumentError, <span class=\"hljs-string\">&quot;max length is <span class=\"hljs-subst\">#{<span class=\"hljs-variable\">@size</span> / <span class=\"hljs-number\">8</span>}</span> characters&quot;</span> <span class=\"hljs-keyword\">if</span> msg.length * <span class=\"hljs-number\">8</span> &gt; <span class=\"hljs-variable\">@size</span>\r\n\r\n    c = <span class=\"hljs-number\">0</span>\r\n    msg.each_codepoint.reverse_each.with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|ch, i|</span>\r\n      <span class=\"hljs-number\">7</span>.downto(<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|j|</span>\r\n        wj = ch.&gt;&gt;(j).&amp; <span class=\"hljs-number\">1</span>\r\n        c += wj * <span class=\"hljs-variable\">@hard_knapsack</span>[i * <span class=\"hljs-number\">8</span> + <span class=\"hljs-number\">7</span> - j]\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    c\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">decrypt</span><span class=\"hljs-params\">(c)</span></span>\r\n    p = <span class=\"hljs-variable\">@a</span>.to_bn.mod_inverse(<span class=\"hljs-variable\">@n</span>).mod_mul(c, <span class=\"hljs-variable\">@n</span>).to_i\r\n    byte = <span class=\"hljs-number\">0</span>\r\n    msg = []\r\n    <span class=\"hljs-variable\">@easy_knapsack</span>.reverse_each.with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|x, i|</span>\r\n      bit = <span class=\"hljs-number\">0</span>\r\n      <span class=\"hljs-keyword\">if</span> p &gt;= x\r\n        p -= x\r\n        bit = <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-keyword\">end</span>\r\n      byte <span class=\"hljs-params\">|= (bit &lt;&lt; (i % 8))\r\n      <span class=\"hljs-keyword\">if</span> i % 8 == 7\r\n        msg &lt;&lt; byte.chr\r\n        byte = 0\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    msg.join\r\n  <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">attr_accessor</span> :hard_knapsack\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nstr = &#x27;Hello there, this is my plaintext&#x27;\r\nmh = MerkleHellman.new(str.length * 8)\r\nputs &quot;[*] Encrypting \\&quot;#{str}\\&quot;&quot;\r\n\r\nc = mh.encrypt(str)\r\n\r\nputs &quot;[*] Ciphertext : #{c}&quot;\r\n\r\ndecrypted = mh.decrypt(c)\r\n\r\nputs &quot;[*] after decryption : \\&quot;#{decrypted}\\&quot;&quot;\r\n</span>"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Doppon",
      "email": "zaxpkuraudo7777@gmail.com",
      "commits": 1
    },
    {
      "name": "Niboucha Redouane",
      "email": "rniboucha@yahoo.fr",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}