{
  "slug": "longest-increasing-subsequence-nlogn",
  "name": "Longest Increasing Subsequence (Nlogn)",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming\\longest_increasing_subsequence_(nlogn).cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\longest_increasing_subsequence_(nlogn).cpp",
      "code": "<span class=\"hljs-comment\">// Program to calculate length of longest increasing subsequence in an array</span>\r\n<span class=\"hljs-comment\">// in O(n log n)</span>\r\n<span class=\"hljs-comment\">// tested on : https://cses.fi/problemset/task/1145/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">LIS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    set&lt;<span class=\"hljs-type\">int</span>&gt; active;  <span class=\"hljs-comment\">// The current built LIS.</span>\r\n    active.<span class=\"hljs-built_in\">insert</span>(arr[<span class=\"hljs-number\">0</span>]);\r\n    <span class=\"hljs-comment\">// Loop through every element.</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) {\r\n        <span class=\"hljs-keyword\">auto</span> get = active.<span class=\"hljs-built_in\">lower_bound</span>(arr[i]);\r\n        <span class=\"hljs-keyword\">if</span> (get == active.<span class=\"hljs-built_in\">end</span>()) {\r\n            active.<span class=\"hljs-built_in\">insert</span>(arr[i]);\r\n        }  <span class=\"hljs-comment\">// current element is the greatest so LIS increases by 1.</span>\r\n        <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-type\">int</span> val = *get;  <span class=\"hljs-comment\">// we find the position where arr[i] will be in the</span>\r\n                             <span class=\"hljs-comment\">// LIS. If it is in the LIS already we do nothing</span>\r\n            <span class=\"hljs-keyword\">if</span> (val &gt; arr[i]) {\r\n                <span class=\"hljs-comment\">// else we remove the bigger element and add a smaller element</span>\r\n                <span class=\"hljs-comment\">// (which is arr[i]) and continue;</span>\r\n                active.<span class=\"hljs-built_in\">erase</span>(get);\r\n                active.<span class=\"hljs-built_in\">insert</span>(arr[i]);\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> active.<span class=\"hljs-built_in\">size</span>();  <span class=\"hljs-comment\">// size of the LIS.</span>\r\n}\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> <span class=\"hljs-type\">const</span>* argv[])</span> </span>{\r\n    <span class=\"hljs-type\">int</span> n;\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter size of array: &quot;</span>;\r\n    cin &gt;&gt; n;\r\n    <span class=\"hljs-type\">int</span> a[n];\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter array elements: &quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n        cin &gt;&gt; a[i];\r\n    }\r\n    cout &lt;&lt; <span class=\"hljs-built_in\">LIS</span>(a, n) &lt;&lt; endl;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "John Law",
      "email": "johnlaw.po@gmail.com",
      "commits": 1
    },
    {
      "name": "rohan",
      "email": "rgkbitw@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}