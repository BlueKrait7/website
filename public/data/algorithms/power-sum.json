{
  "slug": "power-sum",
  "name": "Power Sum",
  "categories": [
    "backtracking"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\backtracking\\PowerSum.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\backtracking\\PowerSum.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.backtracking;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/*\r\n * Problem Statement :\r\n * Find the number of ways that a given integer, N , can be expressed as the sum of the Xth powers of unique, natural numbers.\r\n * For example, if N=100 and X=3, we have to find all combinations of unique cubes adding up to 100. The only solution is 1^3+2^3+3^3+4^3.\r\n * Therefore output will be 1.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PowerSum</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the number and the power&quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">X</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\r\n        <span class=\"hljs-type\">PowerSum</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PowerSum</span>();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> ps.powSum(N, X);\r\n        <span class=\"hljs-comment\">//printing the answer.</span>\r\n        System.out.println(<span class=\"hljs-string\">&quot;Number of combinations of different natural number&#x27;s raised to &quot;</span> + X + <span class=\"hljs-string\">&quot; having sum &quot;</span> + N + <span class=\"hljs-string\">&quot; are : &quot;</span>);\r\n        System.out.println(count);\r\n        sc.close();\r\n    }\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, sum = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">powSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">int</span> X)</span> {\r\n        Sum(N, X, <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-keyword\">return</span> count;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//here i is the natural number which will be raised by X and added in sum.</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">Sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">int</span> X, <span class=\"hljs-type\">int</span> i)</span> {\r\n        <span class=\"hljs-comment\">//if sum is equal to N that is one of our answer and count is increased.</span>\r\n        <span class=\"hljs-keyword\">if</span> (sum == N) {\r\n            count++;\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        } <span class=\"hljs-comment\">//we will be adding next natural number raised to X only if on adding it in sum the result is less than N.</span>\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sum + power(i, X) &lt;= N) {\r\n            sum += power(i, X);\r\n            Sum(N, X, i + <span class=\"hljs-number\">1</span>);\r\n            <span class=\"hljs-comment\">//backtracking and removing the number added last since no possible combination is there with it.</span>\r\n            sum -= power(i, X);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (power(i, X) &lt; N) {\r\n            <span class=\"hljs-comment\">//calling the sum function with next natural number after backtracking if when it is raised to X is still less than X.</span>\r\n            Sum(N, X, i + <span class=\"hljs-number\">1</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//creating a separate power function so that it can be used again and again when required. </span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">power</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> {\r\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">int</span>) Math.pow(a, b);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Pramil",
      "email": "75042864+Pramil01@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}