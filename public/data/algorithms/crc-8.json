{
  "slug": "crc-8",
  "name": "Crc 8",
  "categories": [
    "checksum",
    "crc"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "checksum\\crc\\crc8.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/checksum\\crc\\crc8.go",
      "code": "<span class=\"hljs-comment\">// crc8.go</span>\r\n<span class=\"hljs-comment\">// description: Calculate CRC8</span>\r\n<span class=\"hljs-comment\">// details:</span>\r\n<span class=\"hljs-comment\">// A cyclic redundancy check (CRC) is an error-detecting code commonly used in digital networks</span>\r\n<span class=\"hljs-comment\">// and storage devices to detect accidental changes to raw data.</span>\r\n<span class=\"hljs-comment\">// See more [CRC](https://en.wikipedia.org/wiki/Cyclic_redundancy_check)</span>\r\n<span class=\"hljs-comment\">// author(s) [red_byte](https://github.com/i-redbyte)</span>\r\n<span class=\"hljs-comment\">// see crc8_test.go</span>\r\n\r\n<span class=\"hljs-comment\">// Package crc describes algorithms for finding various CRC checksums</span>\r\n<span class=\"hljs-keyword\">package</span> crc\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;math/bits&quot;</span>\r\n\r\n<span class=\"hljs-comment\">// CRCModel contains the necessary parameters for calculating the DRC algorithm</span>\r\n<span class=\"hljs-keyword\">type</span> CRCModel <span class=\"hljs-keyword\">struct</span> {\r\n\tPoly   <span class=\"hljs-type\">uint8</span>\r\n\tInit   <span class=\"hljs-type\">uint8</span>\r\n\tRefIn  <span class=\"hljs-type\">bool</span>\r\n\tRefOut <span class=\"hljs-type\">bool</span>\r\n\tXorOut <span class=\"hljs-type\">uint8</span>\r\n\tName   <span class=\"hljs-type\">string</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// CalculateCRC8 This function calculate CRC8 checksum.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">CalculateCRC8</span><span class=\"hljs-params\">(data []<span class=\"hljs-type\">byte</span>, model CRCModel)</span></span> <span class=\"hljs-type\">uint8</span> {\r\n\ttable := getTable(model)\r\n\tcrcResult := model.Init\r\n\tcrcResult = addBytes(data, model, crcResult, table)\r\n\t<span class=\"hljs-keyword\">if</span> model.RefOut {\r\n\t\tcrcResult = bits.Reverse8(crcResult)\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> crcResult ^ model.XorOut\r\n}\r\n\r\n<span class=\"hljs-comment\">// This function get the result of adding the bytes in data to the crc</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addBytes</span><span class=\"hljs-params\">(data []<span class=\"hljs-type\">byte</span>, model CRCModel, crcResult <span class=\"hljs-type\">uint8</span>, table []<span class=\"hljs-type\">uint8</span>)</span></span> <span class=\"hljs-type\">uint8</span> {\r\n\t<span class=\"hljs-keyword\">if</span> model.RefIn {\r\n\t\t<span class=\"hljs-keyword\">for</span> _, d := <span class=\"hljs-keyword\">range</span> data {\r\n\t\t\td = bits.Reverse8(d)\r\n\t\t\tcrcResult = table[crcResult^d]\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">return</span> crcResult\r\n\t}\r\n\t<span class=\"hljs-keyword\">for</span> _, d := <span class=\"hljs-keyword\">range</span> data {\r\n\t\tcrcResult = table[crcResult^d]\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> crcResult\r\n}\r\n\r\n<span class=\"hljs-comment\">// This function get 256-byte (256x8) table for efficient processing.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getTable</span><span class=\"hljs-params\">(model CRCModel)</span></span> []<span class=\"hljs-type\">uint8</span> {\r\n\ttable := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">uint8</span>, <span class=\"hljs-number\">256</span>)\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">256</span>; i++ {\r\n\t\tcrc := <span class=\"hljs-type\">uint8</span>(i)\r\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">8</span>; j++ {\r\n\t\t\tisSetBit := (crc &amp; <span class=\"hljs-number\">0x80</span>) != <span class=\"hljs-number\">0</span>\r\n\t\t\tcrc &lt;&lt;= <span class=\"hljs-number\">1</span>\r\n\t\t\t<span class=\"hljs-keyword\">if</span> isSetBit {\r\n\t\t\t\tcrc ^= model.Poly\r\n\t\t\t}\r\n\t\t}\r\n\t\ttable[i] = crc\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> table\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Ilya Sokolov",
      "email": "developer.sokolov@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}