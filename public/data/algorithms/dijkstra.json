{
  "slug": "dijkstra",
  "name": "Dijkstra",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\dijkstra.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\dijkstra.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\npseudo-code\r\n\r\nDIJKSTRA(graph G, start vertex s, destination vertex d):\r\n\r\n//all nodes initially unexplored\r\n\r\n1 -  let H = min heap data structure, initialized with 0 and s [here 0 indicates\r\n     the distance from start vertex s]\r\n2 -  while H is non-empty:\r\n3 -    remove the first node and cost of H, call it U and cost\r\n4 -    if U has been previously explored:\r\n5 -      go to the while loop, line 2 //Once a node is explored there is no need\r\n         to make it again\r\n6 -    mark U as explored\r\n7 -    if U is d:\r\n8 -      return cost // total cost from start to destination vertex\r\n9 -    for each edge(U, V): c=cost of edge(U,V) // for V in graph[U]\r\n10 -     if V explored:\r\n11 -       go to next V in line 9\r\n12 -     total_cost = cost + c\r\n13 -     add (total_cost,V) to H\r\n\r\nYou can think at cost as a distance where Dijkstra finds the shortest distance\r\nbetween vertices s and v in a graph G. The use of a min heap as H guarantees\r\nthat if a vertex has already been explored there will be no other path with\r\nshortest distance, that happens because heapq.heappop will always return the\r\nnext vertex with the shortest distance, considering that the heap stores not\r\nonly the distance between previous vertex and current vertex but the entire\r\ndistance between each vertex that makes up the path from start vertex to target\r\nvertex.\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> heapq\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dijkstra</span>(<span class=\"hljs-params\">graph, start, end</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Return the cost of the shortest path between vertices start and end.\r\n\r\n    &gt;&gt;&gt; dijkstra(G, &quot;E&quot;, &quot;C&quot;)\r\n    6\r\n    &gt;&gt;&gt; dijkstra(G2, &quot;E&quot;, &quot;F&quot;)\r\n    3\r\n    &gt;&gt;&gt; dijkstra(G3, &quot;E&quot;, &quot;F&quot;)\r\n    3\r\n    &quot;&quot;&quot;</span>\r\n\r\n    heap = [(<span class=\"hljs-number\">0</span>, start)]  <span class=\"hljs-comment\"># cost from start node,end node</span>\r\n    visited = <span class=\"hljs-built_in\">set</span>()\r\n    <span class=\"hljs-keyword\">while</span> heap:\r\n        (cost, u) = heapq.heappop(heap)\r\n        <span class=\"hljs-keyword\">if</span> u <span class=\"hljs-keyword\">in</span> visited:\r\n            <span class=\"hljs-keyword\">continue</span>\r\n        visited.add(u)\r\n        <span class=\"hljs-keyword\">if</span> u == end:\r\n            <span class=\"hljs-keyword\">return</span> cost\r\n        <span class=\"hljs-keyword\">for</span> v, c <span class=\"hljs-keyword\">in</span> graph[u]:\r\n            <span class=\"hljs-keyword\">if</span> v <span class=\"hljs-keyword\">in</span> visited:\r\n                <span class=\"hljs-keyword\">continue</span>\r\n            <span class=\"hljs-built_in\">next</span> = cost + c\r\n            heapq.heappush(heap, (<span class=\"hljs-built_in\">next</span>, v))\r\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n\r\n\r\nG = {\r\n    <span class=\"hljs-string\">&quot;A&quot;</span>: [[<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-number\">5</span>]],\r\n    <span class=\"hljs-string\">&quot;B&quot;</span>: [[<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-string\">&quot;D&quot;</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-string\">&quot;E&quot;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&quot;F&quot;</span>, <span class=\"hljs-number\">1</span>]],\r\n    <span class=\"hljs-string\">&quot;C&quot;</span>: [[<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-string\">&quot;F&quot;</span>, <span class=\"hljs-number\">3</span>]],\r\n    <span class=\"hljs-string\">&quot;D&quot;</span>: [[<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-number\">3</span>]],\r\n    <span class=\"hljs-string\">&quot;E&quot;</span>: [[<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-string\">&quot;F&quot;</span>, <span class=\"hljs-number\">3</span>]],\r\n    <span class=\"hljs-string\">&quot;F&quot;</span>: [[<span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-string\">&quot;E&quot;</span>, <span class=\"hljs-number\">3</span>]],\r\n}\r\n\r\n<span class=\"hljs-string\">r&quot;&quot;&quot;\r\nLayout of G2:\r\n\r\nE -- 1 --&gt; B -- 1 --&gt; C -- 1 --&gt; D -- 1 --&gt; F\r\n \\                                         /\\\r\n  \\                                        ||\r\n    ----------------- 3 --------------------\r\n&quot;&quot;&quot;</span>\r\nG2 = {\r\n    <span class=\"hljs-string\">&quot;B&quot;</span>: [[<span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-number\">1</span>]],\r\n    <span class=\"hljs-string\">&quot;C&quot;</span>: [[<span class=\"hljs-string\">&quot;D&quot;</span>, <span class=\"hljs-number\">1</span>]],\r\n    <span class=\"hljs-string\">&quot;D&quot;</span>: [[<span class=\"hljs-string\">&quot;F&quot;</span>, <span class=\"hljs-number\">1</span>]],\r\n    <span class=\"hljs-string\">&quot;E&quot;</span>: [[<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&quot;F&quot;</span>, <span class=\"hljs-number\">3</span>]],\r\n    <span class=\"hljs-string\">&quot;F&quot;</span>: [],\r\n}\r\n\r\n<span class=\"hljs-string\">r&quot;&quot;&quot;\r\nLayout of G3:\r\n\r\nE -- 1 --&gt; B -- 1 --&gt; C -- 1 --&gt; D -- 1 --&gt; F\r\n \\                                         /\\\r\n  \\                                        ||\r\n    -------- 2 ---------&gt; G ------- 1 ------\r\n&quot;&quot;&quot;</span>\r\nG3 = {\r\n    <span class=\"hljs-string\">&quot;B&quot;</span>: [[<span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-number\">1</span>]],\r\n    <span class=\"hljs-string\">&quot;C&quot;</span>: [[<span class=\"hljs-string\">&quot;D&quot;</span>, <span class=\"hljs-number\">1</span>]],\r\n    <span class=\"hljs-string\">&quot;D&quot;</span>: [[<span class=\"hljs-string\">&quot;F&quot;</span>, <span class=\"hljs-number\">1</span>]],\r\n    <span class=\"hljs-string\">&quot;E&quot;</span>: [[<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&quot;G&quot;</span>, <span class=\"hljs-number\">2</span>]],\r\n    <span class=\"hljs-string\">&quot;F&quot;</span>: [],\r\n    <span class=\"hljs-string\">&quot;G&quot;</span>: [[<span class=\"hljs-string\">&quot;F&quot;</span>, <span class=\"hljs-number\">1</span>]],\r\n}\r\n\r\nshortDistance = dijkstra(G, <span class=\"hljs-string\">&quot;E&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>)\r\n<span class=\"hljs-built_in\">print</span>(shortDistance)  <span class=\"hljs-comment\"># E -- 3 --&gt; F -- 3 --&gt; C == 6</span>\r\n\r\nshortDistance = dijkstra(G2, <span class=\"hljs-string\">&quot;E&quot;</span>, <span class=\"hljs-string\">&quot;F&quot;</span>)\r\n<span class=\"hljs-built_in\">print</span>(shortDistance)  <span class=\"hljs-comment\"># E -- 3 --&gt; F == 3</span>\r\n\r\nshortDistance = dijkstra(G3, <span class=\"hljs-string\">&quot;E&quot;</span>, <span class=\"hljs-string\">&quot;F&quot;</span>)\r\n<span class=\"hljs-built_in\">print</span>(shortDistance)  <span class=\"hljs-comment\"># E -- 2 --&gt; G -- 1 --&gt; F == 3</span>\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Graphs\\Dijkstra.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs\\Dijkstra.js",
      "code": "<span class=\"hljs-comment\">/**\r\n * Author: Samarth Jain\r\n * Dijkstra&#x27;s Algorithm implementation in JavaScript\r\n * Dijkstra&#x27;s Algorithm calculates the minimum distance between two nodes.\r\n * It is used to find the shortest path.\r\n * It uses graph data structure.\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createGraph</span> (V, E) {\r\n  <span class=\"hljs-comment\">// V - Number of vertices in graph</span>\r\n  <span class=\"hljs-comment\">// E - Number of edges in graph (u,v,w)</span>\r\n  <span class=\"hljs-keyword\">const</span> adjList = [] <span class=\"hljs-comment\">// Adjacency list</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\r\n    adjList.<span class=\"hljs-title function_\">push</span>([])\r\n  }\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; E.<span class=\"hljs-property\">length</span>; i++) {\r\n    adjList[E[i][<span class=\"hljs-number\">0</span>]].<span class=\"hljs-title function_\">push</span>([E[i][<span class=\"hljs-number\">1</span>], E[i][<span class=\"hljs-number\">2</span>]])\r\n    adjList[E[i][<span class=\"hljs-number\">1</span>]].<span class=\"hljs-title function_\">push</span>([E[i][<span class=\"hljs-number\">0</span>], E[i][<span class=\"hljs-number\">2</span>]])\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> adjList\r\n}\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">djikstra</span> (graph, V, src) {\r\n  <span class=\"hljs-keyword\">const</span> vis = <span class=\"hljs-title class_\">Array</span>(V).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>)\r\n  <span class=\"hljs-keyword\">const</span> dist = []\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) dist.<span class=\"hljs-title function_\">push</span>([<span class=\"hljs-number\">10000</span>, -<span class=\"hljs-number\">1</span>])\r\n  dist[src][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; V - <span class=\"hljs-number\">1</span>; i++) {\r\n    <span class=\"hljs-keyword\">let</span> mn = -<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) {\r\n      <span class=\"hljs-keyword\">if</span> (vis[j] === <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (mn === -<span class=\"hljs-number\">1</span> || dist[j][<span class=\"hljs-number\">0</span>] &lt; dist[mn][<span class=\"hljs-number\">0</span>]) mn = j\r\n      }\r\n    }\r\n\r\n    vis[mn] = <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; graph[mn].<span class=\"hljs-property\">length</span>; j++) {\r\n      <span class=\"hljs-keyword\">const</span> edge = graph[mn][j]\r\n      <span class=\"hljs-keyword\">if</span> (vis[edge[<span class=\"hljs-number\">0</span>]] === <span class=\"hljs-number\">0</span> &amp;&amp; dist[edge[<span class=\"hljs-number\">0</span>]][<span class=\"hljs-number\">0</span>] &gt; dist[mn][<span class=\"hljs-number\">0</span>] + edge[<span class=\"hljs-number\">1</span>]) {\r\n        dist[edge[<span class=\"hljs-number\">0</span>]][<span class=\"hljs-number\">0</span>] = dist[mn][<span class=\"hljs-number\">0</span>] + edge[<span class=\"hljs-number\">1</span>]\r\n        dist[edge[<span class=\"hljs-number\">0</span>]][<span class=\"hljs-number\">1</span>] = mn\r\n      }\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> dist\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { createGraph, djikstra }\r\n\r\n<span class=\"hljs-comment\">// const V = 9</span>\r\n<span class=\"hljs-comment\">// const E = [</span>\r\n<span class=\"hljs-comment\">//   [0, 1, 4],</span>\r\n<span class=\"hljs-comment\">//   [0, 7, 8],</span>\r\n<span class=\"hljs-comment\">//   [1, 7, 11],</span>\r\n<span class=\"hljs-comment\">//   [1, 2, 8],</span>\r\n<span class=\"hljs-comment\">//   [7, 8, 7],</span>\r\n<span class=\"hljs-comment\">//   [6, 7, 1],</span>\r\n<span class=\"hljs-comment\">//   [2, 8, 2],</span>\r\n<span class=\"hljs-comment\">//   [6, 8, 6],</span>\r\n<span class=\"hljs-comment\">//   [5, 6, 2],</span>\r\n<span class=\"hljs-comment\">//   [2, 5, 4],</span>\r\n<span class=\"hljs-comment\">//   [2, 3, 7],</span>\r\n<span class=\"hljs-comment\">//   [3, 5, 14],</span>\r\n<span class=\"hljs-comment\">//   [3, 4, 9],</span>\r\n<span class=\"hljs-comment\">//   [4, 5, 10]</span>\r\n<span class=\"hljs-comment\">// ]</span>\r\n\r\n<span class=\"hljs-comment\">// const graph = createGraph(V, E)</span>\r\n<span class=\"hljs-comment\">// const distances = djikstra(graph, V, 0)</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * The first value in the array determines the minimum distance and the\r\n * second value represents the parent node from which the minimum distance has been calculated\r\n */</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "greedy_algorithms\\dijkstra.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/greedy_algorithms\\dijkstra.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\r\n\r\n<span class=\"hljs-comment\">// Wrapper class for storing a graph</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\r\n <span class=\"hljs-keyword\">public</span>:\r\n    <span class=\"hljs-type\">int</span> vertexNum;\r\n    <span class=\"hljs-type\">int</span> **edges;\r\n\r\n    <span class=\"hljs-comment\">// Constructs a graph with V vertices and E edges</span>\r\n    <span class=\"hljs-built_in\">Graph</span>(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> V) {\r\n        <span class=\"hljs-comment\">// initializes the array edges.</span>\r\n        <span class=\"hljs-keyword\">this</span>-&gt;edges = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span> *[V];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\r\n            edges[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[V];\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// fills the array with zeros.</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) {\r\n                edges[i][j] = <span class=\"hljs-number\">0</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">this</span>-&gt;vertexNum = V;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Adds the given edge to the graph</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dst, <span class=\"hljs-type\">int</span> weight)</span> </span>{\r\n        <span class=\"hljs-keyword\">this</span>-&gt;edges[src][dst] = weight;\r\n    }\r\n};\r\n<span class=\"hljs-comment\">// Utility function to find minimum distance vertex in mdist</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minDistance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> mdist[], <span class=\"hljs-type\">bool</span> vset[], <span class=\"hljs-type\">int</span> V)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> minVal = INT_MAX, minInd = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (!vset[i] &amp;&amp; (mdist[i] &lt; minVal)) {\r\n            minVal = mdist[i];\r\n            minInd = i;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> minInd;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Utility function to print distances</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> dist[], <span class=\"hljs-type\">int</span> V)</span> </span>{\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nVertex  Distance&quot;</span> &lt;&lt; endl;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (dist[i] &lt; INT_MAX)\r\n            cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span> &lt;&lt; dist[i] &lt;&lt; endl;\r\n        <span class=\"hljs-keyword\">else</span>\r\n            cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;\\tINF&quot;</span> &lt;&lt; endl;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// The main function that finds the shortest path from given source</span>\r\n<span class=\"hljs-comment\">// to all other vertices using Dijkstra&#x27;s Algorithm.It doesn&#x27;t work on negative</span>\r\n<span class=\"hljs-comment\">// weights</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Dijkstra</span><span class=\"hljs-params\">(Graph graph, <span class=\"hljs-type\">int</span> src)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> V = graph.vertexNum;\r\n    <span class=\"hljs-type\">int</span> mdist[V];  <span class=\"hljs-comment\">// Stores updated distances to vertex</span>\r\n    <span class=\"hljs-type\">bool</span> vset[V];  <span class=\"hljs-comment\">// vset[i] is true if the vertex i included</span>\r\n    <span class=\"hljs-comment\">// in the shortest path tree</span>\r\n\r\n    <span class=\"hljs-comment\">// Initialise mdist and vset. Set distance of source as zero</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\r\n        mdist[i] = INT_MAX;\r\n        vset[i] = <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    mdist[src] = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// iterate to find shortest path</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>; count &lt; V - <span class=\"hljs-number\">1</span>; count++) {\r\n        <span class=\"hljs-type\">int</span> u = <span class=\"hljs-built_in\">minDistance</span>(mdist, vset, V);\r\n\r\n        vset[u] = <span class=\"hljs-literal\">true</span>;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> v = <span class=\"hljs-number\">0</span>; v &lt; V; v++) {\r\n            <span class=\"hljs-keyword\">if</span> (!vset[v] &amp;&amp; graph.edges[u][v] &amp;&amp;\r\n                mdist[u] + graph.edges[u][v] &lt; mdist[v]) {\r\n                mdist[v] = mdist[u] + graph.edges[u][v];\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">print</span>(mdist, V);\r\n}\r\n\r\n<span class=\"hljs-comment\">// Driver Function</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> V, E, gsrc;\r\n    <span class=\"hljs-type\">int</span> src, dst, weight;\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of vertices: &quot;</span>;\r\n    cin &gt;&gt; V;\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of edges: &quot;</span>;\r\n    cin &gt;&gt; E;\r\n    <span class=\"hljs-function\">Graph <span class=\"hljs-title\">G</span><span class=\"hljs-params\">(V)</span></span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; E; i++) {\r\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEdge &quot;</span> &lt;&lt; i + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter source: &quot;</span>;\r\n        cin &gt;&gt; src;\r\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter destination: &quot;</span>;\r\n        cin &gt;&gt; dst;\r\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter weight: &quot;</span>;\r\n        cin &gt;&gt; weight;\r\n\r\n        <span class=\"hljs-comment\">// makes sure source and destionation are in the proper bounds.</span>\r\n        <span class=\"hljs-keyword\">if</span> (src &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; src &lt; V &amp;&amp; dst &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; dst &lt; V) {\r\n            G.<span class=\"hljs-built_in\">addEdge</span>(src, dst, weight);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;source and/or destination out of bounds&quot;</span> &lt;&lt; endl;\r\n            i--;\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n        }\r\n    }\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter source:&quot;</span>;\r\n    cin &gt;&gt; gsrc;\r\n    <span class=\"hljs-built_in\">Dijkstra</span>(G, gsrc);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\Dijkstra.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\Dijkstra.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Dijkstra&#x27;s algorithm,is a graph search algorithm that solves the\r\n * single-source shortest path problem for a graph with nonnegative edge path\r\n * costs, producing a shortest path tree.\r\n *\r\n * &lt;p&gt;\r\n * <span class=\"hljs-doctag\">NOTE:</span> The inputs to Dijkstra&#x27;s algorithm are a directed and weighted graph\r\n * consisting of 2 or more nodes, generally represented by an adjacency matrix\r\n * or list, and a start node.\r\n *\r\n * &lt;p&gt;\r\n * Original source of code:\r\n * https://rosettacode.org/wiki/Dijkstra%27s_algorithm#Java Also most of the\r\n * comments are from RosettaCode.\r\n */</span>\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dijkstra</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Graph.Edge[] GRAPH = {\r\n        <span class=\"hljs-comment\">// Distance from node &quot;a&quot; to node &quot;b&quot; is 7.</span>\r\n        <span class=\"hljs-comment\">// In the current Graph there is no way to move the other way (e,g, from &quot;b&quot; to &quot;a&quot;),</span>\r\n        <span class=\"hljs-comment\">// a new edge would be needed for that</span>\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>.Edge(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">7</span>),\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>.Edge(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">9</span>),\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>.Edge(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-number\">14</span>),\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>.Edge(<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">10</span>),\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>.Edge(<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-number\">15</span>),\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>.Edge(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-number\">11</span>),\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>.Edge(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-number\">2</span>),\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>.Edge(<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-number\">6</span>),\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>.Edge(<span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-number\">9</span>),};\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">START</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;a&quot;</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">END</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;e&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * main function Will run the code with &quot;GRAPH&quot; that was defined above.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Graph</span> <span class=\"hljs-variable\">g</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>(GRAPH);\r\n        g.dijkstra(START);\r\n        g.printPath(END);\r\n        <span class=\"hljs-comment\">// g.printAllPaths();</span>\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\r\n    <span class=\"hljs-comment\">// mapping of vertex names to Vertex objects, built from a set of Edges</span>\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;String, Vertex&gt; graph;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * One edge of the graph (only used by Graph constructor)\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Edge</span> {\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> String v1, v2;\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> dist;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Edge</span><span class=\"hljs-params\">(String v1, String v2, <span class=\"hljs-type\">int</span> dist)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.v1 = v1;\r\n            <span class=\"hljs-built_in\">this</span>.v2 = v2;\r\n            <span class=\"hljs-built_in\">this</span>.dist = dist;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * One vertex of the graph, complete with mappings to neighbouring vertices\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vertex</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Vertex&gt; {\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> String name;\r\n        <span class=\"hljs-comment\">// MAX_VALUE assumed to be infinity</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dist</span> <span class=\"hljs-operator\">=</span> Integer.MAX_VALUE;\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">Vertex</span> <span class=\"hljs-variable\">previous</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> Map&lt;Vertex, Integer&gt; neighbours = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Vertex</span><span class=\"hljs-params\">(String name)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.name = name;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printPath</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span> == <span class=\"hljs-built_in\">this</span>.previous) {\r\n                System.out.printf(<span class=\"hljs-string\">&quot;%s&quot;</span>, <span class=\"hljs-built_in\">this</span>.name);\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.previous == <span class=\"hljs-literal\">null</span>) {\r\n                System.out.printf(<span class=\"hljs-string\">&quot;%s(unreached)&quot;</span>, <span class=\"hljs-built_in\">this</span>.name);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-built_in\">this</span>.previous.printPath();\r\n                System.out.printf(<span class=\"hljs-string\">&quot; -&gt; %s(%d)&quot;</span>, <span class=\"hljs-built_in\">this</span>.name, <span class=\"hljs-built_in\">this</span>.dist);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(Vertex other)</span> {\r\n            <span class=\"hljs-keyword\">if</span> (dist == other.dist) {\r\n                <span class=\"hljs-keyword\">return</span> name.compareTo(other.name);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> Integer.compare(dist, other.dist);\r\n        }\r\n\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object object)</span> {\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span> == object) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (object == <span class=\"hljs-literal\">null</span> || getClass() != object.getClass()) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">super</span>.equals(object)) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n\r\n            <span class=\"hljs-type\">Vertex</span> <span class=\"hljs-variable\">vertex</span> <span class=\"hljs-operator\">=</span> (Vertex) object;\r\n\r\n            <span class=\"hljs-keyword\">if</span> (dist != vertex.dist) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (name != <span class=\"hljs-literal\">null</span> ? !name.equals(vertex.name) : vertex.name != <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (previous != <span class=\"hljs-literal\">null</span> ? !previous.equals(vertex.previous) : vertex.previous != <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (neighbours != <span class=\"hljs-literal\">null</span> ? !neighbours.equals(vertex.neighbours) : vertex.neighbours != <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">super</span>.hashCode();\r\n            result = <span class=\"hljs-number\">31</span> * result + (name != <span class=\"hljs-literal\">null</span> ? name.hashCode() : <span class=\"hljs-number\">0</span>);\r\n            result = <span class=\"hljs-number\">31</span> * result + dist;\r\n            result = <span class=\"hljs-number\">31</span> * result + (previous != <span class=\"hljs-literal\">null</span> ? previous.hashCode() : <span class=\"hljs-number\">0</span>);\r\n            result = <span class=\"hljs-number\">31</span> * result + (neighbours != <span class=\"hljs-literal\">null</span> ? neighbours.hashCode() : <span class=\"hljs-number\">0</span>);\r\n            <span class=\"hljs-keyword\">return</span> result;\r\n        }\r\n\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;(&quot;</span> + name + <span class=\"hljs-string\">&quot;, &quot;</span> + dist + <span class=\"hljs-string\">&quot;)&quot;</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Builds a graph from a set of edges\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Graph</span><span class=\"hljs-params\">(Edge[] edges)</span> {\r\n        graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;(edges.length);\r\n\r\n        <span class=\"hljs-comment\">// one pass to find all vertices</span>\r\n        <span class=\"hljs-keyword\">for</span> (Edge e : edges) {\r\n            <span class=\"hljs-keyword\">if</span> (!graph.containsKey(e.v1)) {\r\n                graph.put(e.v1, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vertex</span>(e.v1));\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (!graph.containsKey(e.v2)) {\r\n                graph.put(e.v2, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vertex</span>(e.v2));\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// another pass to set neighbouring vertices</span>\r\n        <span class=\"hljs-keyword\">for</span> (Edge e : edges) {\r\n            graph.get(e.v1).neighbours.put(graph.get(e.v2), e.dist);\r\n            <span class=\"hljs-comment\">// graph.get(e.v2).neighbours.put(graph.get(e.v1), e.dist); // also do this for an undirected</span>\r\n            <span class=\"hljs-comment\">// graph</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Runs dijkstra using a specified source vertex\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dijkstra</span><span class=\"hljs-params\">(String startName)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (!graph.containsKey(startName)) {\r\n            System.err.printf(<span class=\"hljs-string\">&quot;Graph doesn&#x27;t contain start vertex \\&quot;%s\\&quot;%n&quot;</span>, startName);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Vertex</span> <span class=\"hljs-variable\">source</span> <span class=\"hljs-operator\">=</span> graph.get(startName);\r\n        NavigableSet&lt;Vertex&gt; q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;&gt;();\r\n\r\n        <span class=\"hljs-comment\">// set-up vertices</span>\r\n        <span class=\"hljs-keyword\">for</span> (Vertex v : graph.values()) {\r\n            v.previous = v == source ? source : <span class=\"hljs-literal\">null</span>;\r\n            v.dist = v == source ? <span class=\"hljs-number\">0</span> : Integer.MAX_VALUE;\r\n            q.add(v);\r\n        }\r\n\r\n        dijkstra(q);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Implementation of dijkstra&#x27;s algorithm using a binary heap.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> NavigableSet&lt;Vertex&gt; q)</span> {\r\n        Vertex u, v;\r\n        <span class=\"hljs-keyword\">while</span> (!q.isEmpty()) {\r\n            <span class=\"hljs-comment\">// vertex with shortest distance (first iteration will return source)</span>\r\n            u = q.pollFirst();\r\n            <span class=\"hljs-keyword\">if</span> (u.dist == Integer.MAX_VALUE) {\r\n                <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// we can ignore u (and any other remaining vertices) since they are unreachable</span>\r\n            }\r\n            <span class=\"hljs-comment\">// look at distances to each neighbour</span>\r\n            <span class=\"hljs-keyword\">for</span> (Map.Entry&lt;Vertex, Integer&gt; a : u.neighbours.entrySet()) {\r\n                v = a.getKey(); <span class=\"hljs-comment\">// the neighbour in this iteration</span>\r\n\r\n                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">alternateDist</span> <span class=\"hljs-operator\">=</span> u.dist + a.getValue();\r\n                <span class=\"hljs-keyword\">if</span> (alternateDist &lt; v.dist) { <span class=\"hljs-comment\">// shorter path to neighbour found</span>\r\n                    q.remove(v);\r\n                    v.dist = alternateDist;\r\n                    v.previous = u;\r\n                    q.add(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Prints a path from the source to the specified vertex\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printPath</span><span class=\"hljs-params\">(String endName)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (!graph.containsKey(endName)) {\r\n            System.err.printf(<span class=\"hljs-string\">&quot;Graph doesn&#x27;t contain end vertex \\&quot;%s\\&quot;%n&quot;</span>, endName);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n\r\n        graph.get(endName).printPath();\r\n        System.out.println();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Prints the path from the source to every vertex (output order is not\r\n     * guaranteed)\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printAllPaths</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (Vertex v : graph.values()) {\r\n            v.printPath();\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "data_structures\\graphs\\dijkstra.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\graphs\\dijkstra.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">// Structure for storing a graph</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> vertexNum;\r\n    <span class=\"hljs-type\">int</span> **edges;\r\n};\r\n\r\n<span class=\"hljs-comment\">// Constructs a graph with V vertices and E edges</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *G, <span class=\"hljs-type\">int</span> V)</span>\r\n{\r\n    G-&gt;vertexNum = V;\r\n    G-&gt;edges = (<span class=\"hljs-type\">int</span> **)<span class=\"hljs-built_in\">malloc</span>(V * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *));\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n    {\r\n        G-&gt;edges[i] = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(V * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; V; j++) G-&gt;edges[i][j] = INT_MAX;\r\n        G-&gt;edges[i][i] = <span class=\"hljs-number\">0</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Adds the given edge to the graph</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *G, <span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dst, <span class=\"hljs-type\">int</span> weight)</span>\r\n{\r\n    G-&gt;edges[src][dst] = weight;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Utility function to find minimum distance vertex in mdist</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minDistance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> mdist[], <span class=\"hljs-type\">int</span> vset[], <span class=\"hljs-type\">int</span> V)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> minVal = INT_MAX;\r\n    <span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> minInd = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">//remembers the previous value if not modified in the loop</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n        <span class=\"hljs-keyword\">if</span> (vset[i] == <span class=\"hljs-number\">0</span> &amp;&amp; mdist[i] &lt; minVal)\r\n        {\r\n            minVal = mdist[i];\r\n            minInd = i;\r\n        }\r\n\r\n    <span class=\"hljs-keyword\">return</span> minInd;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Utility function to print distances</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> dist[], <span class=\"hljs-type\">int</span> V)</span>\r\n{\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nVertex  Distance\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (dist[i] != INT_MAX)\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\t%d\\n&quot;</span>, i, dist[i]);\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\tINF&quot;</span>, i);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// The main function that finds the shortest path from given source</span>\r\n<span class=\"hljs-comment\">// to all other vertices using Dijkstra&#x27;s Algorithm.It doesn&#x27;t work on negative</span>\r\n<span class=\"hljs-comment\">// weights</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> src)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> V = graph-&gt;vertexNum;\r\n    <span class=\"hljs-type\">int</span> mdist[V];  <span class=\"hljs-comment\">// Stores updated distances to vertex</span>\r\n    <span class=\"hljs-type\">int</span> vset[V];   <span class=\"hljs-comment\">// vset[i] is true if the vertex i included</span>\r\n                   <span class=\"hljs-comment\">// in the shortest path tree</span>\r\n\r\n    <span class=\"hljs-comment\">// Initialise mdist and vset. Set distance of source as zero</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) mdist[i] = INT_MAX, vset[i] = <span class=\"hljs-number\">0</span>;\r\n\r\n    mdist[src] = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// iterate to find shortest path</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>; count &lt; V - <span class=\"hljs-number\">1</span>; count++)\r\n    {\r\n        <span class=\"hljs-type\">int</span> u = minDistance(mdist, vset, V);\r\n        vset[u] = <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> v = <span class=\"hljs-number\">0</span>; v &lt; V; v++)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (!vset[v] &amp;&amp; graph-&gt;edges[u][v] != INT_MAX &amp;&amp;\r\n                mdist[u] + graph-&gt;edges[u][v] &lt; mdist[v])\r\n                mdist[v] = mdist[u] + graph-&gt;edges[u][v];\r\n        }\r\n    }\r\n\r\n    print(mdist, V);\r\n\r\n    <span class=\"hljs-keyword\">return</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Driver Function</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> V, E, gsrc;\r\n    <span class=\"hljs-type\">int</span> src, dst, weight;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> <span class=\"hljs-title\">G</span>;</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter number of vertices: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;V);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter number of edges: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;E);\r\n    createGraph(&amp;G, V);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; E; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEdge %d \\nEnter source: &quot;</span>, i + <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;src);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter destination: &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;dst);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter weight: &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;weight);\r\n        addEdge(&amp;G, src, dst, weight);\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEnter source:&quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;gsrc);\r\n    Dijkstra(&amp;G, gsrc);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "go": {
      "dir": "graph\\dijkstra.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph\\dijkstra.go",
      "code": "<span class=\"hljs-keyword\">package</span> graph\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/sort&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">type</span> Item <span class=\"hljs-keyword\">struct</span> {\r\n\tnode <span class=\"hljs-type\">int</span>\r\n\tdist <span class=\"hljs-type\">int</span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a Item)</span></span> More(b <span class=\"hljs-keyword\">interface</span>{}) <span class=\"hljs-type\">bool</span> {\r\n\t<span class=\"hljs-comment\">// reverse direction for minheap</span>\r\n\t<span class=\"hljs-keyword\">return</span> a.dist &lt; b.(Item).dist\r\n}\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a Item)</span></span> Idx() <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">return</span> a.node\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> Dijkstra(start, end <span class=\"hljs-type\">int</span>) (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">bool</span>) {\r\n\tvisited := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>)\r\n\tnodes := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]*Item)\r\n\r\n\tnodes[start] = &amp;Item{\r\n\t\tdist: <span class=\"hljs-number\">0</span>,\r\n\t\tnode: start,\r\n\t}\r\n\tpq := sort.MaxHeap{}\r\n\tpq.Init(<span class=\"hljs-literal\">nil</span>)\r\n\tpq.Push(*nodes[start])\r\n\r\n\tvisit := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(curr Item)</span></span> {\r\n\t\tvisited[curr.node] = <span class=\"hljs-literal\">true</span>\r\n\t\t<span class=\"hljs-keyword\">for</span> n, d := <span class=\"hljs-keyword\">range</span> g.edges[curr.node] {\r\n\t\t\t<span class=\"hljs-keyword\">if</span> visited[n] {\r\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>\r\n\t\t\t}\r\n\r\n\t\t\titem := nodes[n]\r\n\t\t\tdist2 := curr.dist + d\r\n\t\t\t<span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t\tnodes[n] = &amp;Item{node: n, dist: dist2}\r\n\t\t\t\tpq.Push(*nodes[n])\r\n\t\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> item.dist &gt; dist2 {\r\n\t\t\t\titem.dist = dist2\r\n\t\t\t\tpq.Update(*item)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">for</span> pq.Size() &gt; <span class=\"hljs-number\">0</span> {\r\n\t\tcurr := pq.Pop().(Item)\r\n\t\t<span class=\"hljs-keyword\">if</span> curr.node == end {\r\n\t\t\t<span class=\"hljs-keyword\">break</span>\r\n\t\t}\r\n\t\tvisit(curr)\r\n\t}\r\n\r\n\titem := nodes[end]\r\n\t<span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, <span class=\"hljs-literal\">false</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> item.dist, <span class=\"hljs-literal\">true</span>\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\graph\\dijkstra.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\graph\\dijkstra.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp::Reverse;\r\n<span class=\"hljs-keyword\">use</span> std::collections::{BTreeMap, BinaryHeap};\r\n<span class=\"hljs-keyword\">use</span> std::ops::Add;\r\n\r\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Graph</span>&lt;V, E&gt; = BTreeMap&lt;V, BTreeMap&lt;V, E&gt;&gt;;\r\n\r\n<span class=\"hljs-comment\">// performs Dijsktra&#x27;s algorithm on the given graph from the given start</span>\r\n<span class=\"hljs-comment\">// the graph is a positively-weighted undirected graph</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// returns a map that for each reachable vertex associates the distance and the predecessor</span>\r\n<span class=\"hljs-comment\">// since the start has no predecessor but is reachable, map[start] will be None</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">dijkstra</span>&lt;V: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>, E: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span> + Add&lt;Output = E&gt;&gt;(\r\n    graph: &amp;Graph&lt;V, E&gt;,\r\n    start: &amp;V,\r\n) <span class=\"hljs-punctuation\">-&gt;</span> BTreeMap&lt;V, <span class=\"hljs-type\">Option</span>&lt;(V, E)&gt;&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ans</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">prio</span> = BinaryHeap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n\r\n    <span class=\"hljs-comment\">// start is the special case that doesn&#x27;t have a predecessor</span>\r\n    ans.<span class=\"hljs-title function_ invoke__\">insert</span>(*start, <span class=\"hljs-literal\">None</span>);\r\n\r\n    <span class=\"hljs-title function_ invoke__\">for</span> (new, weight) <span class=\"hljs-keyword\">in</span> &amp;graph[start] {\r\n        ans.<span class=\"hljs-title function_ invoke__\">insert</span>(*new, <span class=\"hljs-title function_ invoke__\">Some</span>((*start, *weight)));\r\n        prio.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-title function_ invoke__\">Reverse</span>((*weight, new, start)));\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(<span class=\"hljs-title function_ invoke__\">Reverse</span>((dist_new, new, prev))) = prio.<span class=\"hljs-title function_ invoke__\">pop</span>() {\r\n        <span class=\"hljs-keyword\">match</span> ans[new] {\r\n            <span class=\"hljs-comment\">// what we popped is what is in ans, we&#x27;ll compute it</span>\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>((p, d)) <span class=\"hljs-keyword\">if</span> p == *prev &amp;&amp; d == dist_new =&gt; {}\r\n            <span class=\"hljs-comment\">// otherwise it&#x27;s not interesting</span>\r\n            _ =&gt; <span class=\"hljs-keyword\">continue</span>,\r\n        }\r\n\r\n        <span class=\"hljs-title function_ invoke__\">for</span> (next, weight) <span class=\"hljs-keyword\">in</span> &amp;graph[new] {\r\n            <span class=\"hljs-keyword\">match</span> ans.<span class=\"hljs-title function_ invoke__\">get</span>(next) {\r\n                <span class=\"hljs-comment\">// if ans[next] is a lower dist than the alternative one, we do nothing</span>\r\n                <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-title function_ invoke__\">Some</span>((_, dist_next))) <span class=\"hljs-keyword\">if</span> dist_new + *weight &gt;= *dist_next =&gt; {}\r\n                <span class=\"hljs-comment\">// if ans[next] is None then next is start and so the distance won&#x27;t be changed, it won&#x27;t be added again in prio</span>\r\n                <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-literal\">None</span>) =&gt; {}\r\n                <span class=\"hljs-comment\">// the new path is shorter, either new was not in ans or it was farther</span>\r\n                _ =&gt; {\r\n                    ans.<span class=\"hljs-title function_ invoke__\">insert</span>(*next, <span class=\"hljs-title function_ invoke__\">Some</span>((*new, *weight + dist_new)));\r\n                    prio.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-title function_ invoke__\">Reverse</span>((*weight + dist_new, next, new)));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ans\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::{dijkstra, Graph};\r\n    <span class=\"hljs-keyword\">use</span> std::collections::BTreeMap;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_edge</span>&lt;V: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>, E: <span class=\"hljs-built_in\">Ord</span>&gt;(graph: &amp;<span class=\"hljs-keyword\">mut</span> Graph&lt;V, E&gt;, v1: V, v2: V, c: E) {\r\n        graph.<span class=\"hljs-title function_ invoke__\">entry</span>(v1).<span class=\"hljs-title function_ invoke__\">or_insert_with</span>(BTreeMap::new).<span class=\"hljs-title function_ invoke__\">insert</span>(v2, c);\r\n        graph.<span class=\"hljs-title function_ invoke__\">entry</span>(v2).<span class=\"hljs-title function_ invoke__\">or_insert_with</span>(BTreeMap::new);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">single_vertex</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span>: Graph&lt;<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">usize</span>&gt; = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        graph.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">0</span>, BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>());\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dists</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        dists.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">None</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">dijkstra</span>(&amp;graph, &amp;<span class=\"hljs-number\">0</span>), dists);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">single_edge</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dists_0</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        dists_0.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">None</span>);\r\n        dists_0.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)));\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">dijkstra</span>(&amp;graph, &amp;<span class=\"hljs-number\">0</span>), dists_0);\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dists_1</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        dists_1.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">None</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">dijkstra</span>(&amp;graph, &amp;<span class=\"hljs-number\">1</span>), dists_1);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">tree_1</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dists</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        dists.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">None</span>);\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">100</span> {\r\n            <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, i, i * <span class=\"hljs-number\">2</span>, i * <span class=\"hljs-number\">2</span>);\r\n            <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, i, i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>, i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>);\r\n\r\n            <span class=\"hljs-keyword\">match</span> dists[&amp;i] {\r\n                <span class=\"hljs-title function_ invoke__\">Some</span>((_, d)) =&gt; {\r\n                    dists.<span class=\"hljs-title function_ invoke__\">insert</span>(i * <span class=\"hljs-number\">2</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((i, d + i * <span class=\"hljs-number\">2</span>)));\r\n                    dists.<span class=\"hljs-title function_ invoke__\">insert</span>(i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((i, d + i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>)));\r\n                }\r\n                <span class=\"hljs-literal\">None</span> =&gt; {\r\n                    dists.<span class=\"hljs-title function_ invoke__\">insert</span>(i * <span class=\"hljs-number\">2</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((i, i * <span class=\"hljs-number\">2</span>)));\r\n                    dists.<span class=\"hljs-title function_ invoke__\">insert</span>(i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((i, i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>)));\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">dijkstra</span>(&amp;graph, &amp;<span class=\"hljs-number\">1</span>), dists);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">graph_1</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">12</span>);\r\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-number\">60</span>);\r\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">10</span>);\r\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">20</span>);\r\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-number\">32</span>);\r\n        <span class=\"hljs-title function_ invoke__\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> graph, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">7</span>);\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dists_a</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        dists_a.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-literal\">None</span>);\r\n        dists_a.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">12</span>)));\r\n        dists_a.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">44</span>)));\r\n        dists_a.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">32</span>)));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">dijkstra</span>(&amp;graph, &amp;<span class=\"hljs-string\">&#x27;a&#x27;</span>), dists_a);\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dists_b</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        dists_b.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-literal\">None</span>);\r\n        dists_b.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">10</span>)));\r\n        dists_b.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">22</span>)));\r\n        dists_b.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">54</span>)));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">dijkstra</span>(&amp;graph, &amp;<span class=\"hljs-string\">&#x27;b&#x27;</span>), dists_b);\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dists_c</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        dists_c.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-literal\">None</span>);\r\n        dists_c.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">20</span>)));\r\n        dists_c.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">32</span>)));\r\n        dists_c.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">30</span>)));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">dijkstra</span>(&amp;graph, &amp;<span class=\"hljs-string\">&#x27;c&#x27;</span>), dists_c);\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dists_d</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        dists_d.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-literal\">None</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">dijkstra</span>(&amp;graph, &amp;<span class=\"hljs-string\">&#x27;d&#x27;</span>), dists_d);\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">dists_e</span> = BTreeMap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        dists_e.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-literal\">None</span>);\r\n        dists_e.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-number\">7</span>)));\r\n        dists_e.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">19</span>)));\r\n        dists_e.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">51</span>)));\r\n        dists_e.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">39</span>)));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">dijkstra</span>(&amp;graph, &amp;<span class=\"hljs-string\">&#x27;e&#x27;</span>), dists_e);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Pierre Gimalac",
      "email": "pierre.gimalac@gmail.com",
      "commits": 1
    },
    {
      "name": "Metta Ong",
      "email": "ongspxm@gmail.com",
      "commits": 1
    },
    {
      "name": "Idan BananI",
      "email": "idanb121@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Bruno Simas Hadlich",
      "email": "brunosimashadlich@gmail.com",
      "commits": 1
    },
    {
      "name": "zachzhu2016",
      "email": "48337051+zachzhu2016@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Reshad Hasan",
      "email": "reshadhasan555@gmail.com",
      "commits": 1
    },
    {
      "name": "Rafael García Cuéllar",
      "email": "r.gc@hotmail.es",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "ashu01",
      "email": "as01hu@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "rmakynen",
      "email": "rmakynen@Mikrohalli-pc43.student.yo.oulu.fi",
      "commits": 3
    },
    {
      "name": "Nidheesh Pandey",
      "email": "nidheeshpandey@gmail.com",
      "commits": 3
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 4
    },
    {
      "name": "rmakynen",
      "email": "43169683+rmakynen@users.noreply.github.com",
      "commits": 4
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 5
    },
    {
      "name": "arpanjain97",
      "email": "arpanjain97@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}