{
  "slug": "bst-iterative",
  "name": "BST Iterative",
  "categories": [
    "datastructures",
    "tree"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\BSTIterative.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\BSTIterative.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\r\n\r\n<span class=\"hljs-comment\">/**\r\n *\r\n *\r\n * &lt;h1&gt;Binary Search Tree (Iterative)&lt;/h1&gt;\r\n *\r\n * &lt;p&gt;\r\n * An implementation of BST iteratively. Binary Search Tree is a binary tree\r\n * which satisfies three properties: left child is less than root node, right\r\n * child is grater than root node, both left and right childs must themselves be\r\n * a BST.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> [Lakhan Nad](https://github.com/Lakhan-Nad)\r\n */</span>\r\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BSTIterative</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Reference for the node of BST.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> Node root;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Default Constructor Initializes the root of BST with null.\r\n     */</span>\r\n    BSTIterative() {\r\n        root = <span class=\"hljs-literal\">null</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * main function for tests\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">BSTIterative</span> <span class=\"hljs-variable\">tree</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BSTIterative</span>();\r\n        tree.add(<span class=\"hljs-number\">3</span>);\r\n        tree.add(<span class=\"hljs-number\">2</span>);\r\n        tree.add(<span class=\"hljs-number\">9</span>);\r\n        <span class=\"hljs-keyword\">assert</span> !tree.find(<span class=\"hljs-number\">4</span>) : <span class=\"hljs-string\">&quot;4 is not yet present in BST&quot;</span>;\r\n        <span class=\"hljs-keyword\">assert</span> tree.find(<span class=\"hljs-number\">2</span>) : <span class=\"hljs-string\">&quot;2 should be present in BST&quot;</span>;\r\n        tree.remove(<span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-keyword\">assert</span> !tree.find(<span class=\"hljs-number\">2</span>) : <span class=\"hljs-string\">&quot;2 was just deleted from BST&quot;</span>;\r\n        tree.remove(<span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-keyword\">assert</span> !tree.find(<span class=\"hljs-number\">1</span>) : <span class=\"hljs-string\">&quot;Since 1 was not present so find deleting would do no change&quot;</span>;\r\n        tree.add(<span class=\"hljs-number\">30</span>);\r\n        tree.add(<span class=\"hljs-number\">40</span>);\r\n        <span class=\"hljs-keyword\">assert</span> tree.find(<span class=\"hljs-number\">40</span>) : <span class=\"hljs-string\">&quot;40 was inserted but not found&quot;</span>;\r\n        <span class=\"hljs-comment\">/*\r\n       Will print following order\r\n       3 9 30 40\r\n         */</span>\r\n        tree.inorder();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * A method to insert a new value in BST. If the given value is already\r\n     * present in BST the insertion is ignored.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> data the value to be inserted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">parent</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.root;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightOrLeft</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-comment\">/* Finds the proper place this node can\r\n     * be placed in according to rules of BST.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (temp.data &gt; data) {\r\n                parent = temp;\r\n                temp = parent.left;\r\n                rightOrLeft = <span class=\"hljs-number\">0</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (temp.data &lt; data) {\r\n                parent = temp;\r\n                temp = parent.right;\r\n                rightOrLeft = <span class=\"hljs-number\">1</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                System.out.println(data + <span class=\"hljs-string\">&quot; is already present in BST.&quot;</span>);\r\n                <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// if data already present we ignore insertion</span>\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">/* Creates a newNode with the value passed\r\n     * Since this data doesn&#x27;t already exists\r\n         */</span>\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">newNode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(data);\r\n        <span class=\"hljs-comment\">/* If the parent node is null\r\n     * then the insertion is to be done in\r\n     * root itself.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">if</span> (parent == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-built_in\">this</span>.root = newNode;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">/* Check if insertion is to be made in\r\n       * left or right subtree.\r\n             */</span>\r\n            <span class=\"hljs-keyword\">if</span> (rightOrLeft == <span class=\"hljs-number\">0</span>) {\r\n                parent.left = newNode;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                parent.right = newNode;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * A method to delete the node in BST. If node is present it will be deleted\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> data the value that needs to be deleted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">parent</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.root;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightOrLeft</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-comment\">/* Find the parent of the node and node itself\r\n     * That is to be deleted.\r\n     * parent variable store parent\r\n     * temp stores node itself.\r\n     * rightOrLeft use to keep track weather child\r\n     * is left or right subtree\r\n         */</span>\r\n        <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (temp.data == data) {\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (temp.data &gt; data) {\r\n                parent = temp;\r\n                temp = parent.left;\r\n                rightOrLeft = <span class=\"hljs-number\">0</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                parent = temp;\r\n                temp = parent.right;\r\n                rightOrLeft = <span class=\"hljs-number\">1</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">/* If temp is null than node with given value is not\r\n     * present in our tree.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">if</span> (temp != <span class=\"hljs-literal\">null</span>) {\r\n            Node replacement; <span class=\"hljs-comment\">// used to store the new values for replacing nodes</span>\r\n            <span class=\"hljs-keyword\">if</span> (temp.right == <span class=\"hljs-literal\">null</span> &amp;&amp; temp.left == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// Leaf node Case</span>\r\n                replacement = <span class=\"hljs-literal\">null</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (temp.right == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// Node with only right child</span>\r\n                replacement = temp.left;\r\n                temp.left = <span class=\"hljs-literal\">null</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (temp.left == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// Node with only left child</span>\r\n                replacement = temp.right;\r\n                temp.right = <span class=\"hljs-literal\">null</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-comment\">/* If both left and right child are present\r\n         * we replace this nodes data with\r\n         * leftmost node&#x27;s data in its right subtree\r\n         * to maintain the balance of BST.\r\n         * And then delete that node\r\n                 */</span>\r\n                <span class=\"hljs-keyword\">if</span> (temp.right.left == <span class=\"hljs-literal\">null</span>) {\r\n                    temp.data = temp.right.data;\r\n                    replacement = temp;\r\n                    temp.right = temp.right.right;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">parent2</span> <span class=\"hljs-operator\">=</span> temp.right;\r\n                    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> temp.right.left;\r\n                    <span class=\"hljs-keyword\">while</span> (child.left != <span class=\"hljs-literal\">null</span>) {\r\n                        parent2 = child;\r\n                        child = parent2.left;\r\n                    }\r\n                    temp.data = child.data;\r\n                    parent2.left = child.right;\r\n                    replacement = temp;\r\n                }\r\n            }\r\n            <span class=\"hljs-comment\">/* Change references of parent after\r\n       * deleting the child.\r\n             */</span>\r\n            <span class=\"hljs-keyword\">if</span> (parent == <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-built_in\">this</span>.root = replacement;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">if</span> (rightOrLeft == <span class=\"hljs-number\">0</span>) {\r\n                    parent.left = replacement;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    parent.right = replacement;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * A method for inorder traversal of BST.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">inorder</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.root == <span class=\"hljs-literal\">null</span>) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;This BST is empty.&quot;</span>);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;Inorder traversal of this tree is:&quot;</span>);\r\n        Stack&lt;Node&gt; st = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;Node&gt;();\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.root;\r\n        <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span> || !st.empty()) {\r\n            <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span>) {\r\n                st.push(cur);\r\n                cur = cur.left;\r\n            }\r\n            cur = st.pop();\r\n            System.out.print(cur.data + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n            cur = cur.right;\r\n        }\r\n        System.out.println(); <span class=\"hljs-comment\">// for next line</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * A method used to print postorder traversal of BST.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postorder</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.root == <span class=\"hljs-literal\">null</span>) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;This BST is empty.&quot;</span>);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;Postorder traversal of this tree is:&quot;</span>);\r\n        Stack&lt;Node&gt; st = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;Node&gt;();\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.root, temp2;\r\n        <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span> || !st.empty()) {\r\n            <span class=\"hljs-keyword\">if</span> (cur != <span class=\"hljs-literal\">null</span>) {\r\n                st.push(cur);\r\n                cur = cur.left;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                temp2 = st.peek();\r\n                <span class=\"hljs-keyword\">if</span> (temp2.right != <span class=\"hljs-literal\">null</span>) {\r\n                    cur = temp2.right;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    st.pop();\r\n                    <span class=\"hljs-keyword\">while</span> (!st.empty() &amp;&amp; st.peek().right == temp2) {\r\n                        System.out.print(temp2.data + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n                        temp2 = st.pop();\r\n                    }\r\n                    System.out.print(temp2.data + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n                }\r\n            }\r\n        }\r\n        System.out.println(); <span class=\"hljs-comment\">// for next line</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Method used to display preorder traversal of BST.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">preorder</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.root == <span class=\"hljs-literal\">null</span>) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;This BST is empty.&quot;</span>);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;Preorder traversal of this tree is:&quot;</span>);\r\n        Stack&lt;Node&gt; st = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;Node&gt;();\r\n        st.push(<span class=\"hljs-built_in\">this</span>.root);\r\n        Node temp;\r\n        <span class=\"hljs-keyword\">while</span> (!st.empty()) {\r\n            temp = st.pop();\r\n            System.out.print(temp.data + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n            <span class=\"hljs-keyword\">if</span> (temp.right != <span class=\"hljs-literal\">null</span>) {\r\n                st.push(temp.right);\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (temp.left != <span class=\"hljs-literal\">null</span>) {\r\n                st.push(temp.left);\r\n            }\r\n        }\r\n        System.out.println(); <span class=\"hljs-comment\">// for next line</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * A method to check if given data exists in out Binary Search Tree.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> data the value that needs to be searched for\r\n     * <span class=\"hljs-doctag\">@return</span> boolean representing if the value was find\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.root;\r\n        <span class=\"hljs-comment\">/* Check if node exists\r\n         */</span>\r\n        <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (temp.data &gt; data) {\r\n                temp = temp.left;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (temp.data &lt; data) {\r\n                temp = temp.right;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-comment\">/* If found return true\r\n                 */</span>\r\n                System.out.println(data + <span class=\"hljs-string\">&quot; is present in the BST.&quot;</span>);\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        }\r\n        System.out.println(data + <span class=\"hljs-string\">&quot; not found.&quot;</span>);\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * The Node class used for building binary search tree\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n\r\n        <span class=\"hljs-type\">int</span> data;\r\n        Node left;\r\n        Node right;\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Constructor with data as parameter\r\n         */</span>\r\n        Node(<span class=\"hljs-type\">int</span> d) {\r\n            data = d;\r\n            left = <span class=\"hljs-literal\">null</span>;\r\n            right = <span class=\"hljs-literal\">null</span>;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "lakhan_nad",
      "email": "lakhannad1999@gmail.com",
      "commits": 2
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}