{
  "slug": "nth-fibonacci-using-matrix-exponentiation",
  "name": "Nth Fibonacci Using Matrix Exponentiation",
  "categories": [
    "matrix"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "matrix\\nth_fibonacci_using_matrix_exponentiation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/matrix\\nth_fibonacci_using_matrix_exponentiation.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nImplementation of finding nth fibonacci number using matrix exponentiation.\r\nTime Complexity is about O(log(n)*8), where 8 is the complexity of matrix\r\nmultiplication of size 2 by 2.\r\nAnd on the other hand complexity of bruteforce solution is O(n).\r\nAs we know\r\n    f[n] = f[n-1] + f[n-1]\r\nConverting to matrix,\r\n    [f(n),f(n-1)] = [[1,1],[1,0]] * [f(n-1),f(n-2)]\r\n-&gt;  [f(n),f(n-1)] = [[1,1],[1,0]]^2 * [f(n-2),f(n-3)]\r\n    ...\r\n    ...\r\n-&gt;  [f(n),f(n-1)] = [[1,1],[1,0]]^(n-1) * [f(1),f(0)]\r\nSo we just need the n times multiplication of the matrix [1,1],[1,0]].\r\nWe can decrease the n times multiplication by following the divide and conquer approach.\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-params\">matrix_a, matrix_b</span>):\r\n    matrix_c = []\r\n    n = <span class=\"hljs-built_in\">len</span>(matrix_a)\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n        list_1 = []\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n            val = <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n                val = val + matrix_a[i][k] * matrix_b[k][j]\r\n            list_1.append(val)\r\n        matrix_c.append(list_1)\r\n    <span class=\"hljs-keyword\">return</span> matrix_c\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">identity</span>(<span class=\"hljs-params\">n</span>):\r\n    <span class=\"hljs-keyword\">return</span> [[<span class=\"hljs-built_in\">int</span>(row == column) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nth_fibonacci_matrix</span>(<span class=\"hljs-params\">n</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; nth_fibonacci_matrix(100)\r\n    354224848179261915075\r\n    &gt;&gt;&gt; nth_fibonacci_matrix(-100)\r\n    -100\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> n &lt;= <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> n\r\n    res_matrix = identity(<span class=\"hljs-number\">2</span>)\r\n    fibonacci_matrix = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]]\r\n    n = n - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">while</span> n &gt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>:\r\n            res_matrix = multiply(res_matrix, fibonacci_matrix)\r\n        fibonacci_matrix = multiply(fibonacci_matrix, fibonacci_matrix)\r\n        n = <span class=\"hljs-built_in\">int</span>(n / <span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-keyword\">return</span> res_matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">nth_fibonacci_bruteforce</span>(<span class=\"hljs-params\">n</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; nth_fibonacci_bruteforce(100)\r\n    354224848179261915075\r\n    &gt;&gt;&gt; nth_fibonacci_bruteforce(-100)\r\n    -100\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> n &lt;= <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> n\r\n    fib0 = <span class=\"hljs-number\">0</span>\r\n    fib1 = <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, n + <span class=\"hljs-number\">1</span>):\r\n        fib0, fib1 = fib1, fib0 + fib1\r\n    <span class=\"hljs-keyword\">return</span> fib1\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    <span class=\"hljs-keyword\">for</span> ordinal <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&quot;0th 1st 2nd 3rd 10th 100th 1000th&quot;</span>.split():\r\n        n = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-string\">&quot;&quot;</span>.join(c <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> ordinal <span class=\"hljs-keyword\">if</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&quot;0123456789&quot;</span>))  <span class=\"hljs-comment\"># 1000th --&gt; 1000</span>\r\n        <span class=\"hljs-built_in\">print</span>(\r\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{ordinal}</span> fibonacci number using matrix exponentiation is &quot;</span>\r\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{nth_fibonacci_matrix(n)}</span> and using bruteforce is &quot;</span>\r\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{nth_fibonacci_bruteforce(n)}</span>\\n&quot;</span>\r\n        )\r\n    <span class=\"hljs-comment\"># from timeit import timeit</span>\r\n    <span class=\"hljs-comment\"># print(timeit(&quot;nth_fibonacci_matrix(1000000)&quot;,</span>\r\n    <span class=\"hljs-comment\">#              &quot;from main import nth_fibonacci_matrix&quot;, number=5))</span>\r\n    <span class=\"hljs-comment\"># print(timeit(&quot;nth_fibonacci_bruteforce(1000000)&quot;,</span>\r\n    <span class=\"hljs-comment\">#              &quot;from main import nth_fibonacci_bruteforce&quot;, number=5))</span>\r\n    <span class=\"hljs-comment\"># 2.3342058970001744</span>\r\n    <span class=\"hljs-comment\"># 57.256506615000035</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    main()\r\n"
    }
  },
  "contributors": [
    {
      "name": "arfy slowy",
      "email": "slowy.arfy@gmail.com",
      "commits": 1
    },
    {
      "name": "CarsonHam",
      "email": "carson.ham@utexas.edu",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Md. Mahbubur Rahman",
      "email": "mahbuburrahman2111@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}