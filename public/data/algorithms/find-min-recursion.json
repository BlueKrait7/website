{
  "slug": "find-min-recursion",
  "name": "Find Min Recursion",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\find_min_recursion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\find_min_recursion.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-comment\"># Divide and Conquer algorithm</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_min</span>(<span class=\"hljs-params\">nums: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>], left: <span class=\"hljs-built_in\">int</span>, right: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    find min value in list\r\n    :param nums: contains elements\r\n    :param left: index of first element\r\n    :param right: index of last element\r\n    :return: min in nums\r\n\r\n    &gt;&gt;&gt; for nums in ([3, 2, 1], [-3, -2, -1], [3, -3, 0], [3.0, 3.1, 2.9]):\r\n    ...     find_min(nums, 0, len(nums) - 1) == min(nums)\r\n    True\r\n    True\r\n    True\r\n    True\r\n    &gt;&gt;&gt; nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\r\n    &gt;&gt;&gt; find_min(nums, 0, len(nums) - 1) == min(nums)\r\n    True\r\n    &gt;&gt;&gt; find_min([], 0, 0)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: find_min() arg is an empty sequence\r\n    &gt;&gt;&gt; find_min(nums, 0, len(nums)) == min(nums)\r\n    Traceback (most recent call last):\r\n        ...\r\n    IndexError: list index out of range\r\n    &gt;&gt;&gt; find_min(nums, -len(nums), -1) == min(nums)\r\n    True\r\n    &gt;&gt;&gt; find_min(nums, -len(nums) - 1, -1) == min(nums)\r\n    Traceback (most recent call last):\r\n        ...\r\n    IndexError: list index out of range\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nums) == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;find_min() arg is an empty sequence&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> (\r\n        left &gt;= <span class=\"hljs-built_in\">len</span>(nums)\r\n        <span class=\"hljs-keyword\">or</span> left &lt; -<span class=\"hljs-built_in\">len</span>(nums)\r\n        <span class=\"hljs-keyword\">or</span> right &gt;= <span class=\"hljs-built_in\">len</span>(nums)\r\n        <span class=\"hljs-keyword\">or</span> right &lt; -<span class=\"hljs-built_in\">len</span>(nums)\r\n    ):\r\n        <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> left == right:\r\n        <span class=\"hljs-keyword\">return</span> nums[left]\r\n    mid = (left + right) &gt;&gt; <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># the middle</span>\r\n    left_min = find_min(nums, left, mid)  <span class=\"hljs-comment\"># find min in range[left, mid]</span>\r\n    right_min = find_min(nums, mid + <span class=\"hljs-number\">1</span>, right)  <span class=\"hljs-comment\"># find min in range[mid + 1, right]</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> left_min <span class=\"hljs-keyword\">if</span> left_min &lt;= right_min <span class=\"hljs-keyword\">else</span> right_min\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod(verbose=<span class=\"hljs-literal\">True</span>)\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\FindMinRecursion.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\FindMinRecursion.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FindMinRecursion</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Driver Code\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">rand</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\r\n\r\n        <span class=\"hljs-comment\">/* rand size */</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> rand.nextInt(<span class=\"hljs-number\">100</span>) + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span>[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size];\r\n\r\n        <span class=\"hljs-comment\">/* init array with rand numbers */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n            array[i] = rand.nextInt() % <span class=\"hljs-number\">100</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">min</span><span class=\"hljs-params\">(array, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>)</span> == Arrays.stream(array).min().getAsInt();\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">min</span><span class=\"hljs-params\">(array, array.length)</span> == Arrays.stream(array).min().getAsInt();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Get min of array using divide and conquer algorithm\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> array contains elements\r\n     * <span class=\"hljs-doctag\">@param</span> low the index of the first element\r\n     * <span class=\"hljs-doctag\">@param</span> high the index of the last element\r\n     * <span class=\"hljs-doctag\">@return</span> min of {<span class=\"hljs-doctag\">@code</span> array}\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">min</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array, <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (low == high) {\r\n            <span class=\"hljs-keyword\">return</span> array[low]; <span class=\"hljs-comment\">// or array[high]</span>\r\n        }\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> (low + high) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">leftMin</span> <span class=\"hljs-operator\">=</span> min(array, low, mid); <span class=\"hljs-comment\">// get min in [low, mid]</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightMin</span> <span class=\"hljs-operator\">=</span> min(array, mid + <span class=\"hljs-number\">1</span>, high); <span class=\"hljs-comment\">// get min in [mid+1, high]</span>\r\n\r\n        <span class=\"hljs-keyword\">return</span> Math.min(leftMin, rightMin);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Get min of array using recursion algorithm\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> array contains elements\r\n     * <span class=\"hljs-doctag\">@param</span> len length of given array\r\n     * <span class=\"hljs-doctag\">@return</span> min value of {<span class=\"hljs-doctag\">@code</span> array}\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">min</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array, <span class=\"hljs-type\">int</span> len)</span> {\r\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">1</span> ? array[<span class=\"hljs-number\">0</span>] : Math.min(min(array, len - <span class=\"hljs-number\">1</span>), array[len - <span class=\"hljs-number\">1</span>]);\r\n    }\r\n}\r\n"
    },
    "dart": {
      "dir": "maths\\find_min_recursion.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths\\find_min_recursion.dart",
      "code": "<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-built_in\">List</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>];\r\n  <span class=\"hljs-built_in\">int</span> min = find_min_recursion(numbers, <span class=\"hljs-number\">0</span>, numbers.length - <span class=\"hljs-number\">1</span>);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;min = <span class=\"hljs-subst\">$min</span>&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\"><span class=\"language-markdown\">/<span class=\"hljs-strong\">**\r\n <span class=\"hljs-emphasis\">*</span></span></span> find max using <span class=\"language-markdown\"><span class=\"hljs-strong\"><span class=\"hljs-emphasis\">divide-and-conquer algorithm\r\n *</span>/</span></span></span>\r\n<span class=\"hljs-built_in\">int</span> find_min_recursion(<span class=\"hljs-built_in\">List</span> numbers, <span class=\"hljs-built_in\">int</span> low, <span class=\"hljs-built_in\">int</span> high) {\r\n  <span class=\"hljs-keyword\">if</span> (low == high) {\r\n    <span class=\"hljs-keyword\">return</span> numbers[low]; <span class=\"hljs-comment\">// or numbers[high]</span>\r\n  }\r\n  <span class=\"hljs-built_in\">int</span> mid = (low + high) &gt;&gt; <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-built_in\">int</span> leftMin =\r\n      find_min_recursion(numbers, low, mid); <span class=\"hljs-comment\">/* min in range [low mid] */</span>\r\n  <span class=\"hljs-built_in\">int</span> rightMin = find_min_recursion(\r\n      numbers, mid + <span class=\"hljs-number\">1</span>, high); <span class=\"hljs-comment\">/* min in range [mid + 1, high] */</span>\r\n  <span class=\"hljs-keyword\">return</span> leftMin &lt;= rightMin ? leftMin : rightMin;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Lewis Tian",
      "email": "taseikyo@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}