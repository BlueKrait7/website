{
  "slug": "large-factorial",
  "name": "Large Factorial",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\large_factorial.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\large_factorial.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Compute factorial of any arbitratily large number/\r\n *\r\n * \\author [Krishna Vedala](https://github.com/kvedala)\r\n * @see factorial.cpp\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;./large_number.h&quot;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** Test implementation for 10! Result must be 3628800.\r\n * @returns True if test pass else False\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;---- Check 1\\t&quot;</span>;\r\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> i, number = <span class=\"hljs-number\">10</span>;\r\n    large_number result;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">2</span>; i &lt;= number; i++) <span class=\"hljs-comment\">/* Multiply every number from 2 thru N */</span>\r\n        result *= i;\r\n\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *known_reslt = <span class=\"hljs-string\">&quot;3628800&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">/* check 1 */</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strlen</span>(known_reslt) != result.<span class=\"hljs-built_in\">num_digits</span>()) {\r\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Result lengths dont match! &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">strlen</span>(known_reslt)\r\n                  &lt;&lt; <span class=\"hljs-string\">&quot; != &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">num_digits</span>() &lt;&lt; std::endl;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">size_t</span> N = result.<span class=\"hljs-built_in\">num_digits</span>();\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (known_reslt[i] != result.<span class=\"hljs-built_in\">digit_char</span>(i)) {\r\n            std::cerr &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;^th digit mismatch! &quot;</span> &lt;&lt; known_reslt[i]\r\n                      &lt;&lt; <span class=\"hljs-string\">&quot; != &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">digit_char</span>(i) &lt;&lt; std::endl;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed!&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Test implementation for 100! The result is the 156 digit number:\r\n * ```\r\n * 9332621544394415268169923885626670049071596826438162146859296389521759\r\n * 9993229915608941463976156518286253697920827223758251185210916864000000\r\n * 000000000000000000\r\n * ```\r\n * @returns True if test pass else False\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;---- Check 2\\t&quot;</span>;\r\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> i, number = <span class=\"hljs-number\">100</span>;\r\n    large_number result;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">2</span>; i &lt;= number; i++) <span class=\"hljs-comment\">/* Multiply every number from 2 thru N */</span>\r\n        result *= i;\r\n\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *known_reslt =\r\n        <span class=\"hljs-string\">&quot;9332621544394415268169923885626670049071596826438162146859296389521759&quot;</span>\r\n        <span class=\"hljs-string\">&quot;9993229915608941463976156518286253697920827223758251185210916864000000&quot;</span>\r\n        <span class=\"hljs-string\">&quot;000000000000000000&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">/* check 1 */</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strlen</span>(known_reslt) != result.<span class=\"hljs-built_in\">num_digits</span>()) {\r\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Result lengths dont match! &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">strlen</span>(known_reslt)\r\n                  &lt;&lt; <span class=\"hljs-string\">&quot; != &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">num_digits</span>() &lt;&lt; std::endl;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">size_t</span> N = result.<span class=\"hljs-built_in\">num_digits</span>();\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (known_reslt[i] != result.<span class=\"hljs-built_in\">digit_char</span>(i)) {\r\n            std::cerr &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;^th digit mismatch! &quot;</span> &lt;&lt; known_reslt[i]\r\n                      &lt;&lt; <span class=\"hljs-string\">&quot; != &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">digit_char</span>(i) &lt;&lt; std::endl;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed!&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main program\r\n **/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\r\n    <span class=\"hljs-type\">int</span> number, i;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">2</span>) {\r\n        number = <span class=\"hljs-built_in\">atoi</span>(argv[<span class=\"hljs-number\">1</span>]);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the value of n(n starts from 0 ): &quot;</span>;\r\n        std::cin &gt;&gt; number;\r\n    }\r\n\r\n    large_number result;\r\n\r\n    std::<span class=\"hljs-type\">clock_t</span> start_time = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">2</span>; i &lt;= number; i++) <span class=\"hljs-comment\">/* Multiply every number from 2 thru N */</span>\r\n        result *= i;\r\n    std::<span class=\"hljs-type\">clock_t</span> end_time = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-type\">double</span> time_taken =\r\n        <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(end_time - start_time) / CLOCKS_PER_SEC;\r\n\r\n    std::cout &lt;&lt; number &lt;&lt; <span class=\"hljs-string\">&quot;! = &quot;</span> &lt;&lt; result &lt;&lt; std::endl\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;Number of digits: &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">num_digits</span>() &lt;&lt; std::endl\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;Time taken: &quot;</span> &lt;&lt; std::scientific &lt;&lt; time_taken &lt;&lt; <span class=\"hljs-string\">&quot; s&quot;</span>\r\n              &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-built_in\">test1</span>();\r\n    <span class=\"hljs-built_in\">test2</span>();\r\n    result.<span class=\"hljs-built_in\">test</span>();\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}