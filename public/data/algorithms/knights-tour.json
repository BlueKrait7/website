{
  "slug": "knights-tour",
  "name": "Knights Tour",
  "categories": [
    "backtracking"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\backtracking\\KnightsTour.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\backtracking\\KnightsTour.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.backtracking;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n\r\n<span class=\"hljs-comment\">/*\r\n    * Problem Statement: -\r\n    \r\n    Given a N*N board with the Knight placed on the first block of an empty board. Moving according to the rules of\r\n    chess knight must visit each square exactly once. Print the order of each cell in which they are visited.\r\n\r\n    Example: -\r\n\r\n    Input : N = 8\r\n\r\n    Output:\r\n        0  59  38  33  30  17   8  63\r\n        37  34  31  60   9  62  29  16\r\n        58   1  36  39  32  27  18   7\r\n        35  48  41  26  61  10  15  28\r\n        42  57   2  49  40  23   6  19\r\n        47  50  45  54  25  20  11  14\r\n        56  43  52   3  22  13  24   5\r\n        51  46  55  44  53   4  21  12\r\n\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KnightsTour</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">base</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">12</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] moves = {{<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">2</span>}, {<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>}, {-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>}, {-<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>}, {-<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>}, {-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">2</span>}}; <span class=\"hljs-comment\">// Possible moves by knight on chess</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] grid;    <span class=\"hljs-comment\">// chess grid</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> total;   <span class=\"hljs-comment\">// total squares in chess</span>\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        grid = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[base][base];\r\n        total = (base - <span class=\"hljs-number\">4</span>) * (base - <span class=\"hljs-number\">4</span>);\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; r &lt; base; r++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; c &lt; base; c++) {\r\n                <span class=\"hljs-keyword\">if</span> (r &lt; <span class=\"hljs-number\">2</span> || r &gt; base - <span class=\"hljs-number\">3</span> || c &lt; <span class=\"hljs-number\">2</span> || c &gt; base - <span class=\"hljs-number\">3</span>) {\r\n                    grid[r][c] = -<span class=\"hljs-number\">1</span>;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> + (<span class=\"hljs-type\">int</span>) (Math.random() * (base - <span class=\"hljs-number\">4</span>));\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">col</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> + (<span class=\"hljs-type\">int</span>) (Math.random() * (base - <span class=\"hljs-number\">4</span>));\r\n\r\n        grid[row][col] = <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (solve(row, col, <span class=\"hljs-number\">2</span>)) {\r\n            printResult();\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            System.out.println(<span class=\"hljs-string\">&quot;no result&quot;</span>);\r\n        }\r\n\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Return True when solvable</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">solve</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> row, <span class=\"hljs-type\">int</span> column, <span class=\"hljs-type\">int</span> count)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (count &gt; total) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        List&lt;<span class=\"hljs-type\">int</span>[]&gt; neighbor = neighbors(row, column);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (neighbor.isEmpty() &amp;&amp; count != total) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n\r\n        Collections.sort(neighbor, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;<span class=\"hljs-type\">int</span>[]&gt;() {\r\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] a, <span class=\"hljs-type\">int</span>[] b)</span> {\r\n                <span class=\"hljs-keyword\">return</span> a[<span class=\"hljs-number\">2</span>] - b[<span class=\"hljs-number\">2</span>];\r\n            }\r\n        });\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span>[] nb : neighbor) {\r\n            row = nb[<span class=\"hljs-number\">0</span>];\r\n            column = nb[<span class=\"hljs-number\">1</span>];\r\n            grid[row][column] = count;\r\n            <span class=\"hljs-keyword\">if</span> (!orphanDetected(count, row, column) &amp;&amp; solve(row, column, count + <span class=\"hljs-number\">1</span>)) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            }\r\n            grid[row][column] = <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Returns List of neighbours</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;<span class=\"hljs-type\">int</span>[]&gt; neighbors(<span class=\"hljs-type\">int</span> row, <span class=\"hljs-type\">int</span> column) {\r\n        List&lt;<span class=\"hljs-type\">int</span>[]&gt; neighbour = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span>[] m : moves) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> m[<span class=\"hljs-number\">0</span>];\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> m[<span class=\"hljs-number\">1</span>];\r\n            <span class=\"hljs-keyword\">if</span> (grid[row + y][column + x] == <span class=\"hljs-number\">0</span>) {\r\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> countNeighbors(row + y, column + x);\r\n                neighbour.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]{row + y, column + x, num});\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> neighbour;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Returns the total count of neighbors</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">countNeighbors</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> row, <span class=\"hljs-type\">int</span> column)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span>[] m : moves) {\r\n            <span class=\"hljs-keyword\">if</span> (grid[row + m[<span class=\"hljs-number\">1</span>]][column + m[<span class=\"hljs-number\">0</span>]] == <span class=\"hljs-number\">0</span>) {\r\n                num++;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> num;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Returns true if it is orphan</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">orphanDetected</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> count, <span class=\"hljs-type\">int</span> row, <span class=\"hljs-type\">int</span> column)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (count &lt; total - <span class=\"hljs-number\">1</span>) {\r\n            List&lt;<span class=\"hljs-type\">int</span>[]&gt; neighbor = neighbors(row, column);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span>[] nb : neighbor) {\r\n                <span class=\"hljs-keyword\">if</span> (countNeighbors(nb[<span class=\"hljs-number\">0</span>], nb[<span class=\"hljs-number\">1</span>]) == <span class=\"hljs-number\">0</span>) {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Prints the result grid</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printResult</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span>[] row : grid) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : row) {\r\n                <span class=\"hljs-keyword\">if</span> (i == -<span class=\"hljs-number\">1</span>) {\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n                System.out.printf(<span class=\"hljs-string\">&quot;%2d &quot;</span>, i);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Limbad Yash",
      "email": "56826569+limbad-YK@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}