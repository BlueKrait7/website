{
  "slug": "exponental-search",
  "name": "Exponental Search",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\searches\\ExponentalSearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\searches\\ExponentalSearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.searches;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadLocalRandom;\r\n<span class=\"hljs-keyword\">import</span> java.util.stream.IntStream;\r\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.devutils.searches.SearchAlgorithm;\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.lang.String.format;\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExponentialSearch</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SearchAlgorithm</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> ThreadLocalRandom.current();\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxElement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100000</span>;\r\n\r\n        Integer[] integers\r\n                = IntStream.generate(() -&gt; r.nextInt(maxElement))\r\n                        .limit(size)\r\n                        .sorted()\r\n                        .boxed()\r\n                        .toArray(Integer[]::<span class=\"hljs-keyword\">new</span>);\r\n\r\n        <span class=\"hljs-comment\">// The element that should be found</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">shouldBeFound</span> <span class=\"hljs-operator\">=</span> integers[r.nextInt(size - <span class=\"hljs-number\">1</span>)];\r\n\r\n        <span class=\"hljs-type\">ExponentialSearch</span> <span class=\"hljs-variable\">search</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ExponentialSearch</span>();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">atIndex</span> <span class=\"hljs-operator\">=</span> search.find(integers, shouldBeFound);\r\n\r\n        System.out.println(\r\n                format(\r\n                        <span class=\"hljs-string\">&quot;Should be found: %d. Found %d at index %d. An array length %d&quot;</span>,\r\n                        shouldBeFound, integers[atIndex], atIndex, size));\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">toCheck</span> <span class=\"hljs-operator\">=</span> Arrays.binarySearch(integers, shouldBeFound);\r\n        System.out.println(\r\n                format(\r\n                        <span class=\"hljs-string\">&quot;Found by system method at an index: %d. Is equal: %b&quot;</span>, toCheck, toCheck == atIndex));\r\n\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T[] array, T key)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (array[<span class=\"hljs-number\">0</span>] == key) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (array[array.length - <span class=\"hljs-number\">1</span>] == key) {\r\n            <span class=\"hljs-keyword\">return</span> array.length;\r\n        }\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">range</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (range &lt; array.length &amp;&amp; array[range].compareTo(key) &lt;= -<span class=\"hljs-number\">1</span>) {\r\n            range = range * <span class=\"hljs-number\">2</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> Arrays.binarySearch(array, range / <span class=\"hljs-number\">2</span>, Math.min(range, array.length), key);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashutosh Sharma",
      "email": "77958573+ashutosh-buku@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}