{
  "slug": "board-view",
  "name": "Board View",
  "categories": [
    "ai",
    "minimax",
    "sources",
    "minimaxplayground",
    "sources",
    "view"
  ],
  "body": {},
  "implementations": {
    "swift": {
      "dir": "algorithms\\AI\\minimax\\Sources\\Minimax.playground\\Sources\\View\\BoardView.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/algorithms\\AI\\minimax\\Sources\\Minimax.playground\\Sources\\View\\BoardView.swift",
      "code": "<span class=\"hljs-keyword\">import</span> UIKit\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BoardView</span>: <span class=\"hljs-title class_\">UIView</span> {\r\n    <span class=\"hljs-comment\">// MARK: -- Public</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> gameModel: <span class=\"hljs-type\">GameModel</span>!\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> players <span class=\"hljs-operator\">=</span> [<span class=\"hljs-type\">Player</span>(type: .human, symbol: .circle),\r\n                          <span class=\"hljs-type\">Player</span>(type: .computer, symbol: .cross)]\r\n\r\n    <span class=\"hljs-comment\">// MARK: -- Override&#x27;s</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">init</span>(<span class=\"hljs-params\">frame</span>: <span class=\"hljs-type\">CGRect</span>) {\r\n        <span class=\"hljs-keyword\">super</span>.<span class=\"hljs-keyword\">init</span>(frame: frame)\r\n\r\n        <span class=\"hljs-keyword\">self</span>.setupBoard()\r\n        <span class=\"hljs-keyword\">self</span>.setupResetButton()\r\n        <span class=\"hljs-keyword\">self</span>.setupIndicator()\r\n        <span class=\"hljs-keyword\">self</span>.startGame()\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">required</span> <span class=\"hljs-keyword\">init?</span>(<span class=\"hljs-params\">coder</span>: <span class=\"hljs-type\">NSCoder</span>) {\r\n        <span class=\"hljs-keyword\">super</span>.<span class=\"hljs-keyword\">init</span>(coder: coder)\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// MARK: -- Private</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> buttons: [<span class=\"hljs-type\">UIButton</span>] <span class=\"hljs-operator\">=</span> []\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> stackView: <span class=\"hljs-type\">UIStackView</span>!\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> resetButton: <span class=\"hljs-type\">UIButton</span>!\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> indicator: <span class=\"hljs-type\">UIActivityIndicatorView</span>!\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">startGame</span>() {\r\n        <span class=\"hljs-keyword\">self</span>.gameModel <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">GameModel</span>.<span class=\"hljs-keyword\">init</span>(boardSize: <span class=\"hljs-number\">3</span>, playersList: <span class=\"hljs-keyword\">self</span>.players, difficultLevel: .hard)\r\n\r\n        <span class=\"hljs-type\">DispatchQueue</span>.global(qos: .userInteractive).async {\r\n\r\n            <span class=\"hljs-keyword\">self</span>.blockViewForUser()\r\n\r\n            <span class=\"hljs-keyword\">self</span>.gameModel.makeMinimaxMove()\r\n\r\n            <span class=\"hljs-keyword\">self</span>.unblockViewForUser()\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">updateUI</span>() {\r\n        <span class=\"hljs-keyword\">if</span> gameModel.gameStatus <span class=\"hljs-operator\">!=</span> <span class=\"hljs-type\">BoardStatus</span>.continues {\r\n            <span class=\"hljs-keyword\">self</span>.resetButton.setTitle(<span class=\"hljs-string\">&quot;New game&quot;</span>, for: .normal)\r\n            blockButtons()\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">self</span>.resetButton.setTitle(<span class=\"hljs-string\">&quot;Reset&quot;</span>, for: .normal)\r\n        }\r\n        boardToButtons()\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">boardToButtons</span>() {\r\n        <span class=\"hljs-keyword\">var</span> buttonIndex <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> <span class=\"hljs-number\">3</span> {\r\n            <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> <span class=\"hljs-number\">3</span> {\r\n                <span class=\"hljs-keyword\">let</span> symbol <span class=\"hljs-operator\">=</span> gameModel.board.symbol(forPosition: <span class=\"hljs-type\">Position</span>(row, column))\r\n                <span class=\"hljs-keyword\">if</span> symbol <span class=\"hljs-operator\">!=</span> <span class=\"hljs-type\">PlayerSymbol</span>.empty {\r\n                    <span class=\"hljs-keyword\">self</span>.buttons[buttonIndex].setTitle(symbol<span class=\"hljs-operator\">?</span>.rawValue, for: .normal)\r\n                    <span class=\"hljs-keyword\">self</span>.buttons[buttonIndex].isUserInteractionEnabled <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\r\n                }\r\n                buttonIndex <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">setupBoard</span>() {\r\n        <span class=\"hljs-keyword\">self</span>.stackView <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UIStackView</span>()\r\n        <span class=\"hljs-keyword\">self</span>.stackView.translatesAutoresizingMaskIntoConstraints <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\r\n        <span class=\"hljs-keyword\">self</span>.stackView.axis <span class=\"hljs-operator\">=</span> .vertical\r\n        <span class=\"hljs-keyword\">self</span>.stackView.alignment <span class=\"hljs-operator\">=</span> .fill\r\n        <span class=\"hljs-keyword\">self</span>.stackView.distribution <span class=\"hljs-operator\">=</span> .fillEqually\r\n        <span class=\"hljs-keyword\">self</span>.stackView.spacing <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>\r\n\r\n        <span class=\"hljs-keyword\">self</span>.addSubview(<span class=\"hljs-keyword\">self</span>.stackView)\r\n\r\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">...</span> <span class=\"hljs-number\">3</span> {\r\n            <span class=\"hljs-keyword\">let</span> boardRow <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>.createBoardRow(rowNumber: index)\r\n            <span class=\"hljs-keyword\">self</span>.stackView.addArrangedSubview(boardRow)\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// constraints</span>\r\n        <span class=\"hljs-keyword\">let</span> constraints <span class=\"hljs-operator\">=</span> [\r\n            <span class=\"hljs-keyword\">self</span>.stackView.topAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.topAnchor, constant: <span class=\"hljs-number\">10</span>),\r\n            <span class=\"hljs-keyword\">self</span>.stackView.centerXAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.centerXAnchor),\r\n            <span class=\"hljs-keyword\">self</span>.stackView.widthAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.widthAnchor, constant: <span class=\"hljs-operator\">-</span><span class=\"hljs-number\">20</span>),\r\n            <span class=\"hljs-keyword\">self</span>.stackView.heightAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.stackView.widthAnchor)\r\n        ]\r\n        <span class=\"hljs-type\">NSLayoutConstraint</span>.activate(constraints)\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">createBoardRow</span>(<span class=\"hljs-params\">rowNumber</span>: <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">UIStackView</span> {\r\n        <span class=\"hljs-keyword\">let</span> stackView <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UIStackView</span>()\r\n        stackView.translatesAutoresizingMaskIntoConstraints <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\r\n        stackView.axis <span class=\"hljs-operator\">=</span> .horizontal\r\n        stackView.alignment <span class=\"hljs-operator\">=</span> .fill\r\n        stackView.distribution <span class=\"hljs-operator\">=</span> .fillEqually\r\n        stackView.spacing <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">...</span> <span class=\"hljs-number\">3</span> {\r\n            <span class=\"hljs-keyword\">let</span> button <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UIButton</span>()\r\n            <span class=\"hljs-keyword\">let</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">String</span>(index <span class=\"hljs-operator\">+</span> ( (rowNumber <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>) <span class=\"hljs-operator\">*</span> <span class=\"hljs-number\">3</span> ) )\r\n            button.restorationIdentifier <span class=\"hljs-operator\">=</span> id\r\n            button.backgroundColor <span class=\"hljs-operator\">=</span> .lightGray\r\n            button.titleLabel<span class=\"hljs-operator\">?</span>.font <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UIFont</span>(name: <span class=\"hljs-string\">&quot;Helvetica&quot;</span>, size: <span class=\"hljs-number\">50</span>)\r\n            button.addTarget(<span class=\"hljs-keyword\">self</span>, action: <span class=\"hljs-keyword\">#selector</span>(buttonPressed(<span class=\"hljs-keyword\">_</span>:)), for: .touchUpInside)\r\n\r\n            <span class=\"hljs-keyword\">self</span>.buttons.append(button)\r\n            stackView.addArrangedSubview(button)\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> stackView\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">blockViewForUser</span>() {\r\n        <span class=\"hljs-type\">DispatchQueue</span>.main.async {\r\n            <span class=\"hljs-keyword\">self</span>.resetButton.isHidden <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>\r\n            <span class=\"hljs-keyword\">self</span>.indicator.isHidden <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\r\n            <span class=\"hljs-keyword\">self</span>.indicator.startAnimating()\r\n\r\n            <span class=\"hljs-keyword\">self</span>.blockButtons()\r\n            <span class=\"hljs-keyword\">self</span>.updateUI()\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">unblockViewForUser</span>() {\r\n        <span class=\"hljs-type\">DispatchQueue</span>.main.async {\r\n            <span class=\"hljs-keyword\">self</span>.unblockButtons()\r\n            <span class=\"hljs-keyword\">self</span>.updateUI()\r\n\r\n            <span class=\"hljs-keyword\">self</span>.resetButton.isHidden <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\r\n            <span class=\"hljs-keyword\">self</span>.indicator.isHidden <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>\r\n            <span class=\"hljs-keyword\">self</span>.indicator.stopAnimating()\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">@objc</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">buttonPressed</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">sender</span>: <span class=\"hljs-type\">UIButton</span>) {\r\n        <span class=\"hljs-keyword\">let</span> position <span class=\"hljs-operator\">=</span> buttonIDtoPosition(id: sender.restorationIdentifier<span class=\"hljs-operator\">!</span>)\r\n\r\n        <span class=\"hljs-type\">DispatchQueue</span>.global(qos: .userInteractive).async {\r\n            <span class=\"hljs-keyword\">self</span>.gameModel.playerMakeMove(selectedPosition: position)\r\n\r\n            <span class=\"hljs-keyword\">self</span>.blockViewForUser()\r\n\r\n            <span class=\"hljs-keyword\">self</span>.gameModel.makeMinimaxMove()\r\n\r\n            <span class=\"hljs-keyword\">self</span>.unblockViewForUser()\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">setupResetButton</span>() {\r\n        <span class=\"hljs-keyword\">self</span>.resetButton <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UIButton</span>(type: .system)\r\n        <span class=\"hljs-keyword\">self</span>.resetButton.translatesAutoresizingMaskIntoConstraints <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\r\n        <span class=\"hljs-keyword\">self</span>.resetButton.setTitle(<span class=\"hljs-string\">&quot;Reset&quot;</span>, for: .normal)\r\n        <span class=\"hljs-keyword\">self</span>.resetButton.backgroundColor <span class=\"hljs-operator\">=</span> .lightGray\r\n        <span class=\"hljs-keyword\">self</span>.resetButton.addTarget(<span class=\"hljs-keyword\">self</span>, action: <span class=\"hljs-keyword\">#selector</span>(resetButtonPressed(<span class=\"hljs-keyword\">_</span>:)), for: .touchUpInside)\r\n\r\n        <span class=\"hljs-keyword\">self</span>.addSubview(<span class=\"hljs-keyword\">self</span>.resetButton)\r\n\r\n        <span class=\"hljs-comment\">// constraints</span>\r\n        <span class=\"hljs-keyword\">let</span> constraints <span class=\"hljs-operator\">=</span> [\r\n            <span class=\"hljs-keyword\">self</span>.resetButton.topAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.stackView.bottomAnchor, constant: <span class=\"hljs-number\">10</span>),\r\n            <span class=\"hljs-keyword\">self</span>.resetButton.bottomAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.bottomAnchor),\r\n            <span class=\"hljs-keyword\">self</span>.resetButton.widthAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.widthAnchor)\r\n        ]\r\n        <span class=\"hljs-type\">NSLayoutConstraint</span>.activate(constraints)\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">@objc</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">resetButtonPressed</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">sender</span>: <span class=\"hljs-type\">UIButton</span>) {\r\n        <span class=\"hljs-keyword\">self</span>.gameModel.newRound()\r\n        <span class=\"hljs-keyword\">self</span>.clearButtons()\r\n        <span class=\"hljs-keyword\">self</span>.startGame()\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">setupIndicator</span>() {\r\n        <span class=\"hljs-keyword\">self</span>.indicator <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UIActivityIndicatorView</span>()\r\n        <span class=\"hljs-keyword\">self</span>.indicator.translatesAutoresizingMaskIntoConstraints <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\r\n        <span class=\"hljs-keyword\">self</span>.indicator.backgroundColor <span class=\"hljs-operator\">=</span> .lightGray\r\n\r\n        <span class=\"hljs-keyword\">self</span>.addSubview(<span class=\"hljs-keyword\">self</span>.indicator)\r\n\r\n        <span class=\"hljs-comment\">// constraints</span>\r\n        <span class=\"hljs-keyword\">let</span> constraints <span class=\"hljs-operator\">=</span> [\r\n            <span class=\"hljs-keyword\">self</span>.indicator.topAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.stackView.bottomAnchor, constant: <span class=\"hljs-number\">10</span>),\r\n            <span class=\"hljs-keyword\">self</span>.indicator.bottomAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.bottomAnchor),\r\n            <span class=\"hljs-keyword\">self</span>.indicator.widthAnchor.constraint(equalTo: <span class=\"hljs-keyword\">self</span>.widthAnchor)\r\n        ]\r\n        <span class=\"hljs-type\">NSLayoutConstraint</span>.activate(constraints)\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">buttonIDtoPosition</span>(<span class=\"hljs-params\">id</span>: <span class=\"hljs-type\">String</span>) -&gt; <span class=\"hljs-type\">Position</span> {\r\n        <span class=\"hljs-keyword\">switch</span> id {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;1&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;2&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;3&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;4&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;5&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;6&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;7&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;8&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;9&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\r\n        <span class=\"hljs-keyword\">default</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Position</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">clearButtons</span>() {\r\n        <span class=\"hljs-keyword\">for</span> button <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.buttons {\r\n            button.setTitle(<span class=\"hljs-string\">&quot;&quot;</span>, for: .normal)\r\n            button.isUserInteractionEnabled <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">unblockButtons</span>() {\r\n        <span class=\"hljs-keyword\">for</span> button <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.buttons {\r\n            button.isUserInteractionEnabled <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">blockButtons</span>() {\r\n        <span class=\"hljs-keyword\">for</span> button <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.buttons {\r\n            button.isUserInteractionEnabled <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "michalnowak061",
      "email": "michal.nowak061@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}