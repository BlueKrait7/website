{
  "slug": "amicable-number",
  "name": "Amicable Number",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\AmicableNumber.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\AmicableNumber.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Amicable numbers are two different numbers so related that the sum of the\r\n * proper divisors of each is equal to the other number. (A proper divisor of a\r\n * number is a positive factor of that number other than the number itself. For\r\n * example, the proper divisors of 6 are 1, 2, and 3.) A pair of amicable\r\n * numbers constitutes an aliquot sequence of period 2. It is unknown if there\r\n * are infinitely many pairs of amicable numbers. *\r\n *\r\n * &lt;p&gt;\r\n * link: https://en.wikipedia.org/wiki/Amicable_numbers *\r\n *\r\n * &lt;p&gt;\r\n * Simple Example : (220,284) 220 is divisible by {1,2,4,5,10,11,20,22,44,55,110\r\n * } &lt;- Sum = 284\r\n * 284 is divisible by -&gt; 1,2,4,71,142 and the Sum of that is. Yes right you\r\n * probably expected it 220\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AmicableNumber</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n\r\n        AmicableNumber.findAllInRange(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3000</span>);\r\n        <span class=\"hljs-comment\">/* Res -&gt; Int Range of 1 till 3000there are 3Amicable_numbers These are  1: = ( 220,284)\t2: = ( 1184,1210)\r\n    3: = ( 2620,2924) So it worked\t*/</span>\r\n\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> startValue\r\n     * <span class=\"hljs-doctag\">@param</span> stopValue\r\n     * <span class=\"hljs-doctag\">@return</span>\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">findAllInRange</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> startValue, <span class=\"hljs-type\">int</span> stopValue)</span> {\r\n\r\n        <span class=\"hljs-comment\">/* the 2 for loops are to avoid to double check tuple. For example (200,100) and (100,200) is the same calculation\r\n     * also to avoid is to check the number with it self. a number with itself is always a AmicableNumber\r\n     * */</span>\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">countofRes</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> startValue; i &lt; stopValue; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i + <span class=\"hljs-number\">1</span>; j &lt;= stopValue; j++) {\r\n                <span class=\"hljs-keyword\">if</span> (isAmicableNumber(i, j)) {\r\n                    countofRes++;\r\n                    res.append(<span class=\"hljs-string\">&quot;&quot;</span> + countofRes + <span class=\"hljs-string\">&quot;: = ( &quot;</span> + i + <span class=\"hljs-string\">&quot;,&quot;</span> + j + <span class=\"hljs-string\">&quot;)&quot;</span> + <span class=\"hljs-string\">&quot;\\t&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n        res.insert(\r\n                <span class=\"hljs-number\">0</span>,\r\n                <span class=\"hljs-string\">&quot;Int Range of &quot;</span>\r\n                + startValue\r\n                + <span class=\"hljs-string\">&quot; till &quot;</span>\r\n                + stopValue\r\n                + <span class=\"hljs-string\">&quot; there are &quot;</span>\r\n                + countofRes\r\n                + <span class=\"hljs-string\">&quot; Amicable_numbers.These are \\n &quot;</span>);\r\n        System.out.println(res.toString());\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Check if {<span class=\"hljs-doctag\">@code</span> numberOne and numberTwo } are AmicableNumbers or not\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> numberOne numberTwo\r\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if {<span class=\"hljs-doctag\">@code</span> numberOne numberTwo} isAmicableNumbers\r\n     * otherwise false\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAmicableNumber</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> numberOne, <span class=\"hljs-type\">int</span> numberTwo)</span> {\r\n\r\n        <span class=\"hljs-keyword\">return</span> ((recursiveCalcOfDividerSum(numberOne, numberOne) == numberTwo\r\n                &amp;&amp; numberOne == recursiveCalcOfDividerSum(numberTwo, numberTwo)));\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * calculated in recursive calls the Sum of all the Dividers beside it self\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> number div = the next to test dividely by using the modulo\r\n     * operator\r\n     * <span class=\"hljs-doctag\">@return</span> sum of all the dividers\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">recursiveCalcOfDividerSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number, <span class=\"hljs-type\">int</span> div)</span> {\r\n\r\n        <span class=\"hljs-keyword\">if</span> (div == <span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (number % --div == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> recursiveCalcOfDividerSum(number, div) + div;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> recursiveCalcOfDividerSum(number, div);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ben",
      "email": "ben.riegel@mni.thm.de",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}