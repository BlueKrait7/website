{
  "slug": "partition-sort",
  "name": "Partition Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "sorting\\partition_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\partition_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> *b)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> tmp = *a;\r\n    *a = *b;\r\n    *b = tmp;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">partition</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> pivot = arr[low];\r\n    <span class=\"hljs-type\">int</span> i = low - <span class=\"hljs-number\">1</span>, j = high + <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-comment\">/* Find leftmost element &gt;= pivot */</span>\r\n        <span class=\"hljs-keyword\">do</span>\r\n        {\r\n            i++;\r\n        } <span class=\"hljs-keyword\">while</span> (arr[i] &lt; pivot);\r\n\r\n        <span class=\"hljs-comment\">/* Find rightmost element &lt;= pivot */</span>\r\n        <span class=\"hljs-keyword\">do</span>\r\n        {\r\n            j--;\r\n        } <span class=\"hljs-keyword\">while</span> (arr[j] &gt; pivot);\r\n\r\n        <span class=\"hljs-comment\">/* if two pointers met */</span>\r\n        <span class=\"hljs-keyword\">if</span> (i &gt;= j)\r\n            <span class=\"hljs-keyword\">return</span> j;\r\n\r\n        swap(&amp;arr[i], &amp;arr[j]);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">partitionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (low &lt; high)\r\n    {\r\n        <span class=\"hljs-type\">int</span> value = partition(arr, low, high);\r\n        partitionSort(arr, low, value);\r\n        partitionSort(arr, value + <span class=\"hljs-number\">1</span>, high);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> arr[<span class=\"hljs-number\">20</span>];\r\n    <span class=\"hljs-type\">int</span> i, range = <span class=\"hljs-number\">100</span>;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++)\r\n    {\r\n        arr[i] = rand() % range + <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-type\">int</span> size = <span class=\"hljs-keyword\">sizeof</span> arr / <span class=\"hljs-keyword\">sizeof</span> arr[<span class=\"hljs-number\">0</span>];\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Array: \\n&quot;</span>);\r\n    printArray(arr, size);\r\n    partitionSort(arr, <span class=\"hljs-number\">0</span>, size - <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted Array: \\n&quot;</span>);\r\n    printArray(arr, size);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}