{
  "slug": "power-of-two",
  "name": "Power of Two",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\power_of_two.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\power_of_two.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation to check whether a number is a power of 2 or not.\r\n *\r\n * @details\r\n * This algorithm uses bit manipulation to check if a number is a power of 2 or\r\n * not.\r\n *\r\n * ### Algorithm\r\n * Let the input number be n, then the bitwise and between n and n-1 will let us\r\n * know whether the number is power of 2 or not\r\n *\r\n * For Example,\r\n * If N= 32 then N-1 is 31, if we perform bitwise and of these two numbers then\r\n * the result will be zero, which indicates that it is the power of 2\r\n * If N=23 then N-1 is 22, if we perform bitwise and of these two numbers then\r\n * the result will not be zero , which indicates that it is not the power of 2\r\n * \\note This implementation is better than naive recursive or iterative\r\n * approach.\r\n *\r\n * @author [Neha Hasija](https://github.com/neha-hasija17)\r\n * @author [Rijul.S](https://github.com/Rijul24)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace math\r\n * @brief Mathematical algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> math {\r\n<span class=\"hljs-comment\">/**\r\n * @brief This function finds whether a number is power of 2 or not\r\n * @param n value for which we want to check\r\n * prints the result, as &quot;Yes, the number n is a power of 2&quot; or\r\n * &quot;No, the number is not a power of 2&quot; without quotes\r\n * @returns 1 if `n` IS the power of 2\r\n * @returns 0 if n is NOT a power of 2\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">power_of_two</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-comment\">/// result stores the</span>\r\n    <span class=\"hljs-comment\">/// bitwise and of n and n-1</span>\r\n    <span class=\"hljs-type\">int</span> result = n &amp; (n - <span class=\"hljs-number\">1</span>);\r\n    \r\n    <span class=\"hljs-keyword\">if</span> (result == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace math</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;First case testing... \\n&quot;</span>; <span class=\"hljs-comment\">// for n = 32 return 1</span>\r\n    <span class=\"hljs-built_in\">assert</span>(math::<span class=\"hljs-built_in\">power_of_two</span>(<span class=\"hljs-number\">32</span>) == <span class=\"hljs-number\">1</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed!\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Second case testing... \\n&quot;</span>; <span class=\"hljs-comment\">// for n = 5 return 0</span>\r\n    <span class=\"hljs-built_in\">assert</span>(math::<span class=\"hljs-built_in\">power_of_two</span>(<span class=\"hljs-number\">5</span>) == <span class=\"hljs-number\">0</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed!\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Third case testing... \\n&quot;</span>; <span class=\"hljs-comment\">// for n = 232 return 0</span>\r\n    <span class=\"hljs-built_in\">assert</span>(math::<span class=\"hljs-built_in\">power_of_two</span>(<span class=\"hljs-number\">232</span>) == <span class=\"hljs-number\">0</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed!\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nAll test cases have successfully passed!\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Take user input in the test cases (optional; currently commented)\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">user_input_test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// input from user</span>\r\n    \r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter a number &quot;</span> &lt;&lt; std::endl;\r\n    std::cin &gt;&gt; n; \r\n\r\n    <span class=\"hljs-comment\">/// function call with @param n</span>\r\n    <span class=\"hljs-type\">int</span> result = math::<span class=\"hljs-built_in\">power_of_two</span>(n);\r\n    <span class=\"hljs-keyword\">if</span> (result == <span class=\"hljs-number\">1</span>) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Yes, the number &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; is a power of 2\\n&quot;</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> { \r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;No, the number &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; is not a power of 2\\n&quot;</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>(); <span class=\"hljs-comment\">// run self-test implementations</span>\r\n\r\n    <span class=\"hljs-comment\">// uncomment the line below to take user inputs</span>\r\n    <span class=\"hljs-comment\">//user_input_test();</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "maths\\power_of_two.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths\\power_of_two.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-built_in\">bool</span> power_of_two(<span class=\"hljs-built_in\">int</span> n) {\r\n  <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\r\n\r\n  <span class=\"hljs-keyword\">return</span> (n &amp; (n - <span class=\"hljs-number\">1</span>)) == <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 0 returns false&quot;</span>, () {\r\n    expect(power_of_two(<span class=\"hljs-number\">0</span>), isFalse);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 1 returns true&quot;</span>, () {\r\n    expect(power_of_two(<span class=\"hljs-number\">1</span>), isTrue);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 10 returns false&quot;</span>, () {\r\n    expect(power_of_two(<span class=\"hljs-number\">10</span>), isFalse);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 10 returns false&quot;</span>, () {\r\n    expect(power_of_two(<span class=\"hljs-number\">10</span>), isFalse);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 23 returns false&quot;</span>, () {\r\n    expect(power_of_two(<span class=\"hljs-number\">23</span>), isFalse);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 32 returns true&quot;</span>, () {\r\n    expect(power_of_two(<span class=\"hljs-number\">32</span>), isTrue);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 2234 returns false&quot;</span>, () {\r\n    expect(power_of_two(<span class=\"hljs-number\">2234</span>), isFalse);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 2048 returns true&quot;</span>, () {\r\n    expect(power_of_two(<span class=\"hljs-number\">2048</span>), isTrue);\r\n  });\r\n}\r\n"
    },
    "ruby": {
      "dir": "maths\\power_of_two.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths\\power_of_two.rb",
      "code": "<span class=\"hljs-comment\"># Power of 2</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Given an integer n, return true if it is a power of two. Otherwise, return false.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># An integer n is a power of two, if there exists an integer x such that n == 2^x.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Example 1:</span>\r\n<span class=\"hljs-comment\"># Input: n = 1</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\n<span class=\"hljs-comment\"># Explanation: 2^0 = 1</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Example 2:</span>\r\n<span class=\"hljs-comment\"># Input: n = 16</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\n<span class=\"hljs-comment\"># Explanation: 2^4 = 16</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Example 3:</span>\r\n<span class=\"hljs-comment\"># Input: n = 3</span>\r\n<span class=\"hljs-comment\"># Output: false</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Example 4:</span>\r\n<span class=\"hljs-comment\"># Input: n = 4</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Example 5:</span>\r\n<span class=\"hljs-comment\"># Input: n = 5</span>\r\n<span class=\"hljs-comment\"># Output: false</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Constraints: -231 &lt;= n &lt;= 231 - 1</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer} n</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Boolean}</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-comment\"># Approach 1: Recursion</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Time Complexity: O(logn)</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_power_of_two</span><span class=\"hljs-params\">(n)</span></span>\r\n  <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-literal\">true</span>\r\n  <span class=\"hljs-keyword\">elsif</span> n.even?\r\n    is_power_of_two(n / <span class=\"hljs-number\">2</span>)\r\n  <span class=\"hljs-keyword\">else</span>\r\n    <span class=\"hljs-literal\">false</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nn = <span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">16</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">3</span>\r\n<span class=\"hljs-comment\"># Output: false</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">5</span>\r\n<span class=\"hljs-comment\"># Output: false</span>\r\nputs is_power_of_two(n)\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach 2: Without recursion</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Time Complexity: O(n)</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_power_of_two</span><span class=\"hljs-params\">(n)</span></span>\r\n  n /= <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">while</span> n.even? &amp;&amp; n != <span class=\"hljs-number\">0</span>\r\n  n == <span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nn = <span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">16</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">3</span>\r\n<span class=\"hljs-comment\"># Output: false</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">5</span>\r\n<span class=\"hljs-comment\"># Output: false</span>\r\nputs is_power_of_two(n)\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach 3: Using Math library</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Time Complexity: O(1)</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_power_of_two</span><span class=\"hljs-params\">(n)</span></span>\r\n  result_exponent = Math.log(n) / Math.log(<span class=\"hljs-number\">2</span>)\r\n  result_exponent % <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nn = <span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">16</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">3</span>\r\n<span class=\"hljs-comment\"># Output: false</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-comment\"># Output: true</span>\r\nputs is_power_of_two(n)\r\nn = <span class=\"hljs-number\">5</span>\r\n<span class=\"hljs-comment\"># Output: false</span>\r\nputs is_power_of_two(n)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 2
    },
    {
      "name": "Jessica Kwok",
      "email": "jessicatckwok@gmail.com",
      "commits": 4
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 5
    },
    {
      "name": "Neha Hasija",
      "email": "nehahasija9@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}