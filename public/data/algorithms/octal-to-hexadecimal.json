{
  "slug": "octal-to-hexadecimal",
  "name": "Octal To Hexadecimal",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\conversions\\OctalToHexadecimal.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\conversions\\OctalToHexadecimal.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.conversions;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Converts any Octal Number to HexaDecimal\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Tanmay Joshi\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OctalToHexadecimal</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method converts a Octal number to a decimal number\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> s The Octal Number\r\n     * <span class=\"hljs-doctag\">@return</span> The Decimal number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">octToDec</span><span class=\"hljs-params\">(String s)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; s.length(); j++) {\r\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> s.charAt(j);\r\n            num -= <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n            i *= <span class=\"hljs-number\">8</span>;\r\n            i += num;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> i;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method converts a Decimal number to a Hexadecimal number\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> d The Decimal Number\r\n     * <span class=\"hljs-doctag\">@return</span> The Hexadecimal number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">decimalToHex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> d)</span> {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">digits</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;0123456789ABCDEF&quot;</span>;\r\n        <span class=\"hljs-keyword\">if</span> (d &lt;= <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0&quot;</span>;\r\n        }\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\r\n        <span class=\"hljs-keyword\">while</span> (d &gt; <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">digit</span> <span class=\"hljs-operator\">=</span> d % <span class=\"hljs-number\">16</span>;\r\n            hex = digits.charAt(digit) + hex;\r\n            d = d / <span class=\"hljs-number\">16</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> hex;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\r\n\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        System.out.print(<span class=\"hljs-string\">&quot;Enter the Octal number: &quot;</span>);\r\n        <span class=\"hljs-comment\">// Take octal number as input from user in a string</span>\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">oct</span> <span class=\"hljs-operator\">=</span> input.next();\r\n\r\n        <span class=\"hljs-comment\">// Pass the octal number to function and get converted decimal form</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">decimal</span> <span class=\"hljs-operator\">=</span> octToDec(oct);\r\n\r\n        <span class=\"hljs-comment\">// Pass the decimal number to function and get converted Hex form of the number</span>\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hex</span> <span class=\"hljs-operator\">=</span> decimalToHex(decimal);\r\n        System.out.println(<span class=\"hljs-string\">&quot;The Hexadecimal equivalant is: &quot;</span> + hex);\r\n        input.close();\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "conversions\\octal_to_hexadecimal.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\octal_to_hexadecimal.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Octal to hexadecimal conversion by scanning user input\r\n * @details\r\n * The octalToHexadecimal function take the octal number as long\r\n * return a string hexadecimal value after conversion\r\n * @author [Rachit Bhalla](https://github.com/rachitbhalla)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span> <span class=\"hljs-comment\">// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span> <span class=\"hljs-comment\">// for pow function</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span> <span class=\"hljs-comment\">// for scanf and printf functions</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span> <span class=\"hljs-comment\">// for malloc and free functions</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span> <span class=\"hljs-comment\">// for strcmp function</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Convert octal number to decimal number\r\n * @param octalValue is the octal number that needs to be converted\r\n * @returns a decimal number after conversion\r\n */</span>\r\n<span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">octalToDecimal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> octalValue)</span>{\r\n    <span class=\"hljs-type\">long</span> decimalValue = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> (octalValue) {\r\n        <span class=\"hljs-comment\">// Extracts right-most digit, multiplies it with 8^i, and increment i by 1</span>\r\n        decimalValue += (<span class=\"hljs-type\">long</span>)(octalValue % <span class=\"hljs-number\">10</span>) * <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">8</span>, i++);\r\n        <span class=\"hljs-comment\">// Shift right in base 10</span>\r\n        octalValue /= <span class=\"hljs-number\">10</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> decimalValue;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Convert octal number to hexadecimal number\r\n * dynamically allocated memory needs to be freed by the calling the function free\r\n * @param octalValue is the octal number that needs to be converted\r\n * @returns a hexadecimal value as a string after conversion\r\n */</span>\r\n<span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">octalToHexadecimal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">long</span> octalValue)</span>{\r\n    <span class=\"hljs-type\">char</span> *hexadecimalValue = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">256</span> * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));\r\n    <span class=\"hljs-built_in\">sprintf</span>(hexadecimalValue, <span class=\"hljs-string\">&quot;%lX&quot;</span>, octalToDecimal(octalValue));\r\n    <span class=\"hljs-keyword\">return</span> hexadecimalValue;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-comment\">/* test that hexadecimal value of octal number 213 is 8B */</span>\r\n    assert(<span class=\"hljs-built_in\">strcmp</span>(octalToHexadecimal(<span class=\"hljs-number\">213</span>), <span class=\"hljs-string\">&quot;8B&quot;</span>) == <span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-comment\">/* test that hexadecimal value of octal number 174 is 7C */</span>\r\n    assert(<span class=\"hljs-built_in\">strcmp</span>(octalToHexadecimal(<span class=\"hljs-number\">174</span>), <span class=\"hljs-string\">&quot;7C&quot;</span>) == <span class=\"hljs-number\">0</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-comment\">// execute the tests</span>\r\n    test();\r\n\r\n    <span class=\"hljs-comment\">// get the value of octal number as input</span>\r\n    <span class=\"hljs-type\">int</span> octalValue;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter an octal number: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;octalValue);\r\n\r\n    <span class=\"hljs-comment\">// call the function octalToHexadecimal and print the hexadecimal value</span>\r\n    <span class=\"hljs-type\">char</span> *hexadecimalValue = octalToHexadecimal(octalValue);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Equivalent hexadecimal number is: %s&quot;</span>, hexadecimalValue);\r\n\r\n    <span class=\"hljs-comment\">// free the memory allocated dynamically in function octalToHexadecimal</span>\r\n    <span class=\"hljs-built_in\">free</span>(hexadecimalValue);\r\n\r\n    <span class=\"hljs-comment\">// return 0 and exit</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "conversions\\octal_to_hexadecimal.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions\\octal_to_hexadecimal.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;dart:math&quot;</span> <span class=\"hljs-keyword\">show</span> pow;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-comment\">// octal number to hex number</span>\r\n<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">String</span>&gt; hex_table = {\r\n  <span class=\"hljs-string\">&quot;10&quot;</span>: <span class=\"hljs-string\">&quot;A&quot;</span>,\r\n  <span class=\"hljs-string\">&quot;11&quot;</span>: <span class=\"hljs-string\">&quot;B&quot;</span>,\r\n  <span class=\"hljs-string\">&quot;12&quot;</span>: <span class=\"hljs-string\">&quot;C&quot;</span>,\r\n  <span class=\"hljs-string\">&quot;13&quot;</span>: <span class=\"hljs-string\">&quot;D&quot;</span>,\r\n  <span class=\"hljs-string\">&quot;14&quot;</span>: <span class=\"hljs-string\">&quot;E&quot;</span>,\r\n  <span class=\"hljs-string\">&quot;15&quot;</span>: <span class=\"hljs-string\">&quot;F&quot;</span>,\r\n};\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// function take octal string value and return hexadecimal string value</span>\r\n<span class=\"hljs-built_in\">String</span> ocatal_to_hex(<span class=\"hljs-built_in\">String</span> oct_val) {\r\n  <span class=\"hljs-comment\">// checking for unexpected values</span>\r\n  oct_val = oct_val.trim();\r\n  <span class=\"hljs-keyword\">if</span> (oct_val == <span class=\"hljs-keyword\">null</span> || oct_val == <span class=\"hljs-string\">&quot;&quot;</span>) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An empty value was passed to the function&quot;</span>);\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// negative number check</span>\r\n  <span class=\"hljs-built_in\">bool</span> is_negative = oct_val[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;-&quot;</span>;\r\n  <span class=\"hljs-keyword\">if</span> (is_negative) oct_val = oct_val.substring(<span class=\"hljs-number\">1</span>);\r\n\r\n  <span class=\"hljs-built_in\">int</span> oct;\r\n  <span class=\"hljs-keyword\">try</span> {\r\n    oct = <span class=\"hljs-built_in\">int</span>.parse(oct_val);\r\n  } <span class=\"hljs-keyword\">catch</span> (e) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An invalid value was passed to the function&quot;</span>);\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// checking number not valid for octal is passed(0-7)</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; oct_val.length; i++) {\r\n    <span class=\"hljs-keyword\">if</span> (!(<span class=\"hljs-built_in\">int</span>.parse(oct_val.substring(i, i + <span class=\"hljs-number\">1</span>)) &lt; <span class=\"hljs-number\">8</span>)) {\r\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An invalid value was passed to the function&quot;</span>);\r\n    }\r\n    ;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// converting octal to decimal</span>\r\n  <span class=\"hljs-built_in\">int</span> dec_val = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">0</span>;\r\n  <span class=\"hljs-keyword\">while</span> (oct != <span class=\"hljs-number\">0</span>) {\r\n    dec_val = dec_val + ((oct % <span class=\"hljs-number\">10</span>) * pow(<span class=\"hljs-number\">8</span>, i));\r\n    i++;\r\n    oct = oct ~/ <span class=\"hljs-number\">10</span>;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// converting to decimal to hex</span>\r\n  <span class=\"hljs-keyword\">if</span> (dec_val == <span class=\"hljs-number\">0</span>) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0&quot;</span>;\r\n  }\r\n  <span class=\"hljs-built_in\">String</span> hex_string = <span class=\"hljs-string\">&quot;&quot;</span>;\r\n  <span class=\"hljs-keyword\">while</span> (dec_val &gt; <span class=\"hljs-number\">0</span>) {\r\n    <span class=\"hljs-built_in\">String</span> hex_val = <span class=\"hljs-string\">&quot;&quot;</span>;\r\n    <span class=\"hljs-built_in\">int</span> remainder = dec_val % <span class=\"hljs-number\">16</span>;\r\n    dec_val = dec_val ~/ <span class=\"hljs-number\">16</span>;\r\n    <span class=\"hljs-keyword\">if</span> (hex_table.containsKey(remainder.toString())) {\r\n      hex_val = hex_table[remainder.toString()];\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      hex_val = remainder.toString();\r\n    }\r\n    hex_string = hex_val + hex_string;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// returning the value</span>\r\n  <span class=\"hljs-keyword\">if</span> (is_negative) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + hex_string;\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> hex_string;\r\n}\r\n\r\n<span class=\"hljs-comment\">// driver function</span>\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-comment\">// test input</span>\r\n  test(<span class=\"hljs-string\">&quot;ocatal_to_hex 75&quot;</span>, () {\r\n    expect(ocatal_to_hex(<span class=\"hljs-string\">&quot;75&quot;</span>), equals(<span class=\"hljs-string\">&quot;3D&quot;</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;ocatal_to_hex -62&quot;</span>, () {\r\n    expect(ocatal_to_hex(<span class=\"hljs-string\">&quot;-62&quot;</span>), equals(<span class=\"hljs-string\">&quot;-32&quot;</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;ocatal_to_hex rasies error when number is invalid&quot;</span>, () {\r\n    expect(() =&gt; ocatal_to_hex(<span class=\"hljs-string\">&quot;84&quot;</span>), throwsFormatException);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;ocatal_to_hex rasies error when number is invalid&quot;</span>, () {\r\n    expect(() =&gt; ocatal_to_hex(<span class=\"hljs-string\">&quot;as23&quot;</span>), throwsFormatException);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;ocatal_to_hex of empty string raises error&quot;</span>, () {\r\n    expect(() =&gt; ocatal_to_hex(<span class=\"hljs-string\">&quot;&quot;</span>), throwsFormatException);\r\n  });\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Manan-Rathi",
      "email": "76519771+Manan-Rathi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Vishnu",
      "email": "vishnupothan2@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "The-TJ",
      "email": "32796932+The-TJ@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "Rachit Bhalla",
      "email": "rachitbhalla1998@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}