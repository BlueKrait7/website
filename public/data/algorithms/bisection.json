{
  "slug": "bisection",
  "name": "Bisection",
  "categories": [
    "numericalanalysis"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\bisection.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\bisection.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nGiven a function on floating number f(x) and two floating numbers ‘a’ and ‘b’ such that\r\nf(a) * f(b) &lt; 0 and f(x) is continuous in [a, b].\r\nHere f(x) represents algebraic or transcendental equation.\r\nFind root of function in interval [a, b] (Or find a value of x such that f(x) is 0)\r\n\r\nhttps://en.wikipedia.org/wiki/Bisection_method\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">equation</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; equation(5)\r\n    -15\r\n    &gt;&gt;&gt; equation(0)\r\n    10\r\n    &gt;&gt;&gt; equation(-5)\r\n    -15\r\n    &gt;&gt;&gt; equation(0.1)\r\n    9.99\r\n    &gt;&gt;&gt; equation(-0.1)\r\n    9.99\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> - x * x\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bisection</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">float</span>, b: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; bisection(-2, 5)\r\n    3.1611328125\r\n    &gt;&gt;&gt; bisection(0, 6)\r\n    3.158203125\r\n    &gt;&gt;&gt; bisection(2, 3)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Wrong space!\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Bolzano theory in order to find if there is a root between a and b</span>\r\n    <span class=\"hljs-keyword\">if</span> equation(a) * equation(b) &gt;= <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Wrong space!&quot;</span>)\r\n\r\n    c = a\r\n    <span class=\"hljs-keyword\">while</span> (b - a) &gt;= <span class=\"hljs-number\">0.01</span>:\r\n        <span class=\"hljs-comment\"># Find middle point</span>\r\n        c = (a + b) / <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-comment\"># Check if middle point is root</span>\r\n        <span class=\"hljs-keyword\">if</span> equation(c) == <span class=\"hljs-number\">0.0</span>:\r\n            <span class=\"hljs-keyword\">break</span>\r\n        <span class=\"hljs-comment\"># Decide the side to repeat the steps</span>\r\n        <span class=\"hljs-keyword\">if</span> equation(c) * equation(a) &lt; <span class=\"hljs-number\">0</span>:\r\n            b = c\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            a = c\r\n    <span class=\"hljs-keyword\">return</span> c\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n    <span class=\"hljs-built_in\">print</span>(bisection(-<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>))\r\n    <span class=\"hljs-built_in\">print</span>(bisection(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>))\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\arithmetic_analysis\\bisection.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\arithmetic_analysis\\bisection.m",
      "code": "<span class=\"hljs-comment\">%The bisection method for finding the root of a function.</span>\r\n<span class=\"hljs-comment\">%f(a) is &lt; 0 and f(b) &gt; 0. By the intermediate value theorem,</span>\r\n<span class=\"hljs-comment\">%there exists a number c in between a and b such that f(c) = 0.</span>\r\n<span class=\"hljs-comment\">%In other words, there is always a root in between f(a) and f(b).</span>\r\n<span class=\"hljs-comment\">%The bisection method takes the midpoint between a and b and evaluates</span>\r\n<span class=\"hljs-comment\">%the value of the function at the midpoint. If it is less than 0,</span>\r\n<span class=\"hljs-comment\">%a is assigned the midpoint. If it is greater than 0, b is assigned the</span>\r\n<span class=\"hljs-comment\">%midpoint. With each iteration, the interval the root lies in is halved,</span>\r\n<span class=\"hljs-comment\">%guaranteeing that the algorithm will converge towards the root.</span>\r\n\r\n<span class=\"hljs-comment\">%INPUTS:</span>\r\n<span class=\"hljs-comment\">%Function handle f</span>\r\n<span class=\"hljs-comment\">%endpoint a</span>\r\n<span class=\"hljs-comment\">%endpoint b</span>\r\n<span class=\"hljs-comment\">%maximum tolerated error</span>\r\n\r\n<span class=\"hljs-comment\">%OUTPUTS:</span>\r\n<span class=\"hljs-comment\">%An approximated value for the root of f within the defined interval.</span>\r\n\r\n<span class=\"hljs-comment\">%Written by MatteoRaso</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span> = <span class=\"hljs-title\">bisection</span><span class=\"hljs-params\">(f, a, b, error)</span></span>\r\n  <span class=\"hljs-comment\">%Making sure that the user didn&#x27;t input invalid endpoints.</span>\r\n  <span class=\"hljs-keyword\">if</span> ~(f(a) &lt; <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-built_in\">disp</span>(<span class=\"hljs-string\">&quot;f(a) must be less than 0&quot;</span>)\r\n  <span class=\"hljs-keyword\">elseif</span> ~(f(b) &gt; <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-built_in\">disp</span>(<span class=\"hljs-string\">&quot;f(b) must be greater than 0&quot;</span>)\r\n  <span class=\"hljs-keyword\">else</span> \r\n    c = <span class=\"hljs-number\">1e9</span>;\r\n    <span class=\"hljs-comment\">%Loops until we reach an acceptable approximation.</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">abs</span>(f(c)) &gt; error\r\n      c = (a + b) / <span class=\"hljs-number\">2</span>;\r\n      <span class=\"hljs-keyword\">if</span> f(c) &lt; <span class=\"hljs-number\">0</span>\r\n        a = c;\r\n      <span class=\"hljs-keyword\">else</span>\r\n        b = c;\r\n      endif\r\n      <span class=\"hljs-built_in\">disp</span>(f(c))\r\n    endwhile\r\n    x = [<span class=\"hljs-string\">&quot;The root is approximately located at &quot;</span>, num2str(c)];\r\n    <span class=\"hljs-built_in\">disp</span>(x)\r\n    y = c;\r\n  endif\r\nendfunction\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "MatteoRaso",
      "email": "33975162+MatteoRaso@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "spamegg",
      "email": "4255997+spamegg1@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "billpaps",
      "email": "37051006+billpaps@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "wuminbin",
      "email": "wuminbin@yeah.net",
      "commits": 1
    },
    {
      "name": "Rafael García Cuéllar",
      "email": "r.gc@hotmail.es",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}