{
  "slug": "peak",
  "name": "Peak",
  "categories": [
    "divideandconquer"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "divide_and_conquer\\peak.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/divide_and_conquer\\peak.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nFinding the peak of a unimodal list using divide and conquer.\r\nA unimodal array is defined as follows: array is increasing up to index p,\r\nthen decreasing afterwards. (for p &gt;= 1)\r\nAn obvious solution can be performed in O(n),\r\nto find the maximum of the array.\r\n(From Kleinberg and Tardos. Algorithm Design.\r\nAddison Wesley 2006: Chapter 5 Solved Exercise 1)\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">peak</span>(<span class=\"hljs-params\">lst: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return the peak value of `lst`.\r\n    &gt;&gt;&gt; peak([1, 2, 3, 4, 5, 4, 3, 2, 1])\r\n    5\r\n    &gt;&gt;&gt; peak([1, 10, 9, 8, 7, 6, 5, 4])\r\n    10\r\n    &gt;&gt;&gt; peak([1, 9, 8, 7])\r\n    9\r\n    &gt;&gt;&gt; peak([1, 2, 3, 4, 5, 6, 7, 0])\r\n    7\r\n    &gt;&gt;&gt; peak([1, 2, 3, 4, 3, 2, 1, 0, -1, -2])\r\n    4\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># middle index</span>\r\n    m = <span class=\"hljs-built_in\">len</span>(lst) // <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-comment\"># choose the middle 3 elements</span>\r\n    three = lst[m - <span class=\"hljs-number\">1</span> : m + <span class=\"hljs-number\">2</span>]\r\n\r\n    <span class=\"hljs-comment\"># if middle element is peak</span>\r\n    <span class=\"hljs-keyword\">if</span> three[<span class=\"hljs-number\">1</span>] &gt; three[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">and</span> three[<span class=\"hljs-number\">1</span>] &gt; three[<span class=\"hljs-number\">2</span>]:\r\n        <span class=\"hljs-keyword\">return</span> three[<span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-comment\"># if increasing, recurse on right</span>\r\n    <span class=\"hljs-keyword\">elif</span> three[<span class=\"hljs-number\">0</span>] &lt; three[<span class=\"hljs-number\">2</span>]:\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(lst[:m]) == <span class=\"hljs-number\">2</span>:\r\n            m -= <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> peak(lst[m:])\r\n\r\n    <span class=\"hljs-comment\"># decreasing</span>\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(lst[:m]) == <span class=\"hljs-number\">2</span>:\r\n            m += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> peak(lst[:m])\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Cho Yin Yong",
      "email": "choyiny@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}