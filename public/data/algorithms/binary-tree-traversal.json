{
  "slug": "binary-tree-traversal",
  "name": "Binary Tree Traversal",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "searches\\binary_tree_traversal.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/searches\\binary_tree_traversal.py",
      "code": "<span class=\"hljs-comment\"># flake8: noqa</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is pure Python implementation of tree traversal algorithms\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> queue\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeNode</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data</span>):\r\n        self.data = data\r\n        self.right = <span class=\"hljs-literal\">None</span>\r\n        self.left = <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">build_tree</span>():\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n********Press N to stop entering at any point of time********\\n&quot;</span>)\r\n    check = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the value of the root node: &quot;</span>).strip().lower() <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;n&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> check == <span class=\"hljs-string\">&quot;n&quot;</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n    q: queue.Queue = queue.Queue()\r\n    tree_node = TreeNode(<span class=\"hljs-built_in\">int</span>(check))\r\n    q.put(tree_node)\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> q.empty():\r\n        node_found = q.get()\r\n        msg = <span class=\"hljs-string\">&quot;Enter the left node of %s: &quot;</span> % node_found.data\r\n        check = <span class=\"hljs-built_in\">input</span>(msg).strip().lower() <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;n&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> check == <span class=\"hljs-string\">&quot;n&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> tree_node\r\n        left_node = TreeNode(<span class=\"hljs-built_in\">int</span>(check))\r\n        node_found.left = left_node\r\n        q.put(left_node)\r\n        msg = <span class=\"hljs-string\">&quot;Enter the right node of %s: &quot;</span> % node_found.data\r\n        check = <span class=\"hljs-built_in\">input</span>(msg).strip().lower() <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;n&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> check == <span class=\"hljs-string\">&quot;n&quot;</span>:\r\n            <span class=\"hljs-keyword\">return</span> tree_node\r\n        right_node = TreeNode(<span class=\"hljs-built_in\">int</span>(check))\r\n        node_found.right = right_node\r\n        q.put(right_node)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pre_order</span>(<span class=\"hljs-params\">node: TreeNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; root = TreeNode(1)\r\n    &gt;&gt;&gt; tree_node2 = TreeNode(2)\r\n    &gt;&gt;&gt; tree_node3 = TreeNode(3)\r\n    &gt;&gt;&gt; tree_node4 = TreeNode(4)\r\n    &gt;&gt;&gt; tree_node5 = TreeNode(5)\r\n    &gt;&gt;&gt; tree_node6 = TreeNode(6)\r\n    &gt;&gt;&gt; tree_node7 = TreeNode(7)\r\n    &gt;&gt;&gt; root.left, root.right = tree_node2, tree_node3\r\n    &gt;&gt;&gt; tree_node2.left, tree_node2.right = tree_node4 , tree_node5\r\n    &gt;&gt;&gt; tree_node3.left, tree_node3.right = tree_node6 , tree_node7\r\n    &gt;&gt;&gt; pre_order(root)\r\n    1,2,4,5,3,6,7,\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(node, TreeNode) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> node:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    <span class=\"hljs-built_in\">print</span>(node.data, end=<span class=\"hljs-string\">&quot;,&quot;</span>)\r\n    pre_order(node.left)\r\n    pre_order(node.right)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">in_order</span>(<span class=\"hljs-params\">node: TreeNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; root = TreeNode(1)\r\n    &gt;&gt;&gt; tree_node2 = TreeNode(2)\r\n    &gt;&gt;&gt; tree_node3 = TreeNode(3)\r\n    &gt;&gt;&gt; tree_node4 = TreeNode(4)\r\n    &gt;&gt;&gt; tree_node5 = TreeNode(5)\r\n    &gt;&gt;&gt; tree_node6 = TreeNode(6)\r\n    &gt;&gt;&gt; tree_node7 = TreeNode(7)\r\n    &gt;&gt;&gt; root.left, root.right = tree_node2, tree_node3\r\n    &gt;&gt;&gt; tree_node2.left, tree_node2.right = tree_node4 , tree_node5\r\n    &gt;&gt;&gt; tree_node3.left, tree_node3.right = tree_node6 , tree_node7\r\n    &gt;&gt;&gt; in_order(root)\r\n    4,2,5,1,6,3,7,\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(node, TreeNode) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> node:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    in_order(node.left)\r\n    <span class=\"hljs-built_in\">print</span>(node.data, end=<span class=\"hljs-string\">&quot;,&quot;</span>)\r\n    in_order(node.right)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">post_order</span>(<span class=\"hljs-params\">node: TreeNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; root = TreeNode(1)\r\n    &gt;&gt;&gt; tree_node2 = TreeNode(2)\r\n    &gt;&gt;&gt; tree_node3 = TreeNode(3)\r\n    &gt;&gt;&gt; tree_node4 = TreeNode(4)\r\n    &gt;&gt;&gt; tree_node5 = TreeNode(5)\r\n    &gt;&gt;&gt; tree_node6 = TreeNode(6)\r\n    &gt;&gt;&gt; tree_node7 = TreeNode(7)\r\n    &gt;&gt;&gt; root.left, root.right = tree_node2, tree_node3\r\n    &gt;&gt;&gt; tree_node2.left, tree_node2.right = tree_node4 , tree_node5\r\n    &gt;&gt;&gt; tree_node3.left, tree_node3.right = tree_node6 , tree_node7\r\n    &gt;&gt;&gt; post_order(root)\r\n    4,5,2,6,7,3,1,\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(node, TreeNode) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> node:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    post_order(node.left)\r\n    post_order(node.right)\r\n    <span class=\"hljs-built_in\">print</span>(node.data, end=<span class=\"hljs-string\">&quot;,&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">level_order</span>(<span class=\"hljs-params\">node: TreeNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; root = TreeNode(1)\r\n    &gt;&gt;&gt; tree_node2 = TreeNode(2)\r\n    &gt;&gt;&gt; tree_node3 = TreeNode(3)\r\n    &gt;&gt;&gt; tree_node4 = TreeNode(4)\r\n    &gt;&gt;&gt; tree_node5 = TreeNode(5)\r\n    &gt;&gt;&gt; tree_node6 = TreeNode(6)\r\n    &gt;&gt;&gt; tree_node7 = TreeNode(7)\r\n    &gt;&gt;&gt; root.left, root.right = tree_node2, tree_node3\r\n    &gt;&gt;&gt; tree_node2.left, tree_node2.right = tree_node4 , tree_node5\r\n    &gt;&gt;&gt; tree_node3.left, tree_node3.right = tree_node6 , tree_node7\r\n    &gt;&gt;&gt; level_order(root)\r\n    1,2,3,4,5,6,7,\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(node, TreeNode) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> node:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    q: queue.Queue = queue.Queue()\r\n    q.put(node)\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> q.empty():\r\n        node_dequeued = q.get()\r\n        <span class=\"hljs-built_in\">print</span>(node_dequeued.data, end=<span class=\"hljs-string\">&quot;,&quot;</span>)\r\n        <span class=\"hljs-keyword\">if</span> node_dequeued.left:\r\n            q.put(node_dequeued.left)\r\n        <span class=\"hljs-keyword\">if</span> node_dequeued.right:\r\n            q.put(node_dequeued.right)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">level_order_actual</span>(<span class=\"hljs-params\">node: TreeNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; root = TreeNode(1)\r\n    &gt;&gt;&gt; tree_node2 = TreeNode(2)\r\n    &gt;&gt;&gt; tree_node3 = TreeNode(3)\r\n    &gt;&gt;&gt; tree_node4 = TreeNode(4)\r\n    &gt;&gt;&gt; tree_node5 = TreeNode(5)\r\n    &gt;&gt;&gt; tree_node6 = TreeNode(6)\r\n    &gt;&gt;&gt; tree_node7 = TreeNode(7)\r\n    &gt;&gt;&gt; root.left, root.right = tree_node2, tree_node3\r\n    &gt;&gt;&gt; tree_node2.left, tree_node2.right = tree_node4 , tree_node5\r\n    &gt;&gt;&gt; tree_node3.left, tree_node3.right = tree_node6 , tree_node7\r\n    &gt;&gt;&gt; level_order_actual(root)\r\n    1,\r\n    2,3,\r\n    4,5,6,7,\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(node, TreeNode) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> node:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    q: queue.Queue = queue.Queue()\r\n    q.put(node)\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> q.empty():\r\n        <span class=\"hljs-built_in\">list</span> = []\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> q.empty():\r\n            node_dequeued = q.get()\r\n            <span class=\"hljs-built_in\">print</span>(node_dequeued.data, end=<span class=\"hljs-string\">&quot;,&quot;</span>)\r\n            <span class=\"hljs-keyword\">if</span> node_dequeued.left:\r\n                <span class=\"hljs-built_in\">list</span>.append(node_dequeued.left)\r\n            <span class=\"hljs-keyword\">if</span> node_dequeued.right:\r\n                <span class=\"hljs-built_in\">list</span>.append(node_dequeued.right)\r\n        <span class=\"hljs-built_in\">print</span>()\r\n        <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">list</span>:\r\n            q.put(node)\r\n\r\n\r\n<span class=\"hljs-comment\"># iteration version</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pre_order_iter</span>(<span class=\"hljs-params\">node: TreeNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; root = TreeNode(1)\r\n    &gt;&gt;&gt; tree_node2 = TreeNode(2)\r\n    &gt;&gt;&gt; tree_node3 = TreeNode(3)\r\n    &gt;&gt;&gt; tree_node4 = TreeNode(4)\r\n    &gt;&gt;&gt; tree_node5 = TreeNode(5)\r\n    &gt;&gt;&gt; tree_node6 = TreeNode(6)\r\n    &gt;&gt;&gt; tree_node7 = TreeNode(7)\r\n    &gt;&gt;&gt; root.left, root.right = tree_node2, tree_node3\r\n    &gt;&gt;&gt; tree_node2.left, tree_node2.right = tree_node4 , tree_node5\r\n    &gt;&gt;&gt; tree_node3.left, tree_node3.right = tree_node6 , tree_node7\r\n    &gt;&gt;&gt; pre_order_iter(root)\r\n    1,2,4,5,3,6,7,\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(node, TreeNode) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> node:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    stack: <span class=\"hljs-built_in\">list</span>[TreeNode] = []\r\n    n = node\r\n    <span class=\"hljs-keyword\">while</span> n <span class=\"hljs-keyword\">or</span> stack:\r\n        <span class=\"hljs-keyword\">while</span> n:  <span class=\"hljs-comment\"># start from root node, find its left child</span>\r\n            <span class=\"hljs-built_in\">print</span>(n.data, end=<span class=\"hljs-string\">&quot;,&quot;</span>)\r\n            stack.append(n)\r\n            n = n.left\r\n        <span class=\"hljs-comment\"># end of while means current node doesn&#x27;t have left child</span>\r\n        n = stack.pop()\r\n        <span class=\"hljs-comment\"># start to traverse its right child</span>\r\n        n = n.right\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">in_order_iter</span>(<span class=\"hljs-params\">node: TreeNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; root = TreeNode(1)\r\n    &gt;&gt;&gt; tree_node2 = TreeNode(2)\r\n    &gt;&gt;&gt; tree_node3 = TreeNode(3)\r\n    &gt;&gt;&gt; tree_node4 = TreeNode(4)\r\n    &gt;&gt;&gt; tree_node5 = TreeNode(5)\r\n    &gt;&gt;&gt; tree_node6 = TreeNode(6)\r\n    &gt;&gt;&gt; tree_node7 = TreeNode(7)\r\n    &gt;&gt;&gt; root.left, root.right = tree_node2, tree_node3\r\n    &gt;&gt;&gt; tree_node2.left, tree_node2.right = tree_node4 , tree_node5\r\n    &gt;&gt;&gt; tree_node3.left, tree_node3.right = tree_node6 , tree_node7\r\n    &gt;&gt;&gt; in_order_iter(root)\r\n    4,2,5,1,6,3,7,\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(node, TreeNode) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> node:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    stack: <span class=\"hljs-built_in\">list</span>[TreeNode] = []\r\n    n = node\r\n    <span class=\"hljs-keyword\">while</span> n <span class=\"hljs-keyword\">or</span> stack:\r\n        <span class=\"hljs-keyword\">while</span> n:\r\n            stack.append(n)\r\n            n = n.left\r\n        n = stack.pop()\r\n        <span class=\"hljs-built_in\">print</span>(n.data, end=<span class=\"hljs-string\">&quot;,&quot;</span>)\r\n        n = n.right\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">post_order_iter</span>(<span class=\"hljs-params\">node: TreeNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; root = TreeNode(1)\r\n    &gt;&gt;&gt; tree_node2 = TreeNode(2)\r\n    &gt;&gt;&gt; tree_node3 = TreeNode(3)\r\n    &gt;&gt;&gt; tree_node4 = TreeNode(4)\r\n    &gt;&gt;&gt; tree_node5 = TreeNode(5)\r\n    &gt;&gt;&gt; tree_node6 = TreeNode(6)\r\n    &gt;&gt;&gt; tree_node7 = TreeNode(7)\r\n    &gt;&gt;&gt; root.left, root.right = tree_node2, tree_node3\r\n    &gt;&gt;&gt; tree_node2.left, tree_node2.right = tree_node4 , tree_node5\r\n    &gt;&gt;&gt; tree_node3.left, tree_node3.right = tree_node6 , tree_node7\r\n    &gt;&gt;&gt; post_order_iter(root)\r\n    4,5,2,6,7,3,1,\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(node, TreeNode) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> node:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    stack1, stack2 = [], []\r\n    n = node\r\n    stack1.append(n)\r\n    <span class=\"hljs-keyword\">while</span> stack1:  <span class=\"hljs-comment\"># to find the reversed order of post order, store it in stack2</span>\r\n        n = stack1.pop()\r\n        <span class=\"hljs-keyword\">if</span> n.left:\r\n            stack1.append(n.left)\r\n        <span class=\"hljs-keyword\">if</span> n.right:\r\n            stack1.append(n.right)\r\n        stack2.append(n)\r\n    <span class=\"hljs-keyword\">while</span> stack2:  <span class=\"hljs-comment\"># pop up from stack2 will be the post order</span>\r\n        <span class=\"hljs-built_in\">print</span>(stack2.pop().data, end=<span class=\"hljs-string\">&quot;,&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prompt</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;&quot;</span>, width=<span class=\"hljs-number\">50</span>, char=<span class=\"hljs-string\">&quot;*&quot;</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> s:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;\\n&quot;</span> + width * char\r\n    left, extra = <span class=\"hljs-built_in\">divmod</span>(width - <span class=\"hljs-built_in\">len</span>(s) - <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{left * char}</span> <span class=\"hljs-subst\">{s}</span> <span class=\"hljs-subst\">{(left + extra) * char}</span>&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    <span class=\"hljs-built_in\">print</span>(prompt(<span class=\"hljs-string\">&quot;Binary Tree Traversals&quot;</span>))\r\n\r\n    node = build_tree()\r\n    <span class=\"hljs-built_in\">print</span>(prompt(<span class=\"hljs-string\">&quot;Pre Order Traversal&quot;</span>))\r\n    pre_order(node)\r\n    <span class=\"hljs-built_in\">print</span>(prompt() + <span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(prompt(<span class=\"hljs-string\">&quot;In Order Traversal&quot;</span>))\r\n    in_order(node)\r\n    <span class=\"hljs-built_in\">print</span>(prompt() + <span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(prompt(<span class=\"hljs-string\">&quot;Post Order Traversal&quot;</span>))\r\n    post_order(node)\r\n    <span class=\"hljs-built_in\">print</span>(prompt() + <span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(prompt(<span class=\"hljs-string\">&quot;Level Order Traversal&quot;</span>))\r\n    level_order(node)\r\n    <span class=\"hljs-built_in\">print</span>(prompt() + <span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(prompt(<span class=\"hljs-string\">&quot;Actual Level Order Traversal&quot;</span>))\r\n    level_order_actual(node)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;*&quot;</span> * <span class=\"hljs-number\">50</span> + <span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(prompt(<span class=\"hljs-string\">&quot;Pre Order Traversal - Iteration Version&quot;</span>))\r\n    pre_order_iter(node)\r\n    <span class=\"hljs-built_in\">print</span>(prompt() + <span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(prompt(<span class=\"hljs-string\">&quot;In Order Traversal - Iteration Version&quot;</span>))\r\n    in_order_iter(node)\r\n    <span class=\"hljs-built_in\">print</span>(prompt() + <span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(prompt(<span class=\"hljs-string\">&quot;Post Order Traversal - Iteration Version&quot;</span>))\r\n    post_order_iter(node)\r\n    <span class=\"hljs-built_in\">print</span>(prompt())\r\n"
    },
    "dart": {
      "dir": "data_structures\\binary_tree\\binary_tree_traversal.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures\\binary_tree\\binary_tree_traversal.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TreeNode</span> </span>{\r\n  <span class=\"hljs-built_in\">int</span> data;\r\n  <span class=\"hljs-keyword\">var</span> leftNode = <span class=\"hljs-keyword\">null</span>;\r\n  <span class=\"hljs-keyword\">var</span> rightNode = <span class=\"hljs-keyword\">null</span>;\r\n\r\n  <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">get</span> value {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.data;\r\n  }\r\n\r\n  TreeNode <span class=\"hljs-keyword\">get</span> left {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.leftNode;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-keyword\">set</span> left(TreeNode value) {\r\n    <span class=\"hljs-keyword\">this</span>.leftNode = value;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-keyword\">set</span> right(TreeNode value) {\r\n    <span class=\"hljs-keyword\">this</span>.rightNode = value;\r\n  }\r\n\r\n  TreeNode <span class=\"hljs-keyword\">get</span> right {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.rightNode;\r\n  }\r\n\r\n  TreeNode(<span class=\"hljs-keyword\">this</span>.data);\r\n}\r\n\r\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; inOrder(TreeNode root, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; result) {\r\n  <span class=\"hljs-keyword\">if</span> (root != <span class=\"hljs-keyword\">null</span>) {\r\n    inOrder(root.left, result);\r\n    result.add(root.value);\r\n    inOrder(root.right, result);\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; preOrder(TreeNode root, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; result) {\r\n  <span class=\"hljs-keyword\">if</span> (root != <span class=\"hljs-keyword\">null</span>) {\r\n    result.add(root.value);\r\n    preOrder(root.left, result);\r\n    preOrder(root.right, result);\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; postOrder(TreeNode root, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; result) {\r\n  <span class=\"hljs-keyword\">if</span> (root != <span class=\"hljs-keyword\">null</span>) {\r\n    postOrder(root.left, result);\r\n    postOrder(root.right, result);\r\n    result.add(root.value);\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-keyword\">var</span> root = TreeNode(<span class=\"hljs-number\">1</span>);\r\n  root.left = TreeNode(<span class=\"hljs-number\">2</span>);\r\n  root.right = TreeNode(<span class=\"hljs-number\">3</span>);\r\n  root.left.left = TreeNode(<span class=\"hljs-number\">4</span>);\r\n  root.left.right = TreeNode(<span class=\"hljs-number\">5</span>);\r\n  root.left.right.left = TreeNode(<span class=\"hljs-number\">6</span>);\r\n  root.right.left = TreeNode(<span class=\"hljs-number\">7</span>);\r\n  root.right.left.left = TreeNode(<span class=\"hljs-number\">8</span>);\r\n  root.right.left.left.right = TreeNode(<span class=\"hljs-number\">9</span>);\r\n\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; result;\r\n  result = <span class=\"hljs-built_in\">List</span>();\r\n\r\n  test((<span class=\"hljs-string\">&#x27;inOrder traversal&#x27;</span>), () {\r\n    result = <span class=\"hljs-built_in\">List</span>();\r\n    expect(inOrder(root, result), equals([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>]));\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;preOrder traversal&#x27;</span>), () {\r\n    result = <span class=\"hljs-built_in\">List</span>();\r\n    expect(preOrder(root, result), equals([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]));\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;postOrder traversal&#x27;</span>), () {\r\n    result = <span class=\"hljs-built_in\">List</span>();\r\n    expect(postOrder(root, result), equals([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>]));\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;postOrder traversal&#x27;</span>), () {\r\n    result = <span class=\"hljs-built_in\">List</span>();\r\n    root = <span class=\"hljs-keyword\">null</span>;\r\n    expect(postOrder(root, result), equals([]));\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;inOrder traversal&#x27;</span>), () {\r\n    result = <span class=\"hljs-built_in\">List</span>();\r\n    root = <span class=\"hljs-keyword\">null</span>;\r\n    expect(inOrder(root, result), equals([]));\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;preOrder traversal&#x27;</span>), () {\r\n    result = <span class=\"hljs-built_in\">List</span>();\r\n    root = <span class=\"hljs-keyword\">null</span>;\r\n    expect(preOrder(root, result), equals([]));\r\n  });\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}