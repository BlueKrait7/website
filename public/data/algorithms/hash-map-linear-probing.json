{
  "slug": "hash-map-linear-probing",
  "name": "Hash Map Linear Probing",
  "categories": [
    "datastructures",
    "hashmap",
    "hashing"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\hashmap\\hashing\\HashMapLinearProbing.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\hashmap\\hashing\\HashMapLinearProbing.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.hashmap.hashing;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This class is an implementation of a hash table using linear probing It uses\r\n * a dynamic array to lengthen the size of the hash table when load factor &gt; .7\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashMapLinearProbing</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> hsize; <span class=\"hljs-comment\">// size of the hash table</span>\r\n    <span class=\"hljs-keyword\">private</span> Integer[] buckets; <span class=\"hljs-comment\">// array representing the table</span>\r\n    <span class=\"hljs-keyword\">private</span> Integer AVAILABLE;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size; <span class=\"hljs-comment\">// amount of elements in the hash table</span>\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Constructor initializes buckets array, hsize, and creates dummy object\r\n     * for AVAILABLE\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> hsize the desired size of the hash map\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashMapLinearProbing</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> hsize)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[hsize];\r\n        <span class=\"hljs-built_in\">this</span>.hsize = hsize;\r\n        <span class=\"hljs-built_in\">this</span>.AVAILABLE = Integer.MIN_VALUE;\r\n        <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * The Hash Function takes a given key and finds an index based on its data\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> key the desired key to be converted\r\n     * <span class=\"hljs-doctag\">@return</span> int an index corresponding to the key\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashing</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> key % hsize;\r\n        <span class=\"hljs-keyword\">if</span> (hash &lt; <span class=\"hljs-number\">0</span>) {\r\n            hash += hsize;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> hash;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * inserts the key into the hash map by wrapping it as an Integer object\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> key the desired key to be inserted in the hash map\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">wrappedInt</span> <span class=\"hljs-operator\">=</span> key;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (isFull()) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Hash table is full&quot;</span>);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (buckets[hash] == <span class=\"hljs-literal\">null</span> || buckets[hash] == AVAILABLE) {\r\n                buckets[hash] = wrappedInt;\r\n                size++;\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (hash + <span class=\"hljs-number\">1</span> &lt; hsize) {\r\n                hash++;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                hash = <span class=\"hljs-number\">0</span>;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * deletes a key from the hash map and adds an available placeholder\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> key the desired key to be deleted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">wrappedInt</span> <span class=\"hljs-operator\">=</span> key;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Table is empty&quot;</span>);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (buckets[hash] != <span class=\"hljs-literal\">null</span> &amp;&amp; buckets[hash].equals(wrappedInt)) {\r\n                buckets[hash] = AVAILABLE;\r\n                size--;\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (hash + <span class=\"hljs-number\">1</span> &lt; hsize) {\r\n                hash++;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                hash = <span class=\"hljs-number\">0</span>;\r\n            }\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;Key &quot;</span> + key + <span class=\"hljs-string\">&quot; not found&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Displays the hash table line by line\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayHashtable</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (buckets[i] == <span class=\"hljs-literal\">null</span> || buckets[i] == AVAILABLE) {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Bucket &quot;</span> + i + <span class=\"hljs-string\">&quot;: Empty&quot;</span>);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Bucket &quot;</span> + i + <span class=\"hljs-string\">&quot;: &quot;</span> + buckets[i].toString());\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Finds the index of location based on an inputed key\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> key the desired key to be found\r\n     * <span class=\"hljs-doctag\">@return</span> int the index where the key is located\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">wrappedInt</span> <span class=\"hljs-operator\">=</span> key;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Table is empty&quot;</span>);\r\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\r\n            <span class=\"hljs-keyword\">try</span> {\r\n                <span class=\"hljs-keyword\">if</span> (buckets[hash].equals(wrappedInt)) {\r\n                    buckets[hash] = AVAILABLE;\r\n                    <span class=\"hljs-keyword\">return</span> hash;\r\n                }\r\n            } <span class=\"hljs-keyword\">catch</span> (Exception E) {\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (hash + <span class=\"hljs-number\">1</span> &lt; hsize) {\r\n                hash++;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                hash = <span class=\"hljs-number\">0</span>;\r\n            }\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;Key &quot;</span> + key + <span class=\"hljs-string\">&quot; not found&quot;</span>);\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">lengthenTable</span><span class=\"hljs-params\">()</span> {\r\n        buckets = Arrays.copyOf(buckets, hsize * <span class=\"hljs-number\">2</span>);\r\n        hsize *= <span class=\"hljs-number\">2</span>;\r\n        System.out.println(<span class=\"hljs-string\">&quot;Table size is now: &quot;</span> + hsize);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Checks the load factor of the hash table if greater than .7,\r\n     * automatically lengthens table to prevent further collisions\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkLoadFactor</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">factor</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">double</span>) size / hsize;\r\n        <span class=\"hljs-keyword\">if</span> (factor &gt; <span class=\"hljs-number\">.7</span>) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Load factor is &quot;</span> + factor + <span class=\"hljs-string\">&quot;,  lengthening table&quot;</span>);\r\n            lengthenTable();\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Load factor is &quot;</span> + factor);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * isFull returns true if the hash map is full and false if not full\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> boolean is Empty\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFull</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (buckets[i] == <span class=\"hljs-literal\">null</span> || buckets[i] == AVAILABLE) {\r\n                response = <span class=\"hljs-literal\">false</span>;\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> response;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * isEmpty returns true if the hash map is empty and false if not empty\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> boolean is Empty\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (buckets[i] != <span class=\"hljs-literal\">null</span>) {\r\n                response = <span class=\"hljs-literal\">false</span>;\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> response;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ray S",
      "email": "68674276+rbshealy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ray",
      "email": "rbshealy@live.unc.edu",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}