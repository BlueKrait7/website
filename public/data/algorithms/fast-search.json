{
  "slug": "fast-search",
  "name": "Fast Search",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Search/FastSearcher.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Search\\FastSearcher.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> Utilities.Exceptions;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Search</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The idea: you could combine the advantages from both binary-search and interpolation search algorithm.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Time complexity:</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     worst case: Item couldn&#x27;t be found: O(log n),</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     average case: O(log log n),</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     best case: O(1).</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Note: This algorithm is recursive and the array has to be sorted beforehand.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FastSearcher</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds index of first item in array that satisfies specified term</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     throws ItemNotFoundException if the item couldn&#x27;t be found.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Span of sorted numbers which will be used to find the item.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>Term to check against.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Index of first item that satisfies term.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ItemNotFoundException&quot;&gt;</span> Gets thrown when the given item couldn&#x27;t be found in the array.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindIndex</span>(<span class=\"hljs-params\">Span&lt;<span class=\"hljs-built_in\">int</span>&gt; array, <span class=\"hljs-built_in\">int</span> item</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (array.Length == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ItemNotFoundException();\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (item &lt; array[<span class=\"hljs-number\">0</span>] || item &gt; array[^<span class=\"hljs-number\">1</span>])\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ItemNotFoundException();\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (array[<span class=\"hljs-number\">0</span>] == array[^<span class=\"hljs-number\">1</span>])\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> item == array[<span class=\"hljs-number\">0</span>] ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ItemNotFoundException();\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> (left, right) = ComputeIndices(array, item);\r\n            <span class=\"hljs-keyword\">var</span> (<span class=\"hljs-keyword\">from</span>, to) = SelectSegment(array, left, right, item);\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">from</span> + FindIndex(array.Slice(<span class=\"hljs-keyword\">from</span>, to - <span class=\"hljs-keyword\">from</span> + <span class=\"hljs-number\">1</span>), item);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> (<span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right) ComputeIndices(Span&lt;<span class=\"hljs-built_in\">int</span>&gt; array, <span class=\"hljs-built_in\">int</span> item)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> indexBinary = array.Length / <span class=\"hljs-number\">2</span>;\r\n\r\n            <span class=\"hljs-built_in\">int</span>[] section =\r\n            {\r\n                array.Length - <span class=\"hljs-number\">1</span>,\r\n                item - array[<span class=\"hljs-number\">0</span>],\r\n                array[^<span class=\"hljs-number\">1</span>] - array[<span class=\"hljs-number\">0</span>],\r\n            };\r\n            <span class=\"hljs-keyword\">var</span> indexInterpolation = section[<span class=\"hljs-number\">0</span>] * section[<span class=\"hljs-number\">1</span>] / section[<span class=\"hljs-number\">2</span>];\r\n\r\n            <span class=\"hljs-comment\">// Left is min and right is max of the indices</span>\r\n            <span class=\"hljs-keyword\">return</span> indexInterpolation &gt; indexBinary\r\n                ? (indexBinary, indexInterpolation)\r\n                : (indexInterpolation, indexBinary);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> (<span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-built_in\">int</span> to) SelectSegment(Span&lt;<span class=\"hljs-built_in\">int</span>&gt; array, <span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right, <span class=\"hljs-built_in\">int</span> item)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (item &lt; array[left])\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>, left - <span class=\"hljs-number\">1</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (item &lt; array[right])\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> (left, right - <span class=\"hljs-number\">1</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> (right, array.Length - <span class=\"hljs-number\">1</span>);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}