{
  "slug": "bilateral-filter",
  "name": "Bilateral Filter",
  "categories": [
    "digitalimageprocessing",
    "filters"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "digital_image_processing\\filters\\bilateral_filter.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/digital_image_processing\\filters\\bilateral_filter.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nImplementation of Bilateral filter\r\n\r\nInputs:\r\n    img: A 2d image with values in between 0 and 1\r\n    varS: variance in space dimension.\r\n    varI: variance in Intensity.\r\n    N: Kernel size(Must be an odd number)\r\nOutput:\r\n    img:A 2d zero padded image with values in between 0 and 1\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> math\r\n<span class=\"hljs-keyword\">import</span> sys\r\n\r\n<span class=\"hljs-keyword\">import</span> cv2\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vec_gaussian</span>(<span class=\"hljs-params\">img: np.ndarray, variance: <span class=\"hljs-built_in\">float</span></span>) -&gt; np.ndarray:\r\n    <span class=\"hljs-comment\"># For applying gaussian function for each element in matrix.</span>\r\n    sigma = math.sqrt(variance)\r\n    cons = <span class=\"hljs-number\">1</span> / (sigma * math.sqrt(<span class=\"hljs-number\">2</span> * math.pi))\r\n    <span class=\"hljs-keyword\">return</span> cons * np.exp(-((img / sigma) ** <span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">0.5</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_slice</span>(<span class=\"hljs-params\">img: np.ndarray, x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span>, kernel_size: <span class=\"hljs-built_in\">int</span></span>) -&gt; np.ndarray:\r\n    half = kernel_size // <span class=\"hljs-number\">2</span>\r\n    <span class=\"hljs-keyword\">return</span> img[x - half : x + half + <span class=\"hljs-number\">1</span>, y - half : y + half + <span class=\"hljs-number\">1</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_gauss_kernel</span>(<span class=\"hljs-params\">kernel_size: <span class=\"hljs-built_in\">int</span>, spatial_variance: <span class=\"hljs-built_in\">float</span></span>) -&gt; np.ndarray:\r\n    <span class=\"hljs-comment\"># Creates a gaussian kernel of given dimension.</span>\r\n    arr = np.zeros((kernel_size, kernel_size))\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, kernel_size):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, kernel_size):\r\n            arr[i, j] = math.sqrt(\r\n                <span class=\"hljs-built_in\">abs</span>(i - kernel_size // <span class=\"hljs-number\">2</span>) ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-built_in\">abs</span>(j - kernel_size // <span class=\"hljs-number\">2</span>) ** <span class=\"hljs-number\">2</span>\r\n            )\r\n    <span class=\"hljs-keyword\">return</span> vec_gaussian(arr, spatial_variance)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bilateral_filter</span>(<span class=\"hljs-params\">\r\n    img: np.ndarray,\r\n    spatial_variance: <span class=\"hljs-built_in\">float</span>,\r\n    intensity_variance: <span class=\"hljs-built_in\">float</span>,\r\n    kernel_size: <span class=\"hljs-built_in\">int</span>,\r\n</span>) -&gt; np.ndarray:\r\n    img2 = np.zeros(img.shape)\r\n    gaussKer = get_gauss_kernel(kernel_size, spatial_variance)\r\n    sizeX, sizeY = img.shape\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(kernel_size // <span class=\"hljs-number\">2</span>, sizeX - kernel_size // <span class=\"hljs-number\">2</span>):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(kernel_size // <span class=\"hljs-number\">2</span>, sizeY - kernel_size // <span class=\"hljs-number\">2</span>):\r\n\r\n            imgS = get_slice(img, i, j, kernel_size)\r\n            imgI = imgS - imgS[kernel_size // <span class=\"hljs-number\">2</span>, kernel_size // <span class=\"hljs-number\">2</span>]\r\n            imgIG = vec_gaussian(imgI, intensity_variance)\r\n            weights = np.multiply(gaussKer, imgIG)\r\n            vals = np.multiply(imgS, weights)\r\n            val = np.<span class=\"hljs-built_in\">sum</span>(vals) / np.<span class=\"hljs-built_in\">sum</span>(weights)\r\n            img2[i, j] = val\r\n    <span class=\"hljs-keyword\">return</span> img2\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parse_args</span>(<span class=\"hljs-params\">args: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>:\r\n    filename = args[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">if</span> args[<span class=\"hljs-number\">1</span>:] <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;../image_data/lena.jpg&quot;</span>\r\n    spatial_variance = <span class=\"hljs-built_in\">float</span>(args[<span class=\"hljs-number\">2</span>]) <span class=\"hljs-keyword\">if</span> args[<span class=\"hljs-number\">2</span>:] <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1.0</span>\r\n    intensity_variance = <span class=\"hljs-built_in\">float</span>(args[<span class=\"hljs-number\">3</span>]) <span class=\"hljs-keyword\">if</span> args[<span class=\"hljs-number\">3</span>:] <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1.0</span>\r\n    <span class=\"hljs-keyword\">if</span> args[<span class=\"hljs-number\">4</span>:]:\r\n        kernel_size = <span class=\"hljs-built_in\">int</span>(args[<span class=\"hljs-number\">4</span>])\r\n        kernel_size = kernel_size + <span class=\"hljs-built_in\">abs</span>(kernel_size % <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        kernel_size = <span class=\"hljs-number\">5</span>\r\n    <span class=\"hljs-keyword\">return</span> filename, spatial_variance, intensity_variance, kernel_size\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    filename, spatial_variance, intensity_variance, kernel_size = parse_args(sys.argv)\r\n    img = cv2.imread(filename, <span class=\"hljs-number\">0</span>)\r\n    cv2.imshow(<span class=\"hljs-string\">&quot;input image&quot;</span>, img)\r\n\r\n    out = img / <span class=\"hljs-number\">255</span>\r\n    out = out.astype(<span class=\"hljs-string\">&quot;float32&quot;</span>)\r\n    out = bilateral_filter(out, spatial_variance, intensity_variance, kernel_size)\r\n    out = out * <span class=\"hljs-number\">255</span>\r\n    out = np.uint8(out)\r\n    cv2.imshow(<span class=\"hljs-string\">&quot;output image&quot;</span>, out)\r\n    cv2.waitKey(<span class=\"hljs-number\">0</span>)\r\n    cv2.destroyAllWindows()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "praveennadiminti",
      "email": "praveennadiminti@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}