{
  "slug": "bridge-finding-with-tarjan-algorithm",
  "name": "Bridge Finding with Tarjan Algorithm",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "graph\\bridge_finding_with_tarjan_algorithm.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graph\\bridge_finding_with_tarjan_algorithm.cpp",
      "code": "<span class=\"hljs-comment\">/*\r\n *  Copyright : 2020 , MIT\r\n *  Author : Amit Kumar (offamitkumar)\r\n *  Last Modified Date: May 24, 2020\r\n *\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">//  for min &amp; max</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">//  for cout</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">//  for std::vector</span></span>\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; graph;\r\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; in_time, out_time;\r\n    <span class=\"hljs-type\">int</span> timer = <span class=\"hljs-number\">0</span>;\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; bridge;\r\n    std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; visited;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> current_node, <span class=\"hljs-type\">int</span> parent)</span> </span>{\r\n        visited.<span class=\"hljs-built_in\">at</span>(current_node) = <span class=\"hljs-literal\">true</span>;\r\n        in_time[current_node] = out_time[current_node] = timer++;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span>&amp; itr : graph[current_node]) {\r\n            <span class=\"hljs-keyword\">if</span> (itr == parent) {\r\n                <span class=\"hljs-keyword\">continue</span>;\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (!visited[itr]) {\r\n                <span class=\"hljs-built_in\">dfs</span>(itr, current_node);\r\n                <span class=\"hljs-keyword\">if</span> (out_time[itr] &gt; in_time[current_node]) {\r\n                    bridge.<span class=\"hljs-built_in\">push_back</span>({itr, current_node});\r\n                }\r\n            }\r\n            out_time[current_node] =\r\n                std::<span class=\"hljs-built_in\">min</span>(out_time[current_node], out_time[itr]);\r\n        }\r\n    }\r\n\r\n <span class=\"hljs-keyword\">public</span>:\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">search_bridges</span>(\r\n        <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt;&amp; connections) {\r\n        timer = <span class=\"hljs-number\">0</span>;\r\n        graph.<span class=\"hljs-built_in\">resize</span>(n);\r\n        in_time.<span class=\"hljs-built_in\">assign</span>(n, <span class=\"hljs-number\">0</span>);\r\n        visited.<span class=\"hljs-built_in\">assign</span>(n, <span class=\"hljs-literal\">false</span>);\r\n        out_time.<span class=\"hljs-built_in\">assign</span>(n, <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span>&amp; itr : connections) {\r\n            graph.<span class=\"hljs-built_in\">at</span>(itr[<span class=\"hljs-number\">0</span>]).<span class=\"hljs-built_in\">push_back</span>(itr[<span class=\"hljs-number\">1</span>]);\r\n            graph.<span class=\"hljs-built_in\">at</span>(itr[<span class=\"hljs-number\">1</span>]).<span class=\"hljs-built_in\">push_back</span>(itr[<span class=\"hljs-number\">0</span>]);\r\n        }\r\n        <span class=\"hljs-built_in\">dfs</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>);\r\n        <span class=\"hljs-keyword\">return</span> bridge;\r\n    }\r\n};\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    Solution s1;\r\n    <span class=\"hljs-type\">int</span> number_of_node = <span class=\"hljs-number\">5</span>;\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; node;\r\n    node.<span class=\"hljs-built_in\">push_back</span>({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>});\r\n    node.<span class=\"hljs-built_in\">push_back</span>({<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>});\r\n    node.<span class=\"hljs-built_in\">push_back</span>({<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>});\r\n    node.<span class=\"hljs-built_in\">push_back</span>({<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>});\r\n    <span class=\"hljs-comment\">/*\r\n     *     0 &lt;--&gt; 1 &lt;---&gt; 2\r\n     *            ^       ^\r\n     *            |       |\r\n     *            |       |\r\n     *            \\/     \\/\r\n     *            3       4\r\n     *\r\n     *    In this graph there are 4 bridges [0,2] , [2,4] , [3,5] , [1,2]\r\n     *\r\n     *    I assumed that the graph is bi-directional and connected.\r\n     *\r\n     */</span>\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; bridges =\r\n        s1.<span class=\"hljs-built_in\">search_bridges</span>(number_of_node, node);\r\n    std::cout &lt;&lt; bridges.<span class=\"hljs-built_in\">size</span>() &lt;&lt; <span class=\"hljs-string\">&quot; bridges found!\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span>&amp; itr : bridges) {\r\n        std::cout &lt;&lt; itr[<span class=\"hljs-number\">0</span>] &lt;&lt; <span class=\"hljs-string\">&quot; --&gt; &quot;</span> &lt;&lt; itr[<span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 1
    },
    {
      "name": "Amit Kumar",
      "email": "offamitkumar@gmail.com",
      "commits": 1
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}