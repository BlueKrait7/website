{
  "slug": "bfs-shortest-path",
  "name": "Bfs Shortest Path",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\bfs_shortest_path.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\bfs_shortest_path.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Breadth-first search shortest path implementations.\r\n    doctest:\r\n    python -m doctest -v bfs_shortest_path.py\r\n    Manual test:\r\n    python bfs_shortest_path.py\r\n&quot;&quot;&quot;</span>\r\ndemo_graph = {\r\n    <span class=\"hljs-string\">&quot;A&quot;</span>: [<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>, <span class=\"hljs-string\">&quot;E&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;B&quot;</span>: [<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>, <span class=\"hljs-string\">&quot;E&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;C&quot;</span>: [<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;F&quot;</span>, <span class=\"hljs-string\">&quot;G&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;D&quot;</span>: [<span class=\"hljs-string\">&quot;B&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;E&quot;</span>: [<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;F&quot;</span>: [<span class=\"hljs-string\">&quot;C&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;G&quot;</span>: [<span class=\"hljs-string\">&quot;C&quot;</span>],\r\n}\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bfs_shortest_path</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span>, start, goal</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Find shortest path between `start` and `goal` nodes.\r\n    Args:\r\n        graph (dict): node/list of neighboring nodes key/value pairs.\r\n        start: start node.\r\n        goal: target node.\r\n    Returns:\r\n        Shortest path between `start` and `goal` nodes as a string of nodes.\r\n        &#x27;Not found&#x27; string if no path found.\r\n    Example:\r\n        &gt;&gt;&gt; bfs_shortest_path(demo_graph, &quot;G&quot;, &quot;D&quot;)\r\n        [&#x27;G&#x27;, &#x27;C&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;D&#x27;]\r\n        &gt;&gt;&gt; bfs_shortest_path(demo_graph, &quot;G&quot;, &quot;G&quot;)\r\n        [&#x27;G&#x27;]\r\n        &gt;&gt;&gt; bfs_shortest_path(demo_graph, &quot;G&quot;, &quot;Unknown&quot;)\r\n        []\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># keep track of explored nodes</span>\r\n    explored = <span class=\"hljs-built_in\">set</span>()\r\n    <span class=\"hljs-comment\"># keep track of all the paths to be checked</span>\r\n    queue = [[start]]\r\n\r\n    <span class=\"hljs-comment\"># return path if start is goal</span>\r\n    <span class=\"hljs-keyword\">if</span> start == goal:\r\n        <span class=\"hljs-keyword\">return</span> [start]\r\n\r\n    <span class=\"hljs-comment\"># keeps looping until all possible paths have been checked</span>\r\n    <span class=\"hljs-keyword\">while</span> queue:\r\n        <span class=\"hljs-comment\"># pop the first path from the queue</span>\r\n        path = queue.pop(<span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-comment\"># get the last node from the path</span>\r\n        node = path[-<span class=\"hljs-number\">1</span>]\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> explored:\r\n            neighbours = graph[node]\r\n            <span class=\"hljs-comment\"># go through all neighbour nodes, construct a new path and</span>\r\n            <span class=\"hljs-comment\"># push it into the queue</span>\r\n            <span class=\"hljs-keyword\">for</span> neighbour <span class=\"hljs-keyword\">in</span> neighbours:\r\n                new_path = <span class=\"hljs-built_in\">list</span>(path)\r\n                new_path.append(neighbour)\r\n                queue.append(new_path)\r\n                <span class=\"hljs-comment\"># return path if neighbour is goal</span>\r\n                <span class=\"hljs-keyword\">if</span> neighbour == goal:\r\n                    <span class=\"hljs-keyword\">return</span> new_path\r\n\r\n            <span class=\"hljs-comment\"># mark node as explored</span>\r\n            explored.add(node)\r\n\r\n    <span class=\"hljs-comment\"># in case there&#x27;s no path between the 2 nodes</span>\r\n    <span class=\"hljs-keyword\">return</span> []\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bfs_shortest_path_distance</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span>, start, target</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Find shortest path distance between `start` and `target` nodes.\r\n    Args:\r\n        graph: node/list of neighboring nodes key/value pairs.\r\n        start: node to start search from.\r\n        target: node to search for.\r\n    Returns:\r\n        Number of edges in shortest path between `start` and `target` nodes.\r\n        -1 if no path exists.\r\n    Example:\r\n        &gt;&gt;&gt; bfs_shortest_path_distance(demo_graph, &quot;G&quot;, &quot;D&quot;)\r\n        4\r\n        &gt;&gt;&gt; bfs_shortest_path_distance(demo_graph, &quot;A&quot;, &quot;A&quot;)\r\n        0\r\n        &gt;&gt;&gt; bfs_shortest_path_distance(demo_graph, &quot;A&quot;, &quot;Unknown&quot;)\r\n        -1\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> graph <span class=\"hljs-keyword\">or</span> start <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> graph <span class=\"hljs-keyword\">or</span> target <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> graph:\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">if</span> start == target:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n    queue = [start]\r\n    visited = <span class=\"hljs-built_in\">set</span>(start)\r\n    <span class=\"hljs-comment\"># Keep tab on distances from `start` node.</span>\r\n    dist = {start: <span class=\"hljs-number\">0</span>, target: -<span class=\"hljs-number\">1</span>}\r\n    <span class=\"hljs-keyword\">while</span> queue:\r\n        node = queue.pop(<span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">if</span> node == target:\r\n            dist[target] = (\r\n                dist[node] <span class=\"hljs-keyword\">if</span> dist[target] == -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">min</span>(dist[target], dist[node])\r\n            )\r\n        <span class=\"hljs-keyword\">for</span> adjacent <span class=\"hljs-keyword\">in</span> graph[node]:\r\n            <span class=\"hljs-keyword\">if</span> adjacent <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> visited:\r\n                visited.add(adjacent)\r\n                queue.append(adjacent)\r\n                dist[adjacent] = dist[node] + <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> dist[target]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-built_in\">print</span>(bfs_shortest_path(demo_graph, <span class=\"hljs-string\">&quot;G&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>))  <span class=\"hljs-comment\"># returns [&#x27;G&#x27;, &#x27;C&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;D&#x27;]</span>\r\n    <span class=\"hljs-built_in\">print</span>(bfs_shortest_path_distance(demo_graph, <span class=\"hljs-string\">&quot;G&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>))  <span class=\"hljs-comment\"># returns 4</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "Kyle",
      "email": "40903431+kylepw@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sarvesh Dubey",
      "email": "38752758+dubesar@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}