{
  "slug": "depth-first-search-2",
  "name": "Depth First Search 2",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\depth_first_search_2.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\depth_first_search_2.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/python</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot; Author: OMKAR PATHAK &quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\r\n        self.vertex = {}\r\n\r\n    <span class=\"hljs-comment\"># for printing the Graph vertices</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_graph</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">print</span>(self.vertex)\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.vertex:\r\n            <span class=\"hljs-built_in\">print</span>(i, <span class=\"hljs-string\">&quot; -&gt; &quot;</span>, <span class=\"hljs-string\">&quot; -&gt; &quot;</span>.join([<span class=\"hljs-built_in\">str</span>(j) <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> self.vertex[i]]))\r\n\r\n    <span class=\"hljs-comment\"># for adding the edge between two vertices</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_edge</span>(<span class=\"hljs-params\">self, from_vertex: <span class=\"hljs-built_in\">int</span>, to_vertex: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># check if vertex is already present,</span>\r\n        <span class=\"hljs-keyword\">if</span> from_vertex <span class=\"hljs-keyword\">in</span> self.vertex:\r\n            self.vertex[from_vertex].append(to_vertex)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-comment\"># else make a new vertex</span>\r\n            self.vertex[from_vertex] = [to_vertex]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># visited array for storing already visited nodes</span>\r\n        visited = [<span class=\"hljs-literal\">False</span>] * <span class=\"hljs-built_in\">len</span>(self.vertex)\r\n\r\n        <span class=\"hljs-comment\"># call the recursive helper function</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(self.vertex)):\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\r\n                self.dfs_recursive(i, visited)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs_recursive</span>(<span class=\"hljs-params\">self, start_vertex: <span class=\"hljs-built_in\">int</span>, visited: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># mark start vertex as visited</span>\r\n        visited[start_vertex] = <span class=\"hljs-literal\">True</span>\r\n\r\n        <span class=\"hljs-built_in\">print</span>(start_vertex, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n\r\n        <span class=\"hljs-comment\"># Recur for all the vertices that are adjacent to this node</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.vertex:\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\r\n                self.dfs_recursive(i, visited)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    g = Graph()\r\n    g.add_edge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\r\n    g.add_edge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\r\n    g.add_edge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\r\n    g.add_edge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)\r\n    g.add_edge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\r\n    g.add_edge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\r\n\r\n    g.print_graph()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;DFS:&quot;</span>)\r\n    g.dfs()\r\n\r\n    <span class=\"hljs-comment\"># OUTPUT:</span>\r\n    <span class=\"hljs-comment\"># 0  -&gt;  1 -&gt; 2</span>\r\n    <span class=\"hljs-comment\"># 1  -&gt;  2</span>\r\n    <span class=\"hljs-comment\"># 2  -&gt;  0 -&gt; 3</span>\r\n    <span class=\"hljs-comment\"># 3  -&gt;  3</span>\r\n    <span class=\"hljs-comment\"># DFS:</span>\r\n    <span class=\"hljs-comment\">#  0 1 2 3</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Lewis Tian",
      "email": "taseikyo@gmail.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}