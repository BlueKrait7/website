{
  "slug": "maximum-minimum-window",
  "name": "Maximum Minimum Window",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\stacks\\MaximumMinimumWindow.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\stacks\\MaximumMinimumWindow.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.stacks;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\r\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Given an integer array. The task is to find the maximum of the minimum of\r\n * every window size in the array. Note: Window size varies from 1 to the size\r\n * of the Array.\r\n * &lt;p&gt;\r\n * For example,\r\n * &lt;p&gt;\r\n * N = 7\r\n * arr[] = {10,20,30,50,10,70,30}\r\n * &lt;p&gt;\r\n * So the answer for the above would be : 70 30 20 10 10 10 10\r\n * &lt;p&gt;\r\n * We need to consider window sizes from 1 to length of array in each iteration.\r\n * So in the iteration 1 the windows would be [10], [20], [30], [50], [10],\r\n * [70], [30]. Now we need to check the minimum value in each window. Since the\r\n * window size is 1 here the minimum element would be the number itself. Now the\r\n * maximum out of these is the result in iteration 1. In the second iteration we\r\n * need to consider window size 2, so there would be [10,20], [20,30], [30,50],\r\n * [50,10], [10,70], [70,30]. Now the minimum of each window size would be\r\n * [10,20,30,10,10] and the maximum out of these is 30. Similarly we solve for\r\n * other window sizes.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> sahil\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MaximumMinimumWindow</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This function contains the logic of finding maximum of minimum for every\r\n     * window size using Stack Data Structure.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arr Array containing the numbers\r\n     * <span class=\"hljs-doctag\">@param</span> n Length of the array\r\n     * <span class=\"hljs-doctag\">@return</span> result array\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] calculateMaxOfMin(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> n) {\r\n        Stack&lt;Integer&gt; s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;&gt;();\r\n        <span class=\"hljs-type\">int</span> left[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-type\">int</span> right[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n            left[i] = -<span class=\"hljs-number\">1</span>;\r\n            right[i] = n;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n            <span class=\"hljs-keyword\">while</span> (!s.empty() &amp;&amp; arr[s.peek()] &gt;= arr[i]) {\r\n                s.pop();\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (!s.empty()) {\r\n                left[i] = s.peek();\r\n            }\r\n\r\n            s.push(i);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">while</span> (!s.empty()) {\r\n            s.pop();\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> n - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n            <span class=\"hljs-keyword\">while</span> (!s.empty() &amp;&amp; arr[s.peek()] &gt;= arr[i]) {\r\n                s.pop();\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (!s.empty()) {\r\n                right[i] = s.peek();\r\n            }\r\n\r\n            s.push(i);\r\n        }\r\n\r\n        <span class=\"hljs-type\">int</span> ans[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= n; i++) {\r\n            ans[i] = <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> right[i] - left[i] - <span class=\"hljs-number\">1</span>;\r\n\r\n            ans[len] = Math.max(ans[len], arr[i]);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> n - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">1</span>; i--) {\r\n            ans[i] = Math.max(ans[i], ans[i + <span class=\"hljs-number\">1</span>]);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Print the result</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= n; i++) {\r\n            System.out.print(ans[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> ans;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\r\n        <span class=\"hljs-type\">int</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]{<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">30</span>};\r\n        <span class=\"hljs-type\">int</span>[] target = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]{<span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>};\r\n        <span class=\"hljs-type\">int</span>[] res = calculateMaxOfMin(arr, arr.length);\r\n        <span class=\"hljs-keyword\">assert</span> Arrays.equals(target, res);\r\n    }\r\n\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "sahil-13399",
      "email": "46062089+sahil-13399@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}