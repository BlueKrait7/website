{
  "slug": "connected-components",
  "name": "Connected Components",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\connected_components.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\connected_components.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nhttps://en.wikipedia.org/wiki/Component_(graph_theory)\r\n\r\nFinding connected components in graph\r\n\r\n&quot;&quot;&quot;</span>\r\n\r\ntest_graph_1 = {<span class=\"hljs-number\">0</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">4</span>: [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>], <span class=\"hljs-number\">5</span>: [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>], <span class=\"hljs-number\">6</span>: [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]}\r\n\r\ntest_graph_2 = {<span class=\"hljs-number\">0</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">4</span>: [], <span class=\"hljs-number\">5</span>: []}\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span>, vert: <span class=\"hljs-built_in\">int</span>, visited: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Use depth first search to find all vertices\r\n    being in the same component as initial vertex\r\n    &gt;&gt;&gt; dfs(test_graph_1, 0, 5 * [False])\r\n    [0, 1, 3, 2]\r\n    &gt;&gt;&gt; dfs(test_graph_2, 0, 6 * [False])\r\n    [0, 1, 3, 2]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    visited[vert] = <span class=\"hljs-literal\">True</span>\r\n    connected_verts = []\r\n\r\n    <span class=\"hljs-keyword\">for</span> neighbour <span class=\"hljs-keyword\">in</span> graph[vert]:\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[neighbour]:\r\n            connected_verts += dfs(graph, neighbour, visited)\r\n\r\n    <span class=\"hljs-keyword\">return</span> [vert] + connected_verts\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">connected_components</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    This function takes graph as a parameter\r\n    and then returns the list of connected components\r\n    &gt;&gt;&gt; connected_components(test_graph_1)\r\n    [[0, 1, 3, 2], [4, 5, 6]]\r\n    &gt;&gt;&gt; connected_components(test_graph_2)\r\n    [[0, 1, 3, 2], [4], [5]]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    graph_size = <span class=\"hljs-built_in\">len</span>(graph)\r\n    visited = graph_size * [<span class=\"hljs-literal\">False</span>]\r\n    components_list = []\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(graph_size):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\r\n            i_connected = dfs(graph, i, visited)\r\n            components_list.append(i_connected)\r\n\r\n    <span class=\"hljs-keyword\">return</span> components_list\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Graphs\\ConnectedComponents.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs\\ConnectedComponents.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraphUnweightedUndirectedAdjacencyList</span> {\r\n  <span class=\"hljs-comment\">// Unweighted Undirected Graph class</span>\r\n  <span class=\"hljs-title function_\">constructor</span> () {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span> = {}\r\n  }\r\n\r\n  addNode (node) {\r\n    <span class=\"hljs-comment\">// Function to add a node to the graph (connection represented by set)</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\r\n  }\r\n\r\n  addEdge (node1, node2) {\r\n    <span class=\"hljs-comment\">// Function to add an edge (adds the node too if they are not present in the graph)</span>\r\n    <span class=\"hljs-keyword\">if</span> (!(node1 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node1) }\r\n    <span class=\"hljs-keyword\">if</span> (!(node2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node2) }\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node1].<span class=\"hljs-title function_\">add</span>(node2)\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node2].<span class=\"hljs-title function_\">add</span>(node1)\r\n  }\r\n\r\n  <span class=\"hljs-title class_\">DFSComponent</span> (components, node, visited) {\r\n    <span class=\"hljs-comment\">// Helper function to populate the visited set with the nodes in each component</span>\r\n\r\n    <span class=\"hljs-comment\">// adding the first visited node in the component to the array</span>\r\n    components.<span class=\"hljs-title function_\">push</span>(node)\r\n    <span class=\"hljs-keyword\">const</span> stack = [node]\r\n    <span class=\"hljs-comment\">// populating the visited set using DFS (Iterative)</span>\r\n    <span class=\"hljs-keyword\">while</span> (stack.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\r\n      <span class=\"hljs-keyword\">const</span> curr = stack.<span class=\"hljs-title function_\">pop</span>()\r\n      visited.<span class=\"hljs-title function_\">add</span>(curr.<span class=\"hljs-title function_\">toString</span>())\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> neighbour <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[curr].<span class=\"hljs-title function_\">keys</span>()) {\r\n        <span class=\"hljs-keyword\">if</span> (!visited.<span class=\"hljs-title function_\">has</span>(neighbour.<span class=\"hljs-title function_\">toString</span>())) { stack.<span class=\"hljs-title function_\">push</span>(neighbour) }\r\n      }\r\n    }\r\n  }\r\n\r\n  connectedComponents () {\r\n    <span class=\"hljs-comment\">// Function to generate the Connected Components</span>\r\n    <span class=\"hljs-comment\">// Result is an array containing 1 node from each component</span>\r\n    <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\r\n    <span class=\"hljs-keyword\">const</span> components = []\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> node <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) {\r\n      <span class=\"hljs-keyword\">if</span> (!visited.<span class=\"hljs-title function_\">has</span>(node.<span class=\"hljs-title function_\">toString</span>())) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title class_\">DFSComponent</span>(components, node, visited) }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> components\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">GraphUnweightedUndirectedAdjacencyList</span> }\r\n\r\n<span class=\"hljs-comment\">// Example</span>\r\n\r\n<span class=\"hljs-comment\">// const graph = new GraphUnweightedUndirectedAdjacencyList()</span>\r\n<span class=\"hljs-comment\">// graph.addEdge(1, 2) // Component 1</span>\r\n<span class=\"hljs-comment\">// graph.addEdge(3, 4) // Component 2</span>\r\n<span class=\"hljs-comment\">// graph.addEdge(3, 5) // Component 2</span>\r\n<span class=\"hljs-comment\">// const components = graph.connectedComponents()</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "graph\\connected_components.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graph\\connected_components.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n *\r\n * \\file\r\n * \\brief [Graph Connected Components\r\n * (Connected Components)]\r\n * (https://en.wikipedia.org/wiki/Component_(graph_theory))\r\n *\r\n * \\author [Ayaan Khan](http://github.com/ayaankhan98)\r\n *\r\n * \\details\r\n * A graph is a collection of nodes also called vertices and these vertices\r\n * are connected by edges. A connected component in a graph refers to a set of\r\n * vertices which are reachable form one another.\r\n *\r\n * &lt;pre&gt;\r\n * Example - Here is graph with 3 connected components\r\n *\r\n *      1   4           5               8\r\n *     / \\ /           / \\             / \\\r\n *    2---3           6   7           9   10\r\n *\r\n *    first          second           third\r\n *    component      component        component\r\n * &lt;/pre&gt;\r\n *\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace graph\r\n * @brief Graph Algorithms\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">namespace</span> graph {\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function that add edge between two nodes or vertices of graph\r\n *\r\n * @param adj adjacency list of graph.\r\n * @param u any node or vertex of graph.\r\n * @param v any node or vertex of graph.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; *adj, <span class=\"hljs-type\">int</span> u, <span class=\"hljs-type\">int</span> v)</span> </span>{\r\n    (*adj)[u - <span class=\"hljs-number\">1</span>].<span class=\"hljs-built_in\">push_back</span>(v - <span class=\"hljs-number\">1</span>);\r\n    (*adj)[v - <span class=\"hljs-number\">1</span>].<span class=\"hljs-built_in\">push_back</span>(u - <span class=\"hljs-number\">1</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Utility function for depth first seach algorithm\r\n * this function explores the vertex which is passed into.\r\n *\r\n * @param adj adjacency list of graph.\r\n * @param u vertex or node to be explored.\r\n * @param visited already visited vertices.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">explore</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; *adj, <span class=\"hljs-type\">int</span> u,\r\n             std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; *visited)</span> </span>{\r\n    (*visited)[u] = <span class=\"hljs-literal\">true</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> v : (*adj)[u]) {\r\n        <span class=\"hljs-keyword\">if</span> (!(*visited)[v]) {\r\n            <span class=\"hljs-built_in\">explore</span>(adj, v, visited);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function that perfoms depth first search algorithm on graph\r\n * and calculated the number of connected components.\r\n *\r\n * @param adj adjacency list of graph.\r\n *\r\n * @return connected_components number of connected components in graph.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getConnectedComponents</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; *adj)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> n = adj-&gt;<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-type\">int</span> connected_components = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">visited</span><span class=\"hljs-params\">(n, <span class=\"hljs-literal\">false</span>)</span></span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (!visited[i]) {\r\n            <span class=\"hljs-built_in\">explore</span>(adj, i, &amp;visited);\r\n            connected_components++;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> connected_components;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace graph</span>\r\n\r\n<span class=\"hljs-comment\">/** Function to test the algorithm */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Running predefined tests...&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Initiating Test 1...&quot;</span> &lt;&lt; std::endl;\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">adj1</span>(<span class=\"hljs-number\">9</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;());\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj1, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj1, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj1, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj1, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj1, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj1, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>);\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(graph::<span class=\"hljs-built_in\">getConnectedComponents</span>(&amp;adj1) == <span class=\"hljs-number\">3</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 Passed...&quot;</span> &lt;&lt; std::endl;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Innitiating Test 2...&quot;</span> &lt;&lt; std::endl;\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">adj2</span>(<span class=\"hljs-number\">10</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;());\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>);\r\n    graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj2, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>);\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(graph::<span class=\"hljs-built_in\">getConnectedComponents</span>(&amp;adj2) == <span class=\"hljs-number\">2</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2 Passed...&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">/// running predefined tests</span>\r\n    <span class=\"hljs-built_in\">tests</span>();\r\n\r\n    <span class=\"hljs-type\">int</span> vertices = <span class=\"hljs-built_in\">int</span>(), edges = <span class=\"hljs-built_in\">int</span>();\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number of vertices : &quot;</span>;\r\n    std::cin &gt;&gt; vertices;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number of edges : &quot;</span>;\r\n    std::cin &gt;&gt; edges;\r\n\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; <span class=\"hljs-built_in\">adj</span>(vertices, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;());\r\n\r\n    <span class=\"hljs-type\">int</span> u = <span class=\"hljs-built_in\">int</span>(), v = <span class=\"hljs-built_in\">int</span>();\r\n    <span class=\"hljs-keyword\">while</span> (edges--) {\r\n        std::cin &gt;&gt; u &gt;&gt; v;\r\n        graph::<span class=\"hljs-built_in\">addEdge</span>(&amp;adj, u, v);\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> cc = graph::<span class=\"hljs-built_in\">getConnectedComponents</span>(&amp;adj);\r\n    std::cout &lt;&lt; cc &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 1
    },
    {
      "name": "Nika Losaberidze",
      "email": "nlosa16@freeuni.edu.ge",
      "commits": 1
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 11
    }
  ],
  "explanationUrl": {}
}