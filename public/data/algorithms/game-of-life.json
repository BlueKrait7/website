{
  "slug": "game-of-life",
  "name": "Game of Life",
  "categories": [
    "cellularautomata"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "cellular_automata\\game_of_life.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/cellular_automata\\game_of_life.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Conway&#x27;s Game Of Life, Author Anurag Kumar(mailto:anuragkumarak95@gmail.com)\r\n\r\nRequirements:\r\n  - numpy\r\n  - random\r\n  - time\r\n  - matplotlib\r\n\r\nPython:\r\n  - 3.5\r\n\r\nUsage:\r\n  - $python3 game_o_life &lt;canvas_size:int&gt;\r\n\r\nGame-Of-Life Rules:\r\n\r\n 1.\r\n Any live cell with fewer than two live neighbours\r\n dies, as if caused by under-population.\r\n 2.\r\n Any live cell with two or three live neighbours lives\r\n on to the next generation.\r\n 3.\r\n Any live cell with more than three live neighbours\r\n dies, as if by over-population.\r\n 4.\r\n Any dead cell with exactly three live neighbours be-\r\n comes a live cell, as if by reproduction.\r\n &quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> random\r\n<span class=\"hljs-keyword\">import</span> sys\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt\r\n<span class=\"hljs-keyword\">from</span> matplotlib.colors <span class=\"hljs-keyword\">import</span> ListedColormap\r\n\r\nusage_doc = <span class=\"hljs-string\">&quot;Usage of script: script_nama &lt;size_of_canvas:int&gt;&quot;</span>\r\n\r\nchoice = [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">100</span> + [<span class=\"hljs-number\">1</span>] * <span class=\"hljs-number\">10</span>\r\nrandom.shuffle(choice)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_canvas</span>(<span class=\"hljs-params\">size: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">bool</span>]]:\r\n    canvas = [[<span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)]\r\n    <span class=\"hljs-keyword\">return</span> canvas\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-params\">canvas: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">bool</span>]]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-keyword\">for</span> i, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(canvas):\r\n        <span class=\"hljs-keyword\">for</span> j, _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(row):\r\n            canvas[i][j] = <span class=\"hljs-built_in\">bool</span>(random.getrandbits(<span class=\"hljs-number\">1</span>))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">canvas: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">bool</span>]]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">bool</span>]]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;This  function runs the rules of game through all points, and changes their\r\n    status accordingly.(in the same canvas)\r\n    @Args:\r\n    --\r\n    canvas : canvas of population to run the rules on.\r\n\r\n    @returns:\r\n    --\r\n    None\r\n    &quot;&quot;&quot;</span>\r\n    current_canvas = np.array(canvas)\r\n    next_gen_canvas = np.array(create_canvas(current_canvas.shape[<span class=\"hljs-number\">0</span>]))\r\n    <span class=\"hljs-keyword\">for</span> r, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(current_canvas):\r\n        <span class=\"hljs-keyword\">for</span> c, pt <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(row):\r\n            <span class=\"hljs-comment\"># print(r-1,r+2,c-1,c+2)</span>\r\n            next_gen_canvas[r][c] = __judge_point(\r\n                pt, current_canvas[r - <span class=\"hljs-number\">1</span> : r + <span class=\"hljs-number\">2</span>, c - <span class=\"hljs-number\">1</span> : c + <span class=\"hljs-number\">2</span>]\r\n            )\r\n\r\n    current_canvas = next_gen_canvas\r\n    <span class=\"hljs-keyword\">del</span> next_gen_canvas  <span class=\"hljs-comment\"># cleaning memory as we move on.</span>\r\n    return_canvas: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">bool</span>]] = current_canvas.tolist()\r\n    <span class=\"hljs-keyword\">return</span> return_canvas\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__judge_point</span>(<span class=\"hljs-params\">pt: <span class=\"hljs-built_in\">bool</span>, neighbours: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">bool</span>]]</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    dead = <span class=\"hljs-number\">0</span>\r\n    alive = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-comment\"># finding dead or alive neighbours count.</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> neighbours:\r\n        <span class=\"hljs-keyword\">for</span> status <span class=\"hljs-keyword\">in</span> i:\r\n            <span class=\"hljs-keyword\">if</span> status:\r\n                alive += <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                dead += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># handling duplicate entry for focus pt.</span>\r\n    <span class=\"hljs-keyword\">if</span> pt:\r\n        alive -= <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        dead -= <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># running the rules of game here.</span>\r\n    state = pt\r\n    <span class=\"hljs-keyword\">if</span> pt:\r\n        <span class=\"hljs-keyword\">if</span> alive &lt; <span class=\"hljs-number\">2</span>:\r\n            state = <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-keyword\">elif</span> alive == <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">or</span> alive == <span class=\"hljs-number\">3</span>:\r\n            state = <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">elif</span> alive &gt; <span class=\"hljs-number\">3</span>:\r\n            state = <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">if</span> alive == <span class=\"hljs-number\">3</span>:\r\n            state = <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> state\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(sys.argv) != <span class=\"hljs-number\">2</span>:\r\n        <span class=\"hljs-keyword\">raise</span> Exception(usage_doc)\r\n\r\n    canvas_size = <span class=\"hljs-built_in\">int</span>(sys.argv[<span class=\"hljs-number\">1</span>])\r\n    <span class=\"hljs-comment\"># main working structure of this module.</span>\r\n    c = create_canvas(canvas_size)\r\n    seed(c)\r\n    fig, ax = plt.subplots()\r\n    fig.show()\r\n    cmap = ListedColormap([<span class=\"hljs-string\">&quot;w&quot;</span>, <span class=\"hljs-string\">&quot;k&quot;</span>])\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            c = run(c)\r\n            ax.matshow(c, cmap=cmap)\r\n            fig.canvas.draw()\r\n            ax.cla()\r\n    <span class=\"hljs-keyword\">except</span> KeyboardInterrupt:\r\n        <span class=\"hljs-comment\"># do nothing.</span>\r\n        <span class=\"hljs-keyword\">pass</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Erwin Junge",
      "email": "erwin@junge.nl",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}