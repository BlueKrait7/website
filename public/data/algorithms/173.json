{
  "slug": "173",
  "name": "173",
  "categories": [
    "leetcode"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "leetcode\\src\\173.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/leetcode\\src\\173.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits.h&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> *values;\r\n    <span class=\"hljs-type\">int</span> CurrentIndex;\r\n    <span class=\"hljs-type\">int</span> NumberOfNodes;\r\n} BSTIterator;\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">TraverseAndAssign</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> TreeNode *root, BSTIterator *obj)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (!root)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    <span class=\"hljs-keyword\">if</span> (root-&gt;left)\r\n        TraverseAndAssign(root-&gt;left, obj);\r\n    obj-&gt;values[obj-&gt;CurrentIndex] = root-&gt;val;\r\n    obj-&gt;CurrentIndex++;\r\n    <span class=\"hljs-keyword\">if</span> (root-&gt;right)\r\n        TraverseAndAssign(root-&gt;right, obj);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">TotalNodes</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> TreeNode *root)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (!root)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> nodes_left = TotalNodes(root-&gt;left);\r\n    <span class=\"hljs-type\">int</span> nodes_right = TotalNodes(root-&gt;right);\r\n    <span class=\"hljs-keyword\">return</span> nodes_left + nodes_right + <span class=\"hljs-number\">1</span>;\r\n}\r\n\r\nBSTIterator *<span class=\"hljs-title function_\">bSTIteratorCreate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> TreeNode *root)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> n = TotalNodes(root);\r\n    <span class=\"hljs-type\">int</span> size = n + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, size);\r\n    BSTIterator *obj = (BSTIterator *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BSTIterator));\r\n    obj-&gt;values = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    obj-&gt;CurrentIndex = <span class=\"hljs-number\">0</span>;\r\n    obj-&gt;NumberOfNodes = n;\r\n    obj-&gt;values[size - <span class=\"hljs-number\">1</span>] = INT_MAX;\r\n    TraverseAndAssign(root, obj);\r\n    obj-&gt;CurrentIndex = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">return</span> obj;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** @return the next smallest number */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bSTIteratorNext</span><span class=\"hljs-params\">(BSTIterator *obj)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> NextValue = obj-&gt;values[obj-&gt;CurrentIndex];\r\n    obj-&gt;CurrentIndex++;\r\n    <span class=\"hljs-keyword\">return</span> NextValue;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** @return whether we have a next smallest number */</span>\r\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">bSTIteratorHasNext</span><span class=\"hljs-params\">(BSTIterator *obj)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (!obj-&gt;NumberOfNodes)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; Here &quot;</span>);\r\n    <span class=\"hljs-keyword\">return</span> (obj-&gt;values[obj-&gt;CurrentIndex] == INT_MAX) ? <span class=\"hljs-literal\">false</span> : <span class=\"hljs-literal\">true</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">bSTIteratorFree</span><span class=\"hljs-params\">(BSTIterator *obj)</span>\r\n{\r\n    <span class=\"hljs-built_in\">free</span>(obj-&gt;values);\r\n    <span class=\"hljs-built_in\">free</span>(obj);\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "SaurusXI",
      "email": "vermashantanu@hotmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}