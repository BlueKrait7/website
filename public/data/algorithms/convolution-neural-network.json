{
  "slug": "convolution-neural-network",
  "name": "Convolution Neural Network",
  "categories": [
    "neuralnetwork"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "neural_network\\convolution_neural_network.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/neural_network\\convolution_neural_network.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n     - - - - - -- - - - - - - - - - - - - - - - - - - - - - -\r\n    Name - - CNN - Convolution Neural Network For Photo Recognizing\r\n    Goal - - Recognize Handing Writing Word Photo\r\n    Detail：Total 5 layers neural network\r\n            * Convolution layer\r\n            * Pooling layer\r\n            * Input layer layer of BP\r\n            * Hidden layer of BP\r\n            * Output layer of BP\r\n    Author: Stephen Lee\r\n    Github: 245885195@qq.com\r\n    Date: 2017.9.20\r\n    - - - - - -- - - - - - - - - - - - - - - - - - - - - - -\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> pickle\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CNN</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">\r\n        self, conv1_get, size_p1, bp_num1, bp_num2, bp_num3, rate_w=<span class=\"hljs-number\">0.2</span>, rate_t=<span class=\"hljs-number\">0.2</span>\r\n    </span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        :param conv1_get: [a,c,d]，size, number, step of convolution kernel\r\n        :param size_p1: pooling size\r\n        :param bp_num1: units number of flatten layer\r\n        :param bp_num2: units number of hidden layer\r\n        :param bp_num3: units number of output layer\r\n        :param rate_w: rate of weight learning\r\n        :param rate_t: rate of threshold learning\r\n        &quot;&quot;&quot;</span>\r\n        self.num_bp1 = bp_num1\r\n        self.num_bp2 = bp_num2\r\n        self.num_bp3 = bp_num3\r\n        self.conv1 = conv1_get[:<span class=\"hljs-number\">2</span>]\r\n        self.step_conv1 = conv1_get[<span class=\"hljs-number\">2</span>]\r\n        self.size_pooling1 = size_p1\r\n        self.rate_weight = rate_w\r\n        self.rate_thre = rate_t\r\n        self.w_conv1 = [\r\n            np.mat(-<span class=\"hljs-number\">1</span> * np.random.rand(self.conv1[<span class=\"hljs-number\">0</span>], self.conv1[<span class=\"hljs-number\">0</span>]) + <span class=\"hljs-number\">0.5</span>)\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.conv1[<span class=\"hljs-number\">1</span>])\r\n        ]\r\n        self.wkj = np.mat(-<span class=\"hljs-number\">1</span> * np.random.rand(self.num_bp3, self.num_bp2) + <span class=\"hljs-number\">0.5</span>)\r\n        self.vji = np.mat(-<span class=\"hljs-number\">1</span> * np.random.rand(self.num_bp2, self.num_bp1) + <span class=\"hljs-number\">0.5</span>)\r\n        self.thre_conv1 = -<span class=\"hljs-number\">2</span> * np.random.rand(self.conv1[<span class=\"hljs-number\">1</span>]) + <span class=\"hljs-number\">1</span>\r\n        self.thre_bp2 = -<span class=\"hljs-number\">2</span> * np.random.rand(self.num_bp2) + <span class=\"hljs-number\">1</span>\r\n        self.thre_bp3 = -<span class=\"hljs-number\">2</span> * np.random.rand(self.num_bp3) + <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">save_model</span>(<span class=\"hljs-params\">self, save_path</span>):\r\n        <span class=\"hljs-comment\"># save model dict with pickle</span>\r\n        model_dic = {\r\n            <span class=\"hljs-string\">&quot;num_bp1&quot;</span>: self.num_bp1,\r\n            <span class=\"hljs-string\">&quot;num_bp2&quot;</span>: self.num_bp2,\r\n            <span class=\"hljs-string\">&quot;num_bp3&quot;</span>: self.num_bp3,\r\n            <span class=\"hljs-string\">&quot;conv1&quot;</span>: self.conv1,\r\n            <span class=\"hljs-string\">&quot;step_conv1&quot;</span>: self.step_conv1,\r\n            <span class=\"hljs-string\">&quot;size_pooling1&quot;</span>: self.size_pooling1,\r\n            <span class=\"hljs-string\">&quot;rate_weight&quot;</span>: self.rate_weight,\r\n            <span class=\"hljs-string\">&quot;rate_thre&quot;</span>: self.rate_thre,\r\n            <span class=\"hljs-string\">&quot;w_conv1&quot;</span>: self.w_conv1,\r\n            <span class=\"hljs-string\">&quot;wkj&quot;</span>: self.wkj,\r\n            <span class=\"hljs-string\">&quot;vji&quot;</span>: self.vji,\r\n            <span class=\"hljs-string\">&quot;thre_conv1&quot;</span>: self.thre_conv1,\r\n            <span class=\"hljs-string\">&quot;thre_bp2&quot;</span>: self.thre_bp2,\r\n            <span class=\"hljs-string\">&quot;thre_bp3&quot;</span>: self.thre_bp3,\r\n        }\r\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(save_path, <span class=\"hljs-string\">&quot;wb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:\r\n            pickle.dump(model_dic, f)\r\n\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Model saved： %s&quot;</span> % save_path)\r\n\r\n<span class=\"hljs-meta\">    @classmethod</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ReadModel</span>(<span class=\"hljs-params\">cls, model_path</span>):\r\n        <span class=\"hljs-comment\"># read saved model</span>\r\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(model_path, <span class=\"hljs-string\">&quot;rb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:\r\n            model_dic = pickle.load(f)\r\n\r\n        conv_get = model_dic.get(<span class=\"hljs-string\">&quot;conv1&quot;</span>)\r\n        conv_get.append(model_dic.get(<span class=\"hljs-string\">&quot;step_conv1&quot;</span>))\r\n        size_p1 = model_dic.get(<span class=\"hljs-string\">&quot;size_pooling1&quot;</span>)\r\n        bp1 = model_dic.get(<span class=\"hljs-string\">&quot;num_bp1&quot;</span>)\r\n        bp2 = model_dic.get(<span class=\"hljs-string\">&quot;num_bp2&quot;</span>)\r\n        bp3 = model_dic.get(<span class=\"hljs-string\">&quot;num_bp3&quot;</span>)\r\n        r_w = model_dic.get(<span class=\"hljs-string\">&quot;rate_weight&quot;</span>)\r\n        r_t = model_dic.get(<span class=\"hljs-string\">&quot;rate_thre&quot;</span>)\r\n        <span class=\"hljs-comment\"># create model instance</span>\r\n        conv_ins = CNN(conv_get, size_p1, bp1, bp2, bp3, r_w, r_t)\r\n        <span class=\"hljs-comment\"># modify model parameter</span>\r\n        conv_ins.w_conv1 = model_dic.get(<span class=\"hljs-string\">&quot;w_conv1&quot;</span>)\r\n        conv_ins.wkj = model_dic.get(<span class=\"hljs-string\">&quot;wkj&quot;</span>)\r\n        conv_ins.vji = model_dic.get(<span class=\"hljs-string\">&quot;vji&quot;</span>)\r\n        conv_ins.thre_conv1 = model_dic.get(<span class=\"hljs-string\">&quot;thre_conv1&quot;</span>)\r\n        conv_ins.thre_bp2 = model_dic.get(<span class=\"hljs-string\">&quot;thre_bp2&quot;</span>)\r\n        conv_ins.thre_bp3 = model_dic.get(<span class=\"hljs-string\">&quot;thre_bp3&quot;</span>)\r\n        <span class=\"hljs-keyword\">return</span> conv_ins\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sig</span>(<span class=\"hljs-params\">self, x</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / (<span class=\"hljs-number\">1</span> + np.exp(-<span class=\"hljs-number\">1</span> * x))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">do_round</span>(<span class=\"hljs-params\">self, x</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">round</span>(x, <span class=\"hljs-number\">3</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">convolute</span>(<span class=\"hljs-params\">self, data, convs, w_convs, thre_convs, conv_step</span>):\r\n        <span class=\"hljs-comment\"># convolution process</span>\r\n        size_conv = convs[<span class=\"hljs-number\">0</span>]\r\n        num_conv = convs[<span class=\"hljs-number\">1</span>]\r\n        size_data = np.shape(data)[<span class=\"hljs-number\">0</span>]\r\n        <span class=\"hljs-comment\"># get the data slice of original image data, data_focus</span>\r\n        data_focus = []\r\n        <span class=\"hljs-keyword\">for</span> i_focus <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, size_data - size_conv + <span class=\"hljs-number\">1</span>, conv_step):\r\n            <span class=\"hljs-keyword\">for</span> j_focus <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, size_data - size_conv + <span class=\"hljs-number\">1</span>, conv_step):\r\n                focus = data[\r\n                    i_focus : i_focus + size_conv, j_focus : j_focus + size_conv\r\n                ]\r\n                data_focus.append(focus)\r\n        <span class=\"hljs-comment\"># calculate the feature map of every single kernel, and saved as list of matrix</span>\r\n        data_featuremap = []\r\n        Size_FeatureMap = <span class=\"hljs-built_in\">int</span>((size_data - size_conv) / conv_step + <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">for</span> i_map <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num_conv):\r\n            featuremap = []\r\n            <span class=\"hljs-keyword\">for</span> i_focus <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(data_focus)):\r\n                net_focus = (\r\n                    np.<span class=\"hljs-built_in\">sum</span>(np.multiply(data_focus[i_focus], w_convs[i_map]))\r\n                    - thre_convs[i_map]\r\n                )\r\n                featuremap.append(self.sig(net_focus))\r\n            featuremap = np.asmatrix(featuremap).reshape(\r\n                Size_FeatureMap, Size_FeatureMap\r\n            )\r\n            data_featuremap.append(featuremap)\r\n\r\n        <span class=\"hljs-comment\"># expanding the data slice to One dimenssion</span>\r\n        focus1_list = []\r\n        <span class=\"hljs-keyword\">for</span> each_focus <span class=\"hljs-keyword\">in</span> data_focus:\r\n            focus1_list.extend(self.Expand_Mat(each_focus))\r\n        focus_list = np.asarray(focus1_list)\r\n        <span class=\"hljs-keyword\">return</span> focus_list, data_featuremap\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pooling</span>(<span class=\"hljs-params\">self, featuremaps, size_pooling, <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">&quot;average_pool&quot;</span></span>):\r\n        <span class=\"hljs-comment\"># pooling process</span>\r\n        size_map = <span class=\"hljs-built_in\">len</span>(featuremaps[<span class=\"hljs-number\">0</span>])\r\n        size_pooled = <span class=\"hljs-built_in\">int</span>(size_map / size_pooling)\r\n        featuremap_pooled = []\r\n        <span class=\"hljs-keyword\">for</span> i_map <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(featuremaps)):\r\n            <span class=\"hljs-built_in\">map</span> = featuremaps[i_map]\r\n            map_pooled = []\r\n            <span class=\"hljs-keyword\">for</span> i_focus <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, size_map, size_pooling):\r\n                <span class=\"hljs-keyword\">for</span> j_focus <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, size_map, size_pooling):\r\n                    focus = <span class=\"hljs-built_in\">map</span>[\r\n                        i_focus : i_focus + size_pooling,\r\n                        j_focus : j_focus + size_pooling,\r\n                    ]\r\n                    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span> == <span class=\"hljs-string\">&quot;average_pool&quot;</span>:\r\n                        <span class=\"hljs-comment\"># average pooling</span>\r\n                        map_pooled.append(np.average(focus))\r\n                    <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">type</span> == <span class=\"hljs-string\">&quot;max_pooling&quot;</span>:\r\n                        <span class=\"hljs-comment\"># max pooling</span>\r\n                        map_pooled.append(np.<span class=\"hljs-built_in\">max</span>(focus))\r\n            map_pooled = np.asmatrix(map_pooled).reshape(size_pooled, size_pooled)\r\n            featuremap_pooled.append(map_pooled)\r\n        <span class=\"hljs-keyword\">return</span> featuremap_pooled\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_expand</span>(<span class=\"hljs-params\">self, data</span>):\r\n        <span class=\"hljs-comment\"># expanding three dimension data to one dimension list</span>\r\n        data_expanded = []\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(data)):\r\n            shapes = np.shape(data[i])\r\n            data_listed = data[i].reshape(<span class=\"hljs-number\">1</span>, shapes[<span class=\"hljs-number\">0</span>] * shapes[<span class=\"hljs-number\">1</span>])\r\n            data_listed = data_listed.getA().tolist()[<span class=\"hljs-number\">0</span>]\r\n            data_expanded.extend(data_listed)\r\n        data_expanded = np.asarray(data_expanded)\r\n        <span class=\"hljs-keyword\">return</span> data_expanded\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_expand_mat</span>(<span class=\"hljs-params\">self, data_mat</span>):\r\n        <span class=\"hljs-comment\"># expanding matrix to one dimension list</span>\r\n        data_mat = np.asarray(data_mat)\r\n        shapes = np.shape(data_mat)\r\n        data_expanded = data_mat.reshape(<span class=\"hljs-number\">1</span>, shapes[<span class=\"hljs-number\">0</span>] * shapes[<span class=\"hljs-number\">1</span>])\r\n        <span class=\"hljs-keyword\">return</span> data_expanded\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_calculate_gradient_from_pool</span>(<span class=\"hljs-params\">\r\n        self, out_map, pd_pool, num_map, size_map, size_pooling\r\n    </span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        calculate the gradient from the data slice of pool layer\r\n        pd_pool: list of matrix\r\n        out_map: the shape of data slice(size_map*size_map)\r\n        return: pd_all: list of matrix, [num, size_map, size_map]\r\n        &quot;&quot;&quot;</span>\r\n        pd_all = []\r\n        i_pool = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> i_map <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num_map):\r\n            pd_conv1 = np.ones((size_map, size_map))\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, size_map, size_pooling):\r\n                <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, size_map, size_pooling):\r\n                    pd_conv1[i : i + size_pooling, j : j + size_pooling] = pd_pool[\r\n                        i_pool\r\n                    ]\r\n                    i_pool = i_pool + <span class=\"hljs-number\">1</span>\r\n            pd_conv2 = np.multiply(\r\n                pd_conv1, np.multiply(out_map[i_map], (<span class=\"hljs-number\">1</span> - out_map[i_map]))\r\n            )\r\n            pd_all.append(pd_conv2)\r\n        <span class=\"hljs-keyword\">return</span> pd_all\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">train</span>(<span class=\"hljs-params\">\r\n        self, patterns, datas_train, datas_teach, n_repeat, error_accuracy, draw_e=<span class=\"hljs-built_in\">bool</span>\r\n    </span>):\r\n        <span class=\"hljs-comment\"># model traning</span>\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;----------------------Start Training-------------------------&quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot; - - Shape: Train_Data  &quot;</span>, np.shape(datas_train)))\r\n        <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot; - - Shape: Teach_Data  &quot;</span>, np.shape(datas_teach)))\r\n        rp = <span class=\"hljs-number\">0</span>\r\n        all_mse = []\r\n        mse = <span class=\"hljs-number\">10000</span>\r\n        <span class=\"hljs-keyword\">while</span> rp &lt; n_repeat <span class=\"hljs-keyword\">and</span> mse &gt;= error_accuracy:\r\n            error_count = <span class=\"hljs-number\">0</span>\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;-------------Learning Time %d--------------&quot;</span> % rp)\r\n            <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(datas_train)):\r\n                <span class=\"hljs-comment\"># print(&#x27;------------Learning Image: %d--------------&#x27;%p)</span>\r\n                data_train = np.asmatrix(datas_train[p])\r\n                data_teach = np.asarray(datas_teach[p])\r\n                data_focus1, data_conved1 = self.convolute(\r\n                    data_train,\r\n                    self.conv1,\r\n                    self.w_conv1,\r\n                    self.thre_conv1,\r\n                    conv_step=self.step_conv1,\r\n                )\r\n                data_pooled1 = self.pooling(data_conved1, self.size_pooling1)\r\n                shape_featuremap1 = np.shape(data_conved1)\r\n                <span class=\"hljs-string\">&quot;&quot;&quot;\r\n                print(&#x27;  -----original shape   &#x27;, np.shape(data_train))\r\n                print(&#x27;  ---- after convolution  &#x27;,np.shape(data_conv1))\r\n                print(&#x27;  -----after pooling  &#x27;,np.shape(data_pooled1))\r\n               &quot;&quot;&quot;</span>\r\n                data_bp_input = self._expand(data_pooled1)\r\n                bp_out1 = data_bp_input\r\n\r\n                bp_net_j = np.dot(bp_out1, self.vji.T) - self.thre_bp2\r\n                bp_out2 = self.sig(bp_net_j)\r\n                bp_net_k = np.dot(bp_out2, self.wkj.T) - self.thre_bp3\r\n                bp_out3 = self.sig(bp_net_k)\r\n\r\n                <span class=\"hljs-comment\"># --------------Model Leaning ------------------------</span>\r\n                <span class=\"hljs-comment\"># calculate error and gradient---------------</span>\r\n                pd_k_all = np.multiply(\r\n                    (data_teach - bp_out3), np.multiply(bp_out3, (<span class=\"hljs-number\">1</span> - bp_out3))\r\n                )\r\n                pd_j_all = np.multiply(\r\n                    np.dot(pd_k_all, self.wkj), np.multiply(bp_out2, (<span class=\"hljs-number\">1</span> - bp_out2))\r\n                )\r\n                pd_i_all = np.dot(pd_j_all, self.vji)\r\n\r\n                pd_conv1_pooled = pd_i_all / (self.size_pooling1 * self.size_pooling1)\r\n                pd_conv1_pooled = pd_conv1_pooled.T.getA().tolist()\r\n                pd_conv1_all = self._calculate_gradient_from_pool(\r\n                    data_conved1,\r\n                    pd_conv1_pooled,\r\n                    shape_featuremap1[<span class=\"hljs-number\">0</span>],\r\n                    shape_featuremap1[<span class=\"hljs-number\">1</span>],\r\n                    self.size_pooling1,\r\n                )\r\n                <span class=\"hljs-comment\"># weight and threshold learning process---------</span>\r\n                <span class=\"hljs-comment\"># convolution layer</span>\r\n                <span class=\"hljs-keyword\">for</span> k_conv <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.conv1[<span class=\"hljs-number\">1</span>]):\r\n                    pd_conv_list = self._expand_mat(pd_conv1_all[k_conv])\r\n                    delta_w = self.rate_weight * np.dot(pd_conv_list, data_focus1)\r\n\r\n                    self.w_conv1[k_conv] = self.w_conv1[k_conv] + delta_w.reshape(\r\n                        (self.conv1[<span class=\"hljs-number\">0</span>], self.conv1[<span class=\"hljs-number\">0</span>])\r\n                    )\r\n\r\n                    self.thre_conv1[k_conv] = (\r\n                        self.thre_conv1[k_conv]\r\n                        - np.<span class=\"hljs-built_in\">sum</span>(pd_conv1_all[k_conv]) * self.rate_thre\r\n                    )\r\n                <span class=\"hljs-comment\"># all connected layer</span>\r\n                self.wkj = self.wkj + pd_k_all.T * bp_out2 * self.rate_weight\r\n                self.vji = self.vji + pd_j_all.T * bp_out1 * self.rate_weight\r\n                self.thre_bp3 = self.thre_bp3 - pd_k_all * self.rate_thre\r\n                self.thre_bp2 = self.thre_bp2 - pd_j_all * self.rate_thre\r\n                <span class=\"hljs-comment\"># calculate the sum error of all single image</span>\r\n                errors = np.<span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-built_in\">abs</span>(data_teach - bp_out3))\r\n                error_count += errors\r\n                <span class=\"hljs-comment\"># print(&#x27;   ----Teach      &#x27;,data_teach)</span>\r\n                <span class=\"hljs-comment\"># print(&#x27;   ----BP_output  &#x27;,bp_out3)</span>\r\n            rp = rp + <span class=\"hljs-number\">1</span>\r\n            mse = error_count / patterns\r\n            all_mse.append(mse)\r\n\r\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">draw_error</span>():\r\n            yplot = [error_accuracy <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">int</span>(n_repeat * <span class=\"hljs-number\">1.2</span>))]\r\n            plt.plot(all_mse, <span class=\"hljs-string\">&quot;+-&quot;</span>)\r\n            plt.plot(yplot, <span class=\"hljs-string\">&quot;r--&quot;</span>)\r\n            plt.xlabel(<span class=\"hljs-string\">&quot;Learning Times&quot;</span>)\r\n            plt.ylabel(<span class=\"hljs-string\">&quot;All_mse&quot;</span>)\r\n            plt.grid(<span class=\"hljs-literal\">True</span>, alpha=<span class=\"hljs-number\">0.5</span>)\r\n            plt.show()\r\n\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;------------------Training Complished---------------------&quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot; - - Training epoch: &quot;</span>, rp, <span class=\"hljs-string\">&quot;     - - Mse: %.6f&quot;</span> % mse))\r\n        <span class=\"hljs-keyword\">if</span> draw_e:\r\n            draw_error()\r\n        <span class=\"hljs-keyword\">return</span> mse\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">predict</span>(<span class=\"hljs-params\">self, datas_test</span>):\r\n        <span class=\"hljs-comment\"># model predict</span>\r\n        produce_out = []\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;-------------------Start Testing-------------------------&quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>((<span class=\"hljs-string\">&quot; - - Shape: Test_Data  &quot;</span>, np.shape(datas_test)))\r\n        <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(datas_test)):\r\n            data_test = np.asmatrix(datas_test[p])\r\n            data_focus1, data_conved1 = self.convolute(\r\n                data_test,\r\n                self.conv1,\r\n                self.w_conv1,\r\n                self.thre_conv1,\r\n                conv_step=self.step_conv1,\r\n            )\r\n            data_pooled1 = self.pooling(data_conved1, self.size_pooling1)\r\n            data_bp_input = self._expand(data_pooled1)\r\n\r\n            bp_out1 = data_bp_input\r\n            bp_net_j = bp_out1 * self.vji.T - self.thre_bp2\r\n            bp_out2 = self.sig(bp_net_j)\r\n            bp_net_k = bp_out2 * self.wkj.T - self.thre_bp3\r\n            bp_out3 = self.sig(bp_net_k)\r\n            produce_out.extend(bp_out3.getA().tolist())\r\n        res = [<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(self.do_round, each)) <span class=\"hljs-keyword\">for</span> each <span class=\"hljs-keyword\">in</span> produce_out]\r\n        <span class=\"hljs-keyword\">return</span> np.asarray(res)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">convolution</span>(<span class=\"hljs-params\">self, data</span>):\r\n        <span class=\"hljs-comment\"># return the data of image after convoluting process so we can check it out</span>\r\n        data_test = np.asmatrix(data)\r\n        data_focus1, data_conved1 = self.convolute(\r\n            data_test,\r\n            self.conv1,\r\n            self.w_conv1,\r\n            self.thre_conv1,\r\n            conv_step=self.step_conv1,\r\n        )\r\n        data_pooled1 = self.pooling(data_conved1, self.size_pooling1)\r\n\r\n        <span class=\"hljs-keyword\">return</span> data_conved1, data_pooled1\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    I will put the example on other file\r\n    &quot;&quot;&quot;</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Denis Trofimov",
      "email": "silaradost@yandex.ru",
      "commits": 1
    },
    {
      "name": "cedricfarinazzo",
      "email": "cedric.farinazzo@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "RiptideBo",
      "email": "245885195@qq.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}