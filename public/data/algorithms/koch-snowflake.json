{
  "slug": "koch-snowflake",
  "name": "Koch Snowflake",
  "categories": [
    "fractals"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "fractals\\koch_snowflake.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/fractals\\koch_snowflake.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nDescription\r\n    The Koch snowflake is a fractal curve and one of the earliest fractals to\r\n    have been described. The Koch snowflake can be built up iteratively, in a\r\n    sequence of stages. The first stage is an equilateral triangle, and each\r\n    successive stage is formed by adding outward bends to each side of the\r\n    previous stage, making smaller equilateral triangles.\r\n    This can be achieved through the following steps for each line:\r\n        1. divide the line segment into three segments of equal length.\r\n        2. draw an equilateral triangle that has the middle segment from step 1\r\n        as its base and points outward.\r\n        3. remove the line segment that is the base of the triangle from step 2.\r\n    (description adapted from https://en.wikipedia.org/wiki/Koch_snowflake )\r\n    (for a more detailed explanation and an implementation in the\r\n    Processing language, see  https://natureofcode.com/book/chapter-8-fractals/\r\n    #84-the-koch-curve-and-the-arraylist-technique )\r\n\r\nRequirements (pip):\r\n    - matplotlib\r\n    - numpy\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt  <span class=\"hljs-comment\"># type: ignore</span>\r\n<span class=\"hljs-keyword\">import</span> numpy\r\n\r\n<span class=\"hljs-comment\"># initial triangle of Koch snowflake</span>\r\nVECTOR_1 = numpy.array([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>])\r\nVECTOR_2 = numpy.array([<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0.8660254</span>])\r\nVECTOR_3 = numpy.array([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>])\r\nINITIAL_VECTORS = [VECTOR_1, VECTOR_2, VECTOR_3, VECTOR_1]\r\n\r\n<span class=\"hljs-comment\"># uncomment for simple Koch curve instead of Koch snowflake</span>\r\n<span class=\"hljs-comment\"># INITIAL_VECTORS = [VECTOR_1, VECTOR_3]</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">iterate</span>(<span class=\"hljs-params\">initial_vectors: <span class=\"hljs-built_in\">list</span>[numpy.ndarray], steps: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[numpy.ndarray]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Go through the number of iterations determined by the argument &quot;steps&quot;.\r\n    Be careful with high values (above 5) since the time to calculate increases\r\n    exponentially.\r\n    &gt;&gt;&gt; iterate([numpy.array([0, 0]), numpy.array([1, 0])], 1)\r\n    [array([0, 0]), array([0.33333333, 0.        ]), array([0.5       , \\\r\n0.28867513]), array([0.66666667, 0.        ]), array([1, 0])]\r\n    &quot;&quot;&quot;</span>\r\n    vectors = initial_vectors\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(steps):\r\n        vectors = iteration_step(vectors)\r\n    <span class=\"hljs-keyword\">return</span> vectors\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">iteration_step</span>(<span class=\"hljs-params\">vectors: <span class=\"hljs-built_in\">list</span>[numpy.ndarray]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[numpy.ndarray]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Loops through each pair of adjacent vectors. Each line between two adjacent\r\n    vectors is divided into 4 segments by adding 3 additional vectors in-between\r\n    the original two vectors. The vector in the middle is constructed through a\r\n    60 degree rotation so it is bent outwards.\r\n    &gt;&gt;&gt; iteration_step([numpy.array([0, 0]), numpy.array([1, 0])])\r\n    [array([0, 0]), array([0.33333333, 0.        ]), array([0.5       , \\\r\n0.28867513]), array([0.66666667, 0.        ]), array([1, 0])]\r\n    &quot;&quot;&quot;</span>\r\n    new_vectors = []\r\n    <span class=\"hljs-keyword\">for</span> i, start_vector <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(vectors[:-<span class=\"hljs-number\">1</span>]):\r\n        end_vector = vectors[i + <span class=\"hljs-number\">1</span>]\r\n        new_vectors.append(start_vector)\r\n        difference_vector = end_vector - start_vector\r\n        new_vectors.append(start_vector + difference_vector / <span class=\"hljs-number\">3</span>)\r\n        new_vectors.append(\r\n            start_vector + difference_vector / <span class=\"hljs-number\">3</span> + rotate(difference_vector / <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">60</span>)\r\n        )\r\n        new_vectors.append(start_vector + difference_vector * <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>)\r\n    new_vectors.append(vectors[-<span class=\"hljs-number\">1</span>])\r\n    <span class=\"hljs-keyword\">return</span> new_vectors\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rotate</span>(<span class=\"hljs-params\">vector: numpy.ndarray, angle_in_degrees: <span class=\"hljs-built_in\">float</span></span>) -&gt; numpy.ndarray:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Standard rotation of a 2D vector with a rotation matrix\r\n    (see https://en.wikipedia.org/wiki/Rotation_matrix )\r\n    &gt;&gt;&gt; rotate(numpy.array([1, 0]), 60)\r\n    array([0.5      , 0.8660254])\r\n    &gt;&gt;&gt; rotate(numpy.array([1, 0]), 90)\r\n    array([6.123234e-17, 1.000000e+00])\r\n    &quot;&quot;&quot;</span>\r\n    theta = numpy.radians(angle_in_degrees)\r\n    c, s = numpy.cos(theta), numpy.sin(theta)\r\n    rotation_matrix = numpy.array(((c, -s), (s, c)))\r\n    <span class=\"hljs-keyword\">return</span> numpy.dot(rotation_matrix, vector)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">plot</span>(<span class=\"hljs-params\">vectors: <span class=\"hljs-built_in\">list</span>[numpy.ndarray]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Utility function to plot the vectors using matplotlib.pyplot\r\n    No doctest was implemented since this function does not have a return value\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># avoid stretched display of graph</span>\r\n    axes = plt.gca()\r\n    axes.set_aspect(<span class=\"hljs-string\">&quot;equal&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># matplotlib.pyplot.plot takes a list of all x-coordinates and a list of all</span>\r\n    <span class=\"hljs-comment\"># y-coordinates as inputs, which are constructed from the vector-list using</span>\r\n    <span class=\"hljs-comment\"># zip()</span>\r\n    x_coordinates, y_coordinates = <span class=\"hljs-built_in\">zip</span>(*vectors)\r\n    plt.plot(x_coordinates, y_coordinates)\r\n    plt.show()\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n    processed_vectors = iterate(INITIAL_VECTORS, <span class=\"hljs-number\">5</span>)\r\n    plot(processed_vectors)\r\n"
    },
    "javascript": {
      "dir": "Recursive\\test\\KochSnowflake.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Recursive\\test\\KochSnowflake.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { iterate, <span class=\"hljs-title class_\">Vector2</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../KochSnowflake&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;KochSnowflake&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should produce the correctly-transformed vectors&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">iterate</span>([<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)], <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>])\r\n      .<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> })\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">iterate</span>([<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)], <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">1</span>])\r\n      .<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> })\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">iterate</span>([<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)], <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">2</span>])\r\n      .<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sin</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> / <span class=\"hljs-number\">3</span>) / <span class=\"hljs-number\">3</span> })\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">iterate</span>([<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)], <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">3</span>])\r\n      .<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> })\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">iterate</span>([<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)], <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">4</span>])\r\n      .<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> })\r\n  })\r\n})\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\KochSnowflake.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\KochSnowflake.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.awt.*;\r\n<span class=\"hljs-keyword\">import</span> java.awt.image.BufferedImage;\r\n<span class=\"hljs-keyword\">import</span> java.io.File;\r\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> javax.imageio.ImageIO;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * The Koch snowflake is a fractal curve and one of the earliest fractals to\r\n * have been described. The Koch snowflake can be built up iteratively, in a\r\n * sequence of stages. The first stage is an equilateral triangle, and each\r\n * successive stage is formed by adding outward bends to each side of the\r\n * previous stage, making smaller equilateral triangles. This can be achieved\r\n * through the following steps for each line: 1. divide the line segment into\r\n * three segments of equal length. 2. draw an equilateral triangle that has the\r\n * middle segment from step 1 as its base and points outward. 3. remove the line\r\n * segment that is the base of the triangle from step 2. (description adapted\r\n * from https://en.wikipedia.org/wiki/Koch_snowflake ) (for a more detailed\r\n * explanation and an implementation in the Processing language, see\r\n * https://natureofcode.com/book/chapter-8-fractals/\r\n * #84-the-koch-curve-and-the-arraylist-technique ).\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KochSnowflake</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">// Test Iterate-method</span>\r\n        ArrayList&lt;Vector2&gt; vectors = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Vector2&gt;();\r\n        vectors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\r\n        vectors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>));\r\n        ArrayList&lt;Vector2&gt; result = Iterate(vectors, <span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">0</span>).x == <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">0</span>).y == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">1</span>).x == <span class=\"hljs-number\">1.</span> / <span class=\"hljs-number\">3</span>;\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">1</span>).y == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">2</span>).x == <span class=\"hljs-number\">1.</span> / <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">2</span>).y == Math.sin(Math.PI / <span class=\"hljs-number\">3</span>) / <span class=\"hljs-number\">3</span>;\r\n\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">3</span>).x == <span class=\"hljs-number\">2.</span> / <span class=\"hljs-number\">3</span>;\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">3</span>).y == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">4</span>).x == <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">assert</span> result.get(<span class=\"hljs-number\">4</span>).y == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">// Test GetKochSnowflake-method</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">imageWidth</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">600</span>;\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">offsetX</span> <span class=\"hljs-operator\">=</span> imageWidth / <span class=\"hljs-number\">10.</span>;\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">offsetY</span> <span class=\"hljs-operator\">=</span> imageWidth / <span class=\"hljs-number\">3.7</span>;\r\n        <span class=\"hljs-type\">BufferedImage</span> <span class=\"hljs-variable\">image</span> <span class=\"hljs-operator\">=</span> GetKochSnowflake(imageWidth, <span class=\"hljs-number\">5</span>);\r\n\r\n        <span class=\"hljs-comment\">// The background should be white</span>\r\n        <span class=\"hljs-keyword\">assert</span> image.getRGB(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>).getRGB();\r\n\r\n        <span class=\"hljs-comment\">// The snowflake is drawn in black and this is the position of the first vector</span>\r\n        <span class=\"hljs-keyword\">assert</span> image.getRGB((<span class=\"hljs-type\">int</span>) offsetX, (<span class=\"hljs-type\">int</span>) offsetY) == <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>).getRGB();\r\n\r\n        <span class=\"hljs-comment\">// Save image</span>\r\n        <span class=\"hljs-keyword\">try</span> {\r\n            ImageIO.write(image, <span class=\"hljs-string\">&quot;png&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;KochSnowflake.png&quot;</span>));\r\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Go through the number of iterations determined by the argument &quot;steps&quot;.\r\n     * Be careful with high values (above 5) since the time to calculate\r\n     * increases exponentially.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> initialVectors The vectors composing the shape to which the\r\n     * algorithm is applied.\r\n     * <span class=\"hljs-doctag\">@param</span> steps The number of iterations.\r\n     * <span class=\"hljs-doctag\">@return</span> The transformed vectors after the iteration-steps.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ArrayList&lt;Vector2&gt; <span class=\"hljs-title function_\">Iterate</span><span class=\"hljs-params\">(ArrayList&lt;Vector2&gt; initialVectors, <span class=\"hljs-type\">int</span> steps)</span> {\r\n        ArrayList&lt;Vector2&gt; vectors = initialVectors;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; steps; i++) {\r\n            vectors = IterationStep(vectors);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> vectors;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Method to render the Koch snowflake to a image.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> imageWidth The width of the rendered image.\r\n     * <span class=\"hljs-doctag\">@param</span> steps The number of iterations.\r\n     * <span class=\"hljs-doctag\">@return</span> The image of the rendered Koch snowflake.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> BufferedImage <span class=\"hljs-title function_\">GetKochSnowflake</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> imageWidth, <span class=\"hljs-type\">int</span> steps)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (imageWidth &lt;= <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;imageWidth should be greater than zero&quot;</span>);\r\n        }\r\n\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">offsetX</span> <span class=\"hljs-operator\">=</span> imageWidth / <span class=\"hljs-number\">10.</span>;\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">offsetY</span> <span class=\"hljs-operator\">=</span> imageWidth / <span class=\"hljs-number\">3.7</span>;\r\n        <span class=\"hljs-type\">Vector2</span> <span class=\"hljs-variable\">vector1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(offsetX, offsetY);\r\n        <span class=\"hljs-type\">Vector2</span> <span class=\"hljs-variable\">vector2</span>\r\n                <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(imageWidth / <span class=\"hljs-number\">2</span>, Math.sin(Math.PI / <span class=\"hljs-number\">3</span>) * imageWidth * <span class=\"hljs-number\">0.8</span> + offsetY);\r\n        <span class=\"hljs-type\">Vector2</span> <span class=\"hljs-variable\">vector3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(imageWidth - offsetX, offsetY);\r\n        ArrayList&lt;Vector2&gt; initialVectors = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Vector2&gt;();\r\n        initialVectors.add(vector1);\r\n        initialVectors.add(vector2);\r\n        initialVectors.add(vector3);\r\n        initialVectors.add(vector1);\r\n        ArrayList&lt;Vector2&gt; vectors = Iterate(initialVectors, steps);\r\n        <span class=\"hljs-keyword\">return</span> GetImage(vectors, imageWidth, imageWidth);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Loops through each pair of adjacent vectors. Each line between two\r\n     * adjacent vectors is divided into 4 segments by adding 3 additional\r\n     * vectors in-between the original two vectors. The vector in the middle is\r\n     * constructed through a 60 degree rotation so it is bent outwards.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> vectors The vectors composing the shape to which the algorithm is\r\n     * applied.\r\n     * <span class=\"hljs-doctag\">@return</span> The transformed vectors after the iteration-step.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ArrayList&lt;Vector2&gt; <span class=\"hljs-title function_\">IterationStep</span><span class=\"hljs-params\">(ArrayList&lt;Vector2&gt; vectors)</span> {\r\n        ArrayList&lt;Vector2&gt; newVectors = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Vector2&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; vectors.size() - <span class=\"hljs-number\">1</span>; i++) {\r\n            <span class=\"hljs-type\">Vector2</span> <span class=\"hljs-variable\">startVector</span> <span class=\"hljs-operator\">=</span> vectors.get(i);\r\n            <span class=\"hljs-type\">Vector2</span> <span class=\"hljs-variable\">endVector</span> <span class=\"hljs-operator\">=</span> vectors.get(i + <span class=\"hljs-number\">1</span>);\r\n            newVectors.add(startVector);\r\n            <span class=\"hljs-type\">Vector2</span> <span class=\"hljs-variable\">differenceVector</span> <span class=\"hljs-operator\">=</span> endVector.subtract(startVector).multiply(<span class=\"hljs-number\">1.</span> / <span class=\"hljs-number\">3</span>);\r\n            newVectors.add(startVector.add(differenceVector));\r\n            newVectors.add(startVector.add(differenceVector).add(differenceVector.rotate(<span class=\"hljs-number\">60</span>)));\r\n            newVectors.add(startVector.add(differenceVector.multiply(<span class=\"hljs-number\">2</span>)));\r\n        }\r\n\r\n        newVectors.add(vectors.get(vectors.size() - <span class=\"hljs-number\">1</span>));\r\n        <span class=\"hljs-keyword\">return</span> newVectors;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Utility-method to render the Koch snowflake to an image.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> vectors The vectors defining the edges to be rendered.\r\n     * <span class=\"hljs-doctag\">@param</span> imageWidth The width of the rendered image.\r\n     * <span class=\"hljs-doctag\">@param</span> imageHeight The height of the rendered image.\r\n     * <span class=\"hljs-doctag\">@return</span> The image of the rendered edges.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> BufferedImage <span class=\"hljs-title function_\">GetImage</span><span class=\"hljs-params\">(\r\n            ArrayList&lt;Vector2&gt; vectors, <span class=\"hljs-type\">int</span> imageWidth, <span class=\"hljs-type\">int</span> imageHeight)</span> {\r\n        <span class=\"hljs-type\">BufferedImage</span> <span class=\"hljs-variable\">image</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedImage</span>(imageWidth, imageHeight, BufferedImage.TYPE_INT_RGB);\r\n        <span class=\"hljs-type\">Graphics2D</span> <span class=\"hljs-variable\">g2d</span> <span class=\"hljs-operator\">=</span> image.createGraphics();\r\n\r\n        <span class=\"hljs-comment\">// Set the background white</span>\r\n        g2d.setBackground(Color.WHITE);\r\n        g2d.fillRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, imageWidth, imageHeight);\r\n\r\n        <span class=\"hljs-comment\">// Draw the edges</span>\r\n        g2d.setColor(Color.BLACK);\r\n        <span class=\"hljs-type\">BasicStroke</span> <span class=\"hljs-variable\">bs</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BasicStroke</span>(<span class=\"hljs-number\">1</span>);\r\n        g2d.setStroke(bs);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; vectors.size() - <span class=\"hljs-number\">1</span>; i++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x1</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) vectors.get(i).x;\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y1</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) vectors.get(i).y;\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x2</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) vectors.get(i + <span class=\"hljs-number\">1</span>).x;\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y2</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) vectors.get(i + <span class=\"hljs-number\">1</span>).y;\r\n\r\n            g2d.drawLine(x1, y1, x2, y2);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> image;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Inner class to handle the vector calculations.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vector2</span> {\r\n\r\n        <span class=\"hljs-type\">double</span> x, y;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Vector2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x, <span class=\"hljs-type\">double</span> y)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.x = x;\r\n            <span class=\"hljs-built_in\">this</span>.y = y;\r\n        }\r\n\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> String.format(<span class=\"hljs-string\">&quot;[%f, %f]&quot;</span>, <span class=\"hljs-built_in\">this</span>.x, <span class=\"hljs-built_in\">this</span>.y);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Vector addition\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> vector The vector to be added.\r\n         * <span class=\"hljs-doctag\">@return</span> The sum-vector.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Vector2 <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(Vector2 vector)</span> {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.x + vector.x;\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.y + vector.y;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(x, y);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Vector subtraction\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> vector The vector to be subtracted.\r\n         * <span class=\"hljs-doctag\">@return</span> The difference-vector.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Vector2 <span class=\"hljs-title function_\">subtract</span><span class=\"hljs-params\">(Vector2 vector)</span> {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.x - vector.x;\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.y - vector.y;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(x, y);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Vector scalar multiplication\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> scalar The factor by which to multiply the vector.\r\n         * <span class=\"hljs-doctag\">@return</span> The scaled vector.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Vector2 <span class=\"hljs-title function_\">multiply</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> scalar)</span> {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.x * scalar;\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.y * scalar;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(x, y);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Vector rotation (see https://en.wikipedia.org/wiki/Rotation_matrix)\r\n         *\r\n         * <span class=\"hljs-doctag\">@param</span> angleInDegrees The angle by which to rotate the vector.\r\n         * <span class=\"hljs-doctag\">@return</span> The rotated vector.\r\n         */</span>\r\n        <span class=\"hljs-keyword\">public</span> Vector2 <span class=\"hljs-title function_\">rotate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> angleInDegrees)</span> {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">radians</span> <span class=\"hljs-operator\">=</span> angleInDegrees * Math.PI / <span class=\"hljs-number\">180</span>;\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">ca</span> <span class=\"hljs-operator\">=</span> Math.cos(radians);\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">sa</span> <span class=\"hljs-operator\">=</span> Math.sin(radians);\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> ca * <span class=\"hljs-built_in\">this</span>.x - sa * <span class=\"hljs-built_in\">this</span>.y;\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> sa * <span class=\"hljs-built_in\">this</span>.x + ca * <span class=\"hljs-built_in\">this</span>.y;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector2</span>(x, y);\r\n        }\r\n    }\r\n}\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Other/KochSnowflake.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Other\\KochSnowflake.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Drawing;\r\n<span class=\"hljs-keyword\">using</span> System.Numerics;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The Koch snowflake is a fractal curve and one of the earliest fractals to</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     have been described. The Koch snowflake can be built up iteratively, in a</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     sequence of stages. The first stage is an equilateral triangle, and each</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     successive stage is formed by adding outward bends to each side of the</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     previous stage, making smaller equilateral triangles.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This can be achieved through the following steps for each line:</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     1. divide the line segment into three segments of equal length.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     2. draw an equilateral triangle that has the middle segment from step 1</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     as its base and points outward.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     3. remove the line segment that is the base of the triangle from step 2.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (description adapted from https://en.wikipedia.org/wiki/Koch_snowflake )</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (for a more detailed explanation and an implementation in the</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Processing language, see  https://natureofcode.com/book/chapter-8-fractals/</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     #84-the-koch-curve-and-the-arraylist-technique ).</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">KochSnowflake</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Go through the number of iterations determined by the argument &quot;steps&quot;.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Be careful with high values (above 5) since the time to calculate increases</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     exponentially.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;initialVectors&quot;&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The vectors composing the shape to which</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the algorithm is applied.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;steps&quot;&gt;</span>The number of iterations.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The transformed vectors after the iteration-steps.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Vector2&gt; <span class=\"hljs-title\">Iterate</span>(<span class=\"hljs-params\">List&lt;Vector2&gt; initialVectors, <span class=\"hljs-built_in\">int</span> steps = <span class=\"hljs-number\">5</span></span>)</span>\r\n        {\r\n            List&lt;Vector2&gt; vectors = initialVectors;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; steps; i++)\r\n            {\r\n                vectors = IterationStep(vectors);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> vectors;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Method to render the Koch snowflake to a bitmap. To save the</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     bitmap the command &#x27;GetKochSnowflake().Save(&quot;KochSnowflake.png&quot;)&#x27; can be used.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmapWidth&quot;&gt;</span>The width of the rendered bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;steps&quot;&gt;</span>The number of iterations.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The bitmap of the rendered Koch snowflake.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Bitmap <span class=\"hljs-title\">GetKochSnowflake</span>(<span class=\"hljs-params\">\r\n            <span class=\"hljs-built_in\">int</span> bitmapWidth = <span class=\"hljs-number\">600</span>,\r\n            <span class=\"hljs-built_in\">int</span> steps = <span class=\"hljs-number\">5</span></span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (bitmapWidth &lt;= <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(\r\n                    <span class=\"hljs-keyword\">nameof</span>(bitmapWidth),\r\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(bitmapWidth)}</span> should be greater than zero&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> offsetX = bitmapWidth / <span class=\"hljs-number\">10f</span>;\r\n            <span class=\"hljs-keyword\">var</span> offsetY = bitmapWidth / <span class=\"hljs-number\">3.7f</span>;\r\n            <span class=\"hljs-keyword\">var</span> vector1 = <span class=\"hljs-keyword\">new</span> Vector2(offsetX, offsetY);\r\n            <span class=\"hljs-keyword\">var</span> vector2 = <span class=\"hljs-keyword\">new</span> Vector2(bitmapWidth / <span class=\"hljs-number\">2</span>, (<span class=\"hljs-built_in\">float</span>)Math.Sin(Math.PI / <span class=\"hljs-number\">3</span>) * bitmapWidth * <span class=\"hljs-number\">0.8f</span> + offsetY);\r\n            <span class=\"hljs-keyword\">var</span> vector3 = <span class=\"hljs-keyword\">new</span> Vector2(bitmapWidth - offsetX, offsetY);\r\n            List&lt;Vector2&gt; initialVectors = <span class=\"hljs-keyword\">new</span>() { vector1, vector2, vector3, vector1 };\r\n            List&lt;Vector2&gt; vectors = Iterate(initialVectors, steps);\r\n            <span class=\"hljs-keyword\">return</span> GetBitmap(vectors, bitmapWidth, bitmapWidth);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Loops through each pair of adjacent vectors. Each line between two adjacent</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     vectors is divided into 4 segments by adding 3 additional vectors in-between</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the original two vectors. The vector in the middle is constructed through a</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     60 degree rotation so it is bent outwards.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;vectors&quot;&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The vectors composing the shape to which</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the algorithm is applied.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The transformed vectors after the iteration-step.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;Vector2&gt; <span class=\"hljs-title\">IterationStep</span>(<span class=\"hljs-params\">List&lt;Vector2&gt; vectors</span>)</span>\r\n        {\r\n            List&lt;Vector2&gt; newVectors = <span class=\"hljs-keyword\">new</span>();\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; vectors.Count - <span class=\"hljs-number\">1</span>; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> startVector = vectors[i];\r\n                <span class=\"hljs-keyword\">var</span> endVector = vectors[i + <span class=\"hljs-number\">1</span>];\r\n                newVectors.Add(startVector);\r\n                <span class=\"hljs-keyword\">var</span> differenceVector = endVector - startVector;\r\n                newVectors.Add(startVector + differenceVector / <span class=\"hljs-number\">3</span>);\r\n                newVectors.Add(startVector + differenceVector / <span class=\"hljs-number\">3</span> + Rotate(differenceVector / <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">60</span>));\r\n                newVectors.Add(startVector + differenceVector * <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>);\r\n            }\r\n\r\n            newVectors.Add(vectors[^<span class=\"hljs-number\">1</span>]);\r\n            <span class=\"hljs-keyword\">return</span> newVectors;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Standard rotation of a 2D vector with a rotation matrix</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (see https://en.wikipedia.org/wiki/Rotation_matrix ).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;vector&quot;&gt;</span>The vector to be rotated.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;angleInDegrees&quot;&gt;</span>The angle by which to rotate the vector.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The rotated vector.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Vector2 <span class=\"hljs-title\">Rotate</span>(<span class=\"hljs-params\">Vector2 vector, <span class=\"hljs-built_in\">float</span> angleInDegrees</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> radians = angleInDegrees * (<span class=\"hljs-built_in\">float</span>)Math.PI / <span class=\"hljs-number\">180</span>;\r\n            <span class=\"hljs-keyword\">var</span> ca = (<span class=\"hljs-built_in\">float</span>)Math.Cos(radians);\r\n            <span class=\"hljs-keyword\">var</span> sa = (<span class=\"hljs-built_in\">float</span>)Math.Sin(radians);\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Vector2(ca * vector.X - sa * vector.Y, sa * vector.X + ca * vector.Y);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Utility-method to render the Koch snowflake to a bitmap.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;vectors&quot;&gt;</span>The vectors defining the edges to be rendered.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmapWidth&quot;&gt;</span>The width of the rendered bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmapHeight&quot;&gt;</span>The height of the rendered bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The bitmap of the rendered edges.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Bitmap <span class=\"hljs-title\">GetBitmap</span>(<span class=\"hljs-params\">\r\n            List&lt;Vector2&gt; vectors,\r\n            <span class=\"hljs-built_in\">int</span> bitmapWidth,\r\n            <span class=\"hljs-built_in\">int</span> bitmapHeight</span>)</span>\r\n        {\r\n            Bitmap bitmap = <span class=\"hljs-keyword\">new</span>(bitmapWidth, bitmapHeight);\r\n\r\n            <span class=\"hljs-keyword\">using</span> (Graphics graphics = Graphics.FromImage(bitmap))\r\n            {\r\n                <span class=\"hljs-comment\">// Set the background white</span>\r\n                <span class=\"hljs-keyword\">var</span> imageSize = <span class=\"hljs-keyword\">new</span> Rectangle(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, bitmapWidth, bitmapHeight);\r\n                graphics.FillRectangle(Brushes.White, imageSize);\r\n\r\n                <span class=\"hljs-comment\">// Draw the edges</span>\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; vectors.Count - <span class=\"hljs-number\">1</span>; i++)\r\n                {\r\n                    Pen blackPen = <span class=\"hljs-keyword\">new</span>(Color.Black, <span class=\"hljs-number\">1</span>);\r\n\r\n                    <span class=\"hljs-keyword\">var</span> x1 = vectors[i].X;\r\n                    <span class=\"hljs-keyword\">var</span> y1 = vectors[i].Y;\r\n                    <span class=\"hljs-keyword\">var</span> x2 = vectors[i + <span class=\"hljs-number\">1</span>].X;\r\n                    <span class=\"hljs-keyword\">var</span> y2 = vectors[i + <span class=\"hljs-number\">1</span>].Y;\r\n\r\n                    graphics.DrawLine(blackPen, x1, y1, x2, y2);\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> bitmap;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 3
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}