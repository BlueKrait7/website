{
  "slug": "decision-tree",
  "name": "Decision Tree",
  "categories": [
    "machinelearning"
  ],
  "body": {
    "en": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>",
    "zh_Hans": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>",
    "ml": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>",
    "fr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>",
    "de": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>",
    "eo": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>",
    "es": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>",
    "it": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>",
    "hr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>",
    "uk": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\n<span class=\"hljs-comment\"># coding: utf-8</span>\n\n<span class=\"hljs-comment\"># In[1]:</span>\n\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-comment\"># In[ ]:</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">D_TREE</span> :\n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fit</span>(<span class=\"hljs-params\">self,Xin</span>):\n        <span class=\"hljs-comment\">#fitting the values</span>\n        self.X=Xin                            <span class=\"hljs-comment\">#training_dataset_</span>\n        self.my_tree=self.tree(Xin)           <span class=\"hljs-comment\">#calls tree() function to create a tree based on the dataset provided</span>\n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">label_count</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#count the unique labels</span>\n        count = {}                           <span class=\"hljs-comment\">#a dictionary that will store the no of times every label has occurred</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(t)):\n            lbl = t[i][-<span class=\"hljs-number\">1</span>]                   <span class=\"hljs-comment\">#The last field or column in t actually contains the labels </span>\n            <span class=\"hljs-keyword\">if</span> lbl <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> count:\n                count[lbl] = <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">#If the label is not present previously,initialize it with zero</span>\n            count[lbl]+=<span class=\"hljs-number\">1</span>                    <span class=\"hljs-comment\">#Everytime a particular label is encountered its count is increased by 1           </span>\n        <span class=\"hljs-keyword\">return</span> count\n\n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Question</span> :\n        <span class=\"hljs-comment\">#stores the question and matches the question </span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,col,value</span>):\n            self.col = col                  <span class=\"hljs-comment\">#The column to which the question belongs to</span>\n            self.question = value           <span class=\"hljs-comment\">#the particualr cell in the column which is treated as question</span>\n        \n        \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_digit_or_char</span>(<span class=\"hljs-params\">self,n</span>):\n            <span class=\"hljs-comment\">#checks whether a particular value is a number or not</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(n,<span class=\"hljs-built_in\">float</span>)\n    \n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">self,row</span>):\n            value=row[self.col]              <span class=\"hljs-comment\">#the value to be tested with the question</span>\n            <span class=\"hljs-keyword\">if</span>(self.is_digit_or_char(self.question)):\n                <span class=\"hljs-keyword\">return</span> value&amp;gt;=self.question  <span class=\"hljs-comment\">#if the value is numeric in nature check whether it is greater or equal to question</span>\n            <span class=\"hljs-keyword\">else</span> :\n                <span class=\"hljs-keyword\">return</span> value==self.question  <span class=\"hljs-comment\">#if the value is a character or string check whether it is equal to the question or not</span>\n         \n        \n   \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gini</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Calculates the gini score</span>\n        label = np.unique(t)                <span class=\"hljs-comment\">#No of unique labels</span>\n        impurity = <span class=\"hljs-number\">1</span>\n    \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(label)):\n            impurity -= (np.<span class=\"hljs-built_in\">sum</span>(t[:,-<span class=\"hljs-number\">1</span>]==label[i])/t.shape[<span class=\"hljs-number\">0</span>])**<span class=\"hljs-number\">2</span>    <span class=\"hljs-comment\">#formula for calculating impurity based on probability</span>\n    \n        <span class=\"hljs-keyword\">return</span> impurity\n\n    \n    \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">information_gain</span>(<span class=\"hljs-params\">self,l,r,current_uncertainity</span>):\n        <span class=\"hljs-comment\">#Information gain is calculated</span>\n        p = <span class=\"hljs-built_in\">len</span> (l) / <span class=\"hljs-built_in\">float</span> ( <span class=\"hljs-built_in\">len</span>(l) + <span class=\"hljs-built_in\">len</span>(r) )             \n        <span class=\"hljs-keyword\">return</span> current_uncertainity - p*self.gini(l) - (<span class=\"hljs-number\">1</span>-p)*self.gini(r)\n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">best_split</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-comment\">#Selects the best question and split based on the gini score</span>\n        maxm=<span class=\"hljs-number\">0</span>\n        best_question = <span class=\"hljs-literal\">None</span>\n        tr_row=[]\n        fl_row=[]\n            \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">1</span>]-<span class=\"hljs-number\">1</span>):\n            y=np.unique(t[:,i])                         <span class=\"hljs-comment\">#no of unique labels in a particular column</span>\n            m=y.shape[<span class=\"hljs-number\">0</span>]                                <span class=\"hljs-comment\">#no of examples</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m):\n                question = self.Question(i,y[j])        <span class=\"hljs-comment\">#each unique label is considered a question one at a time</span>\n                tr_row , fl_row = self.split(t,question)<span class=\"hljs-comment\">#splits the rows based on the question</span>\n                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">len</span>(fl_row)==<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(tr_row)==<span class=\"hljs-number\">0</span>):\n                    <span class=\"hljs-keyword\">continue</span>                            <span class=\"hljs-comment\">#if any of the branch has zero rows,the question is skipped</span>\n                \n                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  <span class=\"hljs-comment\">#information gain is calculated</span>\n                \n                <span class=\"hljs-keyword\">if</span>(info_gain&amp;gt;maxm):\n                    <span class=\"hljs-string\">\"\"\"best question\n                       with maximum informaion\n                       gain is selected\"\"\"</span>\n                    maxm = info_gain                 \n                    best_question = question\n                \n        <span class=\"hljs-keyword\">return</span> maxm,best_question\n\n    \n    \n   \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self,t,question</span>)\n    <span class=\"hljs-comment\">#Splits the dataset based on the best question</span>\n        tr_row=[]       \n        fl_row=[]\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"checks every row of the dataset \n               with the queston &amp; if it matches,\n               it is appended to the true rows\n               else to the false rows\"\"\"</span>\n            <span class=\"hljs-keyword\">if</span> question.check(t[k]):\n                tr_row=np.append(tr_row,t[k])   \n            <span class=\"hljs-keyword\">else</span>:\n                fl_row=np.append(fl_row,t[k])\n                    \n        tr_row = np.reshape(tr_row,(<span class=\"hljs-built_in\">len</span>(tr_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n        fl_row = np.reshape(fl_row,(<span class=\"hljs-built_in\">len</span>(fl_row)//t.shape[<span class=\"hljs-number\">1</span>],t.shape[<span class=\"hljs-number\">1</span>]))   <span class=\"hljs-comment\">#just reshapes the one-d matrix into a readable 2d matrix</span>\n    \n        <span class=\"hljs-keyword\">return</span> tr_row,fl_row\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Node</span>:\n        <span class=\"hljs-comment\">#Stores the different question,true branch and false branch for all parts of the tree</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,question,true_branch,false_branch</span>):\n            self.question = question                        \n            self.true_branch = true_branch\n            self.false_branch = false_branch\n\n\n            \n            \n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Leaf</span>:\n        <span class=\"hljs-comment\">#the terminal of a tree is the leaf</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self,t</span>):\n            self.predictions = D_TREE().label_count(t)    \n\n            \n            \n            \n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tree</span>(<span class=\"hljs-params\">self,t</span>):\n        <span class=\"hljs-string\">\"\"\"the most important part of the entire algorithm\n        this is where the tree is constructed from the root \n        to the leaves\"\"\"</span>\n        gain,question = self.best_split(t)                <span class=\"hljs-comment\">#best question with maximum gain is selected</span>\n        <span class=\"hljs-keyword\">if</span>(gain==<span class=\"hljs-number\">0</span>):\n            <span class=\"hljs-keyword\">return</span> self.Leaf(t)                           <span class=\"hljs-comment\">#no gain indicates that leaf is reached</span>\n        \n        <span class=\"hljs-string\">\"\"\"if the control has reached this far,it means\n        there is useful gain and teh datset can be subdivided\n        or branched into true rows and false rows\"\"\"</span>\n        true_rows , false_rows = self.split(t,question)    \n        true_node = self.tree(true_rows)                  <span class=\"hljs-comment\">#A recursion is carried out till all the true rows are found out</span>\n        false_node= self.tree(false_rows)                 <span class=\"hljs-comment\">#after true rows,the false rows are assigned to the node in a reverse fashion</span>\n                                                            \n        <span class=\"hljs-keyword\">return</span> self.Decision_Node(question,true_node,false_node)  \n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_testing_data</span>(<span class=\"hljs-params\">self,test,node</span>):\n        <span class=\"hljs-comment\">#checks the testing data by recursively calling itself</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(node,self.Leaf):\n            <span class=\"hljs-keyword\">return</span> node.predictions        <span class=\"hljs-comment\">#when the leaf is reached prediction is made</span>\n        \n        <span class=\"hljs-string\">\"\"\"a row is made to travel in the tree,till it reaches a leaf,\n           it is checked with all decision nodes, and accordingly\n           it travels along true branch or false branch,till\n           it reaches a leaf\"\"\"</span>\n        <span class=\"hljs-keyword\">if</span>(node.question.check(test)):\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.true_branch)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> self.check_testing_data(test,node.false_branch)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_leaf</span>(<span class=\"hljs-params\">self,LEAF</span>):\n        <span class=\"hljs-comment\">#prints a leaf</span>\n        p={}\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> LEAF.keys():\n            p[i] = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-number\">100</span>*LEAF[i]/<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>(LEAF.values()))) + <span class=\"hljs-string\">\"%\"</span>\n        \n        <span class=\"hljs-built_in\">print</span>(p)\n        \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pred</span>(<span class=\"hljs-params\">self,X_test</span>):\n        <span class=\"hljs-comment\">#predicts values for test data</span>\n        y_pred=[<span class=\"hljs-number\">0</span>]*X_test.shape[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(X_test.shape[<span class=\"hljs-number\">0</span>]):\n            <span class=\"hljs-string\">\"\"\"when a row reaches a particular leaf\n               it is assigned the label which\n               appears maximum in the leaf\"\"\"</span>\n            r= self.check_testing_data(X_test[i],self.my_tree)      <span class=\"hljs-comment\">#deals with one row at a time</span>\n            y_pred[i] = <span class=\"hljs-built_in\">max</span>(r.keys(), key=(<span class=\"hljs-keyword\">lambda</span> k: r[k]))         \n        <span class=\"hljs-keyword\">return</span> y_pred\n    \n    \n    \n    \n    \n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">accuracy</span>(<span class=\"hljs-params\">self,y_test,y_pred</span>):\n        <span class=\"hljs-comment\">#Calculate the accuracy of the model</span>\n        <span class=\"hljs-keyword\">return</span> np.mean(y_test==y_pred)*<span class=\"hljs-number\">100</span>\n    \n    \n    \n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing libraries</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Importing data set</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_breast_cancer\ndata = load_breast_cancer()\n\n\nX=data[<span class=\"hljs-string\">'data'</span>]\nY=data[<span class=\"hljs-string\">'target'</span>]\nY=np.reshape(Y,(Y.shape[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">1</span>))\nX=X[:,:<span class=\"hljs-number\">5</span>]\nX=np.append(X,Y,axis=<span class=\"hljs-number\">1</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"3\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Separating training set and test set</span>\nsz = <span class=\"hljs-built_in\">len</span>(X)//<span class=\"hljs-number\">4</span>\nX_test=X[:sz,:]\nX_train=X[sz:,:]   <span class=\"hljs-comment\">#X_train already contains Y_train as its last column so no need to define it separately</span>\nY_test=X_test[:,-<span class=\"hljs-number\">1</span>]\nn=X.shape[<span class=\"hljs-number\">1</span>]</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"4\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Training the algorithm</span>\ntrain=D_TREE()\ntrain.fit(X_train)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"22\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#Predictions on test data</span>\ny_pred=train.pred(X_test)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"21\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#A few predictions</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"21\"><pre class=\"nb-stdout\">{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">0.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n{<span class=\"hljs-number\">1.0</span>: <span class=\"hljs-string\">'100.0%'</span>}\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"18\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Accuracy of my model : \"</span>,train.accuracy(Y_test,y_pred),<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"18\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Accuracy</span> of my model :  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"17\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#calculating accuracy using sklearn model</span>\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train[:,<span class=\"hljs-number\">0</span>:n-<span class=\"hljs-number\">1</span>], Y_train)\ny_pred=clf.predict(X_test[:,:n-<span class=\"hljs-number\">1</span>])\nerror=(y_pred==Y_test.flatten())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"accuracy of sklearn model = \"</span>,np.mean(error)*<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">\"%\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"17\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">accuracy</span> of sklearn model =  <span class=\"hljs-number\">80</span>.<span class=\"hljs-number\">28169014084507</span> %\n</pre></div></div></div></div>"
  },
  "implementations": {
    "python": {
      "dir": "machine_learning\\decision_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning\\decision_tree.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nImplementation of a basic regression decision tree.\r\nInput data set: The input data set must be 1-dimensional with continuous labels.\r\nOutput: The decision tree maps a real number input to a real number output.\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Decision_Tree</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, depth=<span class=\"hljs-number\">5</span>, min_leaf_size=<span class=\"hljs-number\">5</span></span>):\r\n        self.depth = depth\r\n        self.decision_boundary = <span class=\"hljs-number\">0</span>\r\n        self.left = <span class=\"hljs-literal\">None</span>\r\n        self.right = <span class=\"hljs-literal\">None</span>\r\n        self.min_leaf_size = min_leaf_size\r\n        self.prediction = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">mean_squared_error</span>(<span class=\"hljs-params\">self, labels, prediction</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        mean_squared_error:\r\n        @param labels: a one dimensional numpy array\r\n        @param prediction: a floating point value\r\n        return value: mean_squared_error calculates the error if prediction is used to\r\n            estimate the labels\r\n        &gt;&gt;&gt; tester = Decision_Tree()\r\n        &gt;&gt;&gt; test_labels = np.array([1,2,3,4,5,6,7,8,9,10])\r\n        &gt;&gt;&gt; test_prediction = np.float(6)\r\n        &gt;&gt;&gt; tester.mean_squared_error(test_labels, test_prediction) == (\r\n        ...     Test_Decision_Tree.helper_mean_squared_error_test(test_labels,\r\n        ...         test_prediction))\r\n        True\r\n        &gt;&gt;&gt; test_labels = np.array([1,2,3])\r\n        &gt;&gt;&gt; test_prediction = np.float(2)\r\n        &gt;&gt;&gt; tester.mean_squared_error(test_labels, test_prediction) == (\r\n        ...     Test_Decision_Tree.helper_mean_squared_error_test(test_labels,\r\n        ...         test_prediction))\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> labels.ndim != <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Error: Input labels must be one dimensional&quot;</span>)\r\n\r\n        <span class=\"hljs-keyword\">return</span> np.mean((labels - prediction) ** <span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">train</span>(<span class=\"hljs-params\">self, X, y</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        train:\r\n        @param X: a one dimensional numpy array\r\n        @param y: a one dimensional numpy array.\r\n        The contents of y are the labels for the corresponding X values\r\n\r\n        train does not have a return value\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        this section is to check that the inputs conform to our dimensionality\r\n        constraints\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> X.ndim != <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Error: Input data set must be one dimensional&quot;</span>)\r\n            <span class=\"hljs-keyword\">return</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(X) != <span class=\"hljs-built_in\">len</span>(y):\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Error: X and y have different lengths&quot;</span>)\r\n            <span class=\"hljs-keyword\">return</span>\r\n        <span class=\"hljs-keyword\">if</span> y.ndim != <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Error: Data set labels must be one dimensional&quot;</span>)\r\n            <span class=\"hljs-keyword\">return</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(X) &lt; <span class=\"hljs-number\">2</span> * self.min_leaf_size:\r\n            self.prediction = np.mean(y)\r\n            <span class=\"hljs-keyword\">return</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> self.depth == <span class=\"hljs-number\">1</span>:\r\n            self.prediction = np.mean(y)\r\n            <span class=\"hljs-keyword\">return</span>\r\n\r\n        best_split = <span class=\"hljs-number\">0</span>\r\n        min_error = self.mean_squared_error(X, np.mean(y)) * <span class=\"hljs-number\">2</span>\r\n\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        loop over all possible splits for the decision tree. find the best split.\r\n        if no split exists that is less than 2 * error for the entire array\r\n        then the data set is not split and the average for the entire array is used as\r\n        the predictor\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(X)):\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(X[:i]) &lt; self.min_leaf_size:\r\n                <span class=\"hljs-keyword\">continue</span>\r\n            <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">len</span>(X[i:]) &lt; self.min_leaf_size:\r\n                <span class=\"hljs-keyword\">continue</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                error_left = self.mean_squared_error(X[:i], np.mean(y[:i]))\r\n                error_right = self.mean_squared_error(X[i:], np.mean(y[i:]))\r\n                error = error_left + error_right\r\n                <span class=\"hljs-keyword\">if</span> error &lt; min_error:\r\n                    best_split = i\r\n                    min_error = error\r\n\r\n        <span class=\"hljs-keyword\">if</span> best_split != <span class=\"hljs-number\">0</span>:\r\n            left_X = X[:best_split]\r\n            left_y = y[:best_split]\r\n            right_X = X[best_split:]\r\n            right_y = y[best_split:]\r\n\r\n            self.decision_boundary = X[best_split]\r\n            self.left = Decision_Tree(\r\n                depth=self.depth - <span class=\"hljs-number\">1</span>, min_leaf_size=self.min_leaf_size\r\n            )\r\n            self.right = Decision_Tree(\r\n                depth=self.depth - <span class=\"hljs-number\">1</span>, min_leaf_size=self.min_leaf_size\r\n            )\r\n            self.left.train(left_X, left_y)\r\n            self.right.train(right_X, right_y)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.prediction = np.mean(y)\r\n\r\n        <span class=\"hljs-keyword\">return</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">predict</span>(<span class=\"hljs-params\">self, x</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        predict:\r\n        @param x: a floating point value to predict the label of\r\n        the prediction function works by recursively calling the predict function\r\n        of the appropriate subtrees based on the tree&#x27;s decision boundary\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.prediction <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.prediction\r\n        <span class=\"hljs-keyword\">elif</span> self.left <span class=\"hljs-keyword\">or</span> self.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">if</span> x &gt;= self.decision_boundary:\r\n                <span class=\"hljs-keyword\">return</span> self.right.predict(x)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">return</span> self.left.predict(x)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Error: Decision tree not yet trained&quot;</span>)\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test_Decision_Tree</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Decision Tres test class&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-meta\">    @staticmethod</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">helper_mean_squared_error_test</span>(<span class=\"hljs-params\">labels, prediction</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        helper_mean_squared_error_test:\r\n        @param labels: a one dimensional numpy array\r\n        @param prediction: a floating point value\r\n        return value: helper_mean_squared_error_test calculates the mean squared error\r\n        &quot;&quot;&quot;</span>\r\n        squared_error_sum = np.<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">for</span> label <span class=\"hljs-keyword\">in</span> labels:\r\n            squared_error_sum += (label - prediction) ** <span class=\"hljs-number\">2</span>\r\n\r\n        <span class=\"hljs-keyword\">return</span> np.<span class=\"hljs-built_in\">float</span>(squared_error_sum / labels.size)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    In this demonstration we&#x27;re generating a sample data set from the sin function in\r\n    numpy.  We then train a decision tree on the data set and use the decision tree to\r\n    predict the label of 10 different test values. Then the mean squared error over\r\n    this test is displayed.\r\n    &quot;&quot;&quot;</span>\r\n    X = np.arange(-<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">0.005</span>)\r\n    y = np.sin(X)\r\n\r\n    tree = Decision_Tree(depth=<span class=\"hljs-number\">10</span>, min_leaf_size=<span class=\"hljs-number\">10</span>)\r\n    tree.train(X, y)\r\n\r\n    test_cases = (np.random.rand(<span class=\"hljs-number\">10</span>) * <span class=\"hljs-number\">2</span>) - <span class=\"hljs-number\">1</span>\r\n    predictions = np.array([tree.predict(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> test_cases])\r\n    avg_error = np.mean((predictions - test_cases) ** <span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Test values: &quot;</span> + <span class=\"hljs-built_in\">str</span>(test_cases))\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Predictions: &quot;</span> + <span class=\"hljs-built_in\">str</span>(predictions))\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Average error: &quot;</span> + <span class=\"hljs-built_in\">str</span>(avg_error))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod(name=<span class=\"hljs-string\">&quot;mean_squarred_error&quot;</span>, verbose=<span class=\"hljs-literal\">True</span>)\r\n"
    },
    "r": {
      "dir": "Classification-Algorithms\\decision_tree.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Classification-Algorithms\\decision_tree.R",
      "code": "library<span class=\"hljs-punctuation\">(</span>rpart<span class=\"hljs-punctuation\">)</span>\r\nx <span class=\"hljs-operator\">&lt;-</span> cbind<span class=\"hljs-punctuation\">(</span>x_train<span class=\"hljs-punctuation\">,</span>y_train<span class=\"hljs-punctuation\">)</span>\r\n<span class=\"hljs-comment\"># grow tree </span>\r\nfit <span class=\"hljs-operator\">&lt;-</span> rpart<span class=\"hljs-punctuation\">(</span>y_train <span class=\"hljs-operator\">~</span> .<span class=\"hljs-punctuation\">,</span> data <span class=\"hljs-operator\">=</span> x<span class=\"hljs-punctuation\">,</span>method<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;class&quot;</span><span class=\"hljs-punctuation\">)</span>\r\nsummary<span class=\"hljs-punctuation\">(</span>fit<span class=\"hljs-punctuation\">)</span>\r\n<span class=\"hljs-comment\"># Predict Output </span>\r\npredicted<span class=\"hljs-operator\">=</span> predict<span class=\"hljs-punctuation\">(</span>fit<span class=\"hljs-punctuation\">,</span>x_test<span class=\"hljs-punctuation\">)</span>\r\n"
    },
    "jupyter": {
      "dir": "machine_learning\\Decision tree\\Decision_Tree.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/machine_learning\\Decision tree\\Decision_Tree.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\r\n <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#!/usr/bin/env python\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# coding: utf-8\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# In[1]:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;import numpy as np\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# In[ ]:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;class D_TREE :\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def fit(self,Xin):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #fitting the values\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        self.X=Xin                            #training_dataset_\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        self.my_tree=self.tree(Xin)           #calls tree() function to create a tree based on the dataset provided\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def label_count(self,t):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #count the unique labels\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        count = {}                           #a dictionary that will store the no of times every label has occurred\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        for i in range(len(t)):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            lbl = t[i][-1]                   #The last field or column in t actually contains the labels \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            if lbl not in count:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                count[lbl] = 0               #If the label is not present previously,initialize it with zero\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            count[lbl]+=1                    #Everytime a particular label is encountered its count is increased by 1           \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return count\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    class Question :\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #stores the question and matches the question \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        def __init__(self,col,value):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            self.col = col                  #The column to which the question belongs to\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            self.question = value           #the particualr cell in the column which is treated as question\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        def is_digit_or_char(self,n):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            #checks whether a particular value is a number or not\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            return isinstance(n,int) or isinstance(n,float)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        def check(self,row):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            value=row[self.col]              #the value to be tested with the question\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            if(self.is_digit_or_char(self.question)):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                return value&gt;=self.question  #if the value is numeric in nature check whether it is greater or equal to question\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            else :\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                return value==self.question  #if the value is a character or string check whether it is equal to the question or not\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;         \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def gini(self,t):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #Calculates the gini score\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        label = np.unique(t)                #No of unique labels\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        impurity = 1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        for i in range(len(label)):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            impurity -= (np.sum(t[:,-1]==label[i])/t.shape[0])**2    #formula for calculating impurity based on probability\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return impurity\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def information_gain(self,l,r,current_uncertainity):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #Information gain is calculated\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        p = len (l) / float ( len(l) + len(r) )             \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return current_uncertainity - p*self.gini(l) - (1-p)*self.gini(r)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def best_split(self,t):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #Selects the best question and split based on the gini score\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        maxm=0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        best_question = None\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        tr_row=[]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        fl_row=[]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        for i in range(t.shape[1]-1):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            y=np.unique(t[:,i])                         #no of unique labels in a particular column\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            m=y.shape[0]                                #no of examples\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            for j in range(m):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                question = self.Question(i,y[j])        #each unique label is considered a question one at a time\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                tr_row , fl_row = self.split(t,question)#splits the rows based on the question\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                if(len(fl_row)==0 or len(tr_row)==0):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                    continue                            #if any of the branch has zero rows,the question is skipped\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                info_gain= self.information_gain(tr_row,fl_row,self.gini(t))  #information gain is calculated\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                if(info_gain&gt;maxm):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                    \\&quot;\\&quot;\\&quot;best question\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                       with maximum informaion\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                       gain is selected\\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                    maxm = info_gain                 \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                    best_question = question\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return maxm,best_question\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def split(self,t,question)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    #Splits the dataset based on the best question\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        tr_row=[]       \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        fl_row=[]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        for k in range(t.shape[0]):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            \\&quot;\\&quot;\\&quot;checks every row of the dataset \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;               with the queston &amp; if it matches,\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;               it is appended to the true rows\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;               else to the false rows\\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            if question.check(t[k]):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                tr_row=np.append(tr_row,t[k])   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            else:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                fl_row=np.append(fl_row,t[k])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        tr_row = np.reshape(tr_row,(len(tr_row)//t.shape[1],t.shape[1]))   #just reshapes the one-d matrix into a readable 2d matrix\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        fl_row = np.reshape(fl_row,(len(fl_row)//t.shape[1],t.shape[1]))   #just reshapes the one-d matrix into a readable 2d matrix\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return tr_row,fl_row\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    class Decision_Node:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #Stores the different question,true branch and false branch for all parts of the tree\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        def __init__(self,question,true_branch,false_branch):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            self.question = question                        \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            self.true_branch = true_branch\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            self.false_branch = false_branch\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    class Leaf:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #the terminal of a tree is the leaf\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        def __init__(self,t):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            self.predictions = D_TREE().label_count(t)    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def tree(self,t):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\&quot;\\&quot;\\&quot;the most important part of the entire algorithm\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        this is where the tree is constructed from the root \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        to the leaves\\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        gain,question = self.best_split(t)                #best question with maximum gain is selected\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        if(gain==0):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            return self.Leaf(t)                           #no gain indicates that leaf is reached\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\&quot;\\&quot;\\&quot;if the control has reached this far,it means\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        there is useful gain and teh datset can be subdivided\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        or branched into true rows and false rows\\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        true_rows , false_rows = self.split(t,question)    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        true_node = self.tree(true_rows)                  #A recursion is carried out till all the true rows are found out\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        false_node= self.tree(false_rows)                 #after true rows,the false rows are assigned to the node in a reverse fashion\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;                                                            \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return self.Decision_Node(question,true_node,false_node)  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def check_testing_data(self,test,node):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #checks the testing data by recursively calling itself\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        if isinstance(node,self.Leaf):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            return node.predictions        #when the leaf is reached prediction is made\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\&quot;\\&quot;\\&quot;a row is made to travel in the tree,till it reaches a leaf,\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;           it is checked with all decision nodes, and accordingly\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;           it travels along true branch or false branch,till\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;           it reaches a leaf\\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        if(node.question.check(test)):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            return self.check_testing_data(test,node.true_branch)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        else:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            return self.check_testing_data(test,node.false_branch)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def print_leaf(self,LEAF):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #prints a leaf\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        p={}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        for i in LEAF.keys():\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            p[i] = str(100*LEAF[i]/float(sum(LEAF.values()))) + \\&quot;%\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        print(p)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def pred(self,X_test):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #predicts values for test data\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        y_pred=[0]*X_test.shape[0]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        for i in range(X_test.shape[0]):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            \\&quot;\\&quot;\\&quot;when a row reaches a particular leaf\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;               it is assigned the label which\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;               appears maximum in the leaf\\&quot;\\&quot;\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            r= self.check_testing_data(X_test[i],self.my_tree)      #deals with one row at a time\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;            y_pred[i] = max(r.keys(), key=(lambda k: r[k]))         \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return y_pred\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    def accuracy(self,y_test,y_pred):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        #Calculate the accuracy of the model\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;        return np.mean(y_test==y_pred)*100\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#Importing libraries\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;import numpy as np\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#Importing data set\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;from sklearn.datasets import load_breast_cancer\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;data = load_breast_cancer()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;X=data[&#x27;data&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;Y=data[&#x27;target&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;Y=np.reshape(Y,(Y.shape[0],1))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;X=X[:,:5]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;X=np.append(X,Y,axis=1)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#Separating training set and test set\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;sz = len(X)//4\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;X_test=X[:sz,:]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;X_train=X[sz:,:]   #X_train already contains Y_train as its last column so no need to define it separately\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;Y_test=X_test[:,-1]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;n=X.shape[1]&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#Training the algorithm\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;train=D_TREE()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;train.fit(X_train)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">22</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#Predictions on test data\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;y_pred=train.pred(X_test)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">21</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n      <span class=\"hljs-string\">&quot;{1.0: &#x27;100.0%&#x27;}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;{0.0: &#x27;100.0%&#x27;}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;{0.0: &#x27;100.0%&#x27;}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;{1.0: &#x27;100.0%&#x27;}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;{0.0: &#x27;100.0%&#x27;}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;{1.0: &#x27;100.0%&#x27;}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;{0.0: &#x27;100.0%&#x27;}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;{0.0: &#x27;100.0%&#x27;}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;{0.0: &#x27;100.0%&#x27;}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-string\">&quot;{1.0: &#x27;100.0%&#x27;}\\n&quot;</span>\r\n     <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#A few predictions\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;for i in range(10):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;    train.print_leaf(train.check_testing_data(X_test[i],train.my_tree))&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">18</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n      <span class=\"hljs-string\">&quot;Accuracy of my model :  80.28169014084507 %\\n&quot;</span>\r\n     <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;print(\\&quot;Accuracy of my model : \\&quot;,train.accuracy(Y_test,y_pred),\\&quot;%\\&quot;)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">17</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n      <span class=\"hljs-string\">&quot;accuracy of sklearn model =  80.28169014084507 %\\n&quot;</span>\r\n     <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;#calculating accuracy using sklearn model\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;from sklearn import tree\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;clf = tree.DecisionTreeClassifier()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;clf = clf.fit(X_train[:,0:n-1], Y_train)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;y_pred=clf.predict(X_test[:,:n-1])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;error=(y_pred==Y_test.flatten())\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;print(\\&quot;accuracy of sklearn model = \\&quot;,np.mean(error)*100,\\&quot;%\\&quot;)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;language&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;language_info&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;codemirror_mode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\r\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;file_extension&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;.py&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;mimetype&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text/x-python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;nbconvert_exporter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;pygments_lexer&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython3&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3.8.3&quot;</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hrishikesh Suslade",
      "email": "41867989+hash84@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Aaryan Singh",
      "email": "aaryansingh.18je0005@mme.iitism.ac.in",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Erez Shomron",
      "email": "48328872+eshom@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Nathan Berger",
      "email": "berger1954@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}