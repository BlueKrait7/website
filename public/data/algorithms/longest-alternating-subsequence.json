{
  "slug": "longest-alternating-subsequence",
  "name": "Longest Alternating Subsequence",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\LongestAlternatingSubsequence.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\LongestAlternatingSubsequence.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-comment\">/*\r\n\r\n * Problem Statement: - \r\n * Find Longest Alternating Subsequence\r\n\r\n * A sequence {x1, x2, .. xn} is alternating sequence if its elements satisfy one of the following relations : \r\n\r\n   x1 &lt; x2 &gt; x3 &lt; x4 &gt; x5 &lt; …. xn or \r\n   x1 &gt; x2 &lt; x3 &gt; x4 &lt; x5 &gt; …. xn\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LongestAlternatingSubsequence</span> {\r\n\r\n    <span class=\"hljs-comment\">/* Function to return longest alternating subsequence length*/</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">AlternatingLength</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span> {\r\n        <span class=\"hljs-comment\">/*\r\n\r\n\t\tlas[i][0] = Length of the longest\r\n\t\t\talternating subsequence ending at\r\n\t\t\tindex i and last element is\r\n\t\t\tgreater than its previous element\r\n\r\n\t\tlas[i][1] = Length of the longest\r\n\t\t\talternating subsequence ending at\r\n\t\t\tindex i and last element is\r\n\t\t\tsmaller than its previous\r\n\t\t\telement \r\n\r\n         */</span>\r\n        <span class=\"hljs-type\">int</span> las[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n][<span class=\"hljs-number\">2</span>]; <span class=\"hljs-comment\">// las = LongestAlternatingSubsequence</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n            las[i][<span class=\"hljs-number\">0</span>] = las[i][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\r\n        }\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Initialize result</span>\r\n\r\n        <span class=\"hljs-comment\">/* Compute values in bottom up manner */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\r\n\r\n            <span class=\"hljs-comment\">/* Consider all elements as previous of arr[i]*/</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\r\n\r\n                <span class=\"hljs-comment\">/* If arr[i] is greater, then check with las[j][1] */</span>\r\n                <span class=\"hljs-keyword\">if</span> (arr[j] &lt; arr[i] &amp;&amp; las[i][<span class=\"hljs-number\">0</span>] &lt; las[j][<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>) {\r\n                    las[i][<span class=\"hljs-number\">0</span>] = las[j][<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">/* If arr[i] is smaller, then check with las[j][0]*/</span>\r\n                <span class=\"hljs-keyword\">if</span> (arr[j] &gt; arr[i] &amp;&amp; las[i][<span class=\"hljs-number\">1</span>] &lt; las[j][<span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">1</span>) {\r\n                    las[i][<span class=\"hljs-number\">1</span>] = las[j][<span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">1</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-comment\">/* Pick maximum of both values at index i */</span>\r\n            <span class=\"hljs-keyword\">if</span> (result &lt; Math.max(las[i][<span class=\"hljs-number\">0</span>], las[i][<span class=\"hljs-number\">1</span>])) {\r\n                result = Math.max(las[i][<span class=\"hljs-number\">0</span>], las[i][<span class=\"hljs-number\">1</span>]);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">60</span>};\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> arr.length;\r\n        System.out.println(<span class=\"hljs-string\">&quot;Length of Longest &quot;</span> + <span class=\"hljs-string\">&quot;alternating subsequence is &quot;</span> + AlternatingLength(arr, n));\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Limbad Yash",
      "email": "56826569+limbad-YK@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}