{
  "slug": "link-list-sort",
  "name": "Link List Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\LinkList_Sort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\LinkList_Sort.java",
      "code": "<span class=\"hljs-comment\">/** Author : Siddhant Swarup Mallick\r\n * Github : https://github.com/siddhant2002\r\n */</span>\r\n\r\n<span class=\"hljs-comment\">/** Program description - To sort the LinkList as per sorting technique */</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkList_Sort</span> {\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isSorted</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> p[] , <span class=\"hljs-type\">int</span> option)</span> {\r\n        <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in)) {\r\n        }\r\n        <span class=\"hljs-type\">int</span> a[] = p;\r\n        <span class=\"hljs-comment\">// Array is taken as input from test class</span>\r\n        <span class=\"hljs-type\">int</span> b[] = p;\r\n        <span class=\"hljs-comment\">// array similar to a</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ch</span> <span class=\"hljs-operator\">=</span> option;\r\n        <span class=\"hljs-comment\">// Choice is choosed as any number from 1 to 3 (So the linked list will be sorted by Merge sort technique/Insertion sort technique/Heap sort technique)</span>\r\n        <span class=\"hljs-keyword\">switch</span> (ch) {\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\r\n                <span class=\"hljs-type\">Task</span> <span class=\"hljs-variable\">nm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Task</span>();\r\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, prev = <span class=\"hljs-literal\">null</span>, fresh, ptr;\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; a.length; i++) {\r\n                    <span class=\"hljs-comment\">// New nodes are created and values are added</span>\r\n                    fresh = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(); <span class=\"hljs-comment\">// Node class is called</span>\r\n                    fresh.val = a[i]; <span class=\"hljs-comment\">// Node val is stored</span>\r\n                    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-literal\">null</span>)\r\n                        start = fresh;\r\n                    <span class=\"hljs-keyword\">else</span>\r\n                        prev.next = fresh;\r\n                    prev = fresh;\r\n                }\r\n                start = nm.sort_by_mergesort(start);\r\n                <span class=\"hljs-comment\">// method is being called</span>\r\n                <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">for</span> (ptr = start;ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\r\n                    a[i++]=ptr.val;\r\n                    <span class=\"hljs-comment\">// storing the sorted values in the array</span>\r\n                }\r\n                Arrays.sort(b);\r\n                <span class=\"hljs-comment\">// array b is sorted and it will return true when checked with sorted list</span>\r\n                LinkList_Sort uu=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkList_Sort</span>();\r\n                <span class=\"hljs-keyword\">if</span>(uu.compare(a,b))\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n                <span class=\"hljs-comment\">// The given array and the expected array is checked if both are same then true is displayed else false is displayed</span>\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\r\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">start1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, prev1 = <span class=\"hljs-literal\">null</span>, fresh1, ptr1;\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i1 &lt; a.length; i1++) {\r\n                    <span class=\"hljs-comment\">// New nodes are created and values are added</span>\r\n                    fresh1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(); <span class=\"hljs-comment\">// New node is created</span>\r\n                    fresh1.val = a[i1]; <span class=\"hljs-comment\">// Value is stored in the value part of the node</span>\r\n                    <span class=\"hljs-keyword\">if</span> (start1 == <span class=\"hljs-literal\">null</span>)\r\n                        start1 = fresh1;\r\n                    <span class=\"hljs-keyword\">else</span>\r\n                        prev1.next = fresh1;\r\n                    prev1 = fresh1;\r\n                }\r\n                <span class=\"hljs-type\">Task1</span> <span class=\"hljs-variable\">kk</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Task1</span>();\r\n                start1 = kk.sort_by_insertionsort(start1);\r\n                <span class=\"hljs-comment\">// method is being called</span>\r\n                <span class=\"hljs-type\">int</span> i1=<span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">for</span> (ptr1 = start1; ptr1 != <span class=\"hljs-literal\">null</span>; ptr1 = ptr1.next) {\r\n                    a[i1++]=ptr1.val;\r\n                    <span class=\"hljs-comment\">// storing the sorted values in the array</span>\r\n                }\r\n                LinkList_Sort uu1=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkList_Sort</span>();\r\n                <span class=\"hljs-comment\">// array b is not sorted and it will return false when checked with sorted list</span>\r\n                <span class=\"hljs-keyword\">if</span>(uu1.compare(a,b))\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n                <span class=\"hljs-comment\">// The given array and the expected array is checked if both are same then true is displayed else false is displayed</span>\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\r\n                <span class=\"hljs-type\">Task2</span> <span class=\"hljs-variable\">mm</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Task2</span>();\r\n                <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">start2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, prev2 = <span class=\"hljs-literal\">null</span>, fresh2, ptr2;\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i2 &lt; a.length; i2++) {\r\n                    <span class=\"hljs-comment\">// New nodes are created and values are added</span>\r\n                    fresh2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(); <span class=\"hljs-comment\">// Node class is created</span>\r\n                    fresh2.val = a[i2]; <span class=\"hljs-comment\">// Value is stored in the value part of the Node</span>\r\n                    <span class=\"hljs-keyword\">if</span> (start2 == <span class=\"hljs-literal\">null</span>)\r\n                        start2 = fresh2;\r\n                    <span class=\"hljs-keyword\">else</span>\r\n                        prev2.next = fresh2;\r\n                    prev2 = fresh2;\r\n                }\r\n                start2 = mm.sort_by_heapsort(start2);\r\n                <span class=\"hljs-comment\">// method is being called</span>\r\n                <span class=\"hljs-type\">int</span> i3=<span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">for</span> (ptr2 = start2; ptr2 != <span class=\"hljs-literal\">null</span>; ptr2 = ptr2.next) {\r\n                    a[i3++]=ptr2.val;\r\n                    <span class=\"hljs-comment\">// storing the sorted values in the array</span>\r\n                }\r\n                Arrays.sort(b);\r\n                <span class=\"hljs-comment\">// array b is sorted and it will return true when checked with sorted list</span>\r\n                LinkList_Sort uu2=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkList_Sort</span>();\r\n                <span class=\"hljs-keyword\">if</span>(uu2.compare(a,b))\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n                <span class=\"hljs-comment\">// The given array and the expected array is checked if both are same then true is displayed else false is displayed</span>\r\n            <span class=\"hljs-keyword\">default</span>:\r\n                <span class=\"hljs-comment\">// default is used incase user puts a unauthorized value</span>\r\n                System.out.println(<span class=\"hljs-string\">&quot;Wrong choice&quot;</span>);\r\n        }\r\n        <span class=\"hljs-comment\">// Switch case is used to call the classes as per the user requirement</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[] , <span class=\"hljs-type\">int</span> b[])</span>\r\n    {\r\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;a.length;i++)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span>(a[i]!=b[i])\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        <span class=\"hljs-comment\">// Both the arrays are checked for equalness. If both are equal then true is returned else false is returned</span>\r\n    }\r\n    <span class=\"hljs-comment\">/**\r\n     * OUTPUT :\r\n     * Input - {89,56,98,123,26,75,12,40,39,68,91} is same for all the 3 classes\r\n     * Output: [12 26 39 40 56 68 75 89 91 98 123] is same for all the 3 classes\r\n     * 1st approach Time Complexity : O(n logn)\r\n     * Auxiliary Space Complexity : O(n)\r\n     * 2nd approach Time Complexity : O(n^2)\r\n     * Auxiliary Space Complexity : O(n)\r\n     * 3rd approach Time Complexity : O(n logn)\r\n     * Auxiliary Space Complexity : O(n)\r\n     */</span>\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n    <span class=\"hljs-type\">int</span> val;\r\n    Node next;\r\n    <span class=\"hljs-comment\">// Node class for creation of linklist nodes</span>\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task</span> {\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> a[];\r\n\r\n    <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">sort_by_mergesort</span><span class=\"hljs-params\">(Node head)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span> || head.next == <span class=\"hljs-literal\">null</span>)\r\n            <span class=\"hljs-keyword\">return</span> head;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> count(head);\r\n        a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[c];\r\n        <span class=\"hljs-comment\">// Array of size c is created</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">ptr</span> <span class=\"hljs-operator\">=</span> head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\r\n            a[i++] = ptr.val;\r\n        }\r\n        <span class=\"hljs-comment\">// values are stored in the array</span>\r\n        i = <span class=\"hljs-number\">0</span>;\r\n        task(a, <span class=\"hljs-number\">0</span>, c - <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-comment\">// task method will be executed</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">ptr</span> <span class=\"hljs-operator\">=</span> head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\r\n            ptr.val = a[i++];\r\n            <span class=\"hljs-comment\">// Value is stored in the linklist after being sorted</span>\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> head;\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">(Node head)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        Node ptr;\r\n        <span class=\"hljs-keyword\">for</span> (ptr = head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\r\n            c++;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> c;\r\n        <span class=\"hljs-comment\">// This Method is used to count number of elements/nodes present in the linklist</span>\r\n        <span class=\"hljs-comment\">// It will return a integer type value denoting the number of nodes present</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">task</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (i &lt; j) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> (i + j) / <span class=\"hljs-number\">2</span>;\r\n            task(n, i, m);\r\n            task(n, m + <span class=\"hljs-number\">1</span>, j);\r\n            task1(n, i, m, j);\r\n            <span class=\"hljs-comment\">// Array is halved and sent for sorting</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">task1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n[], <span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> e)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> s, k = <span class=\"hljs-number\">0</span>, j = m + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> b[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[e - s + <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-keyword\">while</span> (i &lt;= m &amp;&amp; j &lt;= e) {\r\n            <span class=\"hljs-keyword\">if</span> (n[j] &gt;= n[i])\r\n                b[k++] = n[i++];\r\n            <span class=\"hljs-keyword\">else</span>\r\n                b[k++] = n[j++];\r\n        }\r\n        <span class=\"hljs-comment\">// Smallest number is stored after checking from both the arrays</span>\r\n        <span class=\"hljs-keyword\">while</span> (i &lt;= m) {\r\n            b[k++] = n[i++];\r\n        }\r\n        <span class=\"hljs-keyword\">while</span> (j &lt;= e) {\r\n            b[k++] = n[j++];\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> s; p &lt;= e; p++) {\r\n            a[p] = b[p - s];\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">// The method task and task1 is used to sort the linklist using merge sort</span>\r\n}\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task1</span> {\r\n    <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">sort_by_insertionsort</span><span class=\"hljs-params\">(Node head)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span> || head.next == <span class=\"hljs-literal\">null</span>)\r\n            <span class=\"hljs-keyword\">return</span> head;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> count(head);\r\n        <span class=\"hljs-type\">int</span> a[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[c];\r\n        <span class=\"hljs-comment\">// Array of size c is created</span>\r\n        a[<span class=\"hljs-number\">0</span>] = head.val;\r\n        <span class=\"hljs-type\">int</span> i;\r\n        Node ptr;\r\n        <span class=\"hljs-keyword\">for</span> (ptr = head.next, i = <span class=\"hljs-number\">1</span>; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next, i++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i - <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; a[j] &gt; ptr.val) {\r\n                <span class=\"hljs-comment\">// values are stored in the array</span>\r\n                a[j + <span class=\"hljs-number\">1</span>] = a[j];\r\n                j--;\r\n            }\r\n            a[j + <span class=\"hljs-number\">1</span>] = ptr.val;\r\n        }\r\n        i = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (ptr = head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\r\n            ptr.val = a[i++];\r\n            <span class=\"hljs-comment\">// Value is stored in the linklist after being sorted</span>\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> head;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">(Node head)</span> {\r\n        Node ptr;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (ptr = head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\r\n            c++;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> c;\r\n        <span class=\"hljs-comment\">// This Method is used to count number of elements/nodes present in the linklist</span>\r\n        <span class=\"hljs-comment\">// It will return a integer type value denoting the number of nodes present</span>\r\n    }\r\n    <span class=\"hljs-comment\">// The method task and task1 is used to sort the linklist using insertion sort</span>\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task2</span> {\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> a[];\r\n\r\n    <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">sort_by_heapsort</span><span class=\"hljs-params\">(Node head)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span> || head.next == <span class=\"hljs-literal\">null</span>)\r\n            <span class=\"hljs-keyword\">return</span> head;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> count(head);\r\n        a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[c];\r\n        <span class=\"hljs-comment\">// Array of size c is created</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">ptr</span> <span class=\"hljs-operator\">=</span> head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\r\n            a[i++] = ptr.val;\r\n            <span class=\"hljs-comment\">// values are stored in the array</span>\r\n        }\r\n        i = <span class=\"hljs-number\">0</span>;\r\n        task(a);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">ptr</span> <span class=\"hljs-operator\">=</span> head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\r\n            ptr.val = a[i++];\r\n            <span class=\"hljs-comment\">// Value is stored in the linklist after being sorted</span>\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> head;\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">(Node head)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        Node ptr;\r\n        <span class=\"hljs-keyword\">for</span> (ptr = head; ptr != <span class=\"hljs-literal\">null</span>; ptr = ptr.next) {\r\n            c++;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> c;\r\n        <span class=\"hljs-comment\">// This Method is used to count number of elements/nodes present in the linklist</span>\r\n        <span class=\"hljs-comment\">// It will return a integer type value denoting the number of nodes present</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">task</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n[])</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> n.length;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> k / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n            task1(n, k, i);\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> k - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> n[<span class=\"hljs-number\">0</span>];\r\n            n[<span class=\"hljs-number\">0</span>] = n[i];\r\n            n[i] = d;\r\n            task1(n, i, <span class=\"hljs-number\">0</span>);\r\n            <span class=\"hljs-comment\">// recursive calling of task1 method</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">task1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n[], <span class=\"hljs-type\">int</span> k, <span class=\"hljs-type\">int</span> i)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> i;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-keyword\">if</span> (l &lt; k &amp;&amp; n[l] &gt; n[p])\r\n            p = l;\r\n        <span class=\"hljs-keyword\">if</span> (r &lt; k &amp;&amp; n[r] &gt; n[p])\r\n            p = r;\r\n        <span class=\"hljs-keyword\">if</span> (p != i) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">d</span> <span class=\"hljs-operator\">=</span> n[p];\r\n            n[p] = n[i];\r\n            n[i] = d;\r\n            task1(n, k, p);\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">// The method task and task1 is used to sort the linklist using heap sort</span>\r\n}"
    }
  },
  "contributors": [
    {
      "name": "Siddhant Swarup Mallick",
      "email": "78552027+siddhant2002@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}