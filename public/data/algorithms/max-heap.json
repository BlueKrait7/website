{
  "slug": "max-heap",
  "name": "Max Heap",
  "categories": [
    "datastructures",
    "heap"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\heap\\max_heap.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\heap\\max_heap.py",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinaryHeap</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    A max-heap implementation in Python\r\n    &gt;&gt;&gt; binary_heap = BinaryHeap()\r\n    &gt;&gt;&gt; binary_heap.insert(6)\r\n    &gt;&gt;&gt; binary_heap.insert(10)\r\n    &gt;&gt;&gt; binary_heap.insert(15)\r\n    &gt;&gt;&gt; binary_heap.insert(12)\r\n    &gt;&gt;&gt; binary_heap.pop()\r\n    15\r\n    &gt;&gt;&gt; binary_heap.pop()\r\n    12\r\n    &gt;&gt;&gt; binary_heap.get_list\r\n    [10, 6]\r\n    &gt;&gt;&gt; len(binary_heap)\r\n    2\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\r\n        self.__heap = [<span class=\"hljs-number\">0</span>]\r\n        self.__size = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__swap_up</span>(<span class=\"hljs-params\">self, i: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Swap the element up&quot;&quot;&quot;</span>\r\n        temporary = self.__heap[i]\r\n        <span class=\"hljs-keyword\">while</span> i // <span class=\"hljs-number\">2</span> &gt; <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">if</span> self.__heap[i] &gt; self.__heap[i // <span class=\"hljs-number\">2</span>]:\r\n                self.__heap[i] = self.__heap[i // <span class=\"hljs-number\">2</span>]\r\n                self.__heap[i // <span class=\"hljs-number\">2</span>] = temporary\r\n            i //= <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, value: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Insert new element&quot;&quot;&quot;</span>\r\n        self.__heap.append(value)\r\n        self.__size += <span class=\"hljs-number\">1</span>\r\n        self.__swap_up(self.__size)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__swap_down</span>(<span class=\"hljs-params\">self, i: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Swap the element down&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">while</span> self.__size &gt;= <span class=\"hljs-number\">2</span> * i:\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span> &gt; self.__size:\r\n                bigger_child = <span class=\"hljs-number\">2</span> * i\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">if</span> self.__heap[<span class=\"hljs-number\">2</span> * i] &gt; self.__heap[<span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>]:\r\n                    bigger_child = <span class=\"hljs-number\">2</span> * i\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    bigger_child = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>\r\n            temporary = self.__heap[i]\r\n            <span class=\"hljs-keyword\">if</span> self.__heap[i] &lt; self.__heap[bigger_child]:\r\n                self.__heap[i] = self.__heap[bigger_child]\r\n                self.__heap[bigger_child] = temporary\r\n            i = bigger_child\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Pop the root element&quot;&quot;&quot;</span>\r\n        max_value = self.__heap[<span class=\"hljs-number\">1</span>]\r\n        self.__heap[<span class=\"hljs-number\">1</span>] = self.__heap[self.__size]\r\n        self.__size -= <span class=\"hljs-number\">1</span>\r\n        self.__heap.pop()\r\n        self.__swap_down(<span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">return</span> max_value\r\n\r\n<span class=\"hljs-meta\">    @property</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_list</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.__heap[<span class=\"hljs-number\">1</span>:]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Length of the array&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.__size\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    <span class=\"hljs-comment\"># create an instance of BinaryHeap</span>\r\n    binary_heap = BinaryHeap()\r\n    binary_heap.insert(<span class=\"hljs-number\">6</span>)\r\n    binary_heap.insert(<span class=\"hljs-number\">10</span>)\r\n    binary_heap.insert(<span class=\"hljs-number\">15</span>)\r\n    binary_heap.insert(<span class=\"hljs-number\">12</span>)\r\n    <span class=\"hljs-comment\"># pop root(max-values because it is max heap)</span>\r\n    <span class=\"hljs-built_in\">print</span>(binary_heap.pop())  <span class=\"hljs-comment\"># 15</span>\r\n    <span class=\"hljs-built_in\">print</span>(binary_heap.pop())  <span class=\"hljs-comment\"># 12</span>\r\n    <span class=\"hljs-comment\"># get the list and size after operations</span>\r\n    <span class=\"hljs-built_in\">print</span>(binary_heap.get_list)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">len</span>(binary_heap))\r\n"
    },
    "javascript": {
      "dir": "Data-Structures\\Heap\\MaxHeap.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures\\Heap\\MaxHeap.js",
      "code": "<span class=\"hljs-comment\">/**\r\n * Author: Samarth Jain\r\n * Max Heap implementation in Javascript\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinaryHeap</span> {\r\n  <span class=\"hljs-title function_\">constructor</span> () {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span> = []\r\n  }\r\n\r\n  insert (value) {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>.<span class=\"hljs-title function_\">push</span>(value)\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">heapify</span>()\r\n  }\r\n\r\n  size () {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>.<span class=\"hljs-property\">length</span>\r\n  }\r\n\r\n  empty () {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>() === <span class=\"hljs-number\">0</span>\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// using iterative approach to reorder the heap after insertion</span>\r\n  heapify () {\r\n    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>() - <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> (index &gt; <span class=\"hljs-number\">0</span>) {\r\n      <span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[index]\r\n      <span class=\"hljs-keyword\">const</span> parentIndex = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>)\r\n      <span class=\"hljs-keyword\">const</span> parent = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[parentIndex]\r\n\r\n      <span class=\"hljs-keyword\">if</span> (parent[<span class=\"hljs-number\">0</span>] &gt;= element[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">break</span>\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[index] = parent\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[parentIndex] = element\r\n      index = parentIndex\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Extracting the maximum element from the Heap</span>\r\n  extractMax () {\r\n    <span class=\"hljs-keyword\">const</span> max = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">0</span>]\r\n    <span class=\"hljs-keyword\">const</span> tmp = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>.<span class=\"hljs-title function_\">pop</span>()\r\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">empty</span>()) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">0</span>] = tmp\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">sinkDown</span>(<span class=\"hljs-number\">0</span>)\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> max\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// To restore the balance of the heap after extraction.</span>\r\n  sinkDown (index) {\r\n    <span class=\"hljs-keyword\">const</span> left = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">const</span> right = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">2</span>\r\n    <span class=\"hljs-keyword\">let</span> largest = index\r\n    <span class=\"hljs-keyword\">const</span> length = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>()\r\n\r\n    <span class=\"hljs-keyword\">if</span> (left &lt; length &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[left][<span class=\"hljs-number\">0</span>] &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[largest][<span class=\"hljs-number\">0</span>]) {\r\n      largest = left\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (right &lt; length &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[right][<span class=\"hljs-number\">0</span>] &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[largest][<span class=\"hljs-number\">0</span>]) {\r\n      largest = right\r\n    }\r\n    <span class=\"hljs-comment\">// swap</span>\r\n    <span class=\"hljs-keyword\">if</span> (largest !== index) {\r\n      <span class=\"hljs-keyword\">const</span> tmp = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[largest]\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[largest] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[index]\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[index] = tmp\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">sinkDown</span>(largest)\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Example</span>\r\n\r\n<span class=\"hljs-comment\">// const maxHeap = new BinaryHeap()</span>\r\n<span class=\"hljs-comment\">// maxHeap.insert([4])</span>\r\n<span class=\"hljs-comment\">// maxHeap.insert([3])</span>\r\n<span class=\"hljs-comment\">// maxHeap.insert([6])</span>\r\n<span class=\"hljs-comment\">// maxHeap.insert([1])</span>\r\n<span class=\"hljs-comment\">// maxHeap.insert([8])</span>\r\n<span class=\"hljs-comment\">// maxHeap.insert([2])</span>\r\n<span class=\"hljs-comment\">// const mx = maxHeap.extractMax()</span>\r\n\r\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">BinaryHeap</span> }\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\heaps\\MaxHeap.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\heaps\\MaxHeap.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.heaps;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Heap tree where a node&#x27;s key is higher than or equal to its parent&#x27;s and\r\n * lower than or equal to its children&#x27;s.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Nicolas Renard\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MaxHeap</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Heap</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&lt;HeapElement&gt; maxHeap;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MaxHeap</span><span class=\"hljs-params\">(List&lt;HeapElement&gt; listElements)</span> {\r\n        maxHeap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (HeapElement heapElement : listElements) {\r\n            <span class=\"hljs-keyword\">if</span> (heapElement != <span class=\"hljs-literal\">null</span>) {\r\n                insertElement(heapElement);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Null element. Not added to heap&quot;</span>);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (maxHeap.size() == <span class=\"hljs-number\">0</span>) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;No element has been added, empty heap.&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Get the element at a given index. The key for the list is equal to index\r\n     * value - 1\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> elementIndex index\r\n     * <span class=\"hljs-doctag\">@return</span> heapElement\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> HeapElement <span class=\"hljs-title function_\">getElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-keyword\">if</span> ((elementIndex &lt;= <span class=\"hljs-number\">0</span>) || (elementIndex &gt; maxHeap.size())) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexOutOfBoundsException</span>(<span class=\"hljs-string\">&quot;Index out of heap range&quot;</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> maxHeap.get(elementIndex - <span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Get the key of the element at a given index</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getElementKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-keyword\">return</span> maxHeap.get(elementIndex - <span class=\"hljs-number\">1</span>).getKey();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Swaps two elements in the heap</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index1, <span class=\"hljs-type\">int</span> index2)</span> {\r\n        <span class=\"hljs-type\">HeapElement</span> <span class=\"hljs-variable\">temporaryElement</span> <span class=\"hljs-operator\">=</span> maxHeap.get(index1 - <span class=\"hljs-number\">1</span>);\r\n        maxHeap.set(index1 - <span class=\"hljs-number\">1</span>, maxHeap.get(index2 - <span class=\"hljs-number\">1</span>));\r\n        maxHeap.set(index2 - <span class=\"hljs-number\">1</span>, temporaryElement);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Toggle an element up to its right place as long as its key is lower than its parent&#x27;s</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">toggleUp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> maxHeap.get(elementIndex - <span class=\"hljs-number\">1</span>).getKey();\r\n        <span class=\"hljs-keyword\">while</span> (getElementKey((<span class=\"hljs-type\">int</span>) Math.floor(elementIndex / <span class=\"hljs-number\">2.0</span>)) &lt; key) {\r\n            swap(elementIndex, (<span class=\"hljs-type\">int</span>) Math.floor(elementIndex / <span class=\"hljs-number\">2.0</span>));\r\n            elementIndex = (<span class=\"hljs-type\">int</span>) Math.floor(elementIndex / <span class=\"hljs-number\">2.0</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Toggle an element down to its right place as long as its key is higher</span>\r\n    <span class=\"hljs-comment\">// than any of its children&#x27;s</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">toggleDown</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> maxHeap.get(elementIndex - <span class=\"hljs-number\">1</span>).getKey();\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">wrongOrder</span>\r\n                <span class=\"hljs-operator\">=</span> (key &lt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>))\r\n                || (key &lt; getElementKey(Math.min(elementIndex * <span class=\"hljs-number\">2</span>, maxHeap.size())));\r\n        <span class=\"hljs-keyword\">while</span> ((<span class=\"hljs-number\">2</span> * elementIndex &lt;= maxHeap.size()) &amp;&amp; wrongOrder) {\r\n            <span class=\"hljs-comment\">// Check whether it shall swap the element with its left child or its right one if any.</span>\r\n            <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-number\">2</span> * elementIndex &lt; maxHeap.size())\r\n                    &amp;&amp; (getElementKey(elementIndex * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>) &gt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>))) {\r\n                swap(elementIndex, <span class=\"hljs-number\">2</span> * elementIndex + <span class=\"hljs-number\">1</span>);\r\n                elementIndex = <span class=\"hljs-number\">2</span> * elementIndex + <span class=\"hljs-number\">1</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                swap(elementIndex, <span class=\"hljs-number\">2</span> * elementIndex);\r\n                elementIndex = <span class=\"hljs-number\">2</span> * elementIndex;\r\n            }\r\n            wrongOrder\r\n                    = (key &lt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>))\r\n                    || (key &lt; getElementKey(Math.min(elementIndex * <span class=\"hljs-number\">2</span>, maxHeap.size())));\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> HeapElement <span class=\"hljs-title function_\">extractMax</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">HeapElement</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> maxHeap.get(<span class=\"hljs-number\">0</span>);\r\n        deleteElement(<span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertElement</span><span class=\"hljs-params\">(HeapElement element)</span> {\r\n        maxHeap.add(element);\r\n        toggleUp(maxHeap.size());\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (maxHeap.isEmpty())\r\n      <span class=\"hljs-keyword\">try</span> {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EmptyHeapException</span>(<span class=\"hljs-string\">&quot;Attempt to delete an element from an empty heap&quot;</span>);\r\n        } <span class=\"hljs-keyword\">catch</span> (EmptyHeapException e) {\r\n            e.printStackTrace();\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> ((elementIndex &gt; maxHeap.size()) || (elementIndex &lt;= <span class=\"hljs-number\">0</span>)) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexOutOfBoundsException</span>(<span class=\"hljs-string\">&quot;Index out of heap range&quot;</span>);\r\n        }\r\n        <span class=\"hljs-comment\">// The last element in heap replaces the one to be deleted</span>\r\n        maxHeap.set(elementIndex - <span class=\"hljs-number\">1</span>, getElement(maxHeap.size()));\r\n        maxHeap.remove(maxHeap.size());\r\n        <span class=\"hljs-comment\">// Shall the new element be moved up...</span>\r\n        <span class=\"hljs-keyword\">if</span> (getElementKey(elementIndex) &gt; getElementKey((<span class=\"hljs-type\">int</span>) Math.floor(elementIndex / <span class=\"hljs-number\">2.0</span>))) {\r\n            toggleUp(elementIndex);\r\n        } <span class=\"hljs-comment\">// ... or down ?</span>\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (((<span class=\"hljs-number\">2</span> * elementIndex &lt;= maxHeap.size())\r\n                &amp;&amp; (getElementKey(elementIndex) &lt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>)))\r\n                || ((<span class=\"hljs-number\">2</span> * elementIndex &lt; maxHeap.size())\r\n                &amp;&amp; (getElementKey(elementIndex) &lt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>)))) {\r\n            toggleDown(elementIndex);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> HeapElement <span class=\"hljs-title function_\">getElement</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> EmptyHeapException {\r\n        <span class=\"hljs-keyword\">try</span> {\r\n            <span class=\"hljs-keyword\">return</span> extractMax();\r\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EmptyHeapException</span>(<span class=\"hljs-string\">&quot;Heap is empty. Error retrieving element&quot;</span>);\r\n        }\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "data_structures\\heap\\max_heap.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\heap\\max_heap.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits.h&gt;</span>  <span class=\"hljs-comment\">/// for INT_MIN</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>  <span class=\"hljs-comment\">/// for dynamic memory allocation</span></span>\r\n\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">max_heap</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> *p;\r\n    <span class=\"hljs-type\">int</span> size;\r\n    <span class=\"hljs-type\">int</span> count;\r\n} Heap;\r\n\r\nHeap *<span class=\"hljs-title function_\">create_heap</span><span class=\"hljs-params\">(Heap *heap)</span>; <span class=\"hljs-comment\">/*Creates a max_heap structure and returns a\r\n                                  pointer to the struct*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">down_heapify</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> index)</span>; <span class=\"hljs-comment\">/*Pushes an element downwards in the\r\n                                             heap to find its correct position*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">up_heapify</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> index)</span>; <span class=\"hljs-comment\">/*Pushes an element upwards in the heap\r\n                                           to find its correct position*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> x)</span>;           <span class=\"hljs-comment\">/*Inserts an element in the heap*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(Heap *heap)</span>; <span class=\"hljs-comment\">/*Removes the top element from the heap*/</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">top</span><span class=\"hljs-params\">(Heap *heap)</span>; <span class=\"hljs-comment\">/*Returns the top element of the heap or returns INT_MIN if\r\n                        heap is empty*/</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">empty</span><span class=\"hljs-params\">(Heap *heap)</span>; <span class=\"hljs-comment\">/*Checks if heap is empty*/</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">(Heap *heap)</span>;  <span class=\"hljs-comment\">/*Returns the size of heap*/</span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    Heap *head = create_heap(head);\r\n    push(head, <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 10\\n&quot;</span>);\r\n    push(head, <span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 3\\n&quot;</span>);\r\n    push(head, <span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 2\\n&quot;</span>);\r\n    push(head, <span class=\"hljs-number\">8</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 8\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Top element = %d \\n&quot;</span>, top(head));\r\n    push(head, <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 1\\n&quot;</span>);\r\n    push(head, <span class=\"hljs-number\">7</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 7\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Top element = %d \\n&quot;</span>, top(head));\r\n    pop(head);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Popping an element.\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Top element = %d \\n&quot;</span>, top(head));\r\n    pop(head);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Popping an element.\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Top element = %d \\n&quot;</span>, top(head));\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\nHeap *<span class=\"hljs-title function_\">create_heap</span><span class=\"hljs-params\">(Heap *heap)</span>\r\n{\r\n    heap = (Heap *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(Heap));\r\n    heap-&gt;size = <span class=\"hljs-number\">1</span>;\r\n    heap-&gt;p = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(heap-&gt;size * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    heap-&gt;count = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">return</span> heap;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">down_heapify</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> index)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (index &gt;= heap-&gt;count)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    <span class=\"hljs-type\">int</span> left = index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-type\">int</span> right = index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-type\">int</span> leftflag = <span class=\"hljs-number\">0</span>, rightflag = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-type\">int</span> maximum = *((heap-&gt;p) + index);\r\n    <span class=\"hljs-keyword\">if</span> (left &lt; heap-&gt;count &amp;&amp; maximum &lt; *((heap-&gt;p) + left))\r\n    {\r\n        maximum = *((heap-&gt;p) + left);\r\n        leftflag = <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (right &lt; heap-&gt;count &amp;&amp; maximum &lt; *((heap-&gt;p) + right))\r\n    {\r\n        maximum = *((heap-&gt;p) + right);\r\n        leftflag = <span class=\"hljs-number\">0</span>;\r\n        rightflag = <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (leftflag)\r\n    {\r\n        *((heap-&gt;p) + left) = *((heap-&gt;p) + index);\r\n        *((heap-&gt;p) + index) = maximum;\r\n        down_heapify(heap, left);\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (rightflag)\r\n    {\r\n        *((heap-&gt;p) + right) = *((heap-&gt;p) + index);\r\n        *((heap-&gt;p) + index) = maximum;\r\n        down_heapify(heap, right);\r\n    }\r\n}\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">up_heapify</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> index)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> parent = (index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-keyword\">if</span> (parent &lt; <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    <span class=\"hljs-keyword\">if</span> (*((heap-&gt;p) + index) &gt; *((heap-&gt;p) + parent))\r\n    {\r\n        <span class=\"hljs-type\">int</span> temp = *((heap-&gt;p) + index);\r\n        *((heap-&gt;p) + index) = *((heap-&gt;p) + parent);\r\n        *((heap-&gt;p) + parent) = temp;\r\n        up_heapify(heap, parent);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> x)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (heap-&gt;count &gt;= heap-&gt;size)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    *((heap-&gt;p) + heap-&gt;count) = x;\r\n    heap-&gt;count++;\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">4</span> * heap-&gt;count &gt;= <span class=\"hljs-number\">3</span> * heap-&gt;size)\r\n    {\r\n        heap-&gt;size *= <span class=\"hljs-number\">2</span>;\r\n        (heap-&gt;p) = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">realloc</span>((heap-&gt;p), (heap-&gt;size) * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    }\r\n    up_heapify(heap, heap-&gt;count - <span class=\"hljs-number\">1</span>);\r\n}\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(Heap *heap)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (heap-&gt;count == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    heap-&gt;count--;\r\n    <span class=\"hljs-type\">int</span> temp = *((heap-&gt;p) + heap-&gt;count);\r\n    *((heap-&gt;p) + heap-&gt;count) = *(heap-&gt;p);\r\n    *(heap-&gt;p) = temp;\r\n    down_heapify(heap, <span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">4</span> * heap-&gt;count &lt;= heap-&gt;size)\r\n    {\r\n        heap-&gt;size /= <span class=\"hljs-number\">2</span>;\r\n        (heap-&gt;p) = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">realloc</span>((heap-&gt;p), (heap-&gt;size) * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    }\r\n}\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">top</span><span class=\"hljs-params\">(Heap *heap)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (heap-&gt;count != <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> *(heap-&gt;p);\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> INT_MIN;\r\n}\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">empty</span><span class=\"hljs-params\">(Heap *heap)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (heap-&gt;count != <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n}\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">(Heap *heap)</span> { <span class=\"hljs-keyword\">return</span> heap-&gt;count; }\r\n"
    },
    "haskell": {
      "dir": "src\\DataStructures\\MaxHeap.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src\\DataStructures\\MaxHeap.hs",
      "code": "<span class=\"hljs-keyword\">module</span> DataStructures.MaxHeap <span class=\"hljs-keyword\">where</span>\r\n\r\n<span class=\"hljs-comment\">-- Construct a max heap (represented as a list) from a given input list</span>\r\n<span class=\"hljs-title\">maxHeap</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; [a]\r\n<span class=\"hljs-title\">maxHeap</span> [] = []\r\n<span class=\"hljs-title\">maxHeap</span> [x] = [x]\r\n<span class=\"hljs-title\">maxHeap</span> xs = maxHeap&#x27; xs (div (length xs) <span class=\"hljs-number\">2</span>)\r\n\r\n<span class=\"hljs-comment\">-- Insert an element into a heap and then fix the heap</span>\r\n<span class=\"hljs-title\">insert</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; a -&gt; [a]\r\n<span class=\"hljs-title\">insert</span> [] e = [e]\r\n<span class=\"hljs-title\">insert</span> xs e = upHeapify (xs ++ [e]) (length xs)\r\n\r\n\r\n<span class=\"hljs-comment\">-- Recursive helper function for maxHeap</span>\r\n<span class=\"hljs-title\">maxHeap&#x27;</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; [a]\r\n<span class=\"hljs-title\">maxHeap&#x27;</span> xs <span class=\"hljs-number\">0</span> = maxHeapify xs <span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-title\">maxHeap&#x27;</span> xs i = maxHeap&#x27; (maxHeapify xs i) (i-<span class=\"hljs-number\">1</span>)\r\n\r\n<span class=\"hljs-comment\">-- Given a heap and an index (i), move the element at i up the heap until it is in the right position </span>\r\n<span class=\"hljs-title\">upHeapify</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; [a]\r\n<span class=\"hljs-title\">upHeapify</span> xs <span class=\"hljs-number\">0</span> = xs\r\n<span class=\"hljs-title\">upHeapify</span> xs i | xs !! i &lt;= xs !! ip = xs\r\n               | otherwise = upHeapify (swap xs i ip) ip\r\n                <span class=\"hljs-keyword\">where</span>\r\n                    ip = parent i\r\n\r\n<span class=\"hljs-comment\">-- Given a heap and an index (i), move the element at i down the heap until it is in the right position</span>\r\n<span class=\"hljs-title\">maxHeapify</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; [a]\r\n<span class=\"hljs-title\">maxHeapify</span> xs i | not (hasAnyChild xs i) = xs\r\n                | hasLeftChild xs i &amp;&amp; hasRightChild xs i = \r\n                    <span class=\"hljs-keyword\">let</span> largestChild = <span class=\"hljs-keyword\">if</span> xs !! (leftChild i) &gt; xs !! (rightChild i) <span class=\"hljs-keyword\">then</span> leftChild i <span class=\"hljs-keyword\">else</span> rightChild i\r\n                    <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">if</span> xs !! largestChild &gt; xs !! i <span class=\"hljs-keyword\">then</span> maxHeapify (swap xs largestChild i) largestChild <span class=\"hljs-keyword\">else</span> xs\r\n                | hasLeftChild xs i =\r\n                    <span class=\"hljs-keyword\">if</span> xs !! (leftChild i) &gt; xs !! i <span class=\"hljs-keyword\">then</span> maxHeapify (swap xs (leftChild i) i) (leftChild i) <span class=\"hljs-keyword\">else</span> xs\r\n                | otherwise =\r\n                    <span class=\"hljs-keyword\">if</span> xs !! (rightChild i) &gt; xs !! i <span class=\"hljs-keyword\">then</span> maxHeapify (swap xs (rightChild i) i) (rightChild i) <span class=\"hljs-keyword\">else</span> xs\r\n\r\n\r\n<span class=\"hljs-comment\">-- Remove the largest element from the heap, and then fix the heap</span>\r\n<span class=\"hljs-title\">extract</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; [a]\r\n<span class=\"hljs-title\">extract</span> [] = []\r\n<span class=\"hljs-title\">extract</span> [_] = []\r\n<span class=\"hljs-title\">extract</span> xs = maxHeapify ((last xs):take (length xs - <span class=\"hljs-number\">2</span>) (tail xs)) <span class=\"hljs-number\">0</span>\r\n\r\n<span class=\"hljs-comment\">-- Delete an element from a heap and then fix the heap</span>\r\n<span class=\"hljs-comment\">-- If the element is not present, return the heap as is</span>\r\n<span class=\"hljs-title\">delete</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [a] -&gt; a -&gt; [a]\r\n<span class=\"hljs-title\">delete</span> [] _ = []\r\n<span class=\"hljs-title\">delete</span> xs e = <span class=\"hljs-keyword\">let</span> i&#x27; = (search xs e)\r\n                  f = <span class=\"hljs-keyword\">if</span> xs !! (length xs - <span class=\"hljs-number\">1</span>) &gt; e <span class=\"hljs-keyword\">then</span> upHeapify <span class=\"hljs-keyword\">else</span> maxHeapify\r\n                  <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">case</span> i&#x27; <span class=\"hljs-keyword\">of</span> \r\n                      <span class=\"hljs-type\">Nothing</span> -&gt; xs\r\n                      <span class=\"hljs-type\">Just</span> i  -&gt; f (take ((length xs) - <span class=\"hljs-number\">1</span>) (swap xs i ((length xs) - <span class=\"hljs-number\">1</span>))) i\r\n\r\n<span class=\"hljs-comment\">-- Find the index of an element in a heap</span>\r\n<span class=\"hljs-comment\">-- Returns Nothing if the element is not present</span>\r\n<span class=\"hljs-title\">search</span> :: <span class=\"hljs-type\">Eq</span> a =&gt; [a] -&gt; a -&gt; <span class=\"hljs-type\">Maybe</span> <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">search</span> xs e = search&#x27; xs e <span class=\"hljs-number\">0</span> \r\n\r\n<span class=\"hljs-comment\">-- Recursive helper function for search</span>\r\n<span class=\"hljs-title\">search&#x27;</span> :: <span class=\"hljs-type\">Eq</span> a =&gt; [a] -&gt; a -&gt; <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Maybe</span> <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">search&#x27;</span> [] _ _ = <span class=\"hljs-type\">Nothing</span>\r\n<span class=\"hljs-title\">search&#x27;</span> (x:xs) e i | e == x = <span class=\"hljs-type\">Just</span> i\r\n                   | otherwise = search&#x27; xs e (i+<span class=\"hljs-number\">1</span>)\r\n\r\n\r\n<span class=\"hljs-comment\">-- Swap the values stored in two positions in a list</span>\r\n<span class=\"hljs-title\">swap</span> :: [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Int</span> -&gt; [a]\r\n<span class=\"hljs-title\">swap</span> xs i1 i2 = map snd . foldr (\\x a -&gt; \r\n        <span class=\"hljs-keyword\">if</span> fst x == i1 <span class=\"hljs-keyword\">then</span> ys !! i2 : a\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> fst x == i2 <span class=\"hljs-keyword\">then</span> ys !! i1 : a\r\n        <span class=\"hljs-keyword\">else</span> x : a) [] $ ys\r\n    <span class=\"hljs-keyword\">where</span> ys = zip [<span class=\"hljs-number\">0</span>..] xs\r\n\r\n<span class=\"hljs-comment\">-- Index where the left child of the node at the given index should be located</span>\r\n<span class=\"hljs-title\">leftChild</span> :: <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">leftChild</span> i = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>\r\n\r\n<span class=\"hljs-comment\">-- Index where the right child of the node at the given index should be located</span>\r\n<span class=\"hljs-title\">rightChild</span> :: <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">rightChild</span> i = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>\r\n\r\n<span class=\"hljs-comment\">-- Index where the parent of the node at the given index should be located</span>\r\n<span class=\"hljs-title\">parent</span> ::  <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Int</span>\r\n<span class=\"hljs-title\">parent</span> i = floor (fromIntegral (div (i-<span class=\"hljs-number\">1</span>) <span class=\"hljs-number\">2</span>))\r\n\r\n<span class=\"hljs-comment\">-- Helper functions to determine which, if any, child nodes are present in the heap for the node at a given index</span>\r\n<span class=\"hljs-title\">hasLeftChild</span>, hasRightChild, hasAnyChild :: [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Bool</span>\r\n<span class=\"hljs-title\">hasLeftChild</span> xs i = leftChild i &lt; length xs\r\n\r\n<span class=\"hljs-title\">hasRightChild</span> xs i = rightChild i &lt; length xs\r\n\r\n<span class=\"hljs-title\">hasAnyChild</span> xs i = hasLeftChild xs i || hasRightChild xs i"
    },
    "dart": {
      "dir": "data_structures\\Heap\\Binary_Heap\\Max_heap.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures\\Heap\\Binary_Heap\\Max_heap.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MaxHeap</span> </span>{\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; heap;\r\n\r\n  <span class=\"hljs-keyword\">void</span> buildHeap(<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; array) {\r\n    <span class=\"hljs-keyword\">this</span>.heap = _heapify(array);\r\n  }\r\n\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; _heapify(<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; array) {\r\n    <span class=\"hljs-built_in\">int</span> firstParent = (array.length - <span class=\"hljs-number\">2</span>) ~/ <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = firstParent; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n      _siftDown(i, array.length - <span class=\"hljs-number\">1</span>, array);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> array;\r\n  }\r\n\r\n  <span class=\"hljs-built_in\">int</span> peek() {\r\n    <span class=\"hljs-keyword\">if</span> (!isEmpty()) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.heap[<span class=\"hljs-number\">0</span>];\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\r\n  }\r\n\r\n  <span class=\"hljs-built_in\">bool</span> isEmpty() {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.heap.length == <span class=\"hljs-number\">0</span>;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> _siftUp(<span class=\"hljs-built_in\">int</span> currentIndex) {\r\n    <span class=\"hljs-built_in\">int</span> parentIndex = (currentIndex - <span class=\"hljs-number\">1</span>) ~/ <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-keyword\">while</span> (\r\n        parentIndex &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>.heap[parentIndex] &lt; <span class=\"hljs-keyword\">this</span>.heap[currentIndex]) {\r\n      _swap(parentIndex, currentIndex, <span class=\"hljs-keyword\">this</span>.heap);\r\n      currentIndex = parentIndex;\r\n      parentIndex = (currentIndex - <span class=\"hljs-number\">1</span>) ~/ <span class=\"hljs-number\">2</span>;\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> _siftDown(<span class=\"hljs-built_in\">int</span> currentIndex, <span class=\"hljs-built_in\">int</span> endIndex, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; heap) {\r\n    <span class=\"hljs-built_in\">int</span> childOneIndex = (<span class=\"hljs-number\">2</span> * currentIndex) + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-built_in\">int</span> childTwoIndex;\r\n\r\n    <span class=\"hljs-keyword\">while</span> (childOneIndex &lt;= endIndex) {\r\n      childTwoIndex =\r\n          <span class=\"hljs-number\">2</span> * currentIndex + <span class=\"hljs-number\">2</span> &lt;= endIndex ? <span class=\"hljs-number\">2</span> * currentIndex + <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">-1</span>;\r\n      <span class=\"hljs-built_in\">int</span> indexToSwap;\r\n      <span class=\"hljs-keyword\">if</span> (childTwoIndex != <span class=\"hljs-number\">-1</span> &amp;&amp; heap[childTwoIndex] &gt; heap[childOneIndex]) {\r\n        indexToSwap = childTwoIndex;\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        indexToSwap = childOneIndex;\r\n      }\r\n\r\n      <span class=\"hljs-keyword\">if</span> (heap[currentIndex] &lt; heap[indexToSwap]) {\r\n        _swap(currentIndex, indexToSwap, heap);\r\n        currentIndex = indexToSwap;\r\n        childOneIndex = (<span class=\"hljs-number\">2</span> * currentIndex) + <span class=\"hljs-number\">1</span>;\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">break</span>;\r\n      }\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> insert(<span class=\"hljs-built_in\">int</span> value) {\r\n    <span class=\"hljs-keyword\">this</span>.heap.add(value);\r\n    _siftUp(<span class=\"hljs-keyword\">this</span>.heap.length - <span class=\"hljs-number\">1</span>);\r\n  }\r\n\r\n  <span class=\"hljs-built_in\">int</span> remove() {\r\n    <span class=\"hljs-keyword\">if</span> (!isEmpty()) {\r\n      _swap(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>.heap.length - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">this</span>.heap);\r\n      <span class=\"hljs-built_in\">int</span> maxElement = <span class=\"hljs-keyword\">this</span>.heap.removeLast();\r\n      _siftDown(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>.heap.length - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">this</span>.heap);\r\n      <span class=\"hljs-keyword\">return</span> maxElement;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> _swap(<span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; array) {\r\n    <span class=\"hljs-built_in\">int</span> temp;\r\n    temp = array[left];\r\n    array[left] = array[right];\r\n    array[right] = temp;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  MaxHeap maxHeap = <span class=\"hljs-keyword\">new</span> MaxHeap();\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; array = [<span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">391</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">41</span>];\r\n  maxHeap.buildHeap(array);\r\n  test((<span class=\"hljs-string\">&#x27;Test case 1&#x27;</span>), () {\r\n    expect(maxHeap.remove(), equals(<span class=\"hljs-number\">391</span>));\r\n    maxHeap.insert(<span class=\"hljs-number\">-100</span>);\r\n    expect(maxHeap.isEmpty(), isFalse);\r\n    expect(maxHeap.peek(), equals(<span class=\"hljs-number\">56</span>));\r\n    maxHeap.insert(<span class=\"hljs-number\">1000</span>);\r\n    expect(maxHeap.peek(), equals(<span class=\"hljs-number\">1000</span>));\r\n    expect(maxHeap.remove(), equals(<span class=\"hljs-number\">1000</span>));\r\n    expect(maxHeap.remove(), equals(<span class=\"hljs-number\">56</span>));\r\n  });\r\n\r\n  test((<span class=\"hljs-string\">&#x27;Test case 2&#x27;</span>), () {\r\n    array = [<span class=\"hljs-number\">-7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">-6</span>, <span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>];\r\n    maxHeap = <span class=\"hljs-keyword\">new</span> MaxHeap();\r\n    maxHeap.buildHeap(array);\r\n    expect(maxHeap.remove(), equals(<span class=\"hljs-number\">10</span>));\r\n    expect(maxHeap.peek(), equals(<span class=\"hljs-number\">9</span>));\r\n    maxHeap.insert(<span class=\"hljs-number\">890</span>);\r\n    expect(maxHeap.peek(), equals(<span class=\"hljs-number\">890</span>));\r\n    expect(maxHeap.remove(), equals(<span class=\"hljs-number\">890</span>));\r\n    expect(maxHeap.peek(), equals(<span class=\"hljs-number\">9</span>));\r\n    expect(maxHeap.isEmpty(), isFalse);\r\n    maxHeap.insert(<span class=\"hljs-number\">1</span>);\r\n    expect(maxHeap.peek(), equals(<span class=\"hljs-number\">9</span>));\r\n  });\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Sam Jones",
      "email": "sam.jones240699@gmail.com",
      "commits": 1
    },
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Mainak Debnath",
      "email": "55401423+mainak-debnath@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Samarth Jain",
      "email": "53353139+samjain2907@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "halilylm",
      "email": "65048618+halilylm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kaustav Bhattacharya",
      "email": "kaustavbhattacharya07@gmail.com",
      "commits": 2
    },
    {
      "name": "zacharyjones123",
      "email": "zrjones@ncsu.edu",
      "commits": 2
    },
    {
      "name": "Nicolas Renard",
      "email": "nicolas.renard.76@outlook.fr",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}