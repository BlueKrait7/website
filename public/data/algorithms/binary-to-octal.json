{
  "slug": "binary-to-octal",
  "name": "Binary to Octal",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "conversions\\binary_to_octal.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/conversions\\binary_to_octal.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThe function below will convert any binary string to the octal equivalent.\r\n\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>bin_to_octal(&quot;1111&quot;)\r\n&#x27;17&#x27;\r\n\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>bin_to_octal(&quot;101010101010011&quot;)\r\n&#x27;52523&#x27;\r\n\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>bin_to_octal(&quot;&quot;)\r\nTraceback (most recent call last):\r\n...\r\nValueError: Empty string was passed to the function\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>bin_to_octal(&quot;a-1&quot;)\r\nTraceback (most recent call last):\r\n...\r\nValueError: Non-binary value was passed to the function\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bin_to_octal</span>(<span class=\"hljs-params\">bin_string: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>(char <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&quot;01&quot;</span> <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> bin_string):\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Non-binary value was passed to the function&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> bin_string:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Empty string was passed to the function&quot;</span>)\r\n    oct_string = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(bin_string) % <span class=\"hljs-number\">3</span> != <span class=\"hljs-number\">0</span>:\r\n        bin_string = <span class=\"hljs-string\">&quot;0&quot;</span> + bin_string\r\n    bin_string_in_3_list = [\r\n        bin_string[index : index + <span class=\"hljs-number\">3</span>]\r\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(bin_string))\r\n        <span class=\"hljs-keyword\">if</span> index % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span>\r\n    ]\r\n    <span class=\"hljs-keyword\">for</span> bin_group <span class=\"hljs-keyword\">in</span> bin_string_in_3_list:\r\n        oct_val = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> index, val <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(bin_group):\r\n            oct_val += <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2</span> ** (<span class=\"hljs-number\">2</span> - index) * <span class=\"hljs-built_in\">int</span>(val))\r\n        oct_string += <span class=\"hljs-built_in\">str</span>(oct_val)\r\n    <span class=\"hljs-keyword\">return</span> oct_string\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\conversions\\BinaryToOctal.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\conversions\\BinaryToOctal.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.conversions;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Converts any Binary number to an Octal Number\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Zachary Jones\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinaryToOctal</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Main method\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> args Command line arguments\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Input the binary number: &quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\r\n        System.out.println(<span class=\"hljs-string\">&quot;Octal equivalent: &quot;</span> + convertBinaryToOctal(b));\r\n        sc.close();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method converts a binary number to an octal number.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> binary The binary number\r\n     * <span class=\"hljs-doctag\">@return</span> The octal number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">convertBinaryToOctal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> binary)</span> {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">octal</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">currBit</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">while</span> (binary != <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">code3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) {\r\n                currBit = binary % <span class=\"hljs-number\">10</span>;\r\n                binary = binary / <span class=\"hljs-number\">10</span>;\r\n                code3 += currBit * j;\r\n                j *= <span class=\"hljs-number\">2</span>;\r\n            }\r\n            octal = code3 + octal;\r\n            j = <span class=\"hljs-number\">1</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> octal;\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "conversions\\binary_to_octal.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\binary_to_octal.c",
      "code": "<span class=\"hljs-comment\">// Binary number to octal number conversion</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">// Function that returns the last three digits</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">three_digits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> r, d = <span class=\"hljs-number\">0</span>, p = <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++)\r\n    {\r\n        r = n % <span class=\"hljs-number\">10</span>;\r\n        d += r * p;\r\n        p *= <span class=\"hljs-number\">10</span>;\r\n        n /= <span class=\"hljs-number\">10</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> d;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> binary_num, d = <span class=\"hljs-number\">0</span>, base = <span class=\"hljs-number\">1</span>, remainder, td, res = <span class=\"hljs-number\">0</span>, ord = <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the binary no: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;binary_num);\r\n\r\n    <span class=\"hljs-keyword\">while</span> (binary_num &gt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (binary_num &gt;\r\n            <span class=\"hljs-number\">111</span>)  <span class=\"hljs-comment\">// Checking if binary number is greater than three digits</span>\r\n            td = three_digits(binary_num);\r\n\r\n        <span class=\"hljs-keyword\">else</span>\r\n            td = binary_num;\r\n\r\n        binary_num /= <span class=\"hljs-number\">1000</span>;\r\n\r\n        d = <span class=\"hljs-number\">0</span>, base = <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-comment\">// Converting the last three digits to decimal</span>\r\n        <span class=\"hljs-keyword\">while</span> (td &gt; <span class=\"hljs-number\">0</span>)\r\n        {\r\n            remainder = td % <span class=\"hljs-number\">10</span>;\r\n            td /= <span class=\"hljs-number\">10</span>;\r\n            d += (base * remainder);\r\n            base *= <span class=\"hljs-number\">2</span>;\r\n        }\r\n\r\n        res += d * ord;  <span class=\"hljs-comment\">// Calculating the octal value</span>\r\n        ord *= <span class=\"hljs-number\">10</span>;\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nOctal equivalent is: %d&quot;</span>, res);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "conversions\\binary_to_octal.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions\\binary_to_octal.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-comment\">//Binary number to octal number conversion</span>\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  test(<span class=\"hljs-string\">&quot;binary_to_octal -1111&quot;</span>, () {\r\n    expect(binary_to_octal(<span class=\"hljs-string\">&quot;-1111&quot;</span>), equals(<span class=\"hljs-string\">&quot;-17&quot;</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;binary_to_octal 101011&quot;</span>, () {\r\n    expect(binary_to_octal(<span class=\"hljs-string\">&quot;101011&quot;</span>), equals(<span class=\"hljs-string\">&quot;53&quot;</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;binary_to_octal rasies error when number is invalid&quot;</span>, () {\r\n    expect(() =&gt; binary_to_octal(<span class=\"hljs-string\">&quot;-1011a01&quot;</span>), throwsFormatException);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;binary_to_octal of empty string raises error&quot;</span>, () {\r\n    expect(() =&gt; binary_to_octal(<span class=\"hljs-string\">&quot;&quot;</span>), throwsFormatException);\r\n  });\r\n}\r\n\r\n<span class=\"hljs-built_in\">String</span> binary_to_octal(<span class=\"hljs-built_in\">String</span> bin_string) {\r\n  bin_string = bin_string.trim();\r\n  <span class=\"hljs-keyword\">if</span> (bin_string == <span class=\"hljs-keyword\">null</span> || bin_string == <span class=\"hljs-string\">&quot;&quot;</span>) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An empty value was passed to the function&quot;</span>);\r\n  }\r\n  <span class=\"hljs-built_in\">bool</span> is_negative = bin_string[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;-&quot;</span>;\r\n  <span class=\"hljs-keyword\">if</span> (is_negative) bin_string = bin_string.substring(<span class=\"hljs-number\">1</span>);\r\n\r\n  <span class=\"hljs-built_in\">String</span> octal_val = <span class=\"hljs-string\">&quot;&quot;</span>;\r\n  <span class=\"hljs-built_in\">int</span> binary;\r\n  <span class=\"hljs-keyword\">try</span> {\r\n    binary = <span class=\"hljs-built_in\">int</span>.parse(bin_string);\r\n  } <span class=\"hljs-keyword\">catch</span> (e) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An invalid value was passed to the function&quot;</span>);\r\n  }\r\n  <span class=\"hljs-built_in\">int</span> curr_bit;\r\n  <span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-keyword\">while</span> (binary &gt; <span class=\"hljs-number\">0</span>) {\r\n    <span class=\"hljs-built_in\">int</span> code_3 = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) {\r\n      curr_bit = binary % <span class=\"hljs-number\">10</span>;\r\n      binary = binary ~/ <span class=\"hljs-number\">10</span>;\r\n      code_3 += curr_bit * j;\r\n      j *= <span class=\"hljs-number\">2</span>;\r\n    }\r\n    octal_val = code_3.toString() + octal_val;\r\n    j = <span class=\"hljs-number\">1</span>;\r\n  }\r\n  <span class=\"hljs-keyword\">if</span> (is_negative) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + octal_val;\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> octal_val;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "obelisk0114",
      "email": "obelisk0114@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Ruggieri",
      "email": "eric.ruggieri@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Vishnu",
      "email": "vishnupothan2@gmail.com",
      "commits": 3
    },
    {
      "name": "Vishnu P",
      "email": "36571320+VishnuPothan@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}