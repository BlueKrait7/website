{
  "slug": "feistel",
  "name": "Feistel",
  "categories": [
    "encoders"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Encoders/FeistelCipher.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Encoders\\FeistelCipher.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Text;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Encoders</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes using Feistel cipher.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     https://en.wikipedia.org/wiki/Feistel_cipher</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     In cryptography, a Feistel cipher (also known as Lubyâ€“Rackoff block cipher)</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     is a symmetric structure used in the construction of block ciphers,</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     named after the German-born physicist and cryptographer Horst Feistel</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     who did pioneering research while working for IBM (USA)</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A large proportion of block ciphers use the scheme, including the US DES,</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the Soviet/Russian GOST and the more recent Blowfish and Twofish ciphers.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FeistelCipher</span> : <span class=\"hljs-title\">IEncoder</span>&lt;<span class=\"hljs-title\">uint</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\">// number of rounds to transform data block, each round a new &quot;round&quot; key is generated.</span>\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> Rounds = <span class=\"hljs-number\">32</span>;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes text using specified key,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - text length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text to be encoded.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key that will be used to encode the text.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error: key should be more than 0x00001111 for better encoding, key=0 will throw DivideByZero exception.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Encoded text.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">uint</span> key</span>)</span>\r\n        {\r\n            List&lt;<span class=\"hljs-built_in\">ulong</span>&gt; blocksListPlain = SplitTextToBlocks(text);\r\n            StringBuilder encodedText = <span class=\"hljs-keyword\">new</span>();\r\n\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-built_in\">ulong</span> block <span class=\"hljs-keyword\">in</span> blocksListPlain)\r\n            {\r\n                <span class=\"hljs-built_in\">uint</span> temp = <span class=\"hljs-number\">0</span>;\r\n\r\n                <span class=\"hljs-comment\">// decompose a block to two subblocks 0x0123456789ABCDEF =&gt; 0x01234567 &amp; 0x89ABCDEF</span>\r\n                <span class=\"hljs-built_in\">uint</span> rightSubblock = (<span class=\"hljs-built_in\">uint</span>)(block &amp; <span class=\"hljs-number\">0x00000000FFFFFFFF</span>);\r\n                <span class=\"hljs-built_in\">uint</span> leftSubblock = (<span class=\"hljs-built_in\">uint</span>)(block &gt;&gt; <span class=\"hljs-number\">32</span>);\r\n\r\n                <span class=\"hljs-built_in\">uint</span> roundKey;\r\n\r\n                <span class=\"hljs-comment\">// Feistel &quot;network&quot; itself</span>\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> round = <span class=\"hljs-number\">0</span>; round &lt; Rounds; round++)\r\n                {\r\n                    roundKey = GetRoundKey(key, round);\r\n                    temp = rightSubblock ^ BlockModification(leftSubblock, roundKey);\r\n                    rightSubblock = leftSubblock;\r\n                    leftSubblock = temp;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// compile text string formating the block value to text (hex based), length of the output = 16 byte always</span>\r\n                <span class=\"hljs-built_in\">ulong</span> encodedBlock = leftSubblock;\r\n                encodedBlock = (encodedBlock &lt;&lt; <span class=\"hljs-number\">32</span>) | rightSubblock;\r\n                encodedText.Append(<span class=\"hljs-built_in\">string</span>.Format(<span class=\"hljs-string\">&quot;{0:X16}&quot;</span>, encodedBlock));\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> encodedText.ToString();\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Decodes text that was encoded using specified key.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text to be decoded.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key that was used to encode the text.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error: key should be more than 0x00001111 for better encoding, key=0 will throw DivideByZero exception.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error: The length of text should be divisible by 16 as it the block lenght is 16 bytes.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Decoded text.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">uint</span> key</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// The plain text will be padded to fill the size of block (16 bytes)</span>\r\n            <span class=\"hljs-keyword\">if</span> (text.Length % <span class=\"hljs-number\">16</span> != <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;The length of <span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(key)}</span> should be divisible by 16&quot;</span>);\r\n            }\r\n\r\n            List&lt;<span class=\"hljs-built_in\">ulong</span>&gt; blocksListEncoded = GetBlocksFromEncodedText(text);\r\n            StringBuilder decodedTextHex = <span class=\"hljs-keyword\">new</span>();\r\n\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-built_in\">ulong</span> block <span class=\"hljs-keyword\">in</span> blocksListEncoded)\r\n            {\r\n                <span class=\"hljs-built_in\">uint</span> temp = <span class=\"hljs-number\">0</span>;\r\n\r\n                <span class=\"hljs-comment\">// decompose a block to two subblocks 0x0123456789ABCDEF =&gt; 0x01234567 &amp; 0x89ABCDEF</span>\r\n                <span class=\"hljs-built_in\">uint</span> rightSubblock = (<span class=\"hljs-built_in\">uint</span>)(block &amp; <span class=\"hljs-number\">0x00000000FFFFFFFF</span>);\r\n                <span class=\"hljs-built_in\">uint</span> leftSubblock = (<span class=\"hljs-built_in\">uint</span>)(block &gt;&gt; <span class=\"hljs-number\">32</span>);\r\n\r\n                <span class=\"hljs-comment\">// Feistel &quot;network&quot; - decoding, the order of rounds and operations on the blocks is reverted</span>\r\n                <span class=\"hljs-built_in\">uint</span> roundKey;\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> round = Rounds - <span class=\"hljs-number\">1</span>; round &gt;= <span class=\"hljs-number\">0</span>; round--)\r\n                {\r\n                    roundKey = GetRoundKey(key, round);\r\n                    temp = leftSubblock ^ BlockModification(rightSubblock, roundKey);\r\n                    leftSubblock = rightSubblock;\r\n                    rightSubblock = temp;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// compose decoded block</span>\r\n                <span class=\"hljs-built_in\">ulong</span> decodedBlock = leftSubblock;\r\n                decodedBlock = (decodedBlock &lt;&lt; <span class=\"hljs-number\">32</span>) | rightSubblock;\r\n\r\n                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">8</span>; i++)\r\n                {\r\n                    <span class=\"hljs-built_in\">ulong</span> a = (decodedBlock &amp; <span class=\"hljs-number\">0xFF00000000000000</span>) &gt;&gt; <span class=\"hljs-number\">56</span>;\r\n\r\n                    <span class=\"hljs-comment\">// it&#x27;s a trick, the code works with non zero characters, if your text has ASCII code 0x00 it will be skipped.</span>\r\n                    <span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-number\">0</span>)\r\n                    {\r\n                        decodedTextHex.Append((<span class=\"hljs-built_in\">char</span>)a);\r\n                    }\r\n\r\n                    decodedBlock = decodedBlock &lt;&lt; <span class=\"hljs-number\">8</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> decodedTextHex.ToString();\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Using the size of block = 8 bytes this function splts the text and returns set of 8 bytes (ulong) blocks</span>\r\n        <span class=\"hljs-comment\">// the last block is extended up to 8 bytes if the tail of the text is smaller than 8 bytes</span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;<span class=\"hljs-built_in\">ulong</span>&gt; <span class=\"hljs-title\">SplitTextToBlocks</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span>\r\n        {\r\n            List&lt;<span class=\"hljs-built_in\">ulong</span>&gt; blocksListPlain = <span class=\"hljs-keyword\">new</span>();\r\n            <span class=\"hljs-built_in\">byte</span>[] textArray = Encoding.ASCII.GetBytes(text);\r\n            <span class=\"hljs-built_in\">int</span> offset = <span class=\"hljs-number\">8</span>;\r\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; text.Length; i += <span class=\"hljs-number\">8</span>)\r\n            {\r\n                <span class=\"hljs-comment\">// text not always has len%16 == 0, that&#x27;s why the offset should be adjusted for the last part of the text</span>\r\n                <span class=\"hljs-keyword\">if</span> (i &gt; text.Length - <span class=\"hljs-number\">8</span>)\r\n                {\r\n                    offset = text.Length - i;\r\n                }\r\n\r\n                <span class=\"hljs-built_in\">string</span> block = Convert.ToHexString(textArray, i, offset);\r\n                blocksListPlain.Add(Convert.ToUInt64(block, <span class=\"hljs-number\">16</span>));\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> blocksListPlain;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// convert the encoded text to the set of ulong values (blocks for decoding)</span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;<span class=\"hljs-built_in\">ulong</span>&gt; <span class=\"hljs-title\">GetBlocksFromEncodedText</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span>\r\n        {\r\n            List&lt;<span class=\"hljs-built_in\">ulong</span>&gt; blocksListPlain = <span class=\"hljs-keyword\">new</span>();\r\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; text.Length; i += <span class=\"hljs-number\">16</span>)\r\n            {\r\n                <span class=\"hljs-built_in\">ulong</span> block = Convert.ToUInt64(text.Substring(i, <span class=\"hljs-number\">16</span>), <span class=\"hljs-number\">16</span>);\r\n                blocksListPlain.Add(block);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> blocksListPlain;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// here might be any deterministic math formula</span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">uint</span> <span class=\"hljs-title\">BlockModification</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">uint</span> block, <span class=\"hljs-built_in\">uint</span> key</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">32</span>; i++)\r\n            {\r\n                <span class=\"hljs-comment\">// 0x55555555 for the better distribution 0 an 1 in the block</span>\r\n                block = ((block ^ <span class=\"hljs-number\">0x55555555</span>) * block) % key;\r\n                block = block ^ key;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> block;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// There are many ways to generate a round key, any deterministic math formula does work</span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">uint</span> <span class=\"hljs-title\">GetRoundKey</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">uint</span> key, <span class=\"hljs-built_in\">int</span> round</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// &quot;round + 2&quot; - to avoid a situation when pow(key,1) ^ key  = key ^ key = 0</span>\r\n            <span class=\"hljs-built_in\">uint</span> a = (<span class=\"hljs-built_in\">uint</span>)Math.Pow((<span class=\"hljs-built_in\">double</span>)key, round + <span class=\"hljs-number\">2</span>);\r\n            <span class=\"hljs-keyword\">return</span> a ^ key;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}