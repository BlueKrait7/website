{
  "slug": "directed-and-undirected-weighted-graph",
  "name": "Directed and Undirected (Weighted) Graph",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\directed_and_undirected_(weighted)_graph.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\directed_and_undirected_(weighted)_graph.py",
      "code": "<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> deque\r\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> floor\r\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> random\r\n<span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> time\r\n\r\n<span class=\"hljs-comment\"># the default weight is 1 if not assigned but all the implementation is weighted</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DirectedGraph</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\r\n        self.graph = {}\r\n\r\n    <span class=\"hljs-comment\"># adding vertices and edges</span>\r\n    <span class=\"hljs-comment\"># adding the weight is optional</span>\r\n    <span class=\"hljs-comment\"># handles repetition</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_pair</span>(<span class=\"hljs-params\">self, u, v, w=<span class=\"hljs-number\">1</span></span>):\r\n        <span class=\"hljs-keyword\">if</span> self.graph.get(u):\r\n            <span class=\"hljs-keyword\">if</span> self.graph[u].count([w, v]) == <span class=\"hljs-number\">0</span>:\r\n                self.graph[u].append([w, v])\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.graph[u] = [[w, v]]\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.graph.get(v):\r\n            self.graph[v] = []\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">all_nodes</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(self.graph)\r\n\r\n    <span class=\"hljs-comment\"># handles if the input does not exist</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove_pair</span>(<span class=\"hljs-params\">self, u, v</span>):\r\n        <span class=\"hljs-keyword\">if</span> self.graph.get(u):\r\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> self.graph[u]:\r\n                <span class=\"hljs-keyword\">if</span> _[<span class=\"hljs-number\">1</span>] == v:\r\n                    self.graph[u].remove(_)\r\n\r\n    <span class=\"hljs-comment\"># if no destination is meant the default value is -1</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">self, s=-<span class=\"hljs-number\">2</span>, d=-<span class=\"hljs-number\">1</span></span>):\r\n        <span class=\"hljs-keyword\">if</span> s == d:\r\n            <span class=\"hljs-keyword\">return</span> []\r\n        stack = []\r\n        visited = []\r\n        <span class=\"hljs-keyword\">if</span> s == -<span class=\"hljs-number\">2</span>:\r\n            s = <span class=\"hljs-built_in\">list</span>(self.graph)[<span class=\"hljs-number\">0</span>]\r\n        stack.append(s)\r\n        visited.append(s)\r\n        ss = s\r\n\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            <span class=\"hljs-comment\"># check if there is any non isolated nodes</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.graph[s]) != <span class=\"hljs-number\">0</span>:\r\n                ss = s\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.graph[s]:\r\n                    <span class=\"hljs-keyword\">if</span> visited.count(node[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">1</span>:\r\n                        <span class=\"hljs-keyword\">if</span> node[<span class=\"hljs-number\">1</span>] == d:\r\n                            visited.append(d)\r\n                            <span class=\"hljs-keyword\">return</span> visited\r\n                        <span class=\"hljs-keyword\">else</span>:\r\n                            stack.append(node[<span class=\"hljs-number\">1</span>])\r\n                            visited.append(node[<span class=\"hljs-number\">1</span>])\r\n                            ss = node[<span class=\"hljs-number\">1</span>]\r\n                            <span class=\"hljs-keyword\">break</span>\r\n\r\n            <span class=\"hljs-comment\"># check if all the children are visited</span>\r\n            <span class=\"hljs-keyword\">if</span> s == ss:\r\n                stack.pop()\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) != <span class=\"hljs-number\">0</span>:\r\n                    s = stack[<span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                s = ss\r\n\r\n            <span class=\"hljs-comment\"># check if se have reached the starting point</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) == <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">return</span> visited\r\n\r\n    <span class=\"hljs-comment\"># c is the count of nodes you want and if you leave it or pass -1 to the function</span>\r\n    <span class=\"hljs-comment\"># the count will be random from 10 to 10000</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fill_graph_randomly</span>(<span class=\"hljs-params\">self, c=-<span class=\"hljs-number\">1</span></span>):\r\n        <span class=\"hljs-keyword\">if</span> c == -<span class=\"hljs-number\">1</span>:\r\n            c = floor(random() * <span class=\"hljs-number\">10000</span>) + <span class=\"hljs-number\">10</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(c):\r\n            <span class=\"hljs-comment\"># every vertex has max 100 edges</span>\r\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(floor(random() * <span class=\"hljs-number\">102</span>) + <span class=\"hljs-number\">1</span>):\r\n                n = floor(random() * c) + <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">if</span> n != i:\r\n                    self.add_pair(i, n, <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bfs</span>(<span class=\"hljs-params\">self, s=-<span class=\"hljs-number\">2</span></span>):\r\n        d = deque()\r\n        visited = []\r\n        <span class=\"hljs-keyword\">if</span> s == -<span class=\"hljs-number\">2</span>:\r\n            s = <span class=\"hljs-built_in\">list</span>(self.graph)[<span class=\"hljs-number\">0</span>]\r\n        d.append(s)\r\n        visited.append(s)\r\n        <span class=\"hljs-keyword\">while</span> d:\r\n            s = d.popleft()\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.graph[s]) != <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.graph[s]:\r\n                    <span class=\"hljs-keyword\">if</span> visited.count(node[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">1</span>:\r\n                        d.append(node[<span class=\"hljs-number\">1</span>])\r\n                        visited.append(node[<span class=\"hljs-number\">1</span>])\r\n        <span class=\"hljs-keyword\">return</span> visited\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">in_degree</span>(<span class=\"hljs-params\">self, u</span>):\r\n        count = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> self.graph:\r\n            <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> self.graph[x]:\r\n                <span class=\"hljs-keyword\">if</span> y[<span class=\"hljs-number\">1</span>] == u:\r\n                    count += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> count\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">out_degree</span>(<span class=\"hljs-params\">self, u</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.graph[u])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">topological_sort</span>(<span class=\"hljs-params\">self, s=-<span class=\"hljs-number\">2</span></span>):\r\n        stack = []\r\n        visited = []\r\n        <span class=\"hljs-keyword\">if</span> s == -<span class=\"hljs-number\">2</span>:\r\n            s = <span class=\"hljs-built_in\">list</span>(self.graph)[<span class=\"hljs-number\">0</span>]\r\n        stack.append(s)\r\n        visited.append(s)\r\n        ss = s\r\n        sorted_nodes = []\r\n\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            <span class=\"hljs-comment\"># check if there is any non isolated nodes</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.graph[s]) != <span class=\"hljs-number\">0</span>:\r\n                ss = s\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.graph[s]:\r\n                    <span class=\"hljs-keyword\">if</span> visited.count(node[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">1</span>:\r\n                        stack.append(node[<span class=\"hljs-number\">1</span>])\r\n                        visited.append(node[<span class=\"hljs-number\">1</span>])\r\n                        ss = node[<span class=\"hljs-number\">1</span>]\r\n                        <span class=\"hljs-keyword\">break</span>\r\n\r\n            <span class=\"hljs-comment\"># check if all the children are visited</span>\r\n            <span class=\"hljs-keyword\">if</span> s == ss:\r\n                sorted_nodes.append(stack.pop())\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) != <span class=\"hljs-number\">0</span>:\r\n                    s = stack[<span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                s = ss\r\n\r\n            <span class=\"hljs-comment\"># check if se have reached the starting point</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) == <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">return</span> sorted_nodes\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cycle_nodes</span>(<span class=\"hljs-params\">self</span>):\r\n        stack = []\r\n        visited = []\r\n        s = <span class=\"hljs-built_in\">list</span>(self.graph)[<span class=\"hljs-number\">0</span>]\r\n        stack.append(s)\r\n        visited.append(s)\r\n        parent = -<span class=\"hljs-number\">2</span>\r\n        indirect_parents = []\r\n        ss = s\r\n        on_the_way_back = <span class=\"hljs-literal\">False</span>\r\n        anticipating_nodes = <span class=\"hljs-built_in\">set</span>()\r\n\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            <span class=\"hljs-comment\"># check if there is any non isolated nodes</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.graph[s]) != <span class=\"hljs-number\">0</span>:\r\n                ss = s\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.graph[s]:\r\n                    <span class=\"hljs-keyword\">if</span> (\r\n                        visited.count(node[<span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>\r\n                        <span class=\"hljs-keyword\">and</span> node[<span class=\"hljs-number\">1</span>] != parent\r\n                        <span class=\"hljs-keyword\">and</span> indirect_parents.count(node[<span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>\r\n                        <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> on_the_way_back\r\n                    ):\r\n                        len_stack = <span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>\r\n                        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">and</span> len_stack &gt;= <span class=\"hljs-number\">0</span>:\r\n                            <span class=\"hljs-keyword\">if</span> stack[len_stack] == node[<span class=\"hljs-number\">1</span>]:\r\n                                anticipating_nodes.add(node[<span class=\"hljs-number\">1</span>])\r\n                                <span class=\"hljs-keyword\">break</span>\r\n                            <span class=\"hljs-keyword\">else</span>:\r\n                                anticipating_nodes.add(stack[len_stack])\r\n                                len_stack -= <span class=\"hljs-number\">1</span>\r\n                    <span class=\"hljs-keyword\">if</span> visited.count(node[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">1</span>:\r\n                        stack.append(node[<span class=\"hljs-number\">1</span>])\r\n                        visited.append(node[<span class=\"hljs-number\">1</span>])\r\n                        ss = node[<span class=\"hljs-number\">1</span>]\r\n                        <span class=\"hljs-keyword\">break</span>\r\n\r\n            <span class=\"hljs-comment\"># check if all the children are visited</span>\r\n            <span class=\"hljs-keyword\">if</span> s == ss:\r\n                stack.pop()\r\n                on_the_way_back = <span class=\"hljs-literal\">True</span>\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) != <span class=\"hljs-number\">0</span>:\r\n                    s = stack[<span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                on_the_way_back = <span class=\"hljs-literal\">False</span>\r\n                indirect_parents.append(parent)\r\n                parent = s\r\n                s = ss\r\n\r\n            <span class=\"hljs-comment\"># check if se have reached the starting point</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) == <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(anticipating_nodes)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">has_cycle</span>(<span class=\"hljs-params\">self</span>):\r\n        stack = []\r\n        visited = []\r\n        s = <span class=\"hljs-built_in\">list</span>(self.graph)[<span class=\"hljs-number\">0</span>]\r\n        stack.append(s)\r\n        visited.append(s)\r\n        parent = -<span class=\"hljs-number\">2</span>\r\n        indirect_parents = []\r\n        ss = s\r\n        on_the_way_back = <span class=\"hljs-literal\">False</span>\r\n        anticipating_nodes = <span class=\"hljs-built_in\">set</span>()\r\n\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            <span class=\"hljs-comment\"># check if there is any non isolated nodes</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.graph[s]) != <span class=\"hljs-number\">0</span>:\r\n                ss = s\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.graph[s]:\r\n                    <span class=\"hljs-keyword\">if</span> (\r\n                        visited.count(node[<span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>\r\n                        <span class=\"hljs-keyword\">and</span> node[<span class=\"hljs-number\">1</span>] != parent\r\n                        <span class=\"hljs-keyword\">and</span> indirect_parents.count(node[<span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>\r\n                        <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> on_the_way_back\r\n                    ):\r\n                        len_stack_minus_one = <span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>\r\n                        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">and</span> len_stack_minus_one &gt;= <span class=\"hljs-number\">0</span>:\r\n                            <span class=\"hljs-keyword\">if</span> stack[len_stack_minus_one] == node[<span class=\"hljs-number\">1</span>]:\r\n                                anticipating_nodes.add(node[<span class=\"hljs-number\">1</span>])\r\n                                <span class=\"hljs-keyword\">break</span>\r\n                            <span class=\"hljs-keyword\">else</span>:\r\n                                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n                                <span class=\"hljs-comment\"># <span class=\"hljs-doctag\">TODO:</span>The following code is unreachable.</span>\r\n                                anticipating_nodes.add(stack[len_stack_minus_one])\r\n                                len_stack_minus_one -= <span class=\"hljs-number\">1</span>\r\n                    <span class=\"hljs-keyword\">if</span> visited.count(node[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">1</span>:\r\n                        stack.append(node[<span class=\"hljs-number\">1</span>])\r\n                        visited.append(node[<span class=\"hljs-number\">1</span>])\r\n                        ss = node[<span class=\"hljs-number\">1</span>]\r\n                        <span class=\"hljs-keyword\">break</span>\r\n\r\n            <span class=\"hljs-comment\"># check if all the children are visited</span>\r\n            <span class=\"hljs-keyword\">if</span> s == ss:\r\n                stack.pop()\r\n                on_the_way_back = <span class=\"hljs-literal\">True</span>\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) != <span class=\"hljs-number\">0</span>:\r\n                    s = stack[<span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                on_the_way_back = <span class=\"hljs-literal\">False</span>\r\n                indirect_parents.append(parent)\r\n                parent = s\r\n                s = ss\r\n\r\n            <span class=\"hljs-comment\"># check if se have reached the starting point</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) == <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs_time</span>(<span class=\"hljs-params\">self, s=-<span class=\"hljs-number\">2</span>, e=-<span class=\"hljs-number\">1</span></span>):\r\n        begin = time()\r\n        self.dfs(s, e)\r\n        end = time()\r\n        <span class=\"hljs-keyword\">return</span> end - begin\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bfs_time</span>(<span class=\"hljs-params\">self, s=-<span class=\"hljs-number\">2</span></span>):\r\n        begin = time()\r\n        self.bfs(s)\r\n        end = time()\r\n        <span class=\"hljs-keyword\">return</span> end - begin\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\r\n        self.graph = {}\r\n\r\n    <span class=\"hljs-comment\"># adding vertices and edges</span>\r\n    <span class=\"hljs-comment\"># adding the weight is optional</span>\r\n    <span class=\"hljs-comment\"># handles repetition</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_pair</span>(<span class=\"hljs-params\">self, u, v, w=<span class=\"hljs-number\">1</span></span>):\r\n        <span class=\"hljs-comment\"># check if the u exists</span>\r\n        <span class=\"hljs-keyword\">if</span> self.graph.get(u):\r\n            <span class=\"hljs-comment\"># if there already is a edge</span>\r\n            <span class=\"hljs-keyword\">if</span> self.graph[u].count([w, v]) == <span class=\"hljs-number\">0</span>:\r\n                self.graph[u].append([w, v])\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-comment\"># if u does not exist</span>\r\n            self.graph[u] = [[w, v]]\r\n        <span class=\"hljs-comment\"># add the other way</span>\r\n        <span class=\"hljs-keyword\">if</span> self.graph.get(v):\r\n            <span class=\"hljs-comment\"># if there already is a edge</span>\r\n            <span class=\"hljs-keyword\">if</span> self.graph[v].count([w, u]) == <span class=\"hljs-number\">0</span>:\r\n                self.graph[v].append([w, u])\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-comment\"># if u does not exist</span>\r\n            self.graph[v] = [[w, u]]\r\n\r\n    <span class=\"hljs-comment\"># handles if the input does not exist</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove_pair</span>(<span class=\"hljs-params\">self, u, v</span>):\r\n        <span class=\"hljs-keyword\">if</span> self.graph.get(u):\r\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> self.graph[u]:\r\n                <span class=\"hljs-keyword\">if</span> _[<span class=\"hljs-number\">1</span>] == v:\r\n                    self.graph[u].remove(_)\r\n        <span class=\"hljs-comment\"># the other way round</span>\r\n        <span class=\"hljs-keyword\">if</span> self.graph.get(v):\r\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> self.graph[v]:\r\n                <span class=\"hljs-keyword\">if</span> _[<span class=\"hljs-number\">1</span>] == u:\r\n                    self.graph[v].remove(_)\r\n\r\n    <span class=\"hljs-comment\"># if no destination is meant the default value is -1</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">self, s=-<span class=\"hljs-number\">2</span>, d=-<span class=\"hljs-number\">1</span></span>):\r\n        <span class=\"hljs-keyword\">if</span> s == d:\r\n            <span class=\"hljs-keyword\">return</span> []\r\n        stack = []\r\n        visited = []\r\n        <span class=\"hljs-keyword\">if</span> s == -<span class=\"hljs-number\">2</span>:\r\n            s = <span class=\"hljs-built_in\">list</span>(self.graph)[<span class=\"hljs-number\">0</span>]\r\n        stack.append(s)\r\n        visited.append(s)\r\n        ss = s\r\n\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            <span class=\"hljs-comment\"># check if there is any non isolated nodes</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.graph[s]) != <span class=\"hljs-number\">0</span>:\r\n                ss = s\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.graph[s]:\r\n                    <span class=\"hljs-keyword\">if</span> visited.count(node[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">1</span>:\r\n                        <span class=\"hljs-keyword\">if</span> node[<span class=\"hljs-number\">1</span>] == d:\r\n                            visited.append(d)\r\n                            <span class=\"hljs-keyword\">return</span> visited\r\n                        <span class=\"hljs-keyword\">else</span>:\r\n                            stack.append(node[<span class=\"hljs-number\">1</span>])\r\n                            visited.append(node[<span class=\"hljs-number\">1</span>])\r\n                            ss = node[<span class=\"hljs-number\">1</span>]\r\n                            <span class=\"hljs-keyword\">break</span>\r\n\r\n            <span class=\"hljs-comment\"># check if all the children are visited</span>\r\n            <span class=\"hljs-keyword\">if</span> s == ss:\r\n                stack.pop()\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) != <span class=\"hljs-number\">0</span>:\r\n                    s = stack[<span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                s = ss\r\n\r\n            <span class=\"hljs-comment\"># check if se have reached the starting point</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) == <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">return</span> visited\r\n\r\n    <span class=\"hljs-comment\"># c is the count of nodes you want and if you leave it or pass -1 to the function</span>\r\n    <span class=\"hljs-comment\"># the count will be random from 10 to 10000</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fill_graph_randomly</span>(<span class=\"hljs-params\">self, c=-<span class=\"hljs-number\">1</span></span>):\r\n        <span class=\"hljs-keyword\">if</span> c == -<span class=\"hljs-number\">1</span>:\r\n            c = floor(random() * <span class=\"hljs-number\">10000</span>) + <span class=\"hljs-number\">10</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(c):\r\n            <span class=\"hljs-comment\"># every vertex has max 100 edges</span>\r\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(floor(random() * <span class=\"hljs-number\">102</span>) + <span class=\"hljs-number\">1</span>):\r\n                n = floor(random() * c) + <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">if</span> n != i:\r\n                    self.add_pair(i, n, <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bfs</span>(<span class=\"hljs-params\">self, s=-<span class=\"hljs-number\">2</span></span>):\r\n        d = deque()\r\n        visited = []\r\n        <span class=\"hljs-keyword\">if</span> s == -<span class=\"hljs-number\">2</span>:\r\n            s = <span class=\"hljs-built_in\">list</span>(self.graph)[<span class=\"hljs-number\">0</span>]\r\n        d.append(s)\r\n        visited.append(s)\r\n        <span class=\"hljs-keyword\">while</span> d:\r\n            s = d.popleft()\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.graph[s]) != <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.graph[s]:\r\n                    <span class=\"hljs-keyword\">if</span> visited.count(node[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">1</span>:\r\n                        d.append(node[<span class=\"hljs-number\">1</span>])\r\n                        visited.append(node[<span class=\"hljs-number\">1</span>])\r\n        <span class=\"hljs-keyword\">return</span> visited\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">degree</span>(<span class=\"hljs-params\">self, u</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.graph[u])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cycle_nodes</span>(<span class=\"hljs-params\">self</span>):\r\n        stack = []\r\n        visited = []\r\n        s = <span class=\"hljs-built_in\">list</span>(self.graph)[<span class=\"hljs-number\">0</span>]\r\n        stack.append(s)\r\n        visited.append(s)\r\n        parent = -<span class=\"hljs-number\">2</span>\r\n        indirect_parents = []\r\n        ss = s\r\n        on_the_way_back = <span class=\"hljs-literal\">False</span>\r\n        anticipating_nodes = <span class=\"hljs-built_in\">set</span>()\r\n\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            <span class=\"hljs-comment\"># check if there is any non isolated nodes</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.graph[s]) != <span class=\"hljs-number\">0</span>:\r\n                ss = s\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.graph[s]:\r\n                    <span class=\"hljs-keyword\">if</span> (\r\n                        visited.count(node[<span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>\r\n                        <span class=\"hljs-keyword\">and</span> node[<span class=\"hljs-number\">1</span>] != parent\r\n                        <span class=\"hljs-keyword\">and</span> indirect_parents.count(node[<span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>\r\n                        <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> on_the_way_back\r\n                    ):\r\n                        len_stack = <span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>\r\n                        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">and</span> len_stack &gt;= <span class=\"hljs-number\">0</span>:\r\n                            <span class=\"hljs-keyword\">if</span> stack[len_stack] == node[<span class=\"hljs-number\">1</span>]:\r\n                                anticipating_nodes.add(node[<span class=\"hljs-number\">1</span>])\r\n                                <span class=\"hljs-keyword\">break</span>\r\n                            <span class=\"hljs-keyword\">else</span>:\r\n                                anticipating_nodes.add(stack[len_stack])\r\n                                len_stack -= <span class=\"hljs-number\">1</span>\r\n                    <span class=\"hljs-keyword\">if</span> visited.count(node[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">1</span>:\r\n                        stack.append(node[<span class=\"hljs-number\">1</span>])\r\n                        visited.append(node[<span class=\"hljs-number\">1</span>])\r\n                        ss = node[<span class=\"hljs-number\">1</span>]\r\n                        <span class=\"hljs-keyword\">break</span>\r\n\r\n            <span class=\"hljs-comment\"># check if all the children are visited</span>\r\n            <span class=\"hljs-keyword\">if</span> s == ss:\r\n                stack.pop()\r\n                on_the_way_back = <span class=\"hljs-literal\">True</span>\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) != <span class=\"hljs-number\">0</span>:\r\n                    s = stack[<span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                on_the_way_back = <span class=\"hljs-literal\">False</span>\r\n                indirect_parents.append(parent)\r\n                parent = s\r\n                s = ss\r\n\r\n            <span class=\"hljs-comment\"># check if se have reached the starting point</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) == <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(anticipating_nodes)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">has_cycle</span>(<span class=\"hljs-params\">self</span>):\r\n        stack = []\r\n        visited = []\r\n        s = <span class=\"hljs-built_in\">list</span>(self.graph)[<span class=\"hljs-number\">0</span>]\r\n        stack.append(s)\r\n        visited.append(s)\r\n        parent = -<span class=\"hljs-number\">2</span>\r\n        indirect_parents = []\r\n        ss = s\r\n        on_the_way_back = <span class=\"hljs-literal\">False</span>\r\n        anticipating_nodes = <span class=\"hljs-built_in\">set</span>()\r\n\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            <span class=\"hljs-comment\"># check if there is any non isolated nodes</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.graph[s]) != <span class=\"hljs-number\">0</span>:\r\n                ss = s\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.graph[s]:\r\n                    <span class=\"hljs-keyword\">if</span> (\r\n                        visited.count(node[<span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>\r\n                        <span class=\"hljs-keyword\">and</span> node[<span class=\"hljs-number\">1</span>] != parent\r\n                        <span class=\"hljs-keyword\">and</span> indirect_parents.count(node[<span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>\r\n                        <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> on_the_way_back\r\n                    ):\r\n                        len_stack_minus_one = <span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>\r\n                        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">and</span> len_stack_minus_one &gt;= <span class=\"hljs-number\">0</span>:\r\n                            <span class=\"hljs-keyword\">if</span> stack[len_stack_minus_one] == node[<span class=\"hljs-number\">1</span>]:\r\n                                anticipating_nodes.add(node[<span class=\"hljs-number\">1</span>])\r\n                                <span class=\"hljs-keyword\">break</span>\r\n                            <span class=\"hljs-keyword\">else</span>:\r\n                                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n                                <span class=\"hljs-comment\"># <span class=\"hljs-doctag\">TODO:</span> the following code is unreachable</span>\r\n                                <span class=\"hljs-comment\"># is this meant to be called in the else ?</span>\r\n                                anticipating_nodes.add(stack[len_stack_minus_one])\r\n                                len_stack_minus_one -= <span class=\"hljs-number\">1</span>\r\n                    <span class=\"hljs-keyword\">if</span> visited.count(node[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">1</span>:\r\n                        stack.append(node[<span class=\"hljs-number\">1</span>])\r\n                        visited.append(node[<span class=\"hljs-number\">1</span>])\r\n                        ss = node[<span class=\"hljs-number\">1</span>]\r\n                        <span class=\"hljs-keyword\">break</span>\r\n\r\n            <span class=\"hljs-comment\"># check if all the children are visited</span>\r\n            <span class=\"hljs-keyword\">if</span> s == ss:\r\n                stack.pop()\r\n                on_the_way_back = <span class=\"hljs-literal\">True</span>\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) != <span class=\"hljs-number\">0</span>:\r\n                    s = stack[<span class=\"hljs-built_in\">len</span>(stack) - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                on_the_way_back = <span class=\"hljs-literal\">False</span>\r\n                indirect_parents.append(parent)\r\n                parent = s\r\n                s = ss\r\n\r\n            <span class=\"hljs-comment\"># check if se have reached the starting point</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(stack) == <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">all_nodes</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(self.graph)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs_time</span>(<span class=\"hljs-params\">self, s=-<span class=\"hljs-number\">2</span>, e=-<span class=\"hljs-number\">1</span></span>):\r\n        begin = time()\r\n        self.dfs(s, e)\r\n        end = time()\r\n        <span class=\"hljs-keyword\">return</span> end - begin\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bfs_time</span>(<span class=\"hljs-params\">self, s=-<span class=\"hljs-number\">2</span></span>):\r\n        begin = time()\r\n        self.bfs(s)\r\n        end = time()\r\n        <span class=\"hljs-keyword\">return</span> end - begin\r\n"
    }
  },
  "contributors": [
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 1
    },
    {
      "name": "Hasenn",
      "email": "eliottarloveyrier@live.fr",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Safari",
      "email": "alisafariem@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}