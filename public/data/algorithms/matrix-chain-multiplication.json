{
  "slug": "matrix-chain-multiplication",
  "name": "Matrix Chain Multiplication",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming\\matrix_chain_multiplication.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\matrix_chain_multiplication.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 10</span>\r\n\r\n<span class=\"hljs-comment\">// dp table to store the solution for already computed sub problems</span>\r\n<span class=\"hljs-type\">int</span> dp[MAX][MAX];\r\n\r\n<span class=\"hljs-comment\">// Function to find the most efficient way to multiply the given sequence of</span>\r\n<span class=\"hljs-comment\">// matrices</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">MatrixChainMultiplication</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> dim[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> </span>{\r\n    <span class=\"hljs-comment\">// base case: one matrix</span>\r\n    <span class=\"hljs-keyword\">if</span> (j &lt;= i + <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// stores minimum number of scalar multiplications (i.e., cost)</span>\r\n    <span class=\"hljs-comment\">// needed to compute the matrix M[i+1]...M[j] = M[i..j]</span>\r\n    <span class=\"hljs-type\">int</span> min = INT_MAX;\r\n\r\n    <span class=\"hljs-comment\">// if dp[i][j] is not calculated (calculate it!!)</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (dp[i][j] == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-comment\">// take the minimum over each possible position at which the</span>\r\n        <span class=\"hljs-comment\">// sequence of matrices can be split</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = i + <span class=\"hljs-number\">1</span>; k &lt;= j - <span class=\"hljs-number\">1</span>; k++) {\r\n            <span class=\"hljs-comment\">// recur for M[i+1]..M[k] to get a i x k matrix</span>\r\n            <span class=\"hljs-type\">int</span> cost = <span class=\"hljs-built_in\">MatrixChainMultiplication</span>(dim, i, k);\r\n\r\n            <span class=\"hljs-comment\">// recur for M[k+1]..M[j] to get a k x j matrix</span>\r\n            cost += <span class=\"hljs-built_in\">MatrixChainMultiplication</span>(dim, k, j);\r\n\r\n            <span class=\"hljs-comment\">// cost to multiply two (i x k) and (k x j) matrix</span>\r\n            cost += dim[i] * dim[k] * dim[j];\r\n\r\n            <span class=\"hljs-keyword\">if</span> (cost &lt; min)\r\n                min = cost;  <span class=\"hljs-comment\">// store the minimum cost</span>\r\n        }\r\n        dp[i][j] = min;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// return min cost to multiply M[j+1]..M[j]</span>\r\n    <span class=\"hljs-keyword\">return</span> dp[i][j];\r\n}\r\n\r\n<span class=\"hljs-comment\">// main function</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Matrix i has Dimensions dim[i-1] &amp; dim[i] for i=1..n</span>\r\n    <span class=\"hljs-comment\">// input is 10 x 30 matrix, 30 x 5 matrix, 5 x 60 matrix</span>\r\n    <span class=\"hljs-type\">int</span> dim[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">60</span>};\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(dim) / <span class=\"hljs-built_in\">sizeof</span>(dim[<span class=\"hljs-number\">0</span>]);\r\n\r\n    <span class=\"hljs-comment\">// Function Calling: MatrixChainMultiplications(dimensions_array, starting,</span>\r\n    <span class=\"hljs-comment\">// ending);</span>\r\n\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Minimum cost is &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">MatrixChainMultiplication</span>(dim, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>)\r\n         &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\MatrixChainMultiplication.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\MatrixChainMultiplication.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MatrixChainMultiplication</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ArrayList&lt;Matrix&gt; mArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> size;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] m;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] s;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] p;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\r\n            String[] mSize = input(<span class=\"hljs-string\">&quot;input size of matrix A(&quot;</span> + count + <span class=\"hljs-string\">&quot;) ( ex. 10 20 ) : &quot;</span>);\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">col</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(mSize[<span class=\"hljs-number\">0</span>]);\r\n            <span class=\"hljs-keyword\">if</span> (col == <span class=\"hljs-number\">0</span>) {\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            }\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(mSize[<span class=\"hljs-number\">1</span>]);\r\n\r\n            <span class=\"hljs-type\">Matrix</span> <span class=\"hljs-variable\">matrix</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Matrix</span>(count, col, row);\r\n            mArray.add(matrix);\r\n            count++;\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (Matrix m : mArray) {\r\n            System.out.format(<span class=\"hljs-string\">&quot;A(%d)  =  %2d  x  %2d%n&quot;</span>, m.count(), m.col(), m.row());\r\n        }\r\n\r\n        size = mArray.size();\r\n        m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size + <span class=\"hljs-number\">1</span>][size + <span class=\"hljs-number\">1</span>];\r\n        s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size + <span class=\"hljs-number\">1</span>][size + <span class=\"hljs-number\">1</span>];\r\n        p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size + <span class=\"hljs-number\">1</span>];\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size + <span class=\"hljs-number\">1</span>; i++) {\r\n            Arrays.fill(m[i], -<span class=\"hljs-number\">1</span>);\r\n            Arrays.fill(s[i], -<span class=\"hljs-number\">1</span>);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; p.length; i++) {\r\n            p[i] = i == <span class=\"hljs-number\">0</span> ? mArray.get(i).col() : mArray.get(i - <span class=\"hljs-number\">1</span>).row();\r\n        }\r\n\r\n        matrixChainOrder();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n            System.out.print(<span class=\"hljs-string\">&quot;-------&quot;</span>);\r\n        }\r\n        System.out.println();\r\n        printArray(m);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n            System.out.print(<span class=\"hljs-string\">&quot;-------&quot;</span>);\r\n        }\r\n        System.out.println();\r\n        printArray(s);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n            System.out.print(<span class=\"hljs-string\">&quot;-------&quot;</span>);\r\n        }\r\n        System.out.println();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Optimal solution : &quot;</span> + m[<span class=\"hljs-number\">1</span>][size]);\r\n        System.out.print(<span class=\"hljs-string\">&quot;Optimal parens : &quot;</span>);\r\n        printOptimalParens(<span class=\"hljs-number\">1</span>, size);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printOptimalParens</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (i == j) {\r\n            System.out.print(<span class=\"hljs-string\">&quot;A&quot;</span> + i);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            System.out.print(<span class=\"hljs-string\">&quot;(&quot;</span>);\r\n            printOptimalParens(i, s[i][j]);\r\n            printOptimalParens(s[i][j] + <span class=\"hljs-number\">1</span>, j);\r\n            System.out.print(<span class=\"hljs-string\">&quot;)&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] array)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; size + <span class=\"hljs-number\">1</span>; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; size + <span class=\"hljs-number\">1</span>; j++) {\r\n                System.out.print(String.format(<span class=\"hljs-string\">&quot;%7d&quot;</span>, array[i][j]));\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">matrixChainOrder</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; size + <span class=\"hljs-number\">1</span>; i++) {\r\n            m[i][i] = <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; l &lt; size + <span class=\"hljs-number\">1</span>; l++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; size - l + <span class=\"hljs-number\">2</span>; i++) {\r\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i + l - <span class=\"hljs-number\">1</span>;\r\n                m[i][j] = Integer.MAX_VALUE;\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> i; k &lt; j; k++) {\r\n                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> m[i][k] + m[k + <span class=\"hljs-number\">1</span>][j] + p[i - <span class=\"hljs-number\">1</span>] * p[k] * p[j];\r\n                    <span class=\"hljs-keyword\">if</span> (q &lt; m[i][j]) {\r\n                        m[i][j] = q;\r\n                        s[i][j] = k;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String[] input(String string) {\r\n        System.out.print(string);\r\n        <span class=\"hljs-keyword\">return</span> (scan.nextLine().split(<span class=\"hljs-string\">&quot; &quot;</span>));\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Matrix</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> count;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> col;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> row;\r\n\r\n    Matrix(<span class=\"hljs-type\">int</span> count, <span class=\"hljs-type\">int</span> col, <span class=\"hljs-type\">int</span> row) {\r\n        <span class=\"hljs-built_in\">this</span>.count = count;\r\n        <span class=\"hljs-built_in\">this</span>.col = col;\r\n        <span class=\"hljs-built_in\">this</span>.row = row;\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> count;\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">col</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> col;\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">row</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> row;\r\n    }\r\n}\r\n"
    },
    "kotlin": {
      "dir": "src\\main\\kotlin\\dynamicProgramming\\MatrixChainMultiplication.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src\\main\\kotlin\\dynamicProgramming\\MatrixChainMultiplication.kt",
      "code": "<span class=\"hljs-keyword\">package</span> dynamicProgramming\r\n\r\n<span class=\"hljs-comment\">/*\r\n * This is a dynamic programming implementation of matrix chain multiplication.\r\n * @Params p- array which represents the chain of matrices such that the ith matrix Ai is of dimension p[i-1] x p[i]\r\n * @Return minimum number of multiplications needed to multiply the chain\r\n * */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">MatrixChainOrder</span><span class=\"hljs-params\">(p: <span class=\"hljs-type\">IntArray</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\r\n\r\n    <span class=\"hljs-keyword\">val</span> m = Array(p.size) { IntArray(p.size) }\r\n    <span class=\"hljs-keyword\">var</span> i: <span class=\"hljs-built_in\">Int</span>\r\n    <span class=\"hljs-keyword\">var</span> j: <span class=\"hljs-built_in\">Int</span>\r\n    <span class=\"hljs-keyword\">var</span> k: <span class=\"hljs-built_in\">Int</span>\r\n    <span class=\"hljs-keyword\">var</span> L: <span class=\"hljs-built_in\">Int</span>\r\n    <span class=\"hljs-keyword\">var</span> q: <span class=\"hljs-built_in\">Int</span>\r\n\r\n    i = <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">while</span> (i &lt; p.size) {\r\n        m[i][i] = <span class=\"hljs-number\">0</span>\r\n        i++\r\n    }\r\n\r\n    L = <span class=\"hljs-number\">2</span>\r\n    <span class=\"hljs-keyword\">while</span> (L &lt; p.size) {\r\n        i = <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">while</span> (i &lt; p.size - L + <span class=\"hljs-number\">1</span>) {\r\n            j = i + L - <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">if</span> (j == p.size) {\r\n                i++\r\n                <span class=\"hljs-keyword\">continue</span>\r\n            }\r\n            m[i][j] = <span class=\"hljs-built_in\">Int</span>.MAX_VALUE\r\n            k = i\r\n            <span class=\"hljs-keyword\">while</span> (k &lt;= j - <span class=\"hljs-number\">1</span>) {\r\n\r\n                q = (m[i][k] + m[k + <span class=\"hljs-number\">1</span>][j]\r\n                        + p[i - <span class=\"hljs-number\">1</span>] * p[k] * p[j])\r\n                <span class=\"hljs-keyword\">if</span> (q &lt; m[i][j]) m[i][j] = q\r\n                k++\r\n            }\r\n            i++\r\n        }\r\n        L++\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> m[<span class=\"hljs-number\">1</span>][p.size - <span class=\"hljs-number\">1</span>]\r\n}"
    }
  },
  "contributors": [
    {
      "name": "Abhishek",
      "email": "raabhishek2@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "SunggyuLee",
      "email": "sq0216@gmail.com",
      "commits": 1
    },
    {
      "name": "Abhishek Chaturvedi",
      "email": "abhishekchaturvedi987@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}