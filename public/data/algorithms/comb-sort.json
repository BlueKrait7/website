{
  "slug": "comb-sort",
  "name": "Comb Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\comb_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\comb_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is pure Python implementation of comb sort algorithm.\r\nComb sort is a relatively simple sorting algorithm originally designed by Wlodzimierz\r\nDobosiewicz in 1980.  It was rediscovered by Stephen Lacey and Richard Box in 1991.\r\nComb sort improves on bubble sort algorithm.\r\nIn bubble sort, distance (or gap) between two compared elements is always one.\r\nComb sort improvement is that gap can be much more than 1, in order to prevent slowing\r\ndown by small values\r\nat the end of a list.\r\n\r\nMore info on: https://en.wikipedia.org/wiki/Comb_sort\r\n\r\nFor doctests run following command:\r\npython -m doctest -v comb_sort.py\r\nor\r\npython3 -m doctest -v comb_sort.py\r\n\r\nFor manual testing run:\r\npython comb_sort.py\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">comb_sort</span>(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of comb sort algorithm in Python\r\n    :param data: mutable collection with comparable items\r\n    :return: the same collection in ascending order\r\n    Examples:\r\n    &gt;&gt;&gt; comb_sort([0, 5, 3, 2, 2])\r\n    [0, 2, 2, 3, 5]\r\n    &gt;&gt;&gt; comb_sort([])\r\n    []\r\n    &gt;&gt;&gt; comb_sort([99, 45, -7, 8, 2, 0, -15, 3])\r\n    [-15, -7, 0, 2, 3, 8, 45, 99]\r\n    &quot;&quot;&quot;</span>\r\n    shrink_factor = <span class=\"hljs-number\">1.3</span>\r\n    gap = <span class=\"hljs-built_in\">len</span>(data)\r\n    completed = <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> completed:\r\n\r\n        <span class=\"hljs-comment\"># Update the gap value for a next comb</span>\r\n        gap = <span class=\"hljs-built_in\">int</span>(gap / shrink_factor)\r\n        <span class=\"hljs-keyword\">if</span> gap &lt;= <span class=\"hljs-number\">1</span>:\r\n            completed = <span class=\"hljs-literal\">True</span>\r\n\r\n        index = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">while</span> index + gap &lt; <span class=\"hljs-built_in\">len</span>(data):\r\n            <span class=\"hljs-keyword\">if</span> data[index] &gt; data[index + gap]:\r\n                <span class=\"hljs-comment\"># Swap values</span>\r\n                data[index], data[index + gap] = data[index + gap], data[index]\r\n                completed = <span class=\"hljs-literal\">False</span>\r\n            index += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> data\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n    <span class=\"hljs-built_in\">print</span>(comb_sort(unsorted))\r\n"
    },
    "javascript": {
      "dir": "Sorts\\test\\CombSort.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\test\\CombSort.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { combSort } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../CombSort&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;combSort function&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that is sorted backwards&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>(array)).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that is unsorted&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2224</span>, <span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>(array)).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">2224</span>])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Variations of input array lengths&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return an empty list with the input list is an empty list&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([])).<span class=\"hljs-title function_\">toEqual</span>([])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list of length 1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([<span class=\"hljs-number\">100</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">100</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list of an odd length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([<span class=\"hljs-number\">101</span>, -<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">321</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-number\">321</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list of an even length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">56</span>])\r\n    })\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Variations of input array elements&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only positive numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">50</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only negative numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">21</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">35</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">35</span>, -<span class=\"hljs-number\">21</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only a mix of positive and negative numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([-<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">56</span>, -<span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">45</span>, -<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">56</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only whole numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">15</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only decimal numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.42</span>, <span class=\"hljs-number\">2.56</span>, <span class=\"hljs-number\">33.45</span>, <span class=\"hljs-number\">13.12</span>, <span class=\"hljs-number\">2.3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.42</span>, <span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">2.56</span>, <span class=\"hljs-number\">13.12</span>, <span class=\"hljs-number\">33.45</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only a mix of whole and decimal&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([<span class=\"hljs-number\">32.40</span>, <span class=\"hljs-number\">12.42</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">12.42</span>, <span class=\"hljs-number\">32.40</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">56</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only fractional numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([<span class=\"hljs-number\">0.98</span>, <span class=\"hljs-number\">0.4259</span>, <span class=\"hljs-number\">0.56</span>, -<span class=\"hljs-number\">0.456</span>, -<span class=\"hljs-number\">0.12</span>, <span class=\"hljs-number\">0.322</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">0.456</span>, -<span class=\"hljs-number\">0.12</span>, <span class=\"hljs-number\">0.322</span>, <span class=\"hljs-number\">0.4259</span>, <span class=\"hljs-number\">0.56</span>, <span class=\"hljs-number\">0.98</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only a mix of whole, decimal, and fractional&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([-<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">0.222</span>, <span class=\"hljs-number\">5.6</span>, -<span class=\"hljs-number\">4.5</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0.333</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">4.5</span>, -<span class=\"hljs-number\">0.222</span>, <span class=\"hljs-number\">0.333</span>, <span class=\"hljs-number\">5.6</span>, <span class=\"hljs-number\">12</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains duplicates&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">combSort</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>])\r\n    })\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\comb_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\comb_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n *\r\n * \\file\r\n * \\brief [Comb Sort Algorithm\r\n * (Comb Sort)](https://en.wikipedia.org/wiki/Comb_sort)\r\n *\r\n * \\author\r\n *\r\n * \\details\r\n * - A better version of bubble sort algorithm\r\n * - Bubble sort compares adjacent values whereas comb sort uses gap larger\r\n *   than 1\r\n * - Best case Time complexity O(n)\r\n *   Worst case Time complexity O(n^2)\r\n *\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n *\r\n * Find the next gap by shrinking the current gap by shrink factor of 1.3\r\n * @param gap current gap\r\n * @return new gap\r\n *\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">FindNextGap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> gap)</span> </span>{\r\n    gap = (gap * <span class=\"hljs-number\">10</span>) / <span class=\"hljs-number\">13</span>;\r\n\r\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-number\">1</span>, gap);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Function to sort array\r\n *\r\n * @param arr array to be sorted\r\n * @param l start index of array\r\n * @param r end index of array\r\n *\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">CombSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span> </span>{\r\n    <span class=\"hljs-comment\">/**\r\n     *\r\n     * initial gap will be maximum and the maximum possible value is\r\n     * the size of the array that is n and which is equal to r in this\r\n     * case so to avoid passing an extra parameter n that is the size of\r\n     * the array we are using r to initialize the initial gap.\r\n     *\r\n     */</span>\r\n    <span class=\"hljs-type\">int</span> gap = r;\r\n\r\n    <span class=\"hljs-comment\">/// Initialize swapped as true to make sure that loop runs</span>\r\n    <span class=\"hljs-type\">bool</span> swapped = <span class=\"hljs-literal\">true</span>;\r\n\r\n    <span class=\"hljs-comment\">/// Keep running until gap = 1 or none elements were swapped</span>\r\n    <span class=\"hljs-keyword\">while</span> (gap != <span class=\"hljs-number\">1</span> || swapped) {\r\n        <span class=\"hljs-comment\">/// Find next gap</span>\r\n        gap = <span class=\"hljs-built_in\">FindNextGap</span>(gap);\r\n\r\n        swapped = <span class=\"hljs-literal\">false</span>;\r\n\r\n        <span class=\"hljs-comment\">/// Compare all elements with current gap</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = l; i &lt; r - gap; ++i) {\r\n            <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[i + gap]) {\r\n                std::<span class=\"hljs-built_in\">swap</span>(arr[i], arr[i + gap]);\r\n                swapped = <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">/// Test 1</span>\r\n    <span class=\"hljs-type\">int</span> arr1[<span class=\"hljs-number\">10</span>] = {<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">343</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">76</span>};\r\n    <span class=\"hljs-built_in\">CombSort</span>(arr1, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr1, arr1 + <span class=\"hljs-number\">10</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 passed\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">/// Test 2</span>\r\n    <span class=\"hljs-type\">int</span> arr2[<span class=\"hljs-number\">8</span>] = {<span class=\"hljs-number\">-6</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">-45</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>};\r\n    <span class=\"hljs-built_in\">CombSort</span>(arr2, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr2, arr2 + <span class=\"hljs-number\">8</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2 Passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">/// Running predefined tests</span>\r\n    <span class=\"hljs-built_in\">tests</span>();\r\n\r\n    <span class=\"hljs-comment\">/// For user interaction</span>\r\n    <span class=\"hljs-type\">int</span> n;\r\n    std::cin &gt;&gt; n;\r\n    <span class=\"hljs-type\">int</span> *arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[n];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) std::cin &gt;&gt; arr[i];\r\n    <span class=\"hljs-built_in\">CombSort</span>(arr, <span class=\"hljs-number\">0</span>, n);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span>;\r\n    <span class=\"hljs-keyword\">delete</span>[] arr;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\CombSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\CombSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.*;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Comb Sort algorithm implementation\r\n *\r\n * &lt;p&gt;\r\n * Best-case performance O(n * log(n)) Worst-case performance O(n ^ 2)\r\n * Worst-case space complexity O(1)\r\n *\r\n * &lt;p&gt;\r\n * Comb sort improves on bubble sort.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Sandeep Roy (https://github.com/sandeeproy99)\r\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\r\n * <span class=\"hljs-doctag\">@see</span> BubbleSort\r\n * <span class=\"hljs-doctag\">@see</span> SortAlgorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CombSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\r\n\r\n    <span class=\"hljs-comment\">// To find gap between elements</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">nextGap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> gap)</span> {\r\n        <span class=\"hljs-comment\">// Shrink gap by Shrink factor</span>\r\n        gap = (gap * <span class=\"hljs-number\">10</span>) / <span class=\"hljs-number\">13</span>;\r\n        <span class=\"hljs-keyword\">return</span> (gap &lt; <span class=\"hljs-number\">1</span>) ? <span class=\"hljs-number\">1</span> : gap;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to sort arr[] using Comb\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arr - an array should be sorted\r\n     * <span class=\"hljs-doctag\">@return</span> sorted array\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] arr) {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> arr.length;\r\n\r\n        <span class=\"hljs-comment\">// initialize gap</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">gap</span> <span class=\"hljs-operator\">=</span> size;\r\n\r\n        <span class=\"hljs-comment\">// Initialize swapped as true to make sure that loop runs</span>\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">swapped</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\r\n\r\n        <span class=\"hljs-comment\">// Keep running while gap is more than 1 and last iteration caused a swap</span>\r\n        <span class=\"hljs-keyword\">while</span> (gap != <span class=\"hljs-number\">1</span> || swapped) {\r\n            <span class=\"hljs-comment\">// Find next gap</span>\r\n            gap = nextGap(gap);\r\n\r\n            <span class=\"hljs-comment\">// Initialize swapped as false so that we can check if swap happened or not</span>\r\n            swapped = <span class=\"hljs-literal\">false</span>;\r\n\r\n            <span class=\"hljs-comment\">// Compare all elements with current gap</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size - gap; i++) {\r\n                <span class=\"hljs-keyword\">if</span> (less(arr[i + gap], arr[i])) {\r\n                    <span class=\"hljs-comment\">// Swap arr[i] and arr[i+gap]</span>\r\n                    swapped = swap(arr, i, i + gap);\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> arr;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Driver method</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">CombSort</span> <span class=\"hljs-variable\">ob</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CombSort</span>();\r\n        Integer[] arr = {<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">44</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">66</span>, -<span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">23</span>, -<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">0</span>};\r\n        ob.sort(arr);\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;sorted array&quot;</span>);\r\n        print(arr);\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\comb_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\comb_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> SHRINK 1.3  <span class=\"hljs-comment\">// suggested shrink factor value</span></span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *numbers, <span class=\"hljs-type\">int</span> size)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> gap = size;\r\n    <span class=\"hljs-keyword\">while</span> (gap &gt; <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// gap = 1 means that the array is sorted</span>\r\n    {\r\n        gap = gap / SHRINK;\r\n        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">while</span> ((i + gap) &lt; size)\r\n        {  <span class=\"hljs-comment\">// similiar to the Shell Sort</span>\r\n            <span class=\"hljs-keyword\">if</span> (numbers[i] &gt; numbers[i + gap])\r\n            {\r\n                <span class=\"hljs-type\">int</span> tmp = numbers[i];\r\n                numbers[i] = numbers[i + gap];\r\n                numbers[i + gap] = tmp;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, <span class=\"hljs-built_in\">array</span>[i]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> size = <span class=\"hljs-number\">6</span>;\r\n    <span class=\"hljs-type\">int</span> *numbers = <span class=\"hljs-built_in\">malloc</span>(size * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert %d unsorted numbers: \\n&quot;</span>, size);\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;numbers[i]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Initial array: &quot;</span>);\r\n    display(numbers, size);\r\n    sort(numbers, size);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\r\n    display(numbers, size);\r\n    <span class=\"hljs-built_in\">free</span>(numbers);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Sort\\Comb_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Sort\\Comb_Sort.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\r\n\r\n<span class=\"hljs-keyword\">module</span> CombSort <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-keyword\">let</span> Sort list<span class=\"hljs-operator\">:</span> <span class=\"hljs-symbol\">&#x27;T</span> [] <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> list <span class=\"hljs-operator\">=</span> list <span class=\"hljs-operator\">|&gt;</span> Array.copy\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> gap <span class=\"hljs-operator\">=</span> double list.Length\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> swaps <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>\r\n        <span class=\"hljs-keyword\">while</span> gap <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-operator\">||</span> swaps <span class=\"hljs-keyword\">do</span>\r\n            gap <span class=\"hljs-operator\">&lt;-</span> gap <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">1.247330950103979</span>\r\n            <span class=\"hljs-keyword\">if</span> gap <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">1.0</span> <span class=\"hljs-keyword\">then</span> gap <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-number\">1.0</span>\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\r\n            swaps <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-literal\">false</span>\r\n            <span class=\"hljs-keyword\">while</span> i <span class=\"hljs-operator\">+</span> int gap <span class=\"hljs-operator\">&lt;</span> list.Length <span class=\"hljs-keyword\">do</span>\r\n                <span class=\"hljs-keyword\">let</span> igap <span class=\"hljs-operator\">=</span> i <span class=\"hljs-operator\">+</span> int gap\r\n                <span class=\"hljs-keyword\">if</span> list.[i] <span class=\"hljs-operator\">&gt;</span> list.[igap] <span class=\"hljs-keyword\">then</span>\r\n                    <span class=\"hljs-keyword\">let</span> swap <span class=\"hljs-operator\">=</span> list.[i]\r\n                    list.[i] <span class=\"hljs-operator\">&lt;-</span> list.[igap]\r\n                    list.[igap] <span class=\"hljs-operator\">&lt;-</span> swap\r\n                    swaps <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-literal\">true</span>\r\n                i <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n        list\r\n"
    },
    "go": {
      "dir": "sort\\combSort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sort\\combSort.go",
      "code": "<span class=\"hljs-comment\">// Implementation of comb sort algorithm, an improvement of bubble sort</span>\r\n<span class=\"hljs-comment\">// Reference: https://www.geeksforgeeks.org/comb-sort/</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> sort\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getNextGap</span><span class=\"hljs-params\">(gap <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\tgap = (gap * <span class=\"hljs-number\">10</span>) / <span class=\"hljs-number\">13</span>\r\n\t<span class=\"hljs-keyword\">if</span> gap &lt; <span class=\"hljs-number\">1</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> gap\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Comb</span><span class=\"hljs-params\">(data []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\tn := <span class=\"hljs-built_in\">len</span>(data)\r\n\tgap := n\r\n\tswapped := <span class=\"hljs-literal\">true</span>\r\n\r\n\t<span class=\"hljs-keyword\">for</span> gap != <span class=\"hljs-number\">1</span> || swapped {\r\n\t\tgap = getNextGap(gap)\r\n\t\tswapped = <span class=\"hljs-literal\">false</span>\r\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n-gap; i++ {\r\n\t\t\t<span class=\"hljs-keyword\">if</span> data[i] &gt; data[i+gap] {\r\n\t\t\t\tdata[i], data[i+gap] = data[i+gap], data[i]\r\n\t\t\t\tswapped = <span class=\"hljs-literal\">true</span>\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> data\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\sorting\\comb_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\sorting\\comb_sort.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">comb_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">gap</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">shrink</span> = <span class=\"hljs-number\">1.3</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">sorted</span> = <span class=\"hljs-literal\">false</span>;\r\n\r\n    <span class=\"hljs-keyword\">while</span> !sorted {\r\n        gap = (gap <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f32</span> / shrink).<span class=\"hljs-title function_ invoke__\">floor</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\r\n        <span class=\"hljs-keyword\">if</span> gap &lt;= <span class=\"hljs-number\">1</span> {\r\n            gap = <span class=\"hljs-number\">1</span>;\r\n            sorted = <span class=\"hljs-literal\">true</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..arr.<span class=\"hljs-title function_ invoke__\">len</span>() - gap {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">j</span> = i + gap;\r\n            <span class=\"hljs-keyword\">if</span> arr[i] &gt; arr[j] {\r\n                arr.<span class=\"hljs-title function_ invoke__\">swap</span>(i, j);\r\n                sorted = <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">descending</span>() {\r\n        <span class=\"hljs-comment\">//descending</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ve1</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-title function_ invoke__\">comb_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve1);\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..ve1.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> {\r\n            <span class=\"hljs-built_in\">assert!</span>(ve1[i] &lt;= ve1[i + <span class=\"hljs-number\">1</span>]);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">ascending</span>() {\r\n        <span class=\"hljs-comment\">//pre-sorted</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ve2</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\r\n        <span class=\"hljs-title function_ invoke__\">comb_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve2);\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..ve2.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> {\r\n            <span class=\"hljs-built_in\">assert!</span>(ve2[i] &lt;= ve2[i + <span class=\"hljs-number\">1</span>]);\r\n        }\r\n    }\r\n}\r\n"
    },
    "aarch64_assembly": {
      "dir": "sorters\\comb_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters\\comb_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\r\n<span class=\"hljs-comment\">/*  program combSort64.s  */</span>\r\n \r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\r\n \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* Initialized data              */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.data</span>\r\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\r\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n \r\n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-comment\">#TableNumber:      .quad   1,3,6,2,5,9,10,8,4,7</span>\r\n<span class=\"hljs-symbol\">TableNumber:</span>     .quad   <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">6</span>,-<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>\r\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.bss</span>\r\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/*  code section                 */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.text</span>\r\n<span class=\"hljs-symbol\">.global</span> main \r\n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> combSort\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">bl</span> displayTable\r\n \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\r\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\r\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\r\n \r\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\r\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\r\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\r\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\r\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\r\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\r\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\r\n<span class=\"hljs-symbol\">isSorted:</span>\r\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\r\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x4,x3\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\r\n<span class=\"hljs-number\">98</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">99</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*         comb sort                                              */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the first element    */</span>\r\n<span class=\"hljs-comment\">/* x2 contains the number of element */</span>\r\n<span class=\"hljs-comment\">/* this routine use à factor to 1.28  see wikipedia for best factor */</span>\r\n<span class=\"hljs-symbol\">combSort:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x8,x9,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">sub</span> x9,x2,x1               <span class=\"hljs-comment\">// compute gap</span>\r\n    <span class=\"hljs-keyword\">sub</span> x2,x2,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// compute end index n - 1</span>\r\n    <span class=\"hljs-keyword\">mov</span> x7,<span class=\"hljs-number\">100</span>\r\n<span class=\"hljs-number\">1</span>:                             <span class=\"hljs-comment\">// start loop 1</span>\r\n    <span class=\"hljs-keyword\">mul</span> x9,x7,x9               <span class=\"hljs-comment\">// gap multiply by 100</span>\r\n    <span class=\"hljs-keyword\">lsr</span> x9,x9,<span class=\"hljs-number\">7</span>                <span class=\"hljs-comment\">// divide by 128</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x9,<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">1</span>\r\n    csel x9,x9,x3,ne\r\n    <span class=\"hljs-keyword\">mov</span> x3,x1                  <span class=\"hljs-comment\">// start index</span>\r\n    <span class=\"hljs-keyword\">mov</span> x8,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// swaps</span>\r\n<span class=\"hljs-number\">2</span>:                             <span class=\"hljs-comment\">// start loop 2</span>\r\n    <span class=\"hljs-keyword\">add</span> x4,x3,x9               <span class=\"hljs-comment\">// add gap to indice</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x4,x2\r\n    <span class=\"hljs-keyword\">bgt</span> <span class=\"hljs-number\">4</span>f\r\n    <span class=\"hljs-keyword\">ldr</span> x5,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[j]</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[j+1]</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x6,x5                  <span class=\"hljs-comment\">// compare value</span>\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">3</span>f \r\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// if smaller inversion</span>\r\n    <span class=\"hljs-keyword\">str</span> x5,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>] \r\n    <span class=\"hljs-keyword\">mov</span> x8,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// swaps</span>\r\n<span class=\"hljs-number\">3</span>:\r\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment index j</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">2</span>b\r\n \r\n<span class=\"hljs-number\">4</span>:\r\n    <span class=\"hljs-comment\">//bl displayTable</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x9,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// gap = 1 ?</span>\r\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">1</span>b                     <span class=\"hljs-comment\">// no loop</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x8,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// swaps ?</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>b                     <span class=\"hljs-comment\">// yes -&gt; loop 1</span>\r\n \r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x8,x9,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                        <span class=\"hljs-comment\">// return to address lr x30</span>\r\n \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-symbol\">displayTable:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> conversion10S                  <span class=\"hljs-comment\">// décimal conversion</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at @ character</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\r\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">mov</span> x0,x2\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\r\n"
    },
    "dart": {
      "dir": "sort\\comb_sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort\\comb_sort.dart",
      "code": "<span class=\"hljs-comment\">// function for combsort</span>\r\n<span class=\"hljs-keyword\">void</span> combSort(<span class=\"hljs-built_in\">List</span> list) {\r\n  <span class=\"hljs-built_in\">int</span> gpVal = list.length;\r\n  <span class=\"hljs-built_in\">double</span> shrink = <span class=\"hljs-number\">1.3</span>;\r\n  <span class=\"hljs-built_in\">bool</span> sortedBool = <span class=\"hljs-keyword\">false</span>;\r\n\r\n  <span class=\"hljs-keyword\">while</span> (!sortedBool) {\r\n    gpVal = (gpVal / shrink).floor();\r\n    <span class=\"hljs-keyword\">if</span> (gpVal &gt; <span class=\"hljs-number\">1</span>) {\r\n      sortedBool = <span class=\"hljs-keyword\">false</span>;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      gpVal = <span class=\"hljs-number\">1</span>;\r\n      sortedBool = <span class=\"hljs-keyword\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> (i + gpVal &lt; list.length) {\r\n      <span class=\"hljs-keyword\">if</span> (list[i] &gt; list[i + gpVal]) {\r\n        swap(list, i, gpVal);\r\n        sortedBool = <span class=\"hljs-keyword\">false</span>;\r\n      }\r\n      i++;\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">// function to swap the values</span>\r\n<span class=\"hljs-keyword\">void</span> swap(<span class=\"hljs-built_in\">List</span> list, <span class=\"hljs-built_in\">int</span> i, <span class=\"hljs-built_in\">int</span> gpVal) {\r\n  <span class=\"hljs-built_in\">int</span> temp = list[i];\r\n  list[i] = list[i + gpVal];\r\n  list[i + gpVal] = temp;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-comment\">//Get the dummy array</span>\r\n  <span class=\"hljs-built_in\">List</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">451</span>, <span class=\"hljs-number\">562</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">5</span>];\r\n  <span class=\"hljs-comment\">// for printing the array before sorting</span>\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Before sorting the array: <span class=\"hljs-subst\">$arr</span>\\n&quot;</span>);\r\n  <span class=\"hljs-comment\">// applying combSort function</span>\r\n  combSort(arr);\r\n  <span class=\"hljs-comment\">// printing the sortedBool value</span>\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;After sorting the array: <span class=\"hljs-subst\">$arr</span>&quot;</span>);\r\n}\r\n"
    },
    "r": {
      "dir": "Sorting-Algorithms\\comb_sort.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Sorting-Algorithms\\comb_sort.R",
      "code": "<span class=\"hljs-comment\"># Comb sort in R:</span>\r\n\r\ncomb.sort <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n  gap <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\r\n  swaps <span class=\"hljs-operator\">&lt;-</span> 1\r\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-punctuation\">(</span>gap <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">&amp;&amp;</span> swaps <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n    gap <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">floor</span><span class=\"hljs-punctuation\">(</span>gap <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">1.3</span><span class=\"hljs-punctuation\">)</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-punctuation\">(</span>gap <span class=\"hljs-operator\">&lt;</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n      gap <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n    swaps <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\r\n    i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-operator\">+</span> gap <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>a<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-keyword\">if</span> <span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">[</span>i<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&gt;</span> elements.vec<span class=\"hljs-punctuation\">[</span>i <span class=\"hljs-operator\">+</span> gap<span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n        elements.vec<span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span>i<span class=\"hljs-punctuation\">,</span> i <span class=\"hljs-operator\">+</span> gap<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;-</span> elements.vec<span class=\"hljs-punctuation\">[</span><span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-operator\">+</span> gap<span class=\"hljs-punctuation\">,</span> i<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span>\r\n        swaps <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-punctuation\">}</span>\r\n      i <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n  <span class=\"hljs-punctuation\">}</span>  \r\n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> \r\n<span class=\"hljs-punctuation\">}</span>\r\n\r\n<span class=\"hljs-comment\"># Example:</span>\r\n<span class=\"hljs-comment\"># comb.sort(sample(1:100,10))</span>\r\n<span class=\"hljs-comment\"># [1] 9 49 50 51 56 60 61 71 86 95</span>\r\n"
    },
    "ruby": {
      "dir": "sorting\\comb_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting\\comb_sort.rb",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">comb_sort</span><span class=\"hljs-params\">(array)</span></span>\r\n  gap = array.length\r\n  swaps = <span class=\"hljs-literal\">true</span>\r\n  <span class=\"hljs-keyword\">while</span> (gap &gt; <span class=\"hljs-number\">1</span>) <span class=\"hljs-params\">||</span> swaps\r\n    gap = [<span class=\"hljs-number\">1</span>, (gap / <span class=\"hljs-number\">1.25</span>).to_i].max\r\n    swaps = <span class=\"hljs-literal\">false</span>\r\n    <span class=\"hljs-number\">0</span>.upto(array.length - gap - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n      <span class=\"hljs-keyword\">if</span> array[i] &gt; array[i + gap]\r\n        array[i], array[i + gap] = array[i + gap], array[i]\r\n        swaps = <span class=\"hljs-literal\">true</span>\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n  array\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-keyword\">__FILE__</span>\r\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\r\n\r\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\r\n  p insertion_sort(list)\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\sorting\\comb_sort.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\sorting\\comb_sort.m",
      "code": "<span class=\"hljs-comment\">%This function sorts the input array in ascending order using the Comb Sort algorithm</span>\r\n<span class=\"hljs-comment\">%For details, refer https://en.wikipedia.org/wiki/Comb_sort</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span> = <span class=\"hljs-title\">comb_sort</span><span class=\"hljs-params\">(array)</span></span>\r\n            \r\nlen = <span class=\"hljs-built_in\">length</span>(array);\r\nk = len;\r\nisSwapped = <span class=\"hljs-built_in\">true</span>;\r\n<span class=\"hljs-comment\">% value of shrink should be greater than 1</span>\r\nshrink = <span class=\"hljs-number\">1.4</span>; \r\n<span class=\"hljs-keyword\">while</span> ((k &gt; <span class=\"hljs-number\">1</span>) || (isSwapped == <span class=\"hljs-built_in\">true</span>))    \r\n    k = <span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">floor</span>(k / shrink),<span class=\"hljs-number\">1</span>);   \r\n    <span class=\"hljs-comment\">% Bubble sort with given value of k</span>\r\n    <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span>;\r\n    isSwapped = <span class=\"hljs-built_in\">false</span>;\r\n    <span class=\"hljs-keyword\">while</span> ((<span class=\"hljs-built_in\">i</span> + k) &lt;= len)\r\n        <span class=\"hljs-keyword\">if</span> (array(<span class=\"hljs-built_in\">i</span>) &gt; array(<span class=\"hljs-built_in\">i</span> + k))\r\n            array = swap(array,<span class=\"hljs-built_in\">i</span>,<span class=\"hljs-built_in\">i</span> + k);\r\n            isSwapped = <span class=\"hljs-built_in\">true</span>;\r\n        <span class=\"hljs-keyword\">end</span>\r\n        <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-built_in\">i</span> + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\ny = array;\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">array</span> = <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(array,i,j)</span></span>\r\nvalue = array(<span class=\"hljs-built_in\">i</span>);\r\narray(<span class=\"hljs-built_in\">i</span>) = array(<span class=\"hljs-built_in\">j</span>);\r\narray(<span class=\"hljs-built_in\">j</span>) = value;\r\n<span class=\"hljs-comment\">% Note: In practice, array should be passed by reference</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/CombSorter.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sorters\\Comparison\\CombSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Comb sort is a relatively simple sorting algorithm that improves on bubble sort.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CombSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CombSorter</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> shrinkFactor = <span class=\"hljs-number\">1.3</span></span>)</span> =&gt; ShrinkFactor = shrinkFactor;\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">double</span> ShrinkFactor { <span class=\"hljs-keyword\">get</span>; }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using specified comparer,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     internal, in-place, unstable,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     worst case performance: O(n^2),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     best case performance: O(n log(n)),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     average performance: O(n^2 / 2^p),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array length and p - number of increments.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     See <span class=\"hljs-doctag\">&lt;a href=&quot;https://en.wikipedia.org/wiki/Comb_sort&quot;&gt;</span>here<span class=\"hljs-doctag\">&lt;/a&gt;</span> for more info.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> gap = array.Length;\r\n            <span class=\"hljs-keyword\">var</span> sorted = <span class=\"hljs-literal\">false</span>;\r\n            <span class=\"hljs-keyword\">while</span> (!sorted)\r\n            {\r\n                gap = (<span class=\"hljs-built_in\">int</span>)Math.Floor(gap / ShrinkFactor);\r\n                <span class=\"hljs-keyword\">if</span> (gap &lt;= <span class=\"hljs-number\">1</span>)\r\n                {\r\n                    gap = <span class=\"hljs-number\">1</span>;\r\n                    sorted = <span class=\"hljs-literal\">true</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length - gap; i++)\r\n                {\r\n                    <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[i], array[i + gap]) &gt; <span class=\"hljs-number\">0</span>)\r\n                    {\r\n                        (array[i], array[i + gap]) = (array[i + gap], array[i]);\r\n                        sorted = <span class=\"hljs-literal\">false</span>;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Wafelack",
      "email": "wafelack@riseup.net",
      "commits": 1
    },
    {
      "name": "MaximSmolskiy",
      "email": "mithridatus@mail.ru",
      "commits": 1
    },
    {
      "name": "vanitaneja22",
      "email": "vani.taneja123@gmail.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "maxbarsukov",
      "email": "maximbarsukov@bk.ru",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Gabriele Bruno Franco",
      "email": "gabrielebrunofranco@gmail.com",
      "commits": 1
    },
    {
      "name": "zoomdong",
      "email": "1344492820@qq.com",
      "commits": 1
    },
    {
      "name": "KuLi",
      "email": "KuLi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "valery noname",
      "email": "valerydec17@gmail.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "Sandeep Roy",
      "email": "sandeep.roy@infosys.com",
      "commits": 1
    },
    {
      "name": "sandeeproy99",
      "email": "33170898+sandeeproy99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Uvaish Zafri",
      "email": "uvaishzafri1@gmail.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 2
    },
    {
      "name": "Erez Shomron",
      "email": "48328872+eshom@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 2
    },
    {
      "name": "Kelvin Salton do Prado",
      "email": "kelvinpfw@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "marsonya",
      "email": "akhil.marsonya27@gmail.com",
      "commits": 4
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 5
    },
    {
      "name": "Charlie Moore",
      "email": "moorejchar@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}