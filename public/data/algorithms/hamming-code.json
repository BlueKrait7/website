{
  "slug": "hamming-code",
  "name": "Hamming Code",
  "categories": [
    "hashing"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "hashes\\hamming_code.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/hashes\\hamming_code.py",
      "code": "<span class=\"hljs-comment\"># Author: Jo√£o Gustavo A. Amorim &amp; Gabriel Kunz</span>\r\n<span class=\"hljs-comment\"># Author email: joaogustavoamorim@gmail.com and gabriel-kunz@uergs.edu.br</span>\r\n<span class=\"hljs-comment\"># Coding date:  apr 2019</span>\r\n<span class=\"hljs-comment\"># Black: True</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    * This code implement the Hamming code:\r\n        https://en.wikipedia.org/wiki/Hamming_code - In telecommunication,\r\n    Hamming codes are a family of linear error-correcting codes. Hamming\r\n    codes can detect up to two-bit errors or correct one-bit errors\r\n    without detection of uncorrected errors. By contrast, the simple\r\n    parity code cannot correct errors, and can detect only an odd number\r\n    of bits in error. Hamming codes are perfect codes, that is, they\r\n    achieve the highest possible rate for codes with their block length\r\n    and minimum distance of three.\r\n\r\n    * the implemented code consists of:\r\n        * a function responsible for encoding the message (emitterConverter)\r\n            * return the encoded message\r\n        * a function responsible for decoding the message (receptorConverter)\r\n            * return the decoded message and a ack of data integrity\r\n\r\n    * how to use:\r\n            to be used you must declare how many parity bits (sizePari)\r\n        you want to include in the message.\r\n            it is desired (for test purposes) to select a bit to be set\r\n        as an error. This serves to check whether the code is working correctly.\r\n            Lastly, the variable of the message/word that must be desired to be\r\n        encoded (text).\r\n\r\n    * how this work:\r\n            declaration of variables (sizePari, be, text)\r\n\r\n            converts the message/word (text) to binary using the\r\n        text_to_bits function\r\n            encodes the message using the rules of hamming encoding\r\n            decodes the message using the rules of hamming encoding\r\n            print the original message, the encoded message and the\r\n        decoded message\r\n\r\n            forces an error in the coded text variable\r\n            decodes the message that was forced the error\r\n            print the original message, the encoded message, the bit changed\r\n        message and the decoded message\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-comment\"># Imports</span>\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\n\r\n<span class=\"hljs-comment\"># Functions of binary conversion--------------------------------------</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">text_to_bits</span>(<span class=\"hljs-params\">text, encoding=<span class=\"hljs-string\">&quot;utf-8&quot;</span>, errors=<span class=\"hljs-string\">&quot;surrogatepass&quot;</span></span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; text_to_bits(&quot;msg&quot;)\r\n    &#x27;011011010111001101100111&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    bits = <span class=\"hljs-built_in\">bin</span>(<span class=\"hljs-built_in\">int</span>.from_bytes(text.encode(encoding, errors), <span class=\"hljs-string\">&quot;big&quot;</span>))[<span class=\"hljs-number\">2</span>:]\r\n    <span class=\"hljs-keyword\">return</span> bits.zfill(<span class=\"hljs-number\">8</span> * ((<span class=\"hljs-built_in\">len</span>(bits) + <span class=\"hljs-number\">7</span>) // <span class=\"hljs-number\">8</span>))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">text_from_bits</span>(<span class=\"hljs-params\">bits, encoding=<span class=\"hljs-string\">&quot;utf-8&quot;</span>, errors=<span class=\"hljs-string\">&quot;surrogatepass&quot;</span></span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; text_from_bits(&#x27;011011010111001101100111&#x27;)\r\n    &#x27;msg&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    n = <span class=\"hljs-built_in\">int</span>(bits, <span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-keyword\">return</span> n.to_bytes((n.bit_length() + <span class=\"hljs-number\">7</span>) // <span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;big&quot;</span>).decode(encoding, errors) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;\\0&quot;</span>\r\n\r\n\r\n<span class=\"hljs-comment\"># Functions of hamming code-------------------------------------------</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">emitterConverter</span>(<span class=\"hljs-params\">sizePar, data</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    :param sizePar: how many parity bits the message must have\r\n    :param data:  information bits\r\n    :return: message to be transmitted by unreliable medium\r\n            - bits of information merged with parity bits\r\n\r\n    &gt;&gt;&gt; emitterConverter(4, &quot;101010111111&quot;)\r\n    [&#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> sizePar + <span class=\"hljs-built_in\">len</span>(data) &lt;= <span class=\"hljs-number\">2</span>**sizePar - (<span class=\"hljs-built_in\">len</span>(data) - <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;ERROR - size of parity don&#x27;t match with size of data&quot;</span>)\r\n        exit(<span class=\"hljs-number\">0</span>)\r\n\r\n    dataOut = []\r\n    parity = []\r\n    binPos = [<span class=\"hljs-built_in\">bin</span>(x)[<span class=\"hljs-number\">2</span>:] <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, sizePar + <span class=\"hljs-built_in\">len</span>(data) + <span class=\"hljs-number\">1</span>)]\r\n\r\n    <span class=\"hljs-comment\"># sorted information data for the size of the output data</span>\r\n    dataOrd = []\r\n    <span class=\"hljs-comment\"># data position template + parity</span>\r\n    dataOutGab = []\r\n    <span class=\"hljs-comment\"># parity bit counter</span>\r\n    qtdBP = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-comment\"># counter position of data bits</span>\r\n    contData = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, sizePar + <span class=\"hljs-built_in\">len</span>(data) + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-comment\"># Performs a template of bit positions - who should be given,</span>\r\n        <span class=\"hljs-comment\"># and who should be parity</span>\r\n        <span class=\"hljs-keyword\">if</span> qtdBP &lt; sizePar:\r\n            <span class=\"hljs-keyword\">if</span> (np.log(x) / np.log(<span class=\"hljs-number\">2</span>)).is_integer():\r\n                dataOutGab.append(<span class=\"hljs-string\">&quot;P&quot;</span>)\r\n                qtdBP = qtdBP + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                dataOutGab.append(<span class=\"hljs-string\">&quot;D&quot;</span>)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            dataOutGab.append(<span class=\"hljs-string\">&quot;D&quot;</span>)\r\n\r\n        <span class=\"hljs-comment\"># Sorts the data to the new output size</span>\r\n        <span class=\"hljs-keyword\">if</span> dataOutGab[-<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;D&quot;</span>:\r\n            dataOrd.append(data[contData])\r\n            contData += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            dataOrd.append(<span class=\"hljs-literal\">None</span>)\r\n\r\n    <span class=\"hljs-comment\"># Calculates parity</span>\r\n    qtdBP = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># parity bit counter</span>\r\n    <span class=\"hljs-keyword\">for</span> bp <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, sizePar + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-comment\"># Bit counter one for a given parity</span>\r\n        contBO = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-comment\"># counter to control the loop reading</span>\r\n        contLoop = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> dataOrd:\r\n            <span class=\"hljs-keyword\">if</span> x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n                <span class=\"hljs-keyword\">try</span>:\r\n                    aux = (binPos[contLoop])[-<span class=\"hljs-number\">1</span> * (bp)]\r\n                <span class=\"hljs-keyword\">except</span> IndexError:\r\n                    aux = <span class=\"hljs-string\">&quot;0&quot;</span>\r\n                <span class=\"hljs-keyword\">if</span> aux == <span class=\"hljs-string\">&quot;1&quot;</span>:\r\n                    <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-string\">&quot;1&quot;</span>:\r\n                        contBO += <span class=\"hljs-number\">1</span>\r\n            contLoop += <span class=\"hljs-number\">1</span>\r\n        parity.append(contBO % <span class=\"hljs-number\">2</span>)\r\n\r\n        qtdBP += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># Mount the message</span>\r\n    ContBP = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># parity bit counter</span>\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, sizePar + <span class=\"hljs-built_in\">len</span>(data)):\r\n        <span class=\"hljs-keyword\">if</span> dataOrd[x] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            dataOut.append(<span class=\"hljs-built_in\">str</span>(parity[ContBP]))\r\n            ContBP += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            dataOut.append(dataOrd[x])\r\n\r\n    <span class=\"hljs-keyword\">return</span> dataOut\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">receptorConverter</span>(<span class=\"hljs-params\">sizePar, data</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; receptorConverter(4, &quot;1111010010111111&quot;)\r\n    ([&#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;1&#x27;], True)\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># data position template + parity</span>\r\n    dataOutGab = []\r\n    <span class=\"hljs-comment\"># Parity bit counter</span>\r\n    qtdBP = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-comment\"># Counter p data bit reading</span>\r\n    contData = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-comment\"># list of parity received</span>\r\n    parityReceived = []\r\n    dataOutput = []\r\n\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(data) + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-comment\"># Performs a template of bit positions - who should be given,</span>\r\n        <span class=\"hljs-comment\">#  and who should be parity</span>\r\n        <span class=\"hljs-keyword\">if</span> qtdBP &lt; sizePar <span class=\"hljs-keyword\">and</span> (np.log(x) / np.log(<span class=\"hljs-number\">2</span>)).is_integer():\r\n            dataOutGab.append(<span class=\"hljs-string\">&quot;P&quot;</span>)\r\n            qtdBP = qtdBP + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            dataOutGab.append(<span class=\"hljs-string\">&quot;D&quot;</span>)\r\n\r\n        <span class=\"hljs-comment\"># Sorts the data to the new output size</span>\r\n        <span class=\"hljs-keyword\">if</span> dataOutGab[-<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;D&quot;</span>:\r\n            dataOutput.append(data[contData])\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            parityReceived.append(data[contData])\r\n        contData += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># -----------calculates the parity with the data</span>\r\n    dataOut = []\r\n    parity = []\r\n    binPos = [<span class=\"hljs-built_in\">bin</span>(x)[<span class=\"hljs-number\">2</span>:] <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, sizePar + <span class=\"hljs-built_in\">len</span>(dataOutput) + <span class=\"hljs-number\">1</span>)]\r\n\r\n    <span class=\"hljs-comment\">#  sorted information data for the size of the output data</span>\r\n    dataOrd = []\r\n    <span class=\"hljs-comment\"># Data position feedback + parity</span>\r\n    dataOutGab = []\r\n    <span class=\"hljs-comment\"># Parity bit counter</span>\r\n    qtdBP = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-comment\"># Counter p data bit reading</span>\r\n    contData = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, sizePar + <span class=\"hljs-built_in\">len</span>(dataOutput) + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-comment\"># Performs a template position of bits - who should be given,</span>\r\n        <span class=\"hljs-comment\"># and who should be parity</span>\r\n        <span class=\"hljs-keyword\">if</span> qtdBP &lt; sizePar <span class=\"hljs-keyword\">and</span> (np.log(x) / np.log(<span class=\"hljs-number\">2</span>)).is_integer():\r\n            dataOutGab.append(<span class=\"hljs-string\">&quot;P&quot;</span>)\r\n            qtdBP = qtdBP + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            dataOutGab.append(<span class=\"hljs-string\">&quot;D&quot;</span>)\r\n\r\n        <span class=\"hljs-comment\"># Sorts the data to the new output size</span>\r\n        <span class=\"hljs-keyword\">if</span> dataOutGab[-<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&quot;D&quot;</span>:\r\n            dataOrd.append(dataOutput[contData])\r\n            contData += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            dataOrd.append(<span class=\"hljs-literal\">None</span>)\r\n\r\n    <span class=\"hljs-comment\"># Calculates parity</span>\r\n    qtdBP = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># parity bit counter</span>\r\n    <span class=\"hljs-keyword\">for</span> bp <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, sizePar + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-comment\"># Bit counter one for a certain parity</span>\r\n        contBO = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-comment\"># Counter to control loop reading</span>\r\n        contLoop = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> dataOrd:\r\n            <span class=\"hljs-keyword\">if</span> x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n                <span class=\"hljs-keyword\">try</span>:\r\n                    aux = (binPos[contLoop])[-<span class=\"hljs-number\">1</span> * (bp)]\r\n                <span class=\"hljs-keyword\">except</span> IndexError:\r\n                    aux = <span class=\"hljs-string\">&quot;0&quot;</span>\r\n                <span class=\"hljs-keyword\">if</span> aux == <span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-keyword\">and</span> x == <span class=\"hljs-string\">&quot;1&quot;</span>:\r\n                    contBO += <span class=\"hljs-number\">1</span>\r\n            contLoop += <span class=\"hljs-number\">1</span>\r\n        parity.append(<span class=\"hljs-built_in\">str</span>(contBO % <span class=\"hljs-number\">2</span>))\r\n\r\n        qtdBP += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># Mount the message</span>\r\n    ContBP = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># Parity bit counter</span>\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, sizePar + <span class=\"hljs-built_in\">len</span>(dataOutput)):\r\n        <span class=\"hljs-keyword\">if</span> dataOrd[x] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            dataOut.append(<span class=\"hljs-built_in\">str</span>(parity[ContBP]))\r\n            ContBP += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            dataOut.append(dataOrd[x])\r\n\r\n    ack = parityReceived == parity\r\n    <span class=\"hljs-keyword\">return</span> dataOutput, ack\r\n\r\n\r\n<span class=\"hljs-comment\"># ---------------------------------------------------------------------</span>\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n# Example how to use\r\n\r\n# number of parity bits\r\nsizePari = 4\r\n\r\n# location of the bit that will be forced an error\r\nbe = 2\r\n\r\n# Message/word to be encoded and decoded with hamming\r\n# text = input(&quot;Enter the word to be read: &quot;)\r\ntext = &quot;Message01&quot;\r\n\r\n# Convert the message to binary\r\nbinaryText = text_to_bits(text)\r\n\r\n# Prints the binary of the string\r\nprint(&quot;Text input in binary is &#x27;&quot; + binaryText + &quot;&#x27;&quot;)\r\n\r\n# total transmitted bits\r\ntotalBits = len(binaryText) + sizePari\r\nprint(&quot;Size of data is &quot; + str(totalBits))\r\n\r\nprint(&quot;\\n --Message exchange--&quot;)\r\nprint(&quot;Data to send ------------&gt; &quot; + binaryText)\r\ndataOut = emitterConverter(sizePari, binaryText)\r\nprint(&quot;Data converted ----------&gt; &quot; + &quot;&quot;.join(dataOut))\r\ndataReceiv, ack = receptorConverter(sizePari, dataOut)\r\nprint(\r\n    &quot;Data receive ------------&gt; &quot;\r\n    + &quot;&quot;.join(dataReceiv)\r\n    + &quot;\\t\\t -- Data integrity: &quot;\r\n    + str(ack)\r\n)\r\n\r\n\r\nprint(&quot;\\n --Force error--&quot;)\r\nprint(&quot;Data to send ------------&gt; &quot; + binaryText)\r\ndataOut = emitterConverter(sizePari, binaryText)\r\nprint(&quot;Data converted ----------&gt; &quot; + &quot;&quot;.join(dataOut))\r\n\r\n# forces error\r\ndataOut[-be] = &quot;1&quot; * (dataOut[-be] == &quot;0&quot;) + &quot;0&quot; * (dataOut[-be] == &quot;1&quot;)\r\nprint(&quot;Data after transmission -&gt; &quot; + &quot;&quot;.join(dataOut))\r\ndataReceiv, ack = receptorConverter(sizePari, dataOut)\r\nprint(\r\n    &quot;Data receive ------------&gt; &quot;\r\n    + &quot;&quot;.join(dataReceiv)\r\n    + &quot;\\t\\t -- Data integrity: &quot;\r\n    + str(ack)\r\n)\r\n&quot;&quot;&quot;</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "Jo√£o Gustavo A. Amorim",
      "email": "joaogustavoamorim@gmail.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}