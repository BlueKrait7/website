{
  "slug": "interval-timer",
  "name": "Interval Timer",
  "categories": [
    "timingfunctions"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Timing-Functions\\IntervalTimer.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Timing-Functions\\IntervalTimer.js",
      "code": "<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span> Nandan V\r\n * Sunday, 26 July 2020 8:33 AM\r\n * <span class=\"hljs-doctag\">@description</span> Singleton class that handles the &lt;b&gt;timing of tests&lt;/b&gt; and\r\n *   specs. &lt;br/&gt; The class is singleton as &lt;u&gt;javascript does not support\r\n *   multiple timer instances&lt;u/&gt;.\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IntervalTimer</span> {\r\n  <span class=\"hljs-comment\">/**\r\n   * <span class=\"hljs-doctag\">@description</span> Constructor for Timer.\r\n   * <span class=\"hljs-doctag\">@param</span> interval Sets the interval for running the timer.\r\n   * <span class=\"hljs-doctag\">@param</span> callBack The callback function to be executed.\r\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">IntervalTimer</span>} If exists, the existing object.\r\n   */</span>\r\n  <span class=\"hljs-title function_\">constructor</span> (interval = <span class=\"hljs-number\">10</span>,\r\n    callBack = <span class=\"hljs-function\">() =&gt;</span> {}) {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">prevInterval</span> = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">instance</span> == <span class=\"hljs-literal\">null</span>) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">interval</span> = interval\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">callBack</span> = callBack\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">instance</span> = <span class=\"hljs-variable language_\">this</span>\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">instance</span>\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * <span class=\"hljs-doctag\">@description</span> Starts the timer.\r\n   */</span>\r\n  startTimer () {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timer</span> = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">callBack</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">interval</span>)\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * <span class=\"hljs-doctag\">@description</span> Resets the timer.\r\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">number</span>} Elapsed time in milliseconds.\r\n   */</span>\r\n  resetTimer () {\r\n    <span class=\"hljs-built_in\">clearInterval</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timer</span>)\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">callBack</span> = <span class=\"hljs-function\">() =&gt;</span> {}\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getElapsedTime</span>()\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">number</span>} Elapsed time in milliseconds since reset.\r\n   */</span>\r\n  getElapsedTime (offset = <span class=\"hljs-number\">0</span>) {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timeElapsed</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timer</span> - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">prevInterval</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">prevInterval</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timer</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timeElapsed</span> - offset\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">number</span>} Elapsed time since start.\r\n   */</span>\r\n  getRunTime () {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">timer</span>\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span> Nandan V\r\n * Saturday, 01 August 2020 8:33 AM\r\n * <span class=\"hljs-doctag\">@description</span> Example usage\r\n */</span>\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ExampleIntervalTimer</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">output = v =&gt; <span class=\"hljs-variable language_\">console</span>.log(v)</span>) {\r\n  <span class=\"hljs-comment\">/**\r\n   * Create am object with default settings.\r\n   * <span class=\"hljs-doctag\">@type</span> {<span class=\"hljs-type\">IntervalTimer</span>} Used to get timing information.\r\n   */</span>\r\n  <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntervalTimer</span>()\r\n  timer.<span class=\"hljs-title function_\">startTimer</span>()\r\n\r\n  <span class=\"hljs-comment\">// ... Initialization code ...</span>\r\n  <span class=\"hljs-comment\">// I generally use it for timing tests in Jasmine JS.</span>\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Gets the runtime till this point.\r\n   * Can be subtracted from ElapsedTime to offset timing of initialization code.\r\n   */</span>\r\n  <span class=\"hljs-keyword\">const</span> initOffset = timer.<span class=\"hljs-title function_\">getRunTime</span>()\r\n\r\n  <span class=\"hljs-comment\">// ... A test ...</span>\r\n  <span class=\"hljs-comment\">// The time taken to run the test.</span>\r\n  <span class=\"hljs-title function_\">output</span>(timer.<span class=\"hljs-title function_\">getElapsedTime</span>(initOffset))\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Returns the elapsed time and resets the timer to 0.\r\n   */</span>\r\n  <span class=\"hljs-title function_\">output</span>(timer.<span class=\"hljs-title function_\">resetTimer</span>())\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">IntervalTimer</span>, <span class=\"hljs-title class_\">ExampleIntervalTimer</span> }\r\n"
    }
  },
  "contributors": [
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nandan V",
      "email": "nvpotti.mec@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}