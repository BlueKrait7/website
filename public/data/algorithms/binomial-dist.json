{
  "slug": "binomial-dist",
  "name": "Binomial Dist",
  "categories": [
    "probability"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "probability\\binomial_dist.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/probability\\binomial_dist.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Binomial\r\n * distribution](https://en.wikipedia.org/wiki/Binomial_distribution) example\r\n *\r\n * The binomial distribution models the number of\r\n * successes in a sequence of n independent events\r\n *\r\n * Summary of variables used:\r\n * * n : number of trials\r\n * * p : probability of success\r\n * * x : desired successes\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** finds the expected value of a binomial distribution\r\n * \\param [in] n\r\n * \\param [in] p\r\n * \\returns \\f$\\mu=np\\f$\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">binomial_expected</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n, <span class=\"hljs-type\">double</span> p)</span> </span>{ <span class=\"hljs-keyword\">return</span> n * p; }\r\n\r\n<span class=\"hljs-comment\">/** finds the variance of the binomial distribution\r\n * \\param [in] n\r\n * \\param [in] p\r\n * \\returns \\f$\\sigma^2 = n\\cdot p\\cdot (1-p)\\f$\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">binomial_variance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n, <span class=\"hljs-type\">double</span> p)</span> </span>{ <span class=\"hljs-keyword\">return</span> n * p * (<span class=\"hljs-number\">1</span> - p); }\r\n\r\n<span class=\"hljs-comment\">/** finds the standard deviation of the binomial distribution\r\n * \\param [in] n\r\n * \\param [in] p\r\n * \\returns \\f$\\sigma = \\sqrt{\\sigma^2} = \\sqrt{n\\cdot p\\cdot (1-p)}\\f$\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">binomial_standard_deviation</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n, <span class=\"hljs-type\">double</span> p)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-built_in\">binomial_variance</span>(n, p));\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Computes n choose r\r\n * \\param [in] n\r\n * \\param [in] r\r\n * \\returns \\f$\\displaystyle {n\\choose r} =\r\n * \\frac{n!}{r!(n-r)!} = \\frac{n\\times(n-1)\\times(n-2)\\times\\cdots(n-r)}{r!}\r\n * \\f$\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">nCr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n, <span class=\"hljs-type\">double</span> r)</span> </span>{\r\n    <span class=\"hljs-type\">double</span> numerator = n;\r\n    <span class=\"hljs-type\">double</span> denominator = r;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = n - <span class=\"hljs-number\">1</span>; i &gt;= ((n - r) + <span class=\"hljs-number\">1</span>); i--) {\r\n        numerator *= i;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; r; i++) {\r\n        denominator *= i;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> numerator / denominator;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** calculates the probability of exactly x successes\r\n * \\returns \\f$\\displaystyle P(n,p,x) = {n\\choose x} p^x (1-p)^{n-x}\\f$\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">binomial_x_successes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n, <span class=\"hljs-type\">double</span> p, <span class=\"hljs-type\">double</span> x)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">nCr</span>(n, x) * std::<span class=\"hljs-built_in\">pow</span>(p, x) * std::<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">1</span> - p, n - x);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** calculates the probability of a result within a range (inclusive, inclusive)\r\n * \\returns \\f$\\displaystyle \\left.P(n,p)\\right|_{x_0}^{x_1} =\r\n * \\sum_{i=x_0}^{x_1} P(i)\r\n * =\\sum_{i=x_0}^{x_1} {n\\choose i} p^i (1-p)^{n-i}\\f$\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">binomial_range_successes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n, <span class=\"hljs-type\">double</span> p, <span class=\"hljs-type\">double</span> lower_bound,\r\n                                <span class=\"hljs-type\">double</span> upper_bound)</span> </span>{\r\n    <span class=\"hljs-type\">double</span> probability = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = lower_bound; i &lt;= upper_bound; i++) {\r\n        probability += <span class=\"hljs-built_in\">nCr</span>(n, i) * std::<span class=\"hljs-built_in\">pow</span>(p, i) * std::<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">1</span> - p, n - i);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> probability;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;expected value : &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">binomial_expected</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0.5</span>)\r\n              &lt;&lt; std::endl;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;variance : &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">binomial_variance</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0.5</span>) &lt;&lt; std::endl;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;standard deviation : &quot;</span>\r\n              &lt;&lt; <span class=\"hljs-built_in\">binomial_standard_deviation</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0.5</span>) &lt;&lt; std::endl;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;exactly 30 successes : &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">binomial_x_successes</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">30</span>)\r\n              &lt;&lt; std::endl;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;45 or more successes : &quot;</span>\r\n              &lt;&lt; <span class=\"hljs-built_in\">binomial_range_successes</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">100</span>) &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dylan Robertson",
      "email": "31269647+RobotRage@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}