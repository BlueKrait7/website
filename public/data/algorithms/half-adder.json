{
  "slug": "half-adder",
  "name": "Half Adder",
  "categories": [
    "quantum"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "quantum\\half_adder.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/quantum\\half_adder.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nBuild a half-adder quantum circuit that takes two bits as input,\r\nencodes them into qubits, then runs the half-adder circuit calculating\r\nthe sum and carry qubits, observed over 1000 runs of the experiment\r\n.\r\n\r\nReferences:\r\nhttps://en.wikipedia.org/wiki/Adder_(electronics)\r\nhttps://qiskit.org/textbook/ch-states/atoms-computation.html#4.2-Remembering-how-to-add-\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> qiskit <span class=\"hljs-keyword\">as</span> q\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">half_adder</span>(<span class=\"hljs-params\">bit0: <span class=\"hljs-built_in\">int</span>, bit1: <span class=\"hljs-built_in\">int</span></span>) -&gt; q.result.counts.Counts:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; half_adder(0, 0)\r\n    {&#x27;00&#x27;: 1000}\r\n    &gt;&gt;&gt; half_adder(0, 1)\r\n    {&#x27;01&#x27;: 1000}\r\n    &gt;&gt;&gt; half_adder(1, 0)\r\n    {&#x27;01&#x27;: 1000}\r\n    &gt;&gt;&gt; half_adder(1, 1)\r\n    {&#x27;10&#x27;: 1000}\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Use Aer&#x27;s qasm_simulator</span>\r\n    simulator = q.Aer.get_backend(<span class=\"hljs-string\">&quot;qasm_simulator&quot;</span>)\r\n\r\n    qc_ha = q.QuantumCircuit(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-comment\"># encode inputs in qubits 0 and 1</span>\r\n    <span class=\"hljs-keyword\">if</span> bit0 == <span class=\"hljs-number\">1</span>:\r\n        qc_ha.x(<span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-keyword\">if</span> bit1 == <span class=\"hljs-number\">1</span>:\r\n        qc_ha.x(<span class=\"hljs-number\">1</span>)\r\n    qc_ha.barrier()\r\n\r\n    <span class=\"hljs-comment\"># use cnots to write XOR of the inputs on qubit2</span>\r\n    qc_ha.cx(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)\r\n    qc_ha.cx(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-comment\"># use ccx / toffoli gate to write AND of the inputs on qubit3</span>\r\n    qc_ha.ccx(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>)\r\n    qc_ha.barrier()\r\n\r\n    <span class=\"hljs-comment\"># extract outputs</span>\r\n    qc_ha.measure(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\"># extract XOR value</span>\r\n    qc_ha.measure(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># extract AND value</span>\r\n\r\n    <span class=\"hljs-comment\"># Execute the circuit on the qasm simulator</span>\r\n    job = q.execute(qc_ha, simulator, shots=<span class=\"hljs-number\">1000</span>)\r\n\r\n    <span class=\"hljs-comment\"># Return the histogram data of the results of the experiment.</span>\r\n    <span class=\"hljs-keyword\">return</span> job.result().get_counts(qc_ha)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    counts = half_adder(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Half Adder Output Qubit Counts: <span class=\"hljs-subst\">{counts}</span>&quot;</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Abhishek Jaisingh",
      "email": "abhi2254015@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}