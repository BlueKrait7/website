{
  "slug": "pascal-triangle",
  "name": "Pascal Triangle",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths\\test\\PascalTriangle.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\PascalTriangle.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { generate } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../PascalTriangle&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Pascals Triangle&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should have the the same length as the number&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> pascalsTriangle = <span class=\"hljs-title function_\">generate</span>(<span class=\"hljs-number\">5</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(pascalsTriangle.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">5</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should have same length as its index in the array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> pascalsTriangle = <span class=\"hljs-title function_\">generate</span>(<span class=\"hljs-number\">5</span>)\r\n    pascalsTriangle.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">arr, index</span>) =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(arr.<span class=\"hljs-property\">length</span>).<span class=\"hljs-title function_\">toEqual</span>(index + <span class=\"hljs-number\">1</span>)\r\n    })\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return an array of arrays&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> pascalsTriangle = <span class=\"hljs-title function_\">generate</span>(<span class=\"hljs-number\">3</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(pascalsTriangle).<span class=\"hljs-title function_\">toEqual</span>(\r\n      expect.<span class=\"hljs-title function_\">arrayContaining</span>([[<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]])\r\n    )\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "others\\pascal_triangle.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others\\pascal_triangle.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Pascal&#x27;s triangle implementation\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _MSC_VER</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>  <span class=\"hljs-comment\">// required for Visual C</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iomanip&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Print the triangle\r\n * \\param [in] arr  2D-array containing Pascal numbers\r\n * \\param [in] n    depth of Pascal triangle to print\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show_pascal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **arr, <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n + i; ++j) {\r\n            <span class=\"hljs-keyword\">if</span> (arr[i][j] == <span class=\"hljs-number\">0</span>)\r\n                std::cout &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(<span class=\"hljs-number\">4</span>) &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n            <span class=\"hljs-keyword\">else</span>\r\n                std::cout &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(<span class=\"hljs-number\">4</span>) &lt;&lt; arr[i][j];\r\n        }\r\n        std::cout &lt;&lt; std::endl;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Print the triangle\r\n * \\param [in,out] arr  array containing Pascal numbers\r\n * \\param [in] n    depth of Pascal triangle to print\r\n * \\result arr pointer returned\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> **<span class=\"hljs-title\">pascal_triangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **arr, <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = n - i - <span class=\"hljs-number\">1</span>; j &lt; n + i; ++j) {\r\n            <span class=\"hljs-keyword\">if</span> (j == n - i - <span class=\"hljs-number\">1</span> || j == n + i - <span class=\"hljs-number\">1</span>)\r\n                arr[i][j] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// The edge of the Pascal triangle goes in 1</span>\r\n            <span class=\"hljs-keyword\">else</span>\r\n                arr[i][j] = arr[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + arr[i - <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">1</span>];\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> arr;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Set Pascal&#x27;s Triangle Height&quot;</span> &lt;&lt; std::endl;\r\n    std::cin &gt;&gt; n;\r\n\r\n    <span class=\"hljs-comment\">// memory allocation (Assign two-dimensional array to store Pascal triangle)</span>\r\n    <span class=\"hljs-type\">int</span> **arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span> *[n];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n        arr[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">2</span> * n - <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-built_in\">memset</span>(arr[i], <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">sizeof</span>(<span class=\"hljs-type\">int</span>) * (<span class=\"hljs-number\">2</span> * n - <span class=\"hljs-number\">1</span>));\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">pascal_triangle</span>(arr, n);\r\n    <span class=\"hljs-built_in\">show_pascal</span>(arr, n);\r\n\r\n    <span class=\"hljs-comment\">// deallocation</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n        <span class=\"hljs-keyword\">delete</span>[] arr[i];\r\n    }\r\n    <span class=\"hljs-keyword\">delete</span>[] arr;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\PascalTriangle.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\PascalTriangle.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PascalTriangle</span> {\r\n    <span class=\"hljs-comment\">/**\r\n     *In mathematics, Pascal&#x27;s triangle is a triangular array of the binomial coefficients that arises\r\n     * in probability theory, combinatorics, and algebra. In much of the Western world, it is named after\r\n     * the French mathematician Blaise Pascal, although other mathematicians studied it centuries before\r\n     * him in India, Persia, China, Germany, and Italy.\r\n     *\r\n     * The rows of Pascal&#x27;s triangle are conventionally enumerated starting with row n=0 at the top (the 0th row).\r\n     * The entries in each row are numbered from the left beginning with k=0 and are usually staggered relative\r\n     * to the numbers in the adjacent rows. The triangle may be constructed in the following manner:\r\n     * In row 0 (the topmost row), there is a unique nonzero entry 1. Each entry of each subsequent row is\r\n     * constructed by adding the number above and to the left with the number above and to the right, treating\r\n     * blank entries as 0. For example, the initial number in the first (or any other) row is 1 (the sum of 0 and 1),\r\n     * whereas the numbers 1 and 3 in the third row are added to produce the number 4 in the fourth row. *\r\n     *\r\n     *&lt;p&gt;\r\n     *     link:-https://en.wikipedia.org/wiki/Pascal%27s_triangle\r\n     *\r\n     * &lt;p&gt;\r\n     *     Example:-\r\n     *                  1\r\n     *                1   1\r\n     *              1   2   1\r\n     *            1   3   3   1\r\n     *          1   4   6   4   1\r\n     *        1   5  10   10  5   1\r\n     *      1   6  15  20   15  6   1\r\n     *    1   7  21  35   35  21  7   1\r\n     *  1   8  28  56  70   56   28  8   1\r\n     *\r\n     */</span>\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] pascal(<span class=\"hljs-type\">int</span> n)\r\n    {\r\n        <span class=\"hljs-comment\">/**\r\n         * <span class=\"hljs-doctag\">@param</span> arr  An auxiliary array to store generated pascal triangle values\r\n         * <span class=\"hljs-doctag\">@return</span>\r\n         */</span>\r\n        <span class=\"hljs-type\">int</span>[][] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n][n];\r\n        <span class=\"hljs-comment\">/**\r\n         * <span class=\"hljs-doctag\">@param</span> line Iterate through every line and print integer(s) in it\r\n         * <span class=\"hljs-doctag\">@param</span> i Represents the column number of the element we are currently on\r\n         */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">line</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; line &lt; n; line++)\r\n        {\r\n            <span class=\"hljs-comment\">/**\r\n             *  <span class=\"hljs-doctag\">@Every</span> line has number of integers equal to line number\r\n             */</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= line; i++)\r\n            {\r\n                <span class=\"hljs-comment\">// First and last values in every row are 1</span>\r\n                <span class=\"hljs-keyword\">if</span> (line == i || i == <span class=\"hljs-number\">0</span>)\r\n                    arr[line][i] = <span class=\"hljs-number\">1</span>;\r\n                    <span class=\"hljs-comment\">// The rest elements are sum of values just above and left of above</span>\r\n                <span class=\"hljs-keyword\">else</span>\r\n                    arr[line][i] = arr[line-<span class=\"hljs-number\">1</span>][i-<span class=\"hljs-number\">1</span>] + arr[line-<span class=\"hljs-number\">1</span>][i];\r\n            }\r\n        }\r\n        \r\n        <span class=\"hljs-keyword\">return</span> arr;\r\n    }\r\n}\r\n"
    },
    "go": {
      "dir": "math\\pascal\\pascaltriangle.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math\\pascal\\pascaltriangle.go",
      "code": "<span class=\"hljs-comment\">// pascaltriangle.go</span>\r\n<span class=\"hljs-comment\">// description: Pascal&#x27;s triangle</span>\r\n<span class=\"hljs-comment\">// details:</span>\r\n<span class=\"hljs-comment\">// Pascal&#x27;s triangle is a triangular array of the binomial coefficients that arises in probability theory, combinatorics, and algebra. - [Pascal&#x27;s triangle](https://en.wikipedia.org/wiki/Pascal%27s_triangle)</span>\r\n<span class=\"hljs-comment\">// example:</span>\r\n<span class=\"hljs-comment\">//1</span>\r\n<span class=\"hljs-comment\">//1 1</span>\r\n<span class=\"hljs-comment\">//1 2 1</span>\r\n<span class=\"hljs-comment\">//1 3 3 1</span>\r\n<span class=\"hljs-comment\">//1 4 6 4 1</span>\r\n<span class=\"hljs-comment\">//1 5 10 10 5 1</span>\r\n<span class=\"hljs-comment\">//1 6 15 20 15 6 1</span>\r\n<span class=\"hljs-comment\">//1 7 21 35 35 21 7 1</span>\r\n<span class=\"hljs-comment\">//1 8 28 56 70 56 28 8 1</span>\r\n<span class=\"hljs-comment\">//1 9 36 84 126 126 84 36 9 1</span>\r\n<span class=\"hljs-comment\">//1 10 45 120 210 252 210 120 45 10 1</span>\r\n<span class=\"hljs-comment\">//...</span>\r\n<span class=\"hljs-comment\">// author(s) [red_byte](https://github.com/i-redbyte)</span>\r\n<span class=\"hljs-comment\">// see pascaltriangle_test.go</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> pascal\r\n\r\n<span class=\"hljs-comment\">// GenerateTriangle This function generates a Pascal&#x27;s triangle of n lines</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GenerateTriangle</span><span class=\"hljs-params\">(n <span class=\"hljs-type\">int</span>)</span></span> [][]<span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">var</span> triangle = <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, n)\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ {\r\n\t\ttriangle[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, i+<span class=\"hljs-number\">1</span>)\r\n\t\ttriangle[i][<span class=\"hljs-number\">0</span>], triangle[i][i] = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>\r\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt; i; j++ {\r\n\t\t\ttriangle[i][j] = triangle[i<span class=\"hljs-number\">-1</span>][j] + triangle[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> triangle\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\math\\pascal_triangle.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\math\\pascal_triangle.rs",
      "code": "<span class=\"hljs-comment\">/// ## Paslcal&#x27;s triangle problem</span>\r\n\r\n<span class=\"hljs-comment\">/// pascal_triangle(num_rows) returns the first num_rows of Pascal&#x27;s triangle.</span>\r\n<span class=\"hljs-comment\">/// About Pascal&#x27;s triangle: https://en.wikipedia.org/wiki/Pascal%27s_triangle</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Arguments:</span>\r\n<span class=\"hljs-comment\">///     * `num_rows` - number of rows of triangle</span>\r\n<span class=\"hljs-comment\">/// Complexity</span>\r\n<span class=\"hljs-comment\">///     - time complexity: O(n^2),</span>\r\n<span class=\"hljs-comment\">///     - space complexity: O(n^2),</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">pascal_triangle</span>(num_rows: <span class=\"hljs-type\">i32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ans</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[];\r\n\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..num_rows + <span class=\"hljs-number\">1</span> {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">vec</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>];\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span>: <span class=\"hljs-type\">i32</span> = <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..i {\r\n            res *= i - k;\r\n            res /= k;\r\n            vec.<span class=\"hljs-title function_ invoke__\">push</span>(res);\r\n        }\r\n        ans.<span class=\"hljs-title function_ invoke__\">push</span>(vec);\r\n    }\r\n\r\n    ans\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::pascal_triangle;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">pascal_triangle</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">pascal_triangle</span>(<span class=\"hljs-number\">4</span>),\r\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>]]\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">pascal_triangle</span>(<span class=\"hljs-number\">5</span>),\r\n            <span class=\"hljs-built_in\">vec!</span>[\r\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>],\r\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],\r\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],\r\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>],\r\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>]\r\n            ]\r\n        );\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "duy quang",
      "email": "hyouka266@gmail.com",
      "commits": 1
    },
    {
      "name": "Ilya Sokolov",
      "email": "developer.sokolov@gmail.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nour B",
      "email": "56294154+nourrrrrrrr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hardik Soni",
      "email": "79035082+iamhardikat11@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "joker123",
      "email": "56662119+leechiyun@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ephraim Atta-Duncan",
      "email": "55143799+dephraiim@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}