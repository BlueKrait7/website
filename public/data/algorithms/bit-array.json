{
  "slug": "bit-array",
  "name": "Bit Array",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/BitArray.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\DataStructures\\BitArray.cs",
      "code": "ï»¿<span class=\"hljs-comment\">// Original Author: Christian Bender</span>\r\n<span class=\"hljs-comment\">// Class: BitArray</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// implements IComparable, ICloneable, IEnumerator, IEnumerable</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// This class implements a bit-array and provides some</span>\r\n<span class=\"hljs-comment\">// useful functions/operations to deal with this type of</span>\r\n<span class=\"hljs-comment\">// data structure. You see a overview about the functionality, below.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Overview</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Constructor (N : int)</span>\r\n<span class=\"hljs-comment\">// The constructor receives a length (N) of the to create bit-field.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Constructor (sequence : string)</span>\r\n<span class=\"hljs-comment\">// setups the array with the input sequence.</span>\r\n<span class=\"hljs-comment\">// assumes: the sequence may only be allowed contains onese or zeros.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Constructor (bits : bool[] )</span>\r\n<span class=\"hljs-comment\">// setups the bit-field with the input array.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Compile(sequence : string)</span>\r\n<span class=\"hljs-comment\">// compiles a string sequence of 0&#x27;s and 1&#x27;s in the inner structure.</span>\r\n<span class=\"hljs-comment\">// assumes: the sequence may only be allowed contains onese or zeros.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Compile (number : int)</span>\r\n<span class=\"hljs-comment\">// compiles a positive integer number in the inner data structure.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Compile (number : long)</span>\r\n<span class=\"hljs-comment\">// compiles a positive long integer number in the inner data structure.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// ToString ()</span>\r\n<span class=\"hljs-comment\">// returns a string representation of the inner structure.</span>\r\n<span class=\"hljs-comment\">// The returned string is a sequence of 0&#x27;s and 1&#x27;s.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Length : int</span>\r\n<span class=\"hljs-comment\">// Is a property that returns the length of the bit-field.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Indexer : bool</span>\r\n<span class=\"hljs-comment\">// indexer for selecting the individual bits of the bit array.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// NumberOfOneBits() : int</span>\r\n<span class=\"hljs-comment\">// returns the number of One-bits.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// NumberOfZeroBits() : int</span>\r\n<span class=\"hljs-comment\">// returns the number of Zero-Bits.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// EvenParity() : bool</span>\r\n<span class=\"hljs-comment\">// returns true if parity is even, otherwise false.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// OddParity() : bool</span>\r\n<span class=\"hljs-comment\">// returns true if parity is odd, otherwise false.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// ToInt64() : long</span>\r\n<span class=\"hljs-comment\">// returns a long integer representation of the bit-array.</span>\r\n<span class=\"hljs-comment\">// assumes: the bit-array length must been smaller or equal to 64 bit.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// ToInt32() : int</span>\r\n<span class=\"hljs-comment\">// returns a integer representation of the bit-array.</span>\r\n<span class=\"hljs-comment\">// assumes: the bit-array length must been smaller or equal to 32 bit.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// ResetField() : void</span>\r\n<span class=\"hljs-comment\">// sets all bits on false.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// SetAll(flag : bool) : void</span>\r\n<span class=\"hljs-comment\">// sets all bits on the value of the flag.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// GetHashCode() : int</span>\r\n<span class=\"hljs-comment\">// returns hash-code (ToInt32())</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Equals (other : Object) : bool</span>\r\n<span class=\"hljs-comment\">// returns true if there inputs are equal otherwise false.</span>\r\n<span class=\"hljs-comment\">// assumes: the input bit-arrays must have same length.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// CompareTo (other : Object) : int  (interface IComparable)</span>\r\n<span class=\"hljs-comment\">// output:  0 - if the bit-arrays a equal.</span>\r\n<span class=\"hljs-comment\">// -1 - if this bit-array is smaller.</span>\r\n<span class=\"hljs-comment\">// 1 - if this bit-array is greater.</span>\r\n<span class=\"hljs-comment\">// assumes: bit-array lentgh must been smaller or equal to 64 bit</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Clone () : object</span>\r\n<span class=\"hljs-comment\">// returns a copy of this bit-array</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Current : object</span>\r\n<span class=\"hljs-comment\">// returns the current selected bit.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// MoveNext() : bool</span>\r\n<span class=\"hljs-comment\">// purpose: increases the position of the enumerator</span>\r\n<span class=\"hljs-comment\">// returns true if &#x27;position&#x27; successful increased otherwise false.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Reset() : void</span>\r\n<span class=\"hljs-comment\">// resets the position of the enumerator.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// GetEnumerator() : IEnumerator</span>\r\n<span class=\"hljs-comment\">// returns a enumerator for this BitArray-object.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Operations:</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// &amp;amp; bitwise AND</span>\r\n<span class=\"hljs-comment\">// | bitwise OR</span>\r\n<span class=\"hljs-comment\">// ~ bitwise NOT</span>\r\n<span class=\"hljs-comment\">// &gt;&gt; bitwise shift right</span>\r\n<span class=\"hljs-comment\">// &gt;&gt; bitwise shift left</span>\r\n<span class=\"hljs-comment\">// ^ bitwise XOR</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// Each operation (above) returns a new BitArray-object.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// == equal operator. : bool</span>\r\n<span class=\"hljs-comment\">// returns true if there inputs are equal otherwise false.</span>\r\n<span class=\"hljs-comment\">// assumes: the input bit-arrays must have same length.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// != not-equal operator : bool</span>\r\n<span class=\"hljs-comment\">// returns true if there inputs aren&#x27;t equal otherwise false.</span>\r\n<span class=\"hljs-comment\">// assumes: the input bit-arrays must have same length.</span>\r\n\r\n<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n<span class=\"hljs-keyword\">using</span> System.Text;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This class implements a bit-array and provides some</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     useful functions/operations to deal with this type of</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     data structure.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">sealed</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BitArray</span> : <span class=\"hljs-title\">ICloneable</span>, <span class=\"hljs-title\">IEnumerator</span>&lt;<span class=\"hljs-title\">bool</span>&gt;, <span class=\"hljs-title\">IEnumerable</span>&lt;<span class=\"hljs-title\">bool</span>&gt;\r\n    {\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">bool</span>[] field; <span class=\"hljs-comment\">// the actual bit-field</span>\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> position = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">// position for enumerator</span>\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;BitArray&quot; /&gt;</span> class.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     setups the array with false-values.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>length of the array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BitArray</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> n</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">1</span>)\r\n            {\r\n                field = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">bool</span>[<span class=\"hljs-number\">0</span>];\r\n            }\r\n\r\n            field = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">bool</span>[n];\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;BitArray&quot; /&gt;</span> class.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Setups the array with the input sequence.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     purpose: Setups the array with the input sequence.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     assumes: sequence must been greater or equal to 1.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the sequence may only contain ones or zeros.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sequence&quot;&gt;</span>A string sequence of 0&#x27;s and 1&#x27;s.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BitArray</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> sequence</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// precondition I</span>\r\n            <span class=\"hljs-keyword\">if</span> (sequence.Length &lt;= <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Sequence must been greater than or equal to 1&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// precondition II</span>\r\n            ThrowIfSequenceIsInvalid(sequence);\r\n\r\n            field = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">bool</span>[sequence.Length];\r\n            Compile(sequence);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;BitArray&quot; /&gt;</span> class.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Setups the bit-array with the input array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bits&quot;&gt;</span>A boolean array of bits.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BitArray</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span>[] bits</span>)</span> =&gt; field = bits;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the length of the current bit array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> Length =&gt; field.Length;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets element given an offset.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;offset&quot;&gt;</span>Position.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Element on array.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-keyword\">this</span>[<span class=\"hljs-built_in\">int</span> offset]\r\n        {\r\n            <span class=\"hljs-keyword\">get</span> =&gt; field[offset];\r\n            <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">set</span> =&gt; field[offset] = <span class=\"hljs-keyword\">value</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a copy of the current bit-array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Bit-array clone.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">object</span> <span class=\"hljs-title\">Clone</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> theClone = <span class=\"hljs-keyword\">new</span> BitArray(Length);\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; Length; i++)\r\n            {\r\n                theClone[i] = field[i];\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> theClone;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets a enumerator for this BitArray-Object.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns a enumerator for this BitArray-Object.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerator&lt;<span class=\"hljs-built_in\">bool</span>&gt; <span class=\"hljs-title\">GetEnumerator</span>()</span> =&gt; <span class=\"hljs-keyword\">this</span>;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets a enumerator for this BitArray-Object.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns a enumerator for this BitArray-Object.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        IEnumerator IEnumerable.GetEnumerator() =&gt; <span class=\"hljs-keyword\">this</span>;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets a value indicating whether the current bit of the array is set.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> Current =&gt; field[position];\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets a value indicating whether the current bit of the array is set.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-built_in\">object</span> IEnumerator.Current =&gt; field[position];\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     MoveNext (for interface IEnumerator).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns True if &#x27;position&#x27; successful increased; False otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">MoveNext</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (position + <span class=\"hljs-number\">1</span> &gt;= field.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n\r\n            position++;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Resets the position of the enumerator.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Reset (for interface IEnumerator).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Reset</span>()</span> =&gt; position = <span class=\"hljs-number\">-1</span>;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Disposes object, nothing to dispose here though.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Dispose</span>()</span>\r\n        {\r\n            <span class=\"hljs-comment\">// Done</span>\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a bit-array that represents the bit by bit AND (&amp;amp;).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes arrays have the same length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;one&quot;&gt;</span>First bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;two&quot;&gt;</span>Second bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>bit-array.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> BitArray <span class=\"hljs-keyword\">operator</span> &amp;(BitArray one, BitArray two)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> sequence1 = one.ToString();\r\n            <span class=\"hljs-keyword\">var</span> sequence2 = two.ToString();\r\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> StringBuilder();\r\n            <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-keyword\">new</span> StringBuilder();\r\n\r\n            <span class=\"hljs-comment\">// for scaling of same length.</span>\r\n            <span class=\"hljs-keyword\">if</span> (one.Length != two.Length)\r\n            {\r\n                <span class=\"hljs-built_in\">int</span> difference;\r\n                <span class=\"hljs-keyword\">if</span> (one.Length &gt; two.Length)\r\n                {\r\n                    <span class=\"hljs-comment\">// one is greater</span>\r\n                    difference = one.Length - two.Length;\r\n\r\n                    <span class=\"hljs-comment\">// fills up with 0&#x27;s</span>\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; difference; i++)\r\n                    {\r\n                        tmp.Append(<span class=\"hljs-string\">&#x27;0&#x27;</span>);\r\n                    }\r\n\r\n                    tmp.Append(two);\r\n                    sequence2 = tmp.ToString();\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    <span class=\"hljs-comment\">// two is greater</span>\r\n                    difference = two.Length - one.Length;\r\n\r\n                    <span class=\"hljs-comment\">// fills up with 0&#x27;s</span>\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; difference; i++)\r\n                    {\r\n                        tmp.Append(<span class=\"hljs-string\">&#x27;0&#x27;</span>);\r\n                    }\r\n\r\n                    tmp.Append(one);\r\n                    sequence1 = tmp.ToString();\r\n                }\r\n            } <span class=\"hljs-comment\">// end scaling</span>\r\n\r\n            <span class=\"hljs-keyword\">var</span> len = one.Length &gt; two.Length ? one.Length : two.Length;\r\n            <span class=\"hljs-keyword\">var</span> ans = <span class=\"hljs-keyword\">new</span> BitArray(len);\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; one.Length; i++)\r\n            {\r\n                result.Append(sequence1[i].Equals(<span class=\"hljs-string\">&#x27;1&#x27;</span>) &amp;&amp; sequence2[i].Equals(<span class=\"hljs-string\">&#x27;1&#x27;</span>) ? <span class=\"hljs-string\">&#x27;1&#x27;</span> : <span class=\"hljs-string\">&#x27;0&#x27;</span>);\r\n            }\r\n\r\n            ans.Compile(result.ToString().Trim());\r\n\r\n            <span class=\"hljs-keyword\">return</span> ans;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a bit-array that represents the bit by bit OR.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes arrays have the same length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;one&quot;&gt;</span>First bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;two&quot;&gt;</span>Second bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>bit-array that represents the bit by bit OR.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> BitArray <span class=\"hljs-keyword\">operator</span> |(BitArray one, BitArray two)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> sequence1 = one.ToString();\r\n            <span class=\"hljs-keyword\">var</span> sequence2 = two.ToString();\r\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-built_in\">string</span>.Empty;\r\n            <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-built_in\">string</span>.Empty;\r\n\r\n            <span class=\"hljs-comment\">// for scaling of same length.</span>\r\n            <span class=\"hljs-keyword\">if</span> (one.Length != two.Length)\r\n            {\r\n                <span class=\"hljs-built_in\">int</span> difference;\r\n                <span class=\"hljs-keyword\">if</span> (one.Length &gt; two.Length)\r\n                {\r\n                    <span class=\"hljs-comment\">// one is greater</span>\r\n                    difference = one.Length - two.Length;\r\n\r\n                    <span class=\"hljs-comment\">// fills up with 0&#x27;s</span>\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; difference; i++)\r\n                    {\r\n                        tmp += <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n                    }\r\n\r\n                    tmp += two.ToString();\r\n                    sequence2 = tmp;\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    <span class=\"hljs-comment\">// two is greater</span>\r\n                    difference = two.Length - one.Length;\r\n\r\n                    <span class=\"hljs-comment\">// fills up with 0&#x27;s</span>\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; difference; i++)\r\n                    {\r\n                        tmp += <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n                    }\r\n\r\n                    tmp += one.ToString();\r\n                    sequence1 = tmp;\r\n                }\r\n            } <span class=\"hljs-comment\">// end scaling</span>\r\n\r\n            <span class=\"hljs-keyword\">var</span> len = one.Length &gt; two.Length ? one.Length : two.Length;\r\n            <span class=\"hljs-keyword\">var</span> ans = <span class=\"hljs-keyword\">new</span> BitArray(len);\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++)\r\n            {\r\n                result += sequence1[i].Equals(<span class=\"hljs-string\">&#x27;0&#x27;</span>) &amp;&amp; sequence2[i].Equals(<span class=\"hljs-string\">&#x27;0&#x27;</span>) ? <span class=\"hljs-string\">&#x27;0&#x27;</span> : <span class=\"hljs-string\">&#x27;1&#x27;</span>;\r\n            }\r\n\r\n            result = result.Trim();\r\n            ans.Compile(result);\r\n\r\n            <span class=\"hljs-keyword\">return</span> ans;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a bit-array that represents the operator ~ (NOT).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes arrays have the same length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;one&quot;&gt;</span>Bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>bitwise not.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> BitArray <span class=\"hljs-keyword\">operator</span> ~(BitArray one)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> ans = <span class=\"hljs-keyword\">new</span> BitArray(one.Length);\r\n            <span class=\"hljs-keyword\">var</span> sequence = one.ToString();\r\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-built_in\">string</span>.Empty;\r\n\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> ch <span class=\"hljs-keyword\">in</span> sequence)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (ch == <span class=\"hljs-string\">&#x27;1&#x27;</span>)\r\n                {\r\n                    result += <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    result += <span class=\"hljs-string\">&#x27;1&#x27;</span>;\r\n                }\r\n            }\r\n\r\n            result = result.Trim();\r\n            ans.Compile(result);\r\n\r\n            <span class=\"hljs-keyword\">return</span> ans;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a bit-array that represents bitwise shift left (&amp;gt;&amp;gt;).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes arrays have the same length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;other&quot;&gt;</span>Bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>Number of bits.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Bitwise shifted BitArray.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> BitArray <span class=\"hljs-keyword\">operator</span> &lt;&lt;(BitArray other, <span class=\"hljs-built_in\">int</span> n)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> ans = <span class=\"hljs-keyword\">new</span> BitArray(other.Length + n);\r\n\r\n            <span class=\"hljs-comment\">// actual shifting process</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; other.Length; i++)\r\n            {\r\n                ans[i] = other[i];\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> ans;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a bit-array that represents the bit by bit XOR.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes arrays have the same length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;one&quot;&gt;</span>First bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;two&quot;&gt;</span>Second bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>bit-array.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> BitArray <span class=\"hljs-keyword\">operator</span> ^(BitArray one, BitArray two)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> sequence1 = one.ToString();\r\n            <span class=\"hljs-keyword\">var</span> sequence2 = two.ToString();\r\n            <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-built_in\">string</span>.Empty;\r\n\r\n            <span class=\"hljs-comment\">// for scaling of same length.</span>\r\n            <span class=\"hljs-keyword\">if</span> (one.Length != two.Length)\r\n            {\r\n                <span class=\"hljs-built_in\">int</span> difference;\r\n                <span class=\"hljs-keyword\">if</span> (one.Length &gt; two.Length)\r\n                {\r\n                    <span class=\"hljs-comment\">// one is greater</span>\r\n                    difference = one.Length - two.Length;\r\n\r\n                    <span class=\"hljs-comment\">// fills up with 0&#x27;s</span>\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; difference; i++)\r\n                    {\r\n                        tmp += <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n                    }\r\n\r\n                    tmp += two.ToString();\r\n                    sequence2 = tmp;\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    <span class=\"hljs-comment\">// two is greater</span>\r\n                    difference = two.Length - one.Length;\r\n\r\n                    <span class=\"hljs-comment\">// fills up with 0&#x27;s</span>\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; difference; i++)\r\n                    {\r\n                        tmp += <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n                    }\r\n\r\n                    tmp += one.ToString();\r\n                    sequence1 = tmp;\r\n                }\r\n            } <span class=\"hljs-comment\">// end scaling</span>\r\n\r\n            <span class=\"hljs-keyword\">var</span> len = one.Length &gt; two.Length ? one.Length : two.Length;\r\n            <span class=\"hljs-keyword\">var</span> ans = <span class=\"hljs-keyword\">new</span> BitArray(len);\r\n\r\n            <span class=\"hljs-keyword\">var</span> sb = <span class=\"hljs-keyword\">new</span> StringBuilder();\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++)\r\n            {\r\n                _ = sb.Append(sequence1[i] == sequence2[i] ? <span class=\"hljs-string\">&#x27;0&#x27;</span> : <span class=\"hljs-string\">&#x27;1&#x27;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> result = sb.ToString().Trim();\r\n            ans.Compile(result);\r\n\r\n            <span class=\"hljs-keyword\">return</span> ans;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a bit-array that represents bitwise shift right (&gt;&gt;).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes arrays have the same length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;other&quot;&gt;</span>Bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>Number of bits.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Bitwise shifted BitArray.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> BitArray <span class=\"hljs-keyword\">operator</span> &gt;&gt;(BitArray other, <span class=\"hljs-built_in\">int</span> n)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> ans = <span class=\"hljs-keyword\">new</span> BitArray(other.Length - n);\r\n\r\n            <span class=\"hljs-comment\">// actual shifting process.</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; other.Length - n; i++)\r\n            {\r\n                ans[i] = other[i];\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> ans;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks if both arrays are == (equal).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The input assumes arrays have the same length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;one&quot;&gt;</span>First bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;two&quot;&gt;</span>Second bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns True if there inputs are equal; False otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-keyword\">operator</span> ==(BitArray one, BitArray two)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (ReferenceEquals(one, two))\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (one.Length != two.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> status = <span class=\"hljs-literal\">true</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; one.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (one[i] != two[i])\r\n                {\r\n                    status = <span class=\"hljs-literal\">false</span>;\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> status;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks if both arrays are != (not-equal).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The input assumes arrays have the same length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;one&quot;&gt;</span>First bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;two&quot;&gt;</span>Second bit-array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns True if there inputs aren&#x27;t equal; False otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-keyword\">operator</span> !=(BitArray one, BitArray two) =&gt; !(one == two);\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Compiles the binary sequence into the inner data structure.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The sequence must have the same length, as the bit-array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The sequence may only be allowed contains ones or zeros.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sequence&quot;&gt;</span>A string sequence of 0&#x27;s and 1&#x27;s.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Compile</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> sequence</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// precondition I</span>\r\n            <span class=\"hljs-keyword\">if</span> (sequence.Length &gt; field.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(sequence)}</span> must be not longer than the bit array length&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// precondition II</span>\r\n            ThrowIfSequenceIsInvalid(sequence);\r\n\r\n            <span class=\"hljs-comment\">// for appropriate scaling</span>\r\n            <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-built_in\">string</span>.Empty;\r\n            <span class=\"hljs-keyword\">if</span> (sequence.Length &lt; field.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> difference = field.Length - sequence.Length;\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; difference; i++)\r\n                {\r\n                    tmp += <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n                }\r\n\r\n                tmp += sequence;\r\n                sequence = tmp;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// actual compile procedure.</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; sequence.Length; i++)\r\n            {\r\n                field[i] = sequence[i] == <span class=\"hljs-string\">&#x27;1&#x27;</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Compiles integer number into the inner data structure.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes: the number must have the same bit length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>A positive integer number.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Compile</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> number</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-built_in\">string</span>.Empty;\r\n\r\n            <span class=\"hljs-comment\">// precondition I</span>\r\n            <span class=\"hljs-keyword\">if</span> (number &lt;= <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(number)}</span> must be positive&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// converts to binary representation</span>\r\n            <span class=\"hljs-keyword\">var</span> binaryNumber = Convert.ToString(number, <span class=\"hljs-number\">2</span>);\r\n\r\n            <span class=\"hljs-comment\">// precondition II</span>\r\n            <span class=\"hljs-keyword\">if</span> (binaryNumber.Length &gt; field.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Provided number is too big&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// for appropriate scaling</span>\r\n            <span class=\"hljs-keyword\">if</span> (binaryNumber.Length &lt; field.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> difference = field.Length - binaryNumber.Length;\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; difference; i++)\r\n                {\r\n                    tmp += <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n                }\r\n\r\n                tmp += binaryNumber;\r\n                binaryNumber = tmp;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// actual compile procedure.</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; binaryNumber.Length; i++)\r\n            {\r\n                field[i] = binaryNumber[i] == <span class=\"hljs-string\">&#x27;1&#x27;</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Compiles integer number into the inner data structure.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The number must have the same bit length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>A positive long integer number.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Compile</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">long</span> number</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-built_in\">string</span>.Empty;\r\n\r\n            <span class=\"hljs-comment\">// precondition I</span>\r\n            <span class=\"hljs-keyword\">if</span> (number &lt;= <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(number)}</span> must be positive&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// converts to binary representation</span>\r\n            <span class=\"hljs-keyword\">var</span> binaryNumber = Convert.ToString(number, <span class=\"hljs-number\">2</span>);\r\n\r\n            <span class=\"hljs-comment\">// precondition II</span>\r\n            <span class=\"hljs-keyword\">if</span> (binaryNumber.Length &gt; field.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Provided number is too big&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// for appropriate scaling</span>\r\n            <span class=\"hljs-keyword\">if</span> (binaryNumber.Length &lt; field.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> difference = field.Length - binaryNumber.Length;\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; difference; i++)\r\n                {\r\n                    tmp += <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n                }\r\n\r\n                tmp += binaryNumber;\r\n                binaryNumber = tmp;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// actual compile procedure.</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; binaryNumber.Length; i++)\r\n            {\r\n                field[i] = binaryNumber[i] == <span class=\"hljs-string\">&#x27;1&#x27;</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Is the opposit of the Compile(...) method.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns a string representation of the inner data structure.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">ToString</span>()</span>\r\n        {\r\n            <span class=\"hljs-comment\">// creates return-string</span>\r\n            <span class=\"hljs-keyword\">return</span> field.Aggregate(<span class=\"hljs-built_in\">string</span>.Empty, (current, t) =&gt; current + (t ? <span class=\"hljs-string\">&quot;1&quot;</span> : <span class=\"hljs-string\">&quot;0&quot;</span>));\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the number of one-bits in the field.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>quantity of bits in current bit-array.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">NumberOfOneBits</span>()</span>\r\n        {\r\n            <span class=\"hljs-comment\">// counting one-bits.</span>\r\n            <span class=\"hljs-keyword\">return</span> field.Count(bit =&gt; bit);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the number of zero-bits in the field.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>quantity of bits.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">NumberOfZeroBits</span>()</span>\r\n        {\r\n            <span class=\"hljs-comment\">// counting zero-bits</span>\r\n            <span class=\"hljs-keyword\">return</span> field.Count(bit =&gt; !bit);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To check for even parity.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns True if parity is even; False otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">EvenParity</span>()</span> =&gt; NumberOfOneBits() % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To check for odd parity.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns True if parity is odd; False otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">OddParity</span>()</span> =&gt; NumberOfOneBits() % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a long integer representation of the bit-array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes the bit-array length must been smaller or equal to 64 bit.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Long integer array.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">long</span> <span class=\"hljs-title\">ToInt64</span>()</span>\r\n        {\r\n            <span class=\"hljs-comment\">// Precondition</span>\r\n            <span class=\"hljs-keyword\">if</span> (field.Length &gt; <span class=\"hljs-number\">64</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Value is too big to fit into Int64&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> sequence = ToString();\r\n            <span class=\"hljs-keyword\">return</span> Convert.ToInt64(sequence, <span class=\"hljs-number\">2</span>);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a long integer representation of the bit-array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes the bit-array length must been smaller or equal to 32 bit.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>integer array.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">ToInt32</span>()</span>\r\n        {\r\n            <span class=\"hljs-comment\">// Precondition</span>\r\n            <span class=\"hljs-keyword\">if</span> (field.Length &gt; <span class=\"hljs-number\">32</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Value is too big to fit into Int32&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> sequence = ToString();\r\n            <span class=\"hljs-keyword\">return</span> Convert.ToInt32(sequence, <span class=\"hljs-number\">2</span>);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sets all bits on false.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ResetField</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; field.Length; i++)\r\n            {\r\n                field[i] = <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sets all bits on the value of the flag.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;flag&quot;&gt;</span>Bollean flag (false-true).<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SetAll</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span> flag</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; field.Length; i++)\r\n            {\r\n                field[i] = flag;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks if bit-array are equal.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes the input bit-arrays must have same length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;obj&quot;&gt;</span>Bit-array object.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns true if there inputs are equal otherwise false.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Equals</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">object</span>? obj</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (obj <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> otherBitArray = (BitArray)obj;\r\n\r\n            <span class=\"hljs-keyword\">if</span> (Length != otherBitArray.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (field[i] != otherBitArray[i])\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets has-code of bit-array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assumes bit-array length must been smaller or equal to 32.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>hash-code for this BitArray instance.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetHashCode</span>()</span> =&gt; ToInt32();\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ThrowIfSequenceIsInvalid</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> sequence</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (!Match(sequence))\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;The sequence may only contain ones or zeros&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Utility method foir checking a given sequence contains only zeros and ones.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This method will used in Constructor (sequence : string) and Compile(sequence : string).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sequence&quot;&gt;</span>String sequence.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>returns True if sequence contains only zeros and ones; False otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Match</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> sequence</span>)</span> =&gt; sequence.All(ch =&gt; ch == <span class=\"hljs-string\">&#x27;0&#x27;</span> || ch == <span class=\"hljs-string\">&#x27;1&#x27;</span>);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "cuno92",
      "email": "58431215+cuno92@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    },
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}