{
  "slug": "check-factorial",
  "name": "Check Factorial",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\check_factorial.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\check_factorial.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief A simple program to check if the given number is a factorial of some\r\n * number or not.\r\n * @author [Divyajyoti Ukirde](https://github.com/divyajyotiuk)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to check if the given number is factorial of some number or not.\r\n * @param n number to be checked.\r\n * @return if number is a factorial, returns true, else false.\r\n */</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_factorial</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">1</span>;; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (n % i != <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n        n = n / i;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Test function\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1:\\t n=50\\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_factorial</span>(<span class=\"hljs-number\">50</span>) == <span class=\"hljs-literal\">false</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2:\\t n=720\\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_factorial</span>(<span class=\"hljs-number\">720</span>) == <span class=\"hljs-literal\">true</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3:\\t n=0\\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_factorial</span>(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-literal\">false</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4:\\t n=479001600\\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_factorial</span>(<span class=\"hljs-number\">479001600</span>) == <span class=\"hljs-literal\">true</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 5:\\t n=-24\\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_factorial</span>(<span class=\"hljs-number\">-24</span>) == <span class=\"hljs-literal\">false</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">tests</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}