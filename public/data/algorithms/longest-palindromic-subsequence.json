{
  "slug": "longest-palindromic-subsequence",
  "name": "Longest Palindromic Subsequence",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Dynamic-Programming\\tests\\LongestPalindromicSubsequence.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming\\tests\\LongestPalindromicSubsequence.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { longestPalindromeSubsequence } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../LongestPalindromicSubsequence&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;LongestPalindromicSubsequence&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return 1 as longest palindromic subsequence&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">longestPalindromeSubsequence</span>(<span class=\"hljs-string\">&#x27;abcdefgh&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return 4 as longest palindromic subsequence&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">longestPalindromeSubsequence</span>(<span class=\"hljs-string\">&#x27;bbbab&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">4</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return 2 as longest palindromic subsequence&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">longestPalindromeSubsequence</span>(<span class=\"hljs-string\">&#x27;cbbd&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return 7 as longest palindromic subsequence&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">longestPalindromeSubsequence</span>(<span class=\"hljs-string\">&#x27;racexyzcxar&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">7</span>)\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming\\longest_palindromic_subsequence.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\longest_palindromic_subsequence.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Program to find the Longest Palindormic\r\n * Subsequence of a string\r\n *\r\n * @details\r\n * [Palindrome](https://en.wikipedia.org/wiki/Palindrome) string sequence of\r\n * characters which reads the same backward as forward\r\n * [Subsequence](https://en.wikipedia.org/wiki/Subsequence)  is a sequence that\r\n * can be derived from another sequence by deleting some or no elements without\r\n * changing the order of the remaining elements.\r\n\r\n * @author [Anjali Jha](https://github.com/anjali1903)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function that returns the longest palindromic\r\n * subsequence of a string\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">lps</span><span class=\"hljs-params\">(std::string a)</span> </span>{\r\n    std::string b = a;\r\n    <span class=\"hljs-built_in\">reverse</span>(b.<span class=\"hljs-built_in\">begin</span>(), b.<span class=\"hljs-built_in\">end</span>());\r\n    <span class=\"hljs-type\">int</span> m = a.<span class=\"hljs-built_in\">length</span>();\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &gt; <span class=\"hljs-built_in\">res</span>(m + <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-comment\">// Finding the length of the longest</span>\r\n    <span class=\"hljs-comment\">// palindromic subsequence and storing</span>\r\n    <span class=\"hljs-comment\">// in a 2D array in bottoms-up manner</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= m; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= m; j++) {\r\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || j == <span class=\"hljs-number\">0</span>) {\r\n                res[i][j] = <span class=\"hljs-number\">0</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[i - <span class=\"hljs-number\">1</span>] == b[j - <span class=\"hljs-number\">1</span>]) {\r\n                res[i][j] = res[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                res[i][j] = std::<span class=\"hljs-built_in\">max</span>(res[i - <span class=\"hljs-number\">1</span>][j], res[i][j - <span class=\"hljs-number\">1</span>]);\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">// Length of longest palindromic subsequence</span>\r\n    <span class=\"hljs-type\">int</span> idx = res[m][m];\r\n    <span class=\"hljs-comment\">// Creating string of index+1 length</span>\r\n    <span class=\"hljs-function\">std::string <span class=\"hljs-title\">ans</span><span class=\"hljs-params\">(idx + <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)</span></span>;\r\n    <span class=\"hljs-type\">int</span> i = m, j = m;\r\n\r\n    <span class=\"hljs-comment\">// starting from right-most bottom-most corner</span>\r\n    <span class=\"hljs-comment\">// and storing them one by one in ans</span>\r\n    <span class=\"hljs-keyword\">while</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; j &gt; <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-comment\">// if current characters in a and b are same</span>\r\n        <span class=\"hljs-comment\">// then it is a part of the ans</span>\r\n        <span class=\"hljs-keyword\">if</span> (a[i - <span class=\"hljs-number\">1</span>] == b[j - <span class=\"hljs-number\">1</span>]) {\r\n            ans[idx - <span class=\"hljs-number\">1</span>] = a[i - <span class=\"hljs-number\">1</span>];\r\n            i--;\r\n            j--;\r\n            idx--;\r\n        }\r\n        <span class=\"hljs-comment\">// If they are not same, find the larger of the</span>\r\n        <span class=\"hljs-comment\">// two and move in that direction</span>\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (res[i - <span class=\"hljs-number\">1</span>][j] &gt; res[i][j - <span class=\"hljs-number\">1</span>]) {\r\n            i--;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            j--;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> ans;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Test function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// lps(&quot;radar&quot;) return &quot;radar&quot;</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">lps</span>(<span class=\"hljs-string\">&quot;radar&quot;</span>) == <span class=\"hljs-string\">&quot;radar&quot;</span>);\r\n    <span class=\"hljs-comment\">// lps(&quot;abbcbaa&quot;) return &quot;abcba&quot;</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">lps</span>(<span class=\"hljs-string\">&quot;abbcbaa&quot;</span>) == <span class=\"hljs-string\">&quot;abcba&quot;</span>);\r\n    <span class=\"hljs-comment\">// lps(&quot;bbbab&quot;) return &quot;bbbb&quot;</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">lps</span>(<span class=\"hljs-string\">&quot;bbbab&quot;</span>) == <span class=\"hljs-string\">&quot;bbbb&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main Function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the tests</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\LongestPalindromicSubsequence.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\LongestPalindromicSubsequence.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Algorithm explanation\r\n * https://www.educative.io/edpresso/longest-palindromic-subsequence-algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LongestPalindromicSubsequence</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;BBABCBCAB&quot;</span>;\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;BABCBAB&quot;</span>;\r\n\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">aLPS</span> <span class=\"hljs-operator\">=</span> LPS(a);\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bLPS</span> <span class=\"hljs-operator\">=</span> LPS(b);\r\n\r\n        System.out.println(a + <span class=\"hljs-string\">&quot; =&gt; &quot;</span> + aLPS);\r\n        System.out.println(b + <span class=\"hljs-string\">&quot; =&gt; &quot;</span> + bLPS);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">LPS</span><span class=\"hljs-params\">(String original)</span> <span class=\"hljs-keyword\">throws</span> IllegalArgumentException {\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">reverse</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(original);\r\n        reverse = reverse.reverse();\r\n        <span class=\"hljs-keyword\">return</span> recursiveLPS(original, reverse.toString());\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">recursiveLPS</span><span class=\"hljs-params\">(String original, String reverse)</span> {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bestResult</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\r\n\r\n        <span class=\"hljs-comment\">// no more chars, then return empty</span>\r\n        <span class=\"hljs-keyword\">if</span> (original.length() == <span class=\"hljs-number\">0</span> || reverse.length() == <span class=\"hljs-number\">0</span>) {\r\n            bestResult = <span class=\"hljs-string\">&quot;&quot;</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n\r\n            <span class=\"hljs-comment\">// if the last chars match, then remove it from both strings and recur</span>\r\n            <span class=\"hljs-keyword\">if</span> (original.charAt(original.length() - <span class=\"hljs-number\">1</span>) == reverse.charAt(reverse.length() - <span class=\"hljs-number\">1</span>)) {\r\n                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bestSubResult</span>\r\n                        <span class=\"hljs-operator\">=</span> recursiveLPS(\r\n                                original.substring(<span class=\"hljs-number\">0</span>, original.length() - <span class=\"hljs-number\">1</span>),\r\n                                reverse.substring(<span class=\"hljs-number\">0</span>, reverse.length() - <span class=\"hljs-number\">1</span>));\r\n\r\n                bestResult = reverse.charAt(reverse.length() - <span class=\"hljs-number\">1</span>) + bestSubResult;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-comment\">// otherwise (1) ignore the last character of reverse, and recur on original and updated</span>\r\n                <span class=\"hljs-comment\">// reverse again</span>\r\n                <span class=\"hljs-comment\">// (2) ignore the last character of original and recur on the updated original and reverse</span>\r\n                <span class=\"hljs-comment\">// again</span>\r\n                <span class=\"hljs-comment\">// then select the best result from these two subproblems.</span>\r\n\r\n                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bestSubResult1</span> <span class=\"hljs-operator\">=</span> recursiveLPS(original, reverse.substring(<span class=\"hljs-number\">0</span>, reverse.length() - <span class=\"hljs-number\">1</span>));\r\n                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bestSubResult2</span> <span class=\"hljs-operator\">=</span> recursiveLPS(original.substring(<span class=\"hljs-number\">0</span>, original.length() - <span class=\"hljs-number\">1</span>), reverse);\r\n                <span class=\"hljs-keyword\">if</span> (bestSubResult1.length() &gt; bestSubResult2.length()) {\r\n                    bestResult = bestSubResult1;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    bestResult = bestSubResult2;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> bestResult;\r\n    }\r\n}\r\n"
    },
    "go": {
      "dir": "dynamic\\longestpalindromicsubsequence.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamic\\longestpalindromicsubsequence.go",
      "code": "<span class=\"hljs-comment\">// longest palindromic subsequence</span>\r\n<span class=\"hljs-comment\">// http://www.geeksforgeeks.org/dynamic-programming-set-12-longest-palindromic-subsequence/</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> dynamic\r\n\r\n<span class=\"hljs-comment\">// LpsRec function</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LpsRec</span><span class=\"hljs-params\">(word <span class=\"hljs-type\">string</span>, i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">if</span> i == j {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> i &gt; j {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> word[i] == word[j] {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> + LpsRec(word, i+<span class=\"hljs-number\">1</span>, j<span class=\"hljs-number\">-1</span>)\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> Max(LpsRec(word, i, j<span class=\"hljs-number\">-1</span>), LpsRec(word, i+<span class=\"hljs-number\">1</span>, j))\r\n}\r\n\r\n<span class=\"hljs-comment\">// LpsDp function</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LpsDp</span><span class=\"hljs-params\">(word <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\tN := <span class=\"hljs-built_in\">len</span>(word)\r\n\tdp := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, N)\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; N; i++ {\r\n\t\tdp[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, N)\r\n\t\tdp[i][i] = <span class=\"hljs-number\">1</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">for</span> l := <span class=\"hljs-number\">2</span>; l &lt;= N; l++ {\r\n\t\t<span class=\"hljs-comment\">// for length l</span>\r\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; N-l+<span class=\"hljs-number\">1</span>; i++ {\r\n\t\t\tj := i + l - <span class=\"hljs-number\">1</span>\r\n\t\t\t<span class=\"hljs-keyword\">if</span> word[i] == word[j] {\r\n\t\t\t\t<span class=\"hljs-keyword\">if</span> l == <span class=\"hljs-number\">2</span> {\r\n\t\t\t\t\tdp[i][j] = <span class=\"hljs-number\">2</span>\r\n\t\t\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\t\t\tdp[i][j] = <span class=\"hljs-number\">2</span> + dp[i+<span class=\"hljs-number\">1</span>][j<span class=\"hljs-number\">-1</span>]\r\n\t\t\t\t}\r\n\t\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\t\tdp[i][j] = Max(dp[i+<span class=\"hljs-number\">1</span>][j], dp[i][j<span class=\"hljs-number\">-1</span>])\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">1</span>][N<span class=\"hljs-number\">-1</span>]\r\n}\r\n\r\n<span class=\"hljs-comment\">/*\r\nfunc main() {\r\n\t// word := &quot;aaabbbbababbabbabbabf&quot;\r\n\tword := &quot;aaaabbbba&quot;\r\n\tfmt.Printf(&quot;%d\\n&quot;, lpsRec(word, 0, len(word)-1))\r\n\tfmt.Printf(&quot;%d\\n&quot;, lpsDp(word))\r\n}\r\n*/</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Himanshu Shekhar",
      "email": "himanshushekharb16@gmail.com",
      "commits": 1
    },
    {
      "name": "Keshav Bohra",
      "email": "keshav2016@gmail.com",
      "commits": 1
    },
    {
      "name": "Omkarnath Parida",
      "email": "pomkarnath98@gmail.com",
      "commits": 2
    },
    {
      "name": "Omkarnath Parida",
      "email": "omkarnath.parida@yocket.in",
      "commits": 2
    },
    {
      "name": "Suhail Malik",
      "email": "devmsuhail@gmail.com",
      "commits": 2
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "anjali1903",
      "email": "anjali.jha1903@gmail.com",
      "commits": 2
    },
    {
      "name": "mmessmer",
      "email": "mmessmer@unibz.it",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}