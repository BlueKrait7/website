{
  "slug": "nysiis",
  "name": "NYSIIS",
  "categories": [
    "encoders"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Encoders/NysiisEncoder.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Encoders\\NysiisEncoder.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Globalization;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n<span class=\"hljs-keyword\">using</span> System.Text;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Encoders</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class for NYSIIS encoding strings.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NysiisEncoder</span>\r\n    {\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">char</span>[] Vowels = { <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;I&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27;U&#x27;</span> };\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes a string using the NYSIIS Algorithm.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>The string to encode.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The NYSIIS encoded string (all uppercase).<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span>\r\n        {\r\n            text = text.ToUpper(CultureInfo.CurrentCulture);\r\n            text = TrimSpaces(text);\r\n            text = StartReplace(text);\r\n            text = EndReplace(text);\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt; text.Length; i++)\r\n            {\r\n                text = ReplaceStep(text, i);\r\n            }\r\n\r\n            text = RemoveDuplicates(text);\r\n            <span class=\"hljs-keyword\">return</span> TrimEnd(text);\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">TrimSpaces</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span> =&gt; text.Replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-built_in\">string</span>.Empty);\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">RemoveDuplicates</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> sb = <span class=\"hljs-keyword\">new</span> StringBuilder();\r\n            sb.Append(text[<span class=\"hljs-number\">0</span>]);\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> c <span class=\"hljs-keyword\">in</span> text)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (sb[^<span class=\"hljs-number\">1</span>] != c)\r\n                {\r\n                    sb.Append(c);\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> sb.ToString();\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">TrimEnd</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> checks = <span class=\"hljs-keyword\">new</span> (<span class=\"hljs-built_in\">string</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-built_in\">string</span> to)?[]\r\n            {\r\n                (<span class=\"hljs-string\">&quot;S&quot;</span>, <span class=\"hljs-built_in\">string</span>.Empty),\r\n                (<span class=\"hljs-string\">&quot;AY&quot;</span>, <span class=\"hljs-string\">&quot;Y&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-built_in\">string</span>.Empty),\r\n            };\r\n            <span class=\"hljs-keyword\">var</span> replacement = checks.FirstOrDefault(t =&gt; text.EndsWith(t!.Value.<span class=\"hljs-keyword\">from</span>));\r\n            <span class=\"hljs-keyword\">if</span> (replacement <span class=\"hljs-keyword\">is</span> { })\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> (<span class=\"hljs-keyword\">from</span>, to) = replacement!.Value;\r\n                text = Replace(text, text.Length - <span class=\"hljs-keyword\">from</span>.Length, <span class=\"hljs-keyword\">from</span>.Length, to);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> text;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">ReplaceStep</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">int</span> i</span>)</span>\r\n        {\r\n            (<span class=\"hljs-built_in\">string</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-built_in\">string</span> to)[] replacements =\r\n            {\r\n                (<span class=\"hljs-string\">&quot;EV&quot;</span>, <span class=\"hljs-string\">&quot;AF&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;E&quot;</span>, <span class=\"hljs-string\">&quot;A&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;I&quot;</span>, <span class=\"hljs-string\">&quot;A&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;O&quot;</span>, <span class=\"hljs-string\">&quot;A&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;U&quot;</span>, <span class=\"hljs-string\">&quot;A&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;Q&quot;</span>, <span class=\"hljs-string\">&quot;G&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;Z&quot;</span>, <span class=\"hljs-string\">&quot;S&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;M&quot;</span>, <span class=\"hljs-string\">&quot;N&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;KN&quot;</span>, <span class=\"hljs-string\">&quot;NN&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;K&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;SCH&quot;</span>, <span class=\"hljs-string\">&quot;SSS&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;PH&quot;</span>, <span class=\"hljs-string\">&quot;FF&quot;</span>),\r\n            };\r\n            <span class=\"hljs-keyword\">var</span> replaced = TryReplace(text, i, replacements, <span class=\"hljs-keyword\">out</span> text);\r\n            <span class=\"hljs-keyword\">if</span> (replaced)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> text;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// H[vowel] or [vowel]H -&gt; text[i-1]</span>\r\n            <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">&#x27;H&#x27;</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (!Vowels.Contains(text[i - <span class=\"hljs-number\">1</span>]))\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> ReplaceWithPrevious();\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (i &lt; text.Length - <span class=\"hljs-number\">1</span> &amp;&amp; !Vowels.Contains(text[i + <span class=\"hljs-number\">1</span>]))\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> ReplaceWithPrevious();\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// [vowel]W -&gt; [vowel]</span>\r\n            <span class=\"hljs-keyword\">if</span> (text[i] == <span class=\"hljs-string\">&#x27;W&#x27;</span> &amp;&amp; Vowels.Contains(text[i - <span class=\"hljs-number\">1</span>]))\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> ReplaceWithPrevious();\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> text;\r\n\r\n            <span class=\"hljs-function\"><span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">ReplaceWithPrevious</span>()</span> =&gt; Replace(text, i, <span class=\"hljs-number\">1</span>, text[i - <span class=\"hljs-number\">1</span>].ToString());\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">TryReplace</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">int</span> index, (<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span></span>)[] opts, <span class=\"hljs-keyword\">out</span> <span class=\"hljs-built_in\">string</span> result)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; opts.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> check = opts[i].Item1;\r\n                <span class=\"hljs-keyword\">var</span> repl = opts[i].Item2;\r\n                <span class=\"hljs-keyword\">if</span> (text.Length &gt;= index + check.Length &amp;&amp; text.Substring(index, check.Length) == check)\r\n                {\r\n                    result = Replace(text, index, check.Length, repl);\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n                }\r\n            }\r\n\r\n            result = text;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">StartReplace</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> start</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> checks = <span class=\"hljs-keyword\">new</span> (<span class=\"hljs-built_in\">string</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-built_in\">string</span> to)?[]\r\n            {\r\n                (<span class=\"hljs-string\">&quot;MAC&quot;</span>, <span class=\"hljs-string\">&quot;MCC&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;KN&quot;</span>, <span class=\"hljs-string\">&quot;NN&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;K&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;PH&quot;</span>, <span class=\"hljs-string\">&quot;FF&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;PF&quot;</span>, <span class=\"hljs-string\">&quot;FF&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;SCH&quot;</span>, <span class=\"hljs-string\">&quot;SSS&quot;</span>),\r\n            };\r\n            <span class=\"hljs-keyword\">var</span> replacement = checks.FirstOrDefault(t =&gt; start.StartsWith(t!.Value.<span class=\"hljs-keyword\">from</span>));\r\n            <span class=\"hljs-keyword\">if</span> (replacement <span class=\"hljs-keyword\">is</span> { })\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> (<span class=\"hljs-keyword\">from</span>, to) = replacement!.Value;\r\n                start = Replace(start, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">from</span>.Length, to);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> start;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">EndReplace</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> end</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> checks = <span class=\"hljs-keyword\">new</span> (<span class=\"hljs-built_in\">string</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-built_in\">string</span> to)?[]\r\n            {\r\n                (<span class=\"hljs-string\">&quot;EE&quot;</span>, <span class=\"hljs-string\">&quot;Y&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;IE&quot;</span>, <span class=\"hljs-string\">&quot;Y&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;DT&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;RT&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;NT&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>),\r\n                (<span class=\"hljs-string\">&quot;ND&quot;</span>, <span class=\"hljs-string\">&quot;D&quot;</span>),\r\n            };\r\n            <span class=\"hljs-keyword\">var</span> replacement = checks.FirstOrDefault(t =&gt; end.EndsWith(t!.Value.<span class=\"hljs-keyword\">from</span>));\r\n            <span class=\"hljs-keyword\">if</span> (replacement <span class=\"hljs-keyword\">is</span> { })\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> (<span class=\"hljs-keyword\">from</span>, to) = replacement!.Value;\r\n                end = Replace(end, end.Length - <span class=\"hljs-keyword\">from</span>.Length, <span class=\"hljs-keyword\">from</span>.Length, to);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> end;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Replace</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">int</span> index, <span class=\"hljs-built_in\">int</span> length, <span class=\"hljs-built_in\">string</span> substitute</span>)</span> =&gt;\r\n            text[..index] + substitute + text[(index + length) ..];\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}