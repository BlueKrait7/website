{
  "slug": "entropy",
  "name": "Entropy",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\entropy.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\entropy.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nImplementation of entropy of information\r\nhttps://en.wikipedia.org/wiki/Entropy_(information_theory)\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\r\n<span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> ascii_lowercase\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_prob</span>(<span class=\"hljs-params\">text: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    This method takes path and two dict as argument\r\n    and than calculates entropy of them.\r\n    :param dict:\r\n    :param dict:\r\n    :return: Prints\r\n    1) Entropy of information based on 1 alphabet\r\n    2) Entropy of information based on couples of 2 alphabet\r\n    3) print Entropy of H(X n∣Xn−1)\r\n\r\n    Text from random books. Also, random quotes.\r\n    &gt;&gt;&gt; text = (&quot;Behind Winston’s back the voice &quot;\r\n    ...         &quot;from the telescreen was still &quot;\r\n    ...         &quot;babbling and the overfulfilment&quot;)\r\n    &gt;&gt;&gt; calculate_prob(text)\r\n    4.0\r\n    6.0\r\n    2.0\r\n\r\n    &gt;&gt;&gt; text = (&quot;The Ministry of Truth—Minitrue, in Newspeak [Newspeak was the official&quot;\r\n    ...         &quot;face in elegant lettering, the three&quot;)\r\n    &gt;&gt;&gt; calculate_prob(text)\r\n    4.0\r\n    5.0\r\n    1.0\r\n    &gt;&gt;&gt; text = (&quot;Had repulsive dashwoods suspicion sincerity but advantage now him. &quot;\r\n    ...         &quot;Remark easily garret nor nay.  Civil those mrs enjoy shy fat merry. &quot;\r\n    ...         &quot;You greatest jointure saw horrible. He private he on be imagine &quot;\r\n    ...         &quot;suppose. Fertile beloved evident through no service elderly is. Blind &quot;\r\n    ...         &quot;there if every no so at. Own neglected you preferred way sincerity &quot;\r\n    ...         &quot;delivered his attempted. To of message cottage windows do besides &quot;\r\n    ...         &quot;against uncivil.  Delightful unreserved impossible few estimating &quot;\r\n    ...         &quot;men favourable see entreaties. She propriety immediate was improving. &quot;\r\n    ...         &quot;He or entrance humoured likewise moderate. Much nor game son say &quot;\r\n    ...         &quot;feel. Fat make met can must form into gate. Me we offending prevailed &quot;\r\n    ...         &quot;discovery.&quot;)\r\n    &gt;&gt;&gt; calculate_prob(text)\r\n    4.0\r\n    7.0\r\n    3.0\r\n    &quot;&quot;&quot;</span>\r\n    single_char_strings, two_char_strings = analyze_text(text)\r\n    my_alphas = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-string\">&quot; &quot;</span> + ascii_lowercase)\r\n    <span class=\"hljs-comment\"># what is our total sum of probabilities.</span>\r\n    all_sum = <span class=\"hljs-built_in\">sum</span>(single_char_strings.values())\r\n\r\n    <span class=\"hljs-comment\"># one length string</span>\r\n    my_fir_sum = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-comment\"># for each alpha we go in our dict and if it is in it we calculate entropy</span>\r\n    <span class=\"hljs-keyword\">for</span> ch <span class=\"hljs-keyword\">in</span> my_alphas:\r\n        <span class=\"hljs-keyword\">if</span> ch <span class=\"hljs-keyword\">in</span> single_char_strings:\r\n            my_str = single_char_strings[ch]\r\n            prob = my_str / all_sum\r\n            my_fir_sum += prob * math.log2(prob)  <span class=\"hljs-comment\"># entropy formula.</span>\r\n\r\n    <span class=\"hljs-comment\"># print entropy</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">round</span>(-<span class=\"hljs-number\">1</span> * my_fir_sum):<span class=\"hljs-number\">.1</span>f}</span>&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># two len string</span>\r\n    all_sum = <span class=\"hljs-built_in\">sum</span>(two_char_strings.values())\r\n    my_sec_sum = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-comment\"># for each alpha (two in size) calculate entropy.</span>\r\n    <span class=\"hljs-keyword\">for</span> ch0 <span class=\"hljs-keyword\">in</span> my_alphas:\r\n        <span class=\"hljs-keyword\">for</span> ch1 <span class=\"hljs-keyword\">in</span> my_alphas:\r\n            sequence = ch0 + ch1\r\n            <span class=\"hljs-keyword\">if</span> sequence <span class=\"hljs-keyword\">in</span> two_char_strings:\r\n                my_str = two_char_strings[sequence]\r\n                prob = <span class=\"hljs-built_in\">int</span>(my_str) / all_sum\r\n                my_sec_sum += prob * math.log2(prob)\r\n\r\n    <span class=\"hljs-comment\"># print second entropy</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">round</span>(-<span class=\"hljs-number\">1</span> * my_sec_sum):<span class=\"hljs-number\">.1</span>f}</span>&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># print the difference between them</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">round</span>((-<span class=\"hljs-number\">1</span> * my_sec_sum) - (-<span class=\"hljs-number\">1</span> * my_fir_sum)):<span class=\"hljs-number\">.1</span>f}</span>&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">analyze_text</span>(<span class=\"hljs-params\">text: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">dict</span>, <span class=\"hljs-built_in\">dict</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Convert text input into two dicts of counts.\r\n    The first dictionary stores the frequency of single character strings.\r\n    The second dictionary stores the frequency of two character strings.\r\n    &quot;&quot;&quot;</span>\r\n    single_char_strings = Counter()  <span class=\"hljs-comment\"># type: ignore</span>\r\n    two_char_strings = Counter()  <span class=\"hljs-comment\"># type: ignore</span>\r\n    single_char_strings[text[-<span class=\"hljs-number\">1</span>]] += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># first case when we have space at start.</span>\r\n    two_char_strings[<span class=\"hljs-string\">&quot; &quot;</span> + text[<span class=\"hljs-number\">0</span>]] += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(text) - <span class=\"hljs-number\">1</span>):\r\n        single_char_strings[text[i]] += <span class=\"hljs-number\">1</span>\r\n        two_char_strings[text[i : i + <span class=\"hljs-number\">2</span>]] += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> single_char_strings, two_char_strings\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    <span class=\"hljs-comment\"># text = (</span>\r\n    <span class=\"hljs-comment\">#     &quot;Had repulsive dashwoods suspicion sincerity but advantage now him. Remark &quot;</span>\r\n    <span class=\"hljs-comment\">#     &quot;easily garret nor nay. Civil those mrs enjoy shy fat merry. You greatest &quot;</span>\r\n    <span class=\"hljs-comment\">#     &quot;jointure saw horrible. He private he on be imagine suppose. Fertile &quot;</span>\r\n    <span class=\"hljs-comment\">#     &quot;beloved evident through no service elderly is. Blind there if every no so &quot;</span>\r\n    <span class=\"hljs-comment\">#     &quot;at. Own neglected you preferred way sincerity delivered his attempted. To &quot;</span>\r\n    <span class=\"hljs-comment\">#     &quot;of message cottage windows do besides against uncivil.  Delightful &quot;</span>\r\n    <span class=\"hljs-comment\">#     &quot;unreserved impossible few estimating men favourable see entreaties. She &quot;</span>\r\n    <span class=\"hljs-comment\">#     &quot;propriety immediate was improving. He or entrance humoured likewise &quot;</span>\r\n    <span class=\"hljs-comment\">#     &quot;moderate. Much nor game son say feel. Fat make met can must form into &quot;</span>\r\n    <span class=\"hljs-comment\">#     &quot;gate. Me we offending prevailed discovery. &quot;</span>\r\n    <span class=\"hljs-comment\"># )</span>\r\n\r\n    <span class=\"hljs-comment\"># calculate_prob(text)</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    }
  },
  "contributors": [
    {
      "name": "beqakd",
      "email": "39763019+beqakd@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}