{
  "slug": "gnome-sort",
  "name": "Gnome Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\gnome_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\gnome_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nGnome Sort Algorithm (A.K.A. Stupid Sort)\r\n\r\nThis algorithm iterates over a list comparing an element with the previous one.\r\nIf order is not respected, it swaps element backward until order is respected with\r\nprevious element.  It resumes the initial iteration from element new position.\r\n\r\nFor doctests run following command:\r\npython3 -m doctest -v gnome_sort.py\r\n\r\nFor manual testing run:\r\npython3 gnome_sort.py\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gnome_sort</span>(<span class=\"hljs-params\">lst: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Pure implementation of the gnome sort algorithm in Python\r\n\r\n    Take some mutable ordered collection with heterogeneous comparable items inside as\r\n    arguments, return the same collection ordered by ascending.\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; gnome_sort([0, 5, 3, 2, 2])\r\n    [0, 2, 2, 3, 5]\r\n\r\n    &gt;&gt;&gt; gnome_sort([])\r\n    []\r\n\r\n    &gt;&gt;&gt; gnome_sort([-2, -5, -45])\r\n    [-45, -5, -2]\r\n\r\n    &gt;&gt;&gt; &quot;&quot;.join(gnome_sort(list(set(&quot;Gnomes are stupid!&quot;))))\r\n    &#x27; !Gadeimnoprstu&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(lst) &lt;= <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> lst\r\n\r\n    i = <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> i &lt; <span class=\"hljs-built_in\">len</span>(lst):\r\n        <span class=\"hljs-keyword\">if</span> lst[i - <span class=\"hljs-number\">1</span>] &lt;= lst[i]:\r\n            i += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            lst[i - <span class=\"hljs-number\">1</span>], lst[i] = lst[i], lst[i - <span class=\"hljs-number\">1</span>]\r\n            i -= <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span>:\r\n                i = <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> lst\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n    <span class=\"hljs-built_in\">print</span>(gnome_sort(unsorted))\r\n"
    },
    "javascript": {
      "dir": "Sorts\\GnomeSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\GnomeSort.js",
      "code": "<span class=\"hljs-comment\">/*\r\n * Gnome sort is a sort algorithm that moving an element to its proper place is accomplished by a series of swap\r\n * more information: https://en.wikipedia.org/wiki/Gnome_sort\r\n *\r\n */</span>\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">gnomeSort</span> (items) {\r\n  <span class=\"hljs-keyword\">if</span> (items.<span class=\"hljs-property\">length</span> &lt;= <span class=\"hljs-number\">1</span>) {\r\n    <span class=\"hljs-keyword\">return</span>\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>\r\n\r\n  <span class=\"hljs-keyword\">while</span> (i &lt; items.<span class=\"hljs-property\">length</span>) {\r\n    <span class=\"hljs-keyword\">if</span> (items[i - <span class=\"hljs-number\">1</span>] &lt;= items[i]) {\r\n      i++\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      [items[i], items[i - <span class=\"hljs-number\">1</span>]] = [items[i - <span class=\"hljs-number\">1</span>], items[i]]\r\n\r\n      i = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-number\">1</span>, i - <span class=\"hljs-number\">1</span>)\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Implementation of gnomeSort</span>\r\n\r\n<span class=\"hljs-comment\">// const ar = [5, 6, 7, 8, 1, 2, 12, 14]</span>\r\n<span class=\"hljs-comment\">// gnomeSort(ar)</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\gnome_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\gnome_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [gnome\r\n * sort](https://en.wikipedia.org/wiki/Gnome_sort) algorithm.\r\n * @author [beqakd](https://github.com/beqakd)\r\n * @author [Krishna Vedala](https://github.com/kvedala)\r\n * @details\r\n * Gnome sort algorithm is not the best one but it is widely used.\r\n * The algorithm iteratively checks the order of pairs in the array. If they are\r\n * on right order it moves to the next successive pair, otherwise it swaps\r\n * elements. This operation is repeated until no more swaps are made thus\r\n * indicating the values to be in ascending order.\r\n *\r\n * The time Complexity of the algorithm is \\f$O(n^2)\\f$ and in some cases it\r\n * can be \\f$O(n)\\f$.\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">// for std::swap</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>      <span class=\"hljs-comment\">// for std::array</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">// for assertions</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">// for io operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace sorting\r\n * Sorting algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> sorting {\r\n<span class=\"hljs-comment\">/**\r\n * This implementation is for a C-style array input that gets modified in place.\r\n * @param [in,out] arr our array of elements.\r\n * @param size size of given array\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">gnomeSort</span><span class=\"hljs-params\">(T *arr, <span class=\"hljs-type\">int</span> size)</span> </span>{\r\n    <span class=\"hljs-comment\">// few easy cases</span>\r\n    <span class=\"hljs-keyword\">if</span> (size &lt;= <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// initialize some variables.</span>\r\n    <span class=\"hljs-keyword\">while</span> (index &lt; size) {\r\n        <span class=\"hljs-comment\">// check for swap</span>\r\n        <span class=\"hljs-keyword\">if</span> ((index == <span class=\"hljs-number\">0</span>) || (arr[index] &gt;= arr[index - <span class=\"hljs-number\">1</span>])) {\r\n            index++;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            std::<span class=\"hljs-built_in\">swap</span>(arr[index], arr[index - <span class=\"hljs-number\">1</span>]);  <span class=\"hljs-comment\">// swap</span>\r\n            index--;\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This implementation is for a C++-style array input. The function argument is\r\n * a pass-by-value and hence a copy of the array gets created which is then\r\n * modified by the function and returned.\r\n * @tparam T type of data variables in the array\r\n * @tparam size size of the array\r\n * @param [in] arr our array of elements.\r\n * @return array with elements sorted\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-type\">size_t</span> size&gt;\r\n<span class=\"hljs-function\">std::array&lt;T, size&gt; <span class=\"hljs-title\">gnomeSort</span><span class=\"hljs-params\">(std::array&lt;T, size&gt; arr)</span> </span>{\r\n    <span class=\"hljs-comment\">// few easy cases</span>\r\n    <span class=\"hljs-keyword\">if</span> (size &lt;= <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-keyword\">return</span> arr;\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// initialize loop index</span>\r\n    <span class=\"hljs-keyword\">while</span> (index &lt; size) {\r\n        <span class=\"hljs-comment\">// check for swap</span>\r\n        <span class=\"hljs-keyword\">if</span> ((index == <span class=\"hljs-number\">0</span>) || (arr[index] &gt;= arr[index - <span class=\"hljs-number\">1</span>])) {\r\n            index++;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            std::<span class=\"hljs-built_in\">swap</span>(arr[index], arr[index - <span class=\"hljs-number\">1</span>]);  <span class=\"hljs-comment\">// swap</span>\r\n            index--;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> arr;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace sorting</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Example 1. Creating array of int,</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 - as a C-array...&quot;</span>;\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> size = <span class=\"hljs-number\">6</span>;\r\n    std::array&lt;<span class=\"hljs-type\">int</span>, size&gt; arr = {<span class=\"hljs-number\">-22</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">99</span>};\r\n    sorting::<span class=\"hljs-built_in\">gnomeSort</span>(arr.<span class=\"hljs-built_in\">data</span>(),\r\n                       size);  <span class=\"hljs-comment\">// pass array data as a C-style array pointer</span>\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr), std::<span class=\"hljs-built_in\">end</span>(arr)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; Passed\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n        std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// Example 2. Creating array of doubles.</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTest 2 - as a std::array...&quot;</span>;\r\n    std::array&lt;<span class=\"hljs-type\">double</span>, size&gt; double_arr = {<span class=\"hljs-number\">-100.2</span>, <span class=\"hljs-number\">10.2</span>, <span class=\"hljs-number\">20.0</span>, <span class=\"hljs-number\">9.0</span>, <span class=\"hljs-number\">7.5</span>, <span class=\"hljs-number\">7.2</span>};\r\n    std::array&lt;<span class=\"hljs-type\">double</span>, size&gt; sorted_arr = sorting::<span class=\"hljs-built_in\">gnomeSort</span>(double_arr);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(sorted_arr), std::<span class=\"hljs-built_in\">end</span>(sorted_arr)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; Passed\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n        std::cout &lt;&lt; double_arr[i] &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// Example 3. Creating random array of float.</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTest 3 - 200 random numbers as a std::array...&quot;</span>;\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> size2 = <span class=\"hljs-number\">200</span>;\r\n    std::array&lt;<span class=\"hljs-type\">float</span>, size2&gt; rand_arr{};\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;a : rand_arr) {\r\n        <span class=\"hljs-comment\">// generate random numbers between -5.0 and 4.99</span>\r\n        a = <span class=\"hljs-built_in\">float</span>(std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">1000</span> - <span class=\"hljs-number\">500</span>) / <span class=\"hljs-number\">100.f</span>;\r\n    }\r\n\r\n    std::array&lt;<span class=\"hljs-type\">float</span>, size2&gt; float_arr = sorting::<span class=\"hljs-built_in\">gnomeSort</span>(rand_arr);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(float_arr), std::<span class=\"hljs-built_in\">end</span>(float_arr)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; Passed\\n&quot;</span>;\r\n    <span class=\"hljs-comment\">// for (int i = 0; i &lt; size; i++) std::cout &lt;&lt; double_arr[i] &lt;&lt; &quot;, &quot;;</span>\r\n    std::cout &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Our main function with example of sort method.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\GnomeSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\GnomeSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.*;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Implementation of gnome sort\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\r\n * <span class=\"hljs-doctag\">@since</span> 2018-04-10\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GnomeSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] arr) {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-keyword\">while</span> (i &lt; arr.length) {\r\n            <span class=\"hljs-keyword\">if</span> (less(arr[i - <span class=\"hljs-number\">1</span>], arr[i])) {\r\n                i = j++;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                swap(arr, i - <span class=\"hljs-number\">1</span>, i);\r\n                <span class=\"hljs-keyword\">if</span> (--i == <span class=\"hljs-number\">0</span>) {\r\n                    i = j++;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        Integer[] integers = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\r\n        String[] strings = {<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;dd&quot;</span>, <span class=\"hljs-string\">&quot;da&quot;</span>, <span class=\"hljs-string\">&quot;zz&quot;</span>, <span class=\"hljs-string\">&quot;AA&quot;</span>, <span class=\"hljs-string\">&quot;aa&quot;</span>, <span class=\"hljs-string\">&quot;aB&quot;</span>, <span class=\"hljs-string\">&quot;Hb&quot;</span>, <span class=\"hljs-string\">&quot;Z&quot;</span>};\r\n        <span class=\"hljs-type\">GnomeSort</span> <span class=\"hljs-variable\">gnomeSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GnomeSort</span>();\r\n\r\n        gnomeSort.sort(integers);\r\n        gnomeSort.sort(strings);\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;After sort : &quot;</span>);\r\n        print(integers);\r\n        print(strings);\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\gnome_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\gnome_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *numbers, <span class=\"hljs-type\">int</span> size)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> pos = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> (pos &lt; size)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (numbers[pos] &gt;= numbers[pos - <span class=\"hljs-number\">1</span>])\r\n            pos++;\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            <span class=\"hljs-type\">int</span> tmp = numbers[pos - <span class=\"hljs-number\">1</span>];\r\n            numbers[pos - <span class=\"hljs-number\">1</span>] = numbers[pos];\r\n            numbers[pos] = tmp;\r\n            pos--;\r\n\r\n            <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-number\">0</span>)\r\n                pos = <span class=\"hljs-number\">1</span>;\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, <span class=\"hljs-built_in\">array</span>[i]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> size = <span class=\"hljs-number\">6</span>;\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-type\">int</span> *numbers = <span class=\"hljs-built_in\">malloc</span>(size * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Insert %d unsorted numbers: \\n&quot;</span>, size);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;numbers[i]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Initial array: &quot;</span>);\r\n    display(numbers, size);\r\n    sort(numbers, size);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\r\n    display(numbers, size);\r\n    <span class=\"hljs-built_in\">free</span>(numbers);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Sort\\Gnome_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Sort\\Gnome_Sort.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\r\n\r\n<span class=\"hljs-keyword\">module</span> GnomeSort <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-keyword\">let</span> Sort list<span class=\"hljs-operator\">:</span> <span class=\"hljs-symbol\">&#x27;T</span> [] <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> list <span class=\"hljs-operator\">=</span> list <span class=\"hljs-operator\">|&gt;</span> Array.copy\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> first <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> second <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">while</span> first <span class=\"hljs-operator\">&lt;</span> list.Length <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-keyword\">if</span> list.[first <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">&lt;=</span> list.[first] <span class=\"hljs-keyword\">then</span>\r\n                first <span class=\"hljs-operator\">&lt;-</span> second\r\n                second <span class=\"hljs-operator\">&lt;-</span> second <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">else</span>\r\n                <span class=\"hljs-keyword\">let</span> tmp <span class=\"hljs-operator\">=</span> list.[first <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]\r\n                list.[first <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">&lt;-</span> list.[first]\r\n                list.[first] <span class=\"hljs-operator\">&lt;-</span> tmp\r\n                first <span class=\"hljs-operator\">&lt;-</span> first <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">if</span> first <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\r\n                    first <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-number\">1</span>\r\n                    second <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-number\">2</span>\r\n        list\r\n"
    },
    "rust": {
      "dir": "src\\sorting\\gnome_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\sorting\\gnome_sort.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp;\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">gnome_sort</span>&lt;T&gt;(arr: &amp;[T]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: cmp::<span class=\"hljs-built_in\">PartialEq</span> + cmp::<span class=\"hljs-built_in\">PartialOrd</span> + <span class=\"hljs-built_in\">Clone</span>,\r\n{\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">arr</span> = arr.<span class=\"hljs-title function_ invoke__\">to_vec</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">i</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">j</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">2</span>;\r\n\r\n    <span class=\"hljs-keyword\">while</span> i &lt; arr.<span class=\"hljs-title function_ invoke__\">len</span>() {\r\n        <span class=\"hljs-keyword\">if</span> arr[i - <span class=\"hljs-number\">1</span>] &lt; arr[i] {\r\n            i = j;\r\n            j = i + <span class=\"hljs-number\">1</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            arr.<span class=\"hljs-title function_ invoke__\">swap</span>(i - <span class=\"hljs-number\">1</span>, i);\r\n            i -= <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> {\r\n                i = j;\r\n                j += <span class=\"hljs-number\">1</span>;\r\n            }\r\n        }\r\n    }\r\n    arr\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">gnome_sort</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[-<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">already_sorted</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">gnome_sort</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">odd_number_of_elements</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">gnome_sort</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">gnome_sort</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>]);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>]);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">gnome_sort</span>(&amp;Vec::&lt;<span class=\"hljs-type\">u8</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>());\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[]);\r\n    }\r\n}\r\n"
    },
    "aarch64_assembly": {
      "dir": "sorters\\gnome_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters\\gnome_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\r\n<span class=\"hljs-comment\">/*  program gnomeSort64.s  */</span>\r\n \r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\r\n \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* Initialized data              */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.data</span>\r\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\r\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n \r\n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-symbol\">TableNumber:</span>      .quad   <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>\r\n<span class=\"hljs-comment\">#TableNumber:     .quad   10,9,8,7,6,-5,4,3,2,1</span>\r\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.bss</span>\r\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/*  code section                 */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.text</span>\r\n<span class=\"hljs-symbol\">.global</span> main \r\n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// first element</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> gnomeSort\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">bl</span> displayTable\r\n \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\r\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\r\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\r\n \r\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\r\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\r\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\r\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\r\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\r\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\r\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\r\n<span class=\"hljs-symbol\">isSorted:</span>\r\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\r\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x4,x3\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\r\n<span class=\"hljs-number\">98</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">99</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*         gnome sort                                              */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the first element    */</span>\r\n<span class=\"hljs-comment\">/* x2 contains the number of element */</span>\r\n<span class=\"hljs-symbol\">gnomeSort:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x8,x9,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">sub</span> x2,x2,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// compute end index n - 1</span>\r\n    <span class=\"hljs-keyword\">add</span> x3,x1,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// index i</span>\r\n    <span class=\"hljs-keyword\">add</span> x7,x1,<span class=\"hljs-number\">2</span>                <span class=\"hljs-comment\">// index j</span>\r\n<span class=\"hljs-number\">1</span>:                             <span class=\"hljs-comment\">// start loop 1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x2\r\n    <span class=\"hljs-keyword\">bgt</span> <span class=\"hljs-number\">100</span>f\r\n    <span class=\"hljs-keyword\">sub</span> x4,x3,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// </span>\r\n    <span class=\"hljs-keyword\">ldr</span> x5,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[j]</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[j+1]</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x5,x6                  <span class=\"hljs-comment\">// compare value</span>\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">2</span>f \r\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// if smaller inversion</span>\r\n    <span class=\"hljs-keyword\">str</span> x5,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>] \r\n    <span class=\"hljs-keyword\">sub</span> x3,x3,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// i = i - 1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x1\r\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">1</span>b                     <span class=\"hljs-comment\">// loop 1</span>\r\n<span class=\"hljs-number\">2</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x3,x7                  <span class=\"hljs-comment\">// i = j</span>\r\n    <span class=\"hljs-keyword\">add</span> x7,x7,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// j = j + 1</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b                       <span class=\"hljs-comment\">// loop 1</span>\r\n \r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x8,x9,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                        <span class=\"hljs-comment\">// return to address lr x30</span>\r\n \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-symbol\">displayTable:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> conversion10S                  <span class=\"hljs-comment\">// décimal conversion</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at @ character</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\r\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">mov</span> x0,x2\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\r\n"
    },
    "dart": {
      "dir": "sort\\gnome_Sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort\\gnome_Sort.dart",
      "code": "<span class=\"hljs-comment\">// Sorting of array using gnome sort</span>\r\n<span class=\"hljs-comment\">//Author:Shawn</span>\r\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\r\n\r\n<span class=\"hljs-comment\">//Function sort the array using gnome sort</span>\r\n<span class=\"hljs-keyword\">void</span> gnomeSort(<span class=\"hljs-built_in\">List</span> arr, <span class=\"hljs-keyword\">var</span> n) {\r\n  <span class=\"hljs-keyword\">if</span> (arr == <span class=\"hljs-keyword\">null</span> || n == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\r\n  <span class=\"hljs-built_in\">int</span> first = <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-built_in\">int</span> second = <span class=\"hljs-number\">2</span>;\r\n\r\n  <span class=\"hljs-keyword\">while</span> (first &lt; n) {\r\n    <span class=\"hljs-keyword\">if</span> (arr[first - <span class=\"hljs-number\">1</span>] &lt;= arr[first]) {\r\n      first = second;\r\n      second++;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-built_in\">int</span> temp = arr[first - <span class=\"hljs-number\">1</span>];\r\n      arr[first - <span class=\"hljs-number\">1</span>] = arr[first];\r\n      arr[first] = temp;\r\n      first -= <span class=\"hljs-number\">1</span>;\r\n      <span class=\"hljs-keyword\">if</span> (first == <span class=\"hljs-number\">0</span>) {\r\n        first = <span class=\"hljs-number\">1</span>;\r\n        second = <span class=\"hljs-number\">2</span>;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-comment\">//Get the array</span>\r\n  <span class=\"hljs-built_in\">List</span> arr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">323</span>, <span class=\"hljs-number\">7</span>];\r\n\r\n  <span class=\"hljs-comment\">//Get size of the array</span>\r\n  <span class=\"hljs-built_in\">int</span> n = arr.length;\r\n\r\n  <span class=\"hljs-comment\">//print the array</span>\r\n  <span class=\"hljs-built_in\">print</span>(arr);\r\n\r\n  <span class=\"hljs-comment\">//Sorting of array using gnome sort</span>\r\n  gnomeSort(arr, n);\r\n\r\n  <span class=\"hljs-comment\">//print the result</span>\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Sorted:\\n&quot;</span> + arr.toString());\r\n}\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\sorting\\gnome_sort.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\sorting\\gnome_sort.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">list</span> = <span class=\"hljs-title\">gnomeSort</span><span class=\"hljs-params\">(list)</span></span>\r\n \r\n    <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-number\">3</span>;\r\n \r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">i</span> &lt;= <span class=\"hljs-built_in\">numel</span>(list)\r\n \r\n        <span class=\"hljs-keyword\">if</span> list(<span class=\"hljs-built_in\">i</span><span class=\"hljs-number\">-1</span>) &lt;= list(<span class=\"hljs-built_in\">i</span>)\r\n            <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-built_in\">j</span>;\r\n            <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-built_in\">j</span>+<span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">else</span>\r\n            list([<span class=\"hljs-built_in\">i</span><span class=\"hljs-number\">-1</span> <span class=\"hljs-built_in\">i</span>]) = list([<span class=\"hljs-built_in\">i</span> <span class=\"hljs-built_in\">i</span><span class=\"hljs-number\">-1</span>]);         <span class=\"hljs-comment\">%Swaping</span>\r\n            <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-built_in\">i</span><span class=\"hljs-number\">-1</span>;\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">i</span> == <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-built_in\">j</span>;\r\n                <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-built_in\">j</span>+<span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">end</span>\r\n        <span class=\"hljs-keyword\">end</span>  <span class=\"hljs-comment\">%if</span>\r\n \r\n    <span class=\"hljs-keyword\">end</span>  <span class=\"hljs-comment\">%while</span>\r\n<span class=\"hljs-keyword\">end</span>     <span class=\"hljs-comment\">%gnomeSort</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "DONSIMON92",
      "email": "47272787+DONSIMON92@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Abhishek Mehra",
      "email": "52788025+Triaro@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "tania-cmyk",
      "email": "omgitstania27@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "zoomdong",
      "email": "1344492820@qq.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KuLi",
      "email": "KuLi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "Guillaume Rochedix",
      "email": "33205665+BriseBalloches@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Tommi Laivamaa",
      "email": "tmlaivamaa@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Gabriele Bruno Franco",
      "email": "gabrielebrunofranco@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}