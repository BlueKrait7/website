{
  "slug": "ford-fulkerson",
  "name": "Ford Fulkerson",
  "categories": [
    "networkingflow"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "networking_flow\\ford_fulkerson.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/networking_flow\\ford_fulkerson.py",
      "code": "<span class=\"hljs-comment\"># Ford-Fulkerson Algorithm for Maximum Flow Problem</span>\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nDescription:\r\n    (1) Start with initial flow as 0;\r\n    (2) Choose augmenting path from source to sink and add path to flow;\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">BFS</span>(<span class=\"hljs-params\">graph, s, t, parent</span>):\r\n    <span class=\"hljs-comment\"># Return True if there is node that has not iterated.</span>\r\n    visited = [<span class=\"hljs-literal\">False</span>] * <span class=\"hljs-built_in\">len</span>(graph)\r\n    queue = []\r\n    queue.append(s)\r\n    visited[s] = <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> queue:\r\n        u = queue.pop(<span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">for</span> ind <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(graph[u])):\r\n            <span class=\"hljs-keyword\">if</span> visited[ind] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">and</span> graph[u][ind] &gt; <span class=\"hljs-number\">0</span>:\r\n                queue.append(ind)\r\n                visited[ind] = <span class=\"hljs-literal\">True</span>\r\n                parent[ind] = u\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">if</span> visited[t] <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">False</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">FordFulkerson</span>(<span class=\"hljs-params\">graph, source, sink</span>):\r\n    <span class=\"hljs-comment\"># This array is filled by BFS and to store path</span>\r\n    parent = [-<span class=\"hljs-number\">1</span>] * (<span class=\"hljs-built_in\">len</span>(graph))\r\n    max_flow = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> BFS(graph, source, sink, parent):\r\n        path_flow = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;Inf&quot;</span>)\r\n        s = sink\r\n\r\n        <span class=\"hljs-keyword\">while</span> s != source:\r\n            <span class=\"hljs-comment\"># Find the minimum value in select path</span>\r\n            path_flow = <span class=\"hljs-built_in\">min</span>(path_flow, graph[parent[s]][s])\r\n            s = parent[s]\r\n\r\n        max_flow += path_flow\r\n        v = sink\r\n\r\n        <span class=\"hljs-keyword\">while</span> v != source:\r\n            u = parent[v]\r\n            graph[u][v] -= path_flow\r\n            graph[v][u] += path_flow\r\n            v = parent[v]\r\n    <span class=\"hljs-keyword\">return</span> max_flow\r\n\r\n\r\ngraph = [\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">20</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n]\r\n\r\nsource, sink = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>\r\n<span class=\"hljs-built_in\">print</span>(FordFulkerson(graph, source, sink))\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\FordFulkerson.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\FordFulkerson.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\r\n<span class=\"hljs-keyword\">import</span> java.util.Queue;\r\n<span class=\"hljs-keyword\">import</span> java.util.Vector;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FordFulkerson</span> {\r\n\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">INF</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">987654321</span>;\r\n    <span class=\"hljs-comment\">// edges</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> V;\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] capacity, flow;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        System.out.println(<span class=\"hljs-string\">&quot;V : 6&quot;</span>);\r\n        V = <span class=\"hljs-number\">6</span>;\r\n        capacity = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[V][V];\r\n\r\n        capacity[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">12</span>;\r\n        capacity[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">13</span>;\r\n        capacity[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">10</span>;\r\n        capacity[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">13</span>;\r\n        capacity[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">3</span>;\r\n        capacity[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">5</span>] = <span class=\"hljs-number\">15</span>;\r\n        capacity[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">7</span>;\r\n        capacity[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">15</span>;\r\n        capacity[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">5</span>] = <span class=\"hljs-number\">17</span>;\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Max capacity in networkFlow : &quot;</span> + networkFlow(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>));\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">networkFlow</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> source, <span class=\"hljs-type\">int</span> sink)</span> {\r\n        flow = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[V][V];\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">totalFlow</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\r\n            Vector&lt;Integer&gt; parent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector</span>&lt;&gt;(V);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\r\n                parent.add(-<span class=\"hljs-number\">1</span>);\r\n            }\r\n            Queue&lt;Integer&gt; q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();\r\n            parent.set(source, source);\r\n            q.add(source);\r\n            <span class=\"hljs-keyword\">while</span> (!q.isEmpty() &amp;&amp; parent.get(sink) == -<span class=\"hljs-number\">1</span>) {\r\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">here</span> <span class=\"hljs-operator\">=</span> q.peek();\r\n                q.poll();\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">there</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; there &lt; V; ++there) {\r\n                    <span class=\"hljs-keyword\">if</span> (capacity[here][there] - flow[here][there] &gt; <span class=\"hljs-number\">0</span> &amp;&amp; parent.get(there) == -<span class=\"hljs-number\">1</span>) {\r\n                        q.add(there);\r\n                        parent.set(there, here);\r\n                    }\r\n                }\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (parent.get(sink) == -<span class=\"hljs-number\">1</span>) {\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            }\r\n\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">amount</span> <span class=\"hljs-operator\">=</span> INF;\r\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">printer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;path : &quot;</span>;\r\n            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> sink; p != source; p = parent.get(p)) {\r\n                amount = Math.min(capacity[parent.get(p)][p] - flow[parent.get(p)][p], amount);\r\n                sb.append(p + <span class=\"hljs-string\">&quot;-&quot;</span>);\r\n            }\r\n            sb.append(source);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> sink; p != source; p = parent.get(p)) {\r\n                flow[parent.get(p)][p] += amount;\r\n                flow[p][parent.get(p)] -= amount;\r\n            }\r\n            totalFlow += amount;\r\n            printer += sb.reverse() + <span class=\"hljs-string\">&quot; / max flow : &quot;</span> + totalFlow;\r\n            System.out.println(printer);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> totalFlow;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "SunggyuLee",
      "email": "sq0216@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Sichen Liu",
      "email": "sl2947@cornell.edu",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}