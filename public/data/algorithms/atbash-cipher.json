{
  "slug": "atbash-cipher",
  "name": "Atbash Cipher",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "ciphers\\atbash_cipher.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers\\atbash_cipher.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Atbash Cipher](https://en.wikipedia.org/wiki/Atbash) implementation\r\n * @details The Atbash cipher is a subsitution cipher where the letters of the\r\n * alphabet are in reverse. For example, A is replaced with Z, B is replaced\r\n * with Y, etc.\r\n *\r\n * ### Algorithm\r\n * The algorithm takes a string, and looks up the corresponding reversed letter\r\n * for each letter in the word and replaces it. Spaces are ignored and case is\r\n * preserved.\r\n *\r\n * @author [Focusucof](https://github.com/Focusucof)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;map&gt;</span>       <span class=\"hljs-comment\">/// for std::map</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>    <span class=\"hljs-comment\">/// for std::string</span></span>\r\n\r\n<span class=\"hljs-comment\">/** \\namespace ciphers\r\n * \\brief Algorithms for encryption and decryption\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> ciphers {\r\n<span class=\"hljs-comment\">/** \\namespace atbash\r\n * \\brief Functions for the [Atbash\r\n * Cipher](https://en.wikipedia.org/wiki/Atbash) implementation\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> atbash {\r\nstd::map&lt;<span class=\"hljs-type\">char</span>, <span class=\"hljs-type\">char</span>&gt; atbash_cipher_map = {\r\n    {<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;z&#x27;</span>}, {<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;y&#x27;</span>}, {<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>}, {<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;w&#x27;</span>}, {<span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;v&#x27;</span>}, {<span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;u&#x27;</span>},\r\n    {<span class=\"hljs-string\">&#x27;g&#x27;</span>, <span class=\"hljs-string\">&#x27;t&#x27;</span>}, {<span class=\"hljs-string\">&#x27;h&#x27;</span>, <span class=\"hljs-string\">&#x27;s&#x27;</span>}, {<span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;r&#x27;</span>}, {<span class=\"hljs-string\">&#x27;j&#x27;</span>, <span class=\"hljs-string\">&#x27;q&#x27;</span>}, {<span class=\"hljs-string\">&#x27;k&#x27;</span>, <span class=\"hljs-string\">&#x27;p&#x27;</span>}, {<span class=\"hljs-string\">&#x27;l&#x27;</span>, <span class=\"hljs-string\">&#x27;o&#x27;</span>},\r\n    {<span class=\"hljs-string\">&#x27;m&#x27;</span>, <span class=\"hljs-string\">&#x27;n&#x27;</span>}, {<span class=\"hljs-string\">&#x27;n&#x27;</span>, <span class=\"hljs-string\">&#x27;m&#x27;</span>}, {<span class=\"hljs-string\">&#x27;o&#x27;</span>, <span class=\"hljs-string\">&#x27;l&#x27;</span>}, {<span class=\"hljs-string\">&#x27;p&#x27;</span>, <span class=\"hljs-string\">&#x27;k&#x27;</span>}, {<span class=\"hljs-string\">&#x27;q&#x27;</span>, <span class=\"hljs-string\">&#x27;j&#x27;</span>}, {<span class=\"hljs-string\">&#x27;r&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>},\r\n    {<span class=\"hljs-string\">&#x27;s&#x27;</span>, <span class=\"hljs-string\">&#x27;h&#x27;</span>}, {<span class=\"hljs-string\">&#x27;t&#x27;</span>, <span class=\"hljs-string\">&#x27;g&#x27;</span>}, {<span class=\"hljs-string\">&#x27;u&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>}, {<span class=\"hljs-string\">&#x27;v&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>}, {<span class=\"hljs-string\">&#x27;w&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>}, {<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>},\r\n    {<span class=\"hljs-string\">&#x27;y&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>}, {<span class=\"hljs-string\">&#x27;z&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>}, {<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;Z&#x27;</span>}, {<span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;Y&#x27;</span>}, {<span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;X&#x27;</span>}, {<span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27;W&#x27;</span>},\r\n    {<span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;V&#x27;</span>}, {<span class=\"hljs-string\">&#x27;F&#x27;</span>, <span class=\"hljs-string\">&#x27;U&#x27;</span>}, {<span class=\"hljs-string\">&#x27;G&#x27;</span>, <span class=\"hljs-string\">&#x27;T&#x27;</span>}, {<span class=\"hljs-string\">&#x27;H&#x27;</span>, <span class=\"hljs-string\">&#x27;S&#x27;</span>}, {<span class=\"hljs-string\">&#x27;I&#x27;</span>, <span class=\"hljs-string\">&#x27;R&#x27;</span>}, {<span class=\"hljs-string\">&#x27;J&#x27;</span>, <span class=\"hljs-string\">&#x27;Q&#x27;</span>},\r\n    {<span class=\"hljs-string\">&#x27;K&#x27;</span>, <span class=\"hljs-string\">&#x27;P&#x27;</span>}, {<span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>}, {<span class=\"hljs-string\">&#x27;M&#x27;</span>, <span class=\"hljs-string\">&#x27;N&#x27;</span>}, {<span class=\"hljs-string\">&#x27;N&#x27;</span>, <span class=\"hljs-string\">&#x27;M&#x27;</span>}, {<span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27;L&#x27;</span>}, {<span class=\"hljs-string\">&#x27;P&#x27;</span>, <span class=\"hljs-string\">&#x27;K&#x27;</span>},\r\n    {<span class=\"hljs-string\">&#x27;Q&#x27;</span>, <span class=\"hljs-string\">&#x27;J&#x27;</span>}, {<span class=\"hljs-string\">&#x27;R&#x27;</span>, <span class=\"hljs-string\">&#x27;I&#x27;</span>}, {<span class=\"hljs-string\">&#x27;S&#x27;</span>, <span class=\"hljs-string\">&#x27;H&#x27;</span>}, {<span class=\"hljs-string\">&#x27;T&#x27;</span>, <span class=\"hljs-string\">&#x27;G&#x27;</span>}, {<span class=\"hljs-string\">&#x27;U&#x27;</span>, <span class=\"hljs-string\">&#x27;F&#x27;</span>}, {<span class=\"hljs-string\">&#x27;V&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>},\r\n    {<span class=\"hljs-string\">&#x27;W&#x27;</span>, <span class=\"hljs-string\">&#x27;D&#x27;</span>}, {<span class=\"hljs-string\">&#x27;X&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>}, {<span class=\"hljs-string\">&#x27;Y&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>}, {<span class=\"hljs-string\">&#x27;Z&#x27;</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>}, {<span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>}\r\n\r\n};\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief atbash cipher encryption and decryption\r\n * @param text Plaintext to be encrypted\r\n * @returns encoded or decoded string\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">atbash_cipher</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string&amp; text)</span> </span>{\r\n    std::string result;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> letter : text) {\r\n        result += atbash_cipher_map[letter];\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace atbash</span>\r\n}  <span class=\"hljs-comment\">// namespace ciphers</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// 1st test</span>\r\n    std::string text = <span class=\"hljs-string\">&quot;Hello World&quot;</span>;\r\n    std::string expected = <span class=\"hljs-string\">&quot;Svool Dliow&quot;</span>;\r\n    std::string encrypted_text = ciphers::atbash::<span class=\"hljs-built_in\">atbash_cipher</span>(text);\r\n    std::string decrypted_text = ciphers::atbash::<span class=\"hljs-built_in\">atbash_cipher</span>(encrypted_text);\r\n    <span class=\"hljs-built_in\">assert</span>(expected == encrypted_text);\r\n    <span class=\"hljs-built_in\">assert</span>(text == decrypted_text);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original text: &quot;</span> &lt;&lt; text &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;, Expected text: &quot;</span> &lt;&lt; expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;, Encrypted text: &quot;</span> &lt;&lt; encrypted_text &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;, Decrypted text: &quot;</span> &lt;&lt; decrypted_text &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nAll tests have successfully passed!\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Focus",
      "email": "65309793+Focusucof@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}