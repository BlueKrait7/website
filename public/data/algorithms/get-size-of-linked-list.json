{
  "slug": "get-size-of-linked-list",
  "name": "Get Size of Linked List",
  "categories": [
    "operationsondatastructures"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "operations_on_datastructures\\get_size_of_linked_list.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/operations_on_datastructures\\get_size_of_linked_list.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n <span class=\"hljs-keyword\">public</span>:\r\n    <span class=\"hljs-type\">int</span> val;\r\n    Node *next;\r\n\r\n    <span class=\"hljs-built_in\">Node</span>(<span class=\"hljs-type\">int</span> v, Node *n) : <span class=\"hljs-built_in\">val</span>(v), <span class=\"hljs-built_in\">next</span>(n) {}  <span class=\"hljs-comment\">// Default constructor for Node</span>\r\n};\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">(Node *root)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-comment\">// Each node will return 1 so the total adds up to be the size</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">getSize</span>(root-&gt;next);\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    Node *myList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Node</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">NULL</span>);  <span class=\"hljs-comment\">// Initializes the LinkedList</span>\r\n    Node *temp = myList;\r\n    <span class=\"hljs-comment\">// Creates a linked lists of total size 10, numbered 1 - 10</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\r\n        temp-&gt;next = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Node</span>(i, <span class=\"hljs-literal\">NULL</span>);\r\n        temp = temp-&gt;next;\r\n    }\r\n    <span class=\"hljs-comment\">// Creating other lists for checking purposes</span>\r\n    Node *secondList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Node</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">NULL</span>);  <span class=\"hljs-comment\">// List of size 1</span>\r\n    Node *thirdList = <span class=\"hljs-literal\">NULL</span>;                <span class=\"hljs-comment\">// List of size 0</span>\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-built_in\">getSize</span>(myList) &lt;&lt; std::endl\r\n              &lt;&lt; <span class=\"hljs-built_in\">getSize</span>(secondList) &lt;&lt; std::endl\r\n              &lt;&lt; <span class=\"hljs-built_in\">getSize</span>(thirdList) &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "floan",
      "email": "floan@usc.edu",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}