{
  "slug": "fetch-anime-and-play",
  "name": "Fetch Anime and Play",
  "categories": [
    "webprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "web_programming\\fetch_anime_and_play.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/web_programming\\fetch_anime_and_play.py",
      "code": "<span class=\"hljs-keyword\">from</span> xml.dom <span class=\"hljs-keyword\">import</span> NotFoundErr\r\n\r\n<span class=\"hljs-keyword\">import</span> requests\r\n<span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup, NavigableString\r\n<span class=\"hljs-keyword\">from</span> fake_useragent <span class=\"hljs-keyword\">import</span> UserAgent\r\n\r\nBASE_URL = <span class=\"hljs-string\">&quot;https://ww1.gogoanime2.org&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search_scraper</span>(<span class=\"hljs-params\">anime_name: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\r\n\r\n    Take an url and\r\n    return list of anime after scraping the site.\r\n\r\n    &gt;&gt;&gt; type(search_scraper(&quot;demon_slayer&quot;))\r\n    &lt;class &#x27;list&#x27;&gt;\r\n\r\n    Args:\r\n        anime_name (str): [Name of anime]\r\n\r\n    Raises:\r\n        e: [Raises exception on failure]\r\n\r\n    Returns:\r\n        [list]: [List of animes]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># concat the name to form the search url.</span>\r\n    search_url = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{BASE_URL}</span>/search/<span class=\"hljs-subst\">{anime_name}</span>&quot;</span>\r\n\r\n    response = requests.get(\r\n        search_url, headers={<span class=\"hljs-string\">&quot;UserAgent&quot;</span>: UserAgent().chrome}\r\n    )  <span class=\"hljs-comment\"># request the url.</span>\r\n\r\n    <span class=\"hljs-comment\"># Is the response ok?</span>\r\n    response.raise_for_status()\r\n\r\n    <span class=\"hljs-comment\"># parse with soup.</span>\r\n    soup = BeautifulSoup(response.text, <span class=\"hljs-string\">&quot;html.parser&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># get list of anime</span>\r\n    anime_ul = soup.find(<span class=\"hljs-string\">&quot;ul&quot;</span>, {<span class=\"hljs-string\">&quot;class&quot;</span>: <span class=\"hljs-string\">&quot;items&quot;</span>})\r\n    anime_li = anime_ul.children\r\n\r\n    <span class=\"hljs-comment\"># for each anime, insert to list. the name and url.</span>\r\n    anime_list = []\r\n    <span class=\"hljs-keyword\">for</span> anime <span class=\"hljs-keyword\">in</span> anime_li:\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(anime, NavigableString):\r\n            <span class=\"hljs-keyword\">try</span>:\r\n                anime_url, anime_title = (\r\n                    anime.find(<span class=\"hljs-string\">&quot;a&quot;</span>)[<span class=\"hljs-string\">&quot;href&quot;</span>],\r\n                    anime.find(<span class=\"hljs-string\">&quot;a&quot;</span>)[<span class=\"hljs-string\">&quot;title&quot;</span>],\r\n                )\r\n                anime_list.append(\r\n                    {\r\n                        <span class=\"hljs-string\">&quot;title&quot;</span>: anime_title,\r\n                        <span class=\"hljs-string\">&quot;url&quot;</span>: anime_url,\r\n                    }\r\n                )\r\n            <span class=\"hljs-keyword\">except</span> (NotFoundErr, KeyError):\r\n                <span class=\"hljs-keyword\">pass</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> anime_list\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search_anime_episode_list</span>(<span class=\"hljs-params\">episode_endpoint: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\r\n\r\n    Take an url and\r\n    return list of episodes after scraping the site\r\n    for an url.\r\n\r\n    &gt;&gt;&gt; type(search_anime_episode_list(&quot;/anime/kimetsu-no-yaiba&quot;))\r\n    &lt;class &#x27;list&#x27;&gt;\r\n\r\n    Args:\r\n        episode_endpoint (str): [Endpoint of episode]\r\n\r\n    Raises:\r\n        e: [description]\r\n\r\n    Returns:\r\n        [list]: [List of episodes]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    request_url = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{BASE_URL}</span><span class=\"hljs-subst\">{episode_endpoint}</span>&quot;</span>\r\n\r\n    response = requests.get(url=request_url, headers={<span class=\"hljs-string\">&quot;UserAgent&quot;</span>: UserAgent().chrome})\r\n    response.raise_for_status()\r\n\r\n    soup = BeautifulSoup(response.text, <span class=\"hljs-string\">&quot;html.parser&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># With this id. get the episode list.</span>\r\n    episode_page_ul = soup.find(<span class=\"hljs-string\">&quot;ul&quot;</span>, {<span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;episode_related&quot;</span>})\r\n    episode_page_li = episode_page_ul.children\r\n\r\n    episode_list = []\r\n    <span class=\"hljs-keyword\">for</span> episode <span class=\"hljs-keyword\">in</span> episode_page_li:\r\n        <span class=\"hljs-keyword\">try</span>:\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(episode, NavigableString):\r\n                episode_list.append(\r\n                    {\r\n                        <span class=\"hljs-string\">&quot;title&quot;</span>: episode.find(<span class=\"hljs-string\">&quot;div&quot;</span>, {<span class=\"hljs-string\">&quot;class&quot;</span>: <span class=\"hljs-string\">&quot;name&quot;</span>}).text.replace(\r\n                            <span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>\r\n                        ),\r\n                        <span class=\"hljs-string\">&quot;url&quot;</span>: episode.find(<span class=\"hljs-string\">&quot;a&quot;</span>)[<span class=\"hljs-string\">&quot;href&quot;</span>],\r\n                    }\r\n                )\r\n        <span class=\"hljs-keyword\">except</span> (KeyError, NotFoundErr):\r\n            <span class=\"hljs-keyword\">pass</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> episode_list\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_anime_episode</span>(<span class=\"hljs-params\">episode_endpoint: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\r\n\r\n    Get click url and download url from episode url\r\n\r\n    &gt;&gt;&gt; type(get_anime_episode(&quot;/watch/kimetsu-no-yaiba/1&quot;))\r\n    &lt;class &#x27;list&#x27;&gt;\r\n\r\n    Args:\r\n        episode_endpoint (str): [Endpoint of episode]\r\n\r\n    Raises:\r\n        e: [description]\r\n\r\n    Returns:\r\n        [list]: [List of download and watch url]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    episode_page_url = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{BASE_URL}</span><span class=\"hljs-subst\">{episode_endpoint}</span>&quot;</span>\r\n\r\n    response = requests.get(\r\n        url=episode_page_url, headers={<span class=\"hljs-string\">&quot;User-Agent&quot;</span>: UserAgent().chrome}\r\n    )\r\n    response.raise_for_status()\r\n\r\n    soup = BeautifulSoup(response.text, <span class=\"hljs-string\">&quot;html.parser&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        episode_url = soup.find(<span class=\"hljs-string\">&quot;iframe&quot;</span>, {<span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;playerframe&quot;</span>})[<span class=\"hljs-string\">&quot;src&quot;</span>]\r\n        download_url = episode_url.replace(<span class=\"hljs-string\">&quot;/embed/&quot;</span>, <span class=\"hljs-string\">&quot;/playlist/&quot;</span>) + <span class=\"hljs-string\">&quot;.m3u8&quot;</span>\r\n    <span class=\"hljs-keyword\">except</span> (KeyError, NotFoundErr) <span class=\"hljs-keyword\">as</span> e:\r\n        <span class=\"hljs-keyword\">raise</span> e\r\n\r\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{BASE_URL}</span><span class=\"hljs-subst\">{episode_url}</span>&quot;</span>, <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{BASE_URL}</span><span class=\"hljs-subst\">{download_url}</span>&quot;</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n\r\n    anime_name = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter anime name: &quot;</span>).strip()\r\n    anime_list = search_scraper(anime_name)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(anime_list) == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;No anime found with this name&quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Found <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(anime_list)}</span> results: &quot;</span>)\r\n        <span class=\"hljs-keyword\">for</span> (i, anime) <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(anime_list):\r\n            anime_title = anime[<span class=\"hljs-string\">&quot;title&quot;</span>]\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{i+<span class=\"hljs-number\">1</span>}</span>. <span class=\"hljs-subst\">{anime_title}</span>&quot;</span>)\r\n\r\n        anime_choice = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;\\nPlease choose from the following list: &quot;</span>).strip())\r\n        chosen_anime = anime_list[anime_choice - <span class=\"hljs-number\">1</span>]\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;You chose <span class=\"hljs-subst\">{chosen_anime[<span class=\"hljs-string\">&#x27;title&#x27;</span>]}</span>. Searching for episodes...&quot;</span>)\r\n\r\n        episode_list = search_anime_episode_list(chosen_anime[<span class=\"hljs-string\">&quot;url&quot;</span>])\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(episode_list) == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;No episode found for this anime&quot;</span>)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Found <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(episode_list)}</span> results: &quot;</span>)\r\n            <span class=\"hljs-keyword\">for</span> (i, episode) <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(episode_list):\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{i+<span class=\"hljs-number\">1</span>}</span>. <span class=\"hljs-subst\">{episode[<span class=\"hljs-string\">&#x27;title&#x27;</span>]}</span>&quot;</span>)\r\n\r\n            episode_choice = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;\\nChoose an episode by serial no: &quot;</span>).strip())\r\n            chosen_episode = episode_list[episode_choice - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;You chose <span class=\"hljs-subst\">{chosen_episode[<span class=\"hljs-string\">&#x27;title&#x27;</span>]}</span>. Searching...&quot;</span>)\r\n\r\n            episode_url, download_url = get_anime_episode(chosen_episode[<span class=\"hljs-string\">&quot;url&quot;</span>])\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;\\nTo watch, ctrl+click on <span class=\"hljs-subst\">{episode_url}</span>.&quot;</span>)\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;To download, ctrl+click on <span class=\"hljs-subst\">{download_url}</span>.&quot;</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Saptarshi Sengupta",
      "email": "94242536+saptarshi1996@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}