{
  "slug": "bubble-sort-recursion",
  "name": "Bubble Sort Recursion",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\BubbleSortRecursion.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\BubbleSortRecursion.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * BubbleSort algorithm implements using recursion\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BubbleSortRecursion</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        Integer[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[<span class=\"hljs-number\">10</span>];\r\n\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\r\n        <span class=\"hljs-comment\">/* generate 10 random numbers from -50 to 49 */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; array.length; ++i) {\r\n            array[i] = random.nextInt(<span class=\"hljs-number\">100</span>) - <span class=\"hljs-number\">50</span>;\r\n        }\r\n\r\n        <span class=\"hljs-type\">BubbleSortRecursion</span> <span class=\"hljs-variable\">bubbleSortRecursion</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BubbleSortRecursion</span>();\r\n        bubbleSortRecursion.sort(array);\r\n\r\n        <span class=\"hljs-comment\">/* check array is sorted or not */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; array.length - <span class=\"hljs-number\">1</span>; ++i) {\r\n            <span class=\"hljs-keyword\">assert</span> (array[i].compareTo(array[i + <span class=\"hljs-number\">1</span>]) &lt;= <span class=\"hljs-number\">0</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> unsorted - an array should be sorted\r\n     * <span class=\"hljs-doctag\">@return</span> sorted array\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] unsorted) {\r\n        bubbleSort(unsorted, unsorted.length);\r\n        <span class=\"hljs-keyword\">return</span> unsorted;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * BubbleSort algorithm implements using recursion\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> unsorted array contains elements\r\n     * <span class=\"hljs-doctag\">@param</span> len length of given array\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bubbleSort</span><span class=\"hljs-params\">(T[] unsorted, <span class=\"hljs-type\">int</span> len)</span> {\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">swapped</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\r\n        <span class=\"hljs-comment\">/* flag to check if array is sorted or not */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; len - <span class=\"hljs-number\">1</span>; ++i) {\r\n            <span class=\"hljs-keyword\">if</span> (SortUtils.greater(unsorted[i], unsorted[i + <span class=\"hljs-number\">1</span>])) {\r\n                SortUtils.swap(unsorted, i, i + <span class=\"hljs-number\">1</span>);\r\n                swapped = <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (swapped) {\r\n            bubbleSort(unsorted, len - <span class=\"hljs-number\">1</span>);\r\n        }\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\bubble_sort_recursion.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\bubble_sort_recursion.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Bubble sort](https://en.wikipedia.org/wiki/Bubble_sort) algorithm\r\n * implementation using recursion.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Swapped two numbers using pointer\r\n * @param first first pointer of first number\r\n * @param second second pointer of second number\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *first, <span class=\"hljs-type\">int</span> *second)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> temp = *first;\r\n    *first = *second;\r\n    *second = temp;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Bubble sort algorithm implements using recursion\r\n * @param arr array to be sorted\r\n * @param size size of array\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">bubbleSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    <span class=\"hljs-type\">bool</span> swapped = <span class=\"hljs-literal\">false</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; ++i)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[i + <span class=\"hljs-number\">1</span>])\r\n        {\r\n            swap(arr + i, arr + i + <span class=\"hljs-number\">1</span>);\r\n            swapped = <span class=\"hljs-literal\">true</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (swapped)\r\n    {\r\n        bubbleSort(arr, size - <span class=\"hljs-number\">1</span>);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test function\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> size = <span class=\"hljs-number\">10</span>;\r\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n\r\n    <span class=\"hljs-comment\">/* generate size random numbers from 0 to 100 */</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\r\n    {\r\n        arr[i] = rand() % <span class=\"hljs-number\">100</span>;\r\n    }\r\n    bubbleSort(arr, size);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; ++i)\r\n    {\r\n        assert(arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>]);\r\n    }\r\n    <span class=\"hljs-built_in\">free</span>(arr);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Driver Code */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-comment\">/* Intializes random number generator */</span>\r\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\r\n    test();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}