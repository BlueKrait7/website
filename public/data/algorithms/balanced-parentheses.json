{
  "slug": "balanced-parentheses",
  "name": "Balanced Parentheses",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\stacks\\balanced_parentheses.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\stacks\\balanced_parentheses.py",
      "code": "<span class=\"hljs-keyword\">from</span> .stack <span class=\"hljs-keyword\">import</span> Stack\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">balanced_parentheses</span>(<span class=\"hljs-params\">parentheses: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Use a stack to check if a string of parentheses is balanced.\r\n    &gt;&gt;&gt; balanced_parentheses(&quot;([]{})&quot;)\r\n    True\r\n    &gt;&gt;&gt; balanced_parentheses(&quot;[()]{}{[()()]()}&quot;)\r\n    True\r\n    &gt;&gt;&gt; balanced_parentheses(&quot;[(])&quot;)\r\n    False\r\n    &gt;&gt;&gt; balanced_parentheses(&quot;1+2*3-4&quot;)\r\n    True\r\n    &gt;&gt;&gt; balanced_parentheses(&quot;&quot;)\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    stack: Stack[<span class=\"hljs-built_in\">str</span>] = Stack()\r\n    bracket_pairs = {<span class=\"hljs-string\">&quot;(&quot;</span>: <span class=\"hljs-string\">&quot;)&quot;</span>, <span class=\"hljs-string\">&quot;[&quot;</span>: <span class=\"hljs-string\">&quot;]&quot;</span>, <span class=\"hljs-string\">&quot;{&quot;</span>: <span class=\"hljs-string\">&quot;}&quot;</span>}\r\n    <span class=\"hljs-keyword\">for</span> bracket <span class=\"hljs-keyword\">in</span> parentheses:\r\n        <span class=\"hljs-keyword\">if</span> bracket <span class=\"hljs-keyword\">in</span> bracket_pairs:\r\n            stack.push(bracket)\r\n        <span class=\"hljs-keyword\">elif</span> bracket <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">&quot;)&quot;</span>, <span class=\"hljs-string\">&quot;]&quot;</span>, <span class=\"hljs-string\">&quot;}&quot;</span>):\r\n            <span class=\"hljs-keyword\">if</span> stack.is_empty() <span class=\"hljs-keyword\">or</span> bracket_pairs[stack.pop()] != bracket:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> stack.is_empty()\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n\r\n    examples = [<span class=\"hljs-string\">&quot;((()))&quot;</span>, <span class=\"hljs-string\">&quot;((())&quot;</span>, <span class=\"hljs-string\">&quot;(()))&quot;</span>]\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Balanced parentheses demonstration:\\n&quot;</span>)\r\n    <span class=\"hljs-keyword\">for</span> example <span class=\"hljs-keyword\">in</span> examples:\r\n        not_str = <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-keyword\">if</span> balanced_parentheses(example) <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;not &quot;</span>\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{example}</span> is <span class=\"hljs-subst\">{not_str}</span>balanced&quot;</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Edward Nuno",
      "email": "GOD11341258@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hrushikesh Hanbar",
      "email": "hrushikeshrohit@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Chris McLennon",
      "email": "mclennon@indeed.com",
      "commits": 1
    },
    {
      "name": "Omkar Pathak",
      "email": "omkarpathak27@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Mikael Souza",
      "email": "mikaelsouza@icomp.ufam.edu.br",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}