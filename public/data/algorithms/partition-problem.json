{
  "slug": "partition-problem",
  "name": "Partition Problem",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming\\partition_problem.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\partition_problem.cpp",
      "code": "<span class=\"hljs-comment\">/******************************************************************************\r\n * @file\r\n * @brief Implementation of the [Partition\r\n * Problem](https://en.wikipedia.org/wiki/Partition_problem )\r\n * @details\r\n * The partition problem, or number partitioning, is the task of deciding\r\n * whether a given multiset S of positive integers can be partitioned into two\r\n * subsets S1 and S2 such that the sum of the numbers in S1 equals the sum of\r\n * the numbers in S2. Although the partition problem is NP-complete, there is a\r\n * pseudo-polynomial time dynamic programming solution, and there are heuristics\r\n * that solve the problem in many instances, either optimally or approximately.\r\n * For this reason, it has been called &quot;the easiest hard problem&quot;.\r\n *\r\n * The worst case time complexity of Jarvis’s Algorithm is O(n^2). Using\r\n * Graham’s scan algorithm, we can find Convex Hull in O(nLogn) time.\r\n *\r\n * ### Implementation\r\n *\r\n * Step 1\r\n * Calculate sum of the array. If sum is odd, there can not be two subsets with\r\n * equal sum, so return false.\r\n *\r\n * Step 2\r\n * If sum of array elements is even, calculate sum/2 and find a subset of array\r\n * with sum equal to sum/2.\r\n *\r\n * @author [Lajat Manekar](https://github.com/Lazeeez)\r\n *\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO Operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;numeric&gt;</span>   <span class=\"hljs-comment\">/// for std::accumulate</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @namespace dp\r\n * @brief Dynamic programming algorithms\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-keyword\">namespace</span> dp {\r\n\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @namespace partitionProblem\r\n * @brief Partition problem algorithm\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-keyword\">namespace</span> partitionProblem {\r\n\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @brief Returns true if arr can be partitioned in two subsets of equal sum,\r\n * otherwise false\r\n * @param arr vector containing elements\r\n * @param size Size of the vector.\r\n * @returns @param bool whether the vector can be partitioned or not.\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">findPartiion</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; &amp;arr, <span class=\"hljs-type\">uint64_t</span> size)</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> sum = std::<span class=\"hljs-built_in\">accumulate</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>(),\r\n                                   <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">// Calculate sum of all elements</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (sum % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;  <span class=\"hljs-comment\">// if sum is odd, it cannot be divided into two equal sum</span>\r\n    }\r\n    std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; part;\r\n    <span class=\"hljs-comment\">// bool part[sum / 2 + 1];</span>\r\n\r\n    <span class=\"hljs-comment\">// Initialize the part array as 0</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> it = <span class=\"hljs-number\">0</span>; it &lt;= sum / <span class=\"hljs-number\">2</span>; ++it) {\r\n        part.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-literal\">false</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Fill the partition table in bottom up manner</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> it = <span class=\"hljs-number\">0</span>; it &lt; size; ++it) {\r\n        <span class=\"hljs-comment\">// The element to be included in the sum cannot be greater than the sum</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> it2 = sum / <span class=\"hljs-number\">2</span>; it2 &gt;= arr[it];\r\n             --it2) {  <span class=\"hljs-comment\">// Check if sum - arr[i]</span>\r\n            <span class=\"hljs-comment\">// ould be formed from a subset using elements before index i</span>\r\n            <span class=\"hljs-keyword\">if</span> (part[it2 - arr[it]] == <span class=\"hljs-number\">1</span> || it2 == arr[it]) {\r\n                part[it2] = <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> part[sum / <span class=\"hljs-number\">2</span>];\r\n}\r\n}  <span class=\"hljs-comment\">// namespace partitionProblem</span>\r\n}  <span class=\"hljs-comment\">// namespace dp</span>\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Self-test implementations\r\n * @returns void\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>}};\r\n    <span class=\"hljs-type\">uint64_t</span> n = arr.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-type\">bool</span> expected_result = <span class=\"hljs-literal\">true</span>;\r\n    <span class=\"hljs-type\">bool</span> derived_result = dp::partitionProblem::<span class=\"hljs-built_in\">findPartiion</span>(arr, n);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test: &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(expected_result == derived_result);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed!&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Main function\r\n * @returns 0 on exit\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}