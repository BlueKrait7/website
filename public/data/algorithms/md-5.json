{
  "slug": "md-5",
  "name": "Md 5",
  "categories": [
    "hashing"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "hashes\\md5.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/hashes\\md5.py",
      "code": "<span class=\"hljs-keyword\">import</span> math\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rearrange</span>(<span class=\"hljs-params\">bitString32</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\r\n    Regroups the given binary string.\r\n\r\n    Arguments:\r\n        bitString32 {[string]} -- [32 bit binary]\r\n\r\n    Raises:\r\n    ValueError -- [if the given string not are 32 bit binary string]\r\n\r\n    Returns:\r\n        [string] -- [32 bit binary string]\r\n    &gt;&gt;&gt; rearrange(&#x27;1234567890abcdfghijklmnopqrstuvw&#x27;)\r\n    &#x27;pqrstuvwhijklmno90abcdfg12345678&#x27;\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(bitString32) != <span class=\"hljs-number\">32</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Need length 32&quot;</span>)\r\n    newString = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]:\r\n        newString += bitString32[<span class=\"hljs-number\">8</span> * i : <span class=\"hljs-number\">8</span> * i + <span class=\"hljs-number\">8</span>]\r\n    <span class=\"hljs-keyword\">return</span> newString\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reformatHex</span>(<span class=\"hljs-params\">i</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\r\n    Converts the given integer into 8-digit hex number.\r\n\r\n    Arguments:\r\n            i {[int]} -- [integer]\r\n    &gt;&gt;&gt; reformatHex(666)\r\n    &#x27;9a020000&#x27;\r\n    &quot;&quot;&quot;</span>\r\n\r\n    hexrep = <span class=\"hljs-built_in\">format</span>(i, <span class=\"hljs-string\">&quot;08x&quot;</span>)\r\n    thing = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]:\r\n        thing += hexrep[<span class=\"hljs-number\">2</span> * i : <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>]\r\n    <span class=\"hljs-keyword\">return</span> thing\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pad</span>(<span class=\"hljs-params\">bitString</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\r\n    Fills up the binary string to a 512 bit binary string\r\n\r\n    Arguments:\r\n            bitString {[string]} -- [binary string]\r\n\r\n    Returns:\r\n            [string] -- [binary string]\r\n    &quot;&quot;&quot;</span>\r\n    startLength = <span class=\"hljs-built_in\">len</span>(bitString)\r\n    bitString += <span class=\"hljs-string\">&quot;1&quot;</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(bitString) % <span class=\"hljs-number\">512</span> != <span class=\"hljs-number\">448</span>:\r\n        bitString += <span class=\"hljs-string\">&quot;0&quot;</span>\r\n    lastPart = <span class=\"hljs-built_in\">format</span>(startLength, <span class=\"hljs-string\">&quot;064b&quot;</span>)\r\n    bitString += rearrange(lastPart[<span class=\"hljs-number\">32</span>:]) + rearrange(lastPart[:<span class=\"hljs-number\">32</span>])\r\n    <span class=\"hljs-keyword\">return</span> bitString\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getBlock</span>(<span class=\"hljs-params\">bitString</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\r\n    Iterator:\r\n            Returns by each call a list of length 16 with the 32 bit\r\n            integer blocks.\r\n\r\n    Arguments:\r\n            bitString {[string]} -- [binary string &gt;= 512]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    currPos = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> currPos &lt; <span class=\"hljs-built_in\">len</span>(bitString):\r\n        currPart = bitString[currPos : currPos + <span class=\"hljs-number\">512</span>]\r\n        mySplits = []\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">16</span>):\r\n            mySplits.append(<span class=\"hljs-built_in\">int</span>(rearrange(currPart[<span class=\"hljs-number\">32</span> * i : <span class=\"hljs-number\">32</span> * i + <span class=\"hljs-number\">32</span>]), <span class=\"hljs-number\">2</span>))\r\n        <span class=\"hljs-keyword\">yield</span> mySplits\r\n        currPos += <span class=\"hljs-number\">512</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">not32</span>(<span class=\"hljs-params\">i</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; not32(34)\r\n    4294967261\r\n    &quot;&quot;&quot;</span>\r\n    i_str = <span class=\"hljs-built_in\">format</span>(i, <span class=\"hljs-string\">&quot;032b&quot;</span>)\r\n    new_str = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> i_str:\r\n        new_str += <span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-keyword\">if</span> c == <span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;0&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(new_str, <span class=\"hljs-number\">2</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sum32</span>(<span class=\"hljs-params\">a, b</span>):\r\n    <span class=\"hljs-keyword\">return</span> (a + b) % <span class=\"hljs-number\">2</span>**<span class=\"hljs-number\">32</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">leftrot32</span>(<span class=\"hljs-params\">i, s</span>):\r\n    <span class=\"hljs-keyword\">return</span> (i &lt;&lt; s) ^ (i &gt;&gt; (<span class=\"hljs-number\">32</span> - s))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">md5me</span>(<span class=\"hljs-params\">testString</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\r\n    Returns a 32-bit hash code of the string &#x27;testString&#x27;\r\n\r\n    Arguments:\r\n            testString {[string]} -- [message]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    bs = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> testString:\r\n        bs += <span class=\"hljs-built_in\">format</span>(<span class=\"hljs-built_in\">ord</span>(i), <span class=\"hljs-string\">&quot;08b&quot;</span>)\r\n    bs = pad(bs)\r\n\r\n    tvals = [<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2</span>**<span class=\"hljs-number\">32</span> * <span class=\"hljs-built_in\">abs</span>(math.sin(i + <span class=\"hljs-number\">1</span>))) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">64</span>)]\r\n\r\n    a0 = <span class=\"hljs-number\">0x67452301</span>\r\n    b0 = <span class=\"hljs-number\">0xEFCDAB89</span>\r\n    c0 = <span class=\"hljs-number\">0x98BADCFE</span>\r\n    d0 = <span class=\"hljs-number\">0x10325476</span>\r\n\r\n    s = [\r\n        <span class=\"hljs-number\">7</span>,\r\n        <span class=\"hljs-number\">12</span>,\r\n        <span class=\"hljs-number\">17</span>,\r\n        <span class=\"hljs-number\">22</span>,\r\n        <span class=\"hljs-number\">7</span>,\r\n        <span class=\"hljs-number\">12</span>,\r\n        <span class=\"hljs-number\">17</span>,\r\n        <span class=\"hljs-number\">22</span>,\r\n        <span class=\"hljs-number\">7</span>,\r\n        <span class=\"hljs-number\">12</span>,\r\n        <span class=\"hljs-number\">17</span>,\r\n        <span class=\"hljs-number\">22</span>,\r\n        <span class=\"hljs-number\">7</span>,\r\n        <span class=\"hljs-number\">12</span>,\r\n        <span class=\"hljs-number\">17</span>,\r\n        <span class=\"hljs-number\">22</span>,\r\n        <span class=\"hljs-number\">5</span>,\r\n        <span class=\"hljs-number\">9</span>,\r\n        <span class=\"hljs-number\">14</span>,\r\n        <span class=\"hljs-number\">20</span>,\r\n        <span class=\"hljs-number\">5</span>,\r\n        <span class=\"hljs-number\">9</span>,\r\n        <span class=\"hljs-number\">14</span>,\r\n        <span class=\"hljs-number\">20</span>,\r\n        <span class=\"hljs-number\">5</span>,\r\n        <span class=\"hljs-number\">9</span>,\r\n        <span class=\"hljs-number\">14</span>,\r\n        <span class=\"hljs-number\">20</span>,\r\n        <span class=\"hljs-number\">5</span>,\r\n        <span class=\"hljs-number\">9</span>,\r\n        <span class=\"hljs-number\">14</span>,\r\n        <span class=\"hljs-number\">20</span>,\r\n        <span class=\"hljs-number\">4</span>,\r\n        <span class=\"hljs-number\">11</span>,\r\n        <span class=\"hljs-number\">16</span>,\r\n        <span class=\"hljs-number\">23</span>,\r\n        <span class=\"hljs-number\">4</span>,\r\n        <span class=\"hljs-number\">11</span>,\r\n        <span class=\"hljs-number\">16</span>,\r\n        <span class=\"hljs-number\">23</span>,\r\n        <span class=\"hljs-number\">4</span>,\r\n        <span class=\"hljs-number\">11</span>,\r\n        <span class=\"hljs-number\">16</span>,\r\n        <span class=\"hljs-number\">23</span>,\r\n        <span class=\"hljs-number\">4</span>,\r\n        <span class=\"hljs-number\">11</span>,\r\n        <span class=\"hljs-number\">16</span>,\r\n        <span class=\"hljs-number\">23</span>,\r\n        <span class=\"hljs-number\">6</span>,\r\n        <span class=\"hljs-number\">10</span>,\r\n        <span class=\"hljs-number\">15</span>,\r\n        <span class=\"hljs-number\">21</span>,\r\n        <span class=\"hljs-number\">6</span>,\r\n        <span class=\"hljs-number\">10</span>,\r\n        <span class=\"hljs-number\">15</span>,\r\n        <span class=\"hljs-number\">21</span>,\r\n        <span class=\"hljs-number\">6</span>,\r\n        <span class=\"hljs-number\">10</span>,\r\n        <span class=\"hljs-number\">15</span>,\r\n        <span class=\"hljs-number\">21</span>,\r\n        <span class=\"hljs-number\">6</span>,\r\n        <span class=\"hljs-number\">10</span>,\r\n        <span class=\"hljs-number\">15</span>,\r\n        <span class=\"hljs-number\">21</span>,\r\n    ]\r\n\r\n    <span class=\"hljs-keyword\">for</span> m <span class=\"hljs-keyword\">in</span> getBlock(bs):\r\n        A = a0\r\n        B = b0\r\n        C = c0\r\n        D = d0\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">64</span>):\r\n            <span class=\"hljs-keyword\">if</span> i &lt;= <span class=\"hljs-number\">15</span>:\r\n                <span class=\"hljs-comment\"># f = (B &amp; C) | (not32(B) &amp; D)</span>\r\n                f = D ^ (B &amp; (C ^ D))\r\n                g = i\r\n            <span class=\"hljs-keyword\">elif</span> i &lt;= <span class=\"hljs-number\">31</span>:\r\n                <span class=\"hljs-comment\"># f = (D &amp; B) | (not32(D) &amp; C)</span>\r\n                f = C ^ (D &amp; (B ^ C))\r\n                g = (<span class=\"hljs-number\">5</span> * i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">16</span>\r\n            <span class=\"hljs-keyword\">elif</span> i &lt;= <span class=\"hljs-number\">47</span>:\r\n                f = B ^ C ^ D\r\n                g = (<span class=\"hljs-number\">3</span> * i + <span class=\"hljs-number\">5</span>) % <span class=\"hljs-number\">16</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                f = C ^ (B | not32(D))\r\n                g = (<span class=\"hljs-number\">7</span> * i) % <span class=\"hljs-number\">16</span>\r\n            dtemp = D\r\n            D = C\r\n            C = B\r\n            B = sum32(B, leftrot32((A + f + tvals[i] + m[g]) % <span class=\"hljs-number\">2</span>**<span class=\"hljs-number\">32</span>, s[i]))\r\n            A = dtemp\r\n        a0 = sum32(a0, A)\r\n        b0 = sum32(b0, B)\r\n        c0 = sum32(c0, C)\r\n        d0 = sum32(d0, D)\r\n\r\n    digest = reformatHex(a0) + reformatHex(b0) + reformatHex(c0) + reformatHex(d0)\r\n    <span class=\"hljs-keyword\">return</span> digest\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test</span>():\r\n    <span class=\"hljs-keyword\">assert</span> md5me(<span class=\"hljs-string\">&quot;&quot;</span>) == <span class=\"hljs-string\">&quot;d41d8cd98f00b204e9800998ecf8427e&quot;</span>\r\n    <span class=\"hljs-keyword\">assert</span> (\r\n        md5me(<span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>)\r\n        == <span class=\"hljs-string\">&quot;9e107d9d372bb6826bd81d3542a419d6&quot;</span>\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Success.&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    test()\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "c-plus-plus": {
      "dir": "hashing\\md5.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/hashing\\md5.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @author [tGautot](https://github.com/tGautot)\r\n * @brief Simple C++ implementation of the [MD5 Hashing\r\n * Algorithm](https://en.wikipedia.org/wiki/MD5)\r\n * @details\r\n * The [MD5 Algorithm](https://en.wikipedia.org/wiki/MD5) is a\r\n * hashing algorithm which was designed in 1991 by [Ronal\r\n * Rivest](https://en.wikipedia.org/wiki/Ron_Rivest).\r\n *\r\n * MD5 is one of the most used hashing algorithm there is. Some of its\r\n * use cases are:\r\n *  1. Providing checksum for downloaded software\r\n *  2. Store salted password\r\n *\r\n * However MD5 has be know to be cryptographically weak for quite some\r\n * time, yet it is still widely used. This weakness was exploited by the\r\n * [Flame Malware](https://en.wikipedia.org/wiki/Flame_(malware)) in 2012\r\n *\r\n * ### Algorithm\r\n * First of all, all values are expected to be in [little endian]\r\n * (https://en.wikipedia.org/wiki/Endianness). This is especially important\r\n * when using part of the bytestring as an integer.\r\n *\r\n * The first step of the algorithm is to pad the message for its length to\r\n * be a multiple of 64 (bytes). This is done by first adding 0x80 (10000000)\r\n * and then only zeroes until the last 8 bytes must be filled, where then the\r\n * 64 bit size of the input will be added\r\n *\r\n * Once this is done, the algo breaks down this padded message\r\n * into 64 bytes chunks. Each chunk is used for one *round*, a round\r\n * breaks the chunk into 16 blocks of 4 bytes. During these rounds\r\n * the algorithm will update its 128 bit state (represented by 4 ints: A,B,C,D)\r\n * For more precisions on these operations please see the [Wikipedia\r\n * aritcle](https://en.wikipedia.org/wiki/MD5#Algorithm).\r\n * The signature given by MD5 is its 128 bit state once all rounds are done.\r\n * @note This is a simple implementation for a byte string but\r\n * some implmenetations can work on bytestream, messages of unknown length.\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// Used for std::copy</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>      <span class=\"hljs-comment\">/// Used for std::array</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// Used for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span>    <span class=\"hljs-comment\">/// Used for std::memcopy</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// Used for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>     <span class=\"hljs-comment\">/// Used for strings</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// Used for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace hashing\r\n * @brief Hashing algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> hashing {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace MD5\r\n * @brief Functions for the [MD5](https://en.wikipedia.org/wiki/MD5) algorithm\r\n * implementation\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> md5 {\r\n<span class=\"hljs-comment\">/**\r\n * @brief Rotates the bits of a 32-bit unsigned integer\r\n * @param n Integer to rotate\r\n * @param rotate How many bits for the rotation\r\n * @return uint32_t The rotated integer\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title\">leftRotate32bits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> n, std::<span class=\"hljs-type\">size_t</span> rotate)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> (n &lt;&lt; rotate) | (n &gt;&gt; (<span class=\"hljs-number\">32</span> - rotate));\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief Checks whether integers are stored as big endian or not\r\n * @note Taken from [this](https://stackoverflow.com/a/1001373) StackOverflow\r\n * post\r\n * @return true IF integers are detected to work as big-endian\r\n * @return false IF integers are detected to work as little-endian\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isBigEndian</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-keyword\">union</span> {\r\n        <span class=\"hljs-type\">uint32_t</span> i;\r\n        std::array&lt;<span class=\"hljs-type\">char</span>, 4&gt; c;\r\n    } bint = {<span class=\"hljs-number\">0x01020304</span>};\r\n\r\n    <span class=\"hljs-keyword\">return</span> bint.c[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span>;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief Sets 32-bit integer to little-endian if needed\r\n * @param n Number to set to little-endian (uint32_t)\r\n * @return uint32_t param n with binary representation as little-endian\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title\">toLittleEndian32</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">isBigEndian</span>()) {\r\n        <span class=\"hljs-keyword\">return</span> ((n &lt;&lt; <span class=\"hljs-number\">24</span>) &amp; <span class=\"hljs-number\">0xFF000000</span>) | ((n &lt;&lt; <span class=\"hljs-number\">8</span>) &amp; <span class=\"hljs-number\">0x00FF0000</span>) |\r\n               ((n &gt;&gt; <span class=\"hljs-number\">8</span>) &amp; <span class=\"hljs-number\">0x0000FF00</span>) | ((n &gt;&gt; <span class=\"hljs-number\">24</span>) &amp; <span class=\"hljs-number\">0x000000FF</span>);\r\n    }\r\n    <span class=\"hljs-comment\">// Machine works on little endian, no need to change anything</span>\r\n    <span class=\"hljs-keyword\">return</span> n;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief Sets 64-bit integer to little-endian if needed\r\n * @param n Number to set to little-endian (uint64_t)\r\n * @return uint64_t param n with binary representation as little-endian\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">toLittleEndian64</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">isBigEndian</span>()) {\r\n        <span class=\"hljs-keyword\">return</span> ((n &lt;&lt; <span class=\"hljs-number\">56</span>) &amp; <span class=\"hljs-number\">0xFF00000000000000</span>) |\r\n               ((n &lt;&lt; <span class=\"hljs-number\">40</span>) &amp; <span class=\"hljs-number\">0x00FF000000000000</span>) |\r\n               ((n &lt;&lt; <span class=\"hljs-number\">24</span>) &amp; <span class=\"hljs-number\">0x0000FF0000000000</span>) |\r\n               ((n &lt;&lt; <span class=\"hljs-number\">8</span>) &amp; <span class=\"hljs-number\">0x000000FF00000000</span>) |\r\n               ((n &gt;&gt; <span class=\"hljs-number\">8</span>) &amp; <span class=\"hljs-number\">0x00000000FF000000</span>) |\r\n               ((n &gt;&gt; <span class=\"hljs-number\">24</span>) &amp; <span class=\"hljs-number\">0x0000000000FF0000</span>) |\r\n               ((n &gt;&gt; <span class=\"hljs-number\">40</span>) &amp; <span class=\"hljs-number\">0x000000000000FF00</span>) |\r\n               ((n &gt;&gt; <span class=\"hljs-number\">56</span>) &amp; <span class=\"hljs-number\">0x00000000000000FF</span>);\r\n        ;\r\n    }\r\n    <span class=\"hljs-comment\">// Machine works on little endian, no need to change anything</span>\r\n    <span class=\"hljs-keyword\">return</span> n;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief Transforms the 128-bit MD5 signature into a 32 char hex string\r\n * @param sig The MD5 signature (Expected 16 bytes)\r\n * @return std::string The hex signature\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">sig2hex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>* sig)</span> </span>{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* hexChars = <span class=\"hljs-string\">&quot;0123456789abcdef&quot;</span>;\r\n    <span class=\"hljs-keyword\">auto</span>* intsig = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">uint8_t</span>*&gt;(sig);\r\n    std::string hex = <span class=\"hljs-string\">&quot;&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">16</span>; i++) {\r\n        hex.<span class=\"hljs-built_in\">push_back</span>(hexChars[(intsig[i] &gt;&gt; <span class=\"hljs-number\">4</span>) &amp; <span class=\"hljs-number\">0xF</span>]);\r\n        hex.<span class=\"hljs-built_in\">push_back</span>(hexChars[(intsig[i]) &amp; <span class=\"hljs-number\">0xF</span>]);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> hex;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief The MD5 algorithm itself, taking in a bytestring\r\n * @param input_bs The bytestring to hash\r\n * @param input_size The size (in BYTES) of the input\r\n * @return void* Pointer to the 128-bit signature\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span>* <span class=\"hljs-title\">hash_bs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span>* input_bs, <span class=\"hljs-type\">uint64_t</span> input_size)</span> </span>{\r\n    <span class=\"hljs-keyword\">auto</span>* input = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint8_t</span>*&gt;(input_bs);\r\n\r\n    <span class=\"hljs-comment\">// Step 0: Initial Data (Those are decided in the MD5 protocol)</span>\r\n    <span class=\"hljs-comment\">// s is the shift used in the leftrotate each round</span>\r\n    std::array&lt;<span class=\"hljs-type\">uint32_t</span>, 64&gt; s = {\r\n        <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">22</span>,\r\n        <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>,  <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>,  <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>,  <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>,  <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">20</span>,\r\n        <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">23</span>,\r\n        <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">21</span>};\r\n    <span class=\"hljs-comment\">// K is pseudo-random values used each round</span>\r\n    <span class=\"hljs-comment\">// The values can be obtained by the following python code:</span>\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * @brief Values of K are pseudo-random and used to &quot;salt&quot; each round\r\n     * The values can be obtained by the following python code\r\n     * @code{.py}\r\n     * from math import floor, sin\r\n     *\r\n     * for i in range(64):\r\n     *     print(floor(2**32 * abs(sin(i+1))))\r\n     * @endcode\r\n     */</span>\r\n    std::array&lt;<span class=\"hljs-type\">uint32_t</span>, 64&gt; K = {\r\n        <span class=\"hljs-number\">3614090360</span>, <span class=\"hljs-number\">3905402710</span>, <span class=\"hljs-number\">606105819</span>,  <span class=\"hljs-number\">3250441966</span>, <span class=\"hljs-number\">4118548399</span>, <span class=\"hljs-number\">1200080426</span>,\r\n        <span class=\"hljs-number\">2821735955</span>, <span class=\"hljs-number\">4249261313</span>, <span class=\"hljs-number\">1770035416</span>, <span class=\"hljs-number\">2336552879</span>, <span class=\"hljs-number\">4294925233</span>, <span class=\"hljs-number\">2304563134</span>,\r\n        <span class=\"hljs-number\">1804603682</span>, <span class=\"hljs-number\">4254626195</span>, <span class=\"hljs-number\">2792965006</span>, <span class=\"hljs-number\">1236535329</span>, <span class=\"hljs-number\">4129170786</span>, <span class=\"hljs-number\">3225465664</span>,\r\n        <span class=\"hljs-number\">643717713</span>,  <span class=\"hljs-number\">3921069994</span>, <span class=\"hljs-number\">3593408605</span>, <span class=\"hljs-number\">38016083</span>,   <span class=\"hljs-number\">3634488961</span>, <span class=\"hljs-number\">3889429448</span>,\r\n        <span class=\"hljs-number\">568446438</span>,  <span class=\"hljs-number\">3275163606</span>, <span class=\"hljs-number\">4107603335</span>, <span class=\"hljs-number\">1163531501</span>, <span class=\"hljs-number\">2850285829</span>, <span class=\"hljs-number\">4243563512</span>,\r\n        <span class=\"hljs-number\">1735328473</span>, <span class=\"hljs-number\">2368359562</span>, <span class=\"hljs-number\">4294588738</span>, <span class=\"hljs-number\">2272392833</span>, <span class=\"hljs-number\">1839030562</span>, <span class=\"hljs-number\">4259657740</span>,\r\n        <span class=\"hljs-number\">2763975236</span>, <span class=\"hljs-number\">1272893353</span>, <span class=\"hljs-number\">4139469664</span>, <span class=\"hljs-number\">3200236656</span>, <span class=\"hljs-number\">681279174</span>,  <span class=\"hljs-number\">3936430074</span>,\r\n        <span class=\"hljs-number\">3572445317</span>, <span class=\"hljs-number\">76029189</span>,   <span class=\"hljs-number\">3654602809</span>, <span class=\"hljs-number\">3873151461</span>, <span class=\"hljs-number\">530742520</span>,  <span class=\"hljs-number\">3299628645</span>,\r\n        <span class=\"hljs-number\">4096336452</span>, <span class=\"hljs-number\">1126891415</span>, <span class=\"hljs-number\">2878612391</span>, <span class=\"hljs-number\">4237533241</span>, <span class=\"hljs-number\">1700485571</span>, <span class=\"hljs-number\">2399980690</span>,\r\n        <span class=\"hljs-number\">4293915773</span>, <span class=\"hljs-number\">2240044497</span>, <span class=\"hljs-number\">1873313359</span>, <span class=\"hljs-number\">4264355552</span>, <span class=\"hljs-number\">2734768916</span>, <span class=\"hljs-number\">1309151649</span>,\r\n        <span class=\"hljs-number\">4149444226</span>, <span class=\"hljs-number\">3174756917</span>, <span class=\"hljs-number\">718787259</span>,  <span class=\"hljs-number\">3951481745</span>};\r\n\r\n    <span class=\"hljs-comment\">// The initial 128-bit state</span>\r\n    <span class=\"hljs-type\">uint32_t</span> a0 = <span class=\"hljs-number\">0x67452301</span>, A = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">uint32_t</span> b0 = <span class=\"hljs-number\">0xefcdab89</span>, B = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">uint32_t</span> c0 = <span class=\"hljs-number\">0x98badcfe</span>, C = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">uint32_t</span> d0 = <span class=\"hljs-number\">0x10325476</span>, D = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// Step 1: Processing the bytestring</span>\r\n\r\n    <span class=\"hljs-comment\">// First compute the size the padded message will have</span>\r\n    <span class=\"hljs-comment\">// so it is possible to allocate the right amount of memory</span>\r\n    <span class=\"hljs-type\">uint64_t</span> padded_message_size = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">if</span> (input_size % <span class=\"hljs-number\">64</span> &lt; <span class=\"hljs-number\">56</span>) {\r\n        padded_message_size = input_size + <span class=\"hljs-number\">64</span> - (input_size % <span class=\"hljs-number\">64</span>);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        padded_message_size = input_size + <span class=\"hljs-number\">128</span> - (input_size % <span class=\"hljs-number\">64</span>);\r\n    }\r\n\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint8_t</span>&gt; <span class=\"hljs-title\">padded_message</span><span class=\"hljs-params\">(padded_message_size)</span></span>;\r\n\r\n    <span class=\"hljs-comment\">// Beginning of the padded message is the original message</span>\r\n    std::<span class=\"hljs-built_in\">copy</span>(input, input + input_size, padded_message.<span class=\"hljs-built_in\">begin</span>());\r\n\r\n    <span class=\"hljs-comment\">// Afterwards comes a single 1 bit and then only zeroes</span>\r\n    padded_message[input_size] = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">7</span>;  <span class=\"hljs-comment\">// 10000000</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = input_size; i % <span class=\"hljs-number\">64</span> != <span class=\"hljs-number\">56</span>; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (i == input_size) {\r\n            <span class=\"hljs-keyword\">continue</span>;  <span class=\"hljs-comment\">// pass first iteration</span>\r\n        }\r\n        padded_message[i] = <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// We then have to add the 64-bit size of the message at the end</span>\r\n    <span class=\"hljs-comment\">// When there is a conversion from int to bytestring or vice-versa</span>\r\n    <span class=\"hljs-comment\">// We always need to make sure it is little endian</span>\r\n    <span class=\"hljs-type\">uint64_t</span> input_bitsize_le = <span class=\"hljs-built_in\">toLittleEndian64</span>(input_size * <span class=\"hljs-number\">8</span>);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">8</span>; i++) {\r\n        padded_message[padded_message_size - <span class=\"hljs-number\">8</span> + i] =\r\n            (input_bitsize_le &gt;&gt; (<span class=\"hljs-number\">56</span> - <span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Already allocate memory for blocks</span>\r\n    std::array&lt;<span class=\"hljs-type\">uint32_t</span>, 16&gt; blocks{};\r\n\r\n    <span class=\"hljs-comment\">// Rounds</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> chunk = <span class=\"hljs-number\">0</span>; chunk * <span class=\"hljs-number\">64</span> &lt; padded_message_size; chunk++) {\r\n        <span class=\"hljs-comment\">// First, build the 16 32-bits blocks from the chunk</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> bid = <span class=\"hljs-number\">0</span>; bid &lt; <span class=\"hljs-number\">16</span>; bid++) {\r\n            blocks[bid] = <span class=\"hljs-number\">0</span>;\r\n\r\n            <span class=\"hljs-comment\">// Having to build a 32-bit word from 4-bit words</span>\r\n            <span class=\"hljs-comment\">// Add each and shift them to the left</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> cid = <span class=\"hljs-number\">0</span>; cid &lt; <span class=\"hljs-number\">4</span>; cid++) {\r\n                blocks[bid] = (blocks[bid] &lt;&lt; <span class=\"hljs-number\">8</span>) +\r\n                              padded_message[chunk * <span class=\"hljs-number\">64</span> + bid * <span class=\"hljs-number\">4</span> + cid];\r\n            }\r\n        }\r\n\r\n        A = a0;\r\n        B = b0;\r\n        C = c0;\r\n        D = d0;\r\n\r\n        <span class=\"hljs-comment\">// Main &quot;hashing&quot; loop</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">64</span>; i++) {\r\n            <span class=\"hljs-type\">uint32_t</span> F = <span class=\"hljs-number\">0</span>, g = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">16</span>) {\r\n                F = (B &amp; C) | ((~B) &amp; D);\r\n                g = i;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">32</span>) {\r\n                F = (D &amp; B) | ((~D) &amp; C);\r\n                g = (<span class=\"hljs-number\">5</span> * i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">16</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">48</span>) {\r\n                F = B ^ C ^ D;\r\n                g = (<span class=\"hljs-number\">3</span> * i + <span class=\"hljs-number\">5</span>) % <span class=\"hljs-number\">16</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                F = C ^ (B | (~D));\r\n                g = (<span class=\"hljs-number\">7</span> * i) % <span class=\"hljs-number\">16</span>;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// Update the accumulators</span>\r\n            F += A + K[i] + <span class=\"hljs-built_in\">toLittleEndian32</span>(blocks[g]);\r\n\r\n            A = D;\r\n            D = C;\r\n            C = B;\r\n            B += <span class=\"hljs-built_in\">leftRotate32bits</span>(F, s[i]);\r\n        }\r\n        <span class=\"hljs-comment\">// Update the state with this chunk&#x27;s hash</span>\r\n        a0 += A;\r\n        b0 += B;\r\n        c0 += C;\r\n        d0 += D;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Build signature from state</span>\r\n    <span class=\"hljs-comment\">// Note, any type could be used for the signature</span>\r\n    <span class=\"hljs-comment\">// uint8_t was used to make the 16 bytes obvious</span>\r\n    <span class=\"hljs-comment\">// The sig needs to be little endian</span>\r\n    <span class=\"hljs-keyword\">auto</span>* sig = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">uint8_t</span>[<span class=\"hljs-number\">16</span>];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) {\r\n        sig[i] = (a0 &gt;&gt; (<span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\r\n        sig[i + <span class=\"hljs-number\">4</span>] = (b0 &gt;&gt; (<span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\r\n        sig[i + <span class=\"hljs-number\">8</span>] = (c0 &gt;&gt; (<span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\r\n        sig[i + <span class=\"hljs-number\">12</span>] = (d0 &gt;&gt; (<span class=\"hljs-number\">8</span> * i)) &amp; <span class=\"hljs-number\">0xFF</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> sig;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief Converts the string to bytestring and calls the main algorithm\r\n * @param message Plain character message to hash\r\n * @return void* Pointer to the MD5 signature\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span>* <span class=\"hljs-title\">hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string&amp; message)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">hash_bs</span>(&amp;message[<span class=\"hljs-number\">0</span>], message.<span class=\"hljs-built_in\">size</span>());\r\n}\r\n}  <span class=\"hljs-comment\">// namespace md5</span>\r\n}  <span class=\"hljs-comment\">// namespace hashing</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations of well-known MD5 hashes\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Hashes empty string and stores signature</span>\r\n    <span class=\"hljs-type\">void</span>* sig = hashing::md5::<span class=\"hljs-built_in\">hash</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hashing empty string&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Prints signature hex representation</span>\r\n    std::cout &lt;&lt; hashing::md5::<span class=\"hljs-built_in\">sig2hex</span>(sig) &lt;&lt; std::endl &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Test with cassert whether sig is correct from the expected value</span>\r\n    <span class=\"hljs-built_in\">assert</span>(hashing::md5::<span class=\"hljs-built_in\">sig2hex</span>(sig).<span class=\"hljs-built_in\">compare</span>(\r\n               <span class=\"hljs-string\">&quot;d41d8cd98f00b204e9800998ecf8427e&quot;</span>) == <span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-comment\">// Hashes &quot;The quick brown fox jumps over the lazy dog&quot; and stores signature</span>\r\n    <span class=\"hljs-type\">void</span>* sig2 =\r\n        hashing::md5::<span class=\"hljs-built_in\">hash</span>(<span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hashing The quick brown fox jumps over the lazy dog&quot;</span>\r\n              &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Prints signature hex representation</span>\r\n    std::cout &lt;&lt; hashing::md5::<span class=\"hljs-built_in\">sig2hex</span>(sig2) &lt;&lt; std::endl &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Test with cassert whether sig is correct from the expected value</span>\r\n    <span class=\"hljs-built_in\">assert</span>(hashing::md5::<span class=\"hljs-built_in\">sig2hex</span>(sig2).<span class=\"hljs-built_in\">compare</span>(\r\n               <span class=\"hljs-string\">&quot;9e107d9d372bb6826bd81d3542a419d6&quot;</span>) == <span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-comment\">// Hashes &quot;The quick brown fox jumps over the lazy dog.&quot; (notice the</span>\r\n    <span class=\"hljs-comment\">// additional period) and stores signature</span>\r\n    <span class=\"hljs-type\">void</span>* sig3 =\r\n        hashing::md5::<span class=\"hljs-built_in\">hash</span>(<span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hashing &quot;</span>\r\n                 <span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>\r\n              &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Prints signature hex representation</span>\r\n    std::cout &lt;&lt; hashing::md5::<span class=\"hljs-built_in\">sig2hex</span>(sig3) &lt;&lt; std::endl &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Test with cassert whether sig is correct from the expected value</span>\r\n    <span class=\"hljs-built_in\">assert</span>(hashing::md5::<span class=\"hljs-built_in\">sig2hex</span>(sig3).<span class=\"hljs-built_in\">compare</span>(\r\n               <span class=\"hljs-string\">&quot;e4d909c290d0fb1ca068ffaddf22cbd0&quot;</span>) == <span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-comment\">// Hashes &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>\r\n    <span class=\"hljs-comment\">// and stores signature</span>\r\n    <span class=\"hljs-type\">void</span>* sig4 = hashing::md5::<span class=\"hljs-built_in\">hash</span>(\r\n        <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>);\r\n    std::cout\r\n        &lt;&lt; <span class=\"hljs-string\">&quot;Hashing &quot;</span>\r\n           <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>\r\n        &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Prints signature hex representation</span>\r\n    std::cout &lt;&lt; hashing::md5::<span class=\"hljs-built_in\">sig2hex</span>(sig4) &lt;&lt; std::endl &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Test with cassert whether sig is correct from the expected value</span>\r\n    <span class=\"hljs-built_in\">assert</span>(hashing::md5::<span class=\"hljs-built_in\">sig2hex</span>(sig4).<span class=\"hljs-built_in\">compare</span>(\r\n               <span class=\"hljs-string\">&quot;d174ab98d277d9f5a5611c2c9f419d9f&quot;</span>) == <span class=\"hljs-number\">0</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Puts user in a loop where inputs can be given and MD5 hash will be\r\n * computed and printed\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">interactive</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\r\n        std::string input;\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter a message to be hashed (Ctrl-C to exit): &quot;</span>\r\n                  &lt;&lt; std::endl;\r\n        std::<span class=\"hljs-built_in\">getline</span>(std::cin, input);\r\n        <span class=\"hljs-type\">void</span>* sig = hashing::md5::<span class=\"hljs-built_in\">hash</span>(input);\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hash is: &quot;</span> &lt;&lt; hashing::md5::<span class=\"hljs-built_in\">sig2hex</span>(sig) &lt;&lt; std::endl;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Want to enter another message? (y/n) &quot;</span>;\r\n            std::<span class=\"hljs-built_in\">getline</span>(std::cin, input);\r\n            <span class=\"hljs-keyword\">if</span> (input.<span class=\"hljs-built_in\">compare</span>(<span class=\"hljs-string\">&quot;y&quot;</span>) == <span class=\"hljs-number\">0</span>) {\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (input.<span class=\"hljs-built_in\">compare</span>(<span class=\"hljs-string\">&quot;n&quot;</span>) == <span class=\"hljs-number\">0</span>) {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n\r\n    <span class=\"hljs-comment\">// Launch interactive mode where user can input messages and see</span>\r\n    <span class=\"hljs-comment\">// their hash</span>\r\n    <span class=\"hljs-built_in\">interactive</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "tGautot",
      "email": "44877251+tGautot@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    },
    {
      "name": "naveenarun",
      "email": "notatroll.troll@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}