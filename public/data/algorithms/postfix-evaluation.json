{
  "slug": "postfix-evaluation",
  "name": "Postfix Evaluation",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\stacks\\postfix_evaluation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\stacks\\postfix_evaluation.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nOutput:\r\n\r\nEnter a Postfix Equation (space separated) = 5 6 9 * +\r\n Symbol  |    Action    | Stack\r\n-----------------------------------\r\n       5 | push(5)      | 5\r\n       6 | push(6)      | 5,6\r\n       9 | push(9)      | 5,6,9\r\n         | pop(9)       | 5,6\r\n         | pop(6)       | 5\r\n       * | push(6*9)    | 5,54\r\n         | pop(54)      | 5\r\n         | pop(5)       |\r\n       + | push(5+54)   | 59\r\n\r\n        Result =  59\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> operator <span class=\"hljs-keyword\">as</span> op\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">Solve</span>(<span class=\"hljs-params\">Postfix</span>):\r\n    Stack = []\r\n    Div = <span class=\"hljs-keyword\">lambda</span> x, y: <span class=\"hljs-built_in\">int</span>(x / y)  <span class=\"hljs-comment\"># noqa: E731 integer division operation</span>\r\n    Opr = {\r\n        <span class=\"hljs-string\">&quot;^&quot;</span>: op.<span class=\"hljs-built_in\">pow</span>,\r\n        <span class=\"hljs-string\">&quot;*&quot;</span>: op.mul,\r\n        <span class=\"hljs-string\">&quot;/&quot;</span>: Div,\r\n        <span class=\"hljs-string\">&quot;+&quot;</span>: op.add,\r\n        <span class=\"hljs-string\">&quot;-&quot;</span>: op.sub,\r\n    }  <span class=\"hljs-comment\"># operators &amp; their respective operation</span>\r\n\r\n    <span class=\"hljs-comment\"># print table header</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Symbol&quot;</span>.center(<span class=\"hljs-number\">8</span>), <span class=\"hljs-string\">&quot;Action&quot;</span>.center(<span class=\"hljs-number\">12</span>), <span class=\"hljs-string\">&quot;Stack&quot;</span>, sep=<span class=\"hljs-string\">&quot; | &quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;-&quot;</span> * (<span class=\"hljs-number\">30</span> + <span class=\"hljs-built_in\">len</span>(Postfix)))\r\n\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> Postfix:\r\n        <span class=\"hljs-keyword\">if</span> x.isdigit():  <span class=\"hljs-comment\"># if x in digit</span>\r\n            Stack.append(x)  <span class=\"hljs-comment\"># append x to stack</span>\r\n            <span class=\"hljs-comment\"># output in tabular format</span>\r\n            <span class=\"hljs-built_in\">print</span>(x.rjust(<span class=\"hljs-number\">8</span>), (<span class=\"hljs-string\">&quot;push(&quot;</span> + x + <span class=\"hljs-string\">&quot;)&quot;</span>).ljust(<span class=\"hljs-number\">12</span>), <span class=\"hljs-string\">&quot;,&quot;</span>.join(Stack), sep=<span class=\"hljs-string\">&quot; | &quot;</span>)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            B = Stack.pop()  <span class=\"hljs-comment\"># pop stack</span>\r\n            <span class=\"hljs-comment\"># output in tabular format</span>\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;</span>.rjust(<span class=\"hljs-number\">8</span>), (<span class=\"hljs-string\">&quot;pop(&quot;</span> + B + <span class=\"hljs-string\">&quot;)&quot;</span>).ljust(<span class=\"hljs-number\">12</span>), <span class=\"hljs-string\">&quot;,&quot;</span>.join(Stack), sep=<span class=\"hljs-string\">&quot; | &quot;</span>)\r\n\r\n            A = Stack.pop()  <span class=\"hljs-comment\"># pop stack</span>\r\n            <span class=\"hljs-comment\"># output in tabular format</span>\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;</span>.rjust(<span class=\"hljs-number\">8</span>), (<span class=\"hljs-string\">&quot;pop(&quot;</span> + A + <span class=\"hljs-string\">&quot;)&quot;</span>).ljust(<span class=\"hljs-number\">12</span>), <span class=\"hljs-string\">&quot;,&quot;</span>.join(Stack), sep=<span class=\"hljs-string\">&quot; | &quot;</span>)\r\n\r\n            Stack.append(\r\n                <span class=\"hljs-built_in\">str</span>(Opr[x](<span class=\"hljs-built_in\">int</span>(A), <span class=\"hljs-built_in\">int</span>(B)))\r\n            )  <span class=\"hljs-comment\"># evaluate the 2 values popped from stack &amp; push result to stack</span>\r\n            <span class=\"hljs-comment\"># output in tabular format</span>\r\n            <span class=\"hljs-built_in\">print</span>(\r\n                x.rjust(<span class=\"hljs-number\">8</span>),\r\n                (<span class=\"hljs-string\">&quot;push(&quot;</span> + A + x + B + <span class=\"hljs-string\">&quot;)&quot;</span>).ljust(<span class=\"hljs-number\">12</span>),\r\n                <span class=\"hljs-string\">&quot;,&quot;</span>.join(Stack),\r\n                sep=<span class=\"hljs-string\">&quot; | &quot;</span>,\r\n            )\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(Stack[<span class=\"hljs-number\">0</span>])\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    Postfix = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;\\n\\nEnter a Postfix Equation (space separated) = &quot;</span>).split(<span class=\"hljs-string\">&quot; &quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n\\tResult = &quot;</span>, Solve(Postfix))\r\n"
    },
    "c-plus-plus": {
      "dir": "others\\postfix_evaluation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others\\postfix_evaluation.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Evaluation of [Postfix Expression](https://en.wikipedia.org/wiki/Reverse_Polish_notation)\r\n * @author [Darshana Sarma](https://github.com/Darshana-Sarma)\r\n * @details\r\n * Create a stack to store operands (or values).\r\n * Scan the given expression and do following for every scanned element.\r\n * If the element is a number, push it into the stack\r\n * If the element is a operator, pop operands for the operator from stack.\r\n * Evaluate the operator and push the result back to the stack\r\n * When the expression is ended, the number in the stack is the final answer\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">// for all_of</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>      <span class=\"hljs-comment\">// for std::array</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">// for io operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>     <span class=\"hljs-comment\">// for stof</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace others\r\n * @brief Other algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> others {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace postfix_expression\r\n * @brief Functions for Postfix Expression algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> postfix_expression {\r\n <span class=\"hljs-comment\">/**\r\n * @brief Creates an array to be used as stack for storing values\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Stack</span> {\r\n <span class=\"hljs-keyword\">public</span>:\r\n    std::array&lt;<span class=\"hljs-type\">float</span>, 20&gt; stack{}; <span class=\"hljs-comment\">///&lt; Array which will be used to store numbers in the input</span>\r\n    <span class=\"hljs-type\">int</span> stackTop = <span class=\"hljs-number\">-1</span>;            <span class=\"hljs-comment\">///&lt; Represents the index of the last value added to array. -1 means array is empty</span>\r\n};\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Pushing operand, also called the number in the array to the stack\r\n * @param operand float value from the input array or evaluation\r\n * @param stack stack containing numbers\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> operand, Stack *stack)</span> </span>{\r\n    stack-&gt;stackTop++;\r\n    stack-&gt;stack[stack-&gt;stackTop] = operand;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Popping operand, also called the number from the stack\r\n * @param stack stack containing numbers\r\n * @returns operand float on top of stack\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">(Stack *stack)</span> </span>{\r\n    <span class=\"hljs-type\">float</span> operand = stack-&gt;stack[stack-&gt;stackTop];\r\n    stack-&gt;stackTop--;\r\n    <span class=\"hljs-keyword\">return</span> operand;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Checks if scanned string is a number\r\n * @param s scanned string\r\n * @returns bool boolean value if string is number\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_number</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;s)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> !s.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; std::<span class=\"hljs-built_in\">all_of</span>(s.<span class=\"hljs-built_in\">begin</span>(), s.<span class=\"hljs-built_in\">end</span>(), ::isdigit);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Evaluate answer using given last two operands from and operation\r\n * @param a second last added operand which will be used for evaluation\r\n * @param b last added operand which will be used for evaluation\r\n * @param operation to be performed with respective floats\r\n * @param stack containing numbers\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">evaluate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> a, <span class=\"hljs-type\">float</span> b, <span class=\"hljs-type\">const</span> std::string &amp;operation, Stack *stack)</span> </span>{\r\n    <span class=\"hljs-type\">float</span> c = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *op = operation.<span class=\"hljs-built_in\">c_str</span>();\r\n    <span class=\"hljs-keyword\">switch</span> (*op) {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:\r\n            c = a + b; <span class=\"hljs-comment\">// Addition of numbers</span>\r\n            others::postfix_expression::<span class=\"hljs-built_in\">push</span>(c, stack);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:\r\n            c = a - b; <span class=\"hljs-comment\">// Subtraction of numbers</span>\r\n            others::postfix_expression::<span class=\"hljs-built_in\">push</span>(c, stack);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:\r\n            c = a * b; <span class=\"hljs-comment\">// Multiplication of numbers</span>\r\n            others::postfix_expression::<span class=\"hljs-built_in\">push</span>(c, stack);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:\r\n            c = a / b; <span class=\"hljs-comment\">// Division of numbers</span>\r\n            others::postfix_expression::<span class=\"hljs-built_in\">push</span>(c, stack);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">default</span>:\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Operator not defined\\n&quot;</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Postfix Evaluation algorithm to compute the value from given input\r\n * array\r\n * @tparam N number of array size\r\n * @param input Array of characters consisting of numbers and operations\r\n * @returns stack[stackTop] returns the top value from the stack\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;std::<span class=\"hljs-type\">size_t</span> N&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">postfix_evaluation</span><span class=\"hljs-params\">(std::array&lt;std::string, N&gt; input)</span> </span>{\r\n    Stack stack;\r\n    <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">while</span> (j &lt; N) {\r\n        std::string scan = input[j];\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">is_number</span>(scan)) {\r\n            <span class=\"hljs-built_in\">push</span>(std::<span class=\"hljs-built_in\">stof</span>(scan), &amp;stack);\r\n\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-type\">float</span> op2 = <span class=\"hljs-built_in\">pop</span>(&amp;stack);\r\n            <span class=\"hljs-type\">float</span> op1 = <span class=\"hljs-built_in\">pop</span>(&amp;stack);\r\n\r\n            <span class=\"hljs-built_in\">evaluate</span>(op1, op2, scan, &amp;stack);\r\n        }\r\n        j++;\r\n    }\r\n\r\n    std::cout &lt;&lt; stack.stack[stack.stackTop] &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-keyword\">return</span> stack.stack[stack.stackTop];\r\n}\r\n}  <span class=\"hljs-comment\">// namespace postfix_expression</span>\r\n}  <span class=\"hljs-comment\">// namespace others</span>\r\n\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function 1 with input array\r\n * {&#x27;2&#x27;, &#x27;3&#x27;, &#x27;1&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;9&#x27;, &#x27;-&#x27;}\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_function_1</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::array&lt;std::string, 7&gt; input = {<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>, <span class=\"hljs-string\">&quot;+&quot;</span>, <span class=\"hljs-string\">&quot;9&quot;</span>, <span class=\"hljs-string\">&quot;-&quot;</span>};\r\n\r\n    <span class=\"hljs-type\">float</span> answer = others::postfix_expression::<span class=\"hljs-built_in\">postfix_evaluation</span>(input);\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(answer == <span class=\"hljs-number\">-4</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function 2 with input array\r\n * {&#x27;1&#x27;, &#x27;2&#x27;, &#x27;+&#x27;, &#x27;2&#x27;, &#x27;/&#x27;, &#x27;5&#x27;, &#x27;*&#x27;, &#x27;7&#x27;, &#x27;+&#x27;}\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_function_2</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::array&lt;std::string, 9&gt; input = {<span class=\"hljs-string\">&quot;100&quot;</span>, <span class=\"hljs-string\">&quot;200&quot;</span>, <span class=\"hljs-string\">&quot;+&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>,\r\n                                        <span class=\"hljs-string\">&quot;5&quot;</span>,   <span class=\"hljs-string\">&quot;*&quot;</span>,   <span class=\"hljs-string\">&quot;7&quot;</span>, <span class=\"hljs-string\">&quot;+&quot;</span>};\r\n    <span class=\"hljs-type\">float</span> answer = others::postfix_expression::<span class=\"hljs-built_in\">postfix_evaluation</span>(input);\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(answer == <span class=\"hljs-number\">757</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test_function_1</span>();\r\n    <span class=\"hljs-built_in\">test_function_2</span>();\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTest implementations passed!\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "c": {
      "dir": "misc\\postfix_evaluation.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc\\postfix_evaluation.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Postfix evaluation algorithm](https://www.includehelp.com/c/evaluation-of-postfix-expressions-using-stack-with-c-program.aspx) implementation\r\n * @details\r\n * The input postfix expression is of type string upto 49 characters (including space delimiters).\r\n * Supported operations- &#x27;+&#x27;, &#x27;-&#x27;, &#x27;/&#x27;, &#x27;*&#x27;, &#x27;%&#x27;\r\n * @author [Kumar Yash](https://github.com/kumaryash18)\r\n */</span>\r\n \r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>\t<span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span>\t<span class=\"hljs-comment\">/// for strlen()</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctype.h&gt;</span>\t<span class=\"hljs-comment\">/// for isdigit()</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>\t<span class=\"hljs-comment\">/// for exit()</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span>\t<span class=\"hljs-comment\">/// for int8_t</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>\t<span class=\"hljs-comment\">/// for assert</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief array implementation of stack using structure\r\n */</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span> {</span>\r\n\t<span class=\"hljs-type\">int8_t</span> <span class=\"hljs-built_in\">stack</span>[<span class=\"hljs-number\">20</span>];\t\t<span class=\"hljs-comment\">///&lt; array stack</span>\r\n\t<span class=\"hljs-type\">int</span> top;\t\t<span class=\"hljs-comment\">///&lt; stores index of the top element</span>\r\n};\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span> <span class=\"hljs-title\">st</span>;</span>\t\t<span class=\"hljs-comment\">///&lt; global declaration of stack st</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function to push on the stack\r\n * @param opd number to be pushed in the stack\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int8_t</span> opd)</span> {\r\n\t<span class=\"hljs-keyword\">if</span>(st.top == <span class=\"hljs-number\">19</span>)\t{\t\t<span class=\"hljs-comment\">// overflow condition</span>\r\n\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Stack overflow...&quot;</span>);\r\n\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\r\n\t}\r\n\tst.top++;\r\n\tst.<span class=\"hljs-built_in\">stack</span>[st.top] = opd;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function to pop from the stack\r\n * @returns popped number\r\n */</span>\r\n<span class=\"hljs-type\">int8_t</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">()</span> {\r\n\t<span class=\"hljs-type\">int8_t</span> item;\t\t\t\t<span class=\"hljs-comment\">///&lt; to store the popped value to be returned</span>\r\n\t<span class=\"hljs-keyword\">if</span>(st.top == <span class=\"hljs-number\">-1</span>) {\t\t<span class=\"hljs-comment\">// underflow condition</span>\r\n\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Stack underflow...&quot;</span>);\r\n\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\r\n\t}\r\n\titem = st.<span class=\"hljs-built_in\">stack</span>[st.top];\r\n\tst.top--;\r\n\t<span class=\"hljs-keyword\">return</span> item;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function to evaluate postfix expression\r\n * @param post the input postfix expression\r\n * @returns evaluated answer\r\n */</span>\r\n<span class=\"hljs-type\">int8_t</span> <span class=\"hljs-title function_\">evaluate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> post[])</span> {\r\n\t<span class=\"hljs-type\">int8_t</span> it1;\r\n\t<span class=\"hljs-type\">int8_t</span> it2;\r\n\t<span class=\"hljs-type\">int8_t</span> temp;\r\n\t<span class=\"hljs-type\">int8_t</span> number;\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">strlen</span>(post); i++) {\r\n\t\t<span class=\"hljs-keyword\">if</span>(post[i] == <span class=\"hljs-string\">&#x27; &#x27;</span>) {\r\n\t\t\t<span class=\"hljs-keyword\">continue</span>;\t\t\t<span class=\"hljs-comment\">// ignore delimiter</span>\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">isdigit</span>(post[i])) {\r\n\t\t\tnumber = <span class=\"hljs-number\">0</span>;\r\n\t\t\t<span class=\"hljs-keyword\">do</span> {\r\n\t\t\t\tnumber = number * <span class=\"hljs-number\">10</span> + (post[i]-<span class=\"hljs-string\">&#x27;0&#x27;</span>);\r\n\t\t\t\ti++;\r\n\t\t\t} <span class=\"hljs-keyword\">while</span>(i &lt; <span class=\"hljs-built_in\">strlen</span>(post) &amp;&amp; <span class=\"hljs-built_in\">isdigit</span>(post[i]));\r\n\t\t\tpush(number);\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">else</span> {\r\n\t\t\tit2 = pop();\r\n\t\t\tit1 = pop();\r\n\t\t\t<span class=\"hljs-keyword\">switch</span>(post[i]) {\r\n\t\t\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:\r\n\t\t\t\ttemp = it1 + it2; <span class=\"hljs-keyword\">break</span>;\r\n\t\t\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:\r\n\t\t\t\ttemp = it1 - it2; <span class=\"hljs-keyword\">break</span>;\r\n\t\t\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:\r\n\t\t\t\ttemp = it1 * it2; <span class=\"hljs-keyword\">break</span>;\r\n\t\t\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:\r\n\t\t\t\ttemp = it1 / it2; <span class=\"hljs-keyword\">break</span>;\r\n\t\t\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;%&#x27;</span>:\r\n\t\t\t\ttemp = it1 % it2; <span class=\"hljs-keyword\">break</span>;\r\n\t\t\t\t<span class=\"hljs-keyword\">default</span>:\r\n\t\t\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Invalid operator&quot;</span>); <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\r\n\t\t\t}\r\n\t\t\tpush(temp);\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> pop();\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-comment\">/* check sample test case\r\n\t   input: &quot;2 10 + 9 6 - /&quot;\r\n\t   expected output: 4\r\n\t */</span>\r\n\t<span class=\"hljs-type\">char</span> temp1[<span class=\"hljs-number\">50</span>] = <span class=\"hljs-string\">&quot;2 10 + 9 6 - /&quot;</span>;\r\n\tassert(evaluate(temp1) == <span class=\"hljs-number\">4</span>); \t\t\t<span class=\"hljs-comment\">/// this ensures that the algorithm works as expected</span>\r\n\t<span class=\"hljs-comment\">/* input: &quot;4 2 + 3 5 1 - * +&quot;\r\n\t   expected output: 18\r\n\t */</span>\r\n\t<span class=\"hljs-type\">char</span> temp2[<span class=\"hljs-number\">50</span>] = <span class=\"hljs-string\">&quot;4 2 + 3 5 1 - * +&quot;</span>;\r\n\tassert(evaluate(temp2) == <span class=\"hljs-number\">18</span>); \t\t\t<span class=\"hljs-comment\">/// this ensures that the algorithm works as expected</span>\r\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;All tests have successfully passed!\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> {\r\n\tst.top = <span class=\"hljs-number\">-1</span>;\t\t\t<span class=\"hljs-comment\">/// initialize</span>\r\n\ttest();\t\t\t\t<span class=\"hljs-comment\">/// run self-test implementations</span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Darshana Sarma",
      "email": "69460657+Darshana-Sarma@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}