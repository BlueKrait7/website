{
  "slug": "minimax",
  "name": "Minimax",
  "categories": [
    "backtracking"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "backtracking\\minimax.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/backtracking\\minimax.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nMinimax helps to achieve maximum score in a game by checking all possible moves\r\ndepth is current depth in game tree.\r\n\r\nnodeIndex is index of current node in scores[].\r\nif move is of maximizer return true else false\r\nleaves of game tree is stored in scores[]\r\nheight is maximum height of Game tree\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minimax</span>(<span class=\"hljs-params\">\r\n    depth: <span class=\"hljs-built_in\">int</span>, node_index: <span class=\"hljs-built_in\">int</span>, is_max: <span class=\"hljs-built_in\">bool</span>, scores: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], height: <span class=\"hljs-built_in\">float</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; import math\r\n    &gt;&gt;&gt; scores = [90, 23, 6, 33, 21, 65, 123, 34423]\r\n    &gt;&gt;&gt; height = math.log(len(scores), 2)\r\n    &gt;&gt;&gt; minimax(0, 0, True, scores, height)\r\n    65\r\n    &gt;&gt;&gt; minimax(-1, 0, True, scores, height)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Depth cannot be less than 0\r\n    &gt;&gt;&gt; minimax(0, 0, True, [], 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Scores cannot be empty\r\n    &gt;&gt;&gt; scores = [3, 5, 2, 9, 12, 5, 23, 23]\r\n    &gt;&gt;&gt; height = math.log(len(scores), 2)\r\n    &gt;&gt;&gt; minimax(0, 0, True, scores, height)\r\n    12\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> depth &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Depth cannot be less than 0&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(scores) == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Scores cannot be empty&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> depth == height:\r\n        <span class=\"hljs-keyword\">return</span> scores[node_index]\r\n\r\n    <span class=\"hljs-keyword\">if</span> is_max:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>(\r\n            minimax(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">False</span>, scores, height),\r\n            minimax(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">False</span>, scores, height),\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>(\r\n        minimax(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">True</span>, scores, height),\r\n        minimax(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">True</span>, scores, height),\r\n    )\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    scores = [<span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">34423</span>]\r\n    height = math.log(<span class=\"hljs-built_in\">len</span>(scores), <span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Optimal value : &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(minimax(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">True</span>, scores, height))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    main()\r\n"
    },
    "c-plus-plus": {
      "dir": "backtracking\\minimax.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking\\minimax.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief returns which is the longest/shortest number\r\n * using [minimax](https://en.wikipedia.org/wiki/Minimax) algorithm\r\n *\r\n * @details\r\n * Minimax (sometimes MinMax, MM or saddle point) is a decision rule used in\r\n * artificial intelligence, decision theory, game theory, statistics,\r\n * and philosophy for minimizing the possible loss for a worst case (maximum\r\n * loss) scenario. When dealing with gains, it is referred to as &quot;maximin&quot;â€”to\r\n * maximize the minimum gain. Originally formulated for two-player zero-sum game\r\n * theory, covering both the cases where players take alternate moves and those\r\n * where they make simultaneous moves, it has also been extended to more complex\r\n * games and to general decision-making in the presence of uncertainty.\r\n *\r\n * @author [Gleison Batista](https://github.com/gleisonbs)\r\n * @author [David Leal](https://github.com/Panquesito7)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::max, std::min</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>      <span class=\"hljs-comment\">/// for std::array</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>      <span class=\"hljs-comment\">/// for log2</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace backtracking\r\n * @brief Backtracking algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> backtracking {\r\n<span class=\"hljs-comment\">/**\r\n * @brief Check which is the maximum/minimum number in the array\r\n * @param depth current depth in game tree\r\n * @param node_index current index in array\r\n * @param is_max if current index is the longest number\r\n * @param scores saved numbers in array\r\n * @param height maximum height for game tree\r\n * @returns the maximum or minimum number\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minimax</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> depth, <span class=\"hljs-type\">int</span> node_index, <span class=\"hljs-type\">bool</span> is_max,\r\n            <span class=\"hljs-type\">const</span> std::array&lt;<span class=\"hljs-type\">int</span>, T&gt; &amp;scores, <span class=\"hljs-type\">double</span> height)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (depth == height) {\r\n        <span class=\"hljs-keyword\">return</span> scores[node_index];\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> v1 = <span class=\"hljs-built_in\">minimax</span>(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span>, !is_max, scores, height);\r\n    <span class=\"hljs-type\">int</span> v2 = <span class=\"hljs-built_in\">minimax</span>(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>, !is_max, scores, height);\r\n\r\n    <span class=\"hljs-keyword\">return</span> is_max ? std::<span class=\"hljs-built_in\">max</span>(v1, v2) : std::<span class=\"hljs-built_in\">min</span>(v1, v2);\r\n}\r\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::array&lt;<span class=\"hljs-type\">int</span>, 8&gt; scores = {<span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">34423</span>};\r\n    <span class=\"hljs-type\">double</span> height = <span class=\"hljs-built_in\">log2</span>(scores.<span class=\"hljs-built_in\">size</span>());\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Optimal value: &quot;</span>\r\n              &lt;&lt; backtracking::<span class=\"hljs-built_in\">minimax</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">true</span>, scores, height) &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "swift": {
      "dir": "algorithms\\AI\\minimax\\Sources\\Minimax.playground\\Sources\\Model\\Minimax\\Minimax.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/algorithms\\AI\\minimax\\Sources\\Minimax.playground\\Sources\\Model\\Minimax\\Minimax.swift",
      "code": "<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">minimaxMove</span>(<span class=\"hljs-params\">board</span>: <span class=\"hljs-type\">Board</span>, <span class=\"hljs-params\">player</span>: <span class=\"hljs-type\">Player</span>, <span class=\"hljs-params\">opponent</span>: <span class=\"hljs-type\">Player</span>, <span class=\"hljs-params\">depth</span>: <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">Position</span> {\r\n    <span class=\"hljs-keyword\">var</span> bestVal <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">GameStateValue</span>.min\r\n    <span class=\"hljs-keyword\">var</span> bestMoves: [<span class=\"hljs-type\">Position</span>] <span class=\"hljs-operator\">=</span> []\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> board.size {\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> board.size {\r\n            <span class=\"hljs-keyword\">if</span> board.symbol(forPosition: <span class=\"hljs-type\">Position</span>(i, j)) <span class=\"hljs-operator\">==</span> <span class=\"hljs-type\">PlayerSymbol</span>.empty {\r\n                <span class=\"hljs-keyword\">var</span> tempBoard <span class=\"hljs-operator\">=</span> board\r\n                <span class=\"hljs-keyword\">let</span> move <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Position</span>(i, j)\r\n\r\n                tempBoard.makeMove(player: opponent, position: (i, j))\r\n                <span class=\"hljs-keyword\">let</span> moveVal <span class=\"hljs-operator\">=</span> minMax(board: tempBoard, player: opponent, opponent: player,\r\n                                     depth: depth,\r\n                                     alpha: <span class=\"hljs-type\">GameStateValue</span>.min.rawValue, beta: <span class=\"hljs-type\">GameStateValue</span>.max.rawValue,\r\n                                     maximizingPlayer: <span class=\"hljs-literal\">false</span>)\r\n\r\n                <span class=\"hljs-keyword\">if</span> moveVal.rawValue <span class=\"hljs-operator\">&gt;</span> bestVal.rawValue {\r\n                    bestVal <span class=\"hljs-operator\">=</span> moveVal\r\n                    bestMoves <span class=\"hljs-operator\">=</span> []\r\n                    bestMoves.append(move)\r\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> moveVal <span class=\"hljs-operator\">==</span> bestVal {\r\n                    bestMoves.append(move)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> bestMoves[<span class=\"hljs-type\">Int</span>.random(in: <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> bestMoves.count)]\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">minMax</span>(<span class=\"hljs-params\">board</span>: <span class=\"hljs-type\">Board</span>, <span class=\"hljs-params\">player</span>: <span class=\"hljs-type\">Player</span>, <span class=\"hljs-params\">opponent</span>: <span class=\"hljs-type\">Player</span>, <span class=\"hljs-params\">depth</span>: <span class=\"hljs-type\">Int</span>, <span class=\"hljs-params\">alpha</span>: <span class=\"hljs-type\">Int</span>, <span class=\"hljs-params\">beta</span>: <span class=\"hljs-type\">Int</span>, <span class=\"hljs-params\">maximizingPlayer</span>: <span class=\"hljs-type\">Bool</span>) -&gt; <span class=\"hljs-type\">GameStateValue</span> {\r\n    <span class=\"hljs-keyword\">var</span> alpha <span class=\"hljs-operator\">=</span> alpha\r\n    <span class=\"hljs-keyword\">var</span> beta <span class=\"hljs-operator\">=</span> beta\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> gameResult <span class=\"hljs-operator\">=</span> evaluateGameState(board: board, player: player, opponent: opponent) {\r\n        <span class=\"hljs-keyword\">guard</span> depth <span class=\"hljs-operator\">!=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">&amp;&amp;</span> gameResult <span class=\"hljs-operator\">!=</span> <span class=\"hljs-type\">GameStateValue</span>.min <span class=\"hljs-operator\">&amp;&amp;</span> gameResult <span class=\"hljs-operator\">!=</span> <span class=\"hljs-type\">GameStateValue</span>.max <span class=\"hljs-operator\">&amp;&amp;</span> gameResult <span class=\"hljs-operator\">!=</span> <span class=\"hljs-type\">GameStateValue</span>.null <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> gameResult\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> maximizingPlayer {\r\n        <span class=\"hljs-keyword\">var</span> maxEval <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">GameStateValue</span>.min\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> board.size {\r\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> board.size {\r\n                <span class=\"hljs-keyword\">if</span> board.symbol(forPosition: <span class=\"hljs-type\">Position</span>(i, j)) <span class=\"hljs-operator\">==</span> <span class=\"hljs-type\">PlayerSymbol</span>.empty {\r\n                    <span class=\"hljs-keyword\">var</span> tempBoard <span class=\"hljs-operator\">=</span> board\r\n                    tempBoard.makeMove(player: player, position: <span class=\"hljs-type\">Position</span>(i, j))\r\n\r\n                    <span class=\"hljs-keyword\">let</span> eval <span class=\"hljs-operator\">=</span> minMax(board: tempBoard, player: player, opponent: opponent, depth: depth <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>,\r\n                                      alpha: alpha, beta: beta,\r\n                                      maximizingPlayer: <span class=\"hljs-operator\">!</span>maximizingPlayer)\r\n\r\n                    maxEval <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">GameStateValue</span>(rawValue: <span class=\"hljs-built_in\">max</span>(maxEval.rawValue, eval.rawValue))<span class=\"hljs-operator\">!</span>\r\n                    alpha <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">max</span>(alpha, eval.rawValue)\r\n\r\n                    <span class=\"hljs-keyword\">if</span> beta <span class=\"hljs-operator\">&lt;=</span> alpha { <span class=\"hljs-keyword\">break</span> }\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> maxEval\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">var</span> minEval <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">GameStateValue</span>.max\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> board.size {\r\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> board.size {\r\n                <span class=\"hljs-keyword\">if</span> board.symbol(forPosition: <span class=\"hljs-type\">Position</span>(i, j)) <span class=\"hljs-operator\">==</span> <span class=\"hljs-type\">PlayerSymbol</span>.empty {\r\n                    <span class=\"hljs-keyword\">var</span> tempBoard <span class=\"hljs-operator\">=</span> board\r\n                    tempBoard.makeMove(player: opponent, position: (i, j))\r\n\r\n                    <span class=\"hljs-keyword\">let</span> eval <span class=\"hljs-operator\">=</span> minMax(board: tempBoard, player: player, opponent: opponent, depth: depth <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>,\r\n                                      alpha: alpha, beta: beta,\r\n                                      maximizingPlayer: <span class=\"hljs-operator\">!</span>maximizingPlayer)\r\n\r\n                    minEval <span class=\"hljs-operator\">=</span>  <span class=\"hljs-type\">GameStateValue</span>(rawValue: <span class=\"hljs-built_in\">min</span>(minEval.rawValue, eval.rawValue))<span class=\"hljs-operator\">!</span>\r\n                    beta <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">min</span>(beta, eval.rawValue)\r\n\r\n                    <span class=\"hljs-keyword\">if</span> beta <span class=\"hljs-operator\">&lt;=</span> alpha { <span class=\"hljs-keyword\">break</span> }\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> minEval\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">evaluateGameState</span>(<span class=\"hljs-params\">board</span>: <span class=\"hljs-type\">Board</span>, <span class=\"hljs-params\">player</span>: <span class=\"hljs-type\">Player</span>, <span class=\"hljs-params\">opponent</span>: <span class=\"hljs-type\">Player</span>) -&gt; <span class=\"hljs-type\">GameStateValue</span>? {\r\n    <span class=\"hljs-keyword\">if</span> board.check(player: player) <span class=\"hljs-operator\">==</span> <span class=\"hljs-type\">BoardStatus</span>.win {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">GameStateValue</span>.max\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> board.check(player: opponent) <span class=\"hljs-operator\">==</span> <span class=\"hljs-type\">BoardStatus</span>.win {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">GameStateValue</span>.min\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> board.check(player: player) <span class=\"hljs-operator\">==</span> <span class=\"hljs-type\">BoardStatus</span>.draw <span class=\"hljs-operator\">||</span> board.check(player: opponent) <span class=\"hljs-operator\">==</span> <span class=\"hljs-type\">BoardStatus</span>.draw {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">GameStateValue</span>.null\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "michalnowak061",
      "email": "michal.nowak061@gmail.com",
      "commits": 1
    },
    {
      "name": "Aditi Agarwal",
      "email": "31546143+aditiagarwal34550@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Gleison Batista",
      "email": "gleisonbs@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Abdujabbar Mirkhalikov",
      "email": "abdujabbar.mirkhalikov@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}