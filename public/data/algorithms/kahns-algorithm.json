{
  "slug": "kahns-algorithm",
  "name": "Kahns Algorithm",
  "categories": [
    "datastructures",
    "graphs"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\graphs\\KahnsAlgorithm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\graphs\\KahnsAlgorithm.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.Map;\r\n<span class=\"hljs-keyword\">import</span> java.util.LinkedHashMap;\r\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\r\n<span class=\"hljs-keyword\">import</span> java.util.Set;\r\n<span class=\"hljs-keyword\">import</span> java.util.Queue;\r\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * An algorithm that sorts a graph in toplogical order.\r\n */</span>\r\n<span class=\"hljs-comment\">/**\r\n * A class that represents the adjaceny list of a graph\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AdjacencyList</span>&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;E&gt;&gt; {\r\n\r\n    Map&lt;E, ArrayList&lt;E&gt;&gt; adj;\r\n\r\n    AdjacencyList() {\r\n        adj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedHashMap</span>&lt;E, ArrayList&lt;E&gt;&gt;();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This function adds an Edge to the adjaceny list\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> from , the vertex the edge is from\r\n     * <span class=\"hljs-doctag\">@param</span> to, the vertex the edge is going to\r\n     */</span>\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(E from, E to)</span> {\r\n        <span class=\"hljs-keyword\">try</span> {\r\n            adj.get(from).add(to);\r\n        } <span class=\"hljs-keyword\">catch</span> (Exception E) {\r\n            adj.put(from, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;E&gt;());\r\n            adj.get(from).add(to);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (!adj.containsKey(to)) {\r\n            adj.put(to, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;E&gt;());\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> v, A vertex in a graph\r\n     * <span class=\"hljs-doctag\">@return</span> returns an ArrayList of all the adjacents of vertex v\r\n     */</span>\r\n    ArrayList&lt;E&gt; <span class=\"hljs-title function_\">getAdjacents</span><span class=\"hljs-params\">(E v)</span> {\r\n        <span class=\"hljs-keyword\">return</span> adj.get(v);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> returns a set of all vertices in the graph\r\n     */</span>\r\n    Set&lt;E&gt; <span class=\"hljs-title function_\">getVertices</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> adj.keySet();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Prints the adjacency list\r\n     */</span>\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (E vertex : adj.keySet()) {\r\n            System.out.print(vertex + <span class=\"hljs-string\">&quot; : &quot;</span>);\r\n            <span class=\"hljs-keyword\">for</span> (E adjacent : adj.get(vertex)) {\r\n                System.out.print(adjacent + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TopologicalSort</span>&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;E&gt;&gt; {\r\n\r\n    AdjacencyList&lt;E&gt; graph;\r\n    Map&lt;E, Integer&gt; inDegree;\r\n\r\n    TopologicalSort(AdjacencyList&lt;E&gt; graph) {\r\n        <span class=\"hljs-built_in\">this</span>.graph = graph;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculates the in degree of all vertices\r\n     */</span>\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">calculateInDegree</span><span class=\"hljs-params\">()</span> {\r\n        inDegree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (E vertex : graph.getVertices()) {\r\n            <span class=\"hljs-keyword\">if</span> (!inDegree.containsKey(vertex)) {\r\n                inDegree.put(vertex, <span class=\"hljs-number\">0</span>);\r\n            }\r\n            <span class=\"hljs-keyword\">for</span> (E adjacent : graph.getAdjacents(vertex)) {\r\n                <span class=\"hljs-keyword\">try</span> {\r\n                    inDegree.put(adjacent, inDegree.get(adjacent) + <span class=\"hljs-number\">1</span>);\r\n                } <span class=\"hljs-keyword\">catch</span> (Exception e) {\r\n                    inDegree.put(adjacent, <span class=\"hljs-number\">1</span>);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Returns an ArrayList with vertices arranged in topological order\r\n     */</span>\r\n    ArrayList&lt;E&gt; <span class=\"hljs-title function_\">topSortOrder</span><span class=\"hljs-params\">()</span> {\r\n        calculateInDegree();\r\n        Queue&lt;E&gt; q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;E&gt;();\r\n\r\n        <span class=\"hljs-keyword\">for</span> (E vertex : inDegree.keySet()) {\r\n            <span class=\"hljs-keyword\">if</span> (inDegree.get(vertex) == <span class=\"hljs-number\">0</span>) {\r\n                q.add(vertex);\r\n            }\r\n        }\r\n\r\n        ArrayList&lt;E&gt; answer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n\r\n        <span class=\"hljs-keyword\">while</span> (!q.isEmpty()) {\r\n            <span class=\"hljs-type\">E</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> q.poll();\r\n            answer.add(current);\r\n            <span class=\"hljs-keyword\">for</span> (E adjacent : graph.getAdjacents(current)) {\r\n                inDegree.put(adjacent, inDegree.get(adjacent) - <span class=\"hljs-number\">1</span>);\r\n                <span class=\"hljs-keyword\">if</span> (inDegree.get(adjacent) == <span class=\"hljs-number\">0</span>) {\r\n                    q.add(adjacent);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> answer;\r\n\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * A driver class that sorts a given graph in topological order.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KahnsAlgorithm</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n\r\n        <span class=\"hljs-comment\">//Graph definition and initialization</span>\r\n        AdjacencyList&lt;String&gt; graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AdjacencyList</span>&lt;&gt;();\r\n        graph.addEdge(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>);\r\n        graph.addEdge(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>);\r\n        graph.addEdge(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>);\r\n        graph.addEdge(<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>);\r\n        graph.addEdge(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;u&quot;</span>);\r\n        graph.addEdge(<span class=\"hljs-string\">&quot;u&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>);\r\n\r\n        TopologicalSort&lt;String&gt; topSort = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TopologicalSort</span>&lt;&gt;(graph);\r\n\r\n        <span class=\"hljs-comment\">//Printing the order</span>\r\n        <span class=\"hljs-keyword\">for</span> (String s : topSort.topSortOrder()) {\r\n            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Panwar",
      "email": "60705641+dhruvinfo28@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}