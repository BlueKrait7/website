{
  "slug": "a000010-eulers-totient",
  "name": "A000010 Euler's Totient",
  "categories": [
    "sequences"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Sequences/EulerTotientSequence.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sequences\\EulerTotientSequence.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n<span class=\"hljs-keyword\">using</span> System.Numerics;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sequences</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Sequence of Euler totient function phi(n).</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Wikipedia: https://en.wikipedia.org/wiki/Euler%27s_totient_function.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         OEIS: https://oeis.org/A000010.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EulerTotientSequence</span> : <span class=\"hljs-title\">ISequence</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Gets sequence of Euler totient function phi(n).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         &#x27;n&#x27; is copied from value of the loop of i that&#x27;s being enumerated over.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         1) Initialize result as n</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         2) Consider every number &#x27;factor&#x27; (where &#x27;factor&#x27; is a prime divisor of n).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>            If factor divides n, then do following</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>            a) Subtract all multiples of factor from 1 to n [all multiples of factor</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>               will have gcd more than 1 (at least factor) with n]</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>            b) Update n by repeatedly dividing it by factor.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         3) If the reduced n is more than 1, then remove all multiples</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>            of n from result.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Base code was from https://www.geeksforgeeks.org/eulers-totient-function/.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>      <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Implementation avoiding floating point operations was used for base</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         and replacement of loop going from 1 to sqrt(n) was replaced with</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         List of prime factors.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> IEnumerable&lt;BigInteger&gt; Sequence\r\n        {\r\n            <span class=\"hljs-keyword\">get</span>\r\n            {\r\n                <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> BigInteger.One;\r\n\r\n                <span class=\"hljs-keyword\">for</span> (BigInteger i = <span class=\"hljs-number\">2</span>; ; i++)\r\n                {\r\n                    <span class=\"hljs-keyword\">var</span> n = i;\r\n                    <span class=\"hljs-keyword\">var</span> result = n;\r\n\r\n                    <span class=\"hljs-keyword\">var</span> factors = PrimeFactors(i);\r\n                    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> factor <span class=\"hljs-keyword\">in</span> factors)\r\n                    {\r\n                        <span class=\"hljs-keyword\">while</span> (n % factor == <span class=\"hljs-number\">0</span>)\r\n                        {\r\n                            n /= factor;\r\n                        }\r\n\r\n                        result -= result / factor;\r\n                    }\r\n\r\n                    <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">1</span>)\r\n                    {\r\n                        result -= result / n;\r\n                    }\r\n\r\n                    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> result;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Uses the prime sequence to find all prime factors of the</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         number we&#x27;re looking at.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         The prime sequence is examined until its value squared is</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         less than or equal to target, and checked to make sure it</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         evenly divides the target.  If it evenly divides, it&#x27;s added</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         to the result which is returned as a List.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;target&quot;&gt;</span>Number that is being factored.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>List of prime factors of target.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;BigInteger&gt; <span class=\"hljs-title\">PrimeFactors</span>(<span class=\"hljs-params\">BigInteger target</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> PrimesSequence()\r\n                  .Sequence.TakeWhile(prime =&gt; prime * prime &lt;= target)\r\n                  .Where(prime =&gt; target % prime == <span class=\"hljs-number\">0</span>)\r\n                  .ToList();\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}