{
  "slug": "gabor-filter",
  "name": "Gabor Filter",
  "categories": [
    "digitalimageprocessing",
    "filters"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "digital_image_processing\\filters\\gabor_filter.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/digital_image_processing\\filters\\gabor_filter.py",
      "code": "<span class=\"hljs-comment\"># Implementation of the Gaborfilter</span>\r\n<span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/Gabor_filter</span>\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">from</span> cv2 <span class=\"hljs-keyword\">import</span> COLOR_BGR2GRAY, CV_8UC3, cvtColor, filter2D, imread, imshow, waitKey\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gabor_filter_kernel</span>(<span class=\"hljs-params\">\r\n    ksize: <span class=\"hljs-built_in\">int</span>, sigma: <span class=\"hljs-built_in\">int</span>, theta: <span class=\"hljs-built_in\">int</span>, lambd: <span class=\"hljs-built_in\">int</span>, gamma: <span class=\"hljs-built_in\">int</span>, psi: <span class=\"hljs-built_in\">int</span>\r\n</span>) -&gt; np.ndarray:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    :param ksize:   The kernelsize of the convolutional filter (ksize x ksize)\r\n    :param sigma:   standard deviation of the gaussian bell curve\r\n    :param theta:   The orientation of the normal to the parallel stripes\r\n                    of Gabor function.\r\n    :param lambd:   Wavelength of the sinusoidal component.\r\n    :param gamma:   The spatial aspect ratio and specifies the ellipticity\r\n                    of the support of Gabor function.\r\n    :param psi:     The phase offset of the sinusoidal function.\r\n\r\n    &gt;&gt;&gt; gabor_filter_kernel(3, 8, 0, 10, 0, 0).tolist()\r\n    [[0.8027212023735046, 1.0, 0.8027212023735046], [0.8027212023735046, 1.0, \\\r\n0.8027212023735046], [0.8027212023735046, 1.0, 0.8027212023735046]]\r\n\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># prepare kernel</span>\r\n    <span class=\"hljs-comment\"># the kernel size have to be odd</span>\r\n    <span class=\"hljs-keyword\">if</span> (ksize % <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">0</span>:\r\n        ksize = ksize + <span class=\"hljs-number\">1</span>\r\n    gabor = np.zeros((ksize, ksize), dtype=np.float32)\r\n\r\n    <span class=\"hljs-comment\"># each value</span>\r\n    <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(ksize):\r\n        <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(ksize):\r\n            <span class=\"hljs-comment\"># distance from center</span>\r\n            px = x - ksize // <span class=\"hljs-number\">2</span>\r\n            py = y - ksize // <span class=\"hljs-number\">2</span>\r\n\r\n            <span class=\"hljs-comment\"># degree to radiant</span>\r\n            _theta = theta / <span class=\"hljs-number\">180</span> * np.pi\r\n            cos_theta = np.cos(_theta)\r\n            sin_theta = np.sin(_theta)\r\n\r\n            <span class=\"hljs-comment\"># get kernel x</span>\r\n            _x = cos_theta * px + sin_theta * py\r\n\r\n            <span class=\"hljs-comment\"># get kernel y</span>\r\n            _y = -sin_theta * px + cos_theta * py\r\n\r\n            <span class=\"hljs-comment\"># fill kernel</span>\r\n            gabor[y, x] = np.exp(\r\n                -(_x**<span class=\"hljs-number\">2</span> + gamma**<span class=\"hljs-number\">2</span> * _y**<span class=\"hljs-number\">2</span>) / (<span class=\"hljs-number\">2</span> * sigma**<span class=\"hljs-number\">2</span>)\r\n            ) * np.cos(<span class=\"hljs-number\">2</span> * np.pi * _x / lambd + psi)\r\n\r\n    <span class=\"hljs-keyword\">return</span> gabor\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    <span class=\"hljs-comment\"># read original image</span>\r\n    img = imread(<span class=\"hljs-string\">&quot;../image_data/lena.jpg&quot;</span>)\r\n    <span class=\"hljs-comment\"># turn image in gray scale value</span>\r\n    gray = cvtColor(img, COLOR_BGR2GRAY)\r\n\r\n    <span class=\"hljs-comment\"># Apply multiple Kernel to detect edges</span>\r\n    out = np.zeros(gray.shape[:<span class=\"hljs-number\">2</span>])\r\n    <span class=\"hljs-keyword\">for</span> theta <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">150</span>]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        ksize = 10\r\n        sigma = 8\r\n        lambd = 10\r\n        gamma = 0\r\n        psi = 0\r\n        &quot;&quot;&quot;</span>\r\n        kernel_10 = gabor_filter_kernel(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>, theta, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n        out += filter2D(gray, CV_8UC3, kernel_10)\r\n    out = out / out.<span class=\"hljs-built_in\">max</span>() * <span class=\"hljs-number\">255</span>\r\n    out = out.astype(np.uint8)\r\n\r\n    imshow(<span class=\"hljs-string\">&quot;Original&quot;</span>, gray)\r\n    imshow(<span class=\"hljs-string\">&quot;Gabor filter with 20x20 mask and 6 directions&quot;</span>, out)\r\n\r\n    waitKey(<span class=\"hljs-number\">0</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Mozartus",
      "email": "32893711+Mozartuss@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}