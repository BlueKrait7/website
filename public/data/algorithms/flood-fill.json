{
  "slug": "flood-fill",
  "name": "Flood Fill",
  "categories": [
    "recursive"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Recursive\\test\\FloodFill.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Recursive\\test\\FloodFill.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { breadthFirstSearch, depthFirstSearch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../FloodFill&#x27;</span>\r\n\r\n<span class=\"hljs-comment\">// some constants</span>\r\n<span class=\"hljs-keyword\">const</span> black = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\r\n<span class=\"hljs-keyword\">const</span> green = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>]\r\n<span class=\"hljs-keyword\">const</span> violet = [<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>]\r\n<span class=\"hljs-keyword\">const</span> white = [<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>]\r\n<span class=\"hljs-keyword\">const</span> orange = [<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">0</span>]\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;FloodFill&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should calculate the correct colors using breadth-first approach&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">testBreadthFirst</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], green, orange, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toEqual</span>(orange)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">testBreadthFirst</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], green, orange, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toEqual</span>(violet)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">testBreadthFirst</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], green, orange, [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>])).<span class=\"hljs-title function_\">toEqual</span>(white)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should calculate the correct colors using depth-first approach&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">testDepthFirst</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], green, orange, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toEqual</span>(orange)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">testDepthFirst</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], green, orange, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toEqual</span>(violet)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">testDepthFirst</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], green, orange, [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>])).<span class=\"hljs-title function_\">toEqual</span>(white)\r\n  })\r\n})\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Utility-function to test the function &quot;breadthFirstSearch&quot;.\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> fillLocation The start location on the image where the flood fill is applied.\r\n * <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n * <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n * <span class=\"hljs-doctag\">@param</span> testLocation The location of the color to be checked.\r\n * <span class=\"hljs-doctag\">@return</span> The color at testLocation.\r\n */</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">testBreadthFirst</span> (fillLocation, targetColor, replacementColor, testLocation) {\r\n  <span class=\"hljs-keyword\">const</span> rgbData = <span class=\"hljs-title function_\">generateTestRgbData</span>()\r\n  <span class=\"hljs-title function_\">breadthFirstSearch</span>(rgbData, fillLocation, targetColor, replacementColor)\r\n  <span class=\"hljs-keyword\">return</span> rgbData[testLocation[<span class=\"hljs-number\">0</span>]][testLocation[<span class=\"hljs-number\">1</span>]]\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Utility-function to test the function &quot;depthFirstSearch&quot;.\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> fillLocation The start location on the image where the flood fill is applied.\r\n * <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n * <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n * <span class=\"hljs-doctag\">@param</span> testLocation The location of the color to be checked.\r\n * <span class=\"hljs-doctag\">@return</span> The color at testLocation.\r\n */</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">testDepthFirst</span> (fillLocation, targetColor, replacementColor, testLocation) {<span class=\"hljs-comment\">// eslint-disable-line</span>\r\n  <span class=\"hljs-keyword\">const</span> rgbData = <span class=\"hljs-title function_\">generateTestRgbData</span>()\r\n  <span class=\"hljs-title function_\">depthFirstSearch</span>(rgbData, fillLocation, targetColor, replacementColor)\r\n  <span class=\"hljs-keyword\">return</span> rgbData[testLocation[<span class=\"hljs-number\">0</span>]][testLocation[<span class=\"hljs-number\">1</span>]]\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Generates the rgbData-matrix for the tests.\r\n *\r\n * <span class=\"hljs-doctag\">@return</span> example rgbData-matrix.\r\n */</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateTestRgbData</span> () {\r\n  <span class=\"hljs-keyword\">const</span> layout = [\r\n    [violet, violet, green, green, black, green, green],\r\n    [violet, green, green, black, green, green, green],\r\n    [green, green, green, black, green, green, green],\r\n    [black, black, green, black, white, white, green],\r\n    [violet, violet, black, violet, violet, white, white],\r\n    [green, green, green, violet, violet, violet, violet],\r\n    [violet, violet, violet, violet, violet, violet, violet]\r\n  ]\r\n\r\n  <span class=\"hljs-comment\">// transpose layout-matrix so the x-index comes before the y-index</span>\r\n  <span class=\"hljs-keyword\">const</span> transposed = []\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>; x &lt; layout[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>; x++) {\r\n    transposed[x] = []\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">0</span>; y &lt; layout.<span class=\"hljs-property\">length</span>; y++) {\r\n      transposed[x][y] = layout[y][x]\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> transposed\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\FloodFill.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\FloodFill.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Java program for Flood fill algorithm.\r\n * <span class=\"hljs-doctag\">@author</span> Akshay Dubey (https://github.com/itsAkshayDubey)\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FloodFill</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Get the color at the given co-odrinates of a 2D image\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> image The image to be filled\r\n     * <span class=\"hljs-doctag\">@param</span> x_co_ordinate The x co-ordinate of which color is to be obtained\r\n     * <span class=\"hljs-doctag\">@param</span> y_co_ordinate The y co-ordinate of which color is to be obtained\r\n     */</span>\r\n\t\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getPixel</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image, <span class=\"hljs-type\">int</span> x_co_ordinate, <span class=\"hljs-type\">int</span> y_co_ordinate)</span> {\r\n\t\r\n\t\t<span class=\"hljs-keyword\">return</span> image[x_co_ordinate][y_co_ordinate];\r\n\t\r\n\t}\r\n\t\r\n    <span class=\"hljs-comment\">/**\r\n     * Put the color at the given co-odrinates of a 2D image\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> image The image to be filed\r\n     * <span class=\"hljs-doctag\">@param</span> x_co_ordinate The x co-ordinate at which color is to be filled\r\n     * <span class=\"hljs-doctag\">@param</span> y_co_ordinate The y co-ordinate at which color is to be filled\r\n     */</span>\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">putPixel</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image, <span class=\"hljs-type\">int</span> x_co_ordinate, <span class=\"hljs-type\">int</span> y_co_ordinate, <span class=\"hljs-type\">int</span> new_color)</span> {\r\n\t\t\r\n\t\timage[x_co_ordinate][y_co_ordinate] = new_color;\r\n\t\r\n\t}\r\n\t\r\n\t\r\n    <span class=\"hljs-comment\">/**\r\n     * Fill the 2D image with new color\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> image The image to be filed\r\n     * <span class=\"hljs-doctag\">@param</span> x_co_ordinate The x co-ordinate at which color is to be filled\r\n     * <span class=\"hljs-doctag\">@param</span> y_co_ordinate The y co-ordinate at which color is to be filled\r\n     * <span class=\"hljs-doctag\">@param</span> new_color The new color which to be filled in the image\r\n     * <span class=\"hljs-doctag\">@param</span> old_color The old color which is to be replaced in the image\r\n     * <span class=\"hljs-doctag\">@return</span>\r\n     */</span>\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">floodFill</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image, <span class=\"hljs-type\">int</span> x_co_ordinate, <span class=\"hljs-type\">int</span> y_co_ordinate, <span class=\"hljs-type\">int</span> new_color, <span class=\"hljs-type\">int</span> old_color)</span> {\r\n\t\t<span class=\"hljs-keyword\">if</span>(x_co_ordinate &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y_co_ordinate &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; getPixel(image, x_co_ordinate, y_co_ordinate) == old_color) {\r\n\t\t\t\r\n\t\t\tputPixel(image, x_co_ordinate, y_co_ordinate, new_color);\r\n\t\t\tfloodFill(image, x_co_ordinate + <span class=\"hljs-number\">1</span>, y_co_ordinate, new_color, old_color);\r\n\t\t\tfloodFill(image, x_co_ordinate - <span class=\"hljs-number\">1</span>, y_co_ordinate, new_color, old_color);\r\n\t\t\tfloodFill(image, x_co_ordinate, y_co_ordinate + <span class=\"hljs-number\">1</span>, new_color, old_color);\r\n\t\t\tfloodFill(image, x_co_ordinate, y_co_ordinate - <span class=\"hljs-number\">1</span>, new_color, old_color);\r\n\t\t\tfloodFill(image, x_co_ordinate + <span class=\"hljs-number\">1</span>, y_co_ordinate - <span class=\"hljs-number\">1</span>, new_color, old_color);\r\n\t\t\tfloodFill(image, x_co_ordinate - <span class=\"hljs-number\">1</span>, y_co_ordinate + <span class=\"hljs-number\">1</span>, new_color, old_color);\r\n\t\t\tfloodFill(image, x_co_ordinate + <span class=\"hljs-number\">1</span>, y_co_ordinate + <span class=\"hljs-number\">1</span>, new_color, old_color);\r\n\t\t\tfloodFill(image, x_co_ordinate - <span class=\"hljs-number\">1</span>, y_co_ordinate - <span class=\"hljs-number\">1</span>, new_color, old_color);\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n    <span class=\"hljs-comment\">/**\r\n     * This method will print the 2D image matrix\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> image The image to be printed on the console\r\n     */</span>\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printImageArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image)</span> {\r\n\t\t\r\n\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span> ; i&lt;image.length ; i++) {\r\n\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span> ; j&lt;image[<span class=\"hljs-number\">0</span>].length ; j++) {\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.print(image[i][j]+<span class=\"hljs-string\">&quot;  &quot;</span>);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t<span class=\"hljs-comment\">// Driver Program</span>\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n\t\t\r\n\t\t\r\n\t\t<span class=\"hljs-comment\">//Input 2D image matrix</span>\r\n\t\t<span class=\"hljs-type\">int</span>[][] image = {\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>}\r\n\t\t};\r\n\t\t\r\n\t\tfloodFill(image,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);\r\n\r\n\t\t<span class=\"hljs-comment\">/* Output ==&gt;\r\n\t\t * 0  0  0  0  0  0  0  \r\n\t\t   0  3  3  3  3  0  0  \r\n\t\t   0  3  2  2  5  0  0  \r\n           0  3  2  2  5  5  3  \r\n           0  3  5  5  2  2  3  \r\n           0  0  0  5  2  2  3  \r\n           0  0  0  3  3  3  3\r\n\t\t * */</span>\r\n\t\t\r\n\t\t<span class=\"hljs-comment\">//print 2D image matrix</span>\r\n\t\tprintImageArray(image);\r\n\t}\r\n\r\n}"
    },
    "c-sharp": {
      "dir": "./Algorithms/Other/FloodFill.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Other\\FloodFill.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Drawing;\r\n<span class=\"hljs-keyword\">using</span> System.Numerics;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Flood fill, also called seed fill, is an algorithm that determines and</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> alters the area connected to a given node in a multi-dimensional array with</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> some matching attribute. It is used in the &quot;bucket&quot; fill tool of paint</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> programs to fill connected, similarly-colored areas with a different color.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> (description adapted from https://en.wikipedia.org/wiki/Flood_fill)</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> (see also: https://www.techiedelight.com/flood-fill-algorithm/).</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FloodFill</span>\r\n    {\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">readonly</span> List&lt;(<span class=\"hljs-built_in\">int</span> xOffset, <span class=\"hljs-built_in\">int</span> yOffset)&gt; Neighbors = <span class=\"hljs-keyword\">new</span>() { (<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>), (<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) };\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Implements the flood fill algorithm through a breadth-first approach using a queue.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmap&quot;&gt;</span>The bitmap to which the algorithm is applied.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;location&quot;&gt;</span>The start location on the bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;targetColor&quot;&gt;</span>The old color to be replaced.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;replacementColor&quot;&gt;</span>The new color to replace the old one.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BreadthFirstSearch</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (location.x &lt; <span class=\"hljs-number\">0</span> || location.x &gt;= bitmap.Width || location.y &lt; <span class=\"hljs-number\">0</span> || location.y &gt;= bitmap.Height)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(location), <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(location)}</span> should point to a pixel within the bitmap&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> queue = <span class=\"hljs-keyword\">new</span> List&lt;(<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y)&gt;();\r\n            queue.Add(location);\r\n\r\n            <span class=\"hljs-keyword\">while</span> (queue.Count &gt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                BreadthFirstFill(bitmap, location, targetColor, replacementColor, queue);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Implements the flood fill algorithm through a depth-first approach through recursion.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmap&quot;&gt;</span>The bitmap to which the algorithm is applied.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;location&quot;&gt;</span>The start location on the bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;targetColor&quot;&gt;</span>The old color to be replaced.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;replacementColor&quot;&gt;</span>The new color to replace the old one.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DepthFirstSearch</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (location.x &lt; <span class=\"hljs-number\">0</span> || location.x &gt;= bitmap.Width || location.y &lt; <span class=\"hljs-number\">0</span> || location.y &gt;= bitmap.Height)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(location), <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(location)}</span> should point to a pixel within the bitmap&quot;</span>);\r\n            }\r\n\r\n            DepthFirstFill(bitmap, location, targetColor, replacementColor);\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BreadthFirstFill</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor, List&lt;(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>)&gt; queue)</span>\r\n        {\r\n            (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y) currentLocation = queue[<span class=\"hljs-number\">0</span>];\r\n            queue.RemoveAt(<span class=\"hljs-number\">0</span>);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (bitmap.GetPixel(currentLocation.x, currentLocation.y) == targetColor)\r\n            {\r\n                bitmap.SetPixel(currentLocation.x, currentLocation.y, replacementColor);\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; Neighbors.Count; i++)\r\n                {\r\n                    <span class=\"hljs-built_in\">int</span> x = currentLocation.x + Neighbors[i].xOffset;\r\n                    <span class=\"hljs-built_in\">int</span> y = currentLocation.y + Neighbors[i].yOffset;\r\n                    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; bitmap.Width &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; bitmap.Height)\r\n                    {\r\n                        queue.Add((x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DepthFirstFill</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (bitmap.GetPixel(location.x, location.y) == targetColor)\r\n            {\r\n                bitmap.SetPixel(location.x, location.y, replacementColor);\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; Neighbors.Count; i++)\r\n                {\r\n                    <span class=\"hljs-built_in\">int</span> x = location.x + Neighbors[i].xOffset;\r\n                    <span class=\"hljs-built_in\">int</span> y = location.y + Neighbors[i].yOffset;\r\n                    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; bitmap.Width &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; bitmap.Height)\r\n                    {\r\n                        DepthFirstFill(bitmap, (x, y), targetColor, replacementColor);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Dubey",
      "email": "38462415+itsAkshayDubey@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 2
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}