{
  "slug": "bfs",
  "name": "Bfs",
  "categories": [
    "datastructures",
    "graphs"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures\\graphs\\bfs.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\graphs\\bfs.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> SIZE 40</span>\r\n<span class=\"hljs-comment\">// Assume max size of graph is 40 nodes</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">queue</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> items[SIZE];\r\n    <span class=\"hljs-type\">int</span> front;\r\n    <span class=\"hljs-type\">int</span> rear;\r\n};\r\n\r\n<span class=\"hljs-comment\">// Some declarations</span>\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *<span class=\"hljs-title function_\">createQueue</span><span class=\"hljs-params\">()</span>;\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q, <span class=\"hljs-type\">int</span>)</span>;\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">dequeue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>;\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>;\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>;\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pollQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>;\r\n\r\n<span class=\"hljs-comment\">// Structure to create a graph node</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> vertex;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\r\n};\r\n\r\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span>;\r\n\r\n<span class=\"hljs-comment\">// Graph data structure</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> numVertices;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> **<span class=\"hljs-title\">adjLists</span>;</span>\r\n    <span class=\"hljs-type\">int</span> *visited;\r\n};\r\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> vertices)</span>;\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dest)</span>;\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph)</span>;\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> startVertex)</span>;\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> vertices, edges, source, i, src, dst;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of vertices\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;vertices);\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> createGraph(vertices);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of edges\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;edges);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; edges; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Edge %d \\nEnter source: &quot;</span>, i + <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;src);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter destination: &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;dst);\r\n        addEdge(graph, src, dst);\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter source of bfs\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;source);\r\n    bfs(graph, source);\r\n\r\n    <span class=\"hljs-comment\">// Uncomment below part to get a ready-made example</span>\r\n    <span class=\"hljs-comment\">/*struct Graph* graph = createGraph(6);\r\n    addEdge(graph, 0, 1);\r\n    addEdge(graph, 0, 2);\r\n    addEdge(graph, 1, 2);\r\n    addEdge(graph, 1, 4);\r\n    addEdge(graph, 1, 3);\r\n    addEdge(graph, 2, 4);\r\n    addEdge(graph, 3, 4);\r\n    bfs(graph,0);*/</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> startVertex)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">queue</span> *<span class=\"hljs-title\">q</span> =</span> createQueue();\r\n\r\n    <span class=\"hljs-comment\">// Add to visited list and put in queue</span>\r\n    graph-&gt;visited[startVertex] = <span class=\"hljs-number\">1</span>;\r\n    enqueue(q, startVertex);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Breadth first traversal from vertex %d is:\\n&quot;</span>, startVertex);\r\n\r\n    <span class=\"hljs-comment\">// Iterate while queue not empty</span>\r\n    <span class=\"hljs-keyword\">while</span> (!isEmpty(q))\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, pollQueue(q));\r\n        <span class=\"hljs-type\">int</span> currentVertex = dequeue(q);\r\n\r\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> graph-&gt;adjLists[currentVertex];\r\n        <span class=\"hljs-comment\">// Add all unvisited neighbours of current vertex to queue to be printed</span>\r\n        <span class=\"hljs-comment\">// next</span>\r\n        <span class=\"hljs-keyword\">while</span> (temp)\r\n        {\r\n            <span class=\"hljs-type\">int</span> adjVertex = temp-&gt;vertex;\r\n            <span class=\"hljs-comment\">// Only add if neighbour is unvisited</span>\r\n            <span class=\"hljs-keyword\">if</span> (graph-&gt;visited[adjVertex] == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                graph-&gt;visited[adjVertex] = <span class=\"hljs-number\">1</span>;\r\n                enqueue(q, adjVertex);\r\n            }\r\n            temp = temp-&gt;next;\r\n        }\r\n    }\r\n}\r\n<span class=\"hljs-comment\">// Memory for a graph node</span>\r\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\r\n    newNode-&gt;vertex = v;\r\n    newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-keyword\">return</span> newNode;\r\n}\r\n<span class=\"hljs-comment\">// Allocates memory for graph data structure, in adjacency list format</span>\r\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> vertices)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Graph));\r\n    graph-&gt;numVertices = vertices;\r\n\r\n    graph-&gt;adjLists = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node *));\r\n    graph-&gt;visited = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; vertices; i++)\r\n    {\r\n        graph-&gt;adjLists[i] = <span class=\"hljs-literal\">NULL</span>;\r\n        graph-&gt;visited[i] = <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> graph;\r\n}\r\n<span class=\"hljs-comment\">// Adds bidirectional edge to graph</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dest)</span>\r\n{\r\n    <span class=\"hljs-comment\">// Add edge from src to dest</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> createNode(dest);\r\n    newNode-&gt;next = graph-&gt;adjLists[src];\r\n    graph-&gt;adjLists[src] = newNode;\r\n\r\n    <span class=\"hljs-comment\">// Add edge from dest to src; comment it out for directed graph</span>\r\n    newNode = createNode(src);\r\n    newNode-&gt;next = graph-&gt;adjLists[dest];\r\n    graph-&gt;adjLists[dest] = newNode;\r\n}\r\n<span class=\"hljs-comment\">// Allocates memory for our queue data structure</span>\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *<span class=\"hljs-title function_\">createQueue</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">queue</span> *<span class=\"hljs-title\">q</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span>));\r\n    q-&gt;front = <span class=\"hljs-number\">-1</span>;\r\n    q-&gt;rear = <span class=\"hljs-number\">-1</span>;\r\n    <span class=\"hljs-keyword\">return</span> q;\r\n}\r\n<span class=\"hljs-comment\">// Checks for empty queue</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (q-&gt;rear == <span class=\"hljs-number\">-1</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n<span class=\"hljs-comment\">// Inserts item at start of queue</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q, <span class=\"hljs-type\">int</span> value)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (q-&gt;rear == SIZE - <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nQueue is Full!!&quot;</span>);\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (q-&gt;front == <span class=\"hljs-number\">-1</span>)\r\n            q-&gt;front = <span class=\"hljs-number\">0</span>;\r\n        q-&gt;rear++;\r\n        q-&gt;items[q-&gt;rear] = value;\r\n    }\r\n}\r\n<span class=\"hljs-comment\">// Returns item at front of queue and removes it from queue</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">dequeue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> item;\r\n    <span class=\"hljs-keyword\">if</span> (isEmpty(q))\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Queue is empty&quot;</span>);\r\n        item = <span class=\"hljs-number\">-1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        item = q-&gt;items[q-&gt;front];\r\n        q-&gt;front++;\r\n        <span class=\"hljs-keyword\">if</span> (q-&gt;front &gt; q-&gt;rear)\r\n        {\r\n            q-&gt;front = q-&gt;rear = <span class=\"hljs-number\">-1</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> item;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Returns element at front of queue</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pollQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span> { <span class=\"hljs-keyword\">return</span> q-&gt;items[q-&gt;front]; }\r\n"
    },
    "go": {
      "dir": "graph\\coloring\\bfs.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph\\coloring\\bfs.go",
      "code": "<span class=\"hljs-comment\">// This file contains the graph coloring implementation using BFS</span>\r\n<span class=\"hljs-comment\">// Author(s): [Shivam](https://github.com/Shivam010)</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> coloring\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;container/list&quot;</span>\r\n\r\n<span class=\"hljs-comment\">// ColorUsingBFS will return the Color of each vertex and the</span>\r\n<span class=\"hljs-comment\">// total number of different colors used, using BFS</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> ColorUsingBFS() (<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color, <span class=\"hljs-type\">int</span>) {\r\n\t<span class=\"hljs-comment\">// Initially all vertices will have same color</span>\r\n\tvertexColors := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color, g.vertices)\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; g.vertices; i++ {\r\n\t\tvertexColors[i] = <span class=\"hljs-number\">1</span>\r\n\t}\r\n\r\n\tvisited := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">struct</span>{})\r\n\t<span class=\"hljs-comment\">// Run BFS from each non-visited vertex</span>\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; g.vertices; i++ {\r\n\t\t<span class=\"hljs-keyword\">if</span> _, ok := visited[i]; ok {\r\n\t\t\t<span class=\"hljs-keyword\">continue</span>\r\n\t\t}\r\n\t\tvisited[i] = <span class=\"hljs-keyword\">struct</span>{}{}\r\n\r\n\t\tqueue := list.New()\r\n\t\tqueue.PushBack(i)\r\n\r\n\t\t<span class=\"hljs-keyword\">for</span> queue.Len() != <span class=\"hljs-number\">0</span> {\r\n\t\t\t<span class=\"hljs-comment\">// front vertex in the queue</span>\r\n\t\t\tfrontNode := queue.Front()\r\n\t\t\tfront := frontNode.Value.(<span class=\"hljs-type\">int</span>)\r\n\t\t\tqueue.Remove(frontNode)\r\n\r\n\t\t\t<span class=\"hljs-comment\">// Now, check all neighbours of front vertex, if they have same</span>\r\n\t\t\t<span class=\"hljs-comment\">// color as that of front, change their color</span>\r\n\t\t\t<span class=\"hljs-keyword\">for</span> nb := <span class=\"hljs-keyword\">range</span> g.edges[front] {\r\n\t\t\t\t<span class=\"hljs-keyword\">if</span> vertexColors[nb] == vertexColors[front] {\r\n\t\t\t\t\tvertexColors[nb]++\r\n\t\t\t\t}\r\n\t\t\t\t<span class=\"hljs-comment\">// if the neighbour is not already visited, add it to the queue</span>\r\n\t\t\t\t<span class=\"hljs-keyword\">if</span> _, ok := visited[nb]; !ok {\r\n\t\t\t\t\tvisited[nb] = <span class=\"hljs-keyword\">struct</span>{}{}\r\n\t\t\t\t\tqueue.PushBack(nb)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcolorsUsed := <span class=\"hljs-number\">0</span>\r\n\t<span class=\"hljs-keyword\">for</span> _, cr := <span class=\"hljs-keyword\">range</span> vertexColors {\r\n\t\t<span class=\"hljs-keyword\">if</span> colorsUsed &lt; <span class=\"hljs-type\">int</span>(cr) {\r\n\t\t\tcolorsUsed = <span class=\"hljs-type\">int</span>(cr)\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> vertexColors, colorsUsed\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "PalAditya",
      "email": "adityapal.nghss@gmail.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Shivam Rathore",
      "email": "shivam.rathore010@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "unknown",
      "email": "cnddhks846@naver.com",
      "commits": 1
    },
    {
      "name": "sangjun2",
      "email": "sj27294626@gmail.com",
      "commits": 1
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 1
    },
    {
      "name": "pkdism",
      "email": "pawan.dwivedi94@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Harshit Kumar",
      "email": "kumar_harshit@outlook.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}