{
  "slug": "check-cycle",
  "name": "Check Cycle",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\check_cycle.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\check_cycle.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nProgram to check if a cycle is present in a given graph\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_cycle</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Returns True if graph is cyclic else False\r\n    &gt;&gt;&gt; check_cycle(graph={0:[], 1:[0, 3], 2:[0, 4], 3:[5], 4:[5], 5:[]})\r\n    False\r\n    &gt;&gt;&gt; check_cycle(graph={0:[1, 2], 1:[2], 2:[0, 3], 3:[3]})\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Keep track of visited nodes</span>\r\n    visited: <span class=\"hljs-built_in\">set</span>[<span class=\"hljs-built_in\">int</span>] = <span class=\"hljs-built_in\">set</span>()\r\n    <span class=\"hljs-comment\"># To detect a back edge, keep track of vertices currently in the recursion stack</span>\r\n    rec_stk: <span class=\"hljs-built_in\">set</span>[<span class=\"hljs-built_in\">int</span>] = <span class=\"hljs-built_in\">set</span>()\r\n    <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> graph:\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> visited:\r\n            <span class=\"hljs-keyword\">if</span> depth_first_search(graph, node, visited, rec_stk):\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depth_first_search</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span>, vertex: <span class=\"hljs-built_in\">int</span>, visited: <span class=\"hljs-built_in\">set</span>, rec_stk: <span class=\"hljs-built_in\">set</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Recur for all neighbours.\r\n    If any neighbour is visited and in rec_stk then graph is cyclic.\r\n    &gt;&gt;&gt; graph = {0:[], 1:[0, 3], 2:[0, 4], 3:[5], 4:[5], 5:[]}\r\n    &gt;&gt;&gt; vertex, visited, rec_stk = 0, set(), set()\r\n    &gt;&gt;&gt; depth_first_search(graph, vertex, visited, rec_stk)\r\n    False\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Mark current node as visited and add to recursion stack</span>\r\n    visited.add(vertex)\r\n    rec_stk.add(vertex)\r\n\r\n    <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> graph[vertex]:\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> visited:\r\n            <span class=\"hljs-keyword\">if</span> depth_first_search(graph, node, visited, rec_stk):\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">elif</span> node <span class=\"hljs-keyword\">in</span> rec_stk:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-comment\"># The node needs to be removed from recursion stack before function ends</span>\r\n    rec_stk.remove(vertex)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Rohan R Bharadwaj",
      "email": "rohanrbharadwaj@gmail.com",
      "commits": 1
    },
    {
      "name": "Atishaye Jain",
      "email": "64211411+atishaye@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}