{
  "slug": "all-construct",
  "name": "All Construct",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming\\all_construct.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming\\all_construct.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nProgram to list all the ways a target string can be\r\nconstructed from the given list of substrings\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">all_construct</span>(<span class=\"hljs-params\">target: <span class=\"hljs-built_in\">str</span>, word_bank: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        returns the list containing all the possible\r\n        combinations a string(target) can be constructed from\r\n        the given list of substrings(word_bank)\r\n    &gt;&gt;&gt; all_construct(&quot;hello&quot;, [&quot;he&quot;, &quot;l&quot;, &quot;o&quot;])\r\n    [[&#x27;he&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]]\r\n    &gt;&gt;&gt; all_construct(&quot;purple&quot;,[&quot;purp&quot;,&quot;p&quot;,&quot;ur&quot;,&quot;le&quot;,&quot;purpl&quot;])\r\n    [[&#x27;purp&#x27;, &#x27;le&#x27;], [&#x27;p&#x27;, &#x27;ur&#x27;, &#x27;p&#x27;, &#x27;le&#x27;]]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    word_bank = word_bank <span class=\"hljs-keyword\">or</span> []\r\n    <span class=\"hljs-comment\"># create a table</span>\r\n    table_size: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">len</span>(target) + <span class=\"hljs-number\">1</span>\r\n\r\n    table: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]]] = []\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(table_size):\r\n        table.append([])\r\n    <span class=\"hljs-comment\"># seed value</span>\r\n    table[<span class=\"hljs-number\">0</span>] = [[]]  <span class=\"hljs-comment\"># because empty string has empty combination</span>\r\n\r\n    <span class=\"hljs-comment\"># iterate through the indices</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(table_size):\r\n        <span class=\"hljs-comment\"># condition</span>\r\n        <span class=\"hljs-keyword\">if</span> table[i] != []:\r\n            <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> word_bank:\r\n                <span class=\"hljs-comment\"># slice condition</span>\r\n                <span class=\"hljs-keyword\">if</span> target[i : i + <span class=\"hljs-built_in\">len</span>(word)] == word:\r\n                    new_combinations: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]] = [\r\n                        [word] + way <span class=\"hljs-keyword\">for</span> way <span class=\"hljs-keyword\">in</span> table[i]\r\n                    ]\r\n                    <span class=\"hljs-comment\"># adds the word to every combination the current position holds</span>\r\n                    <span class=\"hljs-comment\"># now,push that combination to the table[i+len(word)]</span>\r\n                    table[i + <span class=\"hljs-built_in\">len</span>(word)] += new_combinations\r\n\r\n    <span class=\"hljs-comment\"># combinations are in reverse order so reverse for better output</span>\r\n    <span class=\"hljs-keyword\">for</span> combination <span class=\"hljs-keyword\">in</span> table[<span class=\"hljs-built_in\">len</span>(target)]:\r\n        combination.reverse()\r\n\r\n    <span class=\"hljs-keyword\">return</span> table[<span class=\"hljs-built_in\">len</span>(target)]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-built_in\">print</span>(all_construct(<span class=\"hljs-string\">&quot;jwajalapa&quot;</span>, [<span class=\"hljs-string\">&quot;jwa&quot;</span>, <span class=\"hljs-string\">&quot;j&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;la&quot;</span>, <span class=\"hljs-string\">&quot;lapa&quot;</span>]))\r\n    <span class=\"hljs-built_in\">print</span>(all_construct(<span class=\"hljs-string\">&quot;rajamati&quot;</span>, [<span class=\"hljs-string\">&quot;s&quot;</span>, <span class=\"hljs-string\">&quot;raj&quot;</span>, <span class=\"hljs-string\">&quot;amat&quot;</span>, <span class=\"hljs-string\">&quot;raja&quot;</span>, <span class=\"hljs-string\">&quot;ma&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>, <span class=\"hljs-string\">&quot;t&quot;</span>]))\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        all_construct(\r\n            <span class=\"hljs-string\">&quot;hexagonosaurus&quot;</span>,\r\n            [<span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-string\">&quot;ex&quot;</span>, <span class=\"hljs-string\">&quot;hex&quot;</span>, <span class=\"hljs-string\">&quot;ag&quot;</span>, <span class=\"hljs-string\">&quot;ago&quot;</span>, <span class=\"hljs-string\">&quot;ru&quot;</span>, <span class=\"hljs-string\">&quot;auru&quot;</span>, <span class=\"hljs-string\">&quot;rus&quot;</span>, <span class=\"hljs-string\">&quot;go&quot;</span>, <span class=\"hljs-string\">&quot;no&quot;</span>, <span class=\"hljs-string\">&quot;o&quot;</span>, <span class=\"hljs-string\">&quot;s&quot;</span>],\r\n        )\r\n    )\r\n"
    }
  },
  "contributors": [
    {
      "name": "Sailesh Shrestha",
      "email": "34860977+werewolf-65@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}