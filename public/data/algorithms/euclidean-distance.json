{
  "slug": "euclidean-distance",
  "name": "Euclidean Distance",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\euclidean_distance.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\euclidean_distance.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Iterable, <span class=\"hljs-type\">Union</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\nVector = <span class=\"hljs-type\">Union</span>[Iterable[<span class=\"hljs-built_in\">float</span>], Iterable[<span class=\"hljs-built_in\">int</span>], np.ndarray]\r\nVectorOut = <span class=\"hljs-type\">Union</span>[np.float64, <span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euclidean_distance</span>(<span class=\"hljs-params\">vector_1: Vector, vector_2: Vector</span>) -&gt; VectorOut:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the distance between the two endpoints of two vectors.\r\n    A vector is defined as a list, tuple, or numpy 1D array.\r\n    &gt;&gt;&gt; euclidean_distance((0, 0), (2, 2))\r\n    2.8284271247461903\r\n    &gt;&gt;&gt; euclidean_distance(np.array([0, 0, 0]), np.array([2, 2, 2]))\r\n    3.4641016151377544\r\n    &gt;&gt;&gt; euclidean_distance(np.array([1, 2, 3, 4]), np.array([5, 6, 7, 8]))\r\n    8.0\r\n    &gt;&gt;&gt; euclidean_distance([1, 2, 3, 4], [5, 6, 7, 8])\r\n    8.0\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> np.sqrt(np.<span class=\"hljs-built_in\">sum</span>((np.asarray(vector_1) - np.asarray(vector_2)) ** <span class=\"hljs-number\">2</span>))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euclidean_distance_no_np</span>(<span class=\"hljs-params\">vector_1: Vector, vector_2: Vector</span>) -&gt; VectorOut:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the distance between the two endpoints of two vectors without numpy.\r\n    A vector is defined as a list, tuple, or numpy 1D array.\r\n    &gt;&gt;&gt; euclidean_distance_no_np((0, 0), (2, 2))\r\n    2.8284271247461903\r\n    &gt;&gt;&gt; euclidean_distance_no_np([1, 2, 3, 4], [5, 6, 7, 8])\r\n    8.0\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>((v1 - v2) ** <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> v1, v2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(vector_1, vector_2)) ** (<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">benchmark</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Benchmarks\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> timeit\r\n\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Without Numpy&quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>(\r\n            timeit(\r\n                <span class=\"hljs-string\">&quot;euclidean_distance_no_np([1, 2, 3], [4, 5, 6])&quot;</span>,\r\n                number=<span class=\"hljs-number\">10000</span>,\r\n                <span class=\"hljs-built_in\">globals</span>=<span class=\"hljs-built_in\">globals</span>(),\r\n            )\r\n        )\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;With Numpy&quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>(\r\n            timeit(\r\n                <span class=\"hljs-string\">&quot;euclidean_distance([1, 2, 3], [4, 5, 6])&quot;</span>,\r\n                number=<span class=\"hljs-number\">10000</span>,\r\n                <span class=\"hljs-built_in\">globals</span>=<span class=\"hljs-built_in\">globals</span>(),\r\n            )\r\n        )\r\n\r\n    benchmark()\r\n"
    },
    "r": {
      "dir": "Mathematics\\EuclideanDistance.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Mathematics\\EuclideanDistance.R",
      "code": "euclideanDistance <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>x<span class=\"hljs-punctuation\">,</span> y<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">sqrt</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">sum</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-punctuation\">(</span>x <span class=\"hljs-operator\">-</span> y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">^</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n\r\nset.seed<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span>\r\nx <span class=\"hljs-operator\">&lt;-</span> rnorm<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1000</span><span class=\"hljs-punctuation\">)</span>\r\ny <span class=\"hljs-operator\">&lt;-</span> runif<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1000</span><span class=\"hljs-punctuation\">)</span>\r\nprint<span class=\"hljs-punctuation\">(</span>euclideanDistance<span class=\"hljs-punctuation\">(</span>x<span class=\"hljs-punctuation\">,</span> y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>"
    },
    "matlab-octave": {
      "dir": "algorithms\\maths\\euclidean_distance.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\maths\\euclidean_distance.m",
      "code": "<span class=\"hljs-comment\">% This function takes two n-dimensional vectors as input and calculates the euclidean distance</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">distance</span> = <span class=\"hljs-title\">euclidean_distance</span><span class=\"hljs-params\">(coordinate_1,coordinate_2)</span></span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">length</span>(coordinate_1) ~= <span class=\"hljs-built_in\">length</span>(coordinate_2)\r\n        <span class=\"hljs-built_in\">disp</span>(<span class=\"hljs-string\">&#x27;Dimensions of vectors do not match!&#x27;</span>)\r\n        distance = NaN;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        sum = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(coordinate_1)\r\n            difference = (coordinate_2(<span class=\"hljs-built_in\">i</span>)-coordinate_1(<span class=\"hljs-built_in\">i</span>))^<span class=\"hljs-number\">2</span>;\r\n            sum = sum + difference;\r\n        <span class=\"hljs-keyword\">end</span>\r\n        distance = <span class=\"hljs-built_in\">sqrt</span>(sum);\r\n    <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Alex Garland",
      "email": "alex@numinar.com",
      "commits": 1
    },
    {
      "name": "Hadimius",
      "email": "j.eppli@web.de",
      "commits": 1
    },
    {
      "name": "Andrew",
      "email": "54547089+ac-tam@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erez Shomron",
      "email": "48328872+eshom@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}