{
  "slug": "horspool-search",
  "name": "Horspool Search",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\strings\\HorspoolSearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\strings\\HorspoolSearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.strings;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This class is not thread safe&lt;br&gt;\r\n * &lt;br&gt;\r\n * (From wikipedia) In computer science, the Boyer–Moore–Horspool algorithm or\r\n * Horspool&#x27;s algorithm is an algorithm for finding substrings in strings. It\r\n * was published by Nigel Horspool in 1980.\r\n * &lt;br&gt;\r\n * &lt;a href=https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm&gt;Wikipedia\r\n * page&lt;/a&gt;&lt;br&gt;\r\n * &lt;br&gt;\r\n *\r\n * &lt;p&gt;\r\n * An explanation:&lt;br&gt;\r\n *\r\n * &lt;p&gt;\r\n * The Horspool algorithm is a simplification of the Boyer-Moore algorithm in\r\n * that it uses only one of the two heuristic methods for increasing the number\r\n * of characters shifted when finding a bad match in the text. This method is\r\n * usually called the &quot;bad symbol&quot; or &quot;bad character&quot; shift. The bad symbol\r\n * shift method is classified as an input enhancement method in the theory of\r\n * algorithms. Input enhancement is (from wikipedia) the principle that\r\n * processing a given input to a problem and altering it in a specific way will\r\n * increase runtime efficiency or space efficiency, or both. Both algorithms try\r\n * to match the pattern and text comparing the pattern symbols to the text&#x27;s\r\n * from right to left.&lt;br&gt;\r\n * &lt;br&gt;\r\n *\r\n * &lt;p&gt;\r\n * In the bad symbol shift method, a table is created prior to the search,\r\n * called the &quot;bad symbol table&quot;. The bad symbol table contains the shift values\r\n * for any symbol in the text and pattern. For these symbols, the value is the\r\n * length of the pattern, if the symbol is not in the first (length - 1) of the\r\n * pattern. Else it is the distance from its rightmost occurrence in the pattern\r\n * to the last symbol of the pattern. In practice, we only calculate the values\r\n * for the ones that exist in the first (length - 1) of the pattern.&lt;br&gt;\r\n * &lt;br&gt;\r\n *\r\n * &lt;p&gt;\r\n * For more details on the algorithm and the more advanced Boyer-Moore I\r\n * recommend checking out the wikipedia page and professor Anany Levitin&#x27;s book:\r\n * Introduction To The Design And Analysis Of Algorithms.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HorspoolSearch</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> HashMap&lt;Character, Integer&gt; shiftValues; <span class=\"hljs-comment\">// bad symbol table</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Integer patternLength;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">comparisons</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// total comparisons in the current/last search</span>\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Case sensitive version version of the algorithm\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> pattern the pattern to be searched for (needle)\r\n     * <span class=\"hljs-doctag\">@param</span> text the text being searched in (haystack)\r\n     * <span class=\"hljs-doctag\">@return</span> -1 if not found or first index of the pattern in the text\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findFirst</span><span class=\"hljs-params\">(String pattern, String text)</span> {\r\n        <span class=\"hljs-keyword\">return</span> firstOccurrence(pattern, text, <span class=\"hljs-literal\">true</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Case insensitive version version of the algorithm\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> pattern the pattern to be searched for (needle)\r\n     * <span class=\"hljs-doctag\">@param</span> text the text being searched in (haystack)\r\n     * <span class=\"hljs-doctag\">@return</span> -1 if not found or first index of the pattern in the text\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findFirstInsensitive</span><span class=\"hljs-params\">(String pattern, String text)</span> {\r\n        <span class=\"hljs-keyword\">return</span> firstOccurrence(pattern, text, <span class=\"hljs-literal\">false</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Utility method that returns comparisons made by last run (mainly for\r\n     * tests)\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> number of character comparisons of the last search\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Integer <span class=\"hljs-title function_\">getLastComparisons</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> HorspoolSearch.comparisons;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Fairly standard implementation of the Horspool algorithm. Only the index\r\n     * of the last character of the pattern on the text is saved and shifted by\r\n     * the appropriate amount when a mismatch is found. The algorithm stops at\r\n     * the first match or when the entire text has been exhausted.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> pattern String to be matched in the text\r\n     * <span class=\"hljs-doctag\">@param</span> text text String\r\n     * <span class=\"hljs-doctag\">@return</span> index of first occurrence of the pattern in the text\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">firstOccurrence</span><span class=\"hljs-params\">(String pattern, String text, <span class=\"hljs-type\">boolean</span> caseSensitive)</span> {\r\n        shiftValues = calcShiftValues(pattern); <span class=\"hljs-comment\">// build the bad symbol table</span>\r\n        comparisons = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// reset comparisons</span>\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">textIndex</span>\r\n                <span class=\"hljs-operator\">=</span> pattern.length() - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// align pattern with text start and get index of the last character</span>\r\n\r\n        <span class=\"hljs-comment\">// while pattern is not out of text bounds</span>\r\n        <span class=\"hljs-keyword\">while</span> (textIndex &lt; text.length()) {\r\n\r\n            <span class=\"hljs-comment\">// try to match pattern with current part of the text starting from last character</span>\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> pattern.length() - <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">while</span> (i &gt;= <span class=\"hljs-number\">0</span>) {\r\n                comparisons++;\r\n                <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">patternChar</span> <span class=\"hljs-operator\">=</span> pattern.charAt(i);\r\n                <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">textChar</span> <span class=\"hljs-operator\">=</span> text.charAt((textIndex + i) - (pattern.length() - <span class=\"hljs-number\">1</span>));\r\n                <span class=\"hljs-keyword\">if</span> (!charEquals(patternChar, textChar, caseSensitive)) { <span class=\"hljs-comment\">// bad character, shift pattern</span>\r\n                    textIndex += getShiftValue(text.charAt(textIndex));\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n                i--;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// check for full match</span>\r\n            <span class=\"hljs-keyword\">if</span> (i == -<span class=\"hljs-number\">1</span>) {\r\n                <span class=\"hljs-keyword\">return</span> textIndex - pattern.length() + <span class=\"hljs-number\">1</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// text exhausted, return failure</span>\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Compares the argument characters\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> c1 first character\r\n     * <span class=\"hljs-doctag\">@param</span> c2 second character\r\n     * <span class=\"hljs-doctag\">@param</span> caseSensitive boolean determining case sensitivity of comparison\r\n     * <span class=\"hljs-doctag\">@return</span> truth value of the equality comparison\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">charEquals</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> c1, <span class=\"hljs-type\">char</span> c2, <span class=\"hljs-type\">boolean</span> caseSensitive)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (caseSensitive) {\r\n            <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">c1</span> <span class=\"hljs-operator\">=</span>= c2;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> Character.toLowerCase(c1) == Character.toLowerCase(c2);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Builds the bad symbol table required to run the algorithm. The method\r\n     * starts from the second to last character of the pattern and moves to the\r\n     * left. When it meets a new character, it is by definition its rightmost\r\n     * occurrence and therefore puts the distance from the current index to the\r\n     * index of the last character into the table. If the character is already\r\n     * in the table, then it is not a rightmost occurrence, so it continues.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> pattern basis for the bad symbol table\r\n     * <span class=\"hljs-doctag\">@return</span> the bad symbol table\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> HashMap&lt;Character, Integer&gt; <span class=\"hljs-title function_\">calcShiftValues</span><span class=\"hljs-params\">(String pattern)</span> {\r\n        patternLength = pattern.length();\r\n        HashMap&lt;Character, Integer&gt; table = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> pattern.length() - <span class=\"hljs-number\">2</span>;\r\n                i &gt;= <span class=\"hljs-number\">0</span>;\r\n                i--) { <span class=\"hljs-comment\">// length - 2 is the index of the second to last character</span>\r\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> pattern.charAt(i);\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">finalI</span> <span class=\"hljs-operator\">=</span> i;\r\n            table.computeIfAbsent(c, k -&gt; pattern.length() - <span class=\"hljs-number\">1</span> - finalI);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> table;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Helper function that uses the bad symbol shift table to return the\r\n     * appropriate shift value for a given character\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> c character\r\n     * <span class=\"hljs-doctag\">@return</span> shift value that corresponds to the character argument\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Integer <span class=\"hljs-title function_\">getShiftValue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> c)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (shiftValues.get(c) != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">return</span> shiftValues.get(c);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> patternLength;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "George B",
      "email": "geompokon@csd.auth.gr",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}