{
  "slug": "hash-map",
  "name": "Hash Map",
  "categories": [
    "datastructures",
    "hashmap",
    "hashing"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\hashmap\\hashing\\HashMap.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\hashmap\\hashing\\HashMap.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.hashmap.hashing;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashMap</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> hsize;\r\n    <span class=\"hljs-keyword\">private</span> LinkedList[] buckets;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashMap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> hsize)</span> {\r\n        buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>[hsize];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\r\n            buckets[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>();\r\n            <span class=\"hljs-comment\">// Java requires explicit initialisaton of each object</span>\r\n        }\r\n        <span class=\"hljs-built_in\">this</span>.hsize = hsize;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashing</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> key % hsize;\r\n        <span class=\"hljs-keyword\">if</span> (hash &lt; <span class=\"hljs-number\">0</span>) {\r\n            hash += hsize;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> hash;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\r\n        buckets[hash].insert(key);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\r\n\r\n        buckets[hash].delete(key);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayHashtable</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\r\n            System.out.printf(<span class=\"hljs-string\">&quot;Bucket %d :&quot;</span>, i);\r\n            System.out.println(buckets[i].display());\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedList</span> {\r\n\r\n        <span class=\"hljs-keyword\">private</span> Node first;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LinkedList</span><span class=\"hljs-params\">()</span> {\r\n            first = <span class=\"hljs-literal\">null</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n            <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n                first = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key);\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> findEnd(first);\r\n            temp.setNext(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key));\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">findEnd</span><span class=\"hljs-params\">(Node n)</span> {\r\n            <span class=\"hljs-keyword\">if</span> (n.getNext() == <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-keyword\">return</span> n;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">return</span> findEnd(n.getNext());\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">findKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n            <span class=\"hljs-keyword\">if</span> (!isEmpty()) {\r\n                <span class=\"hljs-keyword\">return</span> findKey(first, key);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                System.out.println(<span class=\"hljs-string\">&quot;List is empty&quot;</span>);\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">findKey</span><span class=\"hljs-params\">(Node n, <span class=\"hljs-type\">int</span> key)</span> {\r\n            <span class=\"hljs-keyword\">if</span> (n.getKey() == key) {\r\n                <span class=\"hljs-keyword\">return</span> n;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (n.getNext() == <span class=\"hljs-literal\">null</span>) {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Key not found&quot;</span>);\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">return</span> findKey(n.getNext(), key);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n            <span class=\"hljs-keyword\">if</span> (!isEmpty()) {\r\n                <span class=\"hljs-keyword\">if</span> (first.getKey() == key) {\r\n                    first = <span class=\"hljs-literal\">null</span>;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    delete(first, key);\r\n                }\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                System.out.println(<span class=\"hljs-string\">&quot;List is empty&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(Node n, <span class=\"hljs-type\">int</span> key)</span> {\r\n            <span class=\"hljs-keyword\">if</span> (n.getNext().getKey() == key) {\r\n                <span class=\"hljs-keyword\">if</span> (n.getNext().getNext() == <span class=\"hljs-literal\">null</span>) {\r\n                    n.setNext(<span class=\"hljs-literal\">null</span>);\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    n.setNext(n.getNext().getNext());\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> display(first);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(Node n)</span> {\r\n            <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;null&quot;</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">return</span> n.getKey() + <span class=\"hljs-string\">&quot;-&gt;&quot;</span> + display(n.getNext());\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">first</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-literal\">null</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n\r\n        <span class=\"hljs-keyword\">private</span> Node next;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> key;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\r\n            next = <span class=\"hljs-literal\">null</span>;\r\n            <span class=\"hljs-built_in\">this</span>.key = key;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">getNext</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> next;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> key;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNext</span><span class=\"hljs-params\">(Node next)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.next = next;\r\n        }\r\n    }\r\n}\r\n"
    },
    "go": {
      "dir": "structure\\hashmap\\hashmap.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure\\hashmap\\hashmap.go",
      "code": "<span class=\"hljs-keyword\">package</span> hashmap\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\r\n\t<span class=\"hljs-string\">&quot;hash/fnv&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-keyword\">var</span> defaultCapacity <span class=\"hljs-type\">uint64</span> = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">10</span>\r\n\r\n<span class=\"hljs-keyword\">type</span> node <span class=\"hljs-keyword\">struct</span> {\r\n\tkey   <span class=\"hljs-keyword\">interface</span>{}\r\n\tvalue <span class=\"hljs-keyword\">interface</span>{}\r\n\tnext  *node\r\n}\r\n\r\n<span class=\"hljs-comment\">// HashMap is golang implementation of hashmap</span>\r\n<span class=\"hljs-keyword\">type</span> HashMap <span class=\"hljs-keyword\">struct</span> {\r\n\tcapacity <span class=\"hljs-type\">uint64</span>\r\n\tsize     <span class=\"hljs-type\">uint64</span>\r\n\ttable    []*node\r\n}\r\n\r\n<span class=\"hljs-comment\">// New return new HashMap instance</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">New</span><span class=\"hljs-params\">()</span></span> *HashMap {\r\n\t<span class=\"hljs-keyword\">return</span> &amp;HashMap{\r\n\t\tcapacity: defaultCapacity,\r\n\t\ttable:    <span class=\"hljs-built_in\">make</span>([]*node, defaultCapacity),\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">// Make creates a new HashMap instance with input size and capacity</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Make</span><span class=\"hljs-params\">(size, capacity <span class=\"hljs-type\">uint64</span>)</span></span> HashMap {\r\n\t<span class=\"hljs-keyword\">return</span> HashMap{\r\n\t\tsize:     size,\r\n\t\tcapacity: capacity,\r\n\t\ttable:    <span class=\"hljs-built_in\">make</span>([]*node, capacity),\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">// Get returns value associated with given key</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> Get(key <span class=\"hljs-keyword\">interface</span>{}) <span class=\"hljs-keyword\">interface</span>{} {\r\n\tnode := hm.getNodeByHash(hm.hash(key))\r\n\r\n\t<span class=\"hljs-keyword\">if</span> node != <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> node.value\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Put puts new key value in hashmap</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> Put(key <span class=\"hljs-keyword\">interface</span>{}, value <span class=\"hljs-keyword\">interface</span>{}) <span class=\"hljs-keyword\">interface</span>{} {\r\n\t<span class=\"hljs-keyword\">return</span> hm.putValue(hm.hash(key), key, value)\r\n}\r\n\r\n<span class=\"hljs-comment\">// Contains checks if given key is stored in hashmap</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> Contains(key <span class=\"hljs-keyword\">interface</span>{}) <span class=\"hljs-type\">bool</span> {\r\n\tnode := hm.getNodeByHash(hm.hash(key))\r\n\t<span class=\"hljs-keyword\">return</span> node != <span class=\"hljs-literal\">nil</span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> putValue(hash <span class=\"hljs-type\">uint64</span>, key <span class=\"hljs-keyword\">interface</span>{}, value <span class=\"hljs-keyword\">interface</span>{}) <span class=\"hljs-keyword\">interface</span>{} {\r\n\t<span class=\"hljs-keyword\">if</span> hm.capacity == <span class=\"hljs-number\">0</span> {\r\n\t\thm.capacity = defaultCapacity\r\n\t\thm.table = <span class=\"hljs-built_in\">make</span>([]*node, defaultCapacity)\r\n\t}\r\n\r\n\tnode := hm.getNodeByHash(hash)\r\n\r\n\t<span class=\"hljs-keyword\">if</span> node == <span class=\"hljs-literal\">nil</span> {\r\n\t\thm.table[hash] = newNode(key, value)\r\n\r\n\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> node.key == key {\r\n\t\thm.table[hash] = newNodeWithNext(key, value, node)\r\n\t\t<span class=\"hljs-keyword\">return</span> value\r\n\r\n\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\thm.resize()\r\n\t\t<span class=\"hljs-keyword\">return</span> hm.putValue(hash, key, value)\r\n\t}\r\n\r\n\thm.size++\r\n\r\n\t<span class=\"hljs-keyword\">return</span> value\r\n\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> getNodeByHash(hash <span class=\"hljs-type\">uint64</span>) *node {\r\n\t<span class=\"hljs-keyword\">return</span> hm.table[hash]\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> resize() {\r\n\thm.capacity &lt;&lt;= <span class=\"hljs-number\">1</span>\r\n\r\n\ttempTable := hm.table\r\n\r\n\thm.table = <span class=\"hljs-built_in\">make</span>([]*node, hm.capacity)\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(tempTable); i++ {\r\n\t\tnode := tempTable[i]\r\n\t\t<span class=\"hljs-keyword\">if</span> node == <span class=\"hljs-literal\">nil</span> {\r\n\t\t\t<span class=\"hljs-keyword\">continue</span>\r\n\t\t}\r\n\r\n\t\thm.table[hm.hash(node.key)] = node\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newNode</span><span class=\"hljs-params\">(key <span class=\"hljs-keyword\">interface</span>{}, value <span class=\"hljs-keyword\">interface</span>{})</span></span> *node {\r\n\t<span class=\"hljs-keyword\">return</span> &amp;node{\r\n\t\tkey:   key,\r\n\t\tvalue: value,\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newNodeWithNext</span><span class=\"hljs-params\">(key <span class=\"hljs-keyword\">interface</span>{}, value <span class=\"hljs-keyword\">interface</span>{}, next *node)</span></span> *node {\r\n\t<span class=\"hljs-keyword\">return</span> &amp;node{\r\n\t\tkey:   key,\r\n\t\tvalue: value,\r\n\t\tnext:  next,\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(hm *HashMap)</span></span> hash(key <span class=\"hljs-keyword\">interface</span>{}) <span class=\"hljs-type\">uint64</span> {\r\n\th := fnv.New64a()\r\n\t_, _ = h.Write([]<span class=\"hljs-type\">byte</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;%v&quot;</span>, key)))\r\n\r\n\thashValue := h.Sum64()\r\n\r\n\t<span class=\"hljs-keyword\">return</span> (hm.capacity - <span class=\"hljs-number\">1</span>) &amp; (hashValue ^ (hashValue &gt;&gt; <span class=\"hljs-number\">16</span>))\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Michele Caci",
      "email": "michele.caci@gmail.com",
      "commits": 1
    },
    {
      "name": "Wesllhey Holanda",
      "email": "wesllhey.holanda@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ray",
      "email": "rbshealy@live.unc.edu",
      "commits": 1
    },
    {
      "name": "Ray S",
      "email": "68674276+rbshealy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shivg7706",
      "email": "shivamgupta7706@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Kenneth Nero",
      "email": "kbn1798@rit.edu",
      "commits": 1
    },
    {
      "name": "bakurits",
      "email": "bakuricucxashvili@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "ParitoshAggarwal",
      "email": "paritoshmait@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}