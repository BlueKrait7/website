{
  "slug": "nearest-neighbour-algorithm",
  "name": "Nearest Neighbour Algorithm",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "dart": {
      "dir": "graphs\\nearest_neighbour_algorithm.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/graphs\\nearest_neighbour_algorithm.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;\r\n\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Graph represented as adjacency matrix</span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">[nodes] - node names preserved in order</span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">[adjacencyMatrix] edge weights, distances between nodes</span></span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span> </span>{\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; nodes;\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt;&gt; adjacencyMatrix;\r\n\r\n  Graph(<span class=\"hljs-keyword\">this</span>.nodes, <span class=\"hljs-keyword\">this</span>.adjacencyMatrix);\r\n}\r\n\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Find path visiting all nodes in given [graph] using greedy approach</span></span>\r\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; nearestNeighbourSearch(Graph graph) {\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; path = [];\r\n  <span class=\"hljs-built_in\">Set</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; unvisitedNodes = <span class=\"hljs-built_in\">Set</span>.from(<span class=\"hljs-built_in\">Iterable</span>.generate(graph.nodes.length));\r\n\r\n  <span class=\"hljs-built_in\">int</span> currentNode = <span class=\"hljs-number\">0</span>;\r\n  <span class=\"hljs-keyword\">while</span> (unvisitedNodes.isNotEmpty) {\r\n    unvisitedNodes.remove(currentNode);\r\n    <span class=\"hljs-built_in\">int</span> nearestNeighbour;\r\n    <span class=\"hljs-built_in\">double</span> nearestNeighbourDistance;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> neighbour <span class=\"hljs-keyword\">in</span> unvisitedNodes) {\r\n      <span class=\"hljs-built_in\">double</span> neighbourDistance = graph.adjacencyMatrix[currentNode][neighbour];\r\n      <span class=\"hljs-keyword\">if</span> (nearestNeighbour == <span class=\"hljs-keyword\">null</span> ||\r\n          neighbourDistance &lt; nearestNeighbourDistance) {\r\n        nearestNeighbour = neighbour;\r\n        nearestNeighbourDistance = neighbourDistance;\r\n      }\r\n    }\r\n\r\n    path.add(graph.nodes[currentNode]);\r\n    currentNode = nearestNeighbour;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> path;\r\n}\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> </span>{\r\n  <span class=\"hljs-built_in\">double</span> x;\r\n  <span class=\"hljs-built_in\">double</span> y;\r\n\r\n  <span class=\"hljs-meta\">@override</span>\r\n  <span class=\"hljs-built_in\">String</span> toString() =&gt; <span class=\"hljs-string\">&quot;P(<span class=\"hljs-subst\">$x</span>, <span class=\"hljs-subst\">$y</span>)&quot;</span>;\r\n\r\n  Point(<span class=\"hljs-keyword\">this</span>.x, <span class=\"hljs-keyword\">this</span>.y);\r\n}\r\n\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Euclidean distance between [p1] and [p2]</span></span>\r\n<span class=\"hljs-built_in\">double</span> distance(Point p1, Point p2) {\r\n  <span class=\"hljs-keyword\">return</span> sqrt(pow(p2.x - p1.x, <span class=\"hljs-number\">2</span>) + pow(p2.y - p1.y, <span class=\"hljs-number\">2</span>));\r\n}\r\n\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Form graph using given [points].</span></span>\r\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Edge weights will correspond to distances</span></span>\r\nGraph fromPoints(<span class=\"hljs-built_in\">List</span>&lt;Point&gt; points) {\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; nodes = [];\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt;&gt; adjacencyMatrix = [];\r\n\r\n  <span class=\"hljs-keyword\">for</span> (Point p1 <span class=\"hljs-keyword\">in</span> points) {\r\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; neigbourDistances = [];\r\n    <span class=\"hljs-keyword\">for</span> (Point p2 <span class=\"hljs-keyword\">in</span> points) {\r\n      neigbourDistances.add(distance(p1, p2));\r\n    }\r\n    nodes.add(p1.toString());\r\n    adjacencyMatrix.add(neigbourDistances);\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> Graph(nodes, adjacencyMatrix);\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  Graph graph = Graph([\r\n    <span class=\"hljs-string\">&quot;A&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;B&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;C&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;D&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;E&quot;</span>\r\n  ], [\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">100</span>],\r\n    [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],\r\n    [<span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">433</span>, <span class=\"hljs-number\">123</span>],\r\n    [<span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>],\r\n    [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">0</span>]\r\n  ]);\r\n\r\n  <span class=\"hljs-built_in\">print</span>(nearestNeighbourSearch(graph));\r\n\r\n  <span class=\"hljs-built_in\">List</span>&lt;Point&gt; points = [\r\n    <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),\r\n    <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>),\r\n    <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">10</span>),\r\n    <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">3.33</span>, <span class=\"hljs-number\">8.11</span>),\r\n    <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">11</span>),\r\n    <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>),\r\n    <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">2</span>)\r\n  ];\r\n\r\n  <span class=\"hljs-built_in\">print</span>(nearestNeighbourSearch(fromPoints(points)));\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}