{
  "slug": "lib",
  "name": "Lib",
  "categories": [
    "linearalgebra"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "linear_algebra\\src\\lib.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/linear_algebra\\src\\lib.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nCreated on Mon Feb 26 14:29:11 2018\r\n\r\n@author: Christian Bender\r\n@license: MIT-license\r\n\r\nThis module contains some useful classes and functions for dealing\r\nwith linear algebra in python.\r\n\r\nOverview:\r\n\r\n- class Vector\r\n- function zero_vector(dimension)\r\n- function unit_basis_vector(dimension, pos)\r\n- function axpy(scalar, vector1, vector2)\r\n- function random_vector(N, a, b)\r\n- class Matrix\r\n- function square_zero_matrix(N)\r\n- function random_matrix(W, H, a, b)\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n<span class=\"hljs-keyword\">import</span> random\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Collection, overload\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vector</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    This class represents a vector of arbitrary size.\r\n    You need to give the vector components.\r\n\r\n    Overview of the methods:\r\n\r\n        __init__(components: Collection[float] | None): init the vector\r\n        __len__(): gets the size of the vector (number of components)\r\n        __str__(): returns a string representation\r\n        __add__(other: Vector): vector addition\r\n        __sub__(other: Vector): vector subtraction\r\n        __mul__(other: float): scalar multiplication\r\n        __mul__(other: Vector): dot product\r\n        set(components: Collection[float]): changes the vector components\r\n        copy(): copies this vector and returns it\r\n        component(i): gets the i-th component (0-indexed)\r\n        change_component(pos: int, value: float): changes specified component\r\n        euclidean_length(): returns the euclidean length of the vector\r\n        angle(other: Vector, deg: bool): returns the angle between two vectors\r\n        TODO: compare-operator\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, components: Collection[<span class=\"hljs-built_in\">float</span>] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        input: components or nothing\r\n        simple constructor for init the vector\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> components <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            components = []\r\n        self.__components = <span class=\"hljs-built_in\">list</span>(components)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        returns the size of the vector\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.__components)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        returns a string representation of the vector\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;(&quot;</span> + <span class=\"hljs-string\">&quot;,&quot;</span>.join(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">str</span>, self.__components)) + <span class=\"hljs-string\">&quot;)&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__add__</span>(<span class=\"hljs-params\">self, other: Vector</span>) -&gt; Vector:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        input: other vector\r\n        assumes: other vector has the same size\r\n        returns a new vector that represents the sum.\r\n        &quot;&quot;&quot;</span>\r\n        size = <span class=\"hljs-built_in\">len</span>(self)\r\n        <span class=\"hljs-keyword\">if</span> size == <span class=\"hljs-built_in\">len</span>(other):\r\n            result = [self.__components[i] + other.component(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)]\r\n            <span class=\"hljs-keyword\">return</span> Vector(result)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;must have the same size&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__sub__</span>(<span class=\"hljs-params\">self, other: Vector</span>) -&gt; Vector:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        input: other vector\r\n        assumes: other vector has the same size\r\n        returns a new vector that represents the difference.\r\n        &quot;&quot;&quot;</span>\r\n        size = <span class=\"hljs-built_in\">len</span>(self)\r\n        <span class=\"hljs-keyword\">if</span> size == <span class=\"hljs-built_in\">len</span>(other):\r\n            result = [self.__components[i] - other.component(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)]\r\n            <span class=\"hljs-keyword\">return</span> Vector(result)\r\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># error case</span>\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;must have the same size&quot;</span>)\r\n\r\n<span class=\"hljs-meta\">    @overload</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-built_in\">float</span></span>) -&gt; Vector:\r\n        ...\r\n\r\n<span class=\"hljs-meta\">    @overload</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: Vector</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        ...\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-built_in\">float</span> | Vector</span>) -&gt; <span class=\"hljs-built_in\">float</span> | Vector:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        mul implements the scalar multiplication\r\n        and the dot-product\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(other, <span class=\"hljs-built_in\">float</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(other, <span class=\"hljs-built_in\">int</span>):\r\n            ans = [c * other <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> self.__components]\r\n            <span class=\"hljs-keyword\">return</span> Vector(ans)\r\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">isinstance</span>(other, Vector) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(self) == <span class=\"hljs-built_in\">len</span>(other):\r\n            size = <span class=\"hljs-built_in\">len</span>(self)\r\n            prods = [self.__components[i] * other.component(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)]\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(prods)\r\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># error case</span>\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;invalid operand!&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">self, components: Collection[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        input: new components\r\n        changes the components of the vector.\r\n        replaces the components with newer one.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(components) &gt; <span class=\"hljs-number\">0</span>:\r\n            self.__components = <span class=\"hljs-built_in\">list</span>(components)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;please give any vector&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">copy</span>(<span class=\"hljs-params\">self</span>) -&gt; Vector:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        copies this vector and returns it.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> Vector(self.__components)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">component</span>(<span class=\"hljs-params\">self, i: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        input: index (0-indexed)\r\n        output: the i-th component of the vector.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(i) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">and</span> -<span class=\"hljs-built_in\">len</span>(self.__components) &lt;= i &lt; <span class=\"hljs-built_in\">len</span>(self.__components):\r\n            <span class=\"hljs-keyword\">return</span> self.__components[i]\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;index out of range&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">change_component</span>(<span class=\"hljs-params\">self, pos: <span class=\"hljs-built_in\">int</span>, value: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        input: an index (pos) and a value\r\n        changes the specified component (pos) with the\r\n        &#x27;value&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-comment\"># precondition</span>\r\n        <span class=\"hljs-keyword\">assert</span> -<span class=\"hljs-built_in\">len</span>(self.__components) &lt;= pos &lt; <span class=\"hljs-built_in\">len</span>(self.__components)\r\n        self.__components[pos] = value\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euclidean_length</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        returns the euclidean length of the vector\r\n\r\n        &gt;&gt;&gt; Vector([2, 3, 4]).euclidean_length()\r\n        5.385164807134504\r\n        &gt;&gt;&gt; Vector([1]).euclidean_length()\r\n        1.0\r\n        &gt;&gt;&gt; Vector([0, -1, -2, -3, 4, 5, 6]).euclidean_length()\r\n        9.539392014169456\r\n        &gt;&gt;&gt; Vector([]).euclidean_length()\r\n        Traceback (most recent call last):\r\n        ...\r\n        Exception: Vector is empty\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.__components) == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Vector is empty&quot;</span>)\r\n        squares = [c**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> self.__components]\r\n        <span class=\"hljs-keyword\">return</span> math.sqrt(<span class=\"hljs-built_in\">sum</span>(squares))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">angle</span>(<span class=\"hljs-params\">self, other: Vector, deg: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        find angle between two Vector (self, Vector)\r\n\r\n        &gt;&gt;&gt; Vector([3, 4, -1]).angle(Vector([2, -1, 1]))\r\n        1.4906464636572374\r\n        &gt;&gt;&gt; Vector([3, 4, -1]).angle(Vector([2, -1, 1]), deg = True)\r\n        85.40775111366095\r\n        &gt;&gt;&gt; Vector([3, 4, -1]).angle(Vector([2, -1]))\r\n        Traceback (most recent call last):\r\n        ...\r\n        Exception: invalid operand!\r\n        &quot;&quot;&quot;</span>\r\n        num = self * other\r\n        den = self.euclidean_length() * other.euclidean_length()\r\n        <span class=\"hljs-keyword\">if</span> deg:\r\n            <span class=\"hljs-keyword\">return</span> math.degrees(math.acos(num / den))\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> math.acos(num / den)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">zero_vector</span>(<span class=\"hljs-params\">dimension: <span class=\"hljs-built_in\">int</span></span>) -&gt; Vector:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    returns a zero-vector of size &#x27;dimension&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># precondition</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(dimension, <span class=\"hljs-built_in\">int</span>)\r\n    <span class=\"hljs-keyword\">return</span> Vector([<span class=\"hljs-number\">0</span>] * dimension)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">unit_basis_vector</span>(<span class=\"hljs-params\">dimension: <span class=\"hljs-built_in\">int</span>, pos: <span class=\"hljs-built_in\">int</span></span>) -&gt; Vector:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    returns a unit basis vector with a One\r\n    at index &#x27;pos&#x27; (indexing at 0)\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># precondition</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(dimension, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-built_in\">isinstance</span>(pos, <span class=\"hljs-built_in\">int</span>))\r\n    ans = [<span class=\"hljs-number\">0</span>] * dimension\r\n    ans[pos] = <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> Vector(ans)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">axpy</span>(<span class=\"hljs-params\">scalar: <span class=\"hljs-built_in\">float</span>, x: Vector, y: Vector</span>) -&gt; Vector:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    input: a &#x27;scalar&#x27; and two vectors &#x27;x&#x27; and &#x27;y&#x27;\r\n    output: a vector\r\n    computes the axpy operation\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># precondition</span>\r\n    <span class=\"hljs-keyword\">assert</span> (\r\n        <span class=\"hljs-built_in\">isinstance</span>(x, Vector)\r\n        <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(y, Vector)\r\n        <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-built_in\">isinstance</span>(scalar, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(scalar, <span class=\"hljs-built_in\">float</span>))\r\n    )\r\n    <span class=\"hljs-keyword\">return</span> x * scalar + y\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_vector</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; Vector:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    input: size (N) of the vector.\r\n           random range (a,b)\r\n    output: returns a random vector of size N, with\r\n            random integer components between &#x27;a&#x27; and &#x27;b&#x27;.\r\n    &quot;&quot;&quot;</span>\r\n    random.seed(<span class=\"hljs-literal\">None</span>)\r\n    ans = [random.randint(a, b) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)]\r\n    <span class=\"hljs-keyword\">return</span> Vector(ans)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Matrix</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    class: Matrix\r\n    This class represents an arbitrary matrix.\r\n\r\n    Overview of the methods:\r\n\r\n        __init__():\r\n        __str__(): returns a string representation\r\n        __add__(other: Matrix): matrix addition\r\n        __sub__(other: Matrix): matrix subtraction\r\n        __mul__(other: float): scalar multiplication\r\n        __mul__(other: Vector): vector multiplication\r\n        height() : returns height\r\n        width() : returns width\r\n        component(x: int, y: int): returns specified component\r\n        change_component(x: int, y: int, value: float): changes specified component\r\n        minor(x: int, y: int): returns minor along (x, y)\r\n        cofactor(x: int, y: int): returns cofactor along (x, y)\r\n        determinant() : returns determinant\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]], w: <span class=\"hljs-built_in\">int</span>, h: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        simple constructor for initializing the matrix with components.\r\n        &quot;&quot;&quot;</span>\r\n        self.__matrix = matrix\r\n        self.__width = w\r\n        self.__height = h\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        returns a string representation of this matrix.\r\n        &quot;&quot;&quot;</span>\r\n        ans = <span class=\"hljs-string\">&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height):\r\n            ans += <span class=\"hljs-string\">&quot;|&quot;</span>\r\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width):\r\n                <span class=\"hljs-keyword\">if</span> j &lt; self.__width - <span class=\"hljs-number\">1</span>:\r\n                    ans += <span class=\"hljs-built_in\">str</span>(self.__matrix[i][j]) + <span class=\"hljs-string\">&quot;,&quot;</span>\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    ans += <span class=\"hljs-built_in\">str</span>(self.__matrix[i][j]) + <span class=\"hljs-string\">&quot;|\\n&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> ans\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__add__</span>(<span class=\"hljs-params\">self, other: Matrix</span>) -&gt; Matrix:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        implements matrix addition.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.__width == other.width() <span class=\"hljs-keyword\">and</span> self.__height == other.height():\r\n            matrix = []\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height):\r\n                row = [\r\n                    self.__matrix[i][j] + other.component(i, j)\r\n                    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width)\r\n                ]\r\n                matrix.append(row)\r\n            <span class=\"hljs-keyword\">return</span> Matrix(matrix, self.__width, self.__height)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;matrix must have the same dimension!&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__sub__</span>(<span class=\"hljs-params\">self, other: Matrix</span>) -&gt; Matrix:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        implements matrix subtraction.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.__width == other.width() <span class=\"hljs-keyword\">and</span> self.__height == other.height():\r\n            matrix = []\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height):\r\n                row = [\r\n                    self.__matrix[i][j] - other.component(i, j)\r\n                    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width)\r\n                ]\r\n                matrix.append(row)\r\n            <span class=\"hljs-keyword\">return</span> Matrix(matrix, self.__width, self.__height)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;matrices must have the same dimension!&quot;</span>)\r\n\r\n<span class=\"hljs-meta\">    @overload</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-built_in\">float</span></span>) -&gt; Matrix:\r\n        ...\r\n\r\n<span class=\"hljs-meta\">    @overload</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: Vector</span>) -&gt; Vector:\r\n        ...\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-built_in\">float</span> | Vector</span>) -&gt; Vector | Matrix:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        implements the matrix-vector multiplication.\r\n        implements the matrix-scalar multiplication\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(other, Vector):  <span class=\"hljs-comment\"># matrix-vector</span>\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(other) == self.__width:\r\n                ans = zero_vector(self.__height)\r\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height):\r\n                    prods = [\r\n                        self.__matrix[i][j] * other.component(j)\r\n                        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width)\r\n                    ]\r\n                    ans.change_component(i, <span class=\"hljs-built_in\">sum</span>(prods))\r\n                <span class=\"hljs-keyword\">return</span> ans\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">raise</span> Exception(\r\n                    <span class=\"hljs-string\">&quot;vector must have the same size as the &quot;</span>\r\n                    <span class=\"hljs-string\">&quot;number of columns of the matrix!&quot;</span>\r\n                )\r\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">isinstance</span>(other, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(other, <span class=\"hljs-built_in\">float</span>):  <span class=\"hljs-comment\"># matrix-scalar</span>\r\n            matrix = [\r\n                [self.__matrix[i][j] * other <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width)]\r\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height)\r\n            ]\r\n            <span class=\"hljs-keyword\">return</span> Matrix(matrix, self.__width, self.__height)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">height</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        getter for the height\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.__height\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">width</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        getter for the width\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.__width\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">component</span>(<span class=\"hljs-params\">self, x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        returns the specified (x,y) component\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= x &lt; self.__height <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= y &lt; self.__width:\r\n            <span class=\"hljs-keyword\">return</span> self.__matrix[x][y]\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;change_component: indices out of bounds&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">change_component</span>(<span class=\"hljs-params\">self, x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span>, value: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        changes the x-y component of this matrix\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= x &lt; self.__height <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= y &lt; self.__width:\r\n            self.__matrix[x][y] = value\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;change_component: indices out of bounds&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minor</span>(<span class=\"hljs-params\">self, x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        returns the minor along (x, y)\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.__height != self.__width:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Matrix is not square&quot;</span>)\r\n        minor = self.__matrix[:x] + self.__matrix[x + <span class=\"hljs-number\">1</span> :]\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(minor)):\r\n            minor[i] = minor[i][:y] + minor[i][y + <span class=\"hljs-number\">1</span> :]\r\n        <span class=\"hljs-keyword\">return</span> Matrix(minor, self.__width - <span class=\"hljs-number\">1</span>, self.__height - <span class=\"hljs-number\">1</span>).determinant()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cofactor</span>(<span class=\"hljs-params\">self, x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        returns the cofactor (signed minor) along (x, y)\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.__height != self.__width:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Matrix is not square&quot;</span>)\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= x &lt; self.__height <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= y &lt; self.__width:\r\n            <span class=\"hljs-keyword\">return</span> (-<span class=\"hljs-number\">1</span>) ** (x + y) * self.minor(x, y)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Indices out of bounds&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">determinant</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        returns the determinant of an nxn matrix using Laplace expansion\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.__height != self.__width:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Matrix is not square&quot;</span>)\r\n        <span class=\"hljs-keyword\">if</span> self.__height &lt; <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Matrix has no element&quot;</span>)\r\n        <span class=\"hljs-keyword\">elif</span> self.__height == <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.__matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\r\n        <span class=\"hljs-keyword\">elif</span> self.__height == <span class=\"hljs-number\">2</span>:\r\n            <span class=\"hljs-keyword\">return</span> (\r\n                self.__matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] * self.__matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]\r\n                - self.__matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] * self.__matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]\r\n            )\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            cofactor_prods = [\r\n                self.__matrix[<span class=\"hljs-number\">0</span>][y] * self.cofactor(<span class=\"hljs-number\">0</span>, y) <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width)\r\n            ]\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(cofactor_prods)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">square_zero_matrix</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; Matrix:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    returns a square zero-matrix of dimension NxN\r\n    &quot;&quot;&quot;</span>\r\n    ans: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]] = [[<span class=\"hljs-number\">0</span>] * n <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)]\r\n    <span class=\"hljs-keyword\">return</span> Matrix(ans, n, n)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_matrix</span>(<span class=\"hljs-params\">width: <span class=\"hljs-built_in\">int</span>, height: <span class=\"hljs-built_in\">int</span>, a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; Matrix:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    returns a random matrix WxH with integer components\r\n    between &#x27;a&#x27; and &#x27;b&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    random.seed(<span class=\"hljs-literal\">None</span>)\r\n    matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]] = [\r\n        [random.randint(a, b) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(width)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(height)\r\n    ]\r\n    <span class=\"hljs-keyword\">return</span> Matrix(matrix, width, height)\r\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Aman kanojiya",
      "email": "50018596+AMANKANOJIYA@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Iqrar Agalosi Nureyza",
      "email": "misteriqrar@gmail.com",
      "commits": 1
    },
    {
      "name": "Milad Sadeghi DM",
      "email": "Cor3Down@ProtonMail.ch",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Tianyi Zheng",
      "email": "tianyizheng02@gmail.com",
      "commits": 2
    },
    {
      "name": "Alex Veltman",
      "email": "alexveltman0@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}