{
  "slug": "dijkstra-shortest-path",
  "name": "Dijkstra Shortest Path",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Graph/Dijkstra/DijkstraAlgorithm.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Graph\\Dijkstra\\DijkstraAlgorithm.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n<span class=\"hljs-keyword\">using</span> DataStructures.Graph;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Graph.Dijkstra</span>\r\n{\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DijkstraAlgorithm</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Implementation of the Dijkstra shortest path algorithm for cyclic graphs.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;graph&quot;&gt;</span>Graph instance.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;startVertex&quot;&gt;</span>Starting vertex instance.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Generic Parameter.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>List of distances from current vertex to all other vertices.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Exception thrown in case when graph is null or start</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> vertex does not belong to graph instance.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title\">DistanceModel</span>&lt;<span class=\"hljs-title\">T</span>&gt;[] <span class=\"hljs-title\">GenerateShortestPath</span>&lt;<span class=\"hljs-title\">T</span>&gt;(<span class=\"hljs-params\">DirectedWeightedGraph&lt;T&gt; graph, Vertex&lt;T&gt; startVertex</span>)</span>\r\n        {\r\n            ValidateGraphAndStartVertex(graph, startVertex);\r\n\r\n            <span class=\"hljs-keyword\">var</span> visitedVertices = <span class=\"hljs-keyword\">new</span> List&lt;Vertex&lt;T&gt;&gt;();\r\n\r\n            <span class=\"hljs-keyword\">var</span> distanceArray = InitializeDistanceArray(graph, startVertex);\r\n\r\n            <span class=\"hljs-keyword\">var</span> currentVertex = startVertex;\r\n\r\n            <span class=\"hljs-keyword\">var</span> currentPath = <span class=\"hljs-number\">0</span>d;\r\n\r\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)\r\n            {\r\n                visitedVertices.Add(currentVertex);\r\n\r\n                <span class=\"hljs-keyword\">var</span> neighborVertices = graph\r\n                    .GetNeighbors(currentVertex)\r\n                    .Where(x =&gt; x != <span class=\"hljs-literal\">null</span> &amp;&amp; !visitedVertices.Contains(x))\r\n                    .ToList();\r\n\r\n                <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> vertex <span class=\"hljs-keyword\">in</span> neighborVertices)\r\n                {\r\n                    <span class=\"hljs-keyword\">var</span> adjacentDistance = graph.AdjacentDistance(currentVertex, vertex!);\r\n\r\n                    <span class=\"hljs-keyword\">var</span> distance = distanceArray[vertex!.Index];\r\n\r\n                    <span class=\"hljs-keyword\">if</span> (distance.Distance &lt;= currentPath + adjacentDistance)\r\n                    {\r\n                        <span class=\"hljs-keyword\">continue</span>;\r\n                    }\r\n\r\n                    distance.Distance = currentPath + adjacentDistance;\r\n                    distance.PreviousVertex = currentVertex;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">var</span> minimalAdjacentVertex = GetMinimalUnvisitedAdjacentVertex(graph, currentVertex, neighborVertices);\r\n\r\n                <span class=\"hljs-keyword\">if</span> (neighborVertices.Count == <span class=\"hljs-number\">0</span> || minimalAdjacentVertex <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n\r\n                currentPath += graph.AdjacentDistance(currentVertex, minimalAdjacentVertex);\r\n\r\n                currentVertex = minimalAdjacentVertex;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> distanceArray;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title\">DistanceModel</span>&lt;<span class=\"hljs-title\">T</span>&gt;[] <span class=\"hljs-title\">InitializeDistanceArray</span>&lt;<span class=\"hljs-title\">T</span>&gt;(<span class=\"hljs-params\">\r\n            IDirectedWeightedGraph&lt;T&gt; graph,\r\n            Vertex&lt;T&gt; startVertex</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> distArray = <span class=\"hljs-keyword\">new</span> DistanceModel&lt;T&gt;[graph.Count];\r\n\r\n            distArray[startVertex.Index] = <span class=\"hljs-keyword\">new</span> DistanceModel&lt;T&gt;(startVertex, startVertex, <span class=\"hljs-number\">0</span>);\r\n\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> vertex <span class=\"hljs-keyword\">in</span> graph.Vertices.Where(x =&gt; x != <span class=\"hljs-literal\">null</span> &amp;&amp; !x.Equals(startVertex)))\r\n            {\r\n                distArray[vertex!.Index] = <span class=\"hljs-keyword\">new</span> DistanceModel&lt;T&gt;(vertex, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-built_in\">double</span>.MaxValue);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> distArray;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ValidateGraphAndStartVertex</span>&lt;<span class=\"hljs-title\">T</span>&gt;(<span class=\"hljs-params\">DirectedWeightedGraph&lt;T&gt; graph, Vertex&lt;T&gt; startVertex</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (graph <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentNullException(<span class=\"hljs-keyword\">nameof</span>(graph));\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (startVertex.Graph != <span class=\"hljs-literal\">null</span> &amp;&amp; !startVertex.Graph.Equals(graph))\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentNullException(<span class=\"hljs-keyword\">nameof</span>(graph));\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title\">Vertex</span>&lt;<span class=\"hljs-title\">T</span>&gt;? <span class=\"hljs-title\">GetMinimalUnvisitedAdjacentVertex</span>&lt;<span class=\"hljs-title\">T</span>&gt;(<span class=\"hljs-params\">\r\n            IDirectedWeightedGraph&lt;T&gt; graph,\r\n            Vertex&lt;T&gt; startVertex,\r\n            IEnumerable&lt;Vertex&lt;T&gt;?&gt; adjacentVertices</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> minDistance = <span class=\"hljs-built_in\">double</span>.MaxValue;\r\n            Vertex&lt;T&gt;? minVertex = <span class=\"hljs-literal\">default</span>;\r\n\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> vertex <span class=\"hljs-keyword\">in</span> adjacentVertices)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> currentDistance = graph.AdjacentDistance(startVertex, vertex!);\r\n\r\n                <span class=\"hljs-keyword\">if</span> (minDistance &lt;= currentDistance)\r\n                {\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                minDistance = currentDistance;\r\n                minVertex = vertex;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> minVertex;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}