{
  "slug": "closest-points",
  "name": "Closest Points",
  "categories": [
    "geometry"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src\\geometry\\closest_points.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\geometry\\closest_points.rs",
      "code": "<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Point</span> = (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>);\r\n<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">point_cmp</span>((a1, a2): &amp;Point, (b1, b2): &amp;Point) <span class=\"hljs-punctuation\">-&gt;</span> Ordering {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">acmp</span> = <span class=\"hljs-title function_ invoke__\">f64_cmp</span>(a1, b1);\r\n    <span class=\"hljs-keyword\">match</span> acmp {\r\n        Ordering::Equal =&gt; <span class=\"hljs-title function_ invoke__\">f64_cmp</span>(a2, b2),\r\n        _ =&gt; acmp,\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">f64_cmp</span>(a: &amp;<span class=\"hljs-type\">f64</span>, b: &amp;<span class=\"hljs-type\">f64</span>) <span class=\"hljs-punctuation\">-&gt;</span> Ordering {\r\n    a.<span class=\"hljs-title function_ invoke__\">partial_cmp</span>(b).<span class=\"hljs-title function_ invoke__\">unwrap</span>()\r\n}\r\n\r\n<span class=\"hljs-comment\">/// returns the two closest points</span>\r\n<span class=\"hljs-comment\">/// or None if there are zero or one point</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">closest_points</span>(points: &amp;[Point]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;(Point, Point)&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">points</span>: <span class=\"hljs-type\">Vec</span>&lt;Point&gt; = points.<span class=\"hljs-title function_ invoke__\">to_vec</span>();\r\n    points.<span class=\"hljs-title function_ invoke__\">sort_by</span>(point_cmp);\r\n\r\n    <span class=\"hljs-title function_ invoke__\">closest_points_aux</span>(&amp;points, <span class=\"hljs-number\">0</span>, points.<span class=\"hljs-title function_ invoke__\">len</span>())\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">dist</span>((x1, y1): &amp;Point, (x2, y2): &amp;Point) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dx</span> = *x1 - *x2;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dy</span> = *y1 - *y2;\r\n\r\n    (dx * dx + dy * dy).<span class=\"hljs-title function_ invoke__\">sqrt</span>()\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">closest_points_aux</span>(\r\n    points: &amp;[Point],\r\n    <span class=\"hljs-keyword\">mut</span> start: <span class=\"hljs-type\">usize</span>,\r\n    <span class=\"hljs-keyword\">mut</span> end: <span class=\"hljs-type\">usize</span>,\r\n) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;(Point, Point)&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n</span> = end - start;\r\n\r\n    <span class=\"hljs-keyword\">if</span> n &lt;= <span class=\"hljs-number\">1</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> n &lt;= <span class=\"hljs-number\">3</span> {\r\n        <span class=\"hljs-comment\">// bruteforce</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">min</span> = <span class=\"hljs-title function_ invoke__\">dist</span>(&amp;points[<span class=\"hljs-number\">0</span>], &amp;points[<span class=\"hljs-number\">1</span>]);\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">pair</span> = (points[<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">1</span>]);\r\n\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..n {\r\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> (i + <span class=\"hljs-number\">1</span>)..n {\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">new</span> = <span class=\"hljs-title function_ invoke__\">dist</span>(&amp;points[i], &amp;points[j]);\r\n                <span class=\"hljs-keyword\">if</span> new &lt; min {\r\n                    min = new;\r\n                    pair = (points[i], points[j]);\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(pair);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid</span> = (start + end) / <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">left</span> = <span class=\"hljs-title function_ invoke__\">closest_points_aux</span>(points, start, mid);\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">right</span> = <span class=\"hljs-title function_ invoke__\">closest_points_aux</span>(points, mid, end);\r\n\r\n    <span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> min_dist, <span class=\"hljs-keyword\">mut</span> pair) = <span class=\"hljs-title function_ invoke__\">match</span> (left, right) {\r\n        (<span class=\"hljs-title function_ invoke__\">Some</span>((l1, l2)), <span class=\"hljs-title function_ invoke__\">Some</span>((r1, r2))) =&gt; {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dl</span> = <span class=\"hljs-title function_ invoke__\">dist</span>(&amp;l1, &amp;l2);\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dr</span> = <span class=\"hljs-title function_ invoke__\">dist</span>(&amp;r1, &amp;r2);\r\n            <span class=\"hljs-keyword\">if</span> dl &lt; dr {\r\n                (dl, (l1, l2))\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                (dr, (r1, r2))\r\n            }\r\n        }\r\n        (<span class=\"hljs-title function_ invoke__\">Some</span>((a, b)), <span class=\"hljs-literal\">None</span>) =&gt; (<span class=\"hljs-title function_ invoke__\">dist</span>(&amp;a, &amp;b), (a, b)),\r\n        (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-title function_ invoke__\">Some</span>((a, b))) =&gt; (<span class=\"hljs-title function_ invoke__\">dist</span>(&amp;a, &amp;b), (a, b)),\r\n        (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>) =&gt; <span class=\"hljs-built_in\">unreachable!</span>(),\r\n    };\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">mid_x</span> = points[mid].<span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> points[start].<span class=\"hljs-number\">0</span> &lt; mid_x - min_dist {\r\n        start += <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">while</span> points[end - <span class=\"hljs-number\">1</span>].<span class=\"hljs-number\">0</span> &gt; mid_x + min_dist {\r\n        end -= <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">mids</span>: <span class=\"hljs-type\">Vec</span>&lt;&amp;Point&gt; = points[start..end].<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">collect</span>();\r\n    mids.<span class=\"hljs-title function_ invoke__\">sort_by</span>(|a, b| <span class=\"hljs-title function_ invoke__\">f64_cmp</span>(&amp;a.<span class=\"hljs-number\">1</span>, &amp;b.<span class=\"hljs-number\">1</span>));\r\n\r\n    <span class=\"hljs-title function_ invoke__\">for</span> (i, e) <span class=\"hljs-keyword\">in</span> mids.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">8</span> {\r\n            <span class=\"hljs-keyword\">if</span> i + k &gt;= mids.<span class=\"hljs-title function_ invoke__\">len</span>() {\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">new</span> = <span class=\"hljs-title function_ invoke__\">dist</span>(e, mids[i + k]);\r\n            <span class=\"hljs-keyword\">if</span> new &lt; min_dist {\r\n                min_dist = new;\r\n                pair = (**e, *mids[i + k]);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-title function_ invoke__\">Some</span>(pair)\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::closest_points;\r\n    <span class=\"hljs-keyword\">use</span> super::Point;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">eq</span>(p1: <span class=\"hljs-type\">Option</span>&lt;(Point, Point)&gt;, p2: <span class=\"hljs-type\">Option</span>&lt;(Point, Point)&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-title function_ invoke__\">match</span> (p1, p2) {\r\n            (<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>) =&gt; <span class=\"hljs-literal\">true</span>,\r\n            (<span class=\"hljs-title function_ invoke__\">Some</span>((p1, p2)), <span class=\"hljs-title function_ invoke__\">Some</span>((p3, p4))) =&gt; (p1 == p3 &amp;&amp; p2 == p4) || (p1 == p4 &amp;&amp; p2 == p3),\r\n            _ =&gt; <span class=\"hljs-literal\">false</span>,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">macro_rules!</span> assert_display {\r\n        ($left: expr, $right: expr) =&gt; {\r\n            <span class=\"hljs-built_in\">assert!</span>(\r\n                <span class=\"hljs-title function_ invoke__\">eq</span>($left, $right),\r\n                <span class=\"hljs-string\">&quot;assertion failed: `(left == right)`\\nleft: `{:?}`,\\nright: `{:?}`&quot;</span>,\r\n                $left,\r\n                $right\r\n            )\r\n        };\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">zero_points</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vals</span>: [Point; <span class=\"hljs-number\">0</span>] = [];\r\n        assert_display!(<span class=\"hljs-title function_ invoke__\">closest_points</span>(&amp;vals), None::&lt;(Point, Point)&gt;);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_points</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vals</span> = [(<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">0</span>.)];\r\n        assert_display!(<span class=\"hljs-title function_ invoke__\">closest_points</span>(&amp;vals), None::&lt;(Point, Point)&gt;);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">two_points</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vals</span> = [(<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">0</span>.), (<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">1</span>.)];\r\n        assert_display!(<span class=\"hljs-title function_ invoke__\">closest_points</span>(&amp;vals), <span class=\"hljs-title function_ invoke__\">Some</span>(((<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">0</span>.), (<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">1</span>.))));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">three_points</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vals</span> = [(<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">0</span>.), (<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">1</span>.), (<span class=\"hljs-number\">3</span>., <span class=\"hljs-number\">3</span>.)];\r\n        assert_display!(<span class=\"hljs-title function_ invoke__\">closest_points</span>(&amp;vals), <span class=\"hljs-title function_ invoke__\">Some</span>(((<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">0</span>.), (<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">1</span>.))));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">list_1</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vals</span> = [\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">0</span>.),\r\n            (<span class=\"hljs-number\">2</span>., <span class=\"hljs-number\">1</span>.),\r\n            (<span class=\"hljs-number\">5</span>., <span class=\"hljs-number\">2</span>.),\r\n            (<span class=\"hljs-number\">2</span>., <span class=\"hljs-number\">3</span>.),\r\n            (<span class=\"hljs-number\">4</span>., <span class=\"hljs-number\">0</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">4</span>.),\r\n            (<span class=\"hljs-number\">5</span>., <span class=\"hljs-number\">6</span>.),\r\n            (<span class=\"hljs-number\">4</span>., <span class=\"hljs-number\">4</span>.),\r\n            (<span class=\"hljs-number\">7</span>., <span class=\"hljs-number\">3</span>.),\r\n            (-<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">2</span>.),\r\n            (<span class=\"hljs-number\">2</span>., <span class=\"hljs-number\">6</span>.),\r\n        ];\r\n        assert_display!(<span class=\"hljs-title function_ invoke__\">closest_points</span>(&amp;vals), <span class=\"hljs-title function_ invoke__\">Some</span>(((<span class=\"hljs-number\">2</span>., <span class=\"hljs-number\">1</span>.), (<span class=\"hljs-number\">2</span>., <span class=\"hljs-number\">3</span>.))));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">list_2</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vals</span> = [\r\n            (<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">3</span>.),\r\n            (<span class=\"hljs-number\">4</span>., <span class=\"hljs-number\">6</span>.),\r\n            (<span class=\"hljs-number\">8</span>., <span class=\"hljs-number\">8</span>.),\r\n            (<span class=\"hljs-number\">7</span>., <span class=\"hljs-number\">5</span>.),\r\n            (<span class=\"hljs-number\">5</span>., <span class=\"hljs-number\">3</span>.),\r\n            (<span class=\"hljs-number\">10</span>., <span class=\"hljs-number\">3</span>.),\r\n            (<span class=\"hljs-number\">7</span>., <span class=\"hljs-number\">1</span>.),\r\n            (<span class=\"hljs-number\">8</span>., <span class=\"hljs-number\">3</span>.),\r\n            (<span class=\"hljs-number\">4</span>., <span class=\"hljs-number\">9</span>.),\r\n            (<span class=\"hljs-number\">4</span>., <span class=\"hljs-number\">12</span>.),\r\n            (<span class=\"hljs-number\">4</span>., <span class=\"hljs-number\">15</span>.),\r\n            (<span class=\"hljs-number\">7</span>., <span class=\"hljs-number\">14</span>.),\r\n            (<span class=\"hljs-number\">8</span>., <span class=\"hljs-number\">12</span>.),\r\n            (<span class=\"hljs-number\">6</span>., <span class=\"hljs-number\">10</span>.),\r\n            (<span class=\"hljs-number\">4</span>., <span class=\"hljs-number\">14</span>.),\r\n            (<span class=\"hljs-number\">2</span>., <span class=\"hljs-number\">7</span>.),\r\n            (<span class=\"hljs-number\">3</span>., <span class=\"hljs-number\">8</span>.),\r\n            (<span class=\"hljs-number\">5</span>., <span class=\"hljs-number\">8</span>.),\r\n            (<span class=\"hljs-number\">6</span>., <span class=\"hljs-number\">7</span>.),\r\n            (<span class=\"hljs-number\">8</span>., <span class=\"hljs-number\">10</span>.),\r\n            (<span class=\"hljs-number\">6</span>., <span class=\"hljs-number\">12</span>.),\r\n        ];\r\n        assert_display!(<span class=\"hljs-title function_ invoke__\">closest_points</span>(&amp;vals), <span class=\"hljs-title function_ invoke__\">Some</span>(((<span class=\"hljs-number\">4</span>., <span class=\"hljs-number\">14</span>.), (<span class=\"hljs-number\">4</span>., <span class=\"hljs-number\">15</span>.))));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">vertical_points</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vals</span> = [\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">0</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">50</span>.),\r\n            (<span class=\"hljs-number\">0</span>., -<span class=\"hljs-number\">25</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">40</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">42</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">100</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">17</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">29</span>.),\r\n            (<span class=\"hljs-number\">0</span>., -<span class=\"hljs-number\">50</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">37</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">34</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">8</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">3</span>.),\r\n            (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">46</span>.),\r\n        ];\r\n        assert_display!(<span class=\"hljs-title function_ invoke__\">closest_points</span>(&amp;vals), <span class=\"hljs-title function_ invoke__\">Some</span>(((<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">40</span>.), (<span class=\"hljs-number\">0</span>., <span class=\"hljs-number\">42</span>.))));\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Pierre Gimalac",
      "email": "pierre.gimalac@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}