{
  "slug": "download-images-from-google-query",
  "name": "Download Images From Google Query",
  "categories": [
    "webprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "web_programming\\download_images_from_google_query.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/web_programming\\download_images_from_google_query.py",
      "code": "<span class=\"hljs-keyword\">import</span> json\r\n<span class=\"hljs-keyword\">import</span> os\r\n<span class=\"hljs-keyword\">import</span> re\r\n<span class=\"hljs-keyword\">import</span> sys\r\n<span class=\"hljs-keyword\">import</span> urllib.request\r\n\r\n<span class=\"hljs-keyword\">import</span> requests\r\n<span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup\r\n\r\nheaders = {\r\n    <span class=\"hljs-string\">&quot;User-Agent&quot;</span>: <span class=\"hljs-string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36&quot;</span>\r\n    <span class=\"hljs-string\">&quot; (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582&quot;</span>\r\n}\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">download_images_from_google_query</span>(<span class=\"hljs-params\">query: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;dhaka&quot;</span>, max_images: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">5</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Searches google using the provided query term and downloads the images in a folder.\r\n\r\n    Args:\r\n         query : The image search term to be provided by the user. Defaults to\r\n        &quot;dhaka&quot;.\r\n        image_numbers : [description]. Defaults to 5.\r\n\r\n    Returns:\r\n        The number of images successfully downloaded.\r\n\r\n    # Comment out slow (4.20s call) doctests\r\n    # &gt;&gt;&gt; download_images_from_google_query()\r\n    5\r\n    # &gt;&gt;&gt; download_images_from_google_query(&quot;potato&quot;)\r\n    5\r\n    &quot;&quot;&quot;</span>\r\n    max_images = <span class=\"hljs-built_in\">min</span>(max_images, <span class=\"hljs-number\">50</span>)  <span class=\"hljs-comment\"># Prevent abuse!</span>\r\n    params = {\r\n        <span class=\"hljs-string\">&quot;q&quot;</span>: query,\r\n        <span class=\"hljs-string\">&quot;tbm&quot;</span>: <span class=\"hljs-string\">&quot;isch&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;hl&quot;</span>: <span class=\"hljs-string\">&quot;en&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;ijn&quot;</span>: <span class=\"hljs-string\">&quot;0&quot;</span>,\r\n    }\r\n\r\n    html = requests.get(<span class=\"hljs-string\">&quot;https://www.google.com/search&quot;</span>, params=params, headers=headers)\r\n    soup = BeautifulSoup(html.text, <span class=\"hljs-string\">&quot;html.parser&quot;</span>)\r\n    matched_images_data = <span class=\"hljs-string\">&quot;&quot;</span>.join(\r\n        re.findall(<span class=\"hljs-string\">r&quot;AF_initDataCallback\\(([^&lt;]+)\\);&quot;</span>, <span class=\"hljs-built_in\">str</span>(soup.select(<span class=\"hljs-string\">&quot;script&quot;</span>)))\r\n    )\r\n\r\n    matched_images_data_fix = json.dumps(matched_images_data)\r\n    matched_images_data_json = json.loads(matched_images_data_fix)\r\n\r\n    matched_google_image_data = re.findall(\r\n        <span class=\"hljs-string\">r&quot;\\[\\&quot;GRID_STATE0\\&quot;,null,\\[\\[1,\\[0,\\&quot;.*?\\&quot;,(.*),\\&quot;All\\&quot;,&quot;</span>,\r\n        matched_images_data_json,\r\n    )\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> matched_google_image_data:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n\r\n    removed_matched_google_images_thumbnails = re.sub(\r\n        <span class=\"hljs-string\">r&quot;\\[\\&quot;(https\\:\\/\\/encrypted-tbn0\\.gstatic\\.com\\/images\\?.*?)\\&quot;,\\d+,\\d+\\]&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;&quot;</span>,\r\n        <span class=\"hljs-built_in\">str</span>(matched_google_image_data),\r\n    )\r\n\r\n    matched_google_full_resolution_images = re.findall(\r\n        <span class=\"hljs-string\">r&quot;(?:&#x27;|,),\\[\\&quot;(https:|http.*?)\\&quot;,\\d+,\\d+\\]&quot;</span>,\r\n        removed_matched_google_images_thumbnails,\r\n    )\r\n    <span class=\"hljs-keyword\">for</span> index, fixed_full_res_image <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(matched_google_full_resolution_images):\r\n        <span class=\"hljs-keyword\">if</span> index &gt;= max_images:\r\n            <span class=\"hljs-keyword\">return</span> index\r\n        original_size_img_not_fixed = <span class=\"hljs-built_in\">bytes</span>(fixed_full_res_image, <span class=\"hljs-string\">&quot;ascii&quot;</span>).decode(\r\n            <span class=\"hljs-string\">&quot;unicode-escape&quot;</span>\r\n        )\r\n        original_size_img = <span class=\"hljs-built_in\">bytes</span>(original_size_img_not_fixed, <span class=\"hljs-string\">&quot;ascii&quot;</span>).decode(\r\n            <span class=\"hljs-string\">&quot;unicode-escape&quot;</span>\r\n        )\r\n        opener = urllib.request.build_opener()\r\n        opener.addheaders = [\r\n            (\r\n                <span class=\"hljs-string\">&quot;User-Agent&quot;</span>,\r\n                <span class=\"hljs-string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36&quot;</span>\r\n                <span class=\"hljs-string\">&quot; (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582&quot;</span>,\r\n            )\r\n        ]\r\n        urllib.request.install_opener(opener)\r\n        path_name = <span class=\"hljs-string\">f&quot;query_<span class=\"hljs-subst\">{query.replace(<span class=\"hljs-string\">&#x27; &#x27;</span>, <span class=\"hljs-string\">&#x27;_&#x27;</span>)}</span>&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(path_name):\r\n            os.makedirs(path_name)\r\n        urllib.request.urlretrieve(\r\n            original_size_img, <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{path_name}</span>/original_size_img_<span class=\"hljs-subst\">{index}</span>.jpg&quot;</span>\r\n        )\r\n    <span class=\"hljs-keyword\">return</span> index\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        image_count = download_images_from_google_query(sys.argv[<span class=\"hljs-number\">1</span>])\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{image_count}</span> images were downloaded to disk.&quot;</span>)\r\n    <span class=\"hljs-keyword\">except</span> IndexError:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Please provide a search term.&quot;</span>)\r\n        <span class=\"hljs-keyword\">raise</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Appledora",
      "email": "nazia89@student.sust.edu",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}