{
  "slug": "iir-filter",
  "name": "Iir Filter",
  "categories": [
    "audiofilters"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "audio_filters\\iir_filter.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/audio_filters\\iir_filter.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IIRFilter</span>:\r\n    <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n    N-Order IIR filter\r\n    Assumes working with float samples normalized on [-1, 1]\r\n\r\n    ---\r\n\r\n    Implementation details:\r\n    Based on the 2nd-order function from\r\n     https://en.wikipedia.org/wiki/Digital_biquad_filter,\r\n    this generalized N-order function was made.\r\n\r\n    Using the following transfer function\r\n    H(z)=\\frac{b_{0}+b_{1}z^{-1}+b_{2}z^{-2}+...+b_{k}z^{-k}}{a_{0}+a_{1}z^{-1}+a_{2}z^{-2}+...+a_{k}z^{-k}}\r\n    we can rewrite this to\r\n    y[n]={\\frac{1}{a_{0}}}\\left(\\left(b_{0}x[n]+b_{1}x[n-1]+b_{2}x[n-2]+...+b_{k}x[n-k]\\right)-\\left(a_{1}y[n-1]+a_{2}y[n-2]+...+a_{k}y[n-k]\\right)\\right)\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, order: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.order = order\r\n\r\n        <span class=\"hljs-comment\"># a_{0} ... a_{k}</span>\r\n        self.a_coeffs = [<span class=\"hljs-number\">1.0</span>] + [<span class=\"hljs-number\">0.0</span>] * order\r\n        <span class=\"hljs-comment\"># b_{0} ... b_{k}</span>\r\n        self.b_coeffs = [<span class=\"hljs-number\">1.0</span>] + [<span class=\"hljs-number\">0.0</span>] * order\r\n\r\n        <span class=\"hljs-comment\"># x[n-1] ... x[n-k]</span>\r\n        self.input_history = [<span class=\"hljs-number\">0.0</span>] * self.order\r\n        <span class=\"hljs-comment\"># y[n-1] ... y[n-k]</span>\r\n        self.output_history = [<span class=\"hljs-number\">0.0</span>] * self.order\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_coefficients</span>(<span class=\"hljs-params\">self, a_coeffs: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>], b_coeffs: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Set the coefficients for the IIR filter. These should both be of size order + 1.\r\n        a_0 may be left out, and it will use 1.0 as default value.\r\n\r\n        This method works well with scipy&#x27;s filter design functions\r\n            &gt;&gt;&gt; # Make a 2nd-order 1000Hz butterworth lowpass filter\r\n            &gt;&gt;&gt; import scipy.signal\r\n            &gt;&gt;&gt; b_coeffs, a_coeffs = scipy.signal.butter(2, 1000,\r\n            ...                                          btype=&#x27;lowpass&#x27;,\r\n            ...                                          fs=48000)\r\n            &gt;&gt;&gt; filt = IIRFilter(2)\r\n            &gt;&gt;&gt; filt.set_coefficients(a_coeffs, b_coeffs)\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(a_coeffs) &lt; self.order:\r\n            a_coeffs = [<span class=\"hljs-number\">1.0</span>] + a_coeffs\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(a_coeffs) != self.order + <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(\r\n                <span class=\"hljs-string\">f&quot;Expected a_coeffs to have <span class=\"hljs-subst\">{self.order + <span class=\"hljs-number\">1</span>}</span> elements for <span class=\"hljs-subst\">{self.order}</span>&quot;</span>\r\n                <span class=\"hljs-string\">f&quot;-order filter, got <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(a_coeffs)}</span>&quot;</span>\r\n            )\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(b_coeffs) != self.order + <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(\r\n                <span class=\"hljs-string\">f&quot;Expected b_coeffs to have <span class=\"hljs-subst\">{self.order + <span class=\"hljs-number\">1</span>}</span> elements for <span class=\"hljs-subst\">{self.order}</span>&quot;</span>\r\n                <span class=\"hljs-string\">f&quot;-order filter, got <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(a_coeffs)}</span>&quot;</span>\r\n            )\r\n\r\n        self.a_coeffs = a_coeffs\r\n        self.b_coeffs = b_coeffs\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">process</span>(<span class=\"hljs-params\">self, sample: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Calculate y[n]\r\n\r\n        &gt;&gt;&gt; filt = IIRFilter(2)\r\n        &gt;&gt;&gt; filt.process(0)\r\n        0.0\r\n        &quot;&quot;&quot;</span>\r\n        result = <span class=\"hljs-number\">0.0</span>\r\n\r\n        <span class=\"hljs-comment\"># Start at index 1 and do index 0 at the end.</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, self.order + <span class=\"hljs-number\">1</span>):\r\n            result += (\r\n                self.b_coeffs[i] * self.input_history[i - <span class=\"hljs-number\">1</span>]\r\n                - self.a_coeffs[i] * self.output_history[i - <span class=\"hljs-number\">1</span>]\r\n            )\r\n\r\n        result = (result + self.b_coeffs[<span class=\"hljs-number\">0</span>] * sample) / self.a_coeffs[<span class=\"hljs-number\">0</span>]\r\n\r\n        self.input_history[<span class=\"hljs-number\">1</span>:] = self.input_history[:-<span class=\"hljs-number\">1</span>]\r\n        self.output_history[<span class=\"hljs-number\">1</span>:] = self.output_history[:-<span class=\"hljs-number\">1</span>]\r\n\r\n        self.input_history[<span class=\"hljs-number\">0</span>] = sample\r\n        self.output_history[<span class=\"hljs-number\">0</span>] = result\r\n\r\n        <span class=\"hljs-keyword\">return</span> result\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\audiofilters\\IIRFilter.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\audiofilters\\IIRFilter.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.audiofilters;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * N-Order IIR Filter Assumes inputs are normalized to [-1, 1]\r\n *\r\n * Based on the difference equation from\r\n * https://en.wikipedia.org/wiki/Infinite_impulse_response\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IIRFilter</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> order;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span>[] coeffsA;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span>[] coeffsB;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span>[] historyX;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span>[] historyY;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Construct an IIR Filter\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> order the filter&#x27;s order\r\n     * <span class=\"hljs-doctag\">@throws</span> IllegalArgumentException if order is zero or less\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">IIRFilter</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> order)</span> <span class=\"hljs-keyword\">throws</span> IllegalArgumentException {\r\n        <span class=\"hljs-keyword\">if</span> (order &lt; <span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;order must be greater than zero&quot;</span>);\r\n        }\r\n\r\n        <span class=\"hljs-built_in\">this</span>.order = order;\r\n        coeffsA = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[order + <span class=\"hljs-number\">1</span>];\r\n        coeffsB = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[order + <span class=\"hljs-number\">1</span>];\r\n\r\n        <span class=\"hljs-comment\">// Sane defaults</span>\r\n        coeffsA[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1.0</span>;\r\n        coeffsB[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1.0</span>;\r\n\r\n        historyX = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[order];\r\n        historyY = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[order];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Set coefficients\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> aCoeffs Denominator coefficients\r\n     * <span class=\"hljs-doctag\">@param</span> bCoeffs Numerator coefficients\r\n     * <span class=\"hljs-doctag\">@throws</span> IllegalArgumentException if {<span class=\"hljs-doctag\">@code</span> aCoeffs} or {<span class=\"hljs-doctag\">@code</span> bCoeffs} is\r\n     * not of size {<span class=\"hljs-doctag\">@code</span> order}, or if {<span class=\"hljs-doctag\">@code</span> aCoeffs[0]} is 0.0\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCoeffs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span>[] aCoeffs, <span class=\"hljs-type\">double</span>[] bCoeffs)</span> <span class=\"hljs-keyword\">throws</span> IllegalArgumentException {\r\n        <span class=\"hljs-keyword\">if</span> (aCoeffs.length != order) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;aCoeffs must be of size &quot;</span> + order + <span class=\"hljs-string\">&quot;, got &quot;</span> + aCoeffs.length);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (aCoeffs[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">0.0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;aCoeffs.get(0) must not be zero&quot;</span>);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (bCoeffs.length != order) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;bCoeffs must be of size &quot;</span> + order + <span class=\"hljs-string\">&quot;, got &quot;</span> + bCoeffs.length);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= order; i++) {\r\n            coeffsA[i] = aCoeffs[i];\r\n            coeffsB[i] = bCoeffs[i];\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Process a single sample\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> sample the sample to process\r\n     * <span class=\"hljs-doctag\">@return</span> the processed sample\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">process</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sample)</span> {\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0.0</span>;\r\n\r\n        <span class=\"hljs-comment\">// Process</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= order; i++) {\r\n            result += (coeffsB[i] * historyX[i - <span class=\"hljs-number\">1</span>] - coeffsA[i] * historyY[i - <span class=\"hljs-number\">1</span>]);\r\n        }\r\n        result = (result + coeffsB[<span class=\"hljs-number\">0</span>] * sample) / coeffsA[<span class=\"hljs-number\">0</span>];\r\n\r\n        <span class=\"hljs-comment\">// Feedback</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> order - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--) {\r\n            historyX[i] = historyX[i - <span class=\"hljs-number\">1</span>];\r\n            historyY[i] = historyY[i - <span class=\"hljs-number\">1</span>];\r\n        }\r\n\r\n        historyX[<span class=\"hljs-number\">0</span>] = sample;\r\n        historyY[<span class=\"hljs-number\">0</span>] = result;\r\n\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Martmists",
      "email": "mail@martmists.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}