{
  "slug": "largest-power",
  "name": "Largest Power",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\largest_power.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\largest_power.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Algorithm to find largest x such that p^x divides n! (factorial) using Legendre&#x27;s Formula.\r\n * @details Given an integer n and a prime number p, the task is to find the largest x such that \r\n * p^x (p raised to power x) divides n! (factorial). This will be done using Legendre&#x27;s formula:\r\n * x = [n/(p^1)] + [n/(p^2)] + [n/(p^3)] + \\ldots + 1\r\n * @see more on https://math.stackexchange.com/questions/141196/highest-power-of-a-prime-p-dividing-n\r\n * @author [uday6670](https://github.com/uday6670)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span> <span class=\"hljs-comment\">/// for std::cin and std::cout</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>  <span class=\"hljs-comment\">/// for assert</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace math\r\n * @brief Mathematical algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> math {\r\n\r\n\t<span class=\"hljs-comment\">/** \r\n\t * @brief Function to calculate largest power\r\n\t * @param n number\r\n         * @param p prime number\r\n\t * @returns largest power\r\n\t */</span> \r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">largestPower</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> n, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint16_t</span>&amp; p)</span>  \r\n    </span>{  \r\n        <span class=\"hljs-comment\">// Initialize result  </span>\r\n        <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>;  \r\n  \r\n        <span class=\"hljs-comment\">// Calculate result </span>\r\n        <span class=\"hljs-keyword\">while</span> (n)  \r\n        {  \r\n            n /= p;  \r\n            x += n;  \r\n        }  \r\n        <span class=\"hljs-keyword\">return</span> x;  \r\n    }\r\n\r\n}  <span class=\"hljs-comment\">// namespace math</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function for testing largestPower function.\r\n * test cases and assert statement.\r\n * @returns `void`\r\n*/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n\t<span class=\"hljs-type\">uint8_t</span> test_case_1 = math::<span class=\"hljs-built_in\">largestPower</span>(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>);\r\n\t<span class=\"hljs-built_in\">assert</span>(test_case_1==<span class=\"hljs-number\">3</span>);\r\n\tstd::cout&lt;&lt;<span class=\"hljs-string\">&quot;Test 1 Passed!&quot;</span>&lt;&lt;std::endl;\r\n\t\r\n\t<span class=\"hljs-type\">uint16_t</span> test_case_2 = math::<span class=\"hljs-built_in\">largestPower</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">3</span>);\r\n\t<span class=\"hljs-built_in\">assert</span>(test_case_2==<span class=\"hljs-number\">4</span>);\r\n\tstd::cout&lt;&lt;<span class=\"hljs-string\">&quot;Test 2 Passed!&quot;</span>&lt;&lt;std::endl;\r\n\t\r\n\t<span class=\"hljs-type\">uint32_t</span> test_case_3 = math::<span class=\"hljs-built_in\">largestPower</span>(<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">5</span>);\r\n\t<span class=\"hljs-built_in\">assert</span>(test_case_3==<span class=\"hljs-number\">6</span>);\r\n\tstd::cout&lt;&lt;<span class=\"hljs-string\">&quot;Test 3 Passed!&quot;</span>&lt;&lt;std::endl;\r\n\t\r\n\t<span class=\"hljs-type\">uint32_t</span> test_case_4 = math::<span class=\"hljs-built_in\">largestPower</span>(<span class=\"hljs-number\">27</span>,<span class=\"hljs-number\">2</span>);\r\n\t<span class=\"hljs-built_in\">assert</span>(test_case_4==<span class=\"hljs-number\">23</span>);\r\n\tstd::cout&lt;&lt;<span class=\"hljs-string\">&quot;Test 4 Passed!&quot;</span>&lt;&lt;std::endl;\r\n\t\r\n\t<span class=\"hljs-type\">uint16_t</span> test_case_5 = math::<span class=\"hljs-built_in\">largestPower</span>(<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">3</span>);\r\n\t<span class=\"hljs-built_in\">assert</span>(test_case_5==<span class=\"hljs-number\">2</span>);\r\n\tstd::cout&lt;&lt;<span class=\"hljs-string\">&quot;Test 5 Passed!&quot;</span>&lt;&lt;std::endl;\r\n} \r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> \r\n</span>{ \r\n    <span class=\"hljs-built_in\">test</span>(); <span class=\"hljs-comment\">// execute the tests</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n} \r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}