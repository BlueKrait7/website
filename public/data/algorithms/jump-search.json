{
  "slug": "jump-search",
  "name": "Jump Search",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "searches\\jump_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/searches\\jump_search.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nPure Python implementation of the jump search algorithm.\r\nThis algorithm iterates through a sorted collection with a step of n^(1/2),\r\nuntil the element compared is bigger than the one searched.\r\nIt will then perform a linear search until it matches the wanted number.\r\nIf not found, it returns -1.\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">jump_search</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>, x: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Pure Python implementation of the jump search algorithm.\r\n    Examples:\r\n    &gt;&gt;&gt; jump_search([0, 1, 2, 3, 4, 5], 3)\r\n    3\r\n    &gt;&gt;&gt; jump_search([-5, -2, -1], -1)\r\n    2\r\n    &gt;&gt;&gt; jump_search([0, 5, 10, 20], 8)\r\n    -1\r\n    &gt;&gt;&gt; jump_search([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 55)\r\n    10\r\n    &quot;&quot;&quot;</span>\r\n\r\n    n = <span class=\"hljs-built_in\">len</span>(arr)\r\n    step = <span class=\"hljs-built_in\">int</span>(math.floor(math.sqrt(n)))\r\n    prev = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> arr[<span class=\"hljs-built_in\">min</span>(step, n) - <span class=\"hljs-number\">1</span>] &lt; x:\r\n        prev = step\r\n        step += <span class=\"hljs-built_in\">int</span>(math.floor(math.sqrt(n)))\r\n        <span class=\"hljs-keyword\">if</span> prev &gt;= n:\r\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> arr[prev] &lt; x:\r\n        prev = prev + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">if</span> prev == <span class=\"hljs-built_in\">min</span>(step, n):\r\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">if</span> arr[prev] == x:\r\n        <span class=\"hljs-keyword\">return</span> prev\r\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    arr = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n    x = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the number to be searched:\\n&quot;</span>))\r\n    res = jump_search(arr, x)\r\n    <span class=\"hljs-keyword\">if</span> res == -<span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Number not found!&quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Number <span class=\"hljs-subst\">{x}</span> is at index <span class=\"hljs-subst\">{res}</span>&quot;</span>)\r\n"
    },
    "javascript": {
      "dir": "Search\\JumpSearch.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Search\\JumpSearch.js",
      "code": "<span class=\"hljs-comment\">/* The Jump Search algorithm allows to combine a linear search with a speed optimization.\r\n  * This means that instead of going 1 by 1, we will increase the step of √n and increase that\r\n  * step of √n which make the step getting bigger and bigger.\r\n  * The asymptotic analysis of Jump Search is o(√n). Like the binary search, it needs to be sorted.\r\n  * The advantage against binary search is that Jump Search traversed back only once.\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">jumpSearch</span> = (<span class=\"hljs-params\">arr, value</span>) =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> length = arr.<span class=\"hljs-property\">length</span>\r\n  <span class=\"hljs-keyword\">let</span> step = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(length))\r\n  <span class=\"hljs-keyword\">let</span> lowerBound = <span class=\"hljs-number\">0</span>\r\n  <span class=\"hljs-keyword\">while</span> (arr[<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(step, length) - <span class=\"hljs-number\">1</span>] &lt; value) {\r\n    lowerBound = step\r\n    step += step\r\n    <span class=\"hljs-keyword\">if</span> (lowerBound &gt;= length) {\r\n      <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">const</span> upperBound = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(step, length)\r\n  <span class=\"hljs-keyword\">while</span> (arr[lowerBound] &lt; value) {\r\n    lowerBound++\r\n    <span class=\"hljs-keyword\">if</span> (lowerBound === upperBound) {\r\n      <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">if</span> (arr[lowerBound] === value) {\r\n    <span class=\"hljs-keyword\">return</span> lowerBound\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n}\r\n<span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">68</span>, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">90</span>]\r\n<span class=\"hljs-title function_\">jumpSearch</span>(arr, <span class=\"hljs-number\">4</span>)\r\n<span class=\"hljs-title function_\">jumpSearch</span>(arr, <span class=\"hljs-number\">34</span>)\r\n<span class=\"hljs-title function_\">jumpSearch</span>(arr, <span class=\"hljs-number\">77</span>)\r\n"
    },
    "c-plus-plus": {
      "dir": "search\\jump_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search\\jump_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\brief C++ program to implement [Jump\r\n * Search](https://en.wikipedia.org/wiki/Jump_search)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** jump search implementation\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">jumpSearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-comment\">// Finding block size to be jumped</span>\r\n    <span class=\"hljs-type\">int</span> step = std::<span class=\"hljs-built_in\">sqrt</span>(n);\r\n\r\n    <span class=\"hljs-comment\">// Finding the block where element is</span>\r\n    <span class=\"hljs-comment\">// present (if it is present)</span>\r\n    <span class=\"hljs-type\">int</span> prev = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> (arr[std::<span class=\"hljs-built_in\">min</span>(step, n) - <span class=\"hljs-number\">1</span>] &lt; x) {\r\n        prev = step;\r\n        step += std::<span class=\"hljs-built_in\">sqrt</span>(n);\r\n        <span class=\"hljs-keyword\">if</span> (prev &gt;= n)\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Doing a linear search for x in block</span>\r\n    <span class=\"hljs-comment\">// beginning with prev.</span>\r\n    <span class=\"hljs-keyword\">while</span> (arr[prev] &lt; x) {\r\n        prev++;\r\n\r\n        <span class=\"hljs-comment\">// If we reached next block or end of</span>\r\n        <span class=\"hljs-comment\">// array, element is not present.</span>\r\n        <span class=\"hljs-keyword\">if</span> (prev == std::<span class=\"hljs-built_in\">min</span>(step, n))\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n    }\r\n    <span class=\"hljs-comment\">// If element is found</span>\r\n    <span class=\"hljs-keyword\">if</span> (arr[prev] == x)\r\n        <span class=\"hljs-keyword\">return</span> prev;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Driver program to test function</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">144</span>, <span class=\"hljs-number\">233</span>, <span class=\"hljs-number\">377</span>, <span class=\"hljs-number\">610</span>};\r\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">55</span>;\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\r\n\r\n    <span class=\"hljs-comment\">// Find the index of &#x27;x&#x27; using Jump Search</span>\r\n    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-built_in\">jumpSearch</span>(arr, x, n);\r\n\r\n    <span class=\"hljs-comment\">// Print the index where &#x27;x&#x27; is located</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nNumber &quot;</span> &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot; is at index &quot;</span> &lt;&lt; index;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\searches\\JumpSearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\searches\\JumpSearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.searches;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.devutils.searches.SearchAlgorithm;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JumpSearch</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SearchAlgorithm</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">JumpSearch</span> <span class=\"hljs-variable\">jumpSearch</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JumpSearch</span>();\r\n        Integer[] array = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>};\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\r\n            <span class=\"hljs-keyword\">assert</span> jumpSearch.find(array, i) == i;\r\n        }\r\n        <span class=\"hljs-keyword\">assert</span> jumpSearch.find(array, -<span class=\"hljs-number\">1</span>) == -<span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">assert</span> jumpSearch.find(array, <span class=\"hljs-number\">11</span>) == -<span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Jump Search algorithm implements\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> array the array contains elements\r\n     * <span class=\"hljs-doctag\">@param</span> key to be searched\r\n     * <span class=\"hljs-doctag\">@return</span> index of {<span class=\"hljs-doctag\">@code</span> key} if found, otherwise &lt;tt&gt;-1&lt;/tt&gt;\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T[] array, T key)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> array.length;\r\n        <span class=\"hljs-comment\">/* length of array */</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">blockSize</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) Math.sqrt(length);\r\n        <span class=\"hljs-comment\">/* block size to be jumped */</span>\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">limit</span> <span class=\"hljs-operator\">=</span> blockSize;\r\n        <span class=\"hljs-keyword\">while</span> (key.compareTo(array[limit]) &gt; <span class=\"hljs-number\">0</span> &amp;&amp; limit &lt; array.length - <span class=\"hljs-number\">1</span>) {\r\n            limit = Math.min(limit + blockSize, array.length - <span class=\"hljs-number\">1</span>);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> limit - blockSize; i &lt;= limit; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (array[i] == key) {\r\n                <span class=\"hljs-comment\">/* execute linear search */</span>\r\n                <span class=\"hljs-keyword\">return</span> i;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-comment\">/* not found */</span>\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "searching\\jump_search.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching\\jump_search.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file jump_search.c\r\n * @brief Implementation of [jump\r\n * search](https://en.wikipedia.org/wiki/Jump_search) algorithm.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Macro to return the minimum of two values\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> min(X, Y) ((X) &lt; (Y) ? (X) : (Y))</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Implement Jump-search algorithm\r\n *\r\n * @param [in] arr Array to search within\r\n * @param x value to search for\r\n * @param n length of array\r\n * @return index where the value was found\r\n * @return -1 if value not found\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">jump_search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">size_t</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> step = <span class=\"hljs-built_in\">floor</span>(<span class=\"hljs-built_in\">sqrt</span>(n));\r\n    <span class=\"hljs-type\">int</span> prev = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">while</span> (arr[min(step, n) - <span class=\"hljs-number\">1</span>] &lt; x)\r\n    {\r\n        prev = step;\r\n        step += <span class=\"hljs-built_in\">floor</span>(<span class=\"hljs-built_in\">sqrt</span>(n));\r\n        <span class=\"hljs-keyword\">if</span> (prev &gt;= n)\r\n        {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">while</span> (arr[prev] &lt; x)\r\n    {\r\n        prev = prev + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">if</span> (prev == min(step, n))\r\n        {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (arr[prev] == x)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> prev;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test implementation of the function\r\n *\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">144</span>, <span class=\"hljs-number\">233</span>, <span class=\"hljs-number\">377</span>, <span class=\"hljs-number\">610</span>};\r\n    <span class=\"hljs-type\">size_t</span> n = <span class=\"hljs-keyword\">sizeof</span>(arr) / <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>);\r\n\r\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">55</span>;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test 1.... &quot;</span>);\r\n    <span class=\"hljs-type\">int</span> index = jump_search(arr, x, n);\r\n    assert(index == <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed\\nTest 2.... &quot;</span>);\r\n    x = <span class=\"hljs-number\">56</span>;\r\n    index = jump_search(arr, x, n);\r\n    assert(index == <span class=\"hljs-number\">-1</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed\\nTest 3.... &quot;</span>);\r\n    x = <span class=\"hljs-number\">13</span>;\r\n    index = jump_search(arr, x, n);\r\n    assert(index == <span class=\"hljs-number\">7</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    test();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "search\\jump_Search.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/search\\jump_Search.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span> <span class=\"hljs-keyword\">show</span> sqrt;\r\n\r\nmin(X, Y) {\r\n  <span class=\"hljs-keyword\">if</span> (X &lt; Y) {\r\n    <span class=\"hljs-keyword\">return</span> X;\r\n  } <span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-keyword\">return</span> Y;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-built_in\">int</span> jump_search(<span class=\"hljs-built_in\">List</span> a, <span class=\"hljs-built_in\">int</span> x) {\r\n  <span class=\"hljs-built_in\">int</span> n = a.length;\r\n  <span class=\"hljs-built_in\">int</span> step = sqrt(n).floor().toInt();\r\n  <span class=\"hljs-built_in\">int</span> prev = <span class=\"hljs-number\">0</span>;\r\n  <span class=\"hljs-keyword\">while</span> (a[min(step, n) - <span class=\"hljs-number\">1</span>] &lt; x) {\r\n    prev = step;\r\n    step += sqrt(n).floor().toInt();\r\n    <span class=\"hljs-keyword\">if</span> (prev &gt;= n) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">while</span> (a[prev] &lt; x) {\r\n    prev = prev + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">if</span> (prev == min(step, n)) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">if</span> (a[prev] == x) {\r\n    <span class=\"hljs-keyword\">return</span> prev;\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-keyword\">var</span> list = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">89</span>];\r\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">55</span>;\r\n  <span class=\"hljs-keyword\">var</span> index = jump_search(list, x);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;list:&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(list);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Number &#x27;</span> + x.toString() + <span class=\"hljs-string\">&#x27; is at index &#x27;</span> + index.toString());\r\n}\r\n"
    },
    "ruby": {
      "dir": "searches\\jump_search.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/searches\\jump_search.rb",
      "code": "<span class=\"hljs-comment\"># Works only on sorted arrays.</span>\r\n<span class=\"hljs-comment\"># Finding element by creating step in array and jump ahead by fixed steps and finding element using linear search inside that steped array.</span>\r\n<span class=\"hljs-comment\"># Time Complexity: O(√n)</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">jump_search</span><span class=\"hljs-params\">(arr, x)</span></span>\r\n  n = arr.length\r\n\r\n  <span class=\"hljs-comment\"># Finding block size to be jumped</span>\r\n  step = Math.sqrt(n)\r\n  prev = <span class=\"hljs-number\">0</span>\r\n\r\n  <span class=\"hljs-comment\"># Finding the block where element is</span>\r\n  <span class=\"hljs-comment\"># present (if it is present)</span>\r\n  <span class=\"hljs-keyword\">while</span> arr[[step, n].min - <span class=\"hljs-number\">1</span>] &lt; x\r\n    prev = step\r\n    step += Math.sqrt(n)\r\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> prev &gt;= n\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># Doing a linear search for x in block</span>\r\n  <span class=\"hljs-comment\"># beginning with prev.</span>\r\n  <span class=\"hljs-keyword\">while</span> arr[prev] &lt; x\r\n    prev += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-comment\"># If we reached next block or end of</span>\r\n    <span class=\"hljs-comment\"># array, element is not present.</span>\r\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> prev == [step, n].min\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># If element is found</span>\r\n  <span class=\"hljs-keyword\">return</span> prev <span class=\"hljs-keyword\">if</span> arr[prev] == x\r\n\r\n  -<span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs <span class=\"hljs-string\">&#x27;Enter a sorted space-separated list:&#x27;</span>\r\narr = gets.chomp.split(<span class=\"hljs-string\">&#x27; &#x27;</span>).map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\r\nputs <span class=\"hljs-string\">&#x27;Enter the value to be searched:&#x27;</span>\r\nvalue = gets.chomp.to_i\r\n\r\nindex = jump_search(arr, value)\r\n\r\nputs index == -<span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">&#x27;Element not found&#x27;</span> : <span class=\"hljs-string\">&quot;Number <span class=\"hljs-subst\">#{value}</span> is at <span class=\"hljs-subst\">#{index}</span>&quot;</span>\r\n"
    },
    "scala": {
      "dir": "src\\main\\scala\\Search\\JumpSearch.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src\\main\\scala\\Search\\JumpSearch.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Search</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> scala.math.{floor, min, sqrt}\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">JumpSearch</span> </span>{\r\n\r\n  <span class=\"hljs-comment\">/** An implementation of the jump search algorithm in scala used to search a sorted list\r\n    * @param arr\r\n    *   - a list of integers\r\n    * @param elem\r\n    *   - an integer to search for in @arr\r\n    * @return\r\n    *   - index of the @elem otherwise -1\r\n    */</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">jumpSearch</span></span>(arr: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Int</span>], elem: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Int</span> = {\r\n\r\n    <span class=\"hljs-keyword\">val</span> len    = arr.size\r\n    <span class=\"hljs-keyword\">var</span> a: <span class=\"hljs-type\">Int</span> = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">var</span> b: <span class=\"hljs-type\">Int</span> = floor(sqrt(len.toDouble)).toInt\r\n\r\n    <span class=\"hljs-keyword\">while</span> (arr(min(b, len) - <span class=\"hljs-number\">1</span>) &lt; elem) {\r\n      a = b\r\n      b = b + floor(sqrt(len.toDouble)).toInt\r\n      <span class=\"hljs-keyword\">if</span> (a &gt;= len) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\r\n      }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">while</span> (arr(a) &lt; elem) {\r\n      a = a + <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-keyword\">if</span> (a == min(b, len)) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\r\n      }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> (arr(a) == elem) {\r\n      a\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-number\">-1</span>\r\n    }\r\n  }\r\n\r\n}\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\Searching\\jump_search.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\Searching\\jump_search.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">found_at</span> = <span class=\"hljs-title\">jump_search</span><span class=\"hljs-params\">(input_array, search_key)</span></span>\r\n  <span class=\"hljs-comment\">% Contributed by - Harshit Pant, harshitpant83@gmail.com</span>\r\n  <span class=\"hljs-comment\">% Reference - https://en.wikipedia.org/wiki/Jump_search</span>\r\n  \r\n  <span class=\"hljs-comment\">% input_array - Holds the array in which the &#x27;search_key&#x27; is to be searched.</span>\r\n  <span class=\"hljs-comment\">%               It should be sorted in ascending order.</span>\r\n  <span class=\"hljs-comment\">%               It can contain -ve numbers as well as non-integers.</span>\r\n  <span class=\"hljs-comment\">% search_key  - The value to be searched in the &#x27;input_array&#x27;.</span>\r\n  <span class=\"hljs-comment\">% found_at    - The index at which &#x27;search_key&#x27; is found in &#x27;input_array&#x27;.</span>\r\n  <span class=\"hljs-comment\">%               -1 is returned if &#x27;search_key&#x27; is not found in &#x27;input_array&#x27;.</span>\r\n\r\n  array_length = <span class=\"hljs-built_in\">length</span>(input_array);\r\n  found_at = <span class=\"hljs-number\">-1</span>; \r\n  \r\n  <span class=\"hljs-comment\">% Finding the optimum block_size to be jumped.</span>\r\n  block_size = <span class=\"hljs-built_in\">sqrt</span>(array_length); \r\n  block_size = <span class=\"hljs-built_in\">round</span>(block_size); \r\n  \r\n  <span class=\"hljs-comment\">% low and high denote the lower </span>\r\n  <span class=\"hljs-comment\">% and upper bound of a certain block.</span>\r\n  low = <span class=\"hljs-number\">1</span>;\r\n  high = <span class=\"hljs-number\">1</span> + block_size;\r\n\r\n  <span class=\"hljs-comment\">% Finding the block where the &#x27;search_key&#x27; is present</span>\r\n  <span class=\"hljs-comment\">% if low &gt;= array_length, the &#x27;search_key&#x27; is not found </span>\r\n  <span class=\"hljs-comment\">% in the &#x27;input_array&#x27;, thus, -1 is returned.</span>\r\n  <span class=\"hljs-keyword\">while</span> input_array(<span class=\"hljs-built_in\">min</span>(high, array_length)) &lt; search_key\r\n      low = high;\r\n      high = high + block_size;\r\n      <span class=\"hljs-keyword\">if</span> low &gt;= array_length\r\n          <span class=\"hljs-keyword\">return</span>;\r\n      endif;\r\n  endwhile;\r\n\r\n  <span class=\"hljs-comment\">% Now that the required block is found,</span>\r\n  <span class=\"hljs-comment\">% running a linear search within the block </span>\r\n  <span class=\"hljs-comment\">% to find the &#x27;search_key&#x27;</span>\r\n  <span class=\"hljs-keyword\">while</span> input_array(low) &lt; search_key\r\n      low = low + <span class=\"hljs-number\">1</span>;\r\n      <span class=\"hljs-keyword\">if</span> low &gt; <span class=\"hljs-built_in\">min</span>(high, array_length)\r\n          <span class=\"hljs-keyword\">return</span>;\r\n      endif;\r\n  endwhile;\r\n\r\n  <span class=\"hljs-comment\">% Checks if the &#x27;search_key&#x27; was found within</span>\r\n  <span class=\"hljs-comment\">% the block. If found, the index is returned.</span>\r\n  <span class=\"hljs-comment\">% If not -1 is returned.</span>\r\n  <span class=\"hljs-keyword\">if</span> input_array(low) == search_key\r\n      found_at = low;\r\n  endif;\r\n\r\nendfunction;\r\n\r\n<span class=\"hljs-comment\">% TEST: </span>\r\n<span class=\"hljs-comment\">% jump_search([-11.1, -3.3, -1.3, 0.1, 1.5, 3.5, 3.9,...</span>\r\n<span class=\"hljs-comment\">% 5.5, 7.5, 9.6, 13.7, 21.3, 35.9], 7.5) == 9</span>\r\n"
    },
    "julia": {
      "dir": "src\\searches\\jump_search.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\searches\\jump_search.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n# Jump Search(sorted array)\r\nJump Search is a searching algorithm for sorted arrays. The basic idea is to check fewer elements (than linear search) by jumping ahead by fixed steps or skipping some elements in place of searching all elements.\r\nFor example, suppose we have an array arr[] of size n and block (to be jumped) size m. Then we search at the indexes arr[0], arr[m], arr[2m]…..arr[km] and so on. Once we find the interval (arr[km] &lt; x &lt; arr[(k+1)m]), we perform a linear search operation from the index km to find the element x.\r\nLet’s consider the following array: (0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610). Length of the array is 16. Jump search will find the value of 55 with the following steps assuming that the block size to be jumped is 4.\r\n- STEP 1: Jump from index 0 to index 4;\r\n- STEP 2: Jump from index 4 to index 8;\r\n- STEP 3: Jump from index 8 to index 12;\r\n- STEP 4: Since the element at index 12 is greater than 55 we will jump back a step to come to index 8.\r\n- STEP 5: Perform linear search from index 8 to get the element 55.\r\n## What is the optimal block size to be skipped?\r\nIn the worst case, we have to do n/m jumps and if the last checked value is greater than the element to be searched for, we perform m-1 comparisons more for linear search. Therefore the total number of comparisons in the worst case will be ((n/m) + m-1). The value of the function ((n/m) + m-1) will be minimum when m = √n. Therefore, the best step size is m = √n.\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    jump_search(arr::AbstractArray{T,1}, x::T, jump::T = Int(ceil(sqrt(n)))) where {T &lt;: Real}\r\nJump Search in 1-D array\r\nTime Complexity :  O(√ n)\r\nTime complexity of Jump Search is between Linear Search ( ( O(n) ) and Binary Search ( O (Log n) )\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> jump_search(arr::<span class=\"hljs-built_in\">AbstractArray</span>{T,<span class=\"hljs-number\">1</span>}, x::T, jump::T = <span class=\"hljs-built_in\">Int</span>(ceil(sqrt(n)))) <span class=\"hljs-keyword\">where</span> {T &lt;: <span class=\"hljs-built_in\">Real</span>}\r\n\tn = size(arr)[<span class=\"hljs-number\">1</span>];\r\n\tstart = <span class=\"hljs-number\">1</span>\r\n\tfinal = jump\r\n\t<span class=\"hljs-keyword\">while</span>( arr[final] &lt;= x &amp;&amp; final &lt; n)\r\n\t\tstart = final\r\n\t \tfinal = final + jump\r\n\t\t<span class=\"hljs-keyword\">if</span>( final &gt; n -<span class=\"hljs-number\">1</span>)\r\n\t\t   final = n\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> start:final\r\n\t\t<span class=\"hljs-keyword\">if</span>(arr[i] == x)\r\n\t\t\t<span class=\"hljs-keyword\">return</span> i\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Search/JumpSearcher.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Search\\JumpSearcher.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Search</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Jump Search checks fewer elements by jumping ahead by fixed steps.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The optimal steps to jump is √n, where n refers to the number of elements in the array.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Time Complexity: O(√n)</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Note: The array has to be sorted beforehand.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of the array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">JumpSearcher</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">IComparable</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Find the index of the item searched for in the array.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sortedArray&quot;&gt;</span>Sorted array to be search in. Cannot be null.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;searchItem&quot;&gt;</span>Item to be search for. Cannot be null.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>If item is found, return index. If array is empty or item not found, return -1.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindIndex</span>(<span class=\"hljs-params\">T[] sortedArray, T searchItem</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (sortedArray <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentNullException(<span class=\"hljs-string\">&quot;sortedArray&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (searchItem <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentNullException(<span class=\"hljs-string\">&quot;searchItem&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-built_in\">int</span> jumpStep = (<span class=\"hljs-built_in\">int</span>)Math.Floor(Math.Sqrt(sortedArray.Length));\r\n            <span class=\"hljs-built_in\">int</span> currentIndex = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-built_in\">int</span> nextIndex = jumpStep;\r\n\r\n            <span class=\"hljs-keyword\">if</span> (sortedArray.Length != <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">while</span> (sortedArray[nextIndex - <span class=\"hljs-number\">1</span>].CompareTo(searchItem) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    currentIndex = nextIndex;\r\n                    nextIndex += jumpStep;\r\n\r\n                    <span class=\"hljs-keyword\">if</span> (nextIndex &gt;= sortedArray.Length)\r\n                    {\r\n                        nextIndex = sortedArray.Length - <span class=\"hljs-number\">1</span>;\r\n                        <span class=\"hljs-keyword\">break</span>;\r\n                    }\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = currentIndex; i &lt;= nextIndex; i++)\r\n                {\r\n                    <span class=\"hljs-keyword\">if</span> (sortedArray[i].CompareTo(searchItem) == <span class=\"hljs-number\">0</span>)\r\n                    {\r\n                        <span class=\"hljs-keyword\">return</span> i;\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Alfredo Torre",
      "email": "alfredotorre@gmail.com",
      "commits": 1
    },
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 1
    },
    {
      "name": "Pratham Sharma",
      "email": "prathamofficial92@gmail.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "koseokkyu",
      "email": "dighrh@naver.com",
      "commits": 1
    },
    {
      "name": "mavroian",
      "email": "mavflorin@gmail.com",
      "commits": 1
    },
    {
      "name": "Sai Eashwar K S",
      "email": "saieashwar.ks@gmail.com",
      "commits": 1
    },
    {
      "name": "nirmay0503",
      "email": "19ucs061@lnmiit.ac.in",
      "commits": 1
    },
    {
      "name": "Guillaume Rochedix",
      "email": "33205665+BriseBalloches@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "douly",
      "email": "douliyou@live.cn",
      "commits": 1
    },
    {
      "name": "Deepak345",
      "email": "senapati.dipak97@gmail.com",
      "commits": 1
    },
    {
      "name": "Tim",
      "email": "timcreedon15@gmail.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 4
    },
    {
      "name": "harsh-4",
      "email": "harshit.bias@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}