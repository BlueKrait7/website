{
  "slug": "binary-gcd",
  "name": "Binary GCD",
  "categories": [
    "numeric",
    "greatestcommondivisor"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Numeric/GreatestCommonDivisor/BinaryGreatestCommonDivisorFinder.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Numeric\\GreatestCommonDivisor\\BinaryGreatestCommonDivisorFinder.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric.GreatestCommonDivisor</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds greatest common divisor for numbers u and v</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     using binary algorithm.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Wiki: https://en.wikipedia.org/wiki/Binary_GCD_algorithm.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinaryGreatestCommonDivisorFinder</span> : <span class=\"hljs-title\">IGreatestCommonDivisorFinder</span>\r\n    {\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindGcd</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> u, <span class=\"hljs-built_in\">int</span> v</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// GCD(0, 0) = 0</span>\r\n            <span class=\"hljs-keyword\">if</span> (u == <span class=\"hljs-number\">0</span> &amp;&amp; v == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// GCD(0, v) = v; GCD(u, 0) = u</span>\r\n            <span class=\"hljs-keyword\">if</span> (u == <span class=\"hljs-number\">0</span> || v == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> u + v;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// GCD(-a, -b) = GCD(-a, b) = GCD(a, -b) = GCD(a, b)</span>\r\n            u = Math.Sign(u) * u;\r\n            v = Math.Sign(v) * v;\r\n\r\n            <span class=\"hljs-comment\">// Let shift := lg K, where K is the greatest power of 2 dividing both u and v</span>\r\n            <span class=\"hljs-keyword\">var</span> shift = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">while</span> (((u | v) &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                u &gt;&gt;= <span class=\"hljs-number\">1</span>;\r\n                v &gt;&gt;= <span class=\"hljs-number\">1</span>;\r\n                shift++;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">while</span> ((u &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                u &gt;&gt;= <span class=\"hljs-number\">1</span>;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// From here on, u is always odd</span>\r\n            <span class=\"hljs-keyword\">do</span>\r\n            {\r\n                <span class=\"hljs-comment\">// Remove all factors of 2 in v as they are not common</span>\r\n                <span class=\"hljs-comment\">// v is not zero, so while will terminate</span>\r\n                <span class=\"hljs-keyword\">while</span> ((v &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    v &gt;&gt;= <span class=\"hljs-number\">1</span>;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// Now u and v are both odd. Swap if necessary so u &lt;= v,</span>\r\n                <span class=\"hljs-keyword\">if</span> (u &gt; v)\r\n                {\r\n                    <span class=\"hljs-keyword\">var</span> t = v;\r\n                    v = u;\r\n                    u = t;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// Here v &gt;= u and v - u is even</span>\r\n                v -= u;\r\n            }\r\n            <span class=\"hljs-keyword\">while</span> (v != <span class=\"hljs-number\">0</span>);\r\n\r\n            <span class=\"hljs-comment\">// Restore common factors of 2</span>\r\n            <span class=\"hljs-keyword\">return</span> u &lt;&lt; shift;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Brian Janssen",
      "email": "brian-janssen@hotmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}