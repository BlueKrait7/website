{
  "slug": "n-choose-r",
  "name": "N Choose R",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\n_choose_r.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\n_choose_r.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Combinations](https://en.wikipedia.org/wiki/Combination) n choose r\r\n * function implementation\r\n * @details\r\n * A very basic and efficient method of calculating\r\n * choosing r from n different choices.\r\n * \\f$ \\binom{n}{r} = \\frac{n!}{r! (n-r)!} \\f$\r\n *\r\n * @author [Tajmeet Singh](https://github.com/tjgurwara99)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace math\r\n * @brief Mathematical algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> math {\r\n<span class=\"hljs-comment\">/**\r\n * @brief This is the function implementation of \\f$ \\binom{n}{r} \\f$\r\n * @details\r\n * We are calculating the ans with iterations\r\n * instead of calculating three different factorials.\r\n * Also, we are using the fact that\r\n * \\f$ \\frac{n!}{r! (n-r)!} = \\frac{(n - r + 1) \\times \\cdots \\times n}{1 \\times\r\n * \\cdots \\times r} \\f$\r\n * @tparam T Only for integer types such as long, int_64 etc\r\n * @param n \\f$ n \\f$ in \\f$ \\binom{n}{r} \\f$\r\n * @param r \\f$ r \\f$ in \\f$ \\binom{n}{r} \\f$\r\n * @returns ans \\f$ \\binom{n}{r} \\f$\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">T</span>&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">n_choose_r</span><span class=\"hljs-params\">(T n, T r)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (r &gt; n / <span class=\"hljs-number\">2</span>) {\r\n        r = n - r;  <span class=\"hljs-comment\">// Because of the fact that  nCr(n, r) == nCr(n, n - r)</span>\r\n    }\r\n    T ans = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= r; i++) {\r\n        ans *= n - r + i;\r\n        ans /= i;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> ans;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace math</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// First test on 5 choose 2</span>\r\n    <span class=\"hljs-type\">uint8_t</span> t = math::<span class=\"hljs-built_in\">n_choose_r</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;10 is the answer but function says otherwise.\\n&quot;</span>, t == <span class=\"hljs-number\">10</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;First test passes.&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Second test on 5 choose 3</span>\r\n    t = math::<span class=\"hljs-built_in\">n_choose_r</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(\r\n        ((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;10 is the answer but the function says otherwise.\\n&quot;</span>, t == <span class=\"hljs-number\">10</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Second test passes.&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Third test on 3 choose 2</span>\r\n    t = math::<span class=\"hljs-built_in\">n_choose_r</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(\r\n        ((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;3 is the answer but the function says otherwise.\\n&quot;</span>, t == <span class=\"hljs-number\">3</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Third test passes.&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Fourth test on 10 choose 4</span>\r\n    t = math::<span class=\"hljs-built_in\">n_choose_r</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;210 is the answer but the function says otherwise.\\n&quot;</span>,\r\n            t == <span class=\"hljs-number\">210</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Fourth test passes.&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @param argc commandline argument count (ignored)\r\n * @param argv commandline array of arguments (ignored)\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// executing tests</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}