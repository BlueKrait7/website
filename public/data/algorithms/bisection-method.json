{
  "slug": "bisection-method",
  "name": "Bisection Method",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths\\test\\BisectionMethod.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\BisectionMethod.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { findRoot } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../BisectionMethod&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Equation f(x) = x^2 - 3*x + 2 = 0, has root x = 1 in [a, b] = [0, 1.5]&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> root = <span class=\"hljs-title function_\">findRoot</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1.5</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">pow</span>(x, <span class=\"hljs-number\">2</span>) - <span class=\"hljs-number\">3</span> * x + <span class=\"hljs-number\">2</span> }, <span class=\"hljs-number\">8</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(root).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0.9990234375</span>)\r\n})\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Equation f(x) = ln(x) + sqrt(x) + Ï€*x^2 = 0, has root x = 0.36247037 in [a, b] = [0, 10]&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> root = <span class=\"hljs-title function_\">findRoot</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">log</span>(x) + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(x) + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">pow</span>(x, <span class=\"hljs-number\">2</span>) }, <span class=\"hljs-number\">32</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-title class_\">Number</span>(root).<span class=\"hljs-title function_\">toPrecision</span>(<span class=\"hljs-number\">8</span>))).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0.36247037</span>)\r\n})\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;Equation f(x) = sqrt(x) + e^(2*x) - 8*x = 0, has root x = 0.93945851 in [a, b] = [0.5, 100]&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> root = <span class=\"hljs-title function_\">findRoot</span>(<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">exp</span>(<span class=\"hljs-number\">2</span> * x) + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(x) - <span class=\"hljs-number\">8</span> * x }, <span class=\"hljs-number\">32</span>)\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">Number</span>(<span class=\"hljs-title class_\">Number</span>(root).<span class=\"hljs-title function_\">toPrecision</span>(<span class=\"hljs-number\">8</span>))).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0.93945851</span>)\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "numerical_methods\\bisection_method.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods\\bisection_method.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\brief Solve the equation \\f$f(x)=0\\f$ using [bisection\r\n * method](https://en.wikipedia.org/wiki/Bisection_method)\r\n *\r\n * Given two points \\f$a\\f$ and \\f$b\\f$ such that \\f$f(a)&lt;0\\f$ and\r\n * \\f$f(b)&gt;0\\f$, then the \\f$(i+1)^\\text{th}\\f$ approximation is given by: \\f[\r\n * x_{i+1} = \\frac{a_i+b_i}{2}\r\n * \\f]\r\n * For the next iteration, the interval is selected\r\n * as: \\f$[a,x]\\f$ if \\f$x&gt;0\\f$ or \\f$[x,b]\\f$ if \\f$x&lt;0\\f$. The Process is\r\n * continued till a close enough approximation is achieved.\r\n *\r\n * \\see newton_raphson_method.cpp, false_position.cpp, secant_method.cpp\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> EPSILON \\</span>\r\n    <span class=\"hljs-number\">1e-6</span>  <span class=\"hljs-comment\">// std::numeric_limits&lt;double&gt;::epsilon()  ///&lt; system accuracy limit</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_ITERATIONS 50000  <span class=\"hljs-comment\">///&lt; Maximum number of iterations to check</span></span>\r\n\r\n<span class=\"hljs-comment\">/** define \\f$f(x)\\f$ to find root for\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title\">eq</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> i)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> (std::<span class=\"hljs-built_in\">pow</span>(i, <span class=\"hljs-number\">3</span>) - (<span class=\"hljs-number\">4</span> * i) - <span class=\"hljs-number\">9</span>);  <span class=\"hljs-comment\">// original equation</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/** get the sign of any given number */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sgn</span><span class=\"hljs-params\">(T val)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">T</span>(<span class=\"hljs-number\">0</span>) &lt; val) - (val &lt; <span class=\"hljs-built_in\">T</span>(<span class=\"hljs-number\">0</span>));\r\n}\r\n\r\n<span class=\"hljs-comment\">/** main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">double</span> a = <span class=\"hljs-number\">-1</span>, b = <span class=\"hljs-number\">1</span>, x, z;\r\n    <span class=\"hljs-type\">int</span> i;\r\n\r\n    <span class=\"hljs-comment\">// loop to find initial intervals a, b</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; MAX_ITERATIONS; i++) {\r\n        z = <span class=\"hljs-built_in\">eq</span>(a);\r\n        x = <span class=\"hljs-built_in\">eq</span>(b);\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">sgn</span>(z) == <span class=\"hljs-built_in\">sgn</span>(x)) {  <span class=\"hljs-comment\">// same signs, increase interval</span>\r\n            b++;\r\n            a--;\r\n        } <span class=\"hljs-keyword\">else</span> {  <span class=\"hljs-comment\">// if opposite signs, we got our interval</span>\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n    }\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nFirst initial: &quot;</span> &lt;&lt; a;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nSecond initial: &quot;</span> &lt;&lt; b;\r\n\r\n    <span class=\"hljs-comment\">// start iterations</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; MAX_ITERATIONS; i++) {\r\n        x = (a + b) / <span class=\"hljs-number\">2</span>;\r\n        z = <span class=\"hljs-built_in\">eq</span>(x);\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nz: &quot;</span> &lt;&lt; z &lt;&lt; <span class=\"hljs-string\">&quot;\\t[&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; , &quot;</span> &lt;&lt; b\r\n                  &lt;&lt; <span class=\"hljs-string\">&quot; | Bisect: &quot;</span> &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;]&quot;</span>;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (z &lt; <span class=\"hljs-number\">0</span>) {\r\n            a = x;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            b = x;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (std::<span class=\"hljs-built_in\">abs</span>(z) &lt; EPSILON)  <span class=\"hljs-comment\">// stoping criteria</span>\r\n            <span class=\"hljs-keyword\">break</span>;\r\n    }\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nRoot: &quot;</span> &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;\\t\\tSteps: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "ggkogkou",
      "email": "76820848+ggkogkou@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}