{
  "slug": "ordinary-least-squares-regressor",
  "name": "Ordinary Least Squares Regressor",
  "categories": [
    "machinelearning"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "machine_learning\\ordinary_least_squares_regressor.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/machine_learning\\ordinary_least_squares_regressor.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * \\brief Linear regression example using [Ordinary least\r\n * squares](https://en.wikipedia.org/wiki/Ordinary_least_squares)\r\n *\r\n * Program that gets the number of data samples and number of features per\r\n * sample along with output per sample. It applies OLS regression to compute\r\n * the regression output for additional test data samples.\r\n *\r\n * \\author [Krishna Vedala](https://github.com/kvedala)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>    <span class=\"hljs-comment\">// for std::abs</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iomanip&gt;</span>  <span class=\"hljs-comment\">// for print formatting</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * operator to print a matrix\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::ostream &amp;<span class=\"hljs-keyword\">operator</span>&lt;&lt;(std::ostream &amp;out,\r\n                         std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-type\">const</span> &amp;v) {\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> width = <span class=\"hljs-number\">10</span>;\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> separator = <span class=\"hljs-string\">&#x27; &#x27;</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; v.<span class=\"hljs-built_in\">size</span>(); row++) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> col = <span class=\"hljs-number\">0</span>; col &lt; v[row].<span class=\"hljs-built_in\">size</span>(); col++) {\r\n            out &lt;&lt; std::left &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(width) &lt;&lt; std::<span class=\"hljs-built_in\">setfill</span>(separator)\r\n                &lt;&lt; v[row][col];\r\n        }\r\n        out &lt;&lt; std::endl;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> out;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * operator to print a vector\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::ostream &amp;<span class=\"hljs-keyword\">operator</span>&lt;&lt;(std::ostream &amp;out, std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;v) {\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> width = <span class=\"hljs-number\">15</span>;\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> separator = <span class=\"hljs-string\">&#x27; &#x27;</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; v.<span class=\"hljs-built_in\">size</span>(); row++) {\r\n        out &lt;&lt; std::left &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(width) &lt;&lt; std::<span class=\"hljs-built_in\">setfill</span>(separator)\r\n            &lt;&lt; v[row];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> out;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * function to check if given matrix is a square matrix\r\n * \\returns 1 if true, 0 if false\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_square</span><span class=\"hljs-params\">(std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-type\">const</span> &amp;A)</span> </span>{\r\n    <span class=\"hljs-comment\">// Assuming A is square matrix</span>\r\n    <span class=\"hljs-type\">size_t</span> N = A.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (A[i].<span class=\"hljs-built_in\">size</span>() != N) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Matrix multiplication such that if A is size (mxn) and\r\n * B is of size (pxq) then the multiplication is defined\r\n * only when n = p and the resultant matrix is of size (mxq)\r\n *\r\n * \\returns resultant matrix\r\n **/</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-keyword\">operator</span>*(std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-type\">const</span> &amp;A,\r\n                                      std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-type\">const</span> &amp;B) {\r\n    <span class=\"hljs-comment\">// Number of rows in A</span>\r\n    <span class=\"hljs-type\">size_t</span> N_A = A.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-comment\">// Number of columns in B</span>\r\n    <span class=\"hljs-type\">size_t</span> N_B = B[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>();\r\n\r\n    std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-built_in\">result</span>(N_A);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (A[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>() != B.<span class=\"hljs-built_in\">size</span>()) {\r\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Number of columns in A != Number of rows in B (&quot;</span>\r\n                  &lt;&lt; A[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>() &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span> &lt;&lt; B.<span class=\"hljs-built_in\">size</span>() &lt;&lt; <span class=\"hljs-string\">&quot;)&quot;</span> &lt;&lt; std::endl;\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; N_A; row++) {\r\n        <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(N_B)</span></span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> col = <span class=\"hljs-number\">0</span>; col &lt; N_B; col++) {\r\n            v[col] = <span class=\"hljs-built_in\">static_cast</span>&lt;T&gt;(<span class=\"hljs-number\">0</span>);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> j = <span class=\"hljs-number\">0</span>; j &lt; B.<span class=\"hljs-built_in\">size</span>(); j++) {\r\n                v[col] += A[row][j] * B[j][col];\r\n            }\r\n        }\r\n        result[row] = v;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * multiplication of a matrix with a column vector\r\n * \\returns resultant vector\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::vector&lt;T&gt; <span class=\"hljs-keyword\">operator</span>*(std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-type\">const</span> &amp;A,\r\n                         std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;B) {\r\n    <span class=\"hljs-comment\">// Number of rows in A</span>\r\n    <span class=\"hljs-type\">size_t</span> N_A = A.<span class=\"hljs-built_in\">size</span>();\r\n\r\n    <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(N_A)</span></span>;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (A[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>() != B.<span class=\"hljs-built_in\">size</span>()) {\r\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Number of columns in A != Number of rows in B (&quot;</span>\r\n                  &lt;&lt; A[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>() &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span> &lt;&lt; B.<span class=\"hljs-built_in\">size</span>() &lt;&lt; <span class=\"hljs-string\">&quot;)&quot;</span> &lt;&lt; std::endl;\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; N_A; row++) {\r\n        result[row] = <span class=\"hljs-built_in\">static_cast</span>&lt;T&gt;(<span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> j = <span class=\"hljs-number\">0</span>; j &lt; B.<span class=\"hljs-built_in\">size</span>(); j++) result[row] += A[row][j] * B[j];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * pre-multiplication of a vector by a scalar\r\n * \\returns resultant vector\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-keyword\">operator</span>*(<span class=\"hljs-type\">float</span> <span class=\"hljs-type\">const</span> scalar, std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;A) {\r\n    <span class=\"hljs-comment\">// Number of rows in A</span>\r\n    <span class=\"hljs-type\">size_t</span> N_A = A.<span class=\"hljs-built_in\">size</span>();\r\n\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(N_A)</span></span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; N_A; row++) {\r\n        result[row] += A[row] * <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(scalar);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * post-multiplication of a vector by a scalar\r\n * \\returns resultant vector\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-keyword\">operator</span>*(std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;A, <span class=\"hljs-type\">float</span> <span class=\"hljs-type\">const</span> scalar) {\r\n    <span class=\"hljs-comment\">// Number of rows in A</span>\r\n    <span class=\"hljs-type\">size_t</span> N_A = A.<span class=\"hljs-built_in\">size</span>();\r\n\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(N_A)</span></span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; N_A; row++) {\r\n        result[row] = A[row] * <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(scalar);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * division of a vector by a scalar\r\n * \\returns resultant vector\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-keyword\">operator</span>/(std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;A, <span class=\"hljs-type\">float</span> <span class=\"hljs-type\">const</span> scalar) {\r\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1.f</span> / scalar) * A;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * subtraction of two vectors of identical lengths\r\n * \\returns resultant vector\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::vector&lt;T&gt; <span class=\"hljs-keyword\">operator</span>-(std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;A, std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;B) {\r\n    <span class=\"hljs-comment\">// Number of rows in A</span>\r\n    <span class=\"hljs-type\">size_t</span> N = A.<span class=\"hljs-built_in\">size</span>();\r\n\r\n    <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(N)</span></span>;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (B.<span class=\"hljs-built_in\">size</span>() != N) {\r\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Vector dimensions shouldbe identical!&quot;</span> &lt;&lt; std::endl;\r\n        <span class=\"hljs-keyword\">return</span> A;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; N; row++) result[row] = A[row] - B[row];\r\n\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * addition of two vectors of identical lengths\r\n * \\returns resultant vector\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::vector&lt;T&gt; <span class=\"hljs-keyword\">operator</span>+(std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;A, std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;B) {\r\n    <span class=\"hljs-comment\">// Number of rows in A</span>\r\n    <span class=\"hljs-type\">size_t</span> N = A.<span class=\"hljs-built_in\">size</span>();\r\n\r\n    <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(N)</span></span>;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (B.<span class=\"hljs-built_in\">size</span>() != N) {\r\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Vector dimensions shouldbe identical!&quot;</span> &lt;&lt; std::endl;\r\n        <span class=\"hljs-keyword\">return</span> A;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; N; row++) result[row] = A[row] + B[row];\r\n\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Get matrix inverse using Row-trasnformations. Given matrix must\r\n * be a square and non-singular.\r\n * \\returns inverse matrix\r\n **/</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; <span class=\"hljs-built_in\">get_inverse</span>(\r\n    std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-type\">const</span> &amp;A) {\r\n    <span class=\"hljs-comment\">// Assuming A is square matrix</span>\r\n    <span class=\"hljs-type\">size_t</span> N = A.<span class=\"hljs-built_in\">size</span>();\r\n\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; <span class=\"hljs-built_in\">inverse</span>(N);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; N; row++) {\r\n        <span class=\"hljs-comment\">// preallocatae a resultant identity matrix</span>\r\n        inverse[row] = std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">float</span>&gt;(N);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> col = <span class=\"hljs-number\">0</span>; col &lt; N; col++) {\r\n            inverse[row][col] = (row == col) ? <span class=\"hljs-number\">1.f</span> : <span class=\"hljs-number\">0.f</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">is_square</span>(A)) {\r\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;A must be a square matrix!&quot;</span> &lt;&lt; std::endl;\r\n        <span class=\"hljs-keyword\">return</span> inverse;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// preallocatae a temporary matrix identical to A</span>\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; <span class=\"hljs-built_in\">temp</span>(N);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; N; row++) {\r\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(N)</span></span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> col = <span class=\"hljs-number\">0</span>; col &lt; N; col++) {\r\n            v[col] = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(A[row][col]);\r\n        }\r\n        temp[row] = v;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// start transformations</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; N; row++) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row2 = row; row2 &lt; N &amp;&amp; temp[row][row] == <span class=\"hljs-number\">0</span>; row2++) {\r\n            <span class=\"hljs-comment\">// this to ensure diagonal elements are not 0</span>\r\n            temp[row] = temp[row] + temp[row2];\r\n            inverse[row] = inverse[row] + inverse[row2];\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> col2 = row; col2 &lt; N &amp;&amp; temp[row][row] == <span class=\"hljs-number\">0</span>; col2++) {\r\n            <span class=\"hljs-comment\">// this to further ensure diagonal elements are not 0</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row2 = <span class=\"hljs-number\">0</span>; row2 &lt; N; row2++) {\r\n                temp[row2][row] = temp[row2][row] + temp[row2][col2];\r\n                inverse[row2][row] = inverse[row2][row] + inverse[row2][col2];\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (temp[row][row] == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-comment\">// Probably a low-rank matrix and hence singular</span>\r\n            std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Low-rank matrix, no inverse!&quot;</span> &lt;&lt; std::endl;\r\n            <span class=\"hljs-keyword\">return</span> inverse;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// set diagonal to 1</span>\r\n        <span class=\"hljs-keyword\">auto</span> divisor = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(temp[row][row]);\r\n        temp[row] = temp[row] / divisor;\r\n        inverse[row] = inverse[row] / divisor;\r\n        <span class=\"hljs-comment\">// Row transformations</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row2 = <span class=\"hljs-number\">0</span>; row2 &lt; N; row2++) {\r\n            <span class=\"hljs-keyword\">if</span> (row2 == row) {\r\n                <span class=\"hljs-keyword\">continue</span>;\r\n            }\r\n            <span class=\"hljs-type\">float</span> factor = temp[row2][row];\r\n            temp[row2] = temp[row2] - factor * temp[row];\r\n            inverse[row2] = inverse[row2] - factor * inverse[row];\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> inverse;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * matrix transpose\r\n * \\returns resultant matrix\r\n **/</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\nstd::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-built_in\">get_transpose</span>(\r\n    std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-type\">const</span> &amp;A) {\r\n    std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-built_in\">result</span>(A[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>());\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; A[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>(); row++) {\r\n        <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(A.size())</span></span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> col = <span class=\"hljs-number\">0</span>; col &lt; A.<span class=\"hljs-built_in\">size</span>(); col++) v[col] = A[col][row];\r\n\r\n        result[row] = v;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Perform Ordinary Least Squares curve fit. This operation is defined as\r\n * \\f[\\beta = \\left(X^TXX^T\\right)Y\\f]\r\n * \\param X feature matrix with rows representing sample vector of features\r\n * \\param Y known regression value for each sample\r\n * \\returns fitted regression model polynomial coefficients\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">fit_OLS_regressor</span><span class=\"hljs-params\">(std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-type\">const</span> &amp;X,\r\n                                     std::vector&lt;T&gt; <span class=\"hljs-type\">const</span> &amp;Y)</span> </span>{\r\n    <span class=\"hljs-comment\">// NxF</span>\r\n    std::vector&lt;std::vector&lt;T&gt;&gt; X2 = X;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; X2.<span class=\"hljs-built_in\">size</span>(); i++) {\r\n        <span class=\"hljs-comment\">// add Y-intercept -&gt; Nx(F+1)</span>\r\n        X2[i].<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-number\">1</span>);\r\n    }\r\n    <span class=\"hljs-comment\">// (F+1)xN</span>\r\n    std::vector&lt;std::vector&lt;T&gt;&gt; Xt = <span class=\"hljs-built_in\">get_transpose</span>(X2);\r\n    <span class=\"hljs-comment\">// (F+1)x(F+1)</span>\r\n    std::vector&lt;std::vector&lt;T&gt;&gt; tmp = <span class=\"hljs-built_in\">get_inverse</span>(Xt * X2);\r\n    <span class=\"hljs-comment\">// (F+1)xN</span>\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; out = tmp * Xt;\r\n    <span class=\"hljs-comment\">// cout &lt;&lt; endl</span>\r\n    <span class=\"hljs-comment\">//      &lt;&lt; &quot;Projection matrix: &quot; &lt;&lt; X2 * out &lt;&lt; endl;</span>\r\n\r\n    <span class=\"hljs-comment\">// Fx1,1    -&gt; (F+1)^th element is the independent constant</span>\r\n    <span class=\"hljs-keyword\">return</span> out * Y;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Given data and OLS model coeffficients, predict\r\n * regression estimates. This operation is defined as\r\n * \\f[y_{\\text{row}=i} = \\sum_{j=\\text{columns}}\\beta_j\\cdot X_{i,j}\\f]\r\n *\r\n * \\param X feature matrix with rows representing sample vector of features\r\n * \\param beta fitted regression model\r\n * \\return vector with regression values for each sample\r\n **/</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">predict_OLS_regressor</span><span class=\"hljs-params\">(std::vector&lt;std::vector&lt;T&gt;&gt; <span class=\"hljs-type\">const</span> &amp;X,\r\n                                         std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-type\">const</span> &amp;beta <span class=\"hljs-comment\">/**&lt; */</span>\r\n)</span> </span>{\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(X.size())</span></span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> rows = <span class=\"hljs-number\">0</span>; rows &lt; X.<span class=\"hljs-built_in\">size</span>(); rows++) {\r\n        <span class=\"hljs-comment\">// -&gt; start with constant term</span>\r\n        result[rows] = beta[X[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>()];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> cols = <span class=\"hljs-number\">0</span>; cols &lt; X[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>(); cols++) {\r\n            result[rows] += beta[cols] * X[rows][cols];\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">// Nx1</span>\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Self test checks */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ols_test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> F = <span class=\"hljs-number\">3</span>, N = <span class=\"hljs-number\">5</span>;\r\n\r\n    <span class=\"hljs-comment\">/* test function = x^2 -5 */</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 (quadratic function)....&quot;</span>;\r\n    <span class=\"hljs-comment\">// create training data set with features = x, x^2, x^3</span>\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; <span class=\"hljs-built_in\">data1</span>(\r\n        {{<span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">-125</span>}, {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">216</span>}});\r\n    <span class=\"hljs-comment\">// create corresponding outputs</span>\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">Y1</span><span class=\"hljs-params\">({<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">-4</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">-4</span>, <span class=\"hljs-number\">31</span>})</span></span>;\r\n    <span class=\"hljs-comment\">// perform regression modelling</span>\r\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; beta1 = <span class=\"hljs-built_in\">fit_OLS_regressor</span>(data1, Y1);\r\n    <span class=\"hljs-comment\">// create test data set with same features = x, x^2, x^3</span>\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; <span class=\"hljs-built_in\">test_data1</span>(\r\n        {{<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">-8</span>}, {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>}, {<span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">-1000</span>}, {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>}});\r\n    <span class=\"hljs-comment\">// expected regression outputs</span>\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">expected1</span><span class=\"hljs-params\">({<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">95</span>, <span class=\"hljs-number\">95</span>})</span></span>;\r\n    <span class=\"hljs-comment\">// predicted regression outputs</span>\r\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; out1 = <span class=\"hljs-built_in\">predict_OLS_regressor</span>(test_data1, beta1);\r\n    <span class=\"hljs-comment\">// compare predicted results are within +-0.01 limit of expected</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> rows = <span class=\"hljs-number\">0</span>; rows &lt; out1.<span class=\"hljs-built_in\">size</span>(); rows++) {\r\n        <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(out1[rows] - expected1[rows]) &lt; <span class=\"hljs-number\">0.01</span>);\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">/* test function = x^3 + x^2 - 100 */</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2 (cubic function)....&quot;</span>;\r\n    <span class=\"hljs-comment\">// create training data set with features = x, x^2, x^3</span>\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; <span class=\"hljs-built_in\">data2</span>(\r\n        {{<span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">-125</span>}, {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">216</span>}});\r\n    <span class=\"hljs-comment\">// create corresponding outputs</span>\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">Y2</span><span class=\"hljs-params\">({<span class=\"hljs-number\">-200</span>, <span class=\"hljs-number\">-100</span>, <span class=\"hljs-number\">-100</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-number\">152</span>})</span></span>;\r\n    <span class=\"hljs-comment\">// perform regression modelling</span>\r\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; beta2 = <span class=\"hljs-built_in\">fit_OLS_regressor</span>(data2, Y2);\r\n    <span class=\"hljs-comment\">// create test data set with same features = x, x^2, x^3</span>\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; <span class=\"hljs-built_in\">test_data2</span>(\r\n        {{<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">-8</span>}, {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>}, {<span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">-1000</span>}, {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>}});\r\n    <span class=\"hljs-comment\">// expected regression outputs</span>\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">expected2</span><span class=\"hljs-params\">({<span class=\"hljs-number\">-104</span>, <span class=\"hljs-number\">-88</span>, <span class=\"hljs-number\">-1000</span>, <span class=\"hljs-number\">1000</span>})</span></span>;\r\n    <span class=\"hljs-comment\">// predicted regression outputs</span>\r\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; out2 = <span class=\"hljs-built_in\">predict_OLS_regressor</span>(test_data2, beta2);\r\n    <span class=\"hljs-comment\">// compare predicted results are within +-0.01 limit of expected</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> rows = <span class=\"hljs-number\">0</span>; rows &lt; out2.<span class=\"hljs-built_in\">size</span>(); rows++) {\r\n        <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(out2[rows] - expected2[rows]) &lt; <span class=\"hljs-number\">0.01</span>);\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n\r\n    std::cout &lt;&lt; std::endl;  <span class=\"hljs-comment\">// ensure test results are displayed on screen</span>\r\n                             <span class=\"hljs-comment\">// (flush stdout)</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">ols_test</span>();\r\n\r\n    <span class=\"hljs-type\">size_t</span> N = <span class=\"hljs-number\">0</span>, F = <span class=\"hljs-number\">0</span>;\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of features: &quot;</span>;\r\n    <span class=\"hljs-comment\">// number of features = columns</span>\r\n    std::cin &gt;&gt; F;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of samples: &quot;</span>;\r\n    <span class=\"hljs-comment\">// number of samples = rows</span>\r\n    std::cin &gt;&gt; N;\r\n\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; <span class=\"hljs-built_in\">data</span>(N);\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">Y</span><span class=\"hljs-params\">(N)</span></span>;\r\n\r\n    std::cout\r\n        &lt;&lt; <span class=\"hljs-string\">&quot;Enter training data. Per sample, provide features and one output.&quot;</span>\r\n        &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> rows = <span class=\"hljs-number\">0</span>; rows &lt; N; rows++) {\r\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(F)</span></span>;\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sample# &quot;</span> &lt;&lt; rows + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> cols = <span class=\"hljs-number\">0</span>; cols &lt; F; cols++) {\r\n            <span class=\"hljs-comment\">// get the F features</span>\r\n            std::cin &gt;&gt; v[cols];\r\n        }\r\n        data[rows] = v;\r\n        <span class=\"hljs-comment\">// get the corresponding output</span>\r\n        std::cin &gt;&gt; Y[rows];\r\n    }\r\n\r\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; beta = <span class=\"hljs-built_in\">fit_OLS_regressor</span>(data, Y);\r\n    std::cout &lt;&lt; std::endl &lt;&lt; std::endl &lt;&lt; <span class=\"hljs-string\">&quot;beta:&quot;</span> &lt;&lt; beta &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">size_t</span> T = <span class=\"hljs-number\">0</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of test samples: &quot;</span>;\r\n    <span class=\"hljs-comment\">// number of test sample inputs</span>\r\n    std::cin &gt;&gt; T;\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">float</span>&gt;&gt; <span class=\"hljs-built_in\">data2</span>(T);\r\n    <span class=\"hljs-comment\">// vector&lt;float&gt; Y2(T);</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> rows = <span class=\"hljs-number\">0</span>; rows &lt; T; rows++) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sample# &quot;</span> &lt;&lt; rows + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span>;\r\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(F)</span></span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> cols = <span class=\"hljs-number\">0</span>; cols &lt; F; cols++) std::cin &gt;&gt; v[cols];\r\n        data2[rows] = v;\r\n    }\r\n\r\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; out = <span class=\"hljs-built_in\">predict_OLS_regressor</span>(data2, beta);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> rows = <span class=\"hljs-number\">0</span>; rows &lt; T; rows++) std::cout &lt;&lt; out[rows] &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 2
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 3
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 10
    }
  ],
  "explanationUrl": {}
}