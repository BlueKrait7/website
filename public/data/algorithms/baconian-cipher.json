{
  "slug": "baconian-cipher",
  "name": "Baconian Cipher",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers\\baconian_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers\\baconian_cipher.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nProgram to encode and decode Baconian or Bacon&#x27;s Cipher\r\nWikipedia reference : https://en.wikipedia.org/wiki/Bacon%27s_cipher\r\n&quot;&quot;&quot;</span>\r\n\r\nencode_dict = {\r\n    <span class=\"hljs-string\">&quot;a&quot;</span>: <span class=\"hljs-string\">&quot;AAAAA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;b&quot;</span>: <span class=\"hljs-string\">&quot;AAAAB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;c&quot;</span>: <span class=\"hljs-string\">&quot;AAABA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;d&quot;</span>: <span class=\"hljs-string\">&quot;AAABB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;e&quot;</span>: <span class=\"hljs-string\">&quot;AABAA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;f&quot;</span>: <span class=\"hljs-string\">&quot;AABAB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;g&quot;</span>: <span class=\"hljs-string\">&quot;AABBA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;h&quot;</span>: <span class=\"hljs-string\">&quot;AABBB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;i&quot;</span>: <span class=\"hljs-string\">&quot;ABAAA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;j&quot;</span>: <span class=\"hljs-string\">&quot;BBBAA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;k&quot;</span>: <span class=\"hljs-string\">&quot;ABAAB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;l&quot;</span>: <span class=\"hljs-string\">&quot;ABABA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;m&quot;</span>: <span class=\"hljs-string\">&quot;ABABB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;n&quot;</span>: <span class=\"hljs-string\">&quot;ABBAA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;o&quot;</span>: <span class=\"hljs-string\">&quot;ABBAB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;p&quot;</span>: <span class=\"hljs-string\">&quot;ABBBA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;q&quot;</span>: <span class=\"hljs-string\">&quot;ABBBB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;r&quot;</span>: <span class=\"hljs-string\">&quot;BAAAA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;s&quot;</span>: <span class=\"hljs-string\">&quot;BAAAB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;t&quot;</span>: <span class=\"hljs-string\">&quot;BAABA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;u&quot;</span>: <span class=\"hljs-string\">&quot;BAABB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;v&quot;</span>: <span class=\"hljs-string\">&quot;BBBAB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;w&quot;</span>: <span class=\"hljs-string\">&quot;BABAA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;x&quot;</span>: <span class=\"hljs-string\">&quot;BABAB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;y&quot;</span>: <span class=\"hljs-string\">&quot;BABBA&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;z&quot;</span>: <span class=\"hljs-string\">&quot;BABBB&quot;</span>,\r\n    <span class=\"hljs-string\">&quot; &quot;</span>: <span class=\"hljs-string\">&quot; &quot;</span>,\r\n}\r\n\r\n\r\ndecode_dict = {value: key <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> encode_dict.items()}\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode</span>(<span class=\"hljs-params\">word: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Encodes to Baconian cipher\r\n\r\n    &gt;&gt;&gt; encode(&quot;hello&quot;)\r\n    &#x27;AABBBAABAAABABAABABAABBAB&#x27;\r\n    &gt;&gt;&gt; encode(&quot;hello world&quot;)\r\n    &#x27;AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB&#x27;\r\n    &gt;&gt;&gt; encode(&quot;hello world!&quot;)\r\n    Traceback (most recent call last):\r\n        ...\r\n    Exception: encode() accepts only letters of the alphabet and spaces\r\n    &quot;&quot;&quot;</span>\r\n    encoded = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> word.lower():\r\n        <span class=\"hljs-keyword\">if</span> letter.isalpha() <span class=\"hljs-keyword\">or</span> letter == <span class=\"hljs-string\">&quot; &quot;</span>:\r\n            encoded += encode_dict[letter]\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;encode() accepts only letters of the alphabet and spaces&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> encoded\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-params\">coded: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Decodes from Baconian cipher\r\n\r\n    &gt;&gt;&gt; decode(&quot;AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB&quot;)\r\n    &#x27;hello world&#x27;\r\n    &gt;&gt;&gt; decode(&quot;AABBBAABAAABABAABABAABBAB&quot;)\r\n    &#x27;hello&#x27;\r\n    &gt;&gt;&gt; decode(&quot;AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB!&quot;)\r\n    Traceback (most recent call last):\r\n        ...\r\n    Exception: decode() accepts only &#x27;A&#x27;, &#x27;B&#x27; and spaces\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">set</span>(coded) - {<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot; &quot;</span>} != <span class=\"hljs-built_in\">set</span>():\r\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;decode() accepts only &#x27;A&#x27;, &#x27;B&#x27; and spaces&quot;</span>)\r\n    decoded = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> coded.split():\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(word) != <span class=\"hljs-number\">0</span>:\r\n            decoded += decode_dict[word[:<span class=\"hljs-number\">5</span>]]\r\n            word = word[<span class=\"hljs-number\">5</span>:]\r\n        decoded += <span class=\"hljs-string\">&quot; &quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> decoded.strip()\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Rohan R Bharadwaj",
      "email": "89947037+Rohanrbharadwaj@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}