{
  "slug": "anagram-checker",
  "name": "Anagram Checker",
  "categories": [
    "datastructures",
    "array",
    "strings"
  ],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "data_structures\\hash_table\\anagram_checker.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures\\hash_table\\anagram_checker.rb",
      "code": "<span class=\"hljs-comment\"># Challenge name: Is anagram</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Given two strings s and t , write a function to determine</span>\r\n<span class=\"hljs-comment\"># if t is an anagram of s.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Note:</span>\r\n<span class=\"hljs-comment\"># You may assume the string contains only lowercase alphabets.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Follow up:</span>\r\n<span class=\"hljs-comment\"># What if the inputs contain unicode characters?</span>\r\n<span class=\"hljs-comment\"># How would you adapt your solution to such case?</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {String} s</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {String} t</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Boolean}</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach: Hash table</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-comment\"># Complexity analysis:</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Time complexity: O(n). Time complexity is O(n) since accessing the counter</span>\r\n<span class=\"hljs-comment\"># table is a constant time operation.</span>\r\n<span class=\"hljs-comment\"># Space complexity: O(1). Although we do use extra space,</span>\r\n<span class=\"hljs-comment\"># the space complexity is O(1) because the table&#x27;s size stays constant no</span>\r\n<span class=\"hljs-comment\"># matter how large n is.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_anagram</span><span class=\"hljs-params\">(s, t)</span></span>\r\n  s_length = s.length\r\n  t_length = t.length\r\n  counter = Hash.new(<span class=\"hljs-number\">0</span>)\r\n\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">unless</span> s_length == t_length\r\n\r\n  (<span class=\"hljs-number\">0</span>...s_length).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n    counter[s[i]] += <span class=\"hljs-number\">1</span>\r\n    counter[t[i]] -= <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  counter.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|_k, v|</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">unless</span> v == <span class=\"hljs-number\">0</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-literal\">true</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\ns = <span class=\"hljs-string\">&#x27;anagram&#x27;</span>\r\nt = <span class=\"hljs-string\">&#x27;nagaram&#x27;</span>\r\nputs(is_anagram(s, t))\r\n<span class=\"hljs-comment\"># =&gt; true</span>\r\n\r\ns = <span class=\"hljs-string\">&#x27;rat&#x27;</span>\r\nt = <span class=\"hljs-string\">&#x27;car&#x27;</span>\r\nputs(is_anagram(s, t))\r\n<span class=\"hljs-comment\"># =&gt; false</span>\r\n\r\ns = <span class=\"hljs-string\">&#x27;a&#x27;</span>\r\nt = <span class=\"hljs-string\">&#x27;ab&#x27;</span>\r\nputs(is_anagram(s, t))\r\n<span class=\"hljs-comment\"># =&gt; false</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach 2: Hash table</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-comment\"># Algorithm: we could also first increment the counter for s,</span>\r\n<span class=\"hljs-comment\"># then decrement the counter for t. If at any point the counter</span>\r\n<span class=\"hljs-comment\"># drops below zero, we know that t contains an extra letter,</span>\r\n<span class=\"hljs-comment\"># not in s, and return false immediately.</span>\r\n\r\n<span class=\"hljs-comment\"># Complexity analysis:</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Time complexity: O(n).</span>\r\n<span class=\"hljs-comment\"># Space complexity: O(1).</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_anagram</span><span class=\"hljs-params\">(s, t)</span></span>\r\n  s_length = s.length\r\n  t_length = t.length\r\n  counter = Hash.new(<span class=\"hljs-number\">0</span>)\r\n\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">unless</span> s_length == t_length\r\n\r\n  (<span class=\"hljs-number\">0</span>...s_length).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n    counter[s[i]] += <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  (<span class=\"hljs-number\">0</span>...s_length).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n    counter[t[i]] -= <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">if</span> counter[t[i]] &lt; <span class=\"hljs-number\">0</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-literal\">true</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\ns = <span class=\"hljs-string\">&#x27;anagram&#x27;</span>\r\nt = <span class=\"hljs-string\">&#x27;nagaram&#x27;</span>\r\nputs(is_anagram(s, t))\r\n<span class=\"hljs-comment\"># =&gt; true</span>\r\n\r\ns = <span class=\"hljs-string\">&#x27;rat&#x27;</span>\r\nt = <span class=\"hljs-string\">&#x27;car&#x27;</span>\r\nputs(is_anagram(s, t))\r\n<span class=\"hljs-comment\"># =&gt; false</span>\r\n\r\ns = <span class=\"hljs-string\">&#x27;a&#x27;</span>\r\nt = <span class=\"hljs-string\">&#x27;ab&#x27;</span>\r\nputs(is_anagram(s, t))\r\n<span class=\"hljs-comment\"># =&gt; false</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach 3: populate 2 hashes and compare them</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_anagram</span><span class=\"hljs-params\">(s, t)</span></span>\r\n  s = s.chars\r\n  t = t.chars\r\n\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">if</span> s.count != t.count\r\n\r\n  hash1 = {}\r\n  s.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|value|</span>\r\n    hash1[value] = <span class=\"hljs-keyword\">if</span> hash1[value]\r\n                     hash1[value] + <span class=\"hljs-number\">1</span>\r\n                   <span class=\"hljs-keyword\">else</span>\r\n                     <span class=\"hljs-number\">1</span>\r\n                   <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  hash2 = {}\r\n  t.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|value|</span>\r\n    hash2[value] = <span class=\"hljs-keyword\">if</span> hash2[value]\r\n                     hash2[value] + <span class=\"hljs-number\">1</span>\r\n                   <span class=\"hljs-keyword\">else</span>\r\n                     <span class=\"hljs-number\">1</span>\r\n                   <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  hash1.keys.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|key|</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">if</span> hash2[key] != hash1[key]\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-literal\">true</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\ns = <span class=\"hljs-string\">&#x27;anagram&#x27;</span>\r\nt = <span class=\"hljs-string\">&#x27;nagaram&#x27;</span>\r\nputs(is_anagram(s, t))\r\n<span class=\"hljs-comment\"># =&gt; true</span>\r\n\r\ns = <span class=\"hljs-string\">&#x27;rat&#x27;</span>\r\nt = <span class=\"hljs-string\">&#x27;car&#x27;</span>\r\nputs(is_anagram(s, t))\r\n<span class=\"hljs-comment\"># =&gt; false</span>\r\n\r\ns = <span class=\"hljs-string\">&#x27;a&#x27;</span>\r\nt = <span class=\"hljs-string\">&#x27;ab&#x27;</span>\r\nputs(is_anagram(s, t))\r\n<span class=\"hljs-comment\"># =&gt; false</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Jessica Kwok",
      "email": "jessicatckwok@gmail.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 11
    }
  ],
  "explanationUrl": {}
}