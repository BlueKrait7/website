{
  "slug": "circular-buffer",
  "name": "Circular Buffer",
  "categories": [
    "datastructures",
    "buffers"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\buffers\\CircularBuffer.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\buffers\\CircularBuffer.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.buffers;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularBuffer</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">char</span>[] _buffer;\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> _buffer_size;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">_write_index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">_read_index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">_readable_data</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>(<span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CircularBuffer</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> buffer_size)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (!IsPowerOfTwo(buffer_size)) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>();\r\n        }\r\n        <span class=\"hljs-built_in\">this</span>._buffer_size = buffer_size;\r\n        _buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">char</span>[buffer_size];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">IsPowerOfTwo</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> {\r\n        <span class=\"hljs-keyword\">return</span> (i &amp; (i - <span class=\"hljs-number\">1</span>)) == <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getTrueIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> {\r\n        <span class=\"hljs-keyword\">return</span> i % _buffer_size;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> Character <span class=\"hljs-title function_\">readOutChar</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">Character</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\r\n\r\n        <span class=\"hljs-comment\">// if we have data to read</span>\r\n        <span class=\"hljs-keyword\">if</span> (_readable_data.get() &gt; <span class=\"hljs-number\">0</span>) {\r\n\r\n            result = Character.valueOf(_buffer[getTrueIndex(_read_index)]);\r\n            _readable_data.decrementAndGet();\r\n            _read_index++;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">writeToCharBuffer</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> c)</span> {\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\r\n\r\n        <span class=\"hljs-comment\">// if we can write to the buffer</span>\r\n        <span class=\"hljs-keyword\">if</span> (_readable_data.get() &lt; _buffer_size) {\r\n            <span class=\"hljs-comment\">// write to buffer</span>\r\n            _buffer[getTrueIndex(_write_index)] = c;\r\n            _readable_data.incrementAndGet();\r\n            _write_index++;\r\n            result = <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestWriteWorker</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> {\r\n\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">_alphabet</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">_random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\r\n        CircularBuffer _buffer;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TestWriteWorker</span><span class=\"hljs-params\">(CircularBuffer cb)</span> {\r\n            <span class=\"hljs-built_in\">this</span>._buffer = cb;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">getRandomChar</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> _alphabet.charAt(_random.nextInt(_alphabet.length()));\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">while</span> (!Thread.interrupted()) {\r\n                <span class=\"hljs-keyword\">if</span> (!_buffer.writeToCharBuffer(getRandomChar())) {\r\n                    Thread.yield();\r\n                    <span class=\"hljs-keyword\">try</span> {\r\n                        Thread.sleep(<span class=\"hljs-number\">10</span>);\r\n                    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\r\n                        <span class=\"hljs-keyword\">return</span>;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestReadWorker</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> {\r\n\r\n        CircularBuffer _buffer;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TestReadWorker</span><span class=\"hljs-params\">(CircularBuffer cb)</span> {\r\n            <span class=\"hljs-built_in\">this</span>._buffer = cb;\r\n        }\r\n\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> {\r\n            System.out.println(<span class=\"hljs-string\">&quot;Printing Buffer:&quot;</span>);\r\n            <span class=\"hljs-keyword\">while</span> (!Thread.interrupted()) {\r\n                <span class=\"hljs-type\">Character</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> _buffer.readOutChar();\r\n                <span class=\"hljs-keyword\">if</span> (c != <span class=\"hljs-literal\">null</span>) {\r\n                    System.out.print(c.charValue());\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    Thread.yield();\r\n                    <span class=\"hljs-keyword\">try</span> {\r\n                        Thread.sleep(<span class=\"hljs-number\">10</span>);\r\n                    } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\r\n                        System.out.println();\r\n                        <span class=\"hljs-keyword\">return</span>;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">buffer_size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1024</span>;\r\n        <span class=\"hljs-comment\">// create circular buffer</span>\r\n        <span class=\"hljs-type\">CircularBuffer</span> <span class=\"hljs-variable\">cb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CircularBuffer</span>(buffer_size);\r\n\r\n        <span class=\"hljs-comment\">// create threads that read and write the buffer.</span>\r\n        <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">write_thread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestWriteWorker</span>(cb));\r\n        <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">read_thread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestReadWorker</span>(cb));\r\n        read_thread.start();\r\n        write_thread.start();\r\n\r\n        <span class=\"hljs-comment\">// wait some amount of time</span>\r\n        Thread.sleep(<span class=\"hljs-number\">10000</span>);\r\n\r\n        <span class=\"hljs-comment\">// interrupt threads and exit</span>\r\n        write_thread.interrupt();\r\n        read_thread.interrupt();\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}