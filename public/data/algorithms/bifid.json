{
  "slug": "bifid",
  "name": "Bifid",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers\\bifid.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers\\bifid.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThe Bifid Cipher uses a Polybius Square to encipher a message in a way that\r\nmakes it fairly difficult to decipher without knowing the secret.\r\n\r\nhttps://www.braingle.com/brainteasers/codes/bifid.php\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BifidCipher</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        SQUARE = [\r\n            [<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>],\r\n            [<span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-string\">&quot;g&quot;</span>, <span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>, <span class=\"hljs-string\">&quot;k&quot;</span>],\r\n            [<span class=\"hljs-string\">&quot;l&quot;</span>, <span class=\"hljs-string\">&quot;m&quot;</span>, <span class=\"hljs-string\">&quot;n&quot;</span>, <span class=\"hljs-string\">&quot;o&quot;</span>, <span class=\"hljs-string\">&quot;p&quot;</span>],\r\n            [<span class=\"hljs-string\">&quot;q&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, <span class=\"hljs-string\">&quot;s&quot;</span>, <span class=\"hljs-string\">&quot;t&quot;</span>, <span class=\"hljs-string\">&quot;u&quot;</span>],\r\n            [<span class=\"hljs-string\">&quot;v&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>, <span class=\"hljs-string\">&quot;x&quot;</span>, <span class=\"hljs-string\">&quot;y&quot;</span>, <span class=\"hljs-string\">&quot;z&quot;</span>],\r\n        ]\r\n        self.SQUARE = np.array(SQUARE)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">letter_to_numbers</span>(<span class=\"hljs-params\">self, letter: <span class=\"hljs-built_in\">str</span></span>) -&gt; np.ndarray:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the pair of numbers that represents the given letter in the\r\n        polybius square\r\n\r\n        &gt;&gt;&gt; np.array_equal(BifidCipher().letter_to_numbers(&#x27;a&#x27;), [1,1])\r\n        True\r\n\r\n        &gt;&gt;&gt; np.array_equal(BifidCipher().letter_to_numbers(&#x27;u&#x27;), [4,5])\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        index1, index2 = np.where(self.SQUARE == letter)\r\n        indexes = np.concatenate([index1 + <span class=\"hljs-number\">1</span>, index2 + <span class=\"hljs-number\">1</span>])\r\n        <span class=\"hljs-keyword\">return</span> indexes\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">numbers_to_letter</span>(<span class=\"hljs-params\">self, index1: <span class=\"hljs-built_in\">int</span>, index2: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the letter corresponding to the position [index1, index2] in\r\n        the polybius square\r\n\r\n        &gt;&gt;&gt; BifidCipher().numbers_to_letter(4, 5) == &quot;u&quot;\r\n        True\r\n\r\n        &gt;&gt;&gt; BifidCipher().numbers_to_letter(1, 1) == &quot;a&quot;\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        letter = self.SQUARE[index1 - <span class=\"hljs-number\">1</span>, index2 - <span class=\"hljs-number\">1</span>]\r\n        <span class=\"hljs-keyword\">return</span> letter\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encode</span>(<span class=\"hljs-params\">self, message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the encoded version of message according to the polybius cipher\r\n\r\n        &gt;&gt;&gt; BifidCipher().encode(&#x27;testmessage&#x27;) == &#x27;qtltbdxrxlk&#x27;\r\n        True\r\n\r\n        &gt;&gt;&gt; BifidCipher().encode(&#x27;Test Message&#x27;) == &#x27;qtltbdxrxlk&#x27;\r\n        True\r\n\r\n        &gt;&gt;&gt; BifidCipher().encode(&#x27;test j&#x27;) == BifidCipher().encode(&#x27;test i&#x27;)\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        message = message.lower()\r\n        message = message.replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\r\n        message = message.replace(<span class=\"hljs-string\">&quot;j&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>)\r\n\r\n        first_step = np.empty((<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">len</span>(message)))\r\n        <span class=\"hljs-keyword\">for</span> letter_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(message)):\r\n            numbers = self.letter_to_numbers(message[letter_index])\r\n\r\n            first_step[<span class=\"hljs-number\">0</span>, letter_index] = numbers[<span class=\"hljs-number\">0</span>]\r\n            first_step[<span class=\"hljs-number\">1</span>, letter_index] = numbers[<span class=\"hljs-number\">1</span>]\r\n\r\n        second_step = first_step.reshape(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">len</span>(message))\r\n        encoded_message = <span class=\"hljs-string\">&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">for</span> numbers_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(message)):\r\n            index1 = <span class=\"hljs-built_in\">int</span>(second_step[numbers_index * <span class=\"hljs-number\">2</span>])\r\n            index2 = <span class=\"hljs-built_in\">int</span>(second_step[(numbers_index * <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>])\r\n            letter = self.numbers_to_letter(index1, index2)\r\n            encoded_message = encoded_message + letter\r\n\r\n        <span class=\"hljs-keyword\">return</span> encoded_message\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-params\">self, message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the decoded version of message according to the polybius cipher\r\n\r\n        &gt;&gt;&gt; BifidCipher().decode(&#x27;qtltbdxrxlk&#x27;) == &#x27;testmessage&#x27;\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        message = message.lower()\r\n        message.replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\r\n        first_step = np.empty(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">len</span>(message))\r\n        <span class=\"hljs-keyword\">for</span> letter_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(message)):\r\n            numbers = self.letter_to_numbers(message[letter_index])\r\n            first_step[letter_index * <span class=\"hljs-number\">2</span>] = numbers[<span class=\"hljs-number\">0</span>]\r\n            first_step[letter_index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>] = numbers[<span class=\"hljs-number\">1</span>]\r\n\r\n        second_step = first_step.reshape((<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">len</span>(message)))\r\n        decoded_message = <span class=\"hljs-string\">&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">for</span> numbers_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(message)):\r\n            index1 = <span class=\"hljs-built_in\">int</span>(second_step[<span class=\"hljs-number\">0</span>, numbers_index])\r\n            index2 = <span class=\"hljs-built_in\">int</span>(second_step[<span class=\"hljs-number\">1</span>, numbers_index])\r\n            letter = self.numbers_to_letter(index1, index2)\r\n            decoded_message = decoded_message + letter\r\n\r\n        <span class=\"hljs-keyword\">return</span> decoded_message\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vinicius Cordeiro",
      "email": "marcos.cordeiroal@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}