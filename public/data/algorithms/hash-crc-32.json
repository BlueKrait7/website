{
  "slug": "hash-crc-32",
  "name": "Hash Crc 32",
  "categories": [
    "hashing"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "hash\\hash_crc32.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/hash\\hash_crc32.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @addtogroup hash Hash algorithms\r\n * @{\r\n * @file hash_crc32.c\r\n * @author [Christian Bender](https://github.com/christianbender)\r\n * @brief 32-bit [CRC\r\n * hash](https://en.wikipedia.org/wiki/Cyclic_redundancy_check#CRC-32_algorithm)\r\n * algorithm\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief 32-bit CRC algorithm implementation\r\n *\r\n * @param s NULL terminated ASCII string to hash\r\n * @return 32-bit hash result\r\n */</span>\r\n<span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title function_\">crc32</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* s)</span>\r\n{\r\n    <span class=\"hljs-type\">uint32_t</span> crc = <span class=\"hljs-number\">0xffffffff</span>;\r\n    <span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> (s[i] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)\r\n    {\r\n        <span class=\"hljs-type\">uint8_t</span> byte = s[i];\r\n        crc = crc ^ byte;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> j = <span class=\"hljs-number\">8</span>; j &gt; <span class=\"hljs-number\">0</span>; --j)\r\n        {\r\n            crc = (crc &gt;&gt; <span class=\"hljs-number\">1</span>) ^ (<span class=\"hljs-number\">0xEDB88320</span> &amp; (-(crc &amp; <span class=\"hljs-number\">1</span>)));\r\n        }\r\n\r\n        i++;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> crc ^ <span class=\"hljs-number\">0xffffffff</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function for ::crc32\r\n * \\returns None\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test_crc32</span><span class=\"hljs-params\">()</span>\r\n{\r\n    assert(crc32(<span class=\"hljs-string\">&quot;Hello World&quot;</span>) == <span class=\"hljs-number\">1243066710</span>);\r\n    assert(crc32(<span class=\"hljs-string\">&quot;Hello World!&quot;</span>) == <span class=\"hljs-number\">472456355</span>);\r\n    assert(crc32(<span class=\"hljs-string\">&quot;Hello world&quot;</span>) == <span class=\"hljs-number\">2346098258</span>);\r\n    assert(crc32(<span class=\"hljs-string\">&quot;Hello world!&quot;</span>) == <span class=\"hljs-number\">461707669</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Tests passed\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** @} */</span>\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    test_crc32();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}