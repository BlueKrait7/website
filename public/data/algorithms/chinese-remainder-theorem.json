{
  "slug": "chinese-remainder-theorem",
  "name": "Chinese Remainder Theorem",
  "categories": [
    "blockchain"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "blockchain\\chinese_remainder_theorem.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/blockchain\\chinese_remainder_theorem.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nChinese Remainder Theorem:\r\nGCD ( Greatest Common Divisor ) or HCF ( Highest Common Factor )\r\n\r\nIf GCD(a,b) = 1, then for any remainder ra modulo a and any remainder rb modulo b\r\nthere exists integer n, such that n = ra (mod a) and n = ra(mod b).  If n1 and n2 are\r\ntwo such integers, then n1=n2(mod ab)\r\n\r\nAlgorithm :\r\n\r\n1. Use extended euclid algorithm to find x,y such that a*x + b*y = 1\r\n2. Take n = ra*by + rb*ax\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-comment\"># Extended Euclid</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extended_euclid</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; extended_euclid(10, 6)\r\n    (-1, 2)\r\n\r\n    &gt;&gt;&gt; extended_euclid(7, 5)\r\n    (-2, 3)\r\n\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> b == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)\r\n    (x, y) = extended_euclid(b, a % b)\r\n    k = a // b\r\n    <span class=\"hljs-keyword\">return</span> (y, x - k * y)\r\n\r\n\r\n<span class=\"hljs-comment\"># Uses ExtendedEuclid to find inverses</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chinese_remainder_theorem</span>(<span class=\"hljs-params\">n1: <span class=\"hljs-built_in\">int</span>, r1: <span class=\"hljs-built_in\">int</span>, n2: <span class=\"hljs-built_in\">int</span>, r2: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; chinese_remainder_theorem(5,1,7,3)\r\n    31\r\n\r\n    Explanation : 31 is the smallest number such that\r\n                (i)  When we divide it by 5, we get remainder 1\r\n                (ii) When we divide it by 7, we get remainder 3\r\n\r\n    &gt;&gt;&gt; chinese_remainder_theorem(6,1,4,3)\r\n    14\r\n\r\n    &quot;&quot;&quot;</span>\r\n    (x, y) = extended_euclid(n1, n2)\r\n    m = n1 * n2\r\n    n = r2 * x * n1 + r1 * y * n2\r\n    <span class=\"hljs-keyword\">return</span> (n % m + m) % m\r\n\r\n\r\n<span class=\"hljs-comment\"># ----------SAME SOLUTION USING InvertModulo instead ExtendedEuclid----------------</span>\r\n\r\n<span class=\"hljs-comment\"># This function find the inverses of a i.e., a^(-1)</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">invert_modulo</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; invert_modulo(2, 5)\r\n    3\r\n\r\n    &gt;&gt;&gt; invert_modulo(8,7)\r\n    1\r\n\r\n    &quot;&quot;&quot;</span>\r\n    (b, x) = extended_euclid(a, n)\r\n    <span class=\"hljs-keyword\">if</span> b &lt; <span class=\"hljs-number\">0</span>:\r\n        b = (b % n + n) % n\r\n    <span class=\"hljs-keyword\">return</span> b\r\n\r\n\r\n<span class=\"hljs-comment\"># Same a above using InvertingModulo</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chinese_remainder_theorem2</span>(<span class=\"hljs-params\">n1: <span class=\"hljs-built_in\">int</span>, r1: <span class=\"hljs-built_in\">int</span>, n2: <span class=\"hljs-built_in\">int</span>, r2: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; chinese_remainder_theorem2(5,1,7,3)\r\n    31\r\n\r\n    &gt;&gt;&gt; chinese_remainder_theorem2(6,1,4,3)\r\n    14\r\n\r\n    &quot;&quot;&quot;</span>\r\n    x, y = invert_modulo(n1, n2), invert_modulo(n2, n1)\r\n    m = n1 * n2\r\n    n = r2 * x * n1 + r1 * y * n2\r\n    <span class=\"hljs-keyword\">return</span> (n % m + m) % m\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod(name=<span class=\"hljs-string\">&quot;chinese_remainder_theorem&quot;</span>, verbose=<span class=\"hljs-literal\">True</span>)\r\n    testmod(name=<span class=\"hljs-string\">&quot;chinese_remainder_theorem2&quot;</span>, verbose=<span class=\"hljs-literal\">True</span>)\r\n    testmod(name=<span class=\"hljs-string\">&quot;invert_modulo&quot;</span>, verbose=<span class=\"hljs-literal\">True</span>)\r\n    testmod(name=<span class=\"hljs-string\">&quot;extended_euclid&quot;</span>, verbose=<span class=\"hljs-literal\">True</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "John Law",
      "email": "johnlaw.po@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jie Han",
      "email": "jay.cn@outlook.com",
      "commits": 1
    },
    {
      "name": "Phyllipe Bezerra",
      "email": "32442929+pmba@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sushil Singh",
      "email": "36241112+OddExtension5@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}