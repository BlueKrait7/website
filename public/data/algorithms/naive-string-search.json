{
  "slug": "naive-string-search",
  "name": "Naive String Search",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings\\naive_string_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings\\naive_string_search.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nhttps://en.wikipedia.org/wiki/String-searching_algorithm#Na%C3%AFve_string_search\r\nthis algorithm tries to find the pattern from every position of\r\nthe mainString if pattern is found from position i it add it to\r\nthe answer and does the same for position i+1\r\nComplexity : O(n*m)\r\n    n=length of main string\r\n    m=length of pattern string\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">naive_pattern_search</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span>, pattern: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; naive_pattern_search(&quot;ABAAABCDBBABCDDEBCABC&quot;, &quot;ABC&quot;)\r\n    [4, 10, 18]\r\n    &gt;&gt;&gt; naive_pattern_search(&quot;ABC&quot;, &quot;ABAAABCDBBABCDDEBCABC&quot;)\r\n    []\r\n    &gt;&gt;&gt; naive_pattern_search(&quot;&quot;, &quot;ABC&quot;)\r\n    []\r\n    &gt;&gt;&gt; naive_pattern_search(&quot;TEST&quot;, &quot;TEST&quot;)\r\n    [0]\r\n    &gt;&gt;&gt; naive_pattern_search(&quot;ABCDEGFTEST&quot;, &quot;TEST&quot;)\r\n    [7]\r\n    &quot;&quot;&quot;</span>\r\n    pat_len = <span class=\"hljs-built_in\">len</span>(pattern)\r\n    position = []\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s) - pat_len + <span class=\"hljs-number\">1</span>):\r\n        match_found = <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(pat_len):\r\n            <span class=\"hljs-keyword\">if</span> s[i + j] != pattern[j]:\r\n                match_found = <span class=\"hljs-literal\">False</span>\r\n                <span class=\"hljs-keyword\">break</span>\r\n        <span class=\"hljs-keyword\">if</span> match_found:\r\n            position.append(i)\r\n    <span class=\"hljs-keyword\">return</span> position\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">assert</span> naive_pattern_search(<span class=\"hljs-string\">&quot;ABCDEFG&quot;</span>, <span class=\"hljs-string\">&quot;DE&quot;</span>) == [<span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-built_in\">print</span>(naive_pattern_search(<span class=\"hljs-string\">&quot;ABAAABCDBBABCDDEBCABC&quot;</span>, <span class=\"hljs-string\">&quot;ABC&quot;</span>))\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Strings\\NaiveStringSearch.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Strings\\NaiveStringSearch.fs",
      "code": "ï»¿<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\r\n\r\n<span class=\"hljs-comment\">/// &lt;summary&gt;</span>\r\n<span class=\"hljs-comment\">/// https://en.wikipedia.org/wiki/String-searching_algorithm#Na%C3%AFve_string_search</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// This algorithm tries to find the pattern from every position of</span>\r\n<span class=\"hljs-comment\">/// the mainString if pattern is found from position i it add it to</span>\r\n<span class=\"hljs-comment\">/// the answer and does the same for position i+1</span>\r\n<span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// &lt;remarks&gt;</span>\r\n<span class=\"hljs-comment\">/// Complexity : O(n*m)</span>\r\n<span class=\"hljs-comment\">///     n=length of main string</span>\r\n<span class=\"hljs-comment\">///     m=length of pattern string</span>\r\n<span class=\"hljs-comment\">/// &lt;/remarks&gt;</span>\r\n<span class=\"hljs-keyword\">module</span> NaiveStringSearch <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;example&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;code&gt;</span>\r\n    <span class=\"hljs-comment\">/// naive_pattern_search(&quot;ABAAABCDBBABCDDEBCABC&quot;, &quot;ABC&quot;)</span>\r\n    <span class=\"hljs-comment\">/// [4, 10, 18]</span>\r\n    <span class=\"hljs-comment\">///</span>\r\n    <span class=\"hljs-comment\">/// naive_pattern_search(&quot;ABC&quot;, &quot;ABAAABCDBBABCDDEBCABC&quot;)</span>\r\n    <span class=\"hljs-comment\">/// []</span>\r\n    <span class=\"hljs-comment\">///</span>\r\n    <span class=\"hljs-comment\">/// naive_pattern_search(&quot;&quot;, &quot;ABC&quot;)</span>\r\n    <span class=\"hljs-comment\">/// []</span>\r\n    <span class=\"hljs-comment\">///</span>\r\n    <span class=\"hljs-comment\">/// naive_pattern_search(&quot;TEST&quot;, &quot;TEST&quot;)</span>\r\n    <span class=\"hljs-comment\">/// [0]</span>\r\n    <span class=\"hljs-comment\">///</span>\r\n    <span class=\"hljs-comment\">/// naive_pattern_search(&quot;ABCDEGFTEST&quot;, &quot;TEST&quot;)</span>\r\n    <span class=\"hljs-comment\">/// [7]</span>\r\n    <span class=\"hljs-comment\">/// &lt;/code&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;/example&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;s&quot;&gt;&lt;/param&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;pattern&quot;&gt;&lt;/param&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;returns&gt;List of positions&lt;/returns&gt;</span>\r\n    <span class=\"hljs-keyword\">let</span> naivePatternSearch (s<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>, pattern<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-type\">list</span> <span class=\"hljs-operator\">=</span>\r\n        s.ToCharArray()\r\n        <span class=\"hljs-operator\">|&gt;</span> Seq.mapi\r\n            (<span class=\"hljs-keyword\">fun</span> i x <span class=\"hljs-operator\">-&gt;</span>\r\n                <span class=\"hljs-keyword\">let</span> myv <span class=\"hljs-operator\">=</span> pattern.[<span class=\"hljs-number\">0</span>]\r\n\r\n                <span class=\"hljs-keyword\">if</span> x <span class=\"hljs-operator\">=</span> pattern.[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">then</span>\r\n                    (i, s.[i<span class=\"hljs-operator\">..</span>(i <span class=\"hljs-operator\">+</span> (pattern.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>))])\r\n                <span class=\"hljs-keyword\">else</span>\r\n                    (i, <span class=\"hljs-string\">&quot;&quot;</span>))\r\n        <span class=\"hljs-operator\">|&gt;</span> Seq.where (<span class=\"hljs-keyword\">fun</span> (i, x) <span class=\"hljs-operator\">-&gt;</span> pattern <span class=\"hljs-operator\">=</span> x)\r\n        <span class=\"hljs-operator\">|&gt;</span> Seq.map (<span class=\"hljs-keyword\">fun</span> (i, x) <span class=\"hljs-operator\">-&gt;</span> i)\r\n        <span class=\"hljs-operator\">|&gt;</span> List.ofSeq\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Strings/NaiveStringSearch.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Strings\\NaiveStringSearch.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-comment\">// Implements the traditional naive string matching algorithm in C# for TheAlgorithms/C-Sharp.</span>\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Strings</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Implements the traditional naive string matching algorithm in C#.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NaiveStringSearch</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     NaiveSearch(Content, Pattern) will return an array containing each index of Content in which Pattern appears.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Cost:  O(n*m).</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;content&quot;&gt;</span>The text body across which to search for a given pattern.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;pattern&quot;&gt;</span>The pattern against which to check the given text body.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Array containing each index of Content in which Pattern appears.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">NaiveSearch</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> content, <span class=\"hljs-built_in\">string</span> pattern</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> m = pattern.Length;\r\n            <span class=\"hljs-keyword\">var</span> n = content.Length;\r\n            List&lt;<span class=\"hljs-built_in\">int</span>&gt; indices = <span class=\"hljs-keyword\">new</span>();\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> e = <span class=\"hljs-number\">0</span>; e &lt;= n - m; e++)\r\n            {\r\n                <span class=\"hljs-built_in\">int</span> j;\r\n                <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; m; j++)\r\n                {\r\n                    <span class=\"hljs-keyword\">if</span> (content[e + j] != pattern[j])\r\n                    {\r\n                        <span class=\"hljs-keyword\">break</span>;\r\n                    }\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (j == m)\r\n                {\r\n                    indices.Add(e);\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> indices.ToArray();\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Vasken Houdoverdov",
      "email": "vhcomptech@gmail.com",
      "commits": 1
    },
    {
      "name": "halafi",
      "email": "filiphalas74@gmail.com",
      "commits": 1
    },
    {
      "name": "dharni0607",
      "email": "dharanidevi.a16@iiits.in",
      "commits": 1
    },
    {
      "name": "Shubham Ganar",
      "email": "67952129+shubhamsg199@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Reshad Hasan",
      "email": "reshadhasan555@gmail.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}