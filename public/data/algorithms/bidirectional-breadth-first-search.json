{
  "slug": "bidirectional-breadth-first-search",
  "name": "Bidirectional Breadth First Search",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\bidirectional_breadth_first_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\bidirectional_breadth_first_search.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nhttps://en.wikipedia.org/wiki/Bidirectional_search\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> time\r\n\r\nPath = <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]]\r\n\r\ngrid = [\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],  <span class=\"hljs-comment\"># 0 are free path whereas 1&#x27;s are obstacles</span>\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n]\r\n\r\ndelta = [[-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]]  <span class=\"hljs-comment\"># up, left, down, right</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">\r\n        self, pos_x: <span class=\"hljs-built_in\">int</span>, pos_y: <span class=\"hljs-built_in\">int</span>, goal_x: <span class=\"hljs-built_in\">int</span>, goal_y: <span class=\"hljs-built_in\">int</span>, parent: Node | <span class=\"hljs-literal\">None</span>\r\n    </span>):\r\n        self.pos_x = pos_x\r\n        self.pos_y = pos_y\r\n        self.pos = (pos_y, pos_x)\r\n        self.goal_x = goal_x\r\n        self.goal_y = goal_y\r\n        self.parent = parent\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BreadthFirstSearch</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    # Comment out slow pytests...\r\n    # 9.15s call     graphs/bidirectional_breadth_first_search.py:: \\\r\n    #                graphs.bidirectional_breadth_first_search.BreadthFirstSearch\r\n    # &gt;&gt;&gt; bfs = BreadthFirstSearch((0, 0), (len(grid) - 1, len(grid[0]) - 1))\r\n    # &gt;&gt;&gt; (bfs.start.pos_y + delta[3][0], bfs.start.pos_x + delta[3][1])\r\n    (0, 1)\r\n    # &gt;&gt;&gt; [x.pos for x in bfs.get_successors(bfs.start)]\r\n    [(1, 0), (0, 1)]\r\n    # &gt;&gt;&gt; (bfs.start.pos_y + delta[2][0], bfs.start.pos_x + delta[2][1])\r\n    (1, 0)\r\n    # &gt;&gt;&gt; bfs.retrace_path(bfs.start)\r\n    [(0, 0)]\r\n    # &gt;&gt;&gt; bfs.search()  # doctest: +NORMALIZE_WHITESPACE\r\n    [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1),\r\n     (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (6, 5), (6, 6)]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, start: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>], goal: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]</span>):\r\n        self.start = Node(start[<span class=\"hljs-number\">1</span>], start[<span class=\"hljs-number\">0</span>], goal[<span class=\"hljs-number\">1</span>], goal[<span class=\"hljs-number\">0</span>], <span class=\"hljs-literal\">None</span>)\r\n        self.target = Node(goal[<span class=\"hljs-number\">1</span>], goal[<span class=\"hljs-number\">0</span>], goal[<span class=\"hljs-number\">1</span>], goal[<span class=\"hljs-number\">0</span>], <span class=\"hljs-literal\">None</span>)\r\n\r\n        self.node_queue = [self.start]\r\n        self.reached = <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self</span>) -&gt; Path | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">while</span> self.node_queue:\r\n            current_node = self.node_queue.pop(<span class=\"hljs-number\">0</span>)\r\n\r\n            <span class=\"hljs-keyword\">if</span> current_node.pos == self.target.pos:\r\n                self.reached = <span class=\"hljs-literal\">True</span>\r\n                <span class=\"hljs-keyword\">return</span> self.retrace_path(current_node)\r\n\r\n            successors = self.get_successors(current_node)\r\n\r\n            <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> successors:\r\n                self.node_queue.append(node)\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.reached:\r\n            <span class=\"hljs-keyword\">return</span> [self.start.pos]\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_successors</span>(<span class=\"hljs-params\">self, parent: Node</span>) -&gt; <span class=\"hljs-built_in\">list</span>[Node]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Returns a list of successors (both in the grid and free spaces)\r\n        &quot;&quot;&quot;</span>\r\n        successors = []\r\n        <span class=\"hljs-keyword\">for</span> action <span class=\"hljs-keyword\">in</span> delta:\r\n            pos_x = parent.pos_x + action[<span class=\"hljs-number\">1</span>]\r\n            pos_y = parent.pos_y + action[<span class=\"hljs-number\">0</span>]\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (<span class=\"hljs-number\">0</span> &lt;= pos_x &lt;= <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]) - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= pos_y &lt;= <span class=\"hljs-built_in\">len</span>(grid) - <span class=\"hljs-number\">1</span>):\r\n                <span class=\"hljs-keyword\">continue</span>\r\n\r\n            <span class=\"hljs-keyword\">if</span> grid[pos_y][pos_x] != <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">continue</span>\r\n\r\n            successors.append(\r\n                Node(pos_x, pos_y, self.target.pos_y, self.target.pos_x, parent)\r\n            )\r\n        <span class=\"hljs-keyword\">return</span> successors\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">retrace_path</span>(<span class=\"hljs-params\">self, node: Node | <span class=\"hljs-literal\">None</span></span>) -&gt; Path:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Retrace the path from parents to parents until start node\r\n        &quot;&quot;&quot;</span>\r\n        current_node = node\r\n        path = []\r\n        <span class=\"hljs-keyword\">while</span> current_node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            path.append((current_node.pos_y, current_node.pos_x))\r\n            current_node = current_node.parent\r\n        path.reverse()\r\n        <span class=\"hljs-keyword\">return</span> path\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BidirectionalBreadthFirstSearch</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; bd_bfs = BidirectionalBreadthFirstSearch((0, 0), (len(grid) - 1,\r\n    ...                                                   len(grid[0]) - 1))\r\n    &gt;&gt;&gt; bd_bfs.fwd_bfs.start.pos == bd_bfs.bwd_bfs.target.pos\r\n    True\r\n    &gt;&gt;&gt; bd_bfs.retrace_bidirectional_path(bd_bfs.fwd_bfs.start,\r\n    ...                                     bd_bfs.bwd_bfs.start)\r\n    [(0, 0)]\r\n    &gt;&gt;&gt; bd_bfs.search()  # doctest: +NORMALIZE_WHITESPACE\r\n    [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (2, 3),\r\n     (2, 4), (3, 4), (3, 5), (3, 6), (4, 6), (5, 6), (6, 6)]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, start, goal</span>):\r\n        self.fwd_bfs = BreadthFirstSearch(start, goal)\r\n        self.bwd_bfs = BreadthFirstSearch(goal, start)\r\n        self.reached = <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self</span>) -&gt; Path | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">while</span> self.fwd_bfs.node_queue <span class=\"hljs-keyword\">or</span> self.bwd_bfs.node_queue:\r\n            current_fwd_node = self.fwd_bfs.node_queue.pop(<span class=\"hljs-number\">0</span>)\r\n            current_bwd_node = self.bwd_bfs.node_queue.pop(<span class=\"hljs-number\">0</span>)\r\n\r\n            <span class=\"hljs-keyword\">if</span> current_bwd_node.pos == current_fwd_node.pos:\r\n                self.reached = <span class=\"hljs-literal\">True</span>\r\n                <span class=\"hljs-keyword\">return</span> self.retrace_bidirectional_path(\r\n                    current_fwd_node, current_bwd_node\r\n                )\r\n\r\n            self.fwd_bfs.target = current_bwd_node\r\n            self.bwd_bfs.target = current_fwd_node\r\n\r\n            successors = {\r\n                self.fwd_bfs: self.fwd_bfs.get_successors(current_fwd_node),\r\n                self.bwd_bfs: self.bwd_bfs.get_successors(current_bwd_node),\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">for</span> bfs <span class=\"hljs-keyword\">in</span> [self.fwd_bfs, self.bwd_bfs]:\r\n                <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> successors[bfs]:\r\n                    bfs.node_queue.append(node)\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.reached:\r\n            <span class=\"hljs-keyword\">return</span> [self.fwd_bfs.start.pos]\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">retrace_bidirectional_path</span>(<span class=\"hljs-params\">self, fwd_node: Node, bwd_node: Node</span>) -&gt; Path:\r\n        fwd_path = self.fwd_bfs.retrace_path(fwd_node)\r\n        bwd_path = self.bwd_bfs.retrace_path(bwd_node)\r\n        bwd_path.pop()\r\n        bwd_path.reverse()\r\n        path = fwd_path + bwd_path\r\n        <span class=\"hljs-keyword\">return</span> path\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-comment\"># all coordinates are given in format [y,x]</span>\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    init = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n    goal = (<span class=\"hljs-built_in\">len</span>(grid) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]) - <span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> grid:\r\n        <span class=\"hljs-built_in\">print</span>(elem)\r\n\r\n    start_bfs_time = time.time()\r\n    bfs = BreadthFirstSearch(init, goal)\r\n    path = bfs.search()\r\n    bfs_time = time.time() - start_bfs_time\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Unidirectional BFS computation time : &quot;</span>, bfs_time)\r\n\r\n    start_bd_bfs_time = time.time()\r\n    bd_bfs = BidirectionalBreadthFirstSearch(init, goal)\r\n    bd_path = bd_bfs.search()\r\n    bd_bfs_time = time.time() - start_bd_bfs_time\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Bidirectional BFS computation time : &quot;</span>, bd_bfs_time)\r\n"
    }
  },
  "contributors": [
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "beqakd",
      "email": "39763019+beqakd@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erwin Lejeune",
      "email": "erwin.lejeune15@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}