{
  "slug": "dijkstra-algorithm",
  "name": "Dijkstra Algorithm",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\dijkstra_algorithm.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\dijkstra_algorithm.py",
      "code": "<span class=\"hljs-comment\"># Title: Dijkstra&#x27;s Algorithm for finding single source shortest path from scratch</span>\r\n<span class=\"hljs-comment\"># Author: Shubham Malik</span>\r\n<span class=\"hljs-comment\"># References: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n<span class=\"hljs-keyword\">import</span> sys\r\n\r\n<span class=\"hljs-comment\"># For storing the vertex set to retrieve node with the lowest distance</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PriorityQueue</span>:\r\n    <span class=\"hljs-comment\"># Based on Min Heap</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\r\n        self.cur_size = <span class=\"hljs-number\">0</span>\r\n        self.array = []\r\n        self.pos = {}  <span class=\"hljs-comment\"># To store the pos of node in array</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isEmpty</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.cur_size == <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">min_heapify</span>(<span class=\"hljs-params\">self, idx</span>):\r\n        lc = self.left(idx)\r\n        rc = self.right(idx)\r\n        <span class=\"hljs-keyword\">if</span> lc &lt; self.cur_size <span class=\"hljs-keyword\">and</span> self.array(lc)[<span class=\"hljs-number\">0</span>] &lt; self.array(idx)[<span class=\"hljs-number\">0</span>]:\r\n            smallest = lc\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            smallest = idx\r\n        <span class=\"hljs-keyword\">if</span> rc &lt; self.cur_size <span class=\"hljs-keyword\">and</span> self.array(rc)[<span class=\"hljs-number\">0</span>] &lt; self.array(smallest)[<span class=\"hljs-number\">0</span>]:\r\n            smallest = rc\r\n        <span class=\"hljs-keyword\">if</span> smallest != idx:\r\n            self.swap(idx, smallest)\r\n            self.min_heapify(smallest)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, tup</span>):\r\n        <span class=\"hljs-comment\"># Inserts a node into the Priority Queue</span>\r\n        self.pos[tup[<span class=\"hljs-number\">1</span>]] = self.cur_size\r\n        self.cur_size += <span class=\"hljs-number\">1</span>\r\n        self.array.append((sys.maxsize, tup[<span class=\"hljs-number\">1</span>]))\r\n        self.decrease_key((sys.maxsize, tup[<span class=\"hljs-number\">1</span>]), tup[<span class=\"hljs-number\">0</span>])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extract_min</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-comment\"># Removes and returns the min element at top of priority queue</span>\r\n        min_node = self.array[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]\r\n        self.array[<span class=\"hljs-number\">0</span>] = self.array[self.cur_size - <span class=\"hljs-number\">1</span>]\r\n        self.cur_size -= <span class=\"hljs-number\">1</span>\r\n        self.min_heapify(<span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">del</span> self.pos[min_node]\r\n        <span class=\"hljs-keyword\">return</span> min_node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">left</span>(<span class=\"hljs-params\">self, i</span>):\r\n        <span class=\"hljs-comment\"># returns the index of left child</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">right</span>(<span class=\"hljs-params\">self, i</span>):\r\n        <span class=\"hljs-comment\"># returns the index of right child</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">par</span>(<span class=\"hljs-params\">self, i</span>):\r\n        <span class=\"hljs-comment\"># returns the index of parent</span>\r\n        <span class=\"hljs-keyword\">return</span> math.floor(i / <span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">swap</span>(<span class=\"hljs-params\">self, i, j</span>):\r\n        <span class=\"hljs-comment\"># swaps array elements at indices i and j</span>\r\n        <span class=\"hljs-comment\"># update the pos{}</span>\r\n        self.pos[self.array[i][<span class=\"hljs-number\">1</span>]] = j\r\n        self.pos[self.array[j][<span class=\"hljs-number\">1</span>]] = i\r\n        temp = self.array[i]\r\n        self.array[i] = self.array[j]\r\n        self.array[j] = temp\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrease_key</span>(<span class=\"hljs-params\">self, tup, new_d</span>):\r\n        idx = self.pos[tup[<span class=\"hljs-number\">1</span>]]\r\n        <span class=\"hljs-comment\"># assuming the new_d is atmost old_d</span>\r\n        self.array[idx] = (new_d, tup[<span class=\"hljs-number\">1</span>])\r\n        <span class=\"hljs-keyword\">while</span> idx &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> self.array[self.par(idx)][<span class=\"hljs-number\">0</span>] &gt; self.array[idx][<span class=\"hljs-number\">0</span>]:\r\n            self.swap(idx, self.par(idx))\r\n            idx = self.par(idx)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, num</span>):\r\n        self.adjList = {}  <span class=\"hljs-comment\"># To store graph: u -&gt; (v,w)</span>\r\n        self.num_nodes = num  <span class=\"hljs-comment\"># Number of nodes in graph</span>\r\n        <span class=\"hljs-comment\"># To store the distance from source vertex</span>\r\n        self.dist = [<span class=\"hljs-number\">0</span>] * self.num_nodes\r\n        self.par = [-<span class=\"hljs-number\">1</span>] * self.num_nodes  <span class=\"hljs-comment\"># To store the path</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_edge</span>(<span class=\"hljs-params\">self, u, v, w</span>):\r\n        <span class=\"hljs-comment\">#  Edge going from node u to v and v to u with weight w</span>\r\n        <span class=\"hljs-comment\"># u (w)-&gt; v, v (w) -&gt; u</span>\r\n        <span class=\"hljs-comment\"># Check if u already in graph</span>\r\n        <span class=\"hljs-keyword\">if</span> u <span class=\"hljs-keyword\">in</span> self.adjList.keys():\r\n            self.adjList[u].append((v, w))\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.adjList[u] = [(v, w)]\r\n\r\n        <span class=\"hljs-comment\"># Assuming undirected graph</span>\r\n        <span class=\"hljs-keyword\">if</span> v <span class=\"hljs-keyword\">in</span> self.adjList.keys():\r\n            self.adjList[v].append((u, w))\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.adjList[v] = [(u, w)]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_graph</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-comment\"># u -&gt; v(w)</span>\r\n        <span class=\"hljs-keyword\">for</span> u <span class=\"hljs-keyword\">in</span> self.adjList:\r\n            <span class=\"hljs-built_in\">print</span>(u, <span class=\"hljs-string\">&quot;-&gt;&quot;</span>, <span class=\"hljs-string\">&quot; -&gt; &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{v}</span>(<span class=\"hljs-subst\">{w}</span>)&quot;</span>) <span class=\"hljs-keyword\">for</span> v, w <span class=\"hljs-keyword\">in</span> self.adjList[u]))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dijkstra</span>(<span class=\"hljs-params\">self, src</span>):\r\n        <span class=\"hljs-comment\"># Flush old junk values in par[]</span>\r\n        self.par = [-<span class=\"hljs-number\">1</span>] * self.num_nodes\r\n        <span class=\"hljs-comment\"># src is the source node</span>\r\n        self.dist[src] = <span class=\"hljs-number\">0</span>\r\n        Q = PriorityQueue()\r\n        Q.insert((<span class=\"hljs-number\">0</span>, src))  <span class=\"hljs-comment\"># (dist from src, node)</span>\r\n        <span class=\"hljs-keyword\">for</span> u <span class=\"hljs-keyword\">in</span> self.adjList.keys():\r\n            <span class=\"hljs-keyword\">if</span> u != src:\r\n                self.dist[u] = sys.maxsize  <span class=\"hljs-comment\"># Infinity</span>\r\n                self.par[u] = -<span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> Q.isEmpty():\r\n            u = Q.extract_min()  <span class=\"hljs-comment\"># Returns node with the min dist from source</span>\r\n            <span class=\"hljs-comment\"># Update the distance of all the neighbours of u and</span>\r\n            <span class=\"hljs-comment\"># if their prev dist was INFINITY then push them in Q</span>\r\n            <span class=\"hljs-keyword\">for</span> v, w <span class=\"hljs-keyword\">in</span> self.adjList[u]:\r\n                new_dist = self.dist[u] + w\r\n                <span class=\"hljs-keyword\">if</span> self.dist[v] &gt; new_dist:\r\n                    <span class=\"hljs-keyword\">if</span> self.dist[v] == sys.maxsize:\r\n                        Q.insert((new_dist, v))\r\n                    <span class=\"hljs-keyword\">else</span>:\r\n                        Q.decrease_key((self.dist[v], v), new_dist)\r\n                    self.dist[v] = new_dist\r\n                    self.par[v] = u\r\n\r\n        <span class=\"hljs-comment\"># Show the shortest distances from src</span>\r\n        self.show_distances(src)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_distances</span>(<span class=\"hljs-params\">self, src</span>):\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Distance from node: <span class=\"hljs-subst\">{src}</span>&quot;</span>)\r\n        <span class=\"hljs-keyword\">for</span> u <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_nodes):\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Node <span class=\"hljs-subst\">{u}</span> has distance: <span class=\"hljs-subst\">{self.dist[u]}</span>&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show_path</span>(<span class=\"hljs-params\">self, src, dest</span>):\r\n        <span class=\"hljs-comment\"># To show the shortest path from src to dest</span>\r\n        <span class=\"hljs-comment\"># WARNING: Use it *after* calling dijkstra</span>\r\n        path = []\r\n        cost = <span class=\"hljs-number\">0</span>\r\n        temp = dest\r\n        <span class=\"hljs-comment\"># Backtracking from dest to src</span>\r\n        <span class=\"hljs-keyword\">while</span> self.par[temp] != -<span class=\"hljs-number\">1</span>:\r\n            path.append(temp)\r\n            <span class=\"hljs-keyword\">if</span> temp != src:\r\n                <span class=\"hljs-keyword\">for</span> v, w <span class=\"hljs-keyword\">in</span> self.adjList[temp]:\r\n                    <span class=\"hljs-keyword\">if</span> v == self.par[temp]:\r\n                        cost += w\r\n                        <span class=\"hljs-keyword\">break</span>\r\n            temp = self.par[temp]\r\n        path.append(src)\r\n        path.reverse()\r\n\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;----Path to reach <span class=\"hljs-subst\">{dest}</span> from <span class=\"hljs-subst\">{src}</span>----&quot;</span>)\r\n        <span class=\"hljs-keyword\">for</span> u <span class=\"hljs-keyword\">in</span> path:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{u}</span>&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n            <span class=\"hljs-keyword\">if</span> u != dest:\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;-&gt; &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)\r\n\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nTotal cost of path: &quot;</span>, cost)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    graph = Graph(<span class=\"hljs-number\">9</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">14</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>)\r\n    graph.add_edge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>)\r\n    graph.show_graph()\r\n    graph.dijkstra(<span class=\"hljs-number\">0</span>)\r\n    graph.show_path(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>)\r\n\r\n<span class=\"hljs-comment\"># OUTPUT</span>\r\n<span class=\"hljs-comment\"># 0 -&gt; 1(4) -&gt; 7(8)</span>\r\n<span class=\"hljs-comment\"># 1 -&gt; 0(4) -&gt; 2(8) -&gt; 7(11)</span>\r\n<span class=\"hljs-comment\"># 7 -&gt; 0(8) -&gt; 1(11) -&gt; 6(1) -&gt; 8(7)</span>\r\n<span class=\"hljs-comment\"># 2 -&gt; 1(8) -&gt; 3(7) -&gt; 8(2) -&gt; 5(4)</span>\r\n<span class=\"hljs-comment\"># 3 -&gt; 2(7) -&gt; 4(9) -&gt; 5(14)</span>\r\n<span class=\"hljs-comment\"># 8 -&gt; 2(2) -&gt; 6(6) -&gt; 7(7)</span>\r\n<span class=\"hljs-comment\"># 5 -&gt; 2(4) -&gt; 3(14) -&gt; 4(10) -&gt; 6(2)</span>\r\n<span class=\"hljs-comment\"># 4 -&gt; 3(9) -&gt; 5(10)</span>\r\n<span class=\"hljs-comment\"># 6 -&gt; 5(2) -&gt; 7(1) -&gt; 8(6)</span>\r\n<span class=\"hljs-comment\"># Distance from node: 0</span>\r\n<span class=\"hljs-comment\"># Node 0 has distance: 0</span>\r\n<span class=\"hljs-comment\"># Node 1 has distance: 4</span>\r\n<span class=\"hljs-comment\"># Node 2 has distance: 12</span>\r\n<span class=\"hljs-comment\"># Node 3 has distance: 19</span>\r\n<span class=\"hljs-comment\"># Node 4 has distance: 21</span>\r\n<span class=\"hljs-comment\"># Node 5 has distance: 11</span>\r\n<span class=\"hljs-comment\"># Node 6 has distance: 9</span>\r\n<span class=\"hljs-comment\"># Node 7 has distance: 8</span>\r\n<span class=\"hljs-comment\"># Node 8 has distance: 14</span>\r\n<span class=\"hljs-comment\"># ----Path to reach 4 from 0----</span>\r\n<span class=\"hljs-comment\"># 0 -&gt; 7 -&gt; 6 -&gt; 5 -&gt; 4</span>\r\n<span class=\"hljs-comment\"># Total cost of path:  21</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "PK",
      "email": "kolosovp94@gmail.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "malikshubham827",
      "email": "malikshubham827@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}