{
  "slug": "aliquot-sum",
  "name": "Aliquot Sum",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\aliquot_sum.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\aliquot_sum.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">aliquot_sum</span>(<span class=\"hljs-params\">input_num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Finds the aliquot sum of an input integer, where the\r\n    aliquot sum of a number n is defined as the sum of all\r\n    natural numbers less than n that divide n evenly. For\r\n    example, the aliquot sum of 15 is 1 + 3 + 5 = 9. This is\r\n    a simple O(n) implementation.\r\n    @param input_num: a positive integer whose aliquot sum is to be found\r\n    @return: the aliquot sum of input_num, if input_num is positive.\r\n    Otherwise, raise a ValueError\r\n    Wikipedia Explanation: https://en.wikipedia.org/wiki/Aliquot_sum\r\n\r\n    &gt;&gt;&gt; aliquot_sum(15)\r\n    9\r\n    &gt;&gt;&gt; aliquot_sum(6)\r\n    6\r\n    &gt;&gt;&gt; aliquot_sum(-1)\r\n    Traceback (most recent call last):\r\n      ...\r\n    ValueError: Input must be positive\r\n    &gt;&gt;&gt; aliquot_sum(0)\r\n    Traceback (most recent call last):\r\n      ...\r\n    ValueError: Input must be positive\r\n    &gt;&gt;&gt; aliquot_sum(1.6)\r\n    Traceback (most recent call last):\r\n      ...\r\n    ValueError: Input must be an integer\r\n    &gt;&gt;&gt; aliquot_sum(12)\r\n    16\r\n    &gt;&gt;&gt; aliquot_sum(1)\r\n    0\r\n    &gt;&gt;&gt; aliquot_sum(19)\r\n    1\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(input_num, <span class=\"hljs-built_in\">int</span>):\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Input must be an integer&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> input_num &lt;= <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Input must be positive&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(\r\n        divisor <span class=\"hljs-keyword\">for</span> divisor <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, input_num // <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">if</span> input_num % divisor == <span class=\"hljs-number\">0</span>\r\n    )\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Maths\\test\\AliquotSum.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\AliquotSum.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { aliquotSum } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../AliquotSum&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Aliquot Sum of a Number&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Aliquot Sum of 6&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">aliquotSum</span>(<span class=\"hljs-number\">6</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">6</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Aliquot Sum of 1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">aliquotSum</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Aliquot Sum of 28&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">aliquotSum</span>(<span class=\"hljs-number\">28</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">28</span>)\r\n  })\r\n})\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\AliquotSum.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\AliquotSum.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * In number theory, the aliquot sum s(n) of a positive integer n is the sum of\r\n * all proper divisors of n, that is, all divisors of n other than n itself. For\r\n * example, the proper divisors of 15 (that is, the positive divisors of 15 that\r\n * are not equal to 15) are 1, 3 and 5, so the aliquot sum of 15 is 9 i.e. (1 +\r\n * 3 + 5). Wikipedia: https://en.wikipedia.org/wiki/Aliquot_sum\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AliquotSum</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span> == <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>)</span> == <span class=\"hljs-number\">6</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">15</span>)</span> == <span class=\"hljs-number\">9</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">19</span>)</span> == <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Finds the aliquot sum of an integer number\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> number a positive integer\r\n     * <span class=\"hljs-doctag\">@return</span> aliquot sum of given {<span class=\"hljs-doctag\">@code</span> number}\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>, limit = number / <span class=\"hljs-number\">2</span>; i &lt;= limit; ++i) {\r\n            <span class=\"hljs-keyword\">if</span> (number % i == <span class=\"hljs-number\">0</span>) {\r\n                sum += i;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> sum;\r\n    }\r\n}\r\n"
    },
    "ruby": {
      "dir": "maths\\aliquot_sum.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths\\aliquot_sum.rb",
      "code": "<span class=\"hljs-comment\"># frozen_string_literal: true</span>\r\n\r\nrequire_relative <span class=\"hljs-string\">&#x27;./square_root&#x27;</span>\r\nrequire_relative <span class=\"hljs-string\">&#x27;./ceil&#x27;</span>\r\n\r\n<span class=\"hljs-comment\"># Calculates the aliquot sum of a number (the sum of all proper divisors of a number)</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AliquotSum</span></span>\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> &lt;&lt; self</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span><span class=\"hljs-params\">(number)</span></span>\r\n      divisors(number).sum\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    private\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">divisors</span><span class=\"hljs-params\">(number)</span></span>\r\n      low_divisors = (<span class=\"hljs-number\">1</span>..Ceil.call(SquareRoot.call(number))).select { <span class=\"hljs-params\">|num|</span> (number % num).zero? }\r\n      high_divisors = low_divisors.map { <span class=\"hljs-params\">|div|</span> number / div }\r\n      (low_divisors + high_divisors).uniq - [number]\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Numeric/AliquotSumCalculator.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Numeric\\AliquotSumCalculator.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     In number theory, the aliquot sum s(n) of a positive integer n is the sum of all proper divisors</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     of n, that is, all divisors of n other than n itself. For example, the proper divisors of 15</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (that is, the positive divisors of 15 that are not equal to 15) are 1, 3 and 5, so the aliquot</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     sum of 15 is 9 i.e. (1 + 3 + 5). Wikipedia: https://en.wikipedia.org/wiki/Aliquot_sum.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AliquotSumCalculator</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds the aliquot sum of an integer number.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>Positive number.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The Aliquot Sum.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error number is not on interval (0.0; int.MaxValue).<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">CalculateAliquotSum</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> number</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (number &lt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(number)}</span> cannot be negative&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>, limit = number / <span class=\"hljs-number\">2</span>; i &lt;= limit; ++i)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (number % i == <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    sum += i;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> sum;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Eli Sadoff",
      "email": "eli.sadoff@broadlume.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kenneth P",
      "email": "41343159+ken437@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dumby",
      "email": "71999854+SpiderMath@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}