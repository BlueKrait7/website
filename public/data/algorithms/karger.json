{
  "slug": "karger",
  "name": "Karger",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\karger.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\karger.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nAn implementation of Karger&#x27;s Algorithm for partitioning a graph.\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> random\r\n\r\n<span class=\"hljs-comment\"># Adjacency list representation of this graph:</span>\r\n<span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/File:Single_run_of_Karger%E2%80%99s_Mincut_algorithm.svg</span>\r\nTEST_GRAPH = {\r\n    <span class=\"hljs-string\">&quot;1&quot;</span>: [<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>, <span class=\"hljs-string\">&quot;5&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;2&quot;</span>: [<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>, <span class=\"hljs-string\">&quot;5&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;3&quot;</span>: [<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>, <span class=\"hljs-string\">&quot;5&quot;</span>, <span class=\"hljs-string\">&quot;10&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;4&quot;</span>: [<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&quot;5&quot;</span>, <span class=\"hljs-string\">&quot;6&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;5&quot;</span>: [<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>, <span class=\"hljs-string\">&quot;7&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;6&quot;</span>: [<span class=\"hljs-string\">&quot;7&quot;</span>, <span class=\"hljs-string\">&quot;8&quot;</span>, <span class=\"hljs-string\">&quot;9&quot;</span>, <span class=\"hljs-string\">&quot;10&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;7&quot;</span>: [<span class=\"hljs-string\">&quot;6&quot;</span>, <span class=\"hljs-string\">&quot;8&quot;</span>, <span class=\"hljs-string\">&quot;9&quot;</span>, <span class=\"hljs-string\">&quot;10&quot;</span>, <span class=\"hljs-string\">&quot;5&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;8&quot;</span>: [<span class=\"hljs-string\">&quot;6&quot;</span>, <span class=\"hljs-string\">&quot;7&quot;</span>, <span class=\"hljs-string\">&quot;9&quot;</span>, <span class=\"hljs-string\">&quot;10&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;9&quot;</span>: [<span class=\"hljs-string\">&quot;6&quot;</span>, <span class=\"hljs-string\">&quot;7&quot;</span>, <span class=\"hljs-string\">&quot;8&quot;</span>, <span class=\"hljs-string\">&quot;10&quot;</span>],\r\n    <span class=\"hljs-string\">&quot;10&quot;</span>: [<span class=\"hljs-string\">&quot;6&quot;</span>, <span class=\"hljs-string\">&quot;7&quot;</span>, <span class=\"hljs-string\">&quot;8&quot;</span>, <span class=\"hljs-string\">&quot;9&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>],\r\n}\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">partition_graph</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]]</span>) -&gt; <span class=\"hljs-built_in\">set</span>[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Partitions a graph using Karger&#x27;s Algorithm. Implemented from\r\n    pseudocode found here:\r\n    https://en.wikipedia.org/wiki/Karger%27s_algorithm.\r\n    This function involves random choices, meaning it will not give\r\n    consistent outputs.\r\n\r\n    Args:\r\n        graph: A dictionary containing adacency lists for the graph.\r\n            Nodes must be strings.\r\n\r\n    Returns:\r\n        The cutset of the cut found by Karger&#x27;s Algorithm.\r\n\r\n    &gt;&gt;&gt; graph = {&#x27;0&#x27;:[&#x27;1&#x27;], &#x27;1&#x27;:[&#x27;0&#x27;]}\r\n    &gt;&gt;&gt; partition_graph(graph)\r\n    {(&#x27;0&#x27;, &#x27;1&#x27;)}\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Dict that maps contracted nodes to a list of all the nodes it &quot;contains.&quot;</span>\r\n    contracted_nodes = {node: {node} <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> graph}\r\n\r\n    graph_copy = {node: graph[node][:] <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> graph}\r\n\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(graph_copy) &gt; <span class=\"hljs-number\">2</span>:\r\n\r\n        <span class=\"hljs-comment\"># Choose a random edge.</span>\r\n        u = random.choice(<span class=\"hljs-built_in\">list</span>(graph_copy.keys()))\r\n        v = random.choice(graph_copy[u])\r\n\r\n        <span class=\"hljs-comment\"># Contract edge (u, v) to new node uv</span>\r\n        uv = u + v\r\n        uv_neighbors = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(graph_copy[u] + graph_copy[v]))\r\n        uv_neighbors.remove(u)\r\n        uv_neighbors.remove(v)\r\n        graph_copy[uv] = uv_neighbors\r\n        <span class=\"hljs-keyword\">for</span> neighbor <span class=\"hljs-keyword\">in</span> uv_neighbors:\r\n            graph_copy[neighbor].append(uv)\r\n\r\n        contracted_nodes[uv] = <span class=\"hljs-built_in\">set</span>(contracted_nodes[u].union(contracted_nodes[v]))\r\n\r\n        <span class=\"hljs-comment\"># Remove nodes u and v.</span>\r\n        <span class=\"hljs-keyword\">del</span> graph_copy[u]\r\n        <span class=\"hljs-keyword\">del</span> graph_copy[v]\r\n        <span class=\"hljs-keyword\">for</span> neighbor <span class=\"hljs-keyword\">in</span> uv_neighbors:\r\n            <span class=\"hljs-keyword\">if</span> u <span class=\"hljs-keyword\">in</span> graph_copy[neighbor]:\r\n                graph_copy[neighbor].remove(u)\r\n            <span class=\"hljs-keyword\">if</span> v <span class=\"hljs-keyword\">in</span> graph_copy[neighbor]:\r\n                graph_copy[neighbor].remove(v)\r\n\r\n    <span class=\"hljs-comment\"># Find cutset.</span>\r\n    groups = [contracted_nodes[node] <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> graph_copy]\r\n    <span class=\"hljs-keyword\">return</span> {\r\n        (node, neighbor)\r\n        <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> groups[<span class=\"hljs-number\">0</span>]\r\n        <span class=\"hljs-keyword\">for</span> neighbor <span class=\"hljs-keyword\">in</span> graph[node]\r\n        <span class=\"hljs-keyword\">if</span> neighbor <span class=\"hljs-keyword\">in</span> groups[<span class=\"hljs-number\">1</span>]\r\n    }\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-built_in\">print</span>(partition_graph(TEST_GRAPH))\r\n"
    }
  },
  "contributors": [
    {
      "name": "Arin Khare",
      "email": "51566200+lol-cubes@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}