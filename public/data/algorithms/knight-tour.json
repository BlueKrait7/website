{
  "slug": "knight-tour",
  "name": "Knight Tour",
  "categories": [
    "backtracking"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "backtracking\\knight_tour.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/backtracking\\knight_tour.py",
      "code": "<span class=\"hljs-comment\"># Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_valid_pos</span>(<span class=\"hljs-params\">position: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>], n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Find all the valid positions a knight can move to from the current position.\r\n\r\n    &gt;&gt;&gt; get_valid_pos((1, 3), 4)\r\n    [(2, 1), (0, 1), (3, 2)]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    y, x = position\r\n    positions = [\r\n        (y + <span class=\"hljs-number\">1</span>, x + <span class=\"hljs-number\">2</span>),\r\n        (y - <span class=\"hljs-number\">1</span>, x + <span class=\"hljs-number\">2</span>),\r\n        (y + <span class=\"hljs-number\">1</span>, x - <span class=\"hljs-number\">2</span>),\r\n        (y - <span class=\"hljs-number\">1</span>, x - <span class=\"hljs-number\">2</span>),\r\n        (y + <span class=\"hljs-number\">2</span>, x + <span class=\"hljs-number\">1</span>),\r\n        (y + <span class=\"hljs-number\">2</span>, x - <span class=\"hljs-number\">1</span>),\r\n        (y - <span class=\"hljs-number\">2</span>, x + <span class=\"hljs-number\">1</span>),\r\n        (y - <span class=\"hljs-number\">2</span>, x - <span class=\"hljs-number\">1</span>),\r\n    ]\r\n    permissible_positions = []\r\n\r\n    <span class=\"hljs-keyword\">for</span> position <span class=\"hljs-keyword\">in</span> positions:\r\n        y_test, x_test = position\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= y_test &lt; n <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= x_test &lt; n:\r\n            permissible_positions.append(position)\r\n\r\n    <span class=\"hljs-keyword\">return</span> permissible_positions\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_complete</span>(<span class=\"hljs-params\">board: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Check if the board (matrix) has been completely filled with non-zero values.\r\n\r\n    &gt;&gt;&gt; is_complete([[1]])\r\n    True\r\n\r\n    &gt;&gt;&gt; is_complete([[1, 2], [3, 0]])\r\n    False\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">any</span>(elem == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> board <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> row)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">open_knight_tour_helper</span>(<span class=\"hljs-params\">\r\n    board: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], pos: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>], curr: <span class=\"hljs-built_in\">int</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Helper function to solve knight tour problem.\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> is_complete(board):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> position <span class=\"hljs-keyword\">in</span> get_valid_pos(pos, <span class=\"hljs-built_in\">len</span>(board)):\r\n        y, x = position\r\n\r\n        <span class=\"hljs-keyword\">if</span> board[y][x] == <span class=\"hljs-number\">0</span>:\r\n            board[y][x] = curr + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">if</span> open_knight_tour_helper(board, position, curr + <span class=\"hljs-number\">1</span>):\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n            board[y][x] = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">open_knight_tour</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Find the solution for the knight tour problem for a board of size n. Raises\r\n    ValueError if the tour cannot be performed for the given size.\r\n\r\n    &gt;&gt;&gt; open_knight_tour(1)\r\n    [[1]]\r\n\r\n    &gt;&gt;&gt; open_knight_tour(2)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Open Kight Tour cannot be performed on a board of size 2\r\n    &quot;&quot;&quot;</span>\r\n\r\n    board = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)]\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n            board[i][j] = <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">if</span> open_knight_tour_helper(board, (i, j), <span class=\"hljs-number\">1</span>):\r\n                <span class=\"hljs-keyword\">return</span> board\r\n            board[i][j] = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;Open Kight Tour cannot be performed on a board of size <span class=\"hljs-subst\">{n}</span>&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Backtracking\\tests\\KnightTour.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Backtracking\\tests\\KnightTour.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">OpenKnightTour</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../KnightTour&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;OpenKnightTour&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;OpenKnightTour(5)&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">KT</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OpenKnightTour</span>(<span class=\"hljs-number\">5</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">KT</span>.<span class=\"hljs-property\">board</span>).<span class=\"hljs-title function_\">toEqual</span>([\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n      [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\r\n    ])\r\n\r\n    <span class=\"hljs-variable constant_\">KT</span>.<span class=\"hljs-title function_\">solve</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">KT</span>.<span class=\"hljs-property\">board</span>).<span class=\"hljs-title function_\">toEqual</span>([\r\n      [<span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">25</span>],\r\n      [<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">16</span>],\r\n      [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">11</span>],\r\n      [<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">6</span>],\r\n      [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">23</span>]\r\n    ])\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "backtracking\\knight_tour.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking\\knight_tour.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Knight&#x27;s tour](https://en.wikipedia.org/wiki/Knight%27s_tour)\r\n * algorithm\r\n *\r\n * @details\r\n * A knight&#x27;s tour is a sequence of moves of a knight on a chessboard\r\n * such that the knight visits every square only once. If the knight\r\n * ends on a square that is one knight&#x27;s move from the beginning\r\n * square (so that it could tour the board again immediately, following\r\n * the same path, the tour is closed; otherwise, it is open.\r\n *\r\n * @author [Nikhil Arora](https://github.com/nikhilarora068)\r\n * @author [David Leal](https://github.com/Panquesito7)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>     <span class=\"hljs-comment\">/// for std::array</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace backtracking\r\n * @brief Backtracking algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> backtracking {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace knight_tour\r\n * @brief Functions for the [Knight&#x27;s\r\n * tour](https://en.wikipedia.org/wiki/Knight%27s_tour) algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> knight_tour {\r\n<span class=\"hljs-comment\">/**\r\n * A utility function to check if i,j are valid indexes for N*N chessboard\r\n * @tparam V number of vertices in array\r\n * @param x current index in rows\r\n * @param y current index in columns\r\n * @param sol matrix where numbers are saved\r\n * @returns `true` if ....\r\n * @returns `false` if ....\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">issafe</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; &amp;sol)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> (x &lt; V &amp;&amp; x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; V &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; sol[x][y] == <span class=\"hljs-number\">-1</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Knight&#x27;s tour algorithm\r\n * @tparam V number of vertices in array\r\n * @param x current index in rows\r\n * @param y current index in columns\r\n * @param mov movement to be done\r\n * @param sol matrix where numbers are saved\r\n * @param xmov next move of knight (x coordinate)\r\n * @param ymov next move of knight (y coordinate)\r\n * @returns `true` if solution exists\r\n * @returns `false` if solution does not exist\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> mov, std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; &amp;sol,\r\n           <span class=\"hljs-type\">const</span> std::array&lt;<span class=\"hljs-type\">int</span>, V&gt; &amp;xmov, std::array&lt;<span class=\"hljs-type\">int</span>, V&gt; &amp;ymov)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>, xnext = <span class=\"hljs-number\">0</span>, ynext = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (mov == V * V) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">0</span>; k &lt; V; k++) {\r\n        xnext = x + xmov[k];\r\n        ynext = y + ymov[k];\r\n\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">issafe</span>&lt;V&gt;(xnext, ynext, sol)) {\r\n            sol[xnext][ynext] = mov;\r\n\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">solve</span>&lt;V&gt;(xnext, ynext, mov + <span class=\"hljs-number\">1</span>, sol, xmov, ymov) == <span class=\"hljs-literal\">true</span>) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                sol[xnext][ynext] = <span class=\"hljs-number\">-1</span>;\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace knight_tour</span>\r\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">8</span>;\r\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; sol = {<span class=\"hljs-number\">0</span>};\r\n\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\r\n            sol[i][j] = <span class=\"hljs-number\">-1</span>;\r\n        }\r\n    }\r\n\r\n    std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; xmov = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>};\r\n    std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; ymov = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-1</span>};\r\n\r\n    sol[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-type\">bool</span> flag = backtracking::knight_tour::<span class=\"hljs-built_in\">solve</span>&lt;n&gt;(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, sol, xmov, ymov);\r\n    <span class=\"hljs-keyword\">if</span> (flag == <span class=\"hljs-literal\">false</span>) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Error: Solution does not exist\\n&quot;</span>;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\r\n                std::cout &lt;&lt; sol[i][j] &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\r\n            }\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nikhil Arora",
      "email": "nikhilarora068@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 2
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}