{
  "slug": "multi-heuristic-astar",
  "name": "Multi Heuristic Astar",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\multi_heuristic_astar.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\multi_heuristic_astar.py",
      "code": "<span class=\"hljs-keyword\">import</span> heapq\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\nTPos = <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PriorityQueue</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\r\n        self.elements = []\r\n        self.<span class=\"hljs-built_in\">set</span> = <span class=\"hljs-built_in\">set</span>()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minkey</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.empty():\r\n            <span class=\"hljs-keyword\">return</span> self.elements[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">empty</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.elements) == <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">put</span>(<span class=\"hljs-params\">self, item, priority</span>):\r\n        <span class=\"hljs-keyword\">if</span> item <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-built_in\">set</span>:\r\n            heapq.heappush(self.elements, (priority, item))\r\n            self.<span class=\"hljs-built_in\">set</span>.add(item)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-comment\"># update</span>\r\n            <span class=\"hljs-comment\"># print(&quot;update&quot;, item)</span>\r\n            temp = []\r\n            (pri, x) = heapq.heappop(self.elements)\r\n            <span class=\"hljs-keyword\">while</span> x != item:\r\n                temp.append((pri, x))\r\n                (pri, x) = heapq.heappop(self.elements)\r\n            temp.append((priority, item))\r\n            <span class=\"hljs-keyword\">for</span> (pro, xxx) <span class=\"hljs-keyword\">in</span> temp:\r\n                heapq.heappush(self.elements, (pro, xxx))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove_element</span>(<span class=\"hljs-params\">self, item</span>):\r\n        <span class=\"hljs-keyword\">if</span> item <span class=\"hljs-keyword\">in</span> self.<span class=\"hljs-built_in\">set</span>:\r\n            self.<span class=\"hljs-built_in\">set</span>.remove(item)\r\n            temp = []\r\n            (pro, x) = heapq.heappop(self.elements)\r\n            <span class=\"hljs-keyword\">while</span> x != item:\r\n                temp.append((pro, x))\r\n                (pro, x) = heapq.heappop(self.elements)\r\n            <span class=\"hljs-keyword\">for</span> (prito, yyy) <span class=\"hljs-keyword\">in</span> temp:\r\n                heapq.heappush(self.elements, (prito, yyy))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_show</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.elements[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self</span>):\r\n        (priority, item) = heapq.heappop(self.elements)\r\n        self.<span class=\"hljs-built_in\">set</span>.remove(item)\r\n        <span class=\"hljs-keyword\">return</span> (priority, item)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">consistent_heuristic</span>(<span class=\"hljs-params\">P: TPos, goal: TPos</span>):\r\n    <span class=\"hljs-comment\"># euclidean distance</span>\r\n    a = np.array(P)\r\n    b = np.array(goal)\r\n    <span class=\"hljs-keyword\">return</span> np.linalg.norm(a - b)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heuristic_2</span>(<span class=\"hljs-params\">P: TPos, goal: TPos</span>):\r\n    <span class=\"hljs-comment\"># integer division by time variable</span>\r\n    <span class=\"hljs-keyword\">return</span> consistent_heuristic(P, goal) // t\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heuristic_1</span>(<span class=\"hljs-params\">P: TPos, goal: TPos</span>):\r\n    <span class=\"hljs-comment\"># manhattan distance</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(P[<span class=\"hljs-number\">0</span>] - goal[<span class=\"hljs-number\">0</span>]) + <span class=\"hljs-built_in\">abs</span>(P[<span class=\"hljs-number\">1</span>] - goal[<span class=\"hljs-number\">1</span>])\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">key</span>(<span class=\"hljs-params\">start: TPos, i: <span class=\"hljs-built_in\">int</span>, goal: TPos, g_function: <span class=\"hljs-built_in\">dict</span>[TPos, <span class=\"hljs-built_in\">float</span>]</span>):\r\n    ans = g_function[start] + W1 * heuristics[i](start, goal)\r\n    <span class=\"hljs-keyword\">return</span> ans\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">do_something</span>(<span class=\"hljs-params\">back_pointer, goal, start</span>):\r\n    grid = np.chararray((n, n))\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n            grid[i][j] = <span class=\"hljs-string\">&quot;*&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n            <span class=\"hljs-keyword\">if</span> (j, (n - <span class=\"hljs-number\">1</span>) - i) <span class=\"hljs-keyword\">in</span> blocks:\r\n                grid[i][j] = <span class=\"hljs-string\">&quot;#&quot;</span>\r\n\r\n    grid[<span class=\"hljs-number\">0</span>][(n - <span class=\"hljs-number\">1</span>)] = <span class=\"hljs-string\">&quot;-&quot;</span>\r\n    x = back_pointer[goal]\r\n    <span class=\"hljs-keyword\">while</span> x != start:\r\n        (x_c, y_c) = x\r\n        <span class=\"hljs-comment\"># print(x)</span>\r\n        grid[(n - <span class=\"hljs-number\">1</span>) - y_c][x_c] = <span class=\"hljs-string\">&quot;-&quot;</span>\r\n        x = back_pointer[x]\r\n    grid[(n - <span class=\"hljs-number\">1</span>)][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&quot;-&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n            <span class=\"hljs-keyword\">if</span> (i, j) == (<span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>):\r\n                <span class=\"hljs-built_in\">print</span>(grid[i][j], end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&lt;-- End position&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-built_in\">print</span>(grid[i][j], end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;^&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Start position&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;# is an obstacle&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;- is the path taken by algorithm&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;PATH TAKEN BY THE ALGORITHM IS:-&quot;</span>)\r\n    x = back_pointer[goal]\r\n    <span class=\"hljs-keyword\">while</span> x != start:\r\n        <span class=\"hljs-built_in\">print</span>(x, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n        x = back_pointer[x]\r\n    <span class=\"hljs-built_in\">print</span>(x)\r\n    quit()\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">valid</span>(<span class=\"hljs-params\">p: TPos</span>):\r\n    <span class=\"hljs-keyword\">if</span> p[<span class=\"hljs-number\">0</span>] &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> p[<span class=\"hljs-number\">0</span>] &gt; n - <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">if</span> p[<span class=\"hljs-number\">1</span>] &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> p[<span class=\"hljs-number\">1</span>] &gt; n - <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">expand_state</span>(<span class=\"hljs-params\">\r\n    s,\r\n    j,\r\n    visited,\r\n    g_function,\r\n    close_list_anchor,\r\n    close_list_inad,\r\n    open_list,\r\n    back_pointer,\r\n</span>):\r\n    <span class=\"hljs-keyword\">for</span> itera <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n_heuristic):\r\n        open_list[itera].remove_element(s)\r\n    <span class=\"hljs-comment\"># print(&quot;s&quot;, s)</span>\r\n    <span class=\"hljs-comment\"># print(&quot;j&quot;, j)</span>\r\n    (x, y) = s\r\n    left = (x - <span class=\"hljs-number\">1</span>, y)\r\n    right = (x + <span class=\"hljs-number\">1</span>, y)\r\n    up = (x, y + <span class=\"hljs-number\">1</span>)\r\n    down = (x, y - <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">for</span> neighbours <span class=\"hljs-keyword\">in</span> [left, right, up, down]:\r\n        <span class=\"hljs-keyword\">if</span> neighbours <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> blocks:\r\n            <span class=\"hljs-keyword\">if</span> valid(neighbours) <span class=\"hljs-keyword\">and</span> neighbours <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> visited:\r\n                <span class=\"hljs-comment\"># print(&quot;neighbour&quot;, neighbours)</span>\r\n                visited.add(neighbours)\r\n                back_pointer[neighbours] = -<span class=\"hljs-number\">1</span>\r\n                g_function[neighbours] = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>)\r\n\r\n            <span class=\"hljs-keyword\">if</span> valid(neighbours) <span class=\"hljs-keyword\">and</span> g_function[neighbours] &gt; g_function[s] + <span class=\"hljs-number\">1</span>:\r\n                g_function[neighbours] = g_function[s] + <span class=\"hljs-number\">1</span>\r\n                back_pointer[neighbours] = s\r\n                <span class=\"hljs-keyword\">if</span> neighbours <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> close_list_anchor:\r\n                    open_list[<span class=\"hljs-number\">0</span>].put(neighbours, key(neighbours, <span class=\"hljs-number\">0</span>, goal, g_function))\r\n                    <span class=\"hljs-keyword\">if</span> neighbours <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> close_list_inad:\r\n                        <span class=\"hljs-keyword\">for</span> var <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n_heuristic):\r\n                            <span class=\"hljs-keyword\">if</span> key(neighbours, var, goal, g_function) &lt;= W2 * key(\r\n                                neighbours, <span class=\"hljs-number\">0</span>, goal, g_function\r\n                            ):\r\n                                open_list[j].put(\r\n                                    neighbours, key(neighbours, var, goal, g_function)\r\n                                )\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_common_ground</span>():\r\n    some_list = []\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>):\r\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>):\r\n            some_list.append((x, y))\r\n\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>):\r\n        some_list.append((x, <span class=\"hljs-number\">17</span>))\r\n\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">19</span>):\r\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">15</span>):\r\n            some_list.append((x, y))\r\n\r\n    <span class=\"hljs-comment\"># L block</span>\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>):\r\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">19</span>):\r\n            some_list.append((x, y))\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">13</span>):\r\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">19</span>):\r\n            some_list.append((x, y))\r\n    <span class=\"hljs-keyword\">return</span> some_list\r\n\r\n\r\nheuristics = {<span class=\"hljs-number\">0</span>: consistent_heuristic, <span class=\"hljs-number\">1</span>: heuristic_1, <span class=\"hljs-number\">2</span>: heuristic_2}\r\n\r\nblocks_blk = [\r\n    (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">1</span>),\r\n    (<span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">1</span>),\r\n]\r\nblocks_all = make_common_ground()\r\n\r\n\r\nblocks = blocks_blk\r\n<span class=\"hljs-comment\"># hyper parameters</span>\r\nW1 = <span class=\"hljs-number\">1</span>\r\nW2 = <span class=\"hljs-number\">1</span>\r\nn = <span class=\"hljs-number\">20</span>\r\nn_heuristic = <span class=\"hljs-number\">3</span>  <span class=\"hljs-comment\"># one consistent and two other inconsistent</span>\r\n\r\n<span class=\"hljs-comment\"># start and end destination</span>\r\nstart = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\ngoal = (n - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>)\r\n\r\nt = <span class=\"hljs-number\">1</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">multi_a_star</span>(<span class=\"hljs-params\">start: TPos, goal: TPos, n_heuristic: <span class=\"hljs-built_in\">int</span></span>):\r\n    g_function = {start: <span class=\"hljs-number\">0</span>, goal: <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>)}\r\n    back_pointer = {start: -<span class=\"hljs-number\">1</span>, goal: -<span class=\"hljs-number\">1</span>}\r\n    open_list = []\r\n    visited = <span class=\"hljs-built_in\">set</span>()\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n_heuristic):\r\n        open_list.append(PriorityQueue())\r\n        open_list[i].put(start, key(start, i, goal, g_function))\r\n\r\n    close_list_anchor: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>] = []\r\n    close_list_inad: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>] = []\r\n    <span class=\"hljs-keyword\">while</span> open_list[<span class=\"hljs-number\">0</span>].minkey() &lt; <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>):\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n_heuristic):\r\n            <span class=\"hljs-comment\"># print(open_list[0].minkey(), open_list[i].minkey())</span>\r\n            <span class=\"hljs-keyword\">if</span> open_list[i].minkey() &lt;= W2 * open_list[<span class=\"hljs-number\">0</span>].minkey():\r\n                <span class=\"hljs-keyword\">global</span> t\r\n                t += <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">if</span> g_function[goal] &lt;= open_list[i].minkey():\r\n                    <span class=\"hljs-keyword\">if</span> g_function[goal] &lt; <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>):\r\n                        do_something(back_pointer, goal, start)\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    _, get_s = open_list[i].top_show()\r\n                    visited.add(get_s)\r\n                    expand_state(\r\n                        get_s,\r\n                        i,\r\n                        visited,\r\n                        g_function,\r\n                        close_list_anchor,\r\n                        close_list_inad,\r\n                        open_list,\r\n                        back_pointer,\r\n                    )\r\n                    close_list_inad.append(get_s)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">if</span> g_function[goal] &lt;= open_list[<span class=\"hljs-number\">0</span>].minkey():\r\n                    <span class=\"hljs-keyword\">if</span> g_function[goal] &lt; <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>):\r\n                        do_something(back_pointer, goal, start)\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    get_s = open_list[<span class=\"hljs-number\">0</span>].top_show()\r\n                    visited.add(get_s)\r\n                    expand_state(\r\n                        get_s,\r\n                        <span class=\"hljs-number\">0</span>,\r\n                        visited,\r\n                        g_function,\r\n                        close_list_anchor,\r\n                        close_list_inad,\r\n                        open_list,\r\n                        back_pointer,\r\n                    )\r\n                    close_list_anchor.append(get_s)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;No path found to goal&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>()\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n            <span class=\"hljs-keyword\">if</span> (j, i) <span class=\"hljs-keyword\">in</span> blocks:\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;#&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n            <span class=\"hljs-keyword\">elif</span> (j, i) <span class=\"hljs-keyword\">in</span> back_pointer:\r\n                <span class=\"hljs-keyword\">if</span> (j, i) == (n - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>):\r\n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;*&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;-&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;*&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n            <span class=\"hljs-keyword\">if</span> (j, i) == (n - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>):\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&lt;-- End position&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;^&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Start position&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;# is an obstacle&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;- is the path taken by algorithm&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    multi_a_star(start, goal, n_heuristic)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}