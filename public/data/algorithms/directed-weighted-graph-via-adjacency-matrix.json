{
  "slug": "directed-weighted-graph-via-adjacency-matrix",
  "name": "Directed Weighted Graph Via Adjacency Matrix",
  "categories": [
    "datastructures",
    "graphs"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/Graph/DirectedWeightedGraph.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\DataStructures\\Graph\\DirectedWeightedGraph.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Graph</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Implementation of the directed weighted graph via adjacency matrix.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Generic Type.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DirectedWeightedGraph</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IDirectedWeightedGraph</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Capacity of the graph, indicates the maximum amount of vertices.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">int</span> capacity;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adjacency matrix which reflects the edges between vertices and their weight.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Zero value indicates no edge between two vertices.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">double</span>[,] adjacencyMatrix;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;DirectedWeightedGraph{T}&quot;/&gt;</span> class.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;capacity&quot;&gt;</span>Capacity of the graph, indicates the maximum amount of vertices.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DirectedWeightedGraph</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> capacity</span>)</span>\r\n        {\r\n            ThrowIfNegativeCapacity(capacity);\r\n\r\n            <span class=\"hljs-keyword\">this</span>.capacity = capacity;\r\n            Vertices = <span class=\"hljs-keyword\">new</span> Vertex&lt;T&gt;[capacity];\r\n            adjacencyMatrix = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[capacity, capacity];\r\n            Count = <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets list of vertices of the graph.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> Vertex&lt;T&gt;?[] Vertices { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">set</span>; }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets current amount of vertices in the graph.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Count { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">set</span>; }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adds new vertex to the graph.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span>Data of the vertex.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Reference to created vertex.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Vertex&lt;T&gt; <span class=\"hljs-title\">AddVertex</span>(<span class=\"hljs-params\">T data</span>)</span>\r\n        {\r\n            ThrowIfOverflow();\r\n            <span class=\"hljs-keyword\">var</span> vertex = <span class=\"hljs-keyword\">new</span> Vertex&lt;T&gt;(data, Count, <span class=\"hljs-keyword\">this</span>);\r\n            Vertices[Count] = vertex;\r\n            Count++;\r\n            <span class=\"hljs-keyword\">return</span> vertex;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Creates an edge between two vertices of the graph.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;startVertex&quot;&gt;</span>Vertex, edge starts at.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;endVertex&quot;&gt;</span>Vertex, edge ends at.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;weight&quot;&gt;</span>Double weight of an edge.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddEdge</span>(<span class=\"hljs-params\">Vertex&lt;T&gt; startVertex, Vertex&lt;T&gt; endVertex, <span class=\"hljs-built_in\">double</span> weight</span>)</span>\r\n        {\r\n            ThrowIfVertexNotInGraph(startVertex);\r\n            ThrowIfVertexNotInGraph(endVertex);\r\n\r\n            ThrowIfWeightZero(weight);\r\n\r\n            <span class=\"hljs-keyword\">var</span> currentEdgeWeight = adjacencyMatrix[startVertex.Index, endVertex.Index];\r\n\r\n            ThrowIfEdgeExists(currentEdgeWeight);\r\n\r\n            adjacencyMatrix[startVertex.Index, endVertex.Index] = weight;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes vertex from the graph.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;vertex&quot;&gt;</span>Vertex to be removed.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">RemoveVertex</span>(<span class=\"hljs-params\">Vertex&lt;T&gt; vertex</span>)</span>\r\n        {\r\n            ThrowIfVertexNotInGraph(vertex);\r\n\r\n            Vertices[vertex.Index] = <span class=\"hljs-literal\">null</span>;\r\n            vertex.SetGraphNull();\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; Count; i++)\r\n            {\r\n                adjacencyMatrix[i, vertex.Index] = <span class=\"hljs-number\">0</span>;\r\n                adjacencyMatrix[vertex.Index, i] = <span class=\"hljs-number\">0</span>;\r\n            }\r\n\r\n            Count--;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes edge between two vertices.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;startVertex&quot;&gt;</span>Vertex, edge starts at.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;endVertex&quot;&gt;</span>Vertex, edge ends at.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">RemoveEdge</span>(<span class=\"hljs-params\">Vertex&lt;T&gt; startVertex, Vertex&lt;T&gt; endVertex</span>)</span>\r\n        {\r\n            ThrowIfVertexNotInGraph(startVertex);\r\n            ThrowIfVertexNotInGraph(endVertex);\r\n            adjacencyMatrix[startVertex.Index, endVertex.Index] = <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets a neighbors of particular vertex.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;vertex&quot;&gt;</span>Vertex, method gets list of neighbors for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Collection of the neighbors of particular vertex.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> IEnumerable&lt;Vertex&lt;T&gt;?&gt; GetNeighbors(Vertex&lt;T&gt; vertex)\r\n        {\r\n            ThrowIfVertexNotInGraph(vertex);\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; Count; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (adjacencyMatrix[vertex.Index, i] != <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> Vertices[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns true, if there is an edge between two vertices.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;startVertex&quot;&gt;</span>Vertex, edge starts at.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;endVertex&quot;&gt;</span>Vertex, edge ends at.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>True if edge exists, otherwise false.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">AreAdjacent</span>(<span class=\"hljs-params\">Vertex&lt;T&gt; startVertex, Vertex&lt;T&gt; endVertex</span>)</span>\r\n        {\r\n            ThrowIfVertexNotInGraph(startVertex);\r\n            ThrowIfVertexNotInGraph(endVertex);\r\n\r\n            <span class=\"hljs-keyword\">return</span> adjacencyMatrix[startVertex.Index, endVertex.Index] != <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Return the distance between two vertices in the graph.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;startVertex&quot;&gt;</span>first vertex in edge.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;endVertex&quot;&gt;</span>secnod vertex in edge.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>distance between the two.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">AdjacentDistance</span>(<span class=\"hljs-params\">Vertex&lt;T&gt; startVertex, Vertex&lt;T&gt; endVertex</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (AreAdjacent(startVertex, endVertex))\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> adjacencyMatrix[startVertex.Index, endVertex.Index];\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ThrowIfNegativeCapacity</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> capacity</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (capacity &lt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Graph capacity should always be a non-negative integer.&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ThrowIfWeightZero</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> weight</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (weight.Equals(<span class=\"hljs-number\">0.0</span>d))\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Edge weight cannot be zero.&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ThrowIfEdgeExists</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> currentEdgeWeight</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (!currentEdgeWeight.Equals(<span class=\"hljs-number\">0.0</span>d))\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">$&quot;Vertex already exists: <span class=\"hljs-subst\">{currentEdgeWeight}</span>&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ThrowIfOverflow</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (Count == capacity)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Graph overflow.&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ThrowIfVertexNotInGraph</span>(<span class=\"hljs-params\">Vertex&lt;T&gt; vertex</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (vertex.Graph != <span class=\"hljs-keyword\">this</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">$&quot;Vertex does not belong to graph: <span class=\"hljs-subst\">{vertex}</span>.&quot;</span>);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}