{
  "slug": "heap",
  "name": "Heap",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\heap\\heap.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\heap\\heap.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Iterable\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Heap</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;A Max Heap Implementation\r\n\r\n    &gt;&gt;&gt; unsorted = [103, 9, 1, 7, 11, 15, 25, 201, 209, 107, 5]\r\n    &gt;&gt;&gt; h = Heap()\r\n    &gt;&gt;&gt; h.build_max_heap(unsorted)\r\n    &gt;&gt;&gt; print(h)\r\n    [209, 201, 25, 103, 107, 15, 1, 9, 7, 11, 5]\r\n    &gt;&gt;&gt;\r\n    &gt;&gt;&gt; h.extract_max()\r\n    209\r\n    &gt;&gt;&gt; print(h)\r\n    [201, 107, 25, 103, 11, 15, 1, 9, 7, 5]\r\n    &gt;&gt;&gt;\r\n    &gt;&gt;&gt; h.insert(100)\r\n    &gt;&gt;&gt; print(h)\r\n    [201, 107, 25, 103, 100, 15, 1, 9, 7, 5, 11]\r\n    &gt;&gt;&gt;\r\n    &gt;&gt;&gt; h.heap_sort()\r\n    &gt;&gt;&gt; print(h)\r\n    [1, 5, 7, 9, 11, 15, 25, 100, 103, 107, 201]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.h: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>] = []\r\n        self.heap_size: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(self.h)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parent_index</span>(<span class=\"hljs-params\">self, child_idx: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;return the parent index of given child&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> child_idx &gt; <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">return</span> (child_idx - <span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">left_child_idx</span>(<span class=\"hljs-params\">self, parent_idx: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        return the left child index if the left child exists.\r\n        if not, return None.\r\n        &quot;&quot;&quot;</span>\r\n        left_child_index = <span class=\"hljs-number\">2</span> * parent_idx + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">if</span> left_child_index &lt; self.heap_size:\r\n            <span class=\"hljs-keyword\">return</span> left_child_index\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">right_child_idx</span>(<span class=\"hljs-params\">self, parent_idx: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        return the right child index if the right child exists.\r\n        if not, return None.\r\n        &quot;&quot;&quot;</span>\r\n        right_child_index = <span class=\"hljs-number\">2</span> * parent_idx + <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">if</span> right_child_index &lt; self.heap_size:\r\n            <span class=\"hljs-keyword\">return</span> right_child_index\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">max_heapify</span>(<span class=\"hljs-params\">self, index: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        correct a single violation of the heap property in a subtree&#x27;s root.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> index &lt; self.heap_size:\r\n            violation: <span class=\"hljs-built_in\">int</span> = index\r\n            left_child = self.left_child_idx(index)\r\n            right_child = self.right_child_idx(index)\r\n            <span class=\"hljs-comment\"># check which child is larger than its parent</span>\r\n            <span class=\"hljs-keyword\">if</span> left_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> self.h[left_child] &gt; self.h[violation]:\r\n                violation = left_child\r\n            <span class=\"hljs-keyword\">if</span> right_child <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> self.h[right_child] &gt; self.h[violation]:\r\n                violation = right_child\r\n            <span class=\"hljs-comment\"># if violation indeed exists</span>\r\n            <span class=\"hljs-keyword\">if</span> violation != index:\r\n                <span class=\"hljs-comment\"># swap to fix the violation</span>\r\n                self.h[violation], self.h[index] = self.h[index], self.h[violation]\r\n                <span class=\"hljs-comment\"># fix the subsequent violation recursively if any</span>\r\n                self.max_heapify(violation)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">build_max_heap</span>(<span class=\"hljs-params\">self, collection: Iterable[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;build max heap from an unsorted array&quot;&quot;&quot;</span>\r\n        self.h = <span class=\"hljs-built_in\">list</span>(collection)\r\n        self.heap_size = <span class=\"hljs-built_in\">len</span>(self.h)\r\n        <span class=\"hljs-keyword\">if</span> self.heap_size &gt; <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-comment\"># max_heapify from right to left but exclude leaves (last level)</span>\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.heap_size // <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\r\n                self.max_heapify(i)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">max</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;return the max in the heap&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.heap_size &gt;= <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.h[<span class=\"hljs-number\">0</span>]\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Empty heap&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extract_max</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;get and remove max from heap&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.heap_size &gt;= <span class=\"hljs-number\">2</span>:\r\n            me = self.h[<span class=\"hljs-number\">0</span>]\r\n            self.h[<span class=\"hljs-number\">0</span>] = self.h.pop(-<span class=\"hljs-number\">1</span>)\r\n            self.heap_size -= <span class=\"hljs-number\">1</span>\r\n            self.max_heapify(<span class=\"hljs-number\">0</span>)\r\n            <span class=\"hljs-keyword\">return</span> me\r\n        <span class=\"hljs-keyword\">elif</span> self.heap_size == <span class=\"hljs-number\">1</span>:\r\n            self.heap_size -= <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">return</span> self.h.pop(-<span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Empty heap&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, value: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;insert a new value into the max heap&quot;&quot;&quot;</span>\r\n        self.h.append(value)\r\n        idx = (self.heap_size - <span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">2</span>\r\n        self.heap_size += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">while</span> idx &gt;= <span class=\"hljs-number\">0</span>:\r\n            self.max_heapify(idx)\r\n            idx = (idx - <span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heap_sort</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        size = self.heap_size\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>):\r\n            self.h[<span class=\"hljs-number\">0</span>], self.h[j] = self.h[j], self.h[<span class=\"hljs-number\">0</span>]\r\n            self.heap_size -= <span class=\"hljs-number\">1</span>\r\n            self.max_heapify(<span class=\"hljs-number\">0</span>)\r\n        self.heap_size = size\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    <span class=\"hljs-comment\"># run doc test</span>\r\n    doctest.testmod()\r\n\r\n    <span class=\"hljs-comment\"># demo</span>\r\n    <span class=\"hljs-keyword\">for</span> unsorted <span class=\"hljs-keyword\">in</span> [\r\n        [<span class=\"hljs-number\">0</span>],\r\n        [<span class=\"hljs-number\">2</span>],\r\n        [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>],\r\n        [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>],\r\n        [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>],\r\n        [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n        [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],\r\n        [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>],\r\n        [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>],\r\n        [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>],\r\n        [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>],\r\n        [<span class=\"hljs-number\">103</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">201</span>, <span class=\"hljs-number\">209</span>, <span class=\"hljs-number\">107</span>, <span class=\"hljs-number\">5</span>],\r\n        [-<span class=\"hljs-number\">45</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">5</span>],\r\n    ]:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;unsorted array: <span class=\"hljs-subst\">{unsorted}</span>&quot;</span>)\r\n\r\n        heap = Heap()\r\n        heap.build_max_heap(unsorted)\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;after build heap: <span class=\"hljs-subst\">{heap}</span>&quot;</span>)\r\n\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;max value: <span class=\"hljs-subst\">{heap.extract_max()}</span>&quot;</span>)\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;after max value removed: <span class=\"hljs-subst\">{heap}</span>&quot;</span>)\r\n\r\n        heap.insert(<span class=\"hljs-number\">100</span>)\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;after new value 100 inserted: <span class=\"hljs-subst\">{heap}</span>&quot;</span>)\r\n\r\n        heap.heap_sort()\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;heap-sorted array: <span class=\"hljs-subst\">{heap}</span>\\n&quot;</span>)\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\heaps\\Heap.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\heaps\\Heap.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.heaps;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Interface common to heap data structures.&lt;br&gt;\r\n *\r\n * &lt;p&gt;\r\n * Heaps are tree-like data structures that allow storing elements in a specific\r\n * way. Each node corresponds to an element and has one parent node (except for\r\n * the root) and at most two children nodes. Every element contains a key, and\r\n * those keys indicate how the tree shall be built. For instance, for a\r\n * min-heap, the key of a node shall be greater than or equal to its parent&#x27;s\r\n * and lower than or equal to its children&#x27;s (the opposite rule applies to a\r\n * max-heap).\r\n *\r\n * &lt;p&gt;\r\n * All heap-related operations (inserting or deleting an element, extracting the\r\n * min or max) are performed in O(log n) time.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Nicolas Renard\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Heap</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> the top element in the heap, the one with lowest key for min-heap\r\n     * or with the highest key for max-heap\r\n     * <span class=\"hljs-doctag\">@throws</span> EmptyHeapException if heap is empty\r\n     */</span>\r\n    HeapElement <span class=\"hljs-title function_\">getElement</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> EmptyHeapException;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Inserts an element in the heap. Adds it to then end and toggle it until\r\n     * it finds its right position.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> element an instance of the HeapElement class.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertElement</span><span class=\"hljs-params\">(HeapElement element)</span>;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Delete an element in the heap.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> elementIndex int containing the position in the heap of the\r\n     * element to be deleted.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span>;\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\data_structures\\heap.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\data_structures\\heap.rs",
      "code": "<span class=\"hljs-comment\">// Heap data structure</span>\r\n<span class=\"hljs-comment\">// Takes a closure as a comparator to allow for min-heap, max-heap, and works with custom key functions</span>\r\n\r\n<span class=\"hljs-keyword\">use</span> std::cmp::<span class=\"hljs-built_in\">Ord</span>;\r\n<span class=\"hljs-keyword\">use</span> std::default::<span class=\"hljs-built_in\">Default</span>;\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Heap</span>&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Default</span>,\r\n{\r\n    count: <span class=\"hljs-type\">usize</span>,\r\n    items: <span class=\"hljs-type\">Vec</span>&lt;T&gt;,\r\n    comparator: <span class=\"hljs-title function_ invoke__\">fn</span>(&amp;T, &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span>,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Heap&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Default</span>,\r\n{\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(comparator: <span class=\"hljs-title function_ invoke__\">fn</span>(&amp;T, &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        <span class=\"hljs-keyword\">Self</span> {\r\n            count: <span class=\"hljs-number\">0</span>,\r\n            <span class=\"hljs-comment\">// Add a default in the first spot to offset indexes</span>\r\n            <span class=\"hljs-comment\">// for the parent/child math to work out.</span>\r\n            <span class=\"hljs-comment\">// Vecs have to have all the same type so using Default</span>\r\n            <span class=\"hljs-comment\">// is a way to add an unused item.</span>\r\n            items: <span class=\"hljs-built_in\">vec!</span>[T::<span class=\"hljs-title function_ invoke__\">default</span>()],\r\n            comparator,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">len</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\r\n        <span class=\"hljs-keyword\">self</span>.count\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_empty</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">len</span>() == <span class=\"hljs-number\">0</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: T) {\r\n        <span class=\"hljs-keyword\">self</span>.count += <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">self</span>.items.<span class=\"hljs-title function_ invoke__\">push</span>(value);\r\n\r\n        <span class=\"hljs-comment\">// Heapify Up</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">idx</span> = <span class=\"hljs-keyword\">self</span>.count;\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">parent_idx</span>(idx) &gt; <span class=\"hljs-number\">0</span> {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pdx</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">parent_idx</span>(idx);\r\n            <span class=\"hljs-title function_ invoke__\">if</span> (<span class=\"hljs-keyword\">self</span>.comparator)(&amp;<span class=\"hljs-keyword\">self</span>.items[idx], &amp;<span class=\"hljs-keyword\">self</span>.items[pdx]) {\r\n                <span class=\"hljs-keyword\">self</span>.items.<span class=\"hljs-title function_ invoke__\">swap</span>(idx, pdx);\r\n            }\r\n            idx = pdx;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">parent_idx</span>(&amp;<span class=\"hljs-keyword\">self</span>, idx: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\r\n        idx / <span class=\"hljs-number\">2</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">children_present</span>(&amp;<span class=\"hljs-keyword\">self</span>, idx: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">left_child_idx</span>(idx) &lt;= <span class=\"hljs-keyword\">self</span>.count\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">left_child_idx</span>(&amp;<span class=\"hljs-keyword\">self</span>, idx: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\r\n        idx * <span class=\"hljs-number\">2</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">right_child_idx</span>(&amp;<span class=\"hljs-keyword\">self</span>, idx: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">left_child_idx</span>(idx) + <span class=\"hljs-number\">1</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">smallest_child_idx</span>(&amp;<span class=\"hljs-keyword\">self</span>, idx: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">right_child_idx</span>(idx) &gt; <span class=\"hljs-keyword\">self</span>.count {\r\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">left_child_idx</span>(idx)\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ldx</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">left_child_idx</span>(idx);\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rdx</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">right_child_idx</span>(idx);\r\n            <span class=\"hljs-title function_ invoke__\">if</span> (<span class=\"hljs-keyword\">self</span>.comparator)(&amp;<span class=\"hljs-keyword\">self</span>.items[ldx], &amp;<span class=\"hljs-keyword\">self</span>.items[rdx]) {\r\n                ldx\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                rdx\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Heap&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Default</span> + <span class=\"hljs-built_in\">Ord</span>,\r\n{\r\n    <span class=\"hljs-comment\">/// Create a new MinHeap</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new_min</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">new</span>(|a, b| a &lt; b)\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Create a new MaxHeap</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new_max</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">new</span>(|a, b| a &gt; b)\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Heap</span>&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Default</span>,\r\n{\r\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = T;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;T&gt; {\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.count == <span class=\"hljs-number\">0</span> {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\r\n        }\r\n        <span class=\"hljs-comment\">// This feels like a function built for heap impl :)</span>\r\n        <span class=\"hljs-comment\">// Removes an item at an index and fills in with the last item</span>\r\n        <span class=\"hljs-comment\">// of the Vec</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">next</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">self</span>.items.<span class=\"hljs-title function_ invoke__\">swap_remove</span>(<span class=\"hljs-number\">1</span>));\r\n        <span class=\"hljs-keyword\">self</span>.count -= <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.count &gt; <span class=\"hljs-number\">0</span> {\r\n            <span class=\"hljs-comment\">// Heapify Down</span>\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">idx</span> = <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">children_present</span>(idx) {\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">cdx</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">smallest_child_idx</span>(idx);\r\n                <span class=\"hljs-keyword\">if</span> !(<span class=\"hljs-keyword\">self</span>.comparator)(&amp;<span class=\"hljs-keyword\">self</span>.items[idx], &amp;<span class=\"hljs-keyword\">self</span>.items[cdx]) {\r\n                    <span class=\"hljs-keyword\">self</span>.items.<span class=\"hljs-title function_ invoke__\">swap</span>(idx, cdx);\r\n                }\r\n                idx = cdx;\r\n            }\r\n        }\r\n\r\n        next\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MinHeap</span>;\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">MinHeap</span> {\r\n    <span class=\"hljs-meta\">#[allow(clippy::new_ret_no_self)]</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>&lt;T&gt;() <span class=\"hljs-punctuation\">-&gt;</span> Heap&lt;T&gt;\r\n    <span class=\"hljs-keyword\">where</span>\r\n        T: <span class=\"hljs-built_in\">Default</span> + <span class=\"hljs-built_in\">Ord</span>,\r\n    {\r\n        Heap::<span class=\"hljs-title function_ invoke__\">new</span>(|a, b| a &lt; b)\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MaxHeap</span>;\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">MaxHeap</span> {\r\n    <span class=\"hljs-meta\">#[allow(clippy::new_ret_no_self)]</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>&lt;T&gt;() <span class=\"hljs-punctuation\">-&gt;</span> Heap&lt;T&gt;\r\n    <span class=\"hljs-keyword\">where</span>\r\n        T: <span class=\"hljs-built_in\">Default</span> + <span class=\"hljs-built_in\">Ord</span>,\r\n    {\r\n        Heap::<span class=\"hljs-title function_ invoke__\">new</span>(|a, b| a &gt; b)\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_empty_heap</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">heap</span> = MaxHeap::new::&lt;<span class=\"hljs-type\">i32</span>&gt;();\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-literal\">None</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_min_heap</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">heap</span> = MinHeap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">4</span>);\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">2</span>);\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">9</span>);\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">11</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">len</span>(), <span class=\"hljs-number\">4</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">4</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">9</span>));\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">1</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_max_heap</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">heap</span> = MaxHeap::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">4</span>);\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">2</span>);\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">9</span>);\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">11</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">len</span>(), <span class=\"hljs-number\">4</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">11</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">9</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">4</span>));\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">2</span>));\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span>(<span class=\"hljs-comment\">/* x */</span> <span class=\"hljs-type\">i32</span>, <span class=\"hljs-comment\">/* y */</span> <span class=\"hljs-type\">i32</span>);\r\n    <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Point</span> {\r\n        <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n            <span class=\"hljs-title function_ invoke__\">Self</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_key_heap</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">heap</span>: Heap&lt;Point&gt; = Heap::<span class=\"hljs-title function_ invoke__\">new</span>(|a, b| a.<span class=\"hljs-number\">0</span> &lt; b.<span class=\"hljs-number\">0</span>);\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-title function_ invoke__\">Point</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>));\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-title function_ invoke__\">Point</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">10</span>));\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-title function_ invoke__\">Point</span>(-<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">len</span>(), <span class=\"hljs-number\">3</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>().<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>().<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\r\n        heap.<span class=\"hljs-title function_ invoke__\">add</span>(<span class=\"hljs-title function_ invoke__\">Point</span>(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">34</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(heap.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>().<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);\r\n    }\r\n}\r\n"
    },
    "swift": {
      "dir": "data_structures\\heap\\heap.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/data_structures\\heap\\heap.swift",
      "code": "<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Heap</span>&lt;<span class=\"hljs-title class_\">Element</span>&gt; {\r\n    <span class=\"hljs-keyword\">let</span> compare: (<span class=\"hljs-type\">Element</span>, <span class=\"hljs-type\">Element</span>) -&gt; <span class=\"hljs-type\">Bool</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> items : [<span class=\"hljs-type\">Element</span>]\r\n\r\n    <span class=\"hljs-keyword\">init</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">items</span> : [<span class=\"hljs-type\">Element</span>], <span class=\"hljs-params\">compare</span>: <span class=\"hljs-keyword\">@escaping</span> (<span class=\"hljs-type\">Element</span>, <span class=\"hljs-type\">Element</span>) -&gt; <span class=\"hljs-type\">Bool</span>) {\r\n        <span class=\"hljs-keyword\">self</span>.compare <span class=\"hljs-operator\">=</span> compare\r\n        <span class=\"hljs-keyword\">self</span>.items <span class=\"hljs-operator\">=</span> items\r\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> count <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2</span>).reversed() {\r\n            heapify(index)\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// The minimum item on this heap or nil if the heap is empty</span>\r\n    <span class=\"hljs-keyword\">var</span> min: <span class=\"hljs-type\">Element</span>? {\r\n        <span class=\"hljs-keyword\">return</span> items.first\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// The number of items on this heap</span>\r\n    <span class=\"hljs-keyword\">var</span> count: <span class=\"hljs-type\">Int</span> {\r\n        <span class=\"hljs-keyword\">return</span> items.count\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// true if this heap is empty</span>\r\n    <span class=\"hljs-keyword\">var</span> isEmpty: <span class=\"hljs-type\">Bool</span> {\r\n        <span class=\"hljs-keyword\">return</span> items.isEmpty\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Removes and returns the minimum item from the heap.</span>\r\n    <span class=\"hljs-comment\">/// - returns: The minimum item from the heap or nil if the heap is empty.</span>\r\n    <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">extractMin</span>() -&gt; <span class=\"hljs-type\">Element</span>? {\r\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> result <span class=\"hljs-operator\">=</span> items.first <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span> }\r\n\r\n        items.removeFirst()\r\n        heapify(<span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> result\r\n\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Inserts a new item into this heap</span>\r\n    <span class=\"hljs-comment\">/// - parameter item: The new item to insert</span>\r\n    <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">item</span> : <span class=\"hljs-type\">Element</span>) {\r\n        items.append(item)\r\n        <span class=\"hljs-keyword\">var</span> i <span class=\"hljs-operator\">=</span> items.count <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">while</span> i <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">&amp;&amp;</span> compare(items[i], items[parent(i)]) {\r\n            items.swapAt(i, parent(i))\r\n            i <span class=\"hljs-operator\">=</span> parent(i)\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Restores the heap property starting at a given index</span>\r\n    <span class=\"hljs-comment\">/// - parameter index: The index to start at</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">heapify</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">index</span> : <span class=\"hljs-type\">Int</span>) {\r\n        <span class=\"hljs-keyword\">var</span> minimumIndex <span class=\"hljs-operator\">=</span> index\r\n        <span class=\"hljs-keyword\">if</span> left(index) <span class=\"hljs-operator\">&lt;</span> count <span class=\"hljs-operator\">&amp;&amp;</span> compare(items[left(index)], items[minimumIndex]) {\r\n            minimumIndex <span class=\"hljs-operator\">=</span> left(index)\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> right(index) <span class=\"hljs-operator\">&lt;</span> count <span class=\"hljs-operator\">&amp;&amp;</span> compare(items[right(index)], items[minimumIndex]) {\r\n            minimumIndex <span class=\"hljs-operator\">=</span> right(index)\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> minimumIndex <span class=\"hljs-operator\">!=</span> index {\r\n            items.swapAt(minimumIndex, index)\r\n            heapify(minimumIndex)\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the index of the left child of an item</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">left</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">index</span> : <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">Int</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">*</span> index <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the index of the right child of an item</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">right</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">index</span>: <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">Int</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">*</span> index <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">2</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the index of the parent of an item</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">parent</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">index</span>: <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">Int</span> {\r\n        <span class=\"hljs-keyword\">return</span> (index <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>) <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">2</span>\r\n    }\r\n}\r\n\r\n\r\n<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">Heap</span>: <span class=\"hljs-title class_\">ExpressibleByArrayLiteral</span> <span class=\"hljs-title class_\">where</span> <span class=\"hljs-title class_\">Element</span>: <span class=\"hljs-title class_\">Comparable</span> {\r\n    <span class=\"hljs-keyword\">init</span>(<span class=\"hljs-params\">arrayLiteral</span> <span class=\"hljs-params\">elements</span>: <span class=\"hljs-type\">Element</span>...) {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-keyword\">init</span>(elements, compare: <span class=\"hljs-operator\">&lt;</span>)\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">init</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">elements</span>: [<span class=\"hljs-type\">Element</span>]) {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-keyword\">init</span>(elements, compare: <span class=\"hljs-operator\">&lt;</span>)\r\n    }\r\n}\r\n"
    },
    "lua": {
      "dir": "src\\data_structures\\heap.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src\\data_structures\\heap.lua",
      "code": "<span class=\"hljs-keyword\">local</span> heap = {}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heap.less_than</span><span class=\"hljs-params\">(a, b)</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> a &lt; b\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heap.new</span><span class=\"hljs-params\">(less_than)</span></span>\r\n\t<span class=\"hljs-comment\">-- empty min heap</span>\r\n\t<span class=\"hljs-keyword\">return</span> { less_than = less_than }\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heap:empty</span><span class=\"hljs-params\">()</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-literal\">nil</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heap:size</span><span class=\"hljs-params\">()</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> #<span class=\"hljs-built_in\">self</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heap:push</span><span class=\"hljs-params\">(value)</span></span>\r\n\t<span class=\"hljs-built_in\">table</span>.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-built_in\">self</span>, value)\r\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heapify</span><span class=\"hljs-params\">(index)</span></span>\r\n\t\t<span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">local</span> parent = <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">floor</span>(index / <span class=\"hljs-number\">2</span>)\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>.less_than(<span class=\"hljs-built_in\">self</span>[index], <span class=\"hljs-built_in\">self</span>[parent]) <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-built_in\">self</span>[parent], <span class=\"hljs-built_in\">self</span>[index] = <span class=\"hljs-built_in\">self</span>[index], <span class=\"hljs-built_in\">self</span>[parent]\r\n\t\t\theapify(parent)\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\theapify(#<span class=\"hljs-built_in\">self</span>)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heap:top</span><span class=\"hljs-params\">()</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>[<span class=\"hljs-number\">1</span>]\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heap:pop</span><span class=\"hljs-params\">()</span></span>\r\n\t<span class=\"hljs-keyword\">local</span> value = <span class=\"hljs-built_in\">self</span>[<span class=\"hljs-number\">1</span>]\r\n\t<span class=\"hljs-keyword\">local</span> last = #<span class=\"hljs-built_in\">self</span>\r\n\t<span class=\"hljs-keyword\">if</span> last == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">then</span>\r\n\t\t<span class=\"hljs-built_in\">self</span>[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">nil</span>\r\n\t\t<span class=\"hljs-keyword\">return</span> value\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-built_in\">self</span>[<span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">self</span>[last] = <span class=\"hljs-built_in\">self</span>[last], <span class=\"hljs-literal\">nil</span>\r\n\tlast = last - <span class=\"hljs-number\">1</span>\r\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heapify</span><span class=\"hljs-params\">(index)</span></span>\r\n\t\t<span class=\"hljs-keyword\">local</span> left_child = index * <span class=\"hljs-number\">2</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> left_child &gt; last <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">local</span> smallest_child = left_child + <span class=\"hljs-number\">1</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> smallest_child &gt; last <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">self</span>.less_than(<span class=\"hljs-built_in\">self</span>[left_child], <span class=\"hljs-built_in\">self</span>[smallest_child]) <span class=\"hljs-keyword\">then</span>\r\n\t\t\tsmallest_child = left_child\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>.less_than(<span class=\"hljs-built_in\">self</span>[smallest_child], <span class=\"hljs-built_in\">self</span>[index]) <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-built_in\">self</span>[index], <span class=\"hljs-built_in\">self</span>[smallest_child] = <span class=\"hljs-built_in\">self</span>[smallest_child], <span class=\"hljs-built_in\">self</span>[index]\r\n\t\t\theapify(smallest_child)\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\theapify(<span class=\"hljs-number\">1</span>)\r\n\t<span class=\"hljs-keyword\">return</span> value\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;class&quot;</span>)(heap)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Pawan Dogra",
      "email": "35614614+plaxi0s@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Boyd Johnson",
      "email": "boydjohnson@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Linda_pp",
      "email": "rhysd@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Matthias Gilch",
      "email": "matthias.gilch.mg@gmail.com",
      "commits": 1
    },
    {
      "name": "Mat Wood",
      "email": "thepacketgeek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Mark Huang",
      "email": "hhzeos@gmail.com",
      "commits": 1
    },
    {
      "name": "lanzhiwang",
      "email": "hzhilamp@163.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Akash Ali",
      "email": "45498607+AkashAli506@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Yasser A",
      "email": "r7al.77@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Sven Weidauer",
      "email": "sven@5sw.de",
      "commits": 2
    },
    {
      "name": "Nicolas Renard",
      "email": "nicolas.renard.76@outlook.fr",
      "commits": 2
    },
    {
      "name": "Ankit Agarwal",
      "email": "ankit.agarwal02@snapdeal.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}