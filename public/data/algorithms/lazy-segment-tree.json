{
  "slug": "lazy-segment-tree",
  "name": "Lazy Segment Tree",
  "categories": [
    "datastructures",
    "binarytree"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\binary_tree\\lazy_segment_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\binary_tree\\lazy_segment_tree.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SegmentTree</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, size: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.size = size\r\n        <span class=\"hljs-comment\"># approximate the overall size of segment tree with given value</span>\r\n        self.segment_tree = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span> * size)]\r\n        <span class=\"hljs-comment\"># create array to store lazy update</span>\r\n        self.lazy = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span> * size)]\r\n        self.flag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span> * size)]  <span class=\"hljs-comment\"># flag for lazy update</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">left</span>(<span class=\"hljs-params\">self, idx: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; segment_tree = SegmentTree(15)\r\n        &gt;&gt;&gt; segment_tree.left(1)\r\n        2\r\n        &gt;&gt;&gt; segment_tree.left(2)\r\n        4\r\n        &gt;&gt;&gt; segment_tree.left(12)\r\n        24\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> idx * <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">right</span>(<span class=\"hljs-params\">self, idx: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; segment_tree = SegmentTree(15)\r\n        &gt;&gt;&gt; segment_tree.right(1)\r\n        3\r\n        &gt;&gt;&gt; segment_tree.right(2)\r\n        5\r\n        &gt;&gt;&gt; segment_tree.right(12)\r\n        25\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> idx * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">\r\n        self, idx: <span class=\"hljs-built_in\">int</span>, left_element: <span class=\"hljs-built_in\">int</span>, right_element: <span class=\"hljs-built_in\">int</span>, A: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]\r\n    </span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">if</span> left_element == right_element:\r\n            self.segment_tree[idx] = A[left_element - <span class=\"hljs-number\">1</span>]\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            mid = (left_element + right_element) // <span class=\"hljs-number\">2</span>\r\n            self.build(self.left(idx), left_element, mid, A)\r\n            self.build(self.right(idx), mid + <span class=\"hljs-number\">1</span>, right_element, A)\r\n            self.segment_tree[idx] = <span class=\"hljs-built_in\">max</span>(\r\n                self.segment_tree[self.left(idx)], self.segment_tree[self.right(idx)]\r\n            )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">\r\n        self, idx: <span class=\"hljs-built_in\">int</span>, left_element: <span class=\"hljs-built_in\">int</span>, right_element: <span class=\"hljs-built_in\">int</span>, a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span>, val: <span class=\"hljs-built_in\">int</span>\r\n    </span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        update with O(lg n) (Normal segment tree without lazy update will take O(nlg n)\r\n        for each update)\r\n\r\n        update(1, 1, size, a, b, v) for update val v to [a,b]\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.flag[idx] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n            self.segment_tree[idx] = self.lazy[idx]\r\n            self.flag[idx] = <span class=\"hljs-literal\">False</span>\r\n            <span class=\"hljs-keyword\">if</span> left_element != right_element:\r\n                self.lazy[self.left(idx)] = self.lazy[idx]\r\n                self.lazy[self.right(idx)] = self.lazy[idx]\r\n                self.flag[self.left(idx)] = <span class=\"hljs-literal\">True</span>\r\n                self.flag[self.right(idx)] = <span class=\"hljs-literal\">True</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> right_element &lt; a <span class=\"hljs-keyword\">or</span> left_element &gt; b:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">if</span> left_element &gt;= a <span class=\"hljs-keyword\">and</span> right_element &lt;= b:\r\n            self.segment_tree[idx] = val\r\n            <span class=\"hljs-keyword\">if</span> left_element != right_element:\r\n                self.lazy[self.left(idx)] = val\r\n                self.lazy[self.right(idx)] = val\r\n                self.flag[self.left(idx)] = <span class=\"hljs-literal\">True</span>\r\n                self.flag[self.right(idx)] = <span class=\"hljs-literal\">True</span>\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n        mid = (left_element + right_element) // <span class=\"hljs-number\">2</span>\r\n        self.update(self.left(idx), left_element, mid, a, b, val)\r\n        self.update(self.right(idx), mid + <span class=\"hljs-number\">1</span>, right_element, a, b, val)\r\n        self.segment_tree[idx] = <span class=\"hljs-built_in\">max</span>(\r\n            self.segment_tree[self.left(idx)], self.segment_tree[self.right(idx)]\r\n        )\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-comment\"># query with O(lg n)</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">query</span>(<span class=\"hljs-params\">\r\n        self, idx: <span class=\"hljs-built_in\">int</span>, left_element: <span class=\"hljs-built_in\">int</span>, right_element: <span class=\"hljs-built_in\">int</span>, a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span>\r\n    </span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        query(1, 1, size, a, b) for query max of [a,b]\r\n        &gt;&gt;&gt; A = [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8]\r\n        &gt;&gt;&gt; segment_tree = SegmentTree(15)\r\n        &gt;&gt;&gt; segment_tree.build(1, 1, 15, A)\r\n        &gt;&gt;&gt; segment_tree.query(1, 1, 15, 4, 6)\r\n        7\r\n        &gt;&gt;&gt; segment_tree.query(1, 1, 15, 7, 11)\r\n        14\r\n        &gt;&gt;&gt; segment_tree.query(1, 1, 15, 7, 12)\r\n        15\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.flag[idx] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n            self.segment_tree[idx] = self.lazy[idx]\r\n            self.flag[idx] = <span class=\"hljs-literal\">False</span>\r\n            <span class=\"hljs-keyword\">if</span> left_element != right_element:\r\n                self.lazy[self.left(idx)] = self.lazy[idx]\r\n                self.lazy[self.right(idx)] = self.lazy[idx]\r\n                self.flag[self.left(idx)] = <span class=\"hljs-literal\">True</span>\r\n                self.flag[self.right(idx)] = <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">if</span> right_element &lt; a <span class=\"hljs-keyword\">or</span> left_element &gt; b:\r\n            <span class=\"hljs-keyword\">return</span> -math.inf\r\n        <span class=\"hljs-keyword\">if</span> left_element &gt;= a <span class=\"hljs-keyword\">and</span> right_element &lt;= b:\r\n            <span class=\"hljs-keyword\">return</span> self.segment_tree[idx]\r\n        mid = (left_element + right_element) // <span class=\"hljs-number\">2</span>\r\n        q1 = self.query(self.left(idx), left_element, mid, a, b)\r\n        q2 = self.query(self.right(idx), mid + <span class=\"hljs-number\">1</span>, right_element, a, b)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>(q1, q2)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>([self.query(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, self.size, i, i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, self.size + <span class=\"hljs-number\">1</span>)])\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    A = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">11</span>, -<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">8</span>]\r\n    size = <span class=\"hljs-number\">15</span>\r\n    segt = SegmentTree(size)\r\n    segt.build(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, size, A)\r\n    <span class=\"hljs-built_in\">print</span>(segt.query(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, size, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>))\r\n    <span class=\"hljs-built_in\">print</span>(segt.query(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, size, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>))\r\n    <span class=\"hljs-built_in\">print</span>(segt.query(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, size, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">12</span>))\r\n    segt.update(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, size, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">111</span>)\r\n    <span class=\"hljs-built_in\">print</span>(segt.query(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, size, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">15</span>))\r\n    segt.update(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, size, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">235</span>)\r\n    <span class=\"hljs-built_in\">print</span>(segt)\r\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Hao LI",
      "email": "8520588+Leo-LiHao@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Sarot Busala",
      "email": "sabuza97@gmail.com",
      "commits": 1
    },
    {
      "name": "kanthuc",
      "email": "srikanthuchavali@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}