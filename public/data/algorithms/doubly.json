{
  "slug": "doubly",
  "name": "Doubly",
  "categories": [
    "structure",
    "linkedlist"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "structure\\linkedlist\\doubly.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure\\linkedlist\\doubly.go",
      "code": "<span class=\"hljs-keyword\">package</span> linkedlist\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\r\n\r\n<span class=\"hljs-comment\">// Doubly structure with just the Head Node</span>\r\n<span class=\"hljs-comment\">// We call it `Doubly` to make it easier to</span>\r\n<span class=\"hljs-comment\">// understand when calling this in peoples</span>\r\n<span class=\"hljs-comment\">// own local code to understand and experiment</span>\r\n<span class=\"hljs-comment\">// with this easily.</span>\r\n<span class=\"hljs-comment\">// For example, we can use gotools `go get` command to get</span>\r\n<span class=\"hljs-comment\">// this repository cloned inside the</span>\r\n<span class=\"hljs-comment\">// $GOPATH/src/github.com/TheAlgorithms/Go (you can do this</span>\r\n<span class=\"hljs-comment\">// manually as well) and use the import statement as follows:</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// `import &quot;github.com/TheAlgorithms/Go/structure/linkedlist&quot;`</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// and call linkedlist.Doubly to create a new doubly linked list.</span>\r\n<span class=\"hljs-keyword\">type</span> Doubly <span class=\"hljs-keyword\">struct</span> {\r\n\tHead *Node\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewDoubly</span><span class=\"hljs-params\">()</span></span> *Doubly {\r\n\t<span class=\"hljs-keyword\">return</span> &amp;Doubly{<span class=\"hljs-literal\">nil</span>}\r\n}\r\n\r\n<span class=\"hljs-comment\">// AddAtBeg Add a node to the beginning of the linkedlist</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Doubly)</span></span> AddAtBeg(val <span class=\"hljs-keyword\">interface</span>{}) {\r\n\tn := NewNode(val)\r\n\tn.Next = ll.Head\r\n\r\n\t<span class=\"hljs-keyword\">if</span> ll.Head != <span class=\"hljs-literal\">nil</span> {\r\n\t\tll.Head.Prev = n\r\n\t}\r\n\r\n\tll.Head = n\r\n\r\n}\r\n\r\n<span class=\"hljs-comment\">// AddAtEnd Add a node at the end of the linkedlist</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Doubly)</span></span> AddAtEnd(val <span class=\"hljs-keyword\">interface</span>{}) {\r\n\tn := NewNode(val)\r\n\r\n\t<span class=\"hljs-keyword\">if</span> ll.Head == <span class=\"hljs-literal\">nil</span> {\r\n\t\tll.Head = n\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t}\r\n\r\n\tcur := ll.Head\r\n\t<span class=\"hljs-keyword\">for</span> ; cur.Next != <span class=\"hljs-literal\">nil</span>; cur = cur.Next {\r\n\t}\r\n\tcur.Next = n\r\n\tn.Prev = cur\r\n}\r\n\r\n<span class=\"hljs-comment\">// DelAtBeg Delete the node at the beginning of the linkedlist</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Doubly)</span></span> DelAtBeg() <span class=\"hljs-keyword\">interface</span>{} {\r\n\t<span class=\"hljs-keyword\">if</span> ll.Head == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\r\n\t}\r\n\r\n\tcur := ll.Head\r\n\tll.Head = cur.Next\r\n\r\n\t<span class=\"hljs-keyword\">if</span> ll.Head != <span class=\"hljs-literal\">nil</span> {\r\n\t\tll.Head.Prev = <span class=\"hljs-literal\">nil</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> cur.Val\r\n}\r\n\r\n<span class=\"hljs-comment\">// DetAtEnd Delete a node at the end of the linkedlist</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Doubly)</span></span> DelAtEnd() <span class=\"hljs-keyword\">interface</span>{} {\r\n\t<span class=\"hljs-comment\">// no item</span>\r\n\t<span class=\"hljs-keyword\">if</span> ll.Head == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// only one item</span>\r\n\t<span class=\"hljs-keyword\">if</span> ll.Head.Next == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> ll.DelAtBeg()\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// more than one, go to second last</span>\r\n\tcur := ll.Head\r\n\t<span class=\"hljs-keyword\">for</span> ; cur.Next.Next != <span class=\"hljs-literal\">nil</span>; cur = cur.Next {\r\n\t}\r\n\r\n\tretval := cur.Next.Val\r\n\tcur.Next = <span class=\"hljs-literal\">nil</span>\r\n\t<span class=\"hljs-keyword\">return</span> retval\r\n}\r\n\r\n<span class=\"hljs-comment\">// Count Number of nodes in the linkedlist</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Doubly)</span></span> Count() <span class=\"hljs-keyword\">interface</span>{} {\r\n\t<span class=\"hljs-keyword\">var</span> ctr <span class=\"hljs-type\">int</span> = <span class=\"hljs-number\">0</span>\r\n\r\n\t<span class=\"hljs-keyword\">for</span> cur := ll.Head; cur != <span class=\"hljs-literal\">nil</span>; cur = cur.Next {\r\n\t\tctr += <span class=\"hljs-number\">1</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> ctr\r\n}\r\n\r\n<span class=\"hljs-comment\">// Reverse Reverse the order of the linkedlist</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Doubly)</span></span> Reverse() {\r\n\t<span class=\"hljs-keyword\">var</span> Prev, Next *Node\r\n\tcur := ll.Head\r\n\r\n\t<span class=\"hljs-keyword\">for</span> cur != <span class=\"hljs-literal\">nil</span> {\r\n\t\tNext = cur.Next\r\n\t\tcur.Next = Prev\r\n\t\tcur.Prev = Next\r\n\t\tPrev = cur\r\n\t\tcur = Next\r\n\t}\r\n\r\n\tll.Head = Prev\r\n}\r\n\r\n<span class=\"hljs-comment\">// Display display the linked list</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Doubly)</span></span> Display() {\r\n\t<span class=\"hljs-keyword\">for</span> cur := ll.Head; cur != <span class=\"hljs-literal\">nil</span>; cur = cur.Next {\r\n\t\tfmt.Print(cur.Val, <span class=\"hljs-string\">&quot; &quot;</span>)\r\n\t}\r\n\r\n\tfmt.Print(<span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n}\r\n\r\n<span class=\"hljs-comment\">// DisplayReverse Display the linkedlist in reverse order</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *Doubly)</span></span> DisplayReverse() {\r\n\t<span class=\"hljs-keyword\">if</span> ll.Head == <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">var</span> cur *Node\r\n\t<span class=\"hljs-keyword\">for</span> cur = ll.Head; cur.Next != <span class=\"hljs-literal\">nil</span>; cur = cur.Next {\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">for</span> ; cur != <span class=\"hljs-literal\">nil</span>; cur = cur.Prev {\r\n\t\tfmt.Print(cur.Val, <span class=\"hljs-string\">&quot; &quot;</span>)\r\n\t}\r\n\r\n\tfmt.Print(<span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}