{
  "slug": "min-max-heap",
  "name": "Min-Max Heap",
  "categories": [
    "datastructures",
    "heap"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/Heap/MinMaxHeap.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\DataStructures\\Heap\\MinMaxHeap.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Heap</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This class implements min-max heap.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     It provides functionality of both min-heap and max-heap with the same time complexity.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Therefore it provides constant time retrieval and logarithmic time removal</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     of both the minimum and maximum elements in it.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Generic type.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MinMaxHeap</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> List&lt;T&gt; heap;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;MinMaxHeap{T}&quot; /&gt;</span> class that contains</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     elements copied from a specified enumerable collection and that uses a specified comparer.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;collection&quot;&gt;</span>The enumerable collection to be copied.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>The default comparer to use for comparing objects.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MinMaxHeap</span>(<span class=\"hljs-params\">IEnumerable&lt;T&gt;? collection = <span class=\"hljs-literal\">null</span>, IComparer&lt;T&gt;? comparer = <span class=\"hljs-literal\">null</span></span>)</span>\r\n        {\r\n            Comparer = comparer ?? Comparer&lt;T&gt;.Default;\r\n            collection ??= Enumerable.Empty&lt;T&gt;();\r\n\r\n            heap = collection.ToList();\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = Count / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i)\r\n            {\r\n                PushDown(i);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the  <span class=\"hljs-doctag\">&lt;see cref=&quot;IComparer{T}&quot; /&gt;</span>. object that is used to order the values in the <span class=\"hljs-doctag\">&lt;see cref=&quot;MinMaxHeap{T}&quot; /&gt;</span>.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> IComparer&lt;T&gt; Comparer { <span class=\"hljs-keyword\">get</span>; }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the number of elements in the <span class=\"hljs-doctag\">&lt;see cref=&quot;MinMaxHeap{T}&quot; /&gt;</span>.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Count =&gt; heap.Count;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adds an element to the heap.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>The element to add to the heap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Add</span>(<span class=\"hljs-params\">T item</span>)</span>\r\n        {\r\n            heap.Add(item);\r\n            PushUp(Count - <span class=\"hljs-number\">1</span>);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes the maximum node from the heap and returns its value.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Thrown if heap is empty.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Value of the removed maximum node.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">ExtractMax</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (Count == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap is empty&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> max = GetMax();\r\n            RemoveNode(GetMaxNodeIndex());\r\n            <span class=\"hljs-keyword\">return</span> max;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes the minimum node from the heap and returns its value.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Thrown if heap is empty.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Value of the removed minimum node.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">ExtractMin</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (Count == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap is empty&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> min = GetMin();\r\n            RemoveNode(<span class=\"hljs-number\">0</span>);\r\n            <span class=\"hljs-keyword\">return</span> min;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the maximum value in the heap, as defined by the comparer.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Thrown if heap is empty.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The maximum value in the heap.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">GetMax</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (Count == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap is empty&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> heap[GetMaxNodeIndex()];\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the minimum value in the heap, as defined by the comparer.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Thrown if heap is empty.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The minimum value in the heap.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">GetMin</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (Count == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap is empty&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> heap[<span class=\"hljs-number\">0</span>];\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds maximum value among children and grandchildren of the specified node.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;index&quot;&gt;</span>Index of the node in the Heap array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Index of the maximum descendant.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">IndexOfMaxChildOrGrandchild</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> descendants = <span class=\"hljs-keyword\">new</span>[]\r\n            {\r\n                <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">1</span>,\r\n                <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">2</span>,\r\n                <span class=\"hljs-number\">4</span> * index + <span class=\"hljs-number\">3</span>,\r\n                <span class=\"hljs-number\">4</span> * index + <span class=\"hljs-number\">4</span>,\r\n                <span class=\"hljs-number\">4</span> * index + <span class=\"hljs-number\">5</span>,\r\n                <span class=\"hljs-number\">4</span> * index + <span class=\"hljs-number\">6</span>,\r\n            };\r\n            <span class=\"hljs-keyword\">var</span> resIndex = descendants[<span class=\"hljs-number\">0</span>];\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> descendant <span class=\"hljs-keyword\">in</span> descendants)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (descendant &gt;= Count)\r\n                {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[descendant], heap[resIndex]) &gt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    resIndex = descendant;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> resIndex;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds minumum value among children and grandchildren of the specified node.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;index&quot;&gt;</span>Index of the node in the Heap array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Index of the minimum descendant.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">IndexOfMinChildOrGrandchild</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> descendants = <span class=\"hljs-keyword\">new</span>[] { <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span> * index + <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span> * index + <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span> * index + <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span> * index + <span class=\"hljs-number\">6</span> };\r\n            <span class=\"hljs-keyword\">var</span> resIndex = descendants[<span class=\"hljs-number\">0</span>];\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> descendant <span class=\"hljs-keyword\">in</span> descendants)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (descendant &gt;= Count)\r\n                {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[descendant], heap[resIndex]) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    resIndex = descendant;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> resIndex;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetMaxNodeIndex</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">return</span> Count <span class=\"hljs-keyword\">switch</span>\r\n            {\r\n                <span class=\"hljs-number\">0</span> =&gt; <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap is empty&quot;</span>),\r\n                <span class=\"hljs-number\">1</span> =&gt; <span class=\"hljs-number\">0</span>,\r\n                <span class=\"hljs-number\">2</span> =&gt; <span class=\"hljs-number\">1</span>,\r\n                _ =&gt; Comparer.Compare(heap[<span class=\"hljs-number\">1</span>], heap[<span class=\"hljs-number\">2</span>]) &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>,\r\n            };\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">HasChild</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span> =&gt; index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span> &lt; Count;\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">IsGrandchild</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> node, <span class=\"hljs-built_in\">int</span> grandchild</span>)</span> =&gt; grandchild &gt; <span class=\"hljs-number\">2</span> &amp;&amp; Grandparent(grandchild) == node;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks if node at index belongs to Min or Max level of the heap.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Root node belongs to Min level, its children - Max level,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     its grandchildren - Min level, and so on.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;index&quot;&gt;</span>Index to check.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true if index is at Min level; false if it is at Max Level.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">IsMinLevelIndex</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// For all Min levels, value (index + 1) has the leftmost bit set to &#x27;1&#x27; at even position.</span>\r\n            <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">uint</span> minLevelsBits = <span class=\"hljs-number\">0x55555555</span>;\r\n            <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">uint</span> maxLevelsBits = <span class=\"hljs-number\">0xAAAAAAAA</span>;\r\n            <span class=\"hljs-keyword\">return</span> ((index + <span class=\"hljs-number\">1</span>) &amp; minLevelsBits) &gt; ((index + <span class=\"hljs-number\">1</span>) &amp; maxLevelsBits);\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span> =&gt; (index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Grandparent</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span> =&gt; ((index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Assuming that children sub-trees are valid heaps, pushes node to lower levels</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     to make heap valid.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;index&quot;&gt;</span>Node index.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PushDown</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (IsMinLevelIndex(index))\r\n            {\r\n                PushDownMin(index);\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                PushDownMax(index);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PushDownMax</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (!HasChild(index))\r\n            {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> maxIndex = IndexOfMaxChildOrGrandchild(index);\r\n\r\n            <span class=\"hljs-comment\">// If smaller element are put at min level (as result of swaping), it doesn&#x27;t affect sub-tree validity.</span>\r\n            <span class=\"hljs-comment\">// If smaller element are put at max level, PushDownMax() should be called for that node.</span>\r\n            <span class=\"hljs-keyword\">if</span> (IsGrandchild(index, maxIndex))\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[maxIndex], heap[index]) &gt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    SwapNodes(maxIndex, index);\r\n                    <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[maxIndex], heap[Parent(maxIndex)]) &lt; <span class=\"hljs-number\">0</span>)\r\n                    {\r\n                        SwapNodes(maxIndex, Parent(maxIndex));\r\n                    }\r\n\r\n                    PushDownMax(maxIndex);\r\n                }\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[maxIndex], heap[index]) &gt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    SwapNodes(maxIndex, index);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PushDownMin</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (!HasChild(index))\r\n            {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> minIndex = IndexOfMinChildOrGrandchild(index);\r\n\r\n            <span class=\"hljs-comment\">// If bigger element are put at max level (as result of swaping), it doesn&#x27;t affect sub-tree validity.</span>\r\n            <span class=\"hljs-comment\">// If bigger element are put at min level, PushDownMin() should be called for that node.</span>\r\n            <span class=\"hljs-keyword\">if</span> (IsGrandchild(index, minIndex))\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[minIndex], heap[index]) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    SwapNodes(minIndex, index);\r\n                    <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[minIndex], heap[Parent(minIndex)]) &gt; <span class=\"hljs-number\">0</span>)\r\n                    {\r\n                        SwapNodes(minIndex, Parent(minIndex));\r\n                    }\r\n\r\n                    PushDownMin(minIndex);\r\n                }\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[minIndex], heap[index]) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    SwapNodes(minIndex, index);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Having a new node in the heap, swaps this node with its ancestors to make heap valid.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     For node at min level. If new node is less than its parent, then it is surely less then</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     all other nodes on max levels on path to the root of the heap. So node are pushed up, by</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     swaping with its grandparent, until they are ordered correctly.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     For node at max level algorithm is analogical.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;index&quot;&gt;</span>Index of the new node.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PushUp</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> parent = Parent(index);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (IsMinLevelIndex(index))\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[index], heap[parent]) &gt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    SwapNodes(index, parent);\r\n                    PushUpMax(parent);\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    PushUpMin(index);\r\n                }\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[index], heap[parent]) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    SwapNodes(index, parent);\r\n                    PushUpMin(parent);\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    PushUpMax(index);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PushUpMax</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (index &gt; <span class=\"hljs-number\">2</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> grandparent = Grandparent(index);\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[index], heap[grandparent]) &gt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    SwapNodes(index, grandparent);\r\n                    PushUpMax(grandparent);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PushUpMin</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (index &gt; <span class=\"hljs-number\">2</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> grandparent = Grandparent(index);\r\n                <span class=\"hljs-keyword\">if</span> (Comparer.Compare(heap[index], heap[grandparent]) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    SwapNodes(index, grandparent);\r\n                    PushUpMin(grandparent);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">RemoveNode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            SwapNodes(index, Count - <span class=\"hljs-number\">1</span>);\r\n            heap.RemoveAt(Count - <span class=\"hljs-number\">1</span>);\r\n            <span class=\"hljs-keyword\">if</span> (Count != <span class=\"hljs-number\">0</span>)\r\n            {\r\n                PushDown(index);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SwapNodes</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> i, <span class=\"hljs-built_in\">int</span> j</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> temp = heap[i];\r\n            heap[i] = heap[j];\r\n            heap[j] = temp;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "petrogavriluk",
      "email": "petrogavriluk@gmail.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}