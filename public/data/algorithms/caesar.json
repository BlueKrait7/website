{
  "slug": "caesar",
  "name": "Caesar",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\ciphers\\Caesar.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\ciphers\\Caesar.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.ciphers;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * A Java implementation of Caesar Cipher. /It is a type of substitution cipher\r\n * in which each letter in the plaintext is replaced by a letter some fixed\r\n * number of positions down the alphabet. /\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> FAHRI YARDIMCI\r\n * <span class=\"hljs-doctag\">@author</span> khalil2535\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Caesar</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Encrypt text by shifting every Latin char by add number shift for ASCII\r\n     * Example : A + 1 -&gt; B\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> Encrypted message\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encode</span><span class=\"hljs-params\">(String message, <span class=\"hljs-type\">int</span> shift)</span> {\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">encoded</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n\r\n        shift %= <span class=\"hljs-number\">26</span>;\r\n\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> message.length();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\r\n\r\n            <span class=\"hljs-comment\">//            int current = message.charAt(i); //using char to shift characters because ascii</span>\r\n            <span class=\"hljs-comment\">// is in-order latin alphabet</span>\r\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> message.charAt(i); <span class=\"hljs-comment\">// Java law : char + int = char</span>\r\n\r\n            <span class=\"hljs-keyword\">if</span> (IsCapitalLatinLetter(current)) {\r\n\r\n                current += shift;\r\n                encoded.append((<span class=\"hljs-type\">char</span>) (current &gt; <span class=\"hljs-string\">&#x27;Z&#x27;</span> ? current - <span class=\"hljs-number\">26</span> : current)); <span class=\"hljs-comment\">// 26 = number of latin letters</span>\r\n\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (IsSmallLatinLetter(current)) {\r\n\r\n                current += shift;\r\n                encoded.append((<span class=\"hljs-type\">char</span>) (current &gt; <span class=\"hljs-string\">&#x27;z&#x27;</span> ? current - <span class=\"hljs-number\">26</span> : current)); <span class=\"hljs-comment\">// 26 = number of latin letters</span>\r\n\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                encoded.append(current);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> encoded.toString();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Decrypt message by shifting back every Latin char to previous the ASCII\r\n     * Example : B - 1 -&gt; A\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> message\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">decode</span><span class=\"hljs-params\">(String encryptedMessage, <span class=\"hljs-type\">int</span> shift)</span> {\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">decoded</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n\r\n        shift %= <span class=\"hljs-number\">26</span>;\r\n\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> encryptedMessage.length();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\r\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> encryptedMessage.charAt(i);\r\n            <span class=\"hljs-keyword\">if</span> (IsCapitalLatinLetter(current)) {\r\n\r\n                current -= shift;\r\n                decoded.append((<span class=\"hljs-type\">char</span>) (current &lt; <span class=\"hljs-string\">&#x27;A&#x27;</span> ? current + <span class=\"hljs-number\">26</span> : current)); <span class=\"hljs-comment\">// 26 = number of latin letters</span>\r\n\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (IsSmallLatinLetter(current)) {\r\n\r\n                current -= shift;\r\n                decoded.append((<span class=\"hljs-type\">char</span>) (current &lt; <span class=\"hljs-string\">&#x27;a&#x27;</span> ? current + <span class=\"hljs-number\">26</span> : current)); <span class=\"hljs-comment\">// 26 = number of latin letters</span>\r\n\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                decoded.append(current);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> decoded.toString();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> true if character is capital Latin letter or false for others\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">IsCapitalLatinLetter</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> c)</span> {\r\n        <span class=\"hljs-keyword\">return</span> c &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> true if character is small Latin letter or false for others\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">IsSmallLatinLetter</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> c)</span> {\r\n        <span class=\"hljs-keyword\">return</span> c &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>;\r\n    }\r\n    <span class=\"hljs-comment\">/**\r\n     *  <span class=\"hljs-doctag\">@return</span> string array which contains all the possible decoded combination.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String[] bruteforce(String encryptedMessage) {\r\n        String[] listOfAllTheAnswers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">27</span>];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;=<span class=\"hljs-number\">26</span>; i++) {\r\n            listOfAllTheAnswers[i] = decode(encryptedMessage, i);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> listOfAllTheAnswers;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">shift</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        System.out.println(<span class=\"hljs-string\">&quot;Please enter the message (Latin Alphabet)&quot;</span>);\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">message</span> <span class=\"hljs-operator\">=</span> input.nextLine();\r\n        System.out.println(message);\r\n        System.out.println(<span class=\"hljs-string\">&quot;(E)ncode or (D)ecode or (B)ruteforce?&quot;</span>);\r\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">choice</span> <span class=\"hljs-operator\">=</span> input.next().charAt(<span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">switch</span> (choice) {\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;E&#x27;</span>:\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;e&#x27;</span>:\r\n                System.out.println(<span class=\"hljs-string\">&quot;Please enter the shift number&quot;</span>);\r\n                shift = input.nextInt() % <span class=\"hljs-number\">26</span>;\r\n                System.out.println(\r\n                        <span class=\"hljs-string\">&quot;ENCODED MESSAGE IS \\n&quot;</span> + encode(message, shift)); <span class=\"hljs-comment\">// send our function to handle</span>\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;D&#x27;</span>:\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span>:\r\n                System.out.println(<span class=\"hljs-string\">&quot;Please enter the shift number&quot;</span>);\r\n                shift = input.nextInt() % <span class=\"hljs-number\">26</span>;\r\n                System.out.println(<span class=\"hljs-string\">&quot;DECODED MESSAGE IS \\n&quot;</span> + decode(message, shift));\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;B&#x27;</span>:\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>:\r\n                String[] listOfAllTheAnswers = bruteforce(message);\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>; i&lt;=<span class=\"hljs-number\">26</span>; i++) {\r\n                    System.out.println(<span class=\"hljs-string\">&quot;FOR SHIFT &quot;</span> + String.valueOf(i) + <span class=\"hljs-string\">&quot; decoded message is &quot;</span> + listOfAllTheAnswers[i]);\r\n                }\r\n            <span class=\"hljs-keyword\">default</span>:\r\n                System.out.println(<span class=\"hljs-string\">&quot;default case&quot;</span>);\r\n        }\r\n        \r\n        input.close();\r\n    }\r\n}\r\n"
    },
    "go": {
      "dir": "cipher\\caesar\\caesar.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/cipher\\caesar\\caesar.go",
      "code": "<span class=\"hljs-comment\">// Package caesar is the shift cipher</span>\r\n<span class=\"hljs-comment\">// ref: https://en.wikipedia.org/wiki/Caesar_cipher</span>\r\n<span class=\"hljs-keyword\">package</span> caesar\r\n\r\n<span class=\"hljs-comment\">// Encrypt encrypts by right shift of &quot;key&quot; each character of &quot;input&quot;</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Encrypt</span><span class=\"hljs-params\">(input <span class=\"hljs-type\">string</span>, key <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> {\r\n\t<span class=\"hljs-comment\">// if key is negative value,</span>\r\n\t<span class=\"hljs-comment\">// updates &quot;key&quot; the number which congruents to &quot;key&quot; modulo 26</span>\r\n\tkey8 := <span class=\"hljs-type\">byte</span>(key%<span class=\"hljs-number\">26</span>+<span class=\"hljs-number\">26</span>) % <span class=\"hljs-number\">26</span>\r\n\r\n\t<span class=\"hljs-keyword\">var</span> outputBuffer []<span class=\"hljs-type\">byte</span>\r\n\t<span class=\"hljs-comment\">// r is a rune, which is the equivalent of uint32.</span>\r\n\t<span class=\"hljs-keyword\">for</span> _, r := <span class=\"hljs-keyword\">range</span> input {\r\n\t\tnewByte := <span class=\"hljs-type\">byte</span>(r)\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;A&#x27;</span> &lt;= r &amp;&amp; r &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span> {\r\n\t\t\toutputBuffer = <span class=\"hljs-built_in\">append</span>(outputBuffer, <span class=\"hljs-string\">&#x27;A&#x27;</span>+(newByte-<span class=\"hljs-string\">&#x27;A&#x27;</span>+key8)%<span class=\"hljs-number\">26</span>)\r\n\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;a&#x27;</span> &lt;= r &amp;&amp; r &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span> {\r\n\t\t\toutputBuffer = <span class=\"hljs-built_in\">append</span>(outputBuffer, <span class=\"hljs-string\">&#x27;a&#x27;</span>+(newByte-<span class=\"hljs-string\">&#x27;a&#x27;</span>+key8)%<span class=\"hljs-number\">26</span>)\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\toutputBuffer = <span class=\"hljs-built_in\">append</span>(outputBuffer, newByte)\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(outputBuffer)\r\n}\r\n\r\n<span class=\"hljs-comment\">// Decrypt decrypts by left shift of &quot;key&quot; each character of &quot;input&quot;</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Decrypt</span><span class=\"hljs-params\">(input <span class=\"hljs-type\">string</span>, key <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">string</span> {\r\n\t<span class=\"hljs-comment\">// left shift of &quot;key&quot; is same as right shift of 26-&quot;key&quot;</span>\r\n\t<span class=\"hljs-keyword\">return</span> Encrypt(input, <span class=\"hljs-number\">26</span>-key)\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\ciphers\\caesar.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\ciphers\\caesar.rs",
      "code": "<span class=\"hljs-comment\">//! Caesar Cipher</span>\r\n<span class=\"hljs-comment\">//! Based on cipher_crypt::caesar</span>\r\n<span class=\"hljs-comment\">//!</span>\r\n<span class=\"hljs-comment\">//! # Algorithm</span>\r\n<span class=\"hljs-comment\">//!</span>\r\n<span class=\"hljs-comment\">//! Rotate each ascii character by shift. The most basic example is ROT 13, which rotates &#x27;a&#x27; to</span>\r\n<span class=\"hljs-comment\">//! &#x27;n&#x27;. This implementation does not rotate unicode characters.</span>\r\n\r\n<span class=\"hljs-comment\">/// Caesar cipher to rotate cipher text by shift and return an owned String.</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">caesar</span>(cipher: &amp;<span class=\"hljs-type\">str</span>, shift: <span class=\"hljs-type\">u8</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\r\n    cipher\r\n        .<span class=\"hljs-title function_ invoke__\">chars</span>()\r\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|c| {\r\n            <span class=\"hljs-keyword\">if</span> c.<span class=\"hljs-title function_ invoke__\">is_ascii_alphabetic</span>() {\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first</span> = <span class=\"hljs-keyword\">if</span> c.<span class=\"hljs-title function_ invoke__\">is_ascii_lowercase</span>() { <span class=\"hljs-string\">b&#x27;a&#x27;</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-string\">b&#x27;A&#x27;</span> };\r\n                <span class=\"hljs-comment\">// modulo the distance to keep character range</span>\r\n                (first + (c <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span> + shift - first) % <span class=\"hljs-number\">26</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                c\r\n            }\r\n        })\r\n        .<span class=\"hljs-title function_ invoke__\">collect</span>()\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">caesar</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">13</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">caesar_rot_13</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">caesar</span>(<span class=\"hljs-string\">&quot;rust&quot;</span>, <span class=\"hljs-number\">13</span>), <span class=\"hljs-string\">&quot;ehfg&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">caesar_unicode</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">caesar</span>(<span class=\"hljs-string\">&quot;attack at dawn 攻&quot;</span>, <span class=\"hljs-number\">5</span>), <span class=\"hljs-string\">&quot;fyyfhp fy ifbs 攻&quot;</span>);\r\n    }\r\n}\r\n"
    },
    "ruby": {
      "dir": "ciphers\\caesar.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/ciphers\\caesar.rb",
      "code": "<span class=\"hljs-comment\"># Caesar Cipher replaces characters rotating X number of positions to the left or to the right.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Alphabet</span>\r\n<span class=\"hljs-comment\"># a b c d e f g h i j k l m n o p q r s t u v w x y z</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># shift 4 &gt;&gt; it means to rotate 4 places</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># After shifting</span>\r\n<span class=\"hljs-comment\"># e f g h i j k l m n o p q r s t u v w x y z a b c d</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># plaintext -&gt; apple</span>\r\n<span class=\"hljs-comment\"># ciphertext -&gt; ettpi</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CaesarCipher</span></span>\r\n  ALPHABET = (<span class=\"hljs-string\">&#x27;a&#x27;</span>..<span class=\"hljs-string\">&#x27;z&#x27;</span>).to_a\r\n\r\n  def <span class=\"hljs-keyword\">self</span>.encrypt(plaintext, shift)\r\n    plaintext.chars.map <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|letter|</span>\r\n      temp = letter.ord + shift\r\n      temp -= ALPHABET.length <span class=\"hljs-keyword\">while</span> temp &gt; <span class=\"hljs-string\">&#x27;z&#x27;</span>.ord\r\n      temp.chr\r\n    <span class=\"hljs-keyword\">end</span>.join\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  def <span class=\"hljs-keyword\">self</span>.decrypt(ciphertext, shift)\r\n    ciphertext.chars.map <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|letter|</span>\r\n      temp = letter.ord - shift\r\n      temp += ALPHABET.length <span class=\"hljs-keyword\">while</span> temp &lt; <span class=\"hljs-string\">&#x27;a&#x27;</span>.ord\r\n      temp.chr\r\n    <span class=\"hljs-keyword\">end</span>.join\r\n  <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Encoders/CaesarEncoder.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Encoders\\CaesarEncoder.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Text;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Encoders</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes using caesar cypher.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CaesarEncoder</span> : <span class=\"hljs-title\">IEncoder</span>&lt;<span class=\"hljs-title\">int</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes text using specified key,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(n),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - text length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text to be encoded.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key that will be used to encode the text.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Encoded text.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">int</span> key</span>)</span> =&gt; Cipher(text, key);\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Decodes text that was encoded using specified key,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(n),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - text length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text to be decoded.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key that was used to encode the text.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Decoded text.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">int</span> key</span>)</span> =&gt; Cipher(text, -key);\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Cipher</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">int</span> key</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> newText = <span class=\"hljs-keyword\">new</span> StringBuilder(text.Length);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; text.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">char</span>.IsLetter(text[i]))\r\n                {\r\n                    _ = newText.Append(text[i]);\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">var</span> letterA = <span class=\"hljs-built_in\">char</span>.IsUpper(text[i]) ? <span class=\"hljs-string\">&#x27;A&#x27;</span> : <span class=\"hljs-string\">&#x27;a&#x27;</span>;\r\n                <span class=\"hljs-keyword\">var</span> letterZ = <span class=\"hljs-built_in\">char</span>.IsUpper(text[i]) ? <span class=\"hljs-string\">&#x27;Z&#x27;</span> : <span class=\"hljs-string\">&#x27;z&#x27;</span>;\r\n\r\n                <span class=\"hljs-keyword\">var</span> c = text[i] + key;\r\n                c -= c &gt; letterZ ? <span class=\"hljs-number\">26</span> * (<span class=\"hljs-number\">1</span> + (c - letterZ - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">26</span>) : <span class=\"hljs-number\">0</span>;\r\n                c += c &lt; letterA ? <span class=\"hljs-number\">26</span> * (<span class=\"hljs-number\">1</span> + (letterA - c - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">26</span>) : <span class=\"hljs-number\">0</span>;\r\n\r\n                _ = newText.Append((<span class=\"hljs-built_in\">char</span>)c);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> newText.ToString();\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Arnav Borborah",
      "email": "arnavborborah11@gmail.com",
      "commits": 1
    },
    {
      "name": "Ivan Tham",
      "email": "pickfire@riseup.net",
      "commits": 1
    },
    {
      "name": "TheDoctor",
      "email": "doctorshacking@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Kaíque Kandy Koga",
      "email": "kaiquekandykoga@gmail.com",
      "commits": 1
    },
    {
      "name": "Patricio Whittingslow",
      "email": "graded.sp@gmail.com",
      "commits": 1
    },
    {
      "name": "Subhro Acharjee",
      "email": "88422396+subhroblkbox@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Fahri YARDIMCI",
      "email": "ffahri@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Marcos",
      "email": "33052423+markettes@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}