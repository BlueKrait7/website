{
  "slug": "min-heap",
  "name": "Min Heap",
  "categories": [
    "datastructures",
    "heap"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\heap\\min_heap.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\heap\\min_heap.py",
      "code": "<span class=\"hljs-comment\"># Min heap data structure</span>\r\n<span class=\"hljs-comment\"># with decrease key functionality - in O(log(n)) time</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name, val</span>):\r\n        self.name = name\r\n        self.val = val\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.__class__.__name__}</span>(<span class=\"hljs-subst\">{self.name}</span>, <span class=\"hljs-subst\">{self.val}</span>)&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__lt__</span>(<span class=\"hljs-params\">self, other</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.val &lt; other.val\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinHeap</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; r = Node(&quot;R&quot;, -1)\r\n    &gt;&gt;&gt; b = Node(&quot;B&quot;, 6)\r\n    &gt;&gt;&gt; a = Node(&quot;A&quot;, 3)\r\n    &gt;&gt;&gt; x = Node(&quot;X&quot;, 1)\r\n    &gt;&gt;&gt; e = Node(&quot;E&quot;, 4)\r\n    &gt;&gt;&gt; print(b)\r\n    Node(B, 6)\r\n    &gt;&gt;&gt; myMinHeap = MinHeap([r, b, a, x, e])\r\n    &gt;&gt;&gt; myMinHeap.decrease_key(b, -17)\r\n    &gt;&gt;&gt; print(b)\r\n    Node(B, -17)\r\n    &gt;&gt;&gt; print(myMinHeap[&quot;B&quot;])\r\n    -17\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, array</span>):\r\n        self.idx_of_element = {}\r\n        self.heap_dict = {}\r\n        self.heap = self.build_heap(array)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__getitem__</span>(<span class=\"hljs-params\">self, key</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.get_value(key)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_parent_idx</span>(<span class=\"hljs-params\">self, idx</span>):\r\n        <span class=\"hljs-keyword\">return</span> (idx - <span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_left_child_idx</span>(<span class=\"hljs-params\">self, idx</span>):\r\n        <span class=\"hljs-keyword\">return</span> idx * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_right_child_idx</span>(<span class=\"hljs-params\">self, idx</span>):\r\n        <span class=\"hljs-keyword\">return</span> idx * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_value</span>(<span class=\"hljs-params\">self, key</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.heap_dict[key]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">build_heap</span>(<span class=\"hljs-params\">self, array</span>):\r\n        lastIdx = <span class=\"hljs-built_in\">len</span>(array) - <span class=\"hljs-number\">1</span>\r\n        startFrom = self.get_parent_idx(lastIdx)\r\n\r\n        <span class=\"hljs-keyword\">for</span> idx, i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(array):\r\n            self.idx_of_element[i] = idx\r\n            self.heap_dict[i.name] = i.val\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(startFrom, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\r\n            self.sift_down(i, array)\r\n        <span class=\"hljs-keyword\">return</span> array\r\n\r\n    <span class=\"hljs-comment\"># this is min-heapify method</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sift_down</span>(<span class=\"hljs-params\">self, idx, array</span>):\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            l = self.get_left_child_idx(idx)  <span class=\"hljs-comment\"># noqa: E741</span>\r\n            r = self.get_right_child_idx(idx)\r\n\r\n            smallest = idx\r\n            <span class=\"hljs-keyword\">if</span> l &lt; <span class=\"hljs-built_in\">len</span>(array) <span class=\"hljs-keyword\">and</span> array[l] &lt; array[idx]:\r\n                smallest = l\r\n            <span class=\"hljs-keyword\">if</span> r &lt; <span class=\"hljs-built_in\">len</span>(array) <span class=\"hljs-keyword\">and</span> array[r] &lt; array[smallest]:\r\n                smallest = r\r\n\r\n            <span class=\"hljs-keyword\">if</span> smallest != idx:\r\n                array[idx], array[smallest] = array[smallest], array[idx]\r\n                (\r\n                    self.idx_of_element[array[idx]],\r\n                    self.idx_of_element[array[smallest]],\r\n                ) = (\r\n                    self.idx_of_element[array[smallest]],\r\n                    self.idx_of_element[array[idx]],\r\n                )\r\n                idx = smallest\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">break</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sift_up</span>(<span class=\"hljs-params\">self, idx</span>):\r\n        p = self.get_parent_idx(idx)\r\n        <span class=\"hljs-keyword\">while</span> p &gt;= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> self.heap[p] &gt; self.heap[idx]:\r\n            self.heap[p], self.heap[idx] = self.heap[idx], self.heap[p]\r\n            self.idx_of_element[self.heap[p]], self.idx_of_element[self.heap[idx]] = (\r\n                self.idx_of_element[self.heap[idx]],\r\n                self.idx_of_element[self.heap[p]],\r\n            )\r\n            idx = p\r\n            p = self.get_parent_idx(idx)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">peek</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.heap[<span class=\"hljs-number\">0</span>]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">self</span>):\r\n        self.heap[<span class=\"hljs-number\">0</span>], self.heap[-<span class=\"hljs-number\">1</span>] = self.heap[-<span class=\"hljs-number\">1</span>], self.heap[<span class=\"hljs-number\">0</span>]\r\n        self.idx_of_element[self.heap[<span class=\"hljs-number\">0</span>]], self.idx_of_element[self.heap[-<span class=\"hljs-number\">1</span>]] = (\r\n            self.idx_of_element[self.heap[-<span class=\"hljs-number\">1</span>]],\r\n            self.idx_of_element[self.heap[<span class=\"hljs-number\">0</span>]],\r\n        )\r\n\r\n        x = self.heap.pop()\r\n        <span class=\"hljs-keyword\">del</span> self.idx_of_element[x]\r\n        self.sift_down(<span class=\"hljs-number\">0</span>, self.heap)\r\n        <span class=\"hljs-keyword\">return</span> x\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, node</span>):\r\n        self.heap.append(node)\r\n        self.idx_of_element[node] = <span class=\"hljs-built_in\">len</span>(self.heap) - <span class=\"hljs-number\">1</span>\r\n        self.heap_dict[node.name] = node.val\r\n        self.sift_up(<span class=\"hljs-built_in\">len</span>(self.heap) - <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.heap) == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrease_key</span>(<span class=\"hljs-params\">self, node, newValue</span>):\r\n        <span class=\"hljs-keyword\">assert</span> (\r\n            self.heap[self.idx_of_element[node]].val &gt; newValue\r\n        ), <span class=\"hljs-string\">&quot;newValue must be less that current value&quot;</span>\r\n        node.val = newValue\r\n        self.heap_dict[node.name] = newValue\r\n        self.sift_up(self.idx_of_element[node])\r\n\r\n\r\n<span class=\"hljs-comment\"># USAGE</span>\r\n\r\nr = Node(<span class=\"hljs-string\">&quot;R&quot;</span>, -<span class=\"hljs-number\">1</span>)\r\nb = Node(<span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-number\">6</span>)\r\na = Node(<span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-number\">3</span>)\r\nx = Node(<span class=\"hljs-string\">&quot;X&quot;</span>, <span class=\"hljs-number\">1</span>)\r\ne = Node(<span class=\"hljs-string\">&quot;E&quot;</span>, <span class=\"hljs-number\">4</span>)\r\n\r\n<span class=\"hljs-comment\"># Use one of these two ways to generate Min-Heap</span>\r\n\r\n<span class=\"hljs-comment\"># Generating Min-Heap from array</span>\r\nmyMinHeap = MinHeap([r, b, a, x, e])\r\n\r\n<span class=\"hljs-comment\"># Generating Min-Heap by Insert method</span>\r\n<span class=\"hljs-comment\"># myMinHeap.insert(a)</span>\r\n<span class=\"hljs-comment\"># myMinHeap.insert(b)</span>\r\n<span class=\"hljs-comment\"># myMinHeap.insert(x)</span>\r\n<span class=\"hljs-comment\"># myMinHeap.insert(r)</span>\r\n<span class=\"hljs-comment\"># myMinHeap.insert(e)</span>\r\n\r\n<span class=\"hljs-comment\"># Before</span>\r\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Min Heap - before decrease key&quot;</span>)\r\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> myMinHeap.heap:\r\n    <span class=\"hljs-built_in\">print</span>(i)\r\n\r\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Min Heap - After decrease key of node [B -&gt; -17]&quot;</span>)\r\nmyMinHeap.decrease_key(b, -<span class=\"hljs-number\">17</span>)\r\n\r\n<span class=\"hljs-comment\"># After</span>\r\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> myMinHeap.heap:\r\n    <span class=\"hljs-built_in\">print</span>(i)\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Data-Structures\\Heap\\test\\MinHeap.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures\\Heap\\test\\MinHeap.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">MinHeap</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../MinHeap&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;MinHeap&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">39</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">51</span>]\r\n  <span class=\"hljs-keyword\">let</span> heap\r\n\r\n  <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n    heap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MinHeap</span>(array)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should initialize a heap from an input array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(heap).<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-string\">&#x27;heap&#x27;</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">39</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">51</span>] })   <span class=\"hljs-comment\">// eslint-disable-line</span>\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should show the top value in the heap&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> minValue = heap.<span class=\"hljs-title function_\">peek</span>()\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(minValue).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">1</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should remove and return the top value in the heap&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> minValue = heap.<span class=\"hljs-title function_\">extractMin</span>()\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(minValue).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(heap).<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-string\">&#x27;heap&#x27;</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">39</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">51</span>] })      <span class=\"hljs-comment\">// eslint-disable-line</span>\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should insert a new value and sort until it meets heap conditions&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    heap.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">15</span>)\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(heap).<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-string\">&#x27;heap&#x27;</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">39</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">51</span>, <span class=\"hljs-number\">42</span>] })  <span class=\"hljs-comment\">// eslint-disable-line</span>\r\n  })\r\n})\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\heaps\\MinHeap.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\heaps\\MinHeap.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.heaps;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Heap tree where a node&#x27;s key is higher than or equal to its parent&#x27;s and\r\n * lower than or equal to its children&#x27;s.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Nicolas Renard\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinHeap</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Heap</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&lt;HeapElement&gt; minHeap;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MinHeap</span><span class=\"hljs-params\">(List&lt;HeapElement&gt; listElements)</span> {\r\n        minHeap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (HeapElement heapElement : listElements) {\r\n            <span class=\"hljs-keyword\">if</span> (heapElement != <span class=\"hljs-literal\">null</span>) {\r\n                insertElement(heapElement);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Null element. Not added to heap&quot;</span>);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (minHeap.size() == <span class=\"hljs-number\">0</span>) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;No element has been added, empty heap.&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Get the element at a given index. The key for the list is equal to index value - 1</span>\r\n    <span class=\"hljs-keyword\">public</span> HeapElement <span class=\"hljs-title function_\">getElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-keyword\">if</span> ((elementIndex &lt;= <span class=\"hljs-number\">0</span>) || (elementIndex &gt; minHeap.size())) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexOutOfBoundsException</span>(<span class=\"hljs-string\">&quot;Index out of heap range&quot;</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> minHeap.get(elementIndex - <span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Get the key of the element at a given index</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getElementKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-keyword\">return</span> minHeap.get(elementIndex - <span class=\"hljs-number\">1</span>).getKey();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Swaps two elements in the heap</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index1, <span class=\"hljs-type\">int</span> index2)</span> {\r\n        <span class=\"hljs-type\">HeapElement</span> <span class=\"hljs-variable\">temporaryElement</span> <span class=\"hljs-operator\">=</span> minHeap.get(index1 - <span class=\"hljs-number\">1</span>);\r\n        minHeap.set(index1 - <span class=\"hljs-number\">1</span>, minHeap.get(index2 - <span class=\"hljs-number\">1</span>));\r\n        minHeap.set(index2 - <span class=\"hljs-number\">1</span>, temporaryElement);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Toggle an element up to its right place as long as its key is lower than its parent&#x27;s</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">toggleUp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> minHeap.get(elementIndex - <span class=\"hljs-number\">1</span>).getKey();\r\n        <span class=\"hljs-keyword\">while</span> (getElementKey((<span class=\"hljs-type\">int</span>) Math.floor(elementIndex / <span class=\"hljs-number\">2.0</span>)) &gt; key) {\r\n            swap(elementIndex, (<span class=\"hljs-type\">int</span>) Math.floor(elementIndex / <span class=\"hljs-number\">2.0</span>));\r\n            elementIndex = (<span class=\"hljs-type\">int</span>) Math.floor(elementIndex / <span class=\"hljs-number\">2.0</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Toggle an element down to its right place as long as its key is higher</span>\r\n    <span class=\"hljs-comment\">// than any of its children&#x27;s</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">toggleDown</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> minHeap.get(elementIndex - <span class=\"hljs-number\">1</span>).getKey();\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">wrongOrder</span>\r\n                <span class=\"hljs-operator\">=</span> (key &gt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>))\r\n                || (key &gt; getElementKey(Math.min(elementIndex * <span class=\"hljs-number\">2</span>, minHeap.size())));\r\n        <span class=\"hljs-keyword\">while</span> ((<span class=\"hljs-number\">2</span> * elementIndex &lt;= minHeap.size()) &amp;&amp; wrongOrder) {\r\n            <span class=\"hljs-comment\">// Check whether it shall swap the element with its left child or its right one if any.</span>\r\n            <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-number\">2</span> * elementIndex &lt; minHeap.size())\r\n                    &amp;&amp; (getElementKey(elementIndex * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>) &lt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>))) {\r\n                swap(elementIndex, <span class=\"hljs-number\">2</span> * elementIndex + <span class=\"hljs-number\">1</span>);\r\n                elementIndex = <span class=\"hljs-number\">2</span> * elementIndex + <span class=\"hljs-number\">1</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                swap(elementIndex, <span class=\"hljs-number\">2</span> * elementIndex);\r\n                elementIndex = <span class=\"hljs-number\">2</span> * elementIndex;\r\n            }\r\n            wrongOrder\r\n                    = (key &gt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>))\r\n                    || (key &gt; getElementKey(Math.min(elementIndex * <span class=\"hljs-number\">2</span>, minHeap.size())));\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> HeapElement <span class=\"hljs-title function_\">extractMin</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">HeapElement</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> minHeap.get(<span class=\"hljs-number\">0</span>);\r\n        deleteElement(<span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertElement</span><span class=\"hljs-params\">(HeapElement element)</span> {\r\n        minHeap.add(element);\r\n        toggleUp(minHeap.size());\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elementIndex)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (minHeap.isEmpty())\r\n      <span class=\"hljs-keyword\">try</span> {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EmptyHeapException</span>(<span class=\"hljs-string\">&quot;Attempt to delete an element from an empty heap&quot;</span>);\r\n        } <span class=\"hljs-keyword\">catch</span> (EmptyHeapException e) {\r\n            e.printStackTrace();\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> ((elementIndex &gt; minHeap.size()) || (elementIndex &lt;= <span class=\"hljs-number\">0</span>)) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexOutOfBoundsException</span>(<span class=\"hljs-string\">&quot;Index out of heap range&quot;</span>);\r\n        }\r\n        <span class=\"hljs-comment\">// The last element in heap replaces the one to be deleted</span>\r\n        minHeap.set(elementIndex - <span class=\"hljs-number\">1</span>, getElement(minHeap.size()));\r\n        minHeap.remove(minHeap.size());\r\n        <span class=\"hljs-comment\">// Shall the new element be moved up...</span>\r\n        <span class=\"hljs-keyword\">if</span> (getElementKey(elementIndex) &lt; getElementKey((<span class=\"hljs-type\">int</span>) Math.floor(elementIndex / <span class=\"hljs-number\">2.0</span>))) {\r\n            toggleUp(elementIndex);\r\n        } <span class=\"hljs-comment\">// ... or down ?</span>\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (((<span class=\"hljs-number\">2</span> * elementIndex &lt;= minHeap.size())\r\n                &amp;&amp; (getElementKey(elementIndex) &gt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>)))\r\n                || ((<span class=\"hljs-number\">2</span> * elementIndex &lt; minHeap.size())\r\n                &amp;&amp; (getElementKey(elementIndex) &gt; getElementKey(elementIndex * <span class=\"hljs-number\">2</span>)))) {\r\n            toggleDown(elementIndex);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> HeapElement <span class=\"hljs-title function_\">getElement</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> EmptyHeapException {\r\n        <span class=\"hljs-keyword\">try</span> {\r\n            <span class=\"hljs-keyword\">return</span> extractMin();\r\n        } <span class=\"hljs-keyword\">catch</span> (Exception e) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EmptyHeapException</span>(<span class=\"hljs-string\">&quot;Heap is empty. Error retrieving element&quot;</span>);\r\n        }\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "data_structures\\heap\\min_heap.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\heap\\min_heap.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">min_heap</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> *p;\r\n    <span class=\"hljs-type\">int</span> size;\r\n    <span class=\"hljs-type\">int</span> count;\r\n} Heap;\r\n\r\nHeap *<span class=\"hljs-title function_\">create_heap</span><span class=\"hljs-params\">(Heap *heap)</span>; <span class=\"hljs-comment\">/*Creates a min_heap structure and returns a\r\n                                  pointer to the struct*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">down_heapify</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> index)</span>; <span class=\"hljs-comment\">/*Pushes an element downwards in the\r\n                                             heap to find its correct position*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">up_heapify</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> index)</span>; <span class=\"hljs-comment\">/*Pushes an element upwards in the heap\r\n                                           to find its correct position*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> x)</span>;           <span class=\"hljs-comment\">/*Inserts an element in the heap*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(Heap *heap)</span>; <span class=\"hljs-comment\">/*Removes the top element from the heap*/</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">top</span><span class=\"hljs-params\">(Heap *heap)</span>; <span class=\"hljs-comment\">/*Returns the top element of the heap or returns INT_MIN if\r\n                        heap is empty*/</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">empty</span><span class=\"hljs-params\">(Heap *heap)</span>; <span class=\"hljs-comment\">/*Checks if heap is empty*/</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">(Heap *heap)</span>;  <span class=\"hljs-comment\">/*Returns the size of heap*/</span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    Heap *head = create_heap(head);\r\n    push(head, <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 10\\n&quot;</span>);\r\n    push(head, <span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 3\\n&quot;</span>);\r\n    push(head, <span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 2\\n&quot;</span>);\r\n    push(head, <span class=\"hljs-number\">8</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 8\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Top element = %d \\n&quot;</span>, top(head));\r\n    push(head, <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 1\\n&quot;</span>);\r\n    push(head, <span class=\"hljs-number\">7</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Pushing element : 7\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Top element = %d \\n&quot;</span>, top(head));\r\n    pop(head);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Popping an element.\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Top element = %d \\n&quot;</span>, top(head));\r\n    pop(head);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Popping an element.\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Top element = %d \\n&quot;</span>, top(head));\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\nHeap *<span class=\"hljs-title function_\">create_heap</span><span class=\"hljs-params\">(Heap *heap)</span>\r\n{\r\n    heap = (Heap *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(Heap));\r\n    heap-&gt;size = <span class=\"hljs-number\">1</span>;\r\n    heap-&gt;p = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(heap-&gt;size * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    heap-&gt;count = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">return</span> heap;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">down_heapify</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> index)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (index &gt;= heap-&gt;count)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    <span class=\"hljs-type\">int</span> left = index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-type\">int</span> right = index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-type\">int</span> leftflag = <span class=\"hljs-number\">0</span>, rightflag = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-type\">int</span> minimum = *((heap-&gt;p) + index);\r\n    <span class=\"hljs-keyword\">if</span> (left &lt; heap-&gt;count &amp;&amp; minimum &gt; *((heap-&gt;p) + left))\r\n    {\r\n        minimum = *((heap-&gt;p) + left);\r\n        leftflag = <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (right &lt; heap-&gt;count &amp;&amp; minimum &gt; *((heap-&gt;p) + right))\r\n    {\r\n        minimum = *((heap-&gt;p) + right);\r\n        leftflag = <span class=\"hljs-number\">0</span>;\r\n        rightflag = <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (leftflag)\r\n    {\r\n        *((heap-&gt;p) + left) = *((heap-&gt;p) + index);\r\n        *((heap-&gt;p) + index) = minimum;\r\n        down_heapify(heap, left);\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (rightflag)\r\n    {\r\n        *((heap-&gt;p) + right) = *((heap-&gt;p) + index);\r\n        *((heap-&gt;p) + index) = minimum;\r\n        down_heapify(heap, right);\r\n    }\r\n}\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">up_heapify</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> index)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> parent = (index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-keyword\">if</span> (parent &lt; <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    <span class=\"hljs-keyword\">if</span> (*((heap-&gt;p) + index) &lt; *((heap-&gt;p) + parent))\r\n    {\r\n        <span class=\"hljs-type\">int</span> temp = *((heap-&gt;p) + index);\r\n        *((heap-&gt;p) + index) = *((heap-&gt;p) + parent);\r\n        *((heap-&gt;p) + parent) = temp;\r\n        up_heapify(heap, parent);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(Heap *heap, <span class=\"hljs-type\">int</span> x)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (heap-&gt;count &gt;= heap-&gt;size)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    *((heap-&gt;p) + heap-&gt;count) = x;\r\n    heap-&gt;count++;\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">4</span> * heap-&gt;count &gt;= <span class=\"hljs-number\">3</span> * heap-&gt;size)\r\n    {\r\n        heap-&gt;size *= <span class=\"hljs-number\">2</span>;\r\n        (heap-&gt;p) = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">realloc</span>((heap-&gt;p), (heap-&gt;size) * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    }\r\n    up_heapify(heap, heap-&gt;count - <span class=\"hljs-number\">1</span>);\r\n}\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(Heap *heap)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (heap-&gt;count == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    heap-&gt;count--;\r\n    <span class=\"hljs-type\">int</span> temp = *((heap-&gt;p) + heap-&gt;count);\r\n    *((heap-&gt;p) + heap-&gt;count) = *(heap-&gt;p);\r\n    *(heap-&gt;p) = temp;\r\n    down_heapify(heap, <span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">4</span> * heap-&gt;count &lt;= heap-&gt;size)\r\n    {\r\n        heap-&gt;size /= <span class=\"hljs-number\">2</span>;\r\n        (heap-&gt;p) = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">realloc</span>((heap-&gt;p), (heap-&gt;size) * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    }\r\n}\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">top</span><span class=\"hljs-params\">(Heap *heap)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (heap-&gt;count != <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> *(heap-&gt;p);\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> INT_MIN;\r\n}\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">empty</span><span class=\"hljs-params\">(Heap *heap)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (heap-&gt;count != <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n}\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">(Heap *heap)</span> { <span class=\"hljs-keyword\">return</span> heap-&gt;count; }\r\n"
    },
    "dart": {
      "dir": "data_structures\\Heap\\Binary_Heap\\Min_Heap.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures\\Heap\\Binary_Heap\\Min_Heap.dart",
      "code": "<span class=\"hljs-comment\">//Author:Shawn</span>\r\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\r\n\r\n<span class=\"hljs-comment\">/*\r\n *         1\r\n *       /   \\\r\n *      2     3\r\n *     / \\   / \\\r\n *     5 4   6  7\r\n *    / \\\r\n *    8 9\r\n *  \r\n * Array:[1,2,3,5,4,6,7,8,9]\r\n * \r\n * rightchild : 2n + 2\r\n * leftcgild : 2n + 1\r\n*/</span>\r\n\r\n<span class=\"hljs-built_in\">List</span> upAdjust(<span class=\"hljs-built_in\">List</span> arr, <span class=\"hljs-built_in\">int</span> length) {\r\n  <span class=\"hljs-comment\">//Mark inserted nodes</span>\r\n  <span class=\"hljs-keyword\">var</span> child = length - <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-comment\">//Father nodes</span>\r\n  <span class=\"hljs-built_in\">int</span> parent = (child - <span class=\"hljs-number\">1</span>) ~/ <span class=\"hljs-number\">2</span>;\r\n  <span class=\"hljs-comment\">//Save the inserted node temporarily</span>\r\n  <span class=\"hljs-built_in\">int</span> temp = arr[child];\r\n\r\n  <span class=\"hljs-keyword\">while</span> (child &gt; <span class=\"hljs-number\">0</span> &amp;&amp; temp &lt; arr[parent]) {\r\n    <span class=\"hljs-comment\">//When temp finds the correct location, we will assign the value of temp to this node</span>\r\n    arr[child] = arr[parent];\r\n    child = parent;\r\n    parent = (child - <span class=\"hljs-number\">1</span>) ~/ <span class=\"hljs-number\">2</span>;\r\n  }\r\n  arr[child] = temp;\r\n  <span class=\"hljs-keyword\">return</span> arr;\r\n}\r\n\r\n<span class=\"hljs-comment\">/* *\r\n** Sink operation, delete operation is equivalent to\r\n** after an element is assigned to the root element, the sink  operation is performed on the root element\r\n* @param arr\r\n*@ param parent subscript of element to sink\r\n*@ param length array length\r\n*/</span>\r\n<span class=\"hljs-built_in\">List</span> downAdjust(<span class=\"hljs-built_in\">List</span> arr, <span class=\"hljs-built_in\">int</span> parent, <span class=\"hljs-built_in\">int</span> length) {\r\n  <span class=\"hljs-comment\">//Save elements to sink</span>\r\n  <span class=\"hljs-built_in\">int</span> temp = arr[parent];\r\n  <span class=\"hljs-comment\">//Locate left child node location</span>\r\n  <span class=\"hljs-built_in\">int</span> child = <span class=\"hljs-number\">2</span> * parent + <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-comment\">//Begin to sink</span>\r\n  <span class=\"hljs-keyword\">while</span> (child &lt; length) {\r\n    <span class=\"hljs-comment\">//If the right child node is smaller than the left child, locate the right child</span>\r\n    <span class=\"hljs-keyword\">if</span> (child + <span class=\"hljs-number\">1</span> &lt; length &amp;&amp; arr[child] &gt; arr[child + <span class=\"hljs-number\">1</span>]) {\r\n      child++;\r\n    }\r\n    <span class=\"hljs-comment\">//Sink ends if parent is smaller or equal to child</span>\r\n    <span class=\"hljs-keyword\">if</span> (temp &lt;= arr[child]) <span class=\"hljs-keyword\">break</span>;\r\n\r\n    arr[parent] = arr[child];\r\n    parent = child;\r\n    child = <span class=\"hljs-number\">2</span> * parent + <span class=\"hljs-number\">1</span>;\r\n  }\r\n  arr[parent] = temp;\r\n  <span class=\"hljs-keyword\">return</span> arr;\r\n}\r\n\r\n<span class=\"hljs-built_in\">List</span> buildHead(<span class=\"hljs-built_in\">List</span> arr, <span class=\"hljs-built_in\">int</span> length) {\r\n  <span class=\"hljs-comment\">//Sink from the last non leaf node</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = (length - <span class=\"hljs-number\">2</span>) ~/ <span class=\"hljs-number\">2</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n    arr = downAdjust(arr, i, length);\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> arr;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-built_in\">List</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\r\n  <span class=\"hljs-built_in\">List</span> BinaryHeap = buildHead(arr, arr.length);\r\n  <span class=\"hljs-built_in\">print</span>(BinaryHeap);\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Kaustav Bhattacharya",
      "email": "kaustavbhattacharya07@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Palash Sharma",
      "email": "54630543+palashsharma891@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Raj",
      "email": "raj1998211@gmail.com",
      "commits": 1
    },
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 2
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 2
    },
    {
      "name": "tina tae",
      "email": "48943736+tinatae@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "zacharyjones123",
      "email": "zrjones@ncsu.edu",
      "commits": 2
    },
    {
      "name": "Nicolas Renard",
      "email": "nicolas.renard.76@outlook.fr",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}