{
  "slug": "false-position",
  "name": "False Position",
  "categories": [
    "numericalmethods"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "numerical_methods\\false_position.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods\\false_position.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\brief Solve the equation \\f$f(x)=0\\f$ using [false position\r\n * method](https://en.wikipedia.org/wiki/Regula_falsi), also known as the Secant\r\n * method\r\n *\r\n * \\details\r\n * First, multiple intervals are selected with the interval gap provided.\r\n * Separate recursive function called for every root.\r\n * Roots are printed Separatelt.\r\n *\r\n * For an interval [a,b] \\f$a\\f$ and \\f$b\\f$ such that \\f$f(a)&lt;0\\f$ and\r\n * \\f$f(b)&gt;0\\f$, then the \\f$(i+1)^\\text{th}\\f$ approximation is given by: \\f[\r\n * x_{i+1} = \\frac{a_i\\cdot f(b_i) - b_i\\cdot f(a_i)}{f(b_i) - f(a_i)}\r\n * \\f]\r\n * For the next iteration, the interval is selected\r\n * as: \\f$[a,x]\\f$ if \\f$x&gt;0\\f$ or \\f$[x,b]\\f$ if \\f$x&lt;0\\f$. The Process is\r\n * continued till a close enough approximation is achieved.\r\n *\r\n * \\see newton_raphson_method.cpp, bisection_method.cpp\r\n *\r\n * \\author Unknown author\r\n * \\author [Samruddha Patil](https://github.com/sampatil578)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>     <span class=\"hljs-comment\">/// for math operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace numerical_methods\r\n * @brief Numerical methods\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> numerical_methods {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace false_position\r\n * @brief Functions for [False Position]\r\n * (https://en.wikipedia.org/wiki/Regula_falsi) method.\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> false_position {\r\n<span class=\"hljs-comment\">/**\r\n * @brief This function gives the value of f(x) for given x.\r\n * @param x value for which we have to find value of f(x).\r\n * @return value of f(x) for given x.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-title\">eq</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> x)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> (x * x - x);  <span class=\"hljs-comment\">// original equation</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n* @brief This function finds root of the equation in given interval i.e.\r\n(x1,x2).\r\n* @param x1,x2 values for an interval in which root is present.\r\n  @param y1,y2 values of function at x1, x2 espectively.\r\n* @return root of the equation in the given interval.\r\n*/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-title\">regula_falsi</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> x1, <span class=\"hljs-type\">float</span> x2, <span class=\"hljs-type\">float</span> y1, <span class=\"hljs-type\">float</span> y2)</span> </span>{\r\n    <span class=\"hljs-type\">float</span> diff = x1 - x2;\r\n    <span class=\"hljs-keyword\">if</span> (diff &lt; <span class=\"hljs-number\">0</span>) {\r\n        diff = (<span class=\"hljs-number\">-1</span>) * diff;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (diff &lt; <span class=\"hljs-number\">0.00001</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (y1 &lt; <span class=\"hljs-number\">0</span>) {\r\n            y1 = -y1;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (y2 &lt; <span class=\"hljs-number\">0</span>) {\r\n            y2 = -y2;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (y1 &lt; y2) {\r\n            <span class=\"hljs-keyword\">return</span> x1;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> x2;\r\n        }\r\n    }\r\n    <span class=\"hljs-type\">float</span> x3 = <span class=\"hljs-number\">0</span>, y3 = <span class=\"hljs-number\">0</span>;\r\n    x3 = x1 - (x1 - x2) * (y1) / (y1 - y2);\r\n    y3 = <span class=\"hljs-built_in\">eq</span>(x3);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">regula_falsi</span>(x2, x3, y2, y3);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief This function prints roots of the equation.\r\n * @param root which we have to print.\r\n * @param count which is count of the root in an interval [-range,range].\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printRoot</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> root, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int16_t</span> &amp;count)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">1</span>) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Your 1st root is : &quot;</span> &lt;&lt; root &lt;&lt; std::endl;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">2</span>) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Your 2nd root is : &quot;</span> &lt;&lt; root &lt;&lt; std::endl;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">3</span>) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Your 3rd root is : &quot;</span> &lt;&lt; root &lt;&lt; std::endl;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Your &quot;</span> &lt;&lt; count &lt;&lt; <span class=\"hljs-string\">&quot;th root is : &quot;</span> &lt;&lt; root &lt;&lt; std::endl;\r\n    }\r\n}\r\n}  <span class=\"hljs-comment\">// namespace false_position</span>\r\n}  <span class=\"hljs-comment\">// namespace numerical_methods</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">float</span> a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">0</span>, root = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int16_t</span> count = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">float</span> range =\r\n        <span class=\"hljs-number\">100000</span>;       <span class=\"hljs-comment\">// Range in which we have to find the root. (-range,range)</span>\r\n    <span class=\"hljs-type\">float</span> gap = <span class=\"hljs-number\">0.5</span>;  <span class=\"hljs-comment\">// interval gap. lesser the gap more the accuracy</span>\r\n    a = numerical_methods::false_position::<span class=\"hljs-built_in\">eq</span>((<span class=\"hljs-number\">-1</span>) * range);\r\n    i = ((<span class=\"hljs-number\">-1</span>) * range + gap);\r\n    <span class=\"hljs-comment\">// while loop for selecting proper interval in provided range and with</span>\r\n    <span class=\"hljs-comment\">// provided interval gap.</span>\r\n    <span class=\"hljs-keyword\">while</span> (i &lt;= range) {\r\n        b = numerical_methods::false_position::<span class=\"hljs-built_in\">eq</span>(i);\r\n        <span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0</span>) {\r\n            count++;\r\n            numerical_methods::false_position::<span class=\"hljs-built_in\">printRoot</span>(i, count);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (a * b &lt; <span class=\"hljs-number\">0</span>) {\r\n            root = numerical_methods::false_position::<span class=\"hljs-built_in\">regula_falsi</span>(i - gap, i,\r\n                                                                   a, b);\r\n            count++;\r\n            numerical_methods::false_position::<span class=\"hljs-built_in\">printRoot</span>(root, count);\r\n        }\r\n        a = b;\r\n        i += gap;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\arithmetic_analysis\\false_position.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\arithmetic_analysis\\false_position.m",
      "code": "<span class=\"hljs-comment\">%The basic idea behind the false position method is similar to the bisection</span>\r\n<span class=\"hljs-comment\">%method in that we continuously shrink the interval the root lies on until</span>\r\n<span class=\"hljs-comment\">%the algorithm converges on the root. Unlike the bisection method, the false</span>\r\n<span class=\"hljs-comment\">%position method does not halve the interval with each iteration. Instead of</span>\r\n<span class=\"hljs-comment\">%using the midpoint of a and b to create the new interval, the false position</span>\r\n<span class=\"hljs-comment\">%method uses the x-intercept of the line connecting f(a) and f(b). This </span>\r\n<span class=\"hljs-comment\">%algorithm converges faster than the bisection method.</span>\r\n\r\n<span class=\"hljs-comment\">%INPUTS:</span>\r\n<span class=\"hljs-comment\">%Function handle f</span>\r\n<span class=\"hljs-comment\">%endpoint a</span>\r\n<span class=\"hljs-comment\">%endpoint b</span>\r\n<span class=\"hljs-comment\">%maximum tolerated error</span>\r\n\r\n<span class=\"hljs-comment\">%OUTPUTS:</span>\r\n<span class=\"hljs-comment\">%An approximated value for the root of f within the defined interval.</span>\r\n\r\n<span class=\"hljs-comment\">%Written by MatteoRaso</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span> = <span class=\"hljs-title\">false_position</span><span class=\"hljs-params\">(f, a, b, error)</span></span>\r\n  <span class=\"hljs-keyword\">if</span> ~(f(a) &lt; <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-built_in\">disp</span>(<span class=\"hljs-string\">&quot;f(a) must be less than 0&quot;</span>)\r\n  <span class=\"hljs-keyword\">elseif</span> ~(f(b) &gt; <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-built_in\">disp</span>(<span class=\"hljs-string\">&quot;f(b) must be greater than zero&quot;</span>)\r\n  <span class=\"hljs-keyword\">else</span> \r\n    c = <span class=\"hljs-number\">100000</span>;\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">abs</span>(f(c)) &gt; error\r\n      <span class=\"hljs-comment\">%Formula for the x-intercept</span>\r\n      c = -f(b) * (b - a) / (f(b) - f(a)) + b;\r\n      <span class=\"hljs-keyword\">if</span> f(c) &lt; <span class=\"hljs-number\">0</span>\r\n        a = c;\r\n      <span class=\"hljs-keyword\">else</span>\r\n        b = c;\r\n      endif\r\n      <span class=\"hljs-built_in\">disp</span>(f(c))\r\n    endwhile\r\n    x = [<span class=\"hljs-string\">&quot;The root is approximately located at &quot;</span>, num2str(c)];\r\n    <span class=\"hljs-built_in\">disp</span>(x)\r\n    y = c;\r\n  endif\r\nendfunction\r\n"
    }
  },
  "contributors": [
    {
      "name": "MatteoRaso",
      "email": "33975162+MatteoRaso@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "samruddha patil",
      "email": "45798222+sampatil578@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "苏淞丰",
      "email": "50102735+Arctic2333@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}