{
  "slug": "dilation-operation",
  "name": "Dilation Operation",
  "categories": [
    "digitalimageprocessing",
    "morphologicaloperations"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "digital_image_processing\\morphological_operations\\dilation_operation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/digital_image_processing\\morphological_operations\\dilation_operation.py",
      "code": "<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rgb2gray</span>(<span class=\"hljs-params\">rgb: np.array</span>) -&gt; np.array:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return gray image from rgb image\r\n    &gt;&gt;&gt; rgb2gray(np.array([[[127, 255, 0]]]))\r\n    array([[187.6453]])\r\n    &gt;&gt;&gt; rgb2gray(np.array([[[0, 0, 0]]]))\r\n    array([[0.]])\r\n    &gt;&gt;&gt; rgb2gray(np.array([[[2, 4, 1]]]))\r\n    array([[3.0598]])\r\n    &gt;&gt;&gt; rgb2gray(np.array([[[26, 255, 14], [5, 147, 20], [1, 200, 0]]]))\r\n    array([[159.0524,  90.0635, 117.6989]])\r\n    &quot;&quot;&quot;</span>\r\n    r, g, b = rgb[:, :, <span class=\"hljs-number\">0</span>], rgb[:, :, <span class=\"hljs-number\">1</span>], rgb[:, :, <span class=\"hljs-number\">2</span>]\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0.2989</span> * r + <span class=\"hljs-number\">0.5870</span> * g + <span class=\"hljs-number\">0.1140</span> * b\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gray2binary</span>(<span class=\"hljs-params\">gray: np.array</span>) -&gt; np.array:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return binary image from gray image\r\n    &gt;&gt;&gt; gray2binary(np.array([[127, 255, 0]]))\r\n    array([[False,  True, False]])\r\n    &gt;&gt;&gt; gray2binary(np.array([[0]]))\r\n    array([[False]])\r\n    &gt;&gt;&gt; gray2binary(np.array([[26.2409, 4.9315, 1.4729]]))\r\n    array([[False, False, False]])\r\n    &gt;&gt;&gt; gray2binary(np.array([[26, 255, 14], [5, 147, 20], [1, 200, 0]]))\r\n    array([[False,  True, False],\r\n           [False,  True, False],\r\n           [False,  True, False]])\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">127</span> &lt; gray) &amp; (gray &lt;= <span class=\"hljs-number\">255</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dilation</span>(<span class=\"hljs-params\">image: np.array, kernel: np.array</span>) -&gt; np.array:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return dilated image\r\n    &gt;&gt;&gt; dilation(np.array([[True, False, True]]), np.array([[0, 1, 0]]))\r\n    array([[False, False, False]])\r\n    &gt;&gt;&gt; dilation(np.array([[False, False, True]]), np.array([[1, 0, 1]]))\r\n    array([[False, False, False]])\r\n    &quot;&quot;&quot;</span>\r\n    output = np.zeros_like(image)\r\n    image_padded = np.zeros(\r\n        (image.shape[<span class=\"hljs-number\">0</span>] + kernel.shape[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-number\">1</span>, image.shape[<span class=\"hljs-number\">1</span>] + kernel.shape[<span class=\"hljs-number\">1</span>] - <span class=\"hljs-number\">1</span>)\r\n    )\r\n\r\n    <span class=\"hljs-comment\"># Copy image to padded image</span>\r\n    image_padded[kernel.shape[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-number\">2</span> : -<span class=\"hljs-number\">1</span> :, kernel.shape[<span class=\"hljs-number\">1</span>] - <span class=\"hljs-number\">2</span> : -<span class=\"hljs-number\">1</span> :] = image\r\n\r\n    <span class=\"hljs-comment\"># Iterate over image &amp; apply kernel</span>\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(image.shape[<span class=\"hljs-number\">1</span>]):\r\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(image.shape[<span class=\"hljs-number\">0</span>]):\r\n            summation = (\r\n                kernel * image_padded[y : y + kernel.shape[<span class=\"hljs-number\">0</span>], x : x + kernel.shape[<span class=\"hljs-number\">1</span>]]\r\n            ).<span class=\"hljs-built_in\">sum</span>()\r\n            output[y, x] = <span class=\"hljs-built_in\">int</span>(summation &gt; <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-keyword\">return</span> output\r\n\r\n\r\n<span class=\"hljs-comment\"># kernel to be applied</span>\r\nstructuring_element = np.array([[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]])\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-comment\"># read original image</span>\r\n    image = np.array(Image.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">r&quot;..\\image_data\\lena.jpg&quot;</span>))\r\n    output = dilation(gray2binary(rgb2gray(image)), structuring_element)\r\n    <span class=\"hljs-comment\"># Save the output image</span>\r\n    pil_img = Image.fromarray(output).convert(<span class=\"hljs-string\">&quot;RGB&quot;</span>)\r\n    pil_img.save(<span class=\"hljs-string\">&quot;result_dilation.png&quot;</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Saurabh Suresh Powar",
      "email": "66636289+Spnetic-5@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}