{
  "slug": "merge-insertion-sort",
  "name": "Merge Insertion Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\merge_insertion_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\merge_insertion_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is a pure Python implementation of the merge-insertion sort algorithm\r\nSource: https://en.wikipedia.org/wiki/Merge-insertion_sort\r\n\r\nFor doctests run following command:\r\npython3 -m doctest -v merge_insertion_sort.py\r\nor\r\npython -m doctest -v merge_insertion_sort.py\r\n\r\nFor manual testing run:\r\npython3 merge_insertion_sort.py\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge_insertion_sort</span>(<span class=\"hljs-params\">collection: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of merge-insertion sort algorithm in Python\r\n\r\n    :param collection: some mutable ordered collection with heterogeneous\r\n    comparable items inside\r\n    :return: the same collection ordered by ascending\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; merge_insertion_sort([0, 5, 3, 2, 2])\r\n    [0, 2, 2, 3, 5]\r\n\r\n    &gt;&gt;&gt; merge_insertion_sort([99])\r\n    [99]\r\n\r\n    &gt;&gt;&gt; merge_insertion_sort([-2, -5, -45])\r\n    [-45, -5, -2]\r\n\r\n    Testing with all permutations on range(0,5):\r\n    &gt;&gt;&gt; import itertools\r\n    &gt;&gt;&gt; permutations = list(itertools.permutations([0, 1, 2, 3, 4]))\r\n    &gt;&gt;&gt; all(merge_insertion_sort(p) == [0, 1, 2, 3, 4] for p in permutations)\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search_insertion</span>(<span class=\"hljs-params\">sorted_list, item</span>):\r\n        left = <span class=\"hljs-number\">0</span>\r\n        right = <span class=\"hljs-built_in\">len</span>(sorted_list) - <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">while</span> left &lt;= right:\r\n            middle = (left + right) // <span class=\"hljs-number\">2</span>\r\n            <span class=\"hljs-keyword\">if</span> left == right:\r\n                <span class=\"hljs-keyword\">if</span> sorted_list[middle] &lt; item:\r\n                    left = middle + <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">break</span>\r\n            <span class=\"hljs-keyword\">elif</span> sorted_list[middle] &lt; item:\r\n                left = middle + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                right = middle - <span class=\"hljs-number\">1</span>\r\n        sorted_list.insert(left, item)\r\n        <span class=\"hljs-keyword\">return</span> sorted_list\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sortlist_2d</span>(<span class=\"hljs-params\">list_2d</span>):\r\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">left, right</span>):\r\n            result = []\r\n            <span class=\"hljs-keyword\">while</span> left <span class=\"hljs-keyword\">and</span> right:\r\n                <span class=\"hljs-keyword\">if</span> left[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] &lt; right[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]:\r\n                    result.append(left.pop(<span class=\"hljs-number\">0</span>))\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    result.append(right.pop(<span class=\"hljs-number\">0</span>))\r\n            <span class=\"hljs-keyword\">return</span> result + left + right\r\n\r\n        length = <span class=\"hljs-built_in\">len</span>(list_2d)\r\n        <span class=\"hljs-keyword\">if</span> length &lt;= <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> list_2d\r\n        middle = length // <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">return</span> merge(sortlist_2d(list_2d[:middle]), sortlist_2d(list_2d[middle:]))\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(collection) &lt;= <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> collection\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Group the items into two pairs, and leave one element if there is a last odd item.\r\n\r\n    Example: [999, 100, 75, 40, 10000]\r\n                -&gt; [999, 100], [75, 40]. Leave 10000.\r\n    &quot;&quot;&quot;</span>\r\n    two_paired_list = []\r\n    has_last_odd_item = <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(collection), <span class=\"hljs-number\">2</span>):\r\n        <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-built_in\">len</span>(collection) - <span class=\"hljs-number\">1</span>:\r\n            has_last_odd_item = <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-string\">&quot;&quot;&quot;\r\n            Sort two-pairs in each groups.\r\n\r\n            Example: [999, 100], [75, 40]\r\n                        -&gt; [100, 999], [40, 75]\r\n            &quot;&quot;&quot;</span>\r\n            <span class=\"hljs-keyword\">if</span> collection[i] &lt; collection[i + <span class=\"hljs-number\">1</span>]:\r\n                two_paired_list.append([collection[i], collection[i + <span class=\"hljs-number\">1</span>]])\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                two_paired_list.append([collection[i + <span class=\"hljs-number\">1</span>], collection[i]])\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Sort two_paired_list.\r\n\r\n    Example: [100, 999], [40, 75]\r\n                -&gt; [40, 75], [100, 999]\r\n    &quot;&quot;&quot;</span>\r\n    sorted_list_2d = sortlist_2d(two_paired_list)\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    40 &lt; 100 is sure because it has already been sorted.\r\n    Generate the sorted_list of them so that you can avoid unnecessary comparison.\r\n\r\n    Example:\r\n           group0 group1\r\n           40     100\r\n           75     999\r\n        -&gt;\r\n           group0 group1\r\n           [40,   100]\r\n           75     999\r\n    &quot;&quot;&quot;</span>\r\n    result = [i[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> sorted_list_2d]\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    100 &lt; 999 is sure because it has already been sorted.\r\n    Put 999 in last of the sorted_list so that you can avoid unnecessary comparison.\r\n\r\n    Example:\r\n           group0 group1\r\n           [40,   100]\r\n           75     999\r\n        -&gt;\r\n           group0 group1\r\n           [40,   100,   999]\r\n           75\r\n    &quot;&quot;&quot;</span>\r\n    result.append(sorted_list_2d[-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>])\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Insert the last odd item left if there is.\r\n\r\n    Example:\r\n           group0 group1\r\n           [40,   100,   999]\r\n           75\r\n        -&gt;\r\n           group0 group1\r\n           [40,   100,   999,   10000]\r\n           75\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> has_last_odd_item:\r\n        pivot = collection[-<span class=\"hljs-number\">1</span>]\r\n        result = binary_search_insertion(result, pivot)\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Insert the remaining items.\r\n    In this case, 40 &lt; 75 is sure because it has already been sorted.\r\n    Therefore, you only need to insert 75 into [100, 999, 10000],\r\n    so that you can avoid unnecessary comparison.\r\n\r\n    Example:\r\n           group0 group1\r\n           [40,   100,   999,   10000]\r\n            ^ You don&#x27;t need to compare with this as 40 &lt; 75 is already sure.\r\n           75\r\n        -&gt;\r\n           [40,   75,    100,   999,   10000]\r\n    &quot;&quot;&quot;</span>\r\n    is_last_odd_item_inserted_before_this_index = <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(sorted_list_2d) - <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-keyword\">if</span> result[i] == collection[-<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">and</span> has_last_odd_item:\r\n            is_last_odd_item_inserted_before_this_index = <span class=\"hljs-literal\">True</span>\r\n        pivot = sorted_list_2d[i][<span class=\"hljs-number\">1</span>]\r\n        <span class=\"hljs-comment\"># If last_odd_item is inserted before the item&#x27;s index,</span>\r\n        <span class=\"hljs-comment\"># you should forward index one more.</span>\r\n        <span class=\"hljs-keyword\">if</span> is_last_odd_item_inserted_before_this_index:\r\n            result = result[: i + <span class=\"hljs-number\">2</span>] + binary_search_insertion(result[i + <span class=\"hljs-number\">2</span> :], pivot)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            result = result[: i + <span class=\"hljs-number\">1</span>] + binary_search_insertion(result[i + <span class=\"hljs-number\">1</span> :], pivot)\r\n\r\n    <span class=\"hljs-keyword\">return</span> result\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n    <span class=\"hljs-built_in\">print</span>(merge_insertion_sort(unsorted))\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\merge_insertion_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\merge_insertion_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @author [@sinkyoungdeok](https://github.com/sinkyoungdeok)\r\n * @author [Krishna Vedala](https://github.com/kvedala)\r\n * @brief Algorithm that combines insertion sort and merge sort. [Wiki\r\n * link](https://en.wikipedia.org/wiki/Merge-insertion_sort)\r\n *\r\n * @see Individual algorithms: insertion_sort.cpp and merge_sort.cpp\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** \\namespace sorting\r\n * \\brief Sorting algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> sorting {\r\n<span class=\"hljs-comment\">/** \\namespace merge_insertion\r\n * \\brief Combined Intersion-Merge sorting algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> merge_insertion {\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Insertion merge algorithm\r\n * @see insertion_sort.cpp\r\n *\r\n * @tparam T array data type\r\n * @tparam N length of array\r\n * @param A pointer to array to sort\r\n * @param start start index of sorting window\r\n * @param end end index of sorting window\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-type\">size_t</span> N&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">InsertionSort</span><span class=\"hljs-params\">(std::array&lt;T, N&gt; *A, <span class=\"hljs-type\">size_t</span> start, <span class=\"hljs-type\">size_t</span> end)</span> </span>{\r\n    <span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;\r\n    T *ptr = A-&gt;<span class=\"hljs-built_in\">data</span>();\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = start; i &lt; end; i++) {\r\n        T temp = ptr[i];\r\n        j = i;\r\n        <span class=\"hljs-keyword\">while</span> (j &gt; start &amp;&amp; temp &lt; ptr[j - <span class=\"hljs-number\">1</span>]) {\r\n            ptr[j] = ptr[j - <span class=\"hljs-number\">1</span>];\r\n            j--;\r\n        }\r\n        <span class=\"hljs-comment\">//   for (j = i; j &gt; start &amp;&amp; temp &lt; ptr[j - 1]; --j) {</span>\r\n        <span class=\"hljs-comment\">//       ptr[j] = ptr[j - 1];</span>\r\n        <span class=\"hljs-comment\">//   }</span>\r\n\r\n        ptr[j] = temp;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Perform merge of data in a window\r\n *\r\n * @tparam T array data type\r\n * @tparam N length of array\r\n * @param A pointer to array to sort\r\n * @param min start index of window\r\n * @param max end index of window\r\n * @param mid mid-point of window\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-type\">size_t</span> N&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(std::array&lt;T, N&gt; *array, <span class=\"hljs-type\">size_t</span> min, <span class=\"hljs-type\">size_t</span> max, <span class=\"hljs-type\">size_t</span> mid)</span> </span>{\r\n    <span class=\"hljs-type\">size_t</span> firstIndex = min;\r\n    <span class=\"hljs-type\">size_t</span> secondIndex = mid + <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-keyword\">auto</span> ptr = array-&gt;<span class=\"hljs-built_in\">data</span>();\r\n    std::array&lt;T, N + 1&gt; tempArray{<span class=\"hljs-number\">0</span>};\r\n\r\n    <span class=\"hljs-comment\">// While there are elements in the left or right runs</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> index = min; index &lt;= max; index++) {\r\n        <span class=\"hljs-comment\">// If left run head exists and is &lt;= existing right run head.</span>\r\n        <span class=\"hljs-keyword\">if</span> (firstIndex &lt;= mid &amp;&amp;\r\n            (secondIndex &gt; max || ptr[firstIndex] &lt;= ptr[secondIndex])) {\r\n            tempArray[index] = ptr[firstIndex];\r\n            firstIndex++;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            tempArray[index] = ptr[secondIndex];\r\n            secondIndex++;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// transfer to the initial array</span>\r\n    <span class=\"hljs-built_in\">memcpy</span>(ptr + min, tempArray.<span class=\"hljs-built_in\">data</span>() + min, (max - min) * <span class=\"hljs-built_in\">sizeof</span>(T));\r\n    <span class=\"hljs-comment\">//  for (int index = min; index &lt;= max; index++) ptr[index] =</span>\r\n    <span class=\"hljs-comment\">//  tempArray[index];</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Final combined algorithm.\r\n * Algorithm utilizes ::sorting::merge_insertion::InsertionSort if window length\r\n * is less than threshold, else performs merge sort recursively using\r\n * ::sorting::merge_insertion::mergeSort\r\n *\r\n * @tparam T array data type\r\n * @tparam N length of array\r\n * @param A pointer to array to sort\r\n * @param min start index of sort window\r\n * @param max end index of sort window\r\n * @param threshold window length threshold\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-type\">size_t</span> N&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">mergeSort</span><span class=\"hljs-params\">(std::array&lt;T, N&gt; *array, <span class=\"hljs-type\">size_t</span> min, <span class=\"hljs-type\">size_t</span> max,\r\n               <span class=\"hljs-type\">size_t</span> threshold)</span> </span>{\r\n    <span class=\"hljs-comment\">// prerequisite</span>\r\n    <span class=\"hljs-keyword\">if</span> ((max - min) &lt;= threshold) {\r\n        <span class=\"hljs-built_in\">InsertionSort</span>(array, min, max);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-comment\">// get the middle point</span>\r\n        <span class=\"hljs-type\">size_t</span> mid = (max + min) &gt;&gt; <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-comment\">// apply merge sort to both parts of this</span>\r\n        <span class=\"hljs-built_in\">mergeSort</span>(array, min, mid, threshold);\r\n        <span class=\"hljs-built_in\">mergeSort</span>(array, mid, max, threshold);\r\n\r\n        <span class=\"hljs-comment\">// and finally merge all that sorted stuff</span>\r\n        <span class=\"hljs-built_in\">merge</span>(array, min, max, mid);\r\n    }\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace merge_insertion</span>\r\n}  <span class=\"hljs-comment\">// namespace sorting</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function to test code using random arrays\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-type\">size_t</span> size = <span class=\"hljs-number\">30</span>;\r\n    std::array&lt;<span class=\"hljs-type\">int</span>, size&gt; array{<span class=\"hljs-number\">0</span>};\r\n    <span class=\"hljs-comment\">// input</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n        array[i] = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">100</span> - <span class=\"hljs-number\">50</span>;\r\n        std::cout &lt;&lt; array[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; std::endl;\r\n\r\n    sorting::merge_insertion::<span class=\"hljs-built_in\">InsertionSort</span>(&amp;array, <span class=\"hljs-number\">0</span>, size);\r\n    <span class=\"hljs-comment\">//  sorting::merge_insertion::mergeSort(&amp;array, 0, size, 10);</span>\r\n\r\n    <span class=\"hljs-comment\">// output</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\r\n        std::cout &lt;&lt; array[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(array), std::<span class=\"hljs-built_in\">end</span>(array)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @return 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::<span class=\"hljs-built_in\">srand</span>(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "yellowsto",
      "email": "79023119+yellowsto@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ryuta69",
      "email": "eyma22s.yu@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}