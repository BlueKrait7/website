{
  "slug": "bezier-curve",
  "name": "Bezier Curve",
  "categories": [
    "graphics"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphics\\bezier_curve.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphics\\bezier_curve.py",
      "code": "<span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/B%C3%A9zier_curve</span>\r\n<span class=\"hljs-comment\"># https://www.tutorialspoint.com/computer_graphics/computer_graphics_curves.htm</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> scipy.special <span class=\"hljs-keyword\">import</span> comb  <span class=\"hljs-comment\"># type: ignore</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BezierCurve</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Bezier curve is a weighted sum of a set of control points.\r\n    Generate Bezier curves from a given set of control points.\r\n    This implementation works only for 2d coordinates in the xy plane.\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, list_of_points: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>]]</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        list_of_points: Control points in the xy plane on which to interpolate. These\r\n            points control the behavior (shape) of the Bezier curve.\r\n        &quot;&quot;&quot;</span>\r\n        self.list_of_points = list_of_points\r\n        <span class=\"hljs-comment\"># Degree determines the flexibility of the curve.</span>\r\n        <span class=\"hljs-comment\"># Degree = 1 will produce a straight line.</span>\r\n        self.degree = <span class=\"hljs-built_in\">len</span>(list_of_points) - <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">basis_function</span>(<span class=\"hljs-params\">self, t: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        The basis function determines the weight of each control point at time t.\r\n            t: time value between 0 and 1 inclusive at which to evaluate the basis of\r\n               the curve.\r\n        returns the x, y values of basis function at time t\r\n\r\n        &gt;&gt;&gt; curve = BezierCurve([(1,1), (1,2)])\r\n        &gt;&gt;&gt; curve.basis_function(0)\r\n        [1.0, 0.0]\r\n        &gt;&gt;&gt; curve.basis_function(1)\r\n        [0.0, 1.0]\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-number\">0</span> &lt;= t &lt;= <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;Time t must be between 0 and 1.&quot;</span>\r\n        output_values: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>] = []\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(self.list_of_points)):\r\n            <span class=\"hljs-comment\"># basis function for each i</span>\r\n            output_values.append(\r\n                comb(self.degree, i) * ((<span class=\"hljs-number\">1</span> - t) ** (self.degree - i)) * (t**i)\r\n            )\r\n        <span class=\"hljs-comment\"># the basis must sum up to 1 for it to produce a valid Bezier curve.</span>\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-built_in\">sum</span>(output_values), <span class=\"hljs-number\">5</span>) == <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> output_values\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bezier_curve_function</span>(<span class=\"hljs-params\">self, t: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        The function to produce the values of the Bezier curve at time t.\r\n            t: the value of time t at which to evaluate the Bezier function\r\n        Returns the x, y coordinates of the Bezier curve at time t.\r\n            The first point in the curve is when t = 0.\r\n            The last point in the curve is when t = 1.\r\n\r\n        &gt;&gt;&gt; curve = BezierCurve([(1,1), (1,2)])\r\n        &gt;&gt;&gt; curve.bezier_curve_function(0)\r\n        (1.0, 1.0)\r\n        &gt;&gt;&gt; curve.bezier_curve_function(1)\r\n        (1.0, 2.0)\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-number\">0</span> &lt;= t &lt;= <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;Time t must be between 0 and 1.&quot;</span>\r\n\r\n        basis_function = self.basis_function(t)\r\n        x = <span class=\"hljs-number\">0.0</span>\r\n        y = <span class=\"hljs-number\">0.0</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(self.list_of_points)):\r\n            <span class=\"hljs-comment\"># For all points, sum up the product of i-th basis function and i-th point.</span>\r\n            x += basis_function[i] * self.list_of_points[i][<span class=\"hljs-number\">0</span>]\r\n            y += basis_function[i] * self.list_of_points[i][<span class=\"hljs-number\">1</span>]\r\n        <span class=\"hljs-keyword\">return</span> (x, y)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">plot_curve</span>(<span class=\"hljs-params\">self, step_size: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0.01</span></span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Plots the Bezier curve using matplotlib plotting capabilities.\r\n            step_size: defines the step(s) at which to evaluate the Bezier curve.\r\n            The smaller the step size, the finer the curve produced.\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt  <span class=\"hljs-comment\"># type: ignore</span>\r\n\r\n        to_plot_x: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>] = []  <span class=\"hljs-comment\"># x coordinates of points to plot</span>\r\n        to_plot_y: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>] = []  <span class=\"hljs-comment\"># y coordinates of points to plot</span>\r\n\r\n        t = <span class=\"hljs-number\">0.0</span>\r\n        <span class=\"hljs-keyword\">while</span> t &lt;= <span class=\"hljs-number\">1</span>:\r\n            value = self.bezier_curve_function(t)\r\n            to_plot_x.append(value[<span class=\"hljs-number\">0</span>])\r\n            to_plot_y.append(value[<span class=\"hljs-number\">1</span>])\r\n            t += step_size\r\n\r\n        x = [i[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.list_of_points]\r\n        y = [i[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.list_of_points]\r\n\r\n        plt.plot(\r\n            to_plot_x,\r\n            to_plot_y,\r\n            color=<span class=\"hljs-string\">&quot;blue&quot;</span>,\r\n            label=<span class=\"hljs-string\">&quot;Curve of Degree &quot;</span> + <span class=\"hljs-built_in\">str</span>(self.degree),\r\n        )\r\n        plt.scatter(x, y, color=<span class=\"hljs-string\">&quot;red&quot;</span>, label=<span class=\"hljs-string\">&quot;Control Points&quot;</span>)\r\n        plt.legend()\r\n        plt.show()\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n    BezierCurve([(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)]).plot_curve()  <span class=\"hljs-comment\"># degree 1</span>\r\n    BezierCurve([(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>), (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>)]).plot_curve()  <span class=\"hljs-comment\"># degree 2</span>\r\n    BezierCurve([(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>), (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">2.5</span>, -<span class=\"hljs-number\">2.5</span>)]).plot_curve()  <span class=\"hljs-comment\"># degree 3</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "Faraz Ahmed Khan",
      "email": "31242842+fk03983@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}