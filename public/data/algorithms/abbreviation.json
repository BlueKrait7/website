{
  "slug": "abbreviation",
  "name": "Abbreviation",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming\\abbreviation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming\\abbreviation.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nhttps://www.hackerrank.com/challenges/abbr/problem\r\nYou can perform the following operation on some string, :\r\n\r\n1. Capitalize zero or more of &#x27;s lowercase letters at some index i\r\n   (i.e., make them uppercase).\r\n2. Delete all of the remaining lowercase letters in .\r\n\r\nExample:\r\na=daBcd and b=&quot;ABC&quot;\r\ndaBcd -&gt; capitalize a and c(dABCd) -&gt; remove d (ABC)\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">abbr</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">str</span>, b: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; abbr(&quot;daBcd&quot;, &quot;ABC&quot;)\r\n    True\r\n    &gt;&gt;&gt; abbr(&quot;dBcd&quot;, &quot;ABC&quot;)\r\n    False\r\n    &quot;&quot;&quot;</span>\r\n    n = <span class=\"hljs-built_in\">len</span>(a)\r\n    m = <span class=\"hljs-built_in\">len</span>(b)\r\n    dp = [[<span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\r\n    dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-literal\">True</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m + <span class=\"hljs-number\">1</span>):\r\n            <span class=\"hljs-keyword\">if</span> dp[i][j]:\r\n                <span class=\"hljs-keyword\">if</span> j &lt; m <span class=\"hljs-keyword\">and</span> a[i].upper() == b[j]:\r\n                    dp[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">True</span>\r\n                <span class=\"hljs-keyword\">if</span> a[i].islower():\r\n                    dp[i + <span class=\"hljs-number\">1</span>][j] = <span class=\"hljs-literal\">True</span>\r\n    <span class=\"hljs-keyword\">return</span> dp[n][m]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming\\abbreviation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\abbreviation.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of\r\n * [Abbrievation](https://www.hackerrank.com/challenges/abbr/problem)\r\n *\r\n * @details\r\n * Given two strings, `a` and `b`, determine if it&#x27;s possible to make `a` equal\r\n * to `b` You can perform the following operations on the string `a`:\r\n * 1. Capitalize zero or more of `a`&#x27;s lowercase letters.\r\n * 2. Delete all of the remaining lowercase letters in `a`.\r\n *\r\n * ### Algorithm\r\n * The idea is in the problem statement itself: iterate through characters of\r\n * string `a` and `b` (for character indexes `i` and `j` respectively):\r\n * 1. If `a[i]` and `b[j]` are equal, then move to next position\r\n * 2. If `a[i]` is lowercase of `b[j]`, then explore two possibilities:\r\n * a. Capitalize `a[i]` or\r\n * b. Skip `a[i]`\r\n * 3. If the `a[i]` is not uppercase, just discard that character, else return\r\n * `false`\r\n *\r\n * Time Complexity: (O(|a|*|b|)) where `|a|` =&gt; length of string `a`\r\n * @author [Ashish Daulatabad](https://github.com/AshishYUO)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for `assert`</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>    <span class=\"hljs-comment\">/// for `std::string` library</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for `std::vector` STL library</span></span>\r\n<span class=\"hljs-comment\">/**\r\n * @namespace dynamic_programming\r\n * @brief Dynamic Programming Algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace abbreviation\r\n * @brief Functions for\r\n * [Abbreviation](https://www.hackerrank.com/challenges/abbr/problem)\r\n * implementation\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> abbreviation {\r\n<span class=\"hljs-comment\">/**\r\n * @brief\r\n * Recursive Dynamic Programming function\r\n * @details\r\n * Returns whether `s` can be converted to `t` with following rules:\r\n * a. Capitalize zero or more of a&#x27;s lowercase letters from string `s`\r\n * b. remove all other lowercase letters from string `s`\r\n * @param memo To store the result\r\n * @param visited boolean to check if the result is already computed\r\n * @param str given string, which might not be abbreivated\r\n * @param result resultant abbreivated string\r\n * @param str_idx index for string `str`, helpful for transitions\r\n * @param result_idx index for string `result`, helpful for transitions\r\n * @returns `false` if string `str` cannot be converted to `result`\r\n * @returns `true` if string `str` can be converted to `result`\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">abbreviation_recursion</span><span class=\"hljs-params\">(std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt; *memo,\r\n                            std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt; *visited,\r\n                            <span class=\"hljs-type\">const</span> std::string &amp;str, <span class=\"hljs-type\">const</span> std::string &amp;result,\r\n                            <span class=\"hljs-type\">uint32_t</span> str_idx = <span class=\"hljs-number\">0</span>, <span class=\"hljs-type\">uint32_t</span> result_idx = <span class=\"hljs-number\">0</span>)</span> </span>{\r\n    <span class=\"hljs-type\">bool</span> ans = memo-&gt;<span class=\"hljs-built_in\">at</span>(str_idx).<span class=\"hljs-built_in\">at</span>(result_idx);\r\n    <span class=\"hljs-keyword\">if</span> (str_idx == str.<span class=\"hljs-built_in\">size</span>() &amp;&amp; result_idx == result.<span class=\"hljs-built_in\">size</span>()) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str_idx == str.<span class=\"hljs-built_in\">size</span>() &amp;&amp; result_idx != result.<span class=\"hljs-built_in\">size</span>()) {\r\n        <span class=\"hljs-comment\">// result `t` is not converted, return false</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!visited-&gt;<span class=\"hljs-built_in\">at</span>(str_idx).<span class=\"hljs-built_in\">at</span>(result_idx)) {\r\n        <span class=\"hljs-comment\">/**\r\n         * `(str[i] == result[j])`: if str char at position i is equal to\r\n         * `result` char at position j, then s character is a capitalized one,\r\n         * move on to next character `str[i] - 32 == result[j]`:\r\n         * if `str[i]` character is lowercase of `result[j]` then explore two\r\n         * possibilites:\r\n         * 1. convert it to capitalized letter and move both to next pointer\r\n         * `(i + 1, j + 1)`\r\n         * 2. Discard the character `(str[i])` and move to next char `(i + 1,\r\n         * j)`\r\n         */</span>\r\n        <span class=\"hljs-keyword\">if</span> (str[str_idx] == result[result_idx]) {\r\n            ans = <span class=\"hljs-built_in\">abbreviation_recursion</span>(memo, visited, str, result,\r\n                                         str_idx + <span class=\"hljs-number\">1</span>, result_idx + <span class=\"hljs-number\">1</span>);\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[str_idx] - <span class=\"hljs-number\">32</span> == result[result_idx]) {\r\n            ans = <span class=\"hljs-built_in\">abbreviation_recursion</span>(memo, visited, str, result,\r\n                                         str_idx + <span class=\"hljs-number\">1</span>, result_idx + <span class=\"hljs-number\">1</span>) ||\r\n                  <span class=\"hljs-built_in\">abbreviation_recursion</span>(memo, visited, str, result,\r\n                                         str_idx + <span class=\"hljs-number\">1</span>, result_idx);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">// if `str[i]` is uppercase, then cannot be converted, return</span>\r\n            <span class=\"hljs-comment\">// `false`</span>\r\n            <span class=\"hljs-comment\">// else `str[i]` is lowercase, only option is to discard this</span>\r\n            <span class=\"hljs-comment\">// character</span>\r\n            <span class=\"hljs-keyword\">if</span> (str[str_idx] &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; str[str_idx] &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>) {\r\n                ans = <span class=\"hljs-literal\">false</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                ans = <span class=\"hljs-built_in\">abbreviation_recursion</span>(memo, visited, str, result,\r\n                                             str_idx + <span class=\"hljs-number\">1</span>, result_idx);\r\n            }\r\n        }\r\n    }\r\n    (*memo)[str_idx][result_idx] = ans;\r\n    (*visited)[str_idx][result_idx] = <span class=\"hljs-literal\">true</span>;\r\n    <span class=\"hljs-keyword\">return</span> (*memo)[str_idx][result_idx];\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief\r\n * Iterative Dynamic Programming function\r\n * @details\r\n * Returns whether `s` can be converted to `t` with following rules:\r\n * a. Capitalize zero or more of s&#x27;s lowercase letters from string `s`\r\n * b. remove all other lowercase letters from string `s`\r\n * Note: The transition states for iterative is similar to recursive as well\r\n * @param str given string, which might not be abbreivated\r\n * @param result resultant abbreivated string\r\n * @returns `false` if string `str` cannot be converted to `result`\r\n * @returns `true` if string `str` can be converted to `result`\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">abbreviation</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;str, <span class=\"hljs-type\">const</span> std::string &amp;result)</span> </span>{\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt; <span class=\"hljs-built_in\">memo</span>(\r\n        str.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;(result.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>));\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt;= str.<span class=\"hljs-built_in\">size</span>(); ++i) {\r\n        memo[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-literal\">true</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">1</span>; i &lt;= result.<span class=\"hljs-built_in\">size</span>(); ++i) {\r\n        memo[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-literal\">false</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">1</span>; i &lt;= str.<span class=\"hljs-built_in\">size</span>(); ++i) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> j = <span class=\"hljs-number\">1</span>; j &lt;= result.<span class=\"hljs-built_in\">size</span>(); ++j) {\r\n            <span class=\"hljs-keyword\">if</span> (str[i - <span class=\"hljs-number\">1</span>] == result[j - <span class=\"hljs-number\">1</span>]) {\r\n                memo[i][j] = memo[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[i - <span class=\"hljs-number\">1</span>] - <span class=\"hljs-number\">32</span> == result[j - <span class=\"hljs-number\">1</span>]) {\r\n                memo[i][j] = (memo[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] || memo[i - <span class=\"hljs-number\">1</span>][j]);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">if</span> (str[i - <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; str[i - <span class=\"hljs-number\">1</span>] &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>) {\r\n                    memo[i][j] = <span class=\"hljs-literal\">false</span>;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    memo[i][j] = memo[i - <span class=\"hljs-number\">1</span>][j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> memo.<span class=\"hljs-built_in\">back</span>().<span class=\"hljs-built_in\">back</span>();\r\n}\r\n}  <span class=\"hljs-comment\">// namespace abbreviation</span>\r\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self test-implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::string s = <span class=\"hljs-string\">&quot;daBcd&quot;</span>, t = <span class=\"hljs-string\">&quot;ABC&quot;</span>;\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt; <span class=\"hljs-built_in\">memo</span>(s.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>,\r\n                                        std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;(t.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>)),\r\n        <span class=\"hljs-built_in\">visited</span>(s.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;(t.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>));\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(dynamic_programming::abbreviation::<span class=\"hljs-built_in\">abbreviation_recursion</span>(\r\n               &amp;memo, &amp;visited, s, t) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(dynamic_programming::abbreviation::<span class=\"hljs-built_in\">abbreviation</span>(s, t) == <span class=\"hljs-literal\">true</span>);\r\n    s = <span class=\"hljs-string\">&quot;XXVVnDEFYgYeMXzWINQYHAQKKOZEYgSRCzLZAmUYGUGILjMDET&quot;</span>;\r\n    t = <span class=\"hljs-string\">&quot;XXVVDEFYYMXWINQYHAQKKOZEYSRCLZAUYGUGILMDETQVWU&quot;</span>;\r\n    memo = std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt;(\r\n        s.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;(t.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>));\r\n\r\n    visited = std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt;(\r\n        s.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;(t.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>));\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(dynamic_programming::abbreviation::<span class=\"hljs-built_in\">abbreviation_recursion</span>(\r\n               &amp;memo, &amp;visited, s, t) == <span class=\"hljs-literal\">false</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(dynamic_programming::abbreviation::<span class=\"hljs-built_in\">abbreviation</span>(s, t) == <span class=\"hljs-literal\">false</span>);\r\n\r\n    s = <span class=\"hljs-string\">&quot;DRFNLZZVHLPZWIupjwdmqafmgkg&quot;</span>;\r\n    t = <span class=\"hljs-string\">&quot;DRFNLZZVHLPZWI&quot;</span>;\r\n\r\n    memo = std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt;(\r\n        s.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;(t.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>));\r\n\r\n    visited = std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt;&gt;(\r\n        s.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;(t.<span class=\"hljs-built_in\">size</span>() + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>));\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(dynamic_programming::abbreviation::<span class=\"hljs-built_in\">abbreviation_recursion</span>(\r\n               &amp;memo, &amp;visited, s, t) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(dynamic_programming::abbreviation::<span class=\"hljs-built_in\">abbreviation</span>(s, t) == <span class=\"hljs-literal\">true</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Ashish Bhanu Daulatabad",
      "email": "supersonic12910@gmail.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jigyasa G",
      "email": "jigsgandhi97@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Erdenezul",
      "email": "erdenezul@shine.mn",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}