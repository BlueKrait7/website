{
  "slug": "branch-and-bound-solver",
  "name": "Branch and bound solver",
  "categories": [
    "knapsack"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Knapsack/BranchAndBoundKnapsackSolver.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Knapsack\\BranchAndBoundKnapsackSolver.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Knapsack</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Branch and bound Knapsack solver.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of items in knapsack.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BranchAndBoundKnapsackSolver</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns the knapsack containing the items that maximize value while not exceeding weight capacity.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Construct a tree structure with total number of items + 1 levels, each node have two child nodes,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     starting with a dummy item root, each following levels are associated with 1 items, construct the</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     tree in breadth first order to identify the optimal item set.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;items&quot;&gt;</span>All items to choose from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;capacity&quot;&gt;</span>The maximum weight capacity of the knapsack to be filled.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;weightSelector&quot;&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A function that returns the value of the specified item</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     from the <span class=\"hljs-doctag\">&lt;paramref name=&quot;items&quot;&gt;</span>items<span class=\"hljs-doctag\">&lt;/paramref&gt;</span> list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;valueSelector&quot;&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A function that returns the weight of the specified item</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     from the <span class=\"hljs-doctag\">&lt;paramref name=&quot;items&quot;&gt;</span>items<span class=\"hljs-doctag\">&lt;/paramref&gt;</span> list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The array of items that provides the maximum value of the</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     knapsack without exceeding the specified weight <span class=\"hljs-doctag\">&lt;paramref name=&quot;capacity&quot;&gt;</span>capacity<span class=\"hljs-doctag\">&lt;/paramref&gt;</span>.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T[] <span class=\"hljs-title\">Solve</span>(<span class=\"hljs-params\">T[] items, <span class=\"hljs-built_in\">int</span> capacity, Func&lt;T, <span class=\"hljs-built_in\">int</span>&gt; weightSelector, Func&lt;T, <span class=\"hljs-built_in\">double</span>&gt; valueSelector</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// This is required for greedy approach in upper bound calculation to work.</span>\r\n            items = items.OrderBy(i =&gt; valueSelector(i) / weightSelector(i)).ToArray();\r\n\r\n            <span class=\"hljs-comment\">// nodesQueue --&gt; used to construct tree in breadth first order</span>\r\n            Queue&lt;BranchAndBoundNode&gt; nodesQueue = <span class=\"hljs-keyword\">new</span>();\r\n\r\n            <span class=\"hljs-comment\">// maxCumulativeValue --&gt; maximum value while not exceeding weight capacity.</span>\r\n            <span class=\"hljs-keyword\">var</span> maxCumulativeValue = <span class=\"hljs-number\">0.0</span>;\r\n\r\n            <span class=\"hljs-comment\">// starting node, associated with a temporary created dummy item</span>\r\n            BranchAndBoundNode root = <span class=\"hljs-keyword\">new</span>(level: <span class=\"hljs-number\">-1</span>, taken: <span class=\"hljs-literal\">false</span>);\r\n\r\n            <span class=\"hljs-comment\">// lastNodeOfOptimalPat --&gt; last item in the optimal item sets identified by this algorithm</span>\r\n            BranchAndBoundNode lastNodeOfOptimalPath = root;\r\n\r\n            nodesQueue.Enqueue(root);\r\n\r\n            <span class=\"hljs-keyword\">while</span> (nodesQueue.Count != <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-comment\">// parent --&gt; parent node which represents the previous item, may or may not be taken into the knapsack</span>\r\n                BranchAndBoundNode parent = nodesQueue.Dequeue();\r\n\r\n                <span class=\"hljs-comment\">// IF it is the last level, branching cannot be performed</span>\r\n                <span class=\"hljs-keyword\">if</span> (parent.Level == items.Length - <span class=\"hljs-number\">1</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// create a child node where the associated item is taken into the knapsack</span>\r\n                <span class=\"hljs-keyword\">var</span> left = <span class=\"hljs-keyword\">new</span> BranchAndBoundNode(parent.Level + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>, parent);\r\n\r\n                <span class=\"hljs-comment\">// create a child node where the associated item is not taken into the knapsack</span>\r\n                <span class=\"hljs-keyword\">var</span> right = <span class=\"hljs-keyword\">new</span> BranchAndBoundNode(parent.Level + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>, parent);\r\n\r\n                <span class=\"hljs-comment\">// Since the associated item on current level is taken for the first node,</span>\r\n                <span class=\"hljs-comment\">// set the cumulative weight of first node to cumulative weight of parent node + weight of the associated item,</span>\r\n                <span class=\"hljs-comment\">// set the cumulative value of first node to cumulative value of parent node + value of current level&#x27;s item.</span>\r\n                left.CumulativeWeight = parent.CumulativeWeight + weightSelector(items[left.Level]);\r\n                left.CumulativeValue = parent.CumulativeValue + valueSelector(items[left.Level]);\r\n                right.CumulativeWeight = parent.CumulativeWeight;\r\n                right.CumulativeValue = parent.CumulativeValue;\r\n\r\n                <span class=\"hljs-comment\">// IF cumulative weight is smaller than the weight capacity of the knapsack AND</span>\r\n                <span class=\"hljs-comment\">// current cumulative value is larger then the current maxCumulativeValue, update the maxCumulativeValue</span>\r\n                <span class=\"hljs-keyword\">if</span> (left.CumulativeWeight &lt;= capacity &amp;&amp; left.CumulativeValue &gt; maxCumulativeValue)\r\n                {\r\n                    maxCumulativeValue = left.CumulativeValue;\r\n                    lastNodeOfOptimalPath = left;\r\n                }\r\n\r\n                left.UpperBound = ComputeUpperBound(left, items, capacity, weightSelector, valueSelector);\r\n                right.UpperBound = ComputeUpperBound(right, items, capacity, weightSelector, valueSelector);\r\n\r\n                <span class=\"hljs-comment\">// IF upperBound of this node is larger than maxCumulativeValue,</span>\r\n                <span class=\"hljs-comment\">// the current path is still possible to reach or surpass the maximum value,</span>\r\n                <span class=\"hljs-comment\">// add current node to nodesQueue so that nodes below it can be further explored</span>\r\n                <span class=\"hljs-keyword\">if</span> (left.UpperBound &gt; maxCumulativeValue &amp;&amp; left.CumulativeWeight &lt; capacity)\r\n                {\r\n                    nodesQueue.Enqueue(left);\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// Cumulative weight is the same as for parent node and &lt; capacity</span>\r\n                <span class=\"hljs-keyword\">if</span> (right.UpperBound &gt; maxCumulativeValue)\r\n                {\r\n                    nodesQueue.Enqueue(right);\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> GetItemsFromPath(items, lastNodeOfOptimalPath);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// determine items taken based on the path</span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> T[] <span class=\"hljs-title\">GetItemsFromPath</span>(<span class=\"hljs-params\">T[] items, BranchAndBoundNode lastNodeOfPath</span>)</span>\r\n        {\r\n            List&lt;T&gt; takenItems = <span class=\"hljs-keyword\">new</span>();\r\n\r\n            <span class=\"hljs-comment\">// only bogus initial node has no parent</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> current = lastNodeOfPath; current.Parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>; current = current.Parent)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span>(current.IsTaken)\r\n                {\r\n                    takenItems.Add(items[current.Level]);\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> takenItems.ToArray();\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns the upper bound value of a given node.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;aNode&quot;&gt;</span>The given node.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;items&quot;&gt;</span>All items to choose from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;capacity&quot;&gt;</span>The maximum weight capacity of the knapsack to be filled.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;weightSelector&quot;&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A function that returns the value of the specified item</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     from the <span class=\"hljs-doctag\">&lt;paramref name=&quot;items&quot;&gt;</span>items<span class=\"hljs-doctag\">&lt;/paramref&gt;</span> list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;valueSelector&quot;&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A function that returns the weight of the specified item</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     from the <span class=\"hljs-doctag\">&lt;paramref name=&quot;items&quot;&gt;</span>items<span class=\"hljs-doctag\">&lt;/paramref&gt;</span> list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     upper bound value of the given <span class=\"hljs-doctag\">&lt;paramref name=&quot;aNode&quot;&gt;</span>node<span class=\"hljs-doctag\">&lt;/paramref&gt;</span>.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">ComputeUpperBound</span>(<span class=\"hljs-params\">BranchAndBoundNode aNode, T[] items, <span class=\"hljs-built_in\">int</span> capacity, Func&lt;T, <span class=\"hljs-built_in\">int</span>&gt; weightSelector, Func&lt;T, <span class=\"hljs-built_in\">double</span>&gt; valueSelector</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> upperBound = aNode.CumulativeValue;\r\n            <span class=\"hljs-keyword\">var</span> availableWeight = capacity - aNode.CumulativeWeight;\r\n            <span class=\"hljs-keyword\">var</span> nextLevel = aNode.Level + <span class=\"hljs-number\">1</span>;\r\n\r\n            <span class=\"hljs-keyword\">while</span> (availableWeight &gt; <span class=\"hljs-number\">0</span> &amp;&amp; nextLevel &lt; items.Length)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (weightSelector(items[nextLevel]) &lt;= availableWeight)\r\n                {\r\n                    upperBound += valueSelector(items[nextLevel]);\r\n                    availableWeight -= weightSelector(items[nextLevel]);\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    upperBound += valueSelector(items[nextLevel]) / weightSelector(items[nextLevel]) * availableWeight;\r\n                    availableWeight = <span class=\"hljs-number\">0</span>;\r\n                }\r\n\r\n                nextLevel++;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> upperBound;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}