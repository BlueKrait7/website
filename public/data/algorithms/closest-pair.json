{
  "slug": "closest-pair",
  "name": "Closest Pair",
  "categories": [
    "divideandconquer"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\divideandconquer\\ClosestPair.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\divideandconquer\\ClosestPair.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.divideandconquer;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * For a set of points in a coordinates system (10000 maximum), ClosestPair\r\n * class calculates the two closest points.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClosestPair</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Number of points\r\n     */</span>\r\n    <span class=\"hljs-type\">int</span> numberPoints;\r\n    <span class=\"hljs-comment\">/**\r\n     * Input data, maximum 10000.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> Location[] array;\r\n    <span class=\"hljs-comment\">/**\r\n     * Minimum point coordinate.\r\n     */</span>\r\n    <span class=\"hljs-type\">Location</span> <span class=\"hljs-variable\">point1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\r\n    <span class=\"hljs-comment\">/**\r\n     * Minimum point coordinate.\r\n     */</span>\r\n    <span class=\"hljs-type\">Location</span> <span class=\"hljs-variable\">point2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\r\n    <span class=\"hljs-comment\">/**\r\n     * Minimum point length.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">minNum</span> <span class=\"hljs-operator\">=</span> Double.MAX_VALUE;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setMinNum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> minNum)</span> {\r\n        ClosestPair.minNum = minNum;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setSecondCount</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> secondCount)</span> {\r\n        ClosestPair.secondCount = secondCount;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * secondCount\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">secondCount</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Constructor.\r\n     */</span>\r\n    ClosestPair(<span class=\"hljs-type\">int</span> points) {\r\n        numberPoints = points;\r\n        array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Location</span>[numberPoints];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Location class is an auxiliary type to keep points coordinates.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Location</span> {\r\n\r\n        <span class=\"hljs-type\">double</span> x;\r\n        <span class=\"hljs-type\">double</span> y;\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * <span class=\"hljs-doctag\">@param</span> xpar (IN Parameter) x coordinate &lt;br&gt;\r\n         * <span class=\"hljs-doctag\">@param</span> ypar (IN Parameter) y coordinate &lt;br&gt;\r\n         */</span>\r\n        Location(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span> xpar, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span> ypar) { <span class=\"hljs-comment\">// Save x, y coordinates</span>\r\n            <span class=\"hljs-built_in\">this</span>.x = xpar;\r\n            <span class=\"hljs-built_in\">this</span>.y = ypar;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> Location[] createLocation(<span class=\"hljs-type\">int</span> numberValues) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Location</span>[numberValues];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> Location <span class=\"hljs-title function_\">buildLocation</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x, <span class=\"hljs-type\">double</span> y)</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Location</span>(x, y);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * xPartition function: arrange x-axis.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> a (IN Parameter) array of points &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@param</span> first (IN Parameter) first point &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@param</span> last (IN Parameter) last point &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@return</span> pivot index\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">xPartition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Location[] a, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> first, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> last)</span> {\r\n\r\n        <span class=\"hljs-type\">Location</span> <span class=\"hljs-variable\">pivot</span> <span class=\"hljs-operator\">=</span> a[last]; <span class=\"hljs-comment\">// pivot</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> first - <span class=\"hljs-number\">1</span>;\r\n        Location temp; <span class=\"hljs-comment\">// Temporarily store value for position transformation</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> first; j &lt;= last - <span class=\"hljs-number\">1</span>; j++) {\r\n            <span class=\"hljs-keyword\">if</span> (a[j].x &lt;= pivot.x) { <span class=\"hljs-comment\">// Less than or less than pivot</span>\r\n                i++;\r\n                temp = a[i]; <span class=\"hljs-comment\">// array[i] &lt;-&gt; array[j]</span>\r\n                a[i] = a[j];\r\n                a[j] = temp;\r\n            }\r\n        }\r\n        i++;\r\n        temp = a[i]; <span class=\"hljs-comment\">// array[pivot] &lt;-&gt; array[i]</span>\r\n        a[i] = a[last];\r\n        a[last] = temp;\r\n        <span class=\"hljs-keyword\">return</span> i; <span class=\"hljs-comment\">// pivot index</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * yPartition function: arrange y-axis.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> a (IN Parameter) array of points &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@param</span> first (IN Parameter) first point &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@param</span> last (IN Parameter) last point &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@return</span> pivot index\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">yPartition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Location[] a, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> first, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> last)</span> {\r\n\r\n        <span class=\"hljs-type\">Location</span> <span class=\"hljs-variable\">pivot</span> <span class=\"hljs-operator\">=</span> a[last]; <span class=\"hljs-comment\">// pivot</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> first - <span class=\"hljs-number\">1</span>;\r\n        Location temp; <span class=\"hljs-comment\">// Temporarily store value for position transformation</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> first; j &lt;= last - <span class=\"hljs-number\">1</span>; j++) {\r\n            <span class=\"hljs-keyword\">if</span> (a[j].y &lt;= pivot.y) { <span class=\"hljs-comment\">// Less than or less than pivot</span>\r\n                i++;\r\n                temp = a[i]; <span class=\"hljs-comment\">// array[i] &lt;-&gt; array[j]</span>\r\n                a[i] = a[j];\r\n                a[j] = temp;\r\n            }\r\n        }\r\n        i++;\r\n        temp = a[i]; <span class=\"hljs-comment\">// array[pivot] &lt;-&gt; array[i]</span>\r\n        a[i] = a[last];\r\n        a[last] = temp;\r\n        <span class=\"hljs-keyword\">return</span> i; <span class=\"hljs-comment\">// pivot index</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * xQuickSort function: //x-axis Quick Sorting.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> a (IN Parameter) array of points &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@param</span> first (IN Parameter) first point &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@param</span> last (IN Parameter) last point &lt;br&gt;\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">xQuickSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Location[] a, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> first, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> last)</span> {\r\n\r\n        <span class=\"hljs-keyword\">if</span> (first &lt; last) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> xPartition(a, first, last); <span class=\"hljs-comment\">// pivot</span>\r\n            xQuickSort(a, first, q - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Left</span>\r\n            xQuickSort(a, q + <span class=\"hljs-number\">1</span>, last); <span class=\"hljs-comment\">// Right</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * yQuickSort function: //y-axis Quick Sorting.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> a (IN Parameter) array of points &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@param</span> first (IN Parameter) first point &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@param</span> last (IN Parameter) last point &lt;br&gt;\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">yQuickSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Location[] a, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> first, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> last)</span> {\r\n\r\n        <span class=\"hljs-keyword\">if</span> (first &lt; last) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> yPartition(a, first, last); <span class=\"hljs-comment\">// pivot</span>\r\n            yQuickSort(a, first, q - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Left</span>\r\n            yQuickSort(a, q + <span class=\"hljs-number\">1</span>, last); <span class=\"hljs-comment\">// Right</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * closestPair function: find closest pair.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> a (IN Parameter) array stored before divide &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@param</span> indexNum (IN Parameter) number coordinates divideArray &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@return</span> minimum distance &lt;br&gt;\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">closestPair</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Location[] a, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> indexNum)</span> {\r\n\r\n        Location[] divideArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Location</span>[indexNum];\r\n        System.arraycopy(a, <span class=\"hljs-number\">0</span>, divideArray, <span class=\"hljs-number\">0</span>, indexNum); <span class=\"hljs-comment\">// Copy previous array</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">divideX</span> <span class=\"hljs-operator\">=</span> indexNum / <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// Intermediate value for divide</span>\r\n        Location[] leftArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Location</span>[divideX]; <span class=\"hljs-comment\">// divide - left array</span>\r\n        <span class=\"hljs-comment\">// divide-right array</span>\r\n        Location[] rightArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Location</span>[indexNum - divideX];\r\n        <span class=\"hljs-keyword\">if</span> (indexNum &lt;= <span class=\"hljs-number\">3</span>) { <span class=\"hljs-comment\">// If the number of coordinates is 3 or less</span>\r\n            <span class=\"hljs-keyword\">return</span> bruteForce(divideArray);\r\n        }\r\n        <span class=\"hljs-comment\">// divide-left array</span>\r\n        System.arraycopy(divideArray, <span class=\"hljs-number\">0</span>, leftArray, <span class=\"hljs-number\">0</span>, divideX);\r\n        <span class=\"hljs-comment\">// divide-right array</span>\r\n        System.arraycopy(divideArray, divideX, rightArray, <span class=\"hljs-number\">0</span>, indexNum - divideX);\r\n\r\n        <span class=\"hljs-type\">double</span> minLeftArea; <span class=\"hljs-comment\">// Minimum length of left array</span>\r\n        <span class=\"hljs-type\">double</span> minRightArea; <span class=\"hljs-comment\">// Minimum length of right array</span>\r\n        <span class=\"hljs-type\">double</span> minValue; <span class=\"hljs-comment\">// Minimum lengt</span>\r\n\r\n        minLeftArea = closestPair(leftArray, divideX); <span class=\"hljs-comment\">// recursive closestPair</span>\r\n        minRightArea = closestPair(rightArray, indexNum - divideX);\r\n        <span class=\"hljs-comment\">// window size (= minimum length)</span>\r\n        minValue = Math.min(minLeftArea, minRightArea);\r\n\r\n        <span class=\"hljs-comment\">// Create window.  Set the size for creating a window</span>\r\n        <span class=\"hljs-comment\">// and creating a new array for the coordinates in the window</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; indexNum; i++) {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">xGap</span> <span class=\"hljs-operator\">=</span> Math.abs(divideArray[divideX].x - divideArray[i].x);\r\n            <span class=\"hljs-keyword\">if</span> (xGap &lt; minValue) {\r\n                ClosestPair.setSecondCount(secondCount + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// size of the array</span>\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">if</span> (divideArray[i].x &gt; divideArray[divideX].x) {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">// new array for coordinates in window</span>\r\n        Location[] firstWindow = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Location</span>[secondCount];\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; indexNum; i++) {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">xGap</span> <span class=\"hljs-operator\">=</span> Math.abs(divideArray[divideX].x - divideArray[i].x);\r\n            <span class=\"hljs-keyword\">if</span> (xGap &lt; minValue) { <span class=\"hljs-comment\">// if it&#x27;s inside a window</span>\r\n                firstWindow[k] = divideArray[i]; <span class=\"hljs-comment\">// put in an array</span>\r\n                k++;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">if</span> (divideArray[i].x &gt; divideArray[divideX].x) {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n            }\r\n        }\r\n        yQuickSort(firstWindow, <span class=\"hljs-number\">0</span>, secondCount - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Sort by y coordinates</span>\r\n        <span class=\"hljs-comment\">/* Coordinates in Window */</span>\r\n        <span class=\"hljs-type\">double</span> length;\r\n        <span class=\"hljs-comment\">// size comparison within window</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; secondCount - <span class=\"hljs-number\">1</span>; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> (i + <span class=\"hljs-number\">1</span>); j &lt; secondCount; j++) {\r\n                <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">xGap</span> <span class=\"hljs-operator\">=</span> Math.abs(firstWindow[i].x - firstWindow[j].x);\r\n                <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">yGap</span> <span class=\"hljs-operator\">=</span> Math.abs(firstWindow[i].y - firstWindow[j].y);\r\n                <span class=\"hljs-keyword\">if</span> (yGap &lt; minValue) {\r\n                    length = Math.sqrt(Math.pow(xGap, <span class=\"hljs-number\">2</span>) + Math.pow(yGap, <span class=\"hljs-number\">2</span>));\r\n                    <span class=\"hljs-comment\">// If measured distance is less than current min distance</span>\r\n                    <span class=\"hljs-keyword\">if</span> (length &lt; minValue) {\r\n                        <span class=\"hljs-comment\">// Change minimum distance to current distance</span>\r\n                        minValue = length;\r\n                        <span class=\"hljs-comment\">// Conditional for registering final coordinate</span>\r\n                        <span class=\"hljs-keyword\">if</span> (length &lt; minNum) {\r\n                            ClosestPair.setMinNum(length);\r\n                            point1 = firstWindow[i];\r\n                            point2 = firstWindow[j];\r\n                        }\r\n                    }\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n            }\r\n        }\r\n        ClosestPair.setSecondCount(<span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">return</span> minValue;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * bruteForce function: When the number of coordinates is less than 3.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arrayParam (IN Parameter) array stored before divide &lt;br&gt;\r\n     * <span class=\"hljs-doctag\">@return</span> &lt;br&gt;\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">bruteForce</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Location[] arrayParam)</span> {\r\n\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">minValue</span> <span class=\"hljs-operator\">=</span> Double.MAX_VALUE; <span class=\"hljs-comment\">// minimum distance</span>\r\n        <span class=\"hljs-type\">double</span> length;\r\n        <span class=\"hljs-type\">double</span> xGap; <span class=\"hljs-comment\">// Difference between x coordinates</span>\r\n        <span class=\"hljs-type\">double</span> yGap; <span class=\"hljs-comment\">// Difference between y coordinates</span>\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (arrayParam.length == <span class=\"hljs-number\">2</span>) {\r\n            <span class=\"hljs-comment\">// Difference between x coordinates</span>\r\n            xGap = (arrayParam[<span class=\"hljs-number\">0</span>].x - arrayParam[<span class=\"hljs-number\">1</span>].x);\r\n            <span class=\"hljs-comment\">// Difference between y coordinates</span>\r\n            yGap = (arrayParam[<span class=\"hljs-number\">0</span>].y - arrayParam[<span class=\"hljs-number\">1</span>].y);\r\n            <span class=\"hljs-comment\">// distance between coordinates</span>\r\n            length = Math.sqrt(Math.pow(xGap, <span class=\"hljs-number\">2</span>) + Math.pow(yGap, <span class=\"hljs-number\">2</span>));\r\n            <span class=\"hljs-comment\">// Conditional statement for registering final coordinate</span>\r\n            <span class=\"hljs-keyword\">if</span> (length &lt; minNum) {\r\n                ClosestPair.setMinNum(length);\r\n            }\r\n            point1 = arrayParam[<span class=\"hljs-number\">0</span>];\r\n            point2 = arrayParam[<span class=\"hljs-number\">1</span>];\r\n            result = length;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (arrayParam.length == <span class=\"hljs-number\">3</span>) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arrayParam.length - <span class=\"hljs-number\">1</span>; i++) {\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> (i + <span class=\"hljs-number\">1</span>); j &lt; arrayParam.length; j++) {\r\n                    <span class=\"hljs-comment\">// Difference between x coordinates</span>\r\n                    xGap = (arrayParam[i].x - arrayParam[j].x);\r\n                    <span class=\"hljs-comment\">// Difference between y coordinates</span>\r\n                    yGap = (arrayParam[i].y - arrayParam[j].y);\r\n                    <span class=\"hljs-comment\">// distance between coordinates</span>\r\n                    length = Math.sqrt(Math.pow(xGap, <span class=\"hljs-number\">2</span>) + Math.pow(yGap, <span class=\"hljs-number\">2</span>));\r\n                    <span class=\"hljs-comment\">// If measured distance is less than current min distance</span>\r\n                    <span class=\"hljs-keyword\">if</span> (length &lt; minValue) {\r\n                        <span class=\"hljs-comment\">// Change minimum distance to current distance</span>\r\n                        minValue = length;\r\n                        <span class=\"hljs-keyword\">if</span> (length &lt; minNum) {\r\n                            <span class=\"hljs-comment\">// Registering final coordinate</span>\r\n                            ClosestPair.setMinNum(length);\r\n                            point1 = arrayParam[i];\r\n                            point2 = arrayParam[j];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            result = minValue;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> result; <span class=\"hljs-comment\">// If only one point returns 0.</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * main function: execute class.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> args (IN Parameter) &lt;br&gt;\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String[] args)</span> {\r\n\r\n        <span class=\"hljs-comment\">// Input data consists of one x-coordinate and one y-coordinate</span>\r\n        <span class=\"hljs-type\">ClosestPair</span> <span class=\"hljs-variable\">cp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClosestPair</span>(<span class=\"hljs-number\">12</span>);\r\n        cp.array[<span class=\"hljs-number\">0</span>] = cp.buildLocation(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\r\n        cp.array[<span class=\"hljs-number\">1</span>] = cp.buildLocation(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">16</span>);\r\n        cp.array[<span class=\"hljs-number\">2</span>] = cp.buildLocation(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>);\r\n        cp.array[<span class=\"hljs-number\">3</span>] = cp.buildLocation(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>);\r\n        cp.array[<span class=\"hljs-number\">4</span>] = cp.buildLocation(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>);\r\n        cp.array[<span class=\"hljs-number\">5</span>] = cp.buildLocation(<span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">4</span>);\r\n        cp.array[<span class=\"hljs-number\">6</span>] = cp.buildLocation(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>);\r\n        cp.array[<span class=\"hljs-number\">7</span>] = cp.buildLocation(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">2</span>);\r\n        cp.array[<span class=\"hljs-number\">8</span>] = cp.buildLocation(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">19</span>);\r\n        cp.array[<span class=\"hljs-number\">9</span>] = cp.buildLocation(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">11</span>);\r\n        cp.array[<span class=\"hljs-number\">10</span>] = cp.buildLocation(<span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">13</span>);\r\n        cp.array[<span class=\"hljs-number\">11</span>] = cp.buildLocation(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>);\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Input data&quot;</span>);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Number of points: &quot;</span> + cp.array.length);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; cp.array.length; i++) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;x: &quot;</span> + cp.array[i].x + <span class=\"hljs-string\">&quot;, y: &quot;</span> + cp.array[i].y);\r\n        }\r\n\r\n        cp.xQuickSort(cp.array, <span class=\"hljs-number\">0</span>, cp.array.length - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Sorting by x value</span>\r\n\r\n        <span class=\"hljs-type\">double</span> result; <span class=\"hljs-comment\">// minimum distance</span>\r\n\r\n        result = cp.closestPair(cp.array, cp.array.length);\r\n        <span class=\"hljs-comment\">// ClosestPair start</span>\r\n        <span class=\"hljs-comment\">// minimum distance coordinates and distance output</span>\r\n        System.out.println(<span class=\"hljs-string\">&quot;Output Data&quot;</span>);\r\n        System.out.println(<span class=\"hljs-string\">&quot;(&quot;</span> + cp.point1.x + <span class=\"hljs-string\">&quot;, &quot;</span> + cp.point1.y + <span class=\"hljs-string\">&quot;)&quot;</span>);\r\n        System.out.println(<span class=\"hljs-string\">&quot;(&quot;</span> + cp.point2.x + <span class=\"hljs-string\">&quot;, &quot;</span> + cp.point2.y + <span class=\"hljs-string\">&quot;)&quot;</span>);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Minimum Distance : &quot;</span> + result);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Emrullah YILDIRIM",
      "email": "emrullahyildirim@windowslive.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Marisa Afuera",
      "email": "marisaafuera@gmail.com",
      "commits": 1
    },
    {
      "name": "SeonJae",
      "email": "dbtjswo4733@naver.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}