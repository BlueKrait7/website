{
  "slug": "boundary-fill",
  "name": "Boundary Fill",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\BoundaryFill.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\BoundaryFill.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Java program for Boundary fill algorithm.\r\n * <span class=\"hljs-doctag\">@author</span> Akshay Dubey (https://github.com/itsAkshayDubey)\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BoundaryFill</span> {\r\n\t\r\n    <span class=\"hljs-comment\">/**\r\n     * Get the color at the given co-odrinates of a 2D image\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> image The image to be filled\r\n     * <span class=\"hljs-doctag\">@param</span> x_co_ordinate The x co-ordinate of which color is to be obtained\r\n     * <span class=\"hljs-doctag\">@param</span> y_co_ordinate The y co-ordinate of which color is to be obtained\r\n     */</span>\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getPixel</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image, <span class=\"hljs-type\">int</span> x_co_ordinate, <span class=\"hljs-type\">int</span> y_co_ordinate)</span> {\r\n\t\r\n\t\t<span class=\"hljs-keyword\">return</span> image[x_co_ordinate][y_co_ordinate];\r\n\t\r\n\t}\r\n\t\r\n    <span class=\"hljs-comment\">/**\r\n     * Put the color at the given co-odrinates of a 2D image\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> image The image to be filed\r\n     * <span class=\"hljs-doctag\">@param</span> x_co_ordinate The x co-ordinate at which color is to be filled\r\n     * <span class=\"hljs-doctag\">@param</span> y_co_ordinate The y co-ordinate at which color is to be filled\r\n     */</span>\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">putPixel</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image, <span class=\"hljs-type\">int</span> x_co_ordinate, <span class=\"hljs-type\">int</span> y_co_ordinate, <span class=\"hljs-type\">int</span> new_color)</span> {\r\n\t\t\r\n\t\timage[x_co_ordinate][y_co_ordinate] = new_color;\r\n\t\r\n\t}\r\n\t\r\n    <span class=\"hljs-comment\">/**\r\n     * Fill the 2D image with new color\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> image The image to be filed\r\n     * <span class=\"hljs-doctag\">@param</span> x_co_ordinate The x co-ordinate at which color is to be filled\r\n     * <span class=\"hljs-doctag\">@param</span> y_co_ordinate The y co-ordinate at which color is to be filled\r\n     * <span class=\"hljs-doctag\">@param</span> new_color The new color which to be filled in the image\r\n     * <span class=\"hljs-doctag\">@param</span> boundary_color The old color which is to be replaced in the image\r\n     */</span>\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">boundaryFill</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image, <span class=\"hljs-type\">int</span> x_co_ordinate, <span class=\"hljs-type\">int</span> y_co_ordinate, <span class=\"hljs-type\">int</span> new_color, <span class=\"hljs-type\">int</span> boundary_color)</span> {\r\n\t\t<span class=\"hljs-keyword\">if</span>(x_co_ordinate &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y_co_ordinate &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; getPixel(image, x_co_ordinate, y_co_ordinate) != new_color &amp;&amp; getPixel(image, x_co_ordinate, y_co_ordinate) != boundary_color) {\r\n\t\t\t\r\n\t\t\tputPixel(image, x_co_ordinate, y_co_ordinate, new_color);\r\n\t\t\tboundaryFill(image, x_co_ordinate + <span class=\"hljs-number\">1</span>, y_co_ordinate, new_color, boundary_color);\r\n\t\t\tboundaryFill(image, x_co_ordinate - <span class=\"hljs-number\">1</span>, y_co_ordinate, new_color, boundary_color);\r\n\t\t\tboundaryFill(image, x_co_ordinate, y_co_ordinate + <span class=\"hljs-number\">1</span>, new_color, boundary_color);\r\n\t\t\tboundaryFill(image, x_co_ordinate, y_co_ordinate - <span class=\"hljs-number\">1</span>, new_color, boundary_color);\r\n\t\t\tboundaryFill(image, x_co_ordinate + <span class=\"hljs-number\">1</span>, y_co_ordinate - <span class=\"hljs-number\">1</span>, new_color, boundary_color);\r\n\t\t\tboundaryFill(image, x_co_ordinate - <span class=\"hljs-number\">1</span>, y_co_ordinate + <span class=\"hljs-number\">1</span>, new_color, boundary_color);\r\n\t\t\tboundaryFill(image, x_co_ordinate + <span class=\"hljs-number\">1</span>, y_co_ordinate + <span class=\"hljs-number\">1</span>, new_color, boundary_color);\r\n\t\t\tboundaryFill(image, x_co_ordinate - <span class=\"hljs-number\">1</span>, y_co_ordinate - <span class=\"hljs-number\">1</span>, new_color, boundary_color);\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n    <span class=\"hljs-comment\">/**\r\n     * This method will print the 2D image matrix\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> image The image to be printed on the console\r\n     */</span>\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printImageArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] image)</span> {\r\n\t\t\r\n\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span> ; i&lt;image.length ; i++) {\r\n\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span> ; j&lt;image[<span class=\"hljs-number\">0</span>].length ; j++) {\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.print(image[i][j]+<span class=\"hljs-string\">&quot;  &quot;</span>);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t<span class=\"hljs-comment\">// Driver Program</span>\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n\t\t\r\n\t\t<span class=\"hljs-comment\">//Input 2D image matrix</span>\r\n\t\t<span class=\"hljs-type\">int</span>[][] image = {\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>},\r\n\t\t\t\t{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>}\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tboundaryFill(image,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>);\r\n\t\t\r\n\t\t<span class=\"hljs-comment\">/* Output ==&gt;\r\n\t\t * 0  0  0  0  0  0  0  \r\n\t\t   0  3  3  3  3  0  0  \r\n\t\t   0  3  5  5  3  0  0  \r\n           0  3  5  5  3  3  3  \r\n           0  3  3  3  5  5  3  \r\n           0  0  0  3  5  5  3  \r\n           0  0  0  3  3  3  3\r\n\t\t * */</span>\r\n\t\t\r\n\t\t<span class=\"hljs-comment\">//print 2D image matrix</span>\r\n\t\tprintImageArray(image);\r\n\t}\r\n\r\n}"
    }
  },
  "contributors": [
    {
      "name": "Akshay Dubey",
      "email": "38462415+itsAkshayDubey@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}