{
  "slug": "movie-recommendation-sentance-embedding",
  "name": "Movie Recommendation Sentance Embedding",
  "categories": [
    "machinelearning",
    "naturallanguageprocessing"
  ],
  "body": {
    "en": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>",
    "zh_Hans": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>",
    "ml": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>",
    "fr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>",
    "de": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>",
    "eo": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>",
    "es": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>",
    "it": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>",
    "hr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>",
    "uk": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">import</span> nltk\n<span class=\"hljs-title\">from</span> nltk.stem.lancaster <span class=\"hljs-keyword\">import</span> LancasterStemmer\n\n<span class=\"hljs-title\">stemmer</span> = <span class=\"hljs-type\">LancasterStemmer</span>()\n\n<span class=\"hljs-meta\"># Import package</span>\n\n<span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> tflearn\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> pickle</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"136\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">with <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'intents.json'</span>) as jsonFile:\n  data = json<span class=\"hljs-selector-class\">.load</span>(jsonFile)\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(data[<span class=\"hljs-string\">'intents'</span>])</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"136\"><pre class=\"nb-stdout\">[{<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'greeting</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hi</span>', <span class=\"hljs-symbol\">'How</span> are you', <span class=\"hljs-symbol\">'Is</span> anyone there?', <span class=\"hljs-symbol\">'Hello</span>', <span class=\"hljs-symbol\">'Good</span> day', <span class=\"hljs-symbol\">'Whats</span> up'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Hello!</span>', <span class=\"hljs-symbol\">'Good</span> to see you again!', <span class=\"hljs-symbol\">'Hi</span> there, how can I help?'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'action</span> and advanture', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [' Elements of action/adventure (<span class=\"hljs-name\"><span class=\"hljs-built_in\">car</span></span> chases, shootouts, explosions) and thriller', <span class=\"hljs-symbol\">'Combines</span> action set-pieces with serious themes, character insight and/or emotional power', <span class=\"hljs-symbol\">'I</span> like action movies', <span class=\"hljs-symbol\">'i</span> like fighting movies', <span class=\"hljs-symbol\">'action</span> sequences, such as fighting, stunts, car chases or explosions', <span class=\"hljs-symbol\">'Fighting</span> is really awesome'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like action movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> action movie is awesome'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'comedy</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'These</span> films are designed to make the audience laugh through amusement', <span class=\"hljs-symbol\">'very</span> first silent movies were comedies, as slapstick comedy often relies on visual depictions', <span class=\"hljs-symbol\">'with</span> many former stand-up comics transitioning to the film industry', <span class=\"hljs-symbol\">'satirical</span> comedy-drama &amp; the plot is', <span class=\"hljs-symbol\">'i</span> like comedy movies', <span class=\"hljs-symbol\">'comedy</span> is really love to watch', <span class=\"hljs-symbol\">'laughing</span> is the best medicine', <span class=\"hljs-symbol\">'i</span> love everyday'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'I</span> also like comedy movies :)', <span class=\"hljs-symbol\">'ohh</span> nice', <span class=\"hljs-symbol\">'yeah</span> laughing is better for health'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Horror</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'A</span> horror film is a film that seeks to elicit fear for entertainment purposes', <span class=\"hljs-symbol\">'horror</span> has existed as a film genre for more than a century', <span class=\"hljs-symbol\">'i</span> like Horror movie', <span class=\"hljs-symbol\">'Horror</span> movies are so thrilled', <span class=\"hljs-symbol\">'an</span> intense feeling of fear, shock, or disgust.', <span class=\"hljs-symbol\">'I</span> like intense and fear movies', <span class=\"hljs-symbol\">'Horror</span> films effectively center on the dark side of life', <span class=\"hljs-symbol\">'i</span> like dark movies', <span class=\"hljs-symbol\">'Horror</span> Films are unsettling films designed to frighten and panic,monster'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> i think you like science fiction kind of horror', <span class=\"hljs-symbol\">'Ohhh</span> i also dark movie', <span class=\"hljs-symbol\">'Hmm</span> horror movies are so thriilled'], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Romance</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'romance</span> movies are romantic love stories', <span class=\"hljs-symbol\">'romance</span> movie focus on passion, emotion, and the affectionate romantic involvement', <span class=\"hljs-symbol\">'Romance</span> movie strong and pure love and romance the main plot focus', <span class=\"hljs-symbol\">'i</span> love romantic and love movies', <span class=\"hljs-symbol\">'romantic</span> love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love', <span class=\"hljs-symbol\">'i</span> want to watch Deep and true romantic love between two people', <span class=\"hljs-symbol\">'i</span> like '], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'Romantic</span> movie are just awesome', <span class=\"hljs-symbol\">'Yeahh</span> i like true love movies', <span class=\"hljs-symbol\">'Romance</span> is everywhere :)', <span class=\"hljs-string\">\"I recommond don't watch with family :(\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}, {<span class=\"hljs-symbol\">'tag</span><span class=\"hljs-symbol\">':</span> <span class=\"hljs-symbol\">'Accept</span>', <span class=\"hljs-symbol\">'patterns</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'ohh</span> really', <span class=\"hljs-symbol\">'nice</span>', <span class=\"hljs-symbol\">'ohhh</span>'], <span class=\"hljs-symbol\">'responses</span><span class=\"hljs-symbol\">':</span> [<span class=\"hljs-symbol\">'yess</span>', <span class=\"hljs-symbol\">'yeah</span>', <span class=\"hljs-symbol\">'yepp</span>', <span class=\"hljs-string\">\"yeah that's true\"</span>], <span class=\"hljs-symbol\">'context_set</span><span class=\"hljs-symbol\">':</span> ''}]\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">try</span>:\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    words, labels, training, output = pickle.load(f)\n<span class=\"hljs-keyword\">except</span>:\n  words = []\n  labels = []\n  <span class=\"hljs-comment\"># doc_x contain pattern of words</span>\n  docs_x = []   \n  <span class=\"hljs-comment\"># doc_y contain pattern of specific tag</span>\n  docs_y = []\n\n  <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">\"intents\"</span>]:\n    <span class=\"hljs-keyword\">for</span> pattern <span class=\"hljs-keyword\">in</span> intent[<span class=\"hljs-string\">\"patterns\"</span>]:\n      <span class=\"hljs-comment\"># it's consider only root words by removing unnessary stuff from the sentance</span>\n      <span class=\"hljs-comment\"># Use Tokenization : that will help to grab the perticular word from the sentance</span>\n      <span class=\"hljs-comment\"># it will return the list which contain all the words in it </span>\n      <span class=\"hljs-comment\"># nltk.download('punkt')</span>\n\n      wrds = nltk.word_tokenize(pattern)\n      words.extend(wrds)\n\n      <span class=\"hljs-comment\"># append pattern of words</span>\n      docs_x.append(wrds)\n      docs_y.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n      <span class=\"hljs-comment\"># append tag in labels list</span>\n    <span class=\"hljs-keyword\">if</span> intent[<span class=\"hljs-string\">\"tag\"</span>] <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> labels:\n      labels.append(intent[<span class=\"hljs-string\">\"tag\"</span>])\n\n  <span class=\"hljs-built_in\">print</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(docs_x)\n  <span class=\"hljs-built_in\">print</span>(docs_y)\n  <span class=\"hljs-comment\"># convert all the words into lowercase so that uppercase is not different then lowecase word </span>\n  unvalid_data = [<span class=\"hljs-string\">'?'</span>, <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'('</span>, <span class=\"hljs-string\">','</span>, <span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'&amp;'</span>]\n  words = [stemmer.stem(w.lower()) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> unvalid_data]\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># remove duplicate and sort</span>\n  words = <span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(words)))\n  <span class=\"hljs-built_in\">print</span>(words)\n  \n  <span class=\"hljs-comment\"># sort labels</span>\n  labels = <span class=\"hljs-built_in\">sorted</span>(labels)\n  <span class=\"hljs-built_in\">print</span>(labels)\n\n  <span class=\"hljs-comment\"># we create a bag of words that will represent a any given pattern</span>\n  <span class=\"hljs-comment\"># we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not</span>\n  <span class=\"hljs-comment\"># in the sentance </span>\n\n  <span class=\"hljs-comment\"># As neural network only understand numeric value rather then a word that's we need to convert them into numeric encoding</span>\n\n  <span class=\"hljs-comment\"># As bag of words represent by the encoding in the form 0 and 1</span>\n  training = []\n  output = []\n\n  <span class=\"hljs-comment\">## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  </span>\n  out_empty = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(labels))]\n  <span class=\"hljs-built_in\">print</span>(out_empty)\n  <span class=\"hljs-keyword\">for</span> x , doc <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(docs_x):\n    bag = []\n\n    wrds= [stemmer.stem(w) <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> doc]\n    <span class=\"hljs-comment\">#print(wrds)</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> words:\n      <span class=\"hljs-keyword\">if</span> w <span class=\"hljs-keyword\">in</span> wrds:\n        bag.append(<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">else</span>:\n        bag.append(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-comment\"># print(bag)</span>\n\n    output_row = out_empty[:]\n    output_row[labels.index(docs_y[x])] = <span class=\"hljs-number\">1</span> \n\n    <span class=\"hljs-comment\"># get the training and output</span>\n    training.append(bag)\n    output.append(output_row)\n\n  training = np.array(training)\n  output = np.array(output)\n  <span class=\"hljs-comment\">#print(training)</span>\n  <span class=\"hljs-comment\">#print(output)</span>\n  <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">'data.pickle'</span>,<span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n    pickle.dump( (words, labels, training, output) , f)\n</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Tensorflow</strong> </p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># remove warning</span>\n<span class=\"hljs-built_in\">import</span> warnings\nwarnings.simplefilter('ignore')\n\n<span class=\"hljs-comment\"># work with tensorflow</span>\ntf.reset_default_graph()\n\n<span class=\"hljs-comment\"># training[0] all list have same len so we can take training[1]</span>\n<span class=\"hljs-attr\">net</span> = tflearn.input_data(<span class=\"hljs-attr\">shape=[None,len(training[0])])</span>\n\n<span class=\"hljs-comment\"># 2 pipes of 8 hidden layer </span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net,<span class=\"hljs-number\">8</span>)\n<span class=\"hljs-comment\"># activation=\"softmax\" tells probabillity of each neuron in the list (helps to finds the response)</span>\n<span class=\"hljs-attr\">net</span> = tflearn.fully_connected(net , len(output[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-attr\">activation=\"softmax\")</span>\n\n<span class=\"hljs-attr\">net</span> = tflearn.regression(net)\n<span class=\"hljs-attr\">model</span> = tflearn.DNN(net)\n\n<span class=\"hljs-comment\"># --------- Explanation--------------------</span>\n\n<span class=\"hljs-comment\">#  INPUT DATA  ---&amp;gt; HIDDEN LAYER ---&amp;gt; HIDDEN LAYER ----&amp;gt; OUTPUT DATA </span>\n<span class=\"hljs-comment\">#  45 input neurons --&amp;gt; 8 fully connected neurons --&amp;gt; 8 neurons ---&amp;gt; 6 neurons (\"Softmax\") </span></code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"139\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-comment\"># n_epoch means how much time it will se our data</span>\n<span class=\"hljs-comment\"># try:</span>\n<span class=\"hljs-comment\">#     model.load(\"model.tflearn\")</span>\n<span class=\"hljs-comment\"># except:</span>\nmodel.fit(training, output, <span class=\"hljs-attribute\">n_epoch</span>=1000, <span class=\"hljs-attribute\">batch_size</span>=8, <span class=\"hljs-attribute\">show_metric</span>=<span class=\"hljs-literal\">True</span>)\nmodel.save(<span class=\"hljs-string\">\"model.tflearn\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"139\"><pre class=\"nb-stdout\"><span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">4999</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01296\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">016s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01296 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">32</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-attr\">Training Step:</span> <span class=\"hljs-number\">5000</span>  <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">total loss:</span> <span class=\"hljs-string\">\u001b[1m\u001b[32m0.01272\u001b[0m\u001b[0m</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">time:</span> <span class=\"hljs-number\">0.</span><span class=\"hljs-string\">019s</span>\n<span class=\"hljs-string\">|</span> <span class=\"hljs-string\">Adam</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">epoch:</span> <span class=\"hljs-number\">1000</span> <span class=\"hljs-string\">|</span> <span class=\"hljs-attr\">loss: 0.01272 - acc: 1.0000 -- iter:</span> <span class=\"hljs-number\">39</span><span class=\"hljs-string\">/39</span>\n<span class=\"hljs-string\">--</span>\n<span class=\"hljs-string\">INFO:tensorflow:/content/model.tflearn</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">in</span> <span class=\"hljs-string\">all_model_checkpoint_paths.</span> <span class=\"hljs-string\">Manually</span> <span class=\"hljs-string\">adding</span> <span class=\"hljs-string\">it.</span>\n</pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Start prediction</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\">def beg_of_words(s, <span class=\"hljs-keyword\">words</span>):\n  <span class=\"hljs-comment\"># contain 0 </span>\n  bag = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-keyword\">words</span>))]\n  \n  s_words = nltk.word_tokenize(s)\n  s_words = [stemmer.stem(<span class=\"hljs-built_in\">word</span>.<span class=\"hljs-built_in\">lower</span>()) <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">word</span> <span class=\"hljs-keyword\">in</span> s_words]\n\n  <span class=\"hljs-comment\">## sentance (se)</span>\n  <span class=\"hljs-keyword\">for</span> se <span class=\"hljs-keyword\">in</span> s_words:\n    <span class=\"hljs-keyword\">for</span> i,w <span class=\"hljs-keyword\">in</span> enumerate(<span class=\"hljs-keyword\">words</span>):\n      <span class=\"hljs-comment\"># that mean corrent words which we were looking at present in the sentace</span>\n      <span class=\"hljs-keyword\">if</span> w == se:\n        bag[i] = <span class=\"hljs-number\">1</span>\n  \n  <span class=\"hljs-literal\">return</span> np.array(bag) </code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p><strong>Chat Response</strong></p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">chat</span>():\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"start talking with the bot (type 'quit' to exit) \"</span>)\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>);\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Type something 😃 : \"</span>)\n    \n    <span class=\"hljs-keyword\">if</span> user_input.lower() == <span class=\"hljs-string\">'quit'</span>:\n      <span class=\"hljs-keyword\">break</span>\n    \n    <span class=\"hljs-comment\"># give the predicted response based on the word</span>\n    result = model.predict([beg_of_words(user_input , words)])\n    \n    <span class=\"hljs-comment\">#index of greated value in the list</span>\n    result_index = np.argmax(result)\n    \n    <span class=\"hljs-comment\">#print the tag </span>\n\n    tag = labels[result_index]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Movie Genre is {}\"</span>.<span class=\"hljs-built_in\">format</span>(tag))\n\n    <span class=\"hljs-comment\"># print the response </span>\n    <span class=\"hljs-keyword\">for</span> intent <span class=\"hljs-keyword\">in</span> data[<span class=\"hljs-string\">'intents'</span>]:\n      <span class=\"hljs-keyword\">if</span> tag == intent[<span class=\"hljs-string\">'tag'</span>]:\n        response = intent[<span class=\"hljs-string\">'responses'</span>]\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"🤖 : {}\"</span>.<span class=\"hljs-built_in\">format</span>(random.choice(response)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"\\n\"</span>)\n</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"154\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"><span class=\"hljs-function\"><span class=\"hljs-title\">chat</span><span class=\"hljs-params\">()</span></span></code></pre></div><div class=\"nb-output\" data-prompt-number=\"154\"><pre class=\"nb-stdout\">start talking <span class=\"hljs-keyword\">with</span> the bot (<span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">'quit' </span>to <span class=\"hljs-keyword\">exit</span>) \n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">Hello</span>\nMovie Genre <span class=\"hljs-keyword\">is</span> greeting\n🤖 : <span class=\"hljs-type\">Hi</span> there, how can I help?\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">I</span> love romantic movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Romance\n🤖 : <span class=\"hljs-type\">Yeahh</span> i like <span class=\"hljs-literal\">true</span> love movies\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> fear watching horror movie\nMovie Genre <span class=\"hljs-keyword\">is</span> Horror\n🤖 : <span class=\"hljs-type\">Hmm</span> horror movies are so thriilled\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> like fighting <span class=\"hljs-keyword\">and</span> stunts movies\nMovie Genre <span class=\"hljs-keyword\">is</span> action <span class=\"hljs-keyword\">and</span> advanture\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">i</span> love to watch comedy movies\nMovie Genre <span class=\"hljs-keyword\">is</span> comedy\n🤖 : <span class=\"hljs-type\">ohh</span> nice\n\n\n<span class=\"hljs-keyword\">Type</span> <span class=\"hljs-type\">something </span>😃 : <span class=\"hljs-type\">quit</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"0\"><pre class=\"\"><code class=\"lang-undefined hljs\" data-language=\"undefined\"></code></pre></div></div></div></div>"
  },
  "implementations": {
    "jupyter": {
      "dir": "machine_learning\\Natural language processing\\Movie_recommendation_Sentance_Embedding.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/machine_learning\\Natural language processing\\Movie_recommendation_Sentance_Embedding.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Sentance_Embedding.ipynb&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;provenance&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;collapsed_sections&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3&quot;</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;UN3QsCOJj3V4&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;import nltk\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;from nltk.stem.lancaster import LancasterStemmer\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;stemmer = LancasterStemmer()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;# Import package\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;import tensorflow as tf\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;import json\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;import tflearn\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;import numpy as np \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;import random\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;import pickle&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;PKQPFioif9Lw&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n          <span class=\"hljs-attr\">&quot;base_uri&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;https://localhost:8080/&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n          <span class=\"hljs-attr\">&quot;height&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">55</span>\r\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;outputId&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;8054baa6-36ad-4ec3-98e9-623703240098&quot;</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;with open(&#x27;intents.json&#x27;) as jsonFile:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  data = json.load(jsonFile)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;print(data[&#x27;intents&#x27;])&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">136</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-punctuation\">{</span>\r\n          <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n          <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n            <span class=\"hljs-string\">&quot;[{&#x27;tag&#x27;: &#x27;greeting&#x27;, &#x27;patterns&#x27;: [&#x27;Hi&#x27;, &#x27;How are you&#x27;, &#x27;Is anyone there?&#x27;, &#x27;Hello&#x27;, &#x27;Good day&#x27;, &#x27;Whats up&#x27;], &#x27;responses&#x27;: [&#x27;Hello!&#x27;, &#x27;Good to see you again!&#x27;, &#x27;Hi there, how can I help?&#x27;], &#x27;context_set&#x27;: &#x27;&#x27;}, {&#x27;tag&#x27;: &#x27;action and advanture&#x27;, &#x27;patterns&#x27;: [&#x27; Elements of action/adventure (car chases, shootouts, explosions) and thriller&#x27;, &#x27;Combines action set-pieces with serious themes, character insight and/or emotional power&#x27;, &#x27;I like action movies&#x27;, &#x27;i like fighting movies&#x27;, &#x27;action sequences, such as fighting, stunts, car chases or explosions&#x27;, &#x27;Fighting is really awesome&#x27;], &#x27;responses&#x27;: [&#x27;I also like action movies :)&#x27;, &#x27;ohh nice&#x27;, &#x27;yeah action movie is awesome&#x27;], &#x27;context_set&#x27;: &#x27;&#x27;}, {&#x27;tag&#x27;: &#x27;comedy&#x27;, &#x27;patterns&#x27;: [&#x27;These films are designed to make the audience laugh through amusement&#x27;, &#x27;very first silent movies were comedies, as slapstick comedy often relies on visual depictions&#x27;, &#x27;with many former stand-up comics transitioning to the film industry&#x27;, &#x27;satirical comedy-drama &amp; the plot is&#x27;, &#x27;i like comedy movies&#x27;, &#x27;comedy is really love to watch&#x27;, &#x27;laughing is the best medicine&#x27;, &#x27;i love everyday&#x27;], &#x27;responses&#x27;: [&#x27;I also like comedy movies :)&#x27;, &#x27;ohh nice&#x27;, &#x27;yeah laughing is better for health&#x27;], &#x27;context_set&#x27;: &#x27;&#x27;}, {&#x27;tag&#x27;: &#x27;Horror&#x27;, &#x27;patterns&#x27;: [&#x27;A horror film is a film that seeks to elicit fear for entertainment purposes&#x27;, &#x27;horror has existed as a film genre for more than a century&#x27;, &#x27;i like Horror movie&#x27;, &#x27;Horror movies are so thrilled&#x27;, &#x27;an intense feeling of fear, shock, or disgust.&#x27;, &#x27;I like intense and fear movies&#x27;, &#x27;Horror films effectively center on the dark side of life&#x27;, &#x27;i like dark movies&#x27;, &#x27;Horror Films are unsettling films designed to frighten and panic,monster&#x27;], &#x27;responses&#x27;: [&#x27;ohh i think you like science fiction kind of horror&#x27;, &#x27;Ohhh i also dark movie&#x27;, &#x27;Hmm horror movies are so thriilled&#x27;], &#x27;context_set&#x27;: &#x27;&#x27;}, {&#x27;tag&#x27;: &#x27;Romance&#x27;, &#x27;patterns&#x27;: [&#x27;romance movies are romantic love stories&#x27;, &#x27;romance movie focus on passion, emotion, and the affectionate romantic involvement&#x27;, &#x27;Romance movie strong and pure love and romance the main plot focus&#x27;, &#x27;i love romantic and love movies&#x27;, &#x27;romantic love, obsessive love, sentimental love, spiritual love, forbidden love/romance, platonic love, sexual and passionate love, sacrificial love, explosive and destructive love&#x27;, &#x27;i want to watch Deep and true romantic love between two people&#x27;, &#x27;i like &#x27;], &#x27;responses&#x27;: [&#x27;Romantic movie are just awesome&#x27;, &#x27;Yeahh i like true love movies&#x27;, &#x27;Romance is everywhere :)&#x27;, \\&quot;I recommond don&#x27;t watch with family :(\\&quot;], &#x27;context_set&#x27;: &#x27;&#x27;}, {&#x27;tag&#x27;: &#x27;Accept&#x27;, &#x27;patterns&#x27;: [&#x27;ohh really&#x27;, &#x27;nice&#x27;, &#x27;ohhh&#x27;], &#x27;responses&#x27;: [&#x27;yess&#x27;, &#x27;yeah&#x27;, &#x27;yepp&#x27;, \\&quot;yeah that&#x27;s true\\&quot;], &#x27;context_set&#x27;: &#x27;&#x27;}]\\n&quot;</span>\r\n          <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span>\r\n        <span class=\"hljs-punctuation\">}</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;tOnAzP9SgEZJ&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;try:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  with open(&#x27;data.pickle&#x27;,\\&quot;rb\\&quot;) as f:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    words, labels, training, output = pickle.load(f)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;except:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  words = []\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  labels = []\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # doc_x contain pattern of words\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  docs_x = []   \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # doc_y contain pattern of specific tag\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  docs_y = []\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  for intent in data[\\&quot;intents\\&quot;]:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    for pattern in intent[\\&quot;patterns\\&quot;]:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      # it&#x27;s consider only root words by removing unnessary stuff from the sentance\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      # Use Tokenization : that will help to grab the perticular word from the sentance\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      # it will return the list which contain all the words in it \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      # nltk.download(&#x27;punkt&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      wrds = nltk.word_tokenize(pattern)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      words.extend(wrds)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      # append pattern of words\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      docs_x.append(wrds)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      docs_y.append(intent[\\&quot;tag\\&quot;])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      # append tag in labels list\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    if intent[\\&quot;tag\\&quot;] not in labels:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      labels.append(intent[\\&quot;tag\\&quot;])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  print(labels)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  print(docs_x)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  print(docs_y)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # convert all the words into lowercase so that uppercase is not different then lowecase word \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  unvalid_data = [&#x27;?&#x27;, &#x27;)&#x27;, &#x27;(&#x27;, &#x27;,&#x27;, &#x27;.&#x27;, &#x27;&amp;&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  words = [stemmer.stem(w.lower()) for w in words if w not in unvalid_data]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  print(words)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # remove duplicate and sort\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  words = sorted(list(set(words)))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  print(words)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # sort labels\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  labels = sorted(labels)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  print(labels)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # we create a bag of words that will represent a any given pattern\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # we create 1 hot encoding which will contain the 1 or 0 based on the word exist or not\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # in the sentance \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # As neural network only understand numeric value rather then a word that&#x27;s we need to convert them into numeric encoding\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # As bag of words represent by the encoding in the form 0 and 1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  training = []\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  output = []\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  ## if tag is present then it will be 1 or else 0 ( [0,0,0,0,1,0] in are case we have 6 tag )  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  out_empty = [0 for _ in range(len(labels))]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  print(out_empty)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  for x , doc in enumerate(docs_x):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    bag = []\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    wrds= [stemmer.stem(w) for w in doc]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    #print(wrds)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    for w in words:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      if w in wrds:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;        bag.append(1)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      else:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;        bag.append(0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    # print(bag)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    output_row = out_empty[:]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    output_row[labels.index(docs_y[x])] = 1 \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    # get the training and output\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    training.append(bag)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    output.append(output_row)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  training = np.array(training)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  output = np.array(output)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  #print(training)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  #print(output)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  with open(&#x27;data.pickle&#x27;,\\&quot;wb\\&quot;) as f:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    pickle.dump( (words, labels, training, output) , f)\\n&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;irLV8R0ui33I&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text&quot;</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;**Tensorflow** &quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;_mHuiaGoR1bd&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;# remove warning\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;import warnings\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;warnings.simplefilter(&#x27;ignore&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;# work with tensorflow\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;tf.reset_default_graph()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;# training[0] all list have same len so we can take training[1]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;net = tflearn.input_data(shape=[None,len(training[0])])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;# 2 pipes of 8 hidden layer \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;net = tflearn.fully_connected(net,8)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;net = tflearn.fully_connected(net,8)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;# activation=\\&quot;softmax\\&quot; tells probabillity of each neuron in the list (helps to finds the response)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;net = tflearn.fully_connected(net , len(output[0]), activation=\\&quot;softmax\\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;net = tflearn.regression(net)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;model = tflearn.DNN(net)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;# --------- Explanation--------------------\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;#  INPUT DATA  ---&gt; HIDDEN LAYER ---&gt; HIDDEN LAYER ----&gt; OUTPUT DATA \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;#  45 input neurons --&gt; 8 fully connected neurons --&gt; 8 neurons ---&gt; 6 neurons (\\&quot;Softmax\\&quot;) &quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;xzumTFn4ZzRN&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n          <span class=\"hljs-attr\">&quot;base_uri&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;https://localhost:8080/&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n          <span class=\"hljs-attr\">&quot;height&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">126</span>\r\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;outputId&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;03d0d838-b16f-4ebb-dc1c-6ee037d6f9f1&quot;</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;# n_epoch means how much time it will se our data\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;# try:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;#     model.load(\\&quot;model.tflearn\\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;# except:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;model.save(\\&quot;model.tflearn\\&quot;)&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">139</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-punctuation\">{</span>\r\n          <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n          <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n            <span class=\"hljs-string\">&quot;Training Step: 4999  | total loss: \\u001b[1m\\u001b[32m0.01296\\u001b[0m\\u001b[0m | time: 0.016s\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;| Adam | epoch: 1000 | loss: 0.01296 - acc: 1.0000 -- iter: 32/39\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Training Step: 5000  | total loss: \\u001b[1m\\u001b[32m0.01272\\u001b[0m\\u001b[0m | time: 0.019s\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;| Adam | epoch: 1000 | loss: 0.01272 - acc: 1.0000 -- iter: 39/39\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;--\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;INFO:tensorflow:/content/model.tflearn is not in all_model_checkpoint_paths. Manually adding it.\\n&quot;</span>\r\n          <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span>\r\n        <span class=\"hljs-punctuation\">}</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;TVqYlt1Ujhv9&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text&quot;</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;**Start prediction**&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;HrYt-uKWf20p&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;def beg_of_words(s, words):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  # contain 0 \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  bag = [0 for i in range(len(words))]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  s_words = nltk.word_tokenize(s)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  s_words = [stemmer.stem(word.lower()) for word in s_words]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  ## sentance (se)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  for se in s_words:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    for i,w in enumerate(words):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      # that mean corrent words which we were looking at present in the sentace\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      if w == se:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;        bag[i] = 1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  return np.array(bag) &quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;D_m1XbwdmBTX&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text&quot;</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;**Chat Response**&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;oY7zlpYjmAXD&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;def chat():\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  print(\\&quot;start talking with the bot (type &#x27;quit&#x27; to exit) \\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  print(\\&quot;\\\\n\\&quot;);\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;  while True:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    user_input = input(\\&quot;Type something 😃 : \\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    if user_input.lower() == &#x27;quit&#x27;:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      break\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    # give the predicted response based on the word\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    result = model.predict([beg_of_words(user_input , words)])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    #index of greated value in the list\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    result_index = np.argmax(result)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    #print the tag \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    tag = labels[result_index]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    print(\\&quot;Movie Genre is {}\\&quot;.format(tag))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    # print the response \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    for intent in data[&#x27;intents&#x27;]:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;      if tag == intent[&#x27;tag&#x27;]:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;        response = intent[&#x27;responses&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    print(\\&quot;🤖 : {}\\&quot;.format(random.choice(response)))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-string\">&quot;    print(\\&quot;\\\\n\\&quot;)\\n&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;RqFWIE6OlE-7&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n          <span class=\"hljs-attr\">&quot;base_uri&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;https://localhost:8080/&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n          <span class=\"hljs-attr\">&quot;height&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">545</span>\r\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;outputId&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;60acdefa-aa78-4b12-bf41-7ebac82a1685&quot;</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;chat()&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">154</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-punctuation\">{</span>\r\n          <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n          <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n            <span class=\"hljs-string\">&quot;start talking with the bot (type &#x27;quit&#x27; to exit) \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Type something 😃 : Hello\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Movie Genre is greeting\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;🤖 : Hi there, how can I help?\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Type something 😃 : I love romantic movie\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Movie Genre is Romance\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;🤖 : Yeahh i like true love movies\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Type something 😃 : i fear watching horror movie\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Movie Genre is Horror\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;🤖 : Hmm horror movies are so thriilled\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Type something 😃 : i like fighting and stunts movies\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Movie Genre is action and advanture\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;🤖 : ohh nice\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Type something 😃 : i love to watch comedy movies\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Movie Genre is comedy\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;🤖 : ohh nice\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n            <span class=\"hljs-string\">&quot;Type something 😃 : quit\\n&quot;</span>\r\n          <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n          <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span>\r\n        <span class=\"hljs-punctuation\">}</span>\r\n      <span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-attr\">&quot;id&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;iYveRNbYnZL3&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n        <span class=\"hljs-attr\">&quot;colab&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span>\r\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n        <span class=\"hljs-string\">&quot;&quot;</span>\r\n      <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">,</span>\r\n      <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n  <span class=\"hljs-punctuation\">]</span>\r\n<span class=\"hljs-punctuation\">}</span>"
    }
  },
  "contributors": [
    {
      "name": "Hritik Jaiswal",
      "email": "44053202+hritik5102@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}