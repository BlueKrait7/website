{
  "slug": "length-conversion",
  "name": "Length Conversion",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "conversions\\length_conversion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/conversions\\length_conversion.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nConversion of length units.\r\nAvailable Units:- Metre,Kilometre,Feet,Inch,Centimeter,Yard,Foot,Mile,Millimeter\r\n\r\nUSAGE :\r\n-&gt; Import this file into their respective project.\r\n-&gt; Use the function length_conversion() for conversion of length units.\r\n-&gt; Parameters :\r\n    -&gt; value : The number of from units you want to convert\r\n    -&gt; from_type : From which type you want to convert\r\n    -&gt; to_type : To which type you want to convert\r\n\r\nREFERENCES :\r\n-&gt; Wikipedia reference: https://en.wikipedia.org/wiki/Meter\r\n-&gt; Wikipedia reference: https://en.wikipedia.org/wiki/Kilometer\r\n-&gt; Wikipedia reference: https://en.wikipedia.org/wiki/Feet\r\n-&gt; Wikipedia reference: https://en.wikipedia.org/wiki/Inch\r\n-&gt; Wikipedia reference: https://en.wikipedia.org/wiki/Centimeter\r\n-&gt; Wikipedia reference: https://en.wikipedia.org/wiki/Yard\r\n-&gt; Wikipedia reference: https://en.wikipedia.org/wiki/Foot\r\n-&gt; Wikipedia reference: https://en.wikipedia.org/wiki/Mile\r\n-&gt; Wikipedia reference: https://en.wikipedia.org/wiki/Millimeter\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> namedtuple\r\n\r\nfrom_to = namedtuple(<span class=\"hljs-string\">&quot;from_to&quot;</span>, <span class=\"hljs-string\">&quot;from_ to&quot;</span>)\r\n\r\nTYPE_CONVERSION = {\r\n    <span class=\"hljs-string\">&quot;millimeter&quot;</span>: <span class=\"hljs-string\">&quot;mm&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;centimeter&quot;</span>: <span class=\"hljs-string\">&quot;cm&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;meter&quot;</span>: <span class=\"hljs-string\">&quot;m&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;kilometer&quot;</span>: <span class=\"hljs-string\">&quot;km&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;inch&quot;</span>: <span class=\"hljs-string\">&quot;in&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;inche&quot;</span>: <span class=\"hljs-string\">&quot;in&quot;</span>,  <span class=\"hljs-comment\"># Trailing &#x27;s&#x27; has been stripped off</span>\r\n    <span class=\"hljs-string\">&quot;feet&quot;</span>: <span class=\"hljs-string\">&quot;ft&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;foot&quot;</span>: <span class=\"hljs-string\">&quot;ft&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;yard&quot;</span>: <span class=\"hljs-string\">&quot;yd&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;mile&quot;</span>: <span class=\"hljs-string\">&quot;mi&quot;</span>,\r\n}\r\n\r\nMETRIC_CONVERSION = {\r\n    <span class=\"hljs-string\">&quot;mm&quot;</span>: from_to(<span class=\"hljs-number\">0.001</span>, <span class=\"hljs-number\">1000</span>),\r\n    <span class=\"hljs-string\">&quot;cm&quot;</span>: from_to(<span class=\"hljs-number\">0.01</span>, <span class=\"hljs-number\">100</span>),\r\n    <span class=\"hljs-string\">&quot;m&quot;</span>: from_to(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>),\r\n    <span class=\"hljs-string\">&quot;km&quot;</span>: from_to(<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">0.001</span>),\r\n    <span class=\"hljs-string\">&quot;in&quot;</span>: from_to(<span class=\"hljs-number\">0.0254</span>, <span class=\"hljs-number\">39.3701</span>),\r\n    <span class=\"hljs-string\">&quot;ft&quot;</span>: from_to(<span class=\"hljs-number\">0.3048</span>, <span class=\"hljs-number\">3.28084</span>),\r\n    <span class=\"hljs-string\">&quot;yd&quot;</span>: from_to(<span class=\"hljs-number\">0.9144</span>, <span class=\"hljs-number\">1.09361</span>),\r\n    <span class=\"hljs-string\">&quot;mi&quot;</span>: from_to(<span class=\"hljs-number\">1609.34</span>, <span class=\"hljs-number\">0.000621371</span>),\r\n}\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">length_conversion</span>(<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">float</span>, from_type: <span class=\"hljs-built_in\">str</span>, to_type: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Conversion between length units.\r\n\r\n    &gt;&gt;&gt; length_conversion(4, &quot;METER&quot;, &quot;FEET&quot;)\r\n    13.12336\r\n    &gt;&gt;&gt; length_conversion(4, &quot;M&quot;, &quot;FT&quot;)\r\n    13.12336\r\n    &gt;&gt;&gt; length_conversion(1, &quot;meter&quot;, &quot;kilometer&quot;)\r\n    0.001\r\n    &gt;&gt;&gt; length_conversion(1, &quot;kilometer&quot;, &quot;inch&quot;)\r\n    39370.1\r\n    &gt;&gt;&gt; length_conversion(3, &quot;kilometer&quot;, &quot;mile&quot;)\r\n    1.8641130000000001\r\n    &gt;&gt;&gt; length_conversion(2, &quot;feet&quot;, &quot;meter&quot;)\r\n    0.6096\r\n    &gt;&gt;&gt; length_conversion(4, &quot;feet&quot;, &quot;yard&quot;)\r\n    1.333329312\r\n    &gt;&gt;&gt; length_conversion(1, &quot;inch&quot;, &quot;meter&quot;)\r\n    0.0254\r\n    &gt;&gt;&gt; length_conversion(2, &quot;inch&quot;, &quot;mile&quot;)\r\n    3.15656468e-05\r\n    &gt;&gt;&gt; length_conversion(2, &quot;centimeter&quot;, &quot;millimeter&quot;)\r\n    20.0\r\n    &gt;&gt;&gt; length_conversion(2, &quot;centimeter&quot;, &quot;yard&quot;)\r\n    0.0218722\r\n    &gt;&gt;&gt; length_conversion(4, &quot;yard&quot;, &quot;meter&quot;)\r\n    3.6576\r\n    &gt;&gt;&gt; length_conversion(4, &quot;yard&quot;, &quot;kilometer&quot;)\r\n    0.0036576\r\n    &gt;&gt;&gt; length_conversion(3, &quot;foot&quot;, &quot;meter&quot;)\r\n    0.9144000000000001\r\n    &gt;&gt;&gt; length_conversion(3, &quot;foot&quot;, &quot;inch&quot;)\r\n    36.00001944\r\n    &gt;&gt;&gt; length_conversion(4, &quot;mile&quot;, &quot;kilometer&quot;)\r\n    6.43736\r\n    &gt;&gt;&gt; length_conversion(2, &quot;miles&quot;, &quot;InChEs&quot;)\r\n    126719.753468\r\n    &gt;&gt;&gt; length_conversion(3, &quot;millimeter&quot;, &quot;centimeter&quot;)\r\n    0.3\r\n    &gt;&gt;&gt; length_conversion(3, &quot;mm&quot;, &quot;in&quot;)\r\n    0.1181103\r\n    &gt;&gt;&gt; length_conversion(4, &quot;wrongUnit&quot;, &quot;inch&quot;)\r\n    Traceback (most recent call last):\r\n      ...\r\n    ValueError: Invalid &#x27;from_type&#x27; value: &#x27;wrongUnit&#x27;.\r\n    Conversion abbreviations are: mm, cm, m, km, in, ft, yd, mi\r\n    &quot;&quot;&quot;</span>\r\n    new_from = from_type.lower().rstrip(<span class=\"hljs-string\">&quot;s&quot;</span>)\r\n    new_from = TYPE_CONVERSION.get(new_from, new_from)\r\n    new_to = to_type.lower().rstrip(<span class=\"hljs-string\">&quot;s&quot;</span>)\r\n    new_to = TYPE_CONVERSION.get(new_to, new_to)\r\n    <span class=\"hljs-keyword\">if</span> new_from <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> METRIC_CONVERSION:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(\r\n            <span class=\"hljs-string\">f&quot;Invalid &#x27;from_type&#x27; value: <span class=\"hljs-subst\">{from_type!r}</span>.\\n&quot;</span>\r\n            <span class=\"hljs-string\">f&quot;Conversion abbreviations are: <span class=\"hljs-subst\">{<span class=\"hljs-string\">&#x27;, &#x27;</span>.join(METRIC_CONVERSION)}</span>&quot;</span>\r\n        )\r\n    <span class=\"hljs-keyword\">if</span> new_to <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> METRIC_CONVERSION:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(\r\n            <span class=\"hljs-string\">f&quot;Invalid &#x27;to_type&#x27; value: <span class=\"hljs-subst\">{to_type!r}</span>.\\n&quot;</span>\r\n            <span class=\"hljs-string\">f&quot;Conversion abbreviations are: <span class=\"hljs-subst\">{<span class=\"hljs-string\">&#x27;, &#x27;</span>.join(METRIC_CONVERSION)}</span>&quot;</span>\r\n        )\r\n    <span class=\"hljs-keyword\">return</span> value * METRIC_CONVERSION[new_from].from_ * METRIC_CONVERSION[new_to].to\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "julia": {
      "dir": "src\\conversions\\length_conversion.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\conversions\\length_conversion.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    function length_conversion(value, from_type, to_type)\r\n\r\nA function that converts a value from a measurement unit to another one\r\n\r\nAccepted units are: millimeter(s), centimeter(s), meter(s), kilometer(s),\r\ninch(es), feet, foot, yard(s), mile(s). Abbreviations are also supported.\r\n\r\n# Examples/Tests (optional but recommended)\r\n```julia\r\nlength_conversion(10, &quot;METERS&quot;, &quot;cm&quot;)\r\nlength_conversion(12345, &quot;yards&quot;, &quot;FEET&quot;)\r\n```\r\n\r\nBecause the algorithm converts values to meters, and from meters to the final type,\r\nsome imperial system units may have errors:\r\nlength_conversion(1, &quot;yards&quot;, &quot;FEET&quot;) returns 3.000000096, intead of 3.\r\n\r\n# Contributed by:- [Fernanda Kawasaki](https://github.com/fernandakawasaki)\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-comment\"># Lookup table that returns conversion of 1 unit of type to meters</span>\r\nMETER_CONVERSION = <span class=\"hljs-built_in\">Dict</span>{<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">Float64</span>}(\r\n    <span class=\"hljs-string\">&quot;mm&quot;</span> =&gt; <span class=\"hljs-number\">0.001</span>,\r\n    <span class=\"hljs-string\">&quot;cm&quot;</span> =&gt; <span class=\"hljs-number\">0.01</span>,\r\n    <span class=\"hljs-string\">&quot;m&quot;</span> =&gt; <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-string\">&quot;km&quot;</span> =&gt; <span class=\"hljs-number\">1000</span>,\r\n    <span class=\"hljs-string\">&quot;in&quot;</span> =&gt; <span class=\"hljs-number\">0.0254</span>,\r\n    <span class=\"hljs-string\">&quot;ft&quot;</span> =&gt; <span class=\"hljs-number\">0.3048</span>,\r\n    <span class=\"hljs-string\">&quot;yd&quot;</span> =&gt; <span class=\"hljs-number\">0.9144</span>,\r\n    <span class=\"hljs-string\">&quot;mi&quot;</span> =&gt; <span class=\"hljs-number\">1609.34</span>\r\n)\r\n\r\n<span class=\"hljs-comment\"># Lookup table that returns the conversion of 1 meter to type</span>\r\nTYPE_CONVERSION = <span class=\"hljs-built_in\">Dict</span>{<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">Float64</span>}(\r\n    <span class=\"hljs-string\">&quot;mm&quot;</span> =&gt; <span class=\"hljs-number\">1000</span>,\r\n    <span class=\"hljs-string\">&quot;cm&quot;</span> =&gt; <span class=\"hljs-number\">100</span>,\r\n    <span class=\"hljs-string\">&quot;m&quot;</span> =&gt; <span class=\"hljs-number\">1</span>,\r\n    <span class=\"hljs-string\">&quot;km&quot;</span> =&gt; <span class=\"hljs-number\">0.001</span>,\r\n    <span class=\"hljs-string\">&quot;in&quot;</span> =&gt; <span class=\"hljs-number\">39.3701</span>,\r\n    <span class=\"hljs-string\">&quot;ft&quot;</span> =&gt; <span class=\"hljs-number\">3.28084</span>,\r\n    <span class=\"hljs-string\">&quot;yd&quot;</span> =&gt; <span class=\"hljs-number\">1.09361</span>,\r\n    <span class=\"hljs-string\">&quot;mi&quot;</span> =&gt; <span class=\"hljs-number\">0.000621371</span>\r\n)\r\n\r\nNAME_CONVERSION = <span class=\"hljs-built_in\">Dict</span>{<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">String</span>}(\r\n    <span class=\"hljs-string\">&quot;millimeter&quot;</span> =&gt; <span class=\"hljs-string\">&quot;mm&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;millimeters&quot;</span> =&gt; <span class=\"hljs-string\">&quot;mm&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;centimeter&quot;</span> =&gt; <span class=\"hljs-string\">&quot;cm&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;centimeters&quot;</span> =&gt; <span class=\"hljs-string\">&quot;cm&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;meter&quot;</span> =&gt; <span class=\"hljs-string\">&quot;m&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;meters&quot;</span> =&gt; <span class=\"hljs-string\">&quot;m&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;kilometer&quot;</span> =&gt; <span class=\"hljs-string\">&quot;km&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;kilometers&quot;</span> =&gt; <span class=\"hljs-string\">&quot;km&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;inch&quot;</span> =&gt; <span class=\"hljs-string\">&quot;in&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;inches&quot;</span> =&gt; <span class=\"hljs-string\">&quot;in&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;feet&quot;</span> =&gt; <span class=\"hljs-string\">&quot;ft&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;foot&quot;</span> =&gt; <span class=\"hljs-string\">&quot;ft&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;yard&quot;</span> =&gt; <span class=\"hljs-string\">&quot;yd&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;yards&quot;</span> =&gt; <span class=\"hljs-string\">&quot;yd&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;mile&quot;</span> =&gt; <span class=\"hljs-string\">&quot;mi&quot;</span>,\r\n    <span class=\"hljs-string\">&quot;miles&quot;</span> =&gt; <span class=\"hljs-string\">&quot;mi&quot;</span>,\r\n)\r\n\r\n<span class=\"hljs-keyword\">function</span> normalize_type(type)\r\n    l_type = lowercase(type)\r\n    <span class=\"hljs-keyword\">if</span> !haskey(METER_CONVERSION, l_type)\r\n        <span class=\"hljs-keyword\">if</span> !haskey(NAME_CONVERSION, l_type)\r\n            throw(\r\n                error(\r\n                    <span class=\"hljs-string\">&quot;Invalid &#x27;type&#x27; value: <span class=\"hljs-subst\">$(type)</span>\\n&quot;</span>,\r\n                    <span class=\"hljs-string\">&quot;Supported values are: <span class=\"hljs-subst\">$(keys(NAME_CONVERSION)</span>)\\n&quot;</span>,\r\n                    <span class=\"hljs-string\">&quot;Supported abbreviations are: <span class=\"hljs-subst\">$(keys(METER_CONVERSION)</span>)\\n&quot;</span>,\r\n                ),\r\n            )\r\n        <span class=\"hljs-keyword\">end</span>\r\n        <span class=\"hljs-keyword\">return</span> NAME_CONVERSION[l_type]\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> l_type\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">function</span> length_conversion(value, from_type, to_type)\r\n    from_type_norm = normalize_type(from_type)\r\n    to_type_norm = normalize_type(to_type)\r\n    value_in_meters = value * METER_CONVERSION[from_type_norm]\r\n    <span class=\"hljs-keyword\">return</span> value_in_meters * TYPE_CONVERSION[to_type_norm]\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Fernanda Kawasaki",
      "email": "50497814+fernandakawasaki@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}