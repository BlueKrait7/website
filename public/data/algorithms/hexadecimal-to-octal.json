{
  "slug": "hexadecimal-to-octal",
  "name": "Hexadecimal to Octal",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "conversions\\hexadecimal_to_octal.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\hexadecimal_to_octal.c",
      "code": "<span class=\"hljs-comment\">/* C program to convert Hexadecimal to Octal number system */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_STR_LEN 17</span>\r\n    <span class=\"hljs-type\">char</span> hex[MAX_STR_LEN];\r\n    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> octal, bin, place;\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, rem, val;\r\n\r\n    <span class=\"hljs-comment\">/* Input hexadecimal number from user */</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter any hexadecimal number: &quot;</span>);\r\n    fgets(hex, MAX_STR_LEN, <span class=\"hljs-built_in\">stdin</span>);\r\n\r\n    octal = <span class=\"hljs-number\">0ll</span>;\r\n    bin = <span class=\"hljs-number\">0ll</span>;\r\n    place = <span class=\"hljs-number\">0ll</span>;\r\n\r\n    <span class=\"hljs-comment\">/* Hexadecimal to binary conversion */</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; hex[i] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>; i++)\r\n    {\r\n        bin = bin * place;\r\n\r\n        <span class=\"hljs-keyword\">switch</span> (hex[i])\r\n        {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;0&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;1&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;2&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">10</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;3&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">11</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;4&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">100</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;5&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">101</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;6&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">110</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;7&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">111</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;8&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">1000</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;9&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">1001</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>:\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;A&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">1010</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>:\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;B&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">1011</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;c&#x27;</span>:\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;C&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">1100</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span>:\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;D&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">1101</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;e&#x27;</span>:\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;E&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">1110</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;f&#x27;</span>:\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;F&#x27;</span>:\r\n            bin += <span class=\"hljs-number\">1111</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">default</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Invalid hexadecimal input.&quot;</span>);\r\n        }\r\n\r\n        place = <span class=\"hljs-number\">10000</span>;\r\n    }\r\n\r\n    place = <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-comment\">/* Binary to octal conversion */</span>\r\n    <span class=\"hljs-keyword\">while</span> (bin &gt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        rem = bin % <span class=\"hljs-number\">1000</span>;\r\n\r\n        <span class=\"hljs-keyword\">switch</span> (rem)\r\n        {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\r\n            val = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\r\n            val = <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span>:\r\n            val = <span class=\"hljs-number\">2</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span>:\r\n            val = <span class=\"hljs-number\">3</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">100</span>:\r\n            val = <span class=\"hljs-number\">4</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">101</span>:\r\n            val = <span class=\"hljs-number\">5</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">110</span>:\r\n            val = <span class=\"hljs-number\">6</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">111</span>:\r\n            val = <span class=\"hljs-number\">7</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        octal = (val * place) + octal;\r\n        bin /= <span class=\"hljs-number\">1000</span>;\r\n\r\n        place *= <span class=\"hljs-number\">10</span>;\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hexadecimal number = %s\\n&quot;</span>, hex);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Octal number = %lld&quot;</span>, octal);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "conversions\\hexadecimal_to_octal.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions\\hexadecimal_to_octal.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;dart:math&quot;</span> <span class=\"hljs-keyword\">show</span> pow;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-comment\">// Hexadecimal number to octal number conversion program</span>\r\n<span class=\"hljs-built_in\">String</span> hexadecimal_to_octal(<span class=\"hljs-built_in\">String</span> hex_val) {\r\n  <span class=\"hljs-built_in\">int</span> dec = <span class=\"hljs-number\">0</span>;\r\n\r\n  <span class=\"hljs-comment\">// checking for null string passed to function</span>\r\n  <span class=\"hljs-keyword\">if</span> (hex_val == <span class=\"hljs-keyword\">null</span> || hex_val == <span class=\"hljs-string\">&quot;&quot;</span>) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An empty value was passed to the function&quot;</span>);\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// negative number check</span>\r\n  <span class=\"hljs-built_in\">bool</span> is_negative = hex_val[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;-&quot;</span>;\r\n  <span class=\"hljs-keyword\">if</span> (is_negative) hex_val = hex_val.substring(<span class=\"hljs-number\">1</span>);\r\n  <span class=\"hljs-built_in\">int</span> c = hex_val.length - <span class=\"hljs-number\">1</span>;\r\n\r\n  <span class=\"hljs-comment\">// finding the decimal equivalent of the hexa decimal number</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; hex_val.length; i++) {\r\n    <span class=\"hljs-keyword\">var</span> ch = hex_val.substring(i, i + <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-keyword\">switch</span> (ch) {\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;0&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;1&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;2&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;3&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;4&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;5&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;6&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;7&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;8&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;9&#x27;</span>:\r\n        dec = dec + <span class=\"hljs-built_in\">int</span>.parse(ch) * pow(<span class=\"hljs-number\">16</span>, c);\r\n        c--;\r\n        <span class=\"hljs-keyword\">break</span>;\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;A&#x27;</span>:\r\n        dec = dec + <span class=\"hljs-number\">10</span> * pow(<span class=\"hljs-number\">16</span>, c);\r\n        c--;\r\n        <span class=\"hljs-keyword\">break</span>;\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;B&#x27;</span>:\r\n        dec = dec + <span class=\"hljs-number\">11</span> * pow(<span class=\"hljs-number\">16</span>, c);\r\n        c--;\r\n        <span class=\"hljs-keyword\">break</span>;\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;c&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;C&#x27;</span>:\r\n        dec = dec + <span class=\"hljs-number\">12</span> * pow(<span class=\"hljs-number\">16</span>, c);\r\n        c--;\r\n        <span class=\"hljs-keyword\">break</span>;\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;D&#x27;</span>:\r\n        dec = dec + <span class=\"hljs-number\">13</span> * pow(<span class=\"hljs-number\">16</span>, c);\r\n        c--;\r\n        <span class=\"hljs-keyword\">break</span>;\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;e&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;E&#x27;</span>:\r\n        dec = dec + <span class=\"hljs-number\">14</span> * pow(<span class=\"hljs-number\">16</span>, c);\r\n        c--;\r\n        <span class=\"hljs-keyword\">break</span>;\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;f&#x27;</span>:\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;F&#x27;</span>:\r\n        dec = dec + <span class=\"hljs-number\">15</span> * pow(<span class=\"hljs-number\">16</span>, c);\r\n        c--;\r\n        <span class=\"hljs-keyword\">break</span>;\r\n      <span class=\"hljs-keyword\">default</span>:\r\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(\r\n            <span class=\"hljs-string\">&quot;An invalid value was passed to the function&quot;</span>);\r\n        <span class=\"hljs-keyword\">break</span>;\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// String oct to store the octal equivalent of a hexadecimal number.</span>\r\n  <span class=\"hljs-built_in\">String</span> oct_val = <span class=\"hljs-string\">&quot;&quot;</span>;\r\n\r\n  <span class=\"hljs-comment\">// Converting decimal to octal number.</span>\r\n  <span class=\"hljs-keyword\">while</span> (dec &gt; <span class=\"hljs-number\">0</span>) {\r\n    oct_val = (dec % <span class=\"hljs-number\">8</span>).toString() + oct_val;\r\n    dec = dec ~/ <span class=\"hljs-number\">8</span>;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Returning the value</span>\r\n  <span class=\"hljs-keyword\">if</span> (is_negative) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + oct_val;\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> oct_val;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-comment\">// Test cases with various input</span>\r\n  test(<span class=\"hljs-string\">&quot;hexadecimal_to_octal 43DF&quot;</span>, () {\r\n    expect(hexadecimal_to_octal(<span class=\"hljs-string\">&quot;43DF&quot;</span>), equals(<span class=\"hljs-string\">&quot;41737&quot;</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;hexadecimal_to_octal -2CB&quot;</span>, () {\r\n    expect(hexadecimal_to_octal(<span class=\"hljs-string\">&quot;-2CB&quot;</span>), equals(<span class=\"hljs-string\">&quot;-1313&quot;</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;hexadecimal_to_octal rasies error when number is invalid&quot;</span>, () {\r\n    expect(() =&gt; hexadecimal_to_octal(<span class=\"hljs-string\">&quot;AIO&quot;</span>), throwsFormatException);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;hexadecimal_to_octal of empty string raises error&quot;</span>, () {\r\n    expect(() =&gt; hexadecimal_to_octal(<span class=\"hljs-string\">&quot;&quot;</span>), throwsFormatException);\r\n  });\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "Vishnu",
      "email": "vishnupothan2@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}