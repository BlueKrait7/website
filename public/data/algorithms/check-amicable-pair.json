{
  "slug": "check-amicable-pair",
  "name": "Check Amicable Pair",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\check_amicable_pair.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\check_amicable_pair.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n *\r\n * @file\r\n * \\brief A C++ Program to check whether a pair of number is [amicable\r\n * pair](https://en.wikipedia.org/wiki/Amicable_numbers) or not.\r\n *\r\n * \\details\r\n * Amicable Pair are two positive integers such that sum of the proper divisor\r\n * of each number is equal to the other number.\r\n * @author iamnambiar\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to calculate the sum of all the proper divisor\r\n * of an integer.\r\n * @param num First number.\r\n * @return Sum of the proper divisor of the number.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum_of_divisor</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num)</span> </span>{\r\n    <span class=\"hljs-comment\">// Variable to store the sum of all proper divisors.</span>\r\n    <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-comment\">// Below loop condition helps to reduce Time complexity by a factor of</span>\r\n    <span class=\"hljs-comment\">// square root of the number.</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> div = <span class=\"hljs-number\">2</span>; div * div &lt;= num; ++div) {\r\n        <span class=\"hljs-comment\">// Check &#x27;div&#x27; is divisor of &#x27;num&#x27;.</span>\r\n        <span class=\"hljs-keyword\">if</span> (num % div == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-comment\">// If both divisor are same, add once to &#x27;sum&#x27;</span>\r\n            <span class=\"hljs-keyword\">if</span> (div == (num / div)) {\r\n                sum += div;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-comment\">// If both divisor are not the same, add both to &#x27;sum&#x27;.</span>\r\n                sum += (div + (num / div));\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> sum + <span class=\"hljs-number\">1</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to check whether the pair is amicable or not.\r\n * @param x First number.\r\n * @param y Second number.\r\n * @return `true` if the pair is amicable\r\n * @return `false` if the pair is not amicable\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">are_amicable</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">sum_of_divisor</span>(x) == y) &amp;&amp; (<span class=\"hljs-built_in\">sum_of_divisor</span>(y) == x);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function for testing the is_amicable() with\r\n * all the test cases.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// are_amicable(220, 284) returns true.</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">are_amicable</span>(<span class=\"hljs-number\">220</span>, <span class=\"hljs-number\">284</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-comment\">// are_amicable(6232, 6368) returns true.</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">are_amicable</span>(<span class=\"hljs-number\">6368</span>, <span class=\"hljs-number\">6232</span>) == <span class=\"hljs-literal\">true</span>);\r\n    <span class=\"hljs-comment\">// are_amicable(458, 232) returns false.</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">are_amicable</span>(<span class=\"hljs-number\">458</span>, <span class=\"hljs-number\">232</span>) == <span class=\"hljs-literal\">false</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main Function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Assertion Success.&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}