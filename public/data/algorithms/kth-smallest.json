{
  "slug": "kth-smallest",
  "name": "Kth Smallest",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src\\searching\\kth_smallest.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\searching\\kth_smallest.rs",
      "code": "<span class=\"hljs-keyword\">use</span> crate::sorting::partition;\r\n<span class=\"hljs-keyword\">use</span> std::cmp::{Ordering, <span class=\"hljs-built_in\">PartialOrd</span>};\r\n\r\n<span class=\"hljs-comment\">/// Returns k-th smallest element of an array, i.e. its order statistics.</span>\r\n<span class=\"hljs-comment\">/// Time complexity is O(n^2) in the worst case, but only O(n) on average.</span>\r\n<span class=\"hljs-comment\">/// It mutates the input, and therefore does not require additional space.</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">kth_smallest</span>&lt;T&gt;(input: &amp;<span class=\"hljs-keyword\">mut</span> [T], k: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">PartialOrd</span> + <span class=\"hljs-built_in\">Copy</span>,\r\n{\r\n    <span class=\"hljs-keyword\">if</span> input.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">kth</span> = _kth_smallest(input, k, <span class=\"hljs-number\">0</span>, input.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-title function_ invoke__\">Some</span>(kth)\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_kth_smallest</span>&lt;T&gt;(input: &amp;<span class=\"hljs-keyword\">mut</span> [T], k: <span class=\"hljs-type\">usize</span>, lo: <span class=\"hljs-type\">usize</span>, hi: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> T\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">PartialOrd</span> + <span class=\"hljs-built_in\">Copy</span>,\r\n{\r\n    <span class=\"hljs-keyword\">if</span> lo == hi {\r\n        <span class=\"hljs-keyword\">return</span> input[lo];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pivot</span> = <span class=\"hljs-title function_ invoke__\">partition</span>(input, lo <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">isize</span>, hi <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">isize</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">i</span> = pivot - lo + <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-keyword\">match</span> k.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;i) {\r\n        Ordering::Equal =&gt; input[pivot],\r\n        Ordering::Less =&gt; _kth_smallest(input, k, lo, pivot - <span class=\"hljs-number\">1</span>),\r\n        Ordering::Greater =&gt; _kth_smallest(input, k - i, pivot + <span class=\"hljs-number\">1</span>, hi),\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">zero</span>: [<span class=\"hljs-type\">u8</span>; <span class=\"hljs-number\">0</span>] = [];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest</span>(&amp;<span class=\"hljs-keyword\">mut</span> zero, <span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-literal\">None</span>, first);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">one</span> = [<span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest</span>(&amp;<span class=\"hljs-keyword\">mut</span> one, <span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, first.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">many_elements</span>() {\r\n        <span class=\"hljs-comment\">// 0 1 3 4 5 7 8 9 9 10 12 13 16 17</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">many</span> = [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>];\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest</span>(&amp;<span class=\"hljs-keyword\">mut</span> many, <span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">third</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest</span>(&amp;<span class=\"hljs-keyword\">mut</span> many, <span class=\"hljs-number\">3</span>);\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">sixth</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest</span>(&amp;<span class=\"hljs-keyword\">mut</span> many, <span class=\"hljs-number\">6</span>);\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">fourteenth</span> = <span class=\"hljs-title function_ invoke__\">kth_smallest</span>(&amp;<span class=\"hljs-keyword\">mut</span> many, <span class=\"hljs-number\">14</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, first.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">3</span>, third.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, sixth.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">17</span>, fourteenth.<span class=\"hljs-title function_ invoke__\">unwrap</span>());\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Arthur Kurbidaev",
      "email": "artkurbidaev@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}