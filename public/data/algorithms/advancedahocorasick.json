{
  "slug": "advancedahocorasick",
  "name": "Advancedahocorasick",
  "categories": [
    "strings",
    "ahocorasick"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "strings\\ahocorasick\\advancedahocorasick.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings\\ahocorasick\\advancedahocorasick.go",
      "code": "<span class=\"hljs-keyword\">package</span> ahocorasick\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\r\n\t<span class=\"hljs-string\">&quot;time&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-comment\">// Advanced Function performing the Advanced Aho-Corasick algorithm.</span>\r\n<span class=\"hljs-comment\">// Finds and prints occurrences of each pattern.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Advanced</span><span class=\"hljs-params\">(t <span class=\"hljs-type\">string</span>, p []<span class=\"hljs-type\">string</span>)</span></span> Result {\r\n\tstartTime := time.Now()\r\n\toccurrences := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>)\r\n\tac, f := BuildExtendedAc(p)\r\n\tcurrent := <span class=\"hljs-number\">0</span>\r\n\t<span class=\"hljs-keyword\">for</span> pos := <span class=\"hljs-number\">0</span>; pos &lt; <span class=\"hljs-built_in\">len</span>(t); pos++ {\r\n\t\t<span class=\"hljs-keyword\">if</span> GetTransition(current, t[pos], ac) != <span class=\"hljs-number\">-1</span> {\r\n\t\t\tcurrent = GetTransition(current, t[pos], ac)\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\tcurrent = <span class=\"hljs-number\">0</span>\r\n\t\t}\r\n\t\t_, ok := f[current]\r\n\t\t<span class=\"hljs-keyword\">if</span> ok {\r\n\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> f[current] {\r\n\t\t\t\t<span class=\"hljs-keyword\">if</span> p[f[current][i]] == GetWord(pos-<span class=\"hljs-built_in\">len</span>(p[f[current][i]])+<span class=\"hljs-number\">1</span>, pos, t) { <span class=\"hljs-comment\">//check for word match</span>\r\n\t\t\t\t\tnewOccurrences := IntArrayCapUp(occurrences[f[current][i]])\r\n\t\t\t\t\toccurrences[f[current][i]] = newOccurrences\r\n\t\t\t\t\toccurrences[f[current][i]][<span class=\"hljs-built_in\">len</span>(newOccurrences)<span class=\"hljs-number\">-1</span>] = pos - <span class=\"hljs-built_in\">len</span>(p[f[current][i]]) + <span class=\"hljs-number\">1</span>\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telapsed := time.Since(startTime)\r\n\tfmt.Printf(<span class=\"hljs-string\">&quot;\\n\\nElapsed %f secs\\n&quot;</span>, elapsed.Seconds())\r\n\r\n\t<span class=\"hljs-keyword\">var</span> resultOccurrences = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>][]<span class=\"hljs-type\">int</span>)\r\n\t<span class=\"hljs-keyword\">for</span> key, value := <span class=\"hljs-keyword\">range</span> occurrences {\r\n\t\tresultOccurrences[p[key]] = value\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> Result{\r\n\t\tresultOccurrences,\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">// BuildExtendedAc Functions that builds extended Aho Corasick automaton.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BuildExtendedAc</span><span class=\"hljs-params\">(p []<span class=\"hljs-type\">string</span>)</span></span> (acToReturn <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">uint8</span>]<span class=\"hljs-type\">int</span>, f <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>][]<span class=\"hljs-type\">int</span>) {\r\n\tacTrie, stateIsTerminal, f := ConstructTrie(p)\r\n\ts := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-built_in\">len</span>(stateIsTerminal)) <span class=\"hljs-comment\">//supply function</span>\r\n\ti := <span class=\"hljs-number\">0</span>                                 <span class=\"hljs-comment\">//root of acTrie</span>\r\n\tacToReturn = acTrie\r\n\ts[i] = <span class=\"hljs-number\">-1</span>\r\n\t<span class=\"hljs-keyword\">for</span> current := <span class=\"hljs-number\">1</span>; current &lt; <span class=\"hljs-built_in\">len</span>(stateIsTerminal); current++ {\r\n\t\to, parent := GetParent(current, acTrie)\r\n\t\tdown := s[parent]\r\n\t\t<span class=\"hljs-keyword\">for</span> StateExists(down, acToReturn) &amp;&amp; GetTransition(down, o, acToReturn) == <span class=\"hljs-number\">-1</span> {\r\n\t\t\tdown = s[down]\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">if</span> StateExists(down, acToReturn) {\r\n\t\t\ts[current] = GetTransition(down, o, acToReturn)\r\n\t\t\t<span class=\"hljs-keyword\">if</span> stateIsTerminal[s[current]] {\r\n\t\t\t\tstateIsTerminal[current] = <span class=\"hljs-literal\">true</span>\r\n\t\t\t\tf[current] = ArrayUnion(f[current], f[s[current]]) <span class=\"hljs-comment\">//F(Current) &lt;- F(Current) union F(S(Current))</span>\r\n\t\t\t}\r\n\t\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\t\ts[current] = i <span class=\"hljs-comment\">//initial state?</span>\r\n\t\t}\r\n\t}\r\n\ta := ComputeAlphabet(p) <span class=\"hljs-comment\">// concat of all patterns in p</span>\r\n\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-keyword\">range</span> a {\r\n\t\t<span class=\"hljs-keyword\">if</span> GetTransition(i, a[j], acToReturn) == <span class=\"hljs-number\">-1</span> {\r\n\t\t\tCreateTransition(i, a[j], i, acToReturn)\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">for</span> current := <span class=\"hljs-number\">1</span>; current &lt; <span class=\"hljs-built_in\">len</span>(stateIsTerminal); current++ {\r\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-keyword\">range</span> a {\r\n\t\t\t<span class=\"hljs-keyword\">if</span> GetTransition(current, a[j], acToReturn) == <span class=\"hljs-number\">-1</span> {\r\n\t\t\t\tCreateTransition(current, a[j], GetTransition(s[current], a[j], acToReturn), acToReturn)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> acToReturn, f\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}