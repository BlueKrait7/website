{
  "slug": "is-palindrome",
  "name": "Is Palindrome",
  "categories": [
    "datastructures",
    "linkedlist"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings\\is_palindrome.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings\\is_palindrome.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_palindrome</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Determine whether the string is palindrome\r\n    :param s:\r\n    :return: Boolean\r\n    &gt;&gt;&gt; is_palindrome(&quot;a man a plan a canal panama&quot;.replace(&quot; &quot;, &quot;&quot;))\r\n    True\r\n    &gt;&gt;&gt; is_palindrome(&quot;Hello&quot;)\r\n    False\r\n    &gt;&gt;&gt; is_palindrome(&quot;Able was I ere I saw Elba&quot;)\r\n    True\r\n    &gt;&gt;&gt; is_palindrome(&quot;racecar&quot;)\r\n    True\r\n    &gt;&gt;&gt; is_palindrome(&quot;Mr. Owl ate my metal worm?&quot;)\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Since Punctuation, capitalization, and spaces are usually ignored while checking</span>\r\n    <span class=\"hljs-comment\"># Palindrome,  we first remove them from our string.</span>\r\n    s = <span class=\"hljs-string\">&quot;&quot;</span>.join([character <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> s.lower() <span class=\"hljs-keyword\">if</span> character.isalnum()])\r\n    <span class=\"hljs-keyword\">return</span> s == s[::-<span class=\"hljs-number\">1</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    s = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter string to determine whether its palindrome or not: &quot;</span>).strip()\r\n    <span class=\"hljs-keyword\">if</span> is_palindrome(s):\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Given string is palindrome&quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Given string is not palindrome&quot;</span>)\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Strings\\IsPalindrome.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Strings\\IsPalindrome.fs",
      "code": "ï»¿<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\r\n\r\n<span class=\"hljs-keyword\">module</span> IsPalindrome <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// Determine whether the string is palindrome</span>\r\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;str&quot;&gt;&lt;/param&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;returns&gt;Boolean&lt;/returns&gt;</span>\r\n    <span class=\"hljs-keyword\">let</span> isPalindrome (str<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> str <span class=\"hljs-operator\">=</span>\r\n            str.ToLower()\r\n            <span class=\"hljs-operator\">|&gt;</span> Seq.filter (System.Char.IsLetterOrDigit)\r\n            <span class=\"hljs-operator\">|&gt;</span> Seq.toList\r\n\r\n        str <span class=\"hljs-operator\">=</span> (str <span class=\"hljs-operator\">|&gt;</span> List.rev)\r\n"
    },
    "go": {
      "dir": "strings\\palindrome\\ispalindrome.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings\\palindrome\\ispalindrome.go",
      "code": "<span class=\"hljs-comment\">// ispalindrome.go</span>\r\n<span class=\"hljs-comment\">// description: Checks if a given string is palindrome or not</span>\r\n<span class=\"hljs-comment\">// details:</span>\r\n<span class=\"hljs-comment\">// Palindromes are expressions that read the same way forwards and backwards.</span>\r\n<span class=\"hljs-comment\">// They can be words/phrases (like &quot;racecar&quot; and &quot;Do geese see God?&quot;), or even</span>\r\n<span class=\"hljs-comment\">// numbers (like &quot;02/02/2020&quot;). Usually punctuation signs, capitalization</span>\r\n<span class=\"hljs-comment\">// and spaces are ignored. A regular expression was used to achieve that.</span>\r\n<span class=\"hljs-comment\">// See more information on: https://en.wikipedia.org/wiki/Palindrome</span>\r\n<span class=\"hljs-comment\">// author(s) [Fernanda Kawasaki](https://github.com/fernandakawasaki)</span>\r\n<span class=\"hljs-comment\">// see ispalindrome_test.go</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> palindrome\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;regexp&quot;</span>\r\n\t<span class=\"hljs-string\">&quot;strings&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">cleanString</span><span class=\"hljs-params\">(text <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> {\r\n\tclean_text := strings.ToLower(text)\r\n\tclean_text = strings.Join(strings.Fields(clean_text), <span class=\"hljs-string\">&quot;&quot;</span>) <span class=\"hljs-comment\">// Remove spaces</span>\r\n\tregex, _ := regexp.Compile(<span class=\"hljs-string\">`[^\\p{L}\\p{N} ]+`</span>)             <span class=\"hljs-comment\">// Regular expression for alphanumeric only characters</span>\r\n\t<span class=\"hljs-keyword\">return</span> regex.ReplaceAllString(clean_text, <span class=\"hljs-string\">&quot;&quot;</span>)\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">IsPalindrome</span><span class=\"hljs-params\">(text <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> {\r\n\tclean_text := cleanString(text)\r\n\t<span class=\"hljs-keyword\">var</span> i, j <span class=\"hljs-type\">int</span>\r\n\t<span class=\"hljs-type\">rune</span> := []<span class=\"hljs-type\">rune</span>(clean_text)\r\n\t<span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-type\">rune</span>)/<span class=\"hljs-number\">2</span>; i++ {\r\n\t\tj = <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-type\">rune</span>) - <span class=\"hljs-number\">1</span> - i\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-type\">string</span>(<span class=\"hljs-type\">rune</span>[i]) != <span class=\"hljs-type\">string</span>(<span class=\"hljs-type\">rune</span>[j]) {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">IsPalindromeRecursive</span><span class=\"hljs-params\">(text <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">bool</span> {\r\n\tclean_text := cleanString(text)\r\n\trunes := []<span class=\"hljs-type\">rune</span>(clean_text)\r\n\t<span class=\"hljs-keyword\">return</span> isPalindromeRecursiveHelper(runes, <span class=\"hljs-number\">0</span>, <span class=\"hljs-type\">int64</span>(<span class=\"hljs-built_in\">len</span>(runes)))\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">isPalindromeRecursiveHelper</span><span class=\"hljs-params\">(runes []<span class=\"hljs-type\">rune</span>, start <span class=\"hljs-type\">int64</span>, end <span class=\"hljs-type\">int64</span>)</span></span> <span class=\"hljs-type\">bool</span> {\r\n\t<span class=\"hljs-keyword\">if</span> start &gt;= end {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> runes[start] != runes[end<span class=\"hljs-number\">-1</span>] {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\r\n\t}\r\n\tstart = start + <span class=\"hljs-number\">1</span>\r\n\tend = end - <span class=\"hljs-number\">1</span>\r\n\t<span class=\"hljs-keyword\">return</span> isPalindromeRecursiveHelper(runes, start, end)\r\n}\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\Strings\\isPalindrome.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\Strings\\isPalindrome.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span> = <span class=\"hljs-title\">isPalindrome</span><span class=\"hljs-params\">(inputWord)</span></span>\r\n    <span class=\"hljs-comment\">% Return 1 if input string is a palindrome; 0 otherwise. </span>\r\n    \r\n    <span class=\"hljs-comment\">% Gets the length of the input word.</span>\r\n    inputLength = <span class=\"hljs-built_in\">length</span>(inputWord);\r\n\r\n    <span class=\"hljs-comment\">% Number of pairs to compare.</span>\r\n    lastIndex = <span class=\"hljs-built_in\">floor</span>( inputLength / <span class=\"hljs-number\">2</span>);\r\n    y=<span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-comment\">% for every pair of letters in the word check if they match</span>\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : lastIndex\r\n        <span class=\"hljs-keyword\">if</span> inputWord(<span class=\"hljs-built_in\">i</span>) ~= inputWord(<span class=\"hljs-keyword\">end</span> + (<span class=\"hljs-number\">1</span> - <span class=\"hljs-built_in\">i</span>))\r\n            y = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    \r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "julia": {
      "dir": "src\\strings\\is_palindrome.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\strings\\is_palindrome.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    is_palindrome(s)\r\nA set of functions to check if a given string\r\nis a palindrome.\r\n\r\nArguments:\r\n - s - a string =#\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">function</span> is_palindrome(s) <span class=\"hljs-comment\"># Named function</span>\r\n    s = lowercase(s)\r\n    s == reverse(s)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\ns -&gt; s == reverse(s) <span class=\"hljs-comment\"># Anonymous</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "kNOzone",
      "email": "72206118+kNOzone@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kaushik Amar Das",
      "email": "cozek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Fernanda Kawasaki",
      "email": "50497814+fernandakawasaki@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "66054069+ReneganRonin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Madison Estabrook",
      "email": "madison.estabrook@gmail.com",
      "commits": 1
    },
    {
      "name": "Nischal Patel",
      "email": "nischalpatel20@gmail.com",
      "commits": 1
    },
    {
      "name": "Ashwin Das",
      "email": "ashwindasr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Muhammad Umer Farooq",
      "email": "mumerfarooqlablnet01@gmail.com",
      "commits": 1
    },
    {
      "name": "Ishani",
      "email": "ishanigarkoti08@gmail.com",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}