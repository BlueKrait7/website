{
  "slug": "dynamic-array",
  "name": "Dynamic Array",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\dynamicarray\\DynamicArray.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\dynamicarray\\DynamicArray.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.dynamicarray;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n<span class=\"hljs-keyword\">import</span> java.util.function.Consumer;\r\n<span class=\"hljs-keyword\">import</span> java.util.stream.Stream;\r\n<span class=\"hljs-keyword\">import</span> java.util.stream.StreamSupport;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This class implements a dynamic array\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> &lt;E&gt; the type that each index of the array will hold\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicArray</span>&lt;E&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Iterable</span>&lt;E&gt; {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAPACITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">16</span>;\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> capacity;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\r\n    <span class=\"hljs-keyword\">private</span> Object[] elements;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * constructor\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> capacity the starting length of the desired array\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DynamicArray</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> capacity)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-built_in\">this</span>.capacity = capacity;\r\n        <span class=\"hljs-built_in\">this</span>.elements = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[<span class=\"hljs-built_in\">this</span>.capacity];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * No-args constructor\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DynamicArray</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-built_in\">this</span>(DEFAULT_CAPACITY);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Adds an element to the array If full, creates a copy array twice the size\r\n     * of the current one\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> element the element of type &lt;E&gt; to be added to the array\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> E element)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.size == <span class=\"hljs-built_in\">this</span>.elements.length) {\r\n            <span class=\"hljs-built_in\">this</span>.elements = Arrays.copyOf(<span class=\"hljs-built_in\">this</span>.elements, newCapacity(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">this</span>.capacity));\r\n        }\r\n\r\n        <span class=\"hljs-built_in\">this</span>.elements[<span class=\"hljs-built_in\">this</span>.size] = element;\r\n        size++;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Places element of type &lt;E&gt; at the desired index\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> index the index for the element to be placed\r\n     * <span class=\"hljs-doctag\">@param</span> element the element to be inserted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index, E element)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.elements[index] = element;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * get method for element at a given index returns null if the index is\r\n     * empty\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> index the desired index of the element\r\n     * <span class=\"hljs-doctag\">@return</span> &lt;E&gt; the element at the specified index\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index)</span> {\r\n        <span class=\"hljs-keyword\">return</span> getElement(index);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Removes an element from the array\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> index the index of the element to be removed\r\n     * <span class=\"hljs-doctag\">@return</span> &lt;E&gt; the element removed\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index)</span> {\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">E</span> <span class=\"hljs-variable\">oldElement</span> <span class=\"hljs-operator\">=</span> getElement(index);\r\n        fastRemove(<span class=\"hljs-built_in\">this</span>.elements, index);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.capacity &gt; DEFAULT_CAPACITY &amp;&amp; size * <span class=\"hljs-number\">4</span> &lt;= <span class=\"hljs-built_in\">this</span>.capacity) {\r\n            <span class=\"hljs-built_in\">this</span>.elements = Arrays.copyOf(<span class=\"hljs-built_in\">this</span>.elements, newCapacity(<span class=\"hljs-built_in\">this</span>.capacity / <span class=\"hljs-number\">2</span>));\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> oldElement;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * get method for size field\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> int size\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getSize</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * isEmpty helper method\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> boolean true if the array contains no elements, false otherwise\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size == <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> Stream&lt;E&gt; <span class=\"hljs-title function_\">stream</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> StreamSupport.stream(spliterator(), <span class=\"hljs-literal\">false</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fastRemove</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Object[] elements, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index)</span> {\r\n        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">newSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.size - <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (newSize &gt; index) {\r\n            System.arraycopy(elements, index + <span class=\"hljs-number\">1</span>, elements, index, newSize - index);\r\n        }\r\n\r\n        elements[<span class=\"hljs-built_in\">this</span>.size = newSize] = <span class=\"hljs-literal\">null</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> E <span class=\"hljs-title function_\">getElement</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index)</span> {\r\n        <span class=\"hljs-keyword\">return</span> (E) <span class=\"hljs-built_in\">this</span>.elements[index];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">newCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> capacity)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.capacity = capacity;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.capacity;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * returns a String representation of this object\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> String a String representing the array\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> Arrays.toString(Arrays.stream(<span class=\"hljs-built_in\">this</span>.elements).filter(Objects::nonNull).toArray());\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Creates and returns a new Dynamic Array Iterator\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> Iterator a Dynamic Array Iterator\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> Iterator <span class=\"hljs-title function_\">iterator</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DynamicArrayIterator</span>();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicArrayIterator</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Iterator</span>&lt;E&gt; {\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> cursor;\r\n\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">hasNext</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.cursor != size;\r\n        }\r\n\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title function_\">next</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursor &gt; DynamicArray.<span class=\"hljs-built_in\">this</span>.size) {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>();\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursor &gt; DynamicArray.<span class=\"hljs-built_in\">this</span>.elements.length) {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentModificationException</span>();\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">E</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> DynamicArray.<span class=\"hljs-built_in\">this</span>.getElement(<span class=\"hljs-built_in\">this</span>.cursor);\r\n            <span class=\"hljs-built_in\">this</span>.cursor++;\r\n\r\n            <span class=\"hljs-keyword\">return</span> element;\r\n        }\r\n\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursor &lt; <span class=\"hljs-number\">0</span>) {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>();\r\n            }\r\n\r\n            DynamicArray.<span class=\"hljs-built_in\">this</span>.remove(<span class=\"hljs-built_in\">this</span>.cursor);\r\n            <span class=\"hljs-built_in\">this</span>.cursor--;\r\n        }\r\n\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">forEachRemaining</span><span class=\"hljs-params\">(Consumer&lt;? <span class=\"hljs-built_in\">super</span> E&gt; action)</span> {\r\n            Objects.requireNonNull(action);\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; DynamicArray.<span class=\"hljs-built_in\">this</span>.size; i++) {\r\n                action.accept(DynamicArray.<span class=\"hljs-built_in\">this</span>.getElement(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This class is the driver for the DynamicArray&lt;E&gt; class it tests a variety\r\n     * of methods and prints the output\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        DynamicArray&lt;String&gt; names = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DynamicArray</span>&lt;&gt;();\r\n        names.add(<span class=\"hljs-string\">&quot;Peubes&quot;</span>);\r\n        names.add(<span class=\"hljs-string\">&quot;Marley&quot;</span>);\r\n\r\n        <span class=\"hljs-keyword\">for</span> (String name : names) {\r\n            System.out.println(name);\r\n        }\r\n\r\n        names.stream().forEach(System.out::println);\r\n\r\n        System.out.println(names);\r\n\r\n        System.out.println(names.getSize());\r\n\r\n        names.remove(<span class=\"hljs-number\">0</span>);\r\n\r\n        <span class=\"hljs-keyword\">for</span> (String name : names) {\r\n            System.out.println(name);\r\n        }\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "data_structures\\dynamic_array\\dynamic_array.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\dynamic_array\\dynamic_array.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;dynamic_array.h&quot;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">dynamic_array_t</span> *<span class=\"hljs-title function_\">init_dynamic_array</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">dynamic_array_t</span> *da = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">dynamic_array_t</span>));\r\n    da-&gt;items = <span class=\"hljs-built_in\">calloc</span>(DEFAULT_CAPACITY, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">void</span> *));\r\n    da-&gt;capacity = DEFAULT_CAPACITY;\r\n\r\n    <span class=\"hljs-keyword\">return</span> da;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">dynamic_array_t</span> *da, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> *value)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (da-&gt;size &gt;= da-&gt;capacity)\r\n    {\r\n        <span class=\"hljs-type\">void</span> **newItems =\r\n            <span class=\"hljs-built_in\">realloc</span>(da-&gt;items, (da-&gt;capacity &lt;&lt;= <span class=\"hljs-number\">1</span>) * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">void</span> **));\r\n        <span class=\"hljs-built_in\">free</span>(da-&gt;items);\r\n\r\n        da-&gt;items = newItems;\r\n    }\r\n\r\n    <span class=\"hljs-type\">void</span> *copy_value = retrive_copy_of_value(value);\r\n    da-&gt;items[da-&gt;size++] = copy_value;\r\n\r\n    <span class=\"hljs-keyword\">return</span> copy_value;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(<span class=\"hljs-type\">dynamic_array_t</span> *da, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> *value, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">unsigned</span> index)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (!contains(da-&gt;size, index))\r\n        <span class=\"hljs-keyword\">return</span> INDEX_OUT_OF_BOUNDS;\r\n\r\n    <span class=\"hljs-built_in\">free</span>(da-&gt;items[index]);\r\n    <span class=\"hljs-type\">void</span> *copy_value = retrive_copy_of_value(value);\r\n    da-&gt;items[index] = copy_value;\r\n\r\n    <span class=\"hljs-keyword\">return</span> copy_value;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(<span class=\"hljs-type\">dynamic_array_t</span> *da, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">unsigned</span> index)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (!contains(da-&gt;size, index))\r\n        <span class=\"hljs-keyword\">return</span> INDEX_OUT_OF_BOUNDS;\r\n\r\n    <span class=\"hljs-keyword\">return</span> da-&gt;items[index];\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">delete</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">dynamic_array_t</span> *da, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">unsigned</span> index)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (!contains(da-&gt;size, index))\r\n        <span class=\"hljs-keyword\">return</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">unsigned</span> i = index; i &lt; da-&gt;size; i++)\r\n    {\r\n        da-&gt;items[i] = da-&gt;items[i + <span class=\"hljs-number\">1</span>];\r\n    }\r\n\r\n    da-&gt;size--;\r\n\r\n    <span class=\"hljs-built_in\">free</span>(da-&gt;items[da-&gt;size]);\r\n}\r\n\r\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-title function_\">contains</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">unsigned</span> size, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">unsigned</span> index)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (size &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; index &lt; size)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;index [%d] out of bounds!\\n&quot;</span>, index);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">retrive_copy_of_value</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span> *value)</span>\r\n{\r\n    <span class=\"hljs-type\">void</span> *value_copy = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">void</span> *));\r\n    <span class=\"hljs-built_in\">memcpy</span>(value_copy, value, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">void</span> *));\r\n\r\n    <span class=\"hljs-keyword\">return</span> value_copy;\r\n}"
    },
    "go": {
      "dir": "structure\\dynamicarray\\dynamicarray.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/structure\\dynamicarray\\dynamicarray.go",
      "code": "<span class=\"hljs-comment\">// Package dynamicarray</span>\r\n<span class=\"hljs-comment\">// A dynamic array is quite similar to a regular array, but its Size is modifiable during program runtime,</span>\r\n<span class=\"hljs-comment\">// very similar to how a slice in Go works. The implementation is for educational purposes and explains</span>\r\n<span class=\"hljs-comment\">// how one might go about implementing their own version of slices.</span>\r\n<span class=\"hljs-comment\">//</span>\r\n<span class=\"hljs-comment\">// For more details check out those links below here:</span>\r\n<span class=\"hljs-comment\">// GeeksForGeeks article : https://www.geeksforgeeks.org/how-do-dynamic-arrays-work/</span>\r\n<span class=\"hljs-comment\">// Go blog: https://blog.golang.org/slices-intro</span>\r\n<span class=\"hljs-comment\">// Go blog: https://blog.golang.org/slices</span>\r\n<span class=\"hljs-comment\">// authors [Wesllhey Holanda](https://github.com/wesllhey), [Milad](https://github.com/miraddo)</span>\r\n<span class=\"hljs-comment\">// see dynamicarray.go, dynamicarray_test.go</span>\r\n<span class=\"hljs-keyword\">package</span> dynamicarray\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;errors&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-keyword\">var</span> defaultCapacity = <span class=\"hljs-number\">10</span>\r\n\r\n<span class=\"hljs-comment\">// DynamicArray structure</span>\r\n<span class=\"hljs-keyword\">type</span> DynamicArray <span class=\"hljs-keyword\">struct</span> {\r\n\tSize        <span class=\"hljs-type\">int</span>\r\n\tCapacity    <span class=\"hljs-type\">int</span>\r\n\tElementData []<span class=\"hljs-keyword\">interface</span>{}\r\n}\r\n\r\n<span class=\"hljs-comment\">// Put function is change/update the value in array with the index and new value</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span></span> Put(index <span class=\"hljs-type\">int</span>, element <span class=\"hljs-keyword\">interface</span>{}) <span class=\"hljs-type\">error</span> {\r\n\terr := da.CheckRangeFromIndex(index)\r\n\r\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> err\r\n\t}\r\n\r\n\tda.ElementData[index] = element\r\n\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Add function is add new element to our array</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span></span> Add(element <span class=\"hljs-keyword\">interface</span>{}) {\r\n\t<span class=\"hljs-keyword\">if</span> da.Size == da.Capacity {\r\n\t\tda.NewCapacity()\r\n\t}\r\n\r\n\tda.ElementData[da.Size] = element\r\n\tda.Size++\r\n}\r\n\r\n<span class=\"hljs-comment\">// Remove function is remove an element with the index</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span></span> Remove(index <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">error</span> {\r\n\terr := da.CheckRangeFromIndex(index)\r\n\r\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> err\r\n\t}\r\n\r\n\t<span class=\"hljs-built_in\">copy</span>(da.ElementData[index:], da.ElementData[index+<span class=\"hljs-number\">1</span>:da.Size])\r\n\tda.ElementData[da.Size<span class=\"hljs-number\">-1</span>] = <span class=\"hljs-literal\">nil</span>\r\n\r\n\tda.Size--\r\n\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Get function is return one element with the index of array</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span></span> Get(index <span class=\"hljs-type\">int</span>) (<span class=\"hljs-keyword\">interface</span>{}, <span class=\"hljs-type\">error</span>) {\r\n\terr := da.CheckRangeFromIndex(index)\r\n\r\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> da.ElementData[index], <span class=\"hljs-literal\">nil</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// IsEmpty function is check that the array has value or not</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span></span> IsEmpty() <span class=\"hljs-type\">bool</span> {\r\n\t<span class=\"hljs-keyword\">return</span> da.Size == <span class=\"hljs-number\">0</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// GetData function return all value of array</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span></span> GetData() []<span class=\"hljs-keyword\">interface</span>{} {\r\n\t<span class=\"hljs-keyword\">return</span> da.ElementData[:da.Size]\r\n}\r\n\r\n<span class=\"hljs-comment\">// CheckRangeFromIndex function it will check the range from the index</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span></span> CheckRangeFromIndex(index <span class=\"hljs-type\">int</span>) <span class=\"hljs-type\">error</span> {\r\n\t<span class=\"hljs-keyword\">if</span> index &gt;= da.Size || index &lt; <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> errors.New(<span class=\"hljs-string\">&quot;index out of range&quot;</span>)\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// NewCapacity function increase the Capacity</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span></span> NewCapacity() {\r\n\t<span class=\"hljs-keyword\">if</span> da.Capacity == <span class=\"hljs-number\">0</span> {\r\n\t\tda.Capacity = defaultCapacity\r\n\t} <span class=\"hljs-keyword\">else</span> {\r\n\t\tda.Capacity = da.Capacity &lt;&lt; <span class=\"hljs-number\">1</span>\r\n\t}\r\n\r\n\tnewDataElement := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">interface</span>{}, da.Capacity)\r\n\r\n\t<span class=\"hljs-built_in\">copy</span>(newDataElement, da.ElementData)\r\n\r\n\tda.ElementData = newDataElement\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Huayang Sun",
      "email": "1394466835@qq.com",
      "commits": 1
    },
    {
      "name": "Ray",
      "email": "rbshealy@live.unc.edu",
      "commits": 1
    },
    {
      "name": "Ray S",
      "email": "68674276+rbshealy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Wesllhey Holanda",
      "email": "wesllhey.holanda@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}