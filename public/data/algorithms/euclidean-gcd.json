{
  "slug": "euclidean-gcd",
  "name": "Euclidean Gcd",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\euclidean_gcd.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\euclidean_gcd.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot; https://en.wikipedia.org/wiki/Euclidean_algorithm &quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euclidean_gcd</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Examples:\r\n    &gt;&gt;&gt; euclidean_gcd(3, 5)\r\n    1\r\n\r\n    &gt;&gt;&gt; euclidean_gcd(6, 3)\r\n    3\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">while</span> b:\r\n        a, b = b, a % b\r\n    <span class=\"hljs-keyword\">return</span> a\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euclidean_gcd_recursive</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Recursive method for euclicedan gcd algorithm\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; euclidean_gcd_recursive(3, 5)\r\n    1\r\n\r\n    &gt;&gt;&gt; euclidean_gcd_recursive(6, 3)\r\n    3\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> a <span class=\"hljs-keyword\">if</span> b == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> euclidean_gcd_recursive(b, a % b)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd(3, 5) = <span class=\"hljs-subst\">{euclidean_gcd(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd(5, 3) = <span class=\"hljs-subst\">{euclidean_gcd(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>)}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd(1, 3) = <span class=\"hljs-subst\">{euclidean_gcd(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>)}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd(3, 6) = <span class=\"hljs-subst\">{euclidean_gcd(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd(6, 3) = <span class=\"hljs-subst\">{euclidean_gcd(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>)}</span>&quot;</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd_recursive(3, 5) = <span class=\"hljs-subst\">{euclidean_gcd_recursive(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd_recursive(5, 3) = <span class=\"hljs-subst\">{euclidean_gcd_recursive(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>)}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd_recursive(1, 3) = <span class=\"hljs-subst\">{euclidean_gcd_recursive(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>)}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd_recursive(3, 6) = <span class=\"hljs-subst\">{euclidean_gcd_recursive(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;euclidean_gcd_recursive(6, 3) = <span class=\"hljs-subst\">{euclidean_gcd_recursive(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>)}</span>&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    },
    "ruby": {
      "dir": "discrete_mathematics\\euclidean_gcd.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/discrete_mathematics\\euclidean_gcd.rb",
      "code": "<span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/Euclidean_algorithm</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">euclidean_gcd</span><span class=\"hljs-params\">(a, b)</span></span>\r\n  <span class=\"hljs-keyword\">while</span> b != <span class=\"hljs-number\">0</span>\r\n    t = b\r\n    b = a % b\r\n    a = t\r\n  <span class=\"hljs-keyword\">end</span>\r\n  a\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs <span class=\"hljs-string\">&#x27;GCD(3, 5) = &#x27;</span> + euclidean_gcd(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>).to_s\r\nputs <span class=\"hljs-string\">&#x27;GCD(3, 6) = &#x27;</span> + euclidean_gcd(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>).to_s\r\nputs <span class=\"hljs-string\">&#x27;GCD(6, 3) = &#x27;</span> + euclidean_gcd(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>).to_s\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Numeric/GreatestCommonDivisor/EuclideanGreatestCommonDivisorFinder.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Numeric\\GreatestCommonDivisor\\EuclideanGreatestCommonDivisorFinder.cs",
      "code": "<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric.GreatestCommonDivisor</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EuclideanGreatestCommonDivisorFinder</span> : <span class=\"hljs-title\">IGreatestCommonDivisorFinder</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds greatest common divisor for numbers a and b</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     using euclidean algorithm.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;a&quot;&gt;</span>TODO.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;b&quot;&gt;</span>TODO. 2.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Greatest common divisor.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindGcd</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> a, <span class=\"hljs-built_in\">int</span> b</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">0</span> &amp;&amp; b == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>.MaxValue;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">0</span> || b == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> a + b;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> aa = a;\r\n            <span class=\"hljs-keyword\">var</span> bb = b;\r\n            <span class=\"hljs-keyword\">var</span> cc = aa % bb;\r\n\r\n            <span class=\"hljs-keyword\">while</span> (cc != <span class=\"hljs-number\">0</span>)\r\n            {\r\n                aa = bb;\r\n                bb = cc;\r\n                cc = aa % bb;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> bb;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Doppon",
      "email": "zaxpkuraudo7777@gmail.com",
      "commits": 1
    },
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Juan Antonio",
      "email": "juant.aldea@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}