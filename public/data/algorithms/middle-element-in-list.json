{
  "slug": "middle-element-in-list",
  "name": "Middle Element in List",
  "categories": [
    "datastructures",
    "linkedlist"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures\\linked_list\\middle_element_in_list.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\linked_list\\middle_element_in_list.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/* Link list node */</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> data;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">next</span>;</span>\r\n};\r\n\r\n<span class=\"hljs-comment\">/* Function to get the middle of the linked list*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printMiddle</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *head)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">slow_ptr</span> =</span> head;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">fast_ptr</span> =</span> head;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (head != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">while</span> (fast_ptr != <span class=\"hljs-literal\">NULL</span> &amp;&amp; fast_ptr-&gt;next != <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            fast_ptr = fast_ptr-&gt;next-&gt;next;\r\n            slow_ptr = slow_ptr-&gt;next;\r\n        }\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The middle element is [%d]\\n\\n&quot;</span>, slow_ptr-&gt;data);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node **head_ref, <span class=\"hljs-type\">int</span> new_data)</span>\r\n{\r\n    <span class=\"hljs-comment\">/* allocate node */</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">new_node</span> =</span> (<span class=\"hljs-keyword\">struct</span> Node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));\r\n\r\n    <span class=\"hljs-comment\">/* put in the data */</span>\r\n    new_node-&gt;data = new_data;\r\n\r\n    <span class=\"hljs-comment\">/* link the old list off the new node */</span>\r\n    new_node-&gt;next = (*head_ref);\r\n\r\n    <span class=\"hljs-comment\">/* move the head to point to the new node */</span>\r\n    (*head_ref) = new_node;\r\n}\r\n\r\n<span class=\"hljs-comment\">// A utility function to print a given linked list</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *ptr)</span>\r\n{\r\n    <span class=\"hljs-keyword\">while</span> (ptr != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d-&gt;&quot;</span>, ptr-&gt;data);\r\n        ptr = ptr-&gt;next;\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;NULL\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/* Drier program to test above function*/</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-comment\">/* Start with the empty list */</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">head</span> =</span> <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-type\">int</span> i;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">5</span>; i &gt; <span class=\"hljs-number\">0</span>; i--)\r\n    {\r\n        push(&amp;head, i);\r\n        printList(head);\r\n        printMiddle(head);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Rachit Gangwal",
      "email": "33100172+gangwalrachit@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}