{
  "slug": "power-for-huge-numbers",
  "name": "Power for Huge Numbers",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\power_for_huge_numbers.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\power_for_huge_numbers.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Compute powers of large numbers\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** Maximum number of digits in output\r\n *  \\f$x^n\\f$ where \\f$1 &lt;= x,\\; n &lt;= 10000\\f$ and overflow may happen\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 100000</span>\r\n\r\n<span class=\"hljs-comment\">/** This function multiplies x\r\n * with the number represented by res[].\r\n * res_size is size of res[] or\r\n * number of digits in the number\r\n * represented by res[]. This function\r\n * uses simple school mathematics\r\n * for multiplication.\r\n * This function may value of res_size\r\n * and returns the new value of res_size\r\n * @param x multiplicand\r\n * @param res large number representation using array\r\n * @param res_size number of digits in `res`\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">multiply</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> res[], <span class=\"hljs-type\">int</span> res_size)</span> </span>{\r\n    <span class=\"hljs-comment\">// Initialize carry</span>\r\n    <span class=\"hljs-type\">int</span> carry = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// One by one multiply n with</span>\r\n    <span class=\"hljs-comment\">// individual digits of res[]</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; res_size; i++) {\r\n        <span class=\"hljs-type\">int</span> prod = res[i] * x + carry;\r\n\r\n        <span class=\"hljs-comment\">// Store last digit of</span>\r\n        <span class=\"hljs-comment\">// &#x27;prod&#x27; in res[]</span>\r\n        res[i] = prod % <span class=\"hljs-number\">10</span>;\r\n\r\n        <span class=\"hljs-comment\">// Put rest in carry</span>\r\n        carry = prod / <span class=\"hljs-number\">10</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Put carry in res and</span>\r\n    <span class=\"hljs-comment\">// increase result size</span>\r\n    <span class=\"hljs-keyword\">while</span> (carry) {\r\n        res[res_size] = carry % <span class=\"hljs-number\">10</span>;\r\n        carry = carry / <span class=\"hljs-number\">10</span>;\r\n        res_size++;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> res_size;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** This function finds power of a number x and print \\f$x^n\\f$\r\n * @param x base\r\n * @param n exponent\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">power</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-comment\">// printing value &quot;1&quot; for power = 0</span>\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1&quot;</span>;\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> res[MAX];\r\n    <span class=\"hljs-type\">int</span> res_size = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> temp = x;\r\n\r\n    <span class=\"hljs-comment\">// Initialize result</span>\r\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-number\">0</span>) {\r\n        res[res_size++] = temp % <span class=\"hljs-number\">10</span>;\r\n        temp = temp / <span class=\"hljs-number\">10</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Multiply x n times</span>\r\n    <span class=\"hljs-comment\">// (x^n = x*x*x....n times)</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++) res_size = <span class=\"hljs-built_in\">multiply</span>(x, res, res_size);\r\n\r\n    std::cout &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;^&quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; = &quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = res_size - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) std::cout &lt;&lt; res[i];\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> exponent, base;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter base &quot;</span>;\r\n    std::cin &gt;&gt; base;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter exponent &quot;</span>;\r\n    std::cin &gt;&gt; exponent;\r\n    <span class=\"hljs-built_in\">power</span>(base, exponent);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}