{
  "slug": "jaccard-similarity",
  "name": "Jaccard Similarity",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\jaccard_similarity.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\jaccard_similarity.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThe Jaccard similarity coefficient is a commonly used indicator of the\r\nsimilarity between two sets. Let U be a set and A and B be subsets of U,\r\nthen the Jaccard index/similarity is defined to be the ratio of the number\r\nof elements of their intersection and the number of elements of their union.\r\n\r\nInspired from Wikipedia and\r\nthe book Mining of Massive Datasets [MMDS 2nd Edition, Chapter 3]\r\n\r\nhttps://en.wikipedia.org/wiki/Jaccard_index\r\nhttps://mmds.org\r\n\r\nJaccard similarity is widely used with MinHashing.\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">jaccard_similariy</span>(<span class=\"hljs-params\">setA, setB, alternativeUnion=<span class=\"hljs-literal\">False</span></span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Finds the jaccard similarity between two sets.\r\n    Essentially, its intersection over union.\r\n\r\n    The alternative way to calculate this is to take union as sum of the\r\n    number of items in the two sets. This will lead to jaccard similarity\r\n    of a set with itself be 1/2 instead of 1. [MMDS 2nd Edition, Page 77]\r\n\r\n    Parameters:\r\n        :setA (set,list,tuple): A non-empty set/list\r\n        :setB (set,list,tuple): A non-empty set/list\r\n        :alternativeUnion (boolean): If True, use sum of number of\r\n        items as union\r\n\r\n    Output:\r\n        (float) The jaccard similarity between the two sets.\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; setA = {&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;}\r\n    &gt;&gt;&gt; setB = {&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;h&#x27;, &#x27;i&#x27;}\r\n    &gt;&gt;&gt; jaccard_similariy(setA,setB)\r\n    0.375\r\n\r\n    &gt;&gt;&gt; jaccard_similariy(setA,setA)\r\n    1.0\r\n\r\n    &gt;&gt;&gt; jaccard_similariy(setA,setA,True)\r\n    0.5\r\n\r\n    &gt;&gt;&gt; setA = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]\r\n    &gt;&gt;&gt; setB = (&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;h&#x27;, &#x27;i&#x27;)\r\n    &gt;&gt;&gt; jaccard_similariy(setA,setB)\r\n    0.375\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(setA, <span class=\"hljs-built_in\">set</span>) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(setB, <span class=\"hljs-built_in\">set</span>):\r\n\r\n        intersection = <span class=\"hljs-built_in\">len</span>(setA.intersection(setB))\r\n\r\n        <span class=\"hljs-keyword\">if</span> alternativeUnion:\r\n            union = <span class=\"hljs-built_in\">len</span>(setA) + <span class=\"hljs-built_in\">len</span>(setB)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            union = <span class=\"hljs-built_in\">len</span>(setA.union(setB))\r\n\r\n        <span class=\"hljs-keyword\">return</span> intersection / union\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(setA, (<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">tuple</span>)) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(setB, (<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">tuple</span>)):\r\n\r\n        intersection = [element <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> setA <span class=\"hljs-keyword\">if</span> element <span class=\"hljs-keyword\">in</span> setB]\r\n\r\n        <span class=\"hljs-keyword\">if</span> alternativeUnion:\r\n            union = <span class=\"hljs-built_in\">len</span>(setA) + <span class=\"hljs-built_in\">len</span>(setB)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            union = setA + [element <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> setB <span class=\"hljs-keyword\">if</span> element <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> setA]\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(intersection) / <span class=\"hljs-built_in\">len</span>(union)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n\r\n    setA = {<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>}\r\n    setB = {<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-string\">&quot;h&quot;</span>, <span class=\"hljs-string\">&quot;i&quot;</span>}\r\n    <span class=\"hljs-built_in\">print</span>(jaccard_similariy(setA, setB))\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\maths\\jaccard_similarity.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\maths\\jaccard_similarity.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">p</span> = <span class=\"hljs-title\">jaccard_similarity</span><span class=\"hljs-params\">(A,B)</span></span>\r\n<span class=\"hljs-comment\">%% jaccard similarity</span>\r\n<span class=\"hljs-comment\">% This function calculates jaccard similarity index of inputs arrays A and</span>\r\n<span class=\"hljs-comment\">% B. The formula to find the Index is (number of entries in both sets) / (number of entries in either set) * 100</span>\r\n<span class=\"hljs-comment\">% The higher the percentage, the more similar the two arrays. </span>\r\n<span class=\"hljs-comment\">% For this, each of input arrays is modified by removing its same entries</span>\r\n<span class=\"hljs-comment\">% (except on them), then number of common entries between two new arrays is</span>\r\n<span class=\"hljs-comment\">% calculated by comparing them. </span>\r\n\r\nmodified_A = unique(A);\r\nmodified_B = unique(B);\r\n\r\nlength_mA = <span class=\"hljs-built_in\">length</span>(modified_A);\r\nlength_mB = <span class=\"hljs-built_in\">length</span>(modified_B);\r\ncommon_number = <span class=\"hljs-number\">0</span>;                    <span class=\"hljs-comment\">%initialize the number of common entries </span>\r\n\r\n<span class=\"hljs-keyword\">if</span> length_mA &lt;= length_mB\r\n    X = modified_A;\r\n    Y = modified_B;\r\n<span class=\"hljs-keyword\">else</span>\r\n    X = modified_B;\r\n    Y = modified_A;\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(X)\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(Y)\r\n        <span class=\"hljs-keyword\">if</span> X(<span class=\"hljs-built_in\">i</span>) == Y(<span class=\"hljs-built_in\">j</span>)\r\n           common_number = common_number + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\ntotal_number = length_mA + length_mB - common_number;\r\np = (common_number/total_number)*<span class=\"hljs-number\">100</span>;\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Kaushik Amar Das",
      "email": "cozek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Atousa K",
      "email": "missa.k213@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}