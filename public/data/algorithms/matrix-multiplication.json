{
  "slug": "matrix-multiplication",
  "name": "Matrix Multiplication",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths\\MatrixMultiplication.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\MatrixMultiplication.js",
      "code": "<span class=\"hljs-comment\">// Wikipedia URL for General Matrix Multiplication Concepts: https://en.wikipedia.org/wiki/Matrix_multiplication</span>\r\n\r\n<span class=\"hljs-comment\">// This algorithm has multiple functions that ultimately check if the inputs are actually matrices and if two Matrices (that can be different sizes) can be multiplied together.</span>\r\n<span class=\"hljs-comment\">// matrices that are of the same size [2x2]x[2x2], and the second is the multiplication of two matrices that are not the same size [2x3]x[3x2].</span>\r\n\r\n<span class=\"hljs-comment\">// MatrixCheck tests to see if all of the rows of the matrix inputted have similar size columns</span>\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">matrixCheck</span> = (<span class=\"hljs-params\">matrix</span>) =&gt; {\r\n  <span class=\"hljs-keyword\">let</span> columnNumb\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>; index &lt; matrix.<span class=\"hljs-property\">length</span>; index++) {\r\n    <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-number\">0</span>) {\r\n      columnNumb = matrix[index].<span class=\"hljs-property\">length</span>\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (matrix[index].<span class=\"hljs-property\">length</span> !== columnNumb) {\r\n      <span class=\"hljs-comment\">// The columns in this array are not equal</span>\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-keyword\">return</span> columnNumb\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">// tests to see if the matrices have a like side, i.e. the row length on the first matrix matches the column length on the second matrix, or vice versa.</span>\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">twoMatricesCheck</span> = (<span class=\"hljs-params\">first, second</span>) =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> [firstRowLength, secondRowLength, firstColLength, secondColLength] = [first.<span class=\"hljs-property\">length</span>, second.<span class=\"hljs-property\">length</span>, <span class=\"hljs-title function_\">matrixCheck</span>(first), <span class=\"hljs-title function_\">matrixCheck</span>(second)]\r\n  <span class=\"hljs-keyword\">if</span> (firstRowLength !== secondColLength || secondRowLength !== firstColLength) {\r\n    <span class=\"hljs-comment\">// These matrices do not have a common side</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\r\n  } <span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">// returns an empty array that has the same number of rows as the left matrix being multiplied.</span>\r\n<span class=\"hljs-comment\">// Uses Array.prototype.map() to loop over the first (or left) matrix and returns an empty array on each iteration.</span>\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">initiateEmptyArray</span> = (<span class=\"hljs-params\">first, second</span>) =&gt; {\r\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">twoMatricesCheck</span>(first, second)) {\r\n    <span class=\"hljs-keyword\">const</span> emptyArray = first.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&#x27;&#x27;</span>]\r\n    })\r\n    <span class=\"hljs-keyword\">return</span> emptyArray\r\n  } <span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Finally, `matrixMult` uses `Array.prototype.push()`, multiple layers of nested `for` loops, the addition assignment `+=` operator and multiplication operator `*` to perform the dot product between two matrices of differing sizes.</span>\r\n<span class=\"hljs-comment\">// Dot product, takes the row of the first matrix and multiplies it by the column of the second matrix, the `twoMatricesCheck` tested to see if they were the same size already.</span>\r\n<span class=\"hljs-comment\">// The dot product for each iteration is then saved to its respective index into `multMatrix`.</span>\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">matrixMult</span> = (<span class=\"hljs-params\">firstArray, secondArray</span>) =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> multMatrix = <span class=\"hljs-title function_\">initiateEmptyArray</span>(firstArray, secondArray)\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> rm = <span class=\"hljs-number\">0</span>; rm &lt; firstArray.<span class=\"hljs-property\">length</span>; rm++) {\r\n    <span class=\"hljs-keyword\">const</span> rowMult = []\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> col = <span class=\"hljs-number\">0</span>; col &lt; firstArray[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>; col++) {\r\n      rowMult.<span class=\"hljs-title function_\">push</span>(firstArray[rm][col])\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> cm = <span class=\"hljs-number\">0</span>; cm &lt; firstArray.<span class=\"hljs-property\">length</span>; cm++) {\r\n      <span class=\"hljs-keyword\">const</span> colMult = []\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> row = <span class=\"hljs-number\">0</span>; row &lt; secondArray.<span class=\"hljs-property\">length</span>; row++) {\r\n        colMult.<span class=\"hljs-title function_\">push</span>(secondArray[row][cm])\r\n      }\r\n      <span class=\"hljs-keyword\">let</span> newNumb = <span class=\"hljs-number\">0</span>\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>; index &lt; rowMult.<span class=\"hljs-property\">length</span>; index++) {\r\n        newNumb += rowMult[index] * colMult[index]\r\n      }\r\n      multMatrix[rm][cm] = newNumb\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> multMatrix\r\n}\r\n\r\n<span class=\"hljs-comment\">// const firstMatrix = [</span>\r\n<span class=\"hljs-comment\">//   [1, 2],</span>\r\n<span class=\"hljs-comment\">//   [3, 4]</span>\r\n<span class=\"hljs-comment\">// ]</span>\r\n\r\n<span class=\"hljs-comment\">// const secondMatrix = [</span>\r\n<span class=\"hljs-comment\">//   [5, 6],</span>\r\n<span class=\"hljs-comment\">//   [7, 8]</span>\r\n<span class=\"hljs-comment\">// ]</span>\r\n\r\n<span class=\"hljs-comment\">// matrixMult(firstMatrix, secondMatrix) // [ [ 19, 22 ], [ 43, 50 ] ]</span>\r\n\r\n<span class=\"hljs-comment\">// const thirdMatrix = [</span>\r\n<span class=\"hljs-comment\">//   [-1, 4, 1],</span>\r\n<span class=\"hljs-comment\">//   [7, -6, 2]</span>\r\n<span class=\"hljs-comment\">// ]</span>\r\n<span class=\"hljs-comment\">// const fourthMatrix = [</span>\r\n<span class=\"hljs-comment\">//   [2, -2],</span>\r\n<span class=\"hljs-comment\">//   [5, 3],</span>\r\n<span class=\"hljs-comment\">//   [3, 2]</span>\r\n<span class=\"hljs-comment\">// ]</span>\r\n\r\n<span class=\"hljs-comment\">// matrixMult(thirdMatrix, fourthMatrix) // [ [ 21, 16 ], [ -10, -28 ] ]</span>\r\n"
    },
    "go": {
      "dir": "dynamic\\matrixmultiplication.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamic\\matrixmultiplication.go",
      "code": "<span class=\"hljs-comment\">// matrix chain multiplication problem</span>\r\n<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Matrix_chain_multiplication</span>\r\n<span class=\"hljs-comment\">// www.geeksforgeeks.org/dynamic_programming-set-8-matrix-chain-multiplication/</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> dynamic\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/min&quot;</span>\r\n\r\n<span class=\"hljs-comment\">// MatrixChainRec function</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MatrixChainRec</span><span class=\"hljs-params\">(D []<span class=\"hljs-type\">int</span>, i, j <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-comment\">// d[i-1] x d[i] : dimension of matrix i</span>\r\n\t<span class=\"hljs-keyword\">if</span> i == j {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n\t}\r\n\tq := <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">32</span>\r\n\t<span class=\"hljs-keyword\">for</span> k := i; k &lt; j; k++ {\r\n\t\tprod := MatrixChainRec(D, i, k) + MatrixChainRec(D, k+<span class=\"hljs-number\">1</span>, j) + D[i<span class=\"hljs-number\">-1</span>]*D[k]*D[j]\r\n\t\tq = min.Int(prod, q)\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> q\r\n}\r\n\r\n<span class=\"hljs-comment\">// MatrixChainDp function</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MatrixChainDp</span><span class=\"hljs-params\">(D []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-comment\">// d[i-1] x d[i] : dimension of matrix i</span>\r\n\tN := <span class=\"hljs-built_in\">len</span>(D)\r\n\r\n\tdp := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, N) <span class=\"hljs-comment\">// dp[i][j] = matrixChainRec(D, i, j)</span>\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; N; i++ {\r\n\t\tdp[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, N)\r\n\t\tdp[i][i] = <span class=\"hljs-number\">0</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">for</span> l := <span class=\"hljs-number\">2</span>; l &lt; N; l++ {\r\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; N-l+<span class=\"hljs-number\">1</span>; i++ {\r\n\t\t\tj := i + l - <span class=\"hljs-number\">1</span>\r\n\t\t\tdp[i][j] = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">31</span>\r\n\t\t\t<span class=\"hljs-keyword\">for</span> k := i; k &lt; j; k++ {\r\n\t\t\t\tprod := dp[i][k] + dp[k+<span class=\"hljs-number\">1</span>][j] + D[i<span class=\"hljs-number\">-1</span>]*D[k]*D[j]\r\n\t\t\t\tdp[i][j] = min.Int(prod, dp[i][j])\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">1</span>][N<span class=\"hljs-number\">-1</span>]\r\n}\r\n\r\n<span class=\"hljs-comment\">/*\r\nfunc main() {\r\n\tD := []int{2, 2, 2, 2, 2} // 4 matrices\r\n\tfmt.Print(matrixChainRec(D, 1, 4), &quot;\\n&quot;)\r\n\tfmt.Print(matrixChainDp(D), &quot;\\n&quot;)\r\n}\r\n*/</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Michele Caci",
      "email": "michele.caci@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Himanshu Shekhar",
      "email": "himanshushekharb16@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Pete Looney",
      "email": "petelooney81@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}