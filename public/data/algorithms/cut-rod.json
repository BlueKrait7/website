{
  "slug": "cut-rod",
  "name": "Cut Rod",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming\\cut_rod.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\cut_rod.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of cutting a rod problem\r\n *\r\n * @details\r\n * Given a rod of length n inches and an array of prices that\r\n * contains prices of all pieces of size&lt;=n. Determine\r\n * the maximum profit obtainable by cutting up the rod and selling\r\n * the pieces.\r\n *\r\n * ### Algorithm\r\n * The idea is to break the given rod into every smaller piece as possible\r\n * and then check profit for each piece, by calculating maximum profit for\r\n * smaller pieces we will build the solution for larger pieces in bottom-up\r\n * manner.\r\n *\r\n * @author [Anmol](https://github.com/Anmol3299)\r\n * @author [Pardeep](https://github.com/Pardeep009)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-comment\">/**\r\n * @namespace dynamic_programming\r\n * @brief Dynamic Programming algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace cut_rod\r\n * @brief Implementation of cutting a rod problem\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> cut_rod {\r\n<span class=\"hljs-comment\">/**\r\n * @brief Cuts the rod in different pieces and\r\n * stores the maximum profit for each piece of the rod.\r\n * @tparam T size of the price array\r\n * @param n size of the rod in inches\r\n * @param price an array of prices that contains prices of all pieces of size&lt;=n\r\n * @return maximum profit obtainable for @param n inch rod.\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxProfitByCuttingRod</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::array&lt;<span class=\"hljs-type\">int</span>, T&gt; &amp;price, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;n)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> *profit =\r\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[n + <span class=\"hljs-number\">1</span>];  <span class=\"hljs-comment\">// profit[i] will hold maximum profit for i inch rod</span>\r\n\r\n    profit[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// if length of rod is zero, then no profit</span>\r\n\r\n    <span class=\"hljs-comment\">// outer loop will select size of rod, starting from 1 inch to n inch rod.</span>\r\n    <span class=\"hljs-comment\">// inner loop will evaluate the maximum profit we can get for i inch rod by</span>\r\n    <span class=\"hljs-comment\">// making every possible cut on it and will store it in profit[i].</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i++) {\r\n        <span class=\"hljs-type\">int</span> q = INT_MIN;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> j = <span class=\"hljs-number\">1</span>; j &lt;= i; j++) {\r\n            q = std::<span class=\"hljs-built_in\">max</span>(q, price[j - <span class=\"hljs-number\">1</span>] + profit[i - j]);\r\n        }\r\n        profit[i] = q;\r\n    }\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int16_t</span> ans = profit[n];\r\n    <span class=\"hljs-keyword\">delete</span>[] profit;\r\n    <span class=\"hljs-keyword\">return</span> ans;  <span class=\"hljs-comment\">// returning maximum profit</span>\r\n}\r\n}  <span class=\"hljs-comment\">// namespace cut_rod</span>\r\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function to test above algorithm\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Test 1</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int16_t</span> n1 = <span class=\"hljs-number\">8</span>;                                        <span class=\"hljs-comment\">// size of rod</span>\r\n    std::array&lt;<span class=\"hljs-type\">int32_t</span>, n1&gt; price1 = {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">45</span>,<span class=\"hljs-number\">21</span>,<span class=\"hljs-number\">9</span>};  <span class=\"hljs-comment\">// price array</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int64_t</span> max_profit1 =\r\n        dynamic_programming::cut_rod::<span class=\"hljs-built_in\">maxProfitByCuttingRod</span>(price1, n1);\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int64_t</span> expected_max_profit1 = <span class=\"hljs-number\">47</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(max_profit1 == expected_max_profit1);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Maximum profit with &quot;</span> &lt;&lt; n1 &lt;&lt; <span class=\"hljs-string\">&quot; inch road is &quot;</span> &lt;&lt; max_profit1\r\n              &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// Test 2</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int16_t</span> n2 = <span class=\"hljs-number\">30</span>;  <span class=\"hljs-comment\">// size of rod</span>\r\n    std::array&lt;<span class=\"hljs-type\">int32_t</span>, n2&gt; price2 = {\r\n        <span class=\"hljs-number\">1</span>,  <span class=\"hljs-number\">5</span>,  <span class=\"hljs-number\">8</span>,  <span class=\"hljs-number\">9</span>,  <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">30</span>,  <span class=\"hljs-comment\">// price array</span>\r\n        <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">38</span>, <span class=\"hljs-number\">39</span>, <span class=\"hljs-number\">40</span>,\r\n        <span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">46</span>, <span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">50</span>};\r\n\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int64_t</span> max_profit2=\r\n        dynamic_programming::cut_rod::<span class=\"hljs-built_in\">maxProfitByCuttingRod</span>(price2, n2);\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int32_t</span> expected_max_profit2 = <span class=\"hljs-number\">90</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(max_profit2 == expected_max_profit2);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Maximum profit with &quot;</span> &lt;&lt; n2 &lt;&lt; <span class=\"hljs-string\">&quot; inch road is &quot;</span> &lt;&lt; max_profit2\r\n              &lt;&lt; std::endl;\r\n     <span class=\"hljs-comment\">// Test 3</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int16_t</span> n3 = <span class=\"hljs-number\">5</span>;                                        <span class=\"hljs-comment\">// size of rod</span>\r\n    std::array&lt;<span class=\"hljs-type\">int32_t</span>, n3&gt; price3 = {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">17</span>,<span class=\"hljs-number\">23</span>,<span class=\"hljs-number\">45</span>};  <span class=\"hljs-comment\">// price array</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int64_t</span> max_profit3 =\r\n        dynamic_programming::cut_rod::<span class=\"hljs-built_in\">maxProfitByCuttingRod</span>(price3, n3);\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int64_t</span> expected_max_profit3 = <span class=\"hljs-number\">45</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(max_profit3 == expected_max_profit3);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Maximum profit with &quot;</span> &lt;&lt; n3 &lt;&lt; <span class=\"hljs-string\">&quot; inch road is &quot;</span> &lt;&lt; max_profit3\r\n              &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Testing</span>\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Pardeep Bhatt",
      "email": "pardeepbhatt5254@gmail.com",
      "commits": 1
    },
    {
      "name": "pkdism",
      "email": "pawan.dwivedi94@gmail.com",
      "commits": 1
    },
    {
      "name": "ABHISHEK-821005",
      "email": "69668943+ABHISHEK-821005@users.noreply.github.com",
      "commits": 12
    }
  ],
  "explanationUrl": {}
}