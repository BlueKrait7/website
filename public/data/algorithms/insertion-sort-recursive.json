{
  "slug": "insertion-sort-recursive",
  "name": "Insertion Sort Recursive",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "sorting\\insertion_sort_recursive.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\insertion_sort_recursive.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Insertion sort](https://en.wikipedia.org/wiki/Insertion_sort)\r\n * algorithm implementation.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @addtogroup sorting Sorting algorithms\r\n * @{\r\n */</span>\r\n<span class=\"hljs-comment\">/**\r\n * Insertion sort algorithm implements using Recursion \r\n * @param arr array to be sorted\r\n * @param size size of array\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">RecursionInsertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span>(size &lt;= <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    \r\n    <span class=\"hljs-comment\">// marking recursive call to reach starting element</span>\r\n    RecursionInsertionSort(arr,size<span class=\"hljs-number\">-1</span>);\r\n    \r\n    <span class=\"hljs-type\">int</span> key = arr[size<span class=\"hljs-number\">-1</span>];\r\n    <span class=\"hljs-type\">int</span> j = size<span class=\"hljs-number\">-2</span>;\r\n    <span class=\"hljs-comment\">// swapping logic for insertion sort</span>\r\n    <span class=\"hljs-keyword\">while</span>(j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; arr[j] &gt; key)\r\n    {\r\n        arr[j+<span class=\"hljs-number\">1</span>] = arr[j];\r\n        j--;\r\n    }\r\n    arr[j+<span class=\"hljs-number\">1</span>] = key;\r\n}\r\n<span class=\"hljs-comment\">/** @} */</span>\r\n<span class=\"hljs-comment\">/** Test function\r\n  * @returns None\r\n  */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> size = rand() % <span class=\"hljs-number\">500</span>; <span class=\"hljs-comment\">/* random array size */</span>\r\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n\r\n    <span class=\"hljs-comment\">/* generate size random numbers from -50 to 49 */</span>  \r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\r\n    {\r\n        arr[i] = (rand() % <span class=\"hljs-number\">100</span>) - <span class=\"hljs-number\">50</span>;<span class=\"hljs-comment\">/* signed random numbers */</span>\r\n    }\r\n    RecursionInsertionSort(arr, size);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size  ; ++i)\r\n    {\r\n        assert(arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>]);\r\n    }\r\n    <span class=\"hljs-built_in\">free</span>(arr);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function\r\n *  @returns integer 0\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\r\n{\r\n    <span class=\"hljs-comment\">/* Intializes random number generator */</span>\r\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\r\n    test();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}