{
  "slug": "cycle-sort",
  "name": "Cycle Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\cycle_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\cycle_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nCode contributed by Honey Sharma\r\nSource: https://en.wikipedia.org/wiki/Cycle_sort\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cycle_sort</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; cycle_sort([4, 3, 2, 1])\r\n    [1, 2, 3, 4]\r\n\r\n    &gt;&gt;&gt; cycle_sort([-4, 20, 0, -50, 100, -1])\r\n    [-50, -4, -1, 0, 20, 100]\r\n\r\n    &gt;&gt;&gt; cycle_sort([-.1, -.2, 1.3, -.8])\r\n    [-0.8, -0.2, -0.1, 1.3]\r\n\r\n    &gt;&gt;&gt; cycle_sort([])\r\n    []\r\n    &quot;&quot;&quot;</span>\r\n    array_len = <span class=\"hljs-built_in\">len</span>(array)\r\n    <span class=\"hljs-keyword\">for</span> cycle_start <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, array_len - <span class=\"hljs-number\">1</span>):\r\n        item = array[cycle_start]\r\n\r\n        pos = cycle_start\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(cycle_start + <span class=\"hljs-number\">1</span>, array_len):\r\n            <span class=\"hljs-keyword\">if</span> array[i] &lt; item:\r\n                pos += <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> pos == cycle_start:\r\n            <span class=\"hljs-keyword\">continue</span>\r\n\r\n        <span class=\"hljs-keyword\">while</span> item == array[pos]:\r\n            pos += <span class=\"hljs-number\">1</span>\r\n\r\n        array[pos], item = item, array[pos]\r\n        <span class=\"hljs-keyword\">while</span> pos != cycle_start:\r\n            pos = cycle_start\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(cycle_start + <span class=\"hljs-number\">1</span>, array_len):\r\n                <span class=\"hljs-keyword\">if</span> array[i] &lt; item:\r\n                    pos += <span class=\"hljs-number\">1</span>\r\n\r\n            <span class=\"hljs-keyword\">while</span> item == array[pos]:\r\n                pos += <span class=\"hljs-number\">1</span>\r\n\r\n            array[pos], item = item, array[pos]\r\n\r\n    <span class=\"hljs-keyword\">return</span> array\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">assert</span> cycle_sort([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]) == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\r\n    <span class=\"hljs-keyword\">assert</span> cycle_sort([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">2</span>]) == [-<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>]\r\n"
    },
    "javascript": {
      "dir": "Sorts\\test\\CycleSort.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\test\\CycleSort.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { cycleSort } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../CycleSort&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;cycleSort function&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that is sorted backwards&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>(array)).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that is unsorted&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2224</span>, <span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>(array)).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">2224</span>])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Variations of input array lengths&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return an empty list with the input list is an empty list&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([])).<span class=\"hljs-title function_\">toEqual</span>([])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list of length 1&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([<span class=\"hljs-number\">100</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">100</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list of an odd length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([<span class=\"hljs-number\">101</span>, -<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">321</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-number\">321</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list of an even length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">56</span>])\r\n    })\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Variations of input array elements&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only positive numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">50</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only negative numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">21</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">35</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">35</span>, -<span class=\"hljs-number\">21</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only a mix of positive and negative numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([-<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">56</span>, -<span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">45</span>, -<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">56</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only whole numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">15</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only decimal numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.42</span>, <span class=\"hljs-number\">2.56</span>, <span class=\"hljs-number\">33.45</span>, <span class=\"hljs-number\">13.12</span>, <span class=\"hljs-number\">2.3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.42</span>, <span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">2.56</span>, <span class=\"hljs-number\">13.12</span>, <span class=\"hljs-number\">33.45</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only a mix of whole and decimal&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([<span class=\"hljs-number\">32.40</span>, <span class=\"hljs-number\">12.42</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">12.42</span>, <span class=\"hljs-number\">32.40</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">56</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only fractional numbers&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([<span class=\"hljs-number\">0.98</span>, <span class=\"hljs-number\">0.4259</span>, <span class=\"hljs-number\">0.56</span>, -<span class=\"hljs-number\">0.456</span>, -<span class=\"hljs-number\">0.12</span>, <span class=\"hljs-number\">0.322</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">0.456</span>, -<span class=\"hljs-number\">0.12</span>, <span class=\"hljs-number\">0.322</span>, <span class=\"hljs-number\">0.4259</span>, <span class=\"hljs-number\">0.56</span>, <span class=\"hljs-number\">0.98</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains only a mix of whole, decimal, and fractional&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([-<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">0.222</span>, <span class=\"hljs-number\">5.6</span>, -<span class=\"hljs-number\">4.5</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0.333</span>])).<span class=\"hljs-title function_\">toEqual</span>([-<span class=\"hljs-number\">40</span>, -<span class=\"hljs-number\">4.5</span>, -<span class=\"hljs-number\">0.222</span>, <span class=\"hljs-number\">0.333</span>, <span class=\"hljs-number\">5.6</span>, <span class=\"hljs-number\">12</span>])\r\n    })\r\n\r\n    <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should correctly sort an input list that contains duplicates&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">cycleSort</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>])\r\n    })\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\cycle_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\cycle_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [Cycle\r\n * sort](https://en.wikipedia.org/wiki/Cycle_sort) algorithm\r\n * @details\r\n * Cycle Sort is a sorting algorithm that works in \\f$O(n^2)\\f$ time in the best\r\n * case and works in \\f$O(n^2)\\f$ in worst case. If a element is already at its\r\n * correct  position, do nothing. If a element is not at its correct position,\r\n * we then need to move it to its correct position by computing the correct\r\n * positions.Therefore, we should make sure the duplicate elements.\r\n * @author [TsungHan Ho](https://github.com/dalaoqi)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::is_sorted, std::swap</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for io operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace sorting\r\n * @brief Sorting algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> sorting {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace cycle_sort\r\n * @brief Functions for [Cycle sort](https://en.wikipedia.org/wiki/Cycle_sort)\r\n * algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> cycle_sort {\r\n<span class=\"hljs-comment\">/**\r\n * @brief The main function implements cycleSort\r\n * @tparam T type of array\r\n * @param in_arr array to be sorted\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">cycleSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;T&gt; &amp;in_arr)</span> </span>{\r\n    <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">arr</span><span class=\"hljs-params\">(in_arr)</span></span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> cycle_start = <span class=\"hljs-number\">0</span>; cycle_start &lt;= arr.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; cycle_start++) {\r\n        <span class=\"hljs-comment\">// initialize item</span>\r\n        T item = arr[cycle_start];\r\n\r\n        <span class=\"hljs-comment\">// Count the number of elements smaller than item, this  number is the</span>\r\n        <span class=\"hljs-comment\">// correct index of item.</span>\r\n        <span class=\"hljs-type\">int</span> pos = cycle_start;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = cycle_start + <span class=\"hljs-number\">1</span>; i &lt; arr.<span class=\"hljs-built_in\">size</span>(); i++) {\r\n            <span class=\"hljs-keyword\">if</span> (arr[i] &lt; item) {\r\n                pos++;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// item is already in correct position</span>\r\n        <span class=\"hljs-keyword\">if</span> (pos == cycle_start) {\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// duplicate  elements</span>\r\n        <span class=\"hljs-keyword\">while</span> (item == arr[pos]) pos += <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">if</span> (pos == cycle_start) {\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            std::<span class=\"hljs-built_in\">swap</span>(item, arr[pos]);\r\n        }\r\n        <span class=\"hljs-comment\">// Rest of the  elements</span>\r\n        <span class=\"hljs-keyword\">while</span> (pos != cycle_start) {\r\n            pos = cycle_start;\r\n            <span class=\"hljs-comment\">// Find position where we put the element</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = cycle_start + <span class=\"hljs-number\">1</span>; i &lt; arr.<span class=\"hljs-built_in\">size</span>(); i++) {\r\n                <span class=\"hljs-keyword\">if</span> (arr[i] &lt; item) {\r\n                    pos += <span class=\"hljs-number\">1</span>;\r\n                }\r\n            }\r\n            <span class=\"hljs-comment\">// duplicate  elements</span>\r\n            <span class=\"hljs-keyword\">while</span> (item == arr[pos]) pos += <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">if</span> (item == arr[pos]) {\r\n                <span class=\"hljs-keyword\">continue</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                std::<span class=\"hljs-built_in\">swap</span>(item, arr[pos]);\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> arr;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace cycle_sort</span>\r\n}  <span class=\"hljs-comment\">// namespace sorting</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Test 1</span>\r\n    <span class=\"hljs-comment\">// [4, 3, 2, 1] return [1, 2, 3, 4]</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array1 = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>};\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1... &quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; arr1 = sorting::cycle_sort::<span class=\"hljs-built_in\">cycleSort</span>(array1);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr1), std::<span class=\"hljs-built_in\">end</span>(arr1)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// [4.3, -6.5, -7.4, 0, 2.7, 1.8] return [-7.4, -6.5, 0, 1.8, 2.7, 4.3]</span>\r\n    std::vector&lt;<span class=\"hljs-type\">double</span>&gt; array2 = {<span class=\"hljs-number\">4.3</span>, <span class=\"hljs-number\">-6.5</span>, <span class=\"hljs-number\">-7.4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2.7</span>, <span class=\"hljs-number\">1.8</span>};\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2... &quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">double</span>&gt; arr2 = sorting::cycle_sort::<span class=\"hljs-built_in\">cycleSort</span>(array2);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr2), std::<span class=\"hljs-built_in\">end</span>(arr2)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// Test 3</span>\r\n    <span class=\"hljs-comment\">// [3, 3, 3, 3] return [3, 3, 3, 3]</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array3 = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>};\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3... &quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; arr3 = sorting::cycle_sort::<span class=\"hljs-built_in\">cycleSort</span>(array3);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr3), std::<span class=\"hljs-built_in\">end</span>(arr3)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// [9, 4, 6, 8, 14, 3] return [9, 4, 6, 8, 14, 3]</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array4 = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">14</span>};\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4... &quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; arr4 = sorting::cycle_sort::<span class=\"hljs-built_in\">cycleSort</span>(array4);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr4), std::<span class=\"hljs-built_in\">end</span>(arr4)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the test</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\CycleSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\CycleSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.less;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.print;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CycleSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] arr) {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> arr.length;\r\n\r\n        <span class=\"hljs-comment\">// traverse array elements</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt;= n - <span class=\"hljs-number\">2</span>; j++) {\r\n            <span class=\"hljs-comment\">// initialize item as starting point</span>\r\n            <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">item</span> <span class=\"hljs-operator\">=</span> arr[j];\r\n\r\n            <span class=\"hljs-comment\">// Find position where we put the item.</span>\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pos</span> <span class=\"hljs-operator\">=</span> j;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> j + <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\r\n                <span class=\"hljs-keyword\">if</span> (less(arr[i], item)) {\r\n                    pos++;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// If item is already in correct position</span>\r\n            <span class=\"hljs-keyword\">if</span> (pos == j) {\r\n                <span class=\"hljs-keyword\">continue</span>;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// ignore all duplicate elements</span>\r\n            <span class=\"hljs-keyword\">while</span> (item.compareTo(arr[pos]) == <span class=\"hljs-number\">0</span>) {\r\n                pos += <span class=\"hljs-number\">1</span>;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// put the item to it&#x27;s right position</span>\r\n            <span class=\"hljs-keyword\">if</span> (pos != j) {\r\n                item = replace(arr, pos, item);\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// Rotate rest of the cycle</span>\r\n            <span class=\"hljs-keyword\">while</span> (pos != j) {\r\n                pos = j;\r\n\r\n                <span class=\"hljs-comment\">// Find position where we put the element</span>\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> j + <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\r\n                    <span class=\"hljs-keyword\">if</span> (less(arr[i], item)) {\r\n                        pos += <span class=\"hljs-number\">1</span>;\r\n                    }\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// ignore all duplicate elements</span>\r\n                <span class=\"hljs-keyword\">while</span> (item.compareTo(arr[pos]) == <span class=\"hljs-number\">0</span>) {\r\n                    pos += <span class=\"hljs-number\">1</span>;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// put the item to it&#x27;s right position</span>\r\n                <span class=\"hljs-keyword\">if</span> (item != arr[pos]) {\r\n                    item = replace(arr, pos, item);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> arr;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T <span class=\"hljs-title function_\">replace</span><span class=\"hljs-params\">(T[] arr, <span class=\"hljs-type\">int</span> pos, T item)</span> {\r\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> item;\r\n        item = arr[pos];\r\n        arr[pos] = temp;\r\n        <span class=\"hljs-keyword\">return</span> item;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        Integer arr[] = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\r\n        <span class=\"hljs-type\">CycleSort</span> <span class=\"hljs-variable\">cycleSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CycleSort</span>();\r\n        cycleSort.sort(arr);\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;After sort : &quot;</span>);\r\n        print(arr);\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\cycle_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\cycle_sort.c",
      "code": "<span class=\"hljs-comment\">// Sorting of array list using cycle sort</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">// Displays the array, passed to this method</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">// Swap function to swap two values</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *first, <span class=\"hljs-type\">int</span> *second)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> temp = *first;\r\n    *first = *second;\r\n    *second = temp;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Function sort the array using Cycle sort</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">cycleSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-comment\">// count number of memory writes</span>\r\n    <span class=\"hljs-type\">int</span> writes = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// traverse array elements and put it to on</span>\r\n    <span class=\"hljs-comment\">// the right place</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> cycle_start = <span class=\"hljs-number\">0</span>; cycle_start &lt;= n - <span class=\"hljs-number\">2</span>; cycle_start++)\r\n    {\r\n        <span class=\"hljs-comment\">// initialize item as starting point</span>\r\n        <span class=\"hljs-type\">int</span> item = arr[cycle_start];\r\n\r\n        <span class=\"hljs-comment\">// Find position where we put the item. We basically</span>\r\n        <span class=\"hljs-comment\">// count all smaller elements on right side of item.</span>\r\n        <span class=\"hljs-type\">int</span> pos = cycle_start;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = cycle_start + <span class=\"hljs-number\">1</span>; i &lt; n; i++)\r\n            <span class=\"hljs-keyword\">if</span> (arr[i] &lt; item)\r\n                pos++;\r\n\r\n        <span class=\"hljs-comment\">// If item is already in correct position</span>\r\n        <span class=\"hljs-keyword\">if</span> (pos == cycle_start)\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n\r\n        <span class=\"hljs-comment\">// ignore all duplicate elements</span>\r\n        <span class=\"hljs-keyword\">while</span> (item == arr[pos]) pos += <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-comment\">// put the item to it&#x27;s right position</span>\r\n        <span class=\"hljs-keyword\">if</span> (pos != cycle_start)\r\n        {\r\n            swap(&amp;item, &amp;arr[pos]);\r\n            writes++;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Rotate rest of the cycle</span>\r\n        <span class=\"hljs-keyword\">while</span> (pos != cycle_start)\r\n        {\r\n            pos = cycle_start;\r\n\r\n            <span class=\"hljs-comment\">// Find position where we put the element</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = cycle_start + <span class=\"hljs-number\">1</span>; i &lt; n; i++)\r\n                <span class=\"hljs-keyword\">if</span> (arr[i] &lt; item)\r\n                    pos += <span class=\"hljs-number\">1</span>;\r\n\r\n            <span class=\"hljs-comment\">// ignore all duplicate elements</span>\r\n            <span class=\"hljs-keyword\">while</span> (item == arr[pos]) pos += <span class=\"hljs-number\">1</span>;\r\n\r\n            <span class=\"hljs-comment\">// put the item to it&#x27;s right position</span>\r\n            <span class=\"hljs-keyword\">if</span> (item != arr[pos])\r\n            {\r\n                swap(&amp;item, &amp;arr[pos]);\r\n                writes++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Driver program to test above function</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> n;  <span class=\"hljs-comment\">// Size of array elements</span>\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter size of array:\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);  <span class=\"hljs-comment\">// E.g. 8</span>\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the elements of the array\\n&quot;</span>);\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Original array: &quot;</span>);\r\n    display(arr, n);\r\n\r\n    cycleSort(arr, n);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\r\n    display(arr, n);\r\n\r\n    <span class=\"hljs-built_in\">free</span>(arr);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Sort\\Cycle_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Sort\\Cycle_Sort.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\r\n\r\n<span class=\"hljs-keyword\">module</span> CycleSort <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-keyword\">let</span> Sort list<span class=\"hljs-operator\">:</span> <span class=\"hljs-symbol\">&#x27;T</span> [] <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> list <span class=\"hljs-operator\">=</span> list <span class=\"hljs-operator\">|&gt;</span> Array.copy\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> writes <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> list.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> value <span class=\"hljs-operator\">=</span> list.[index]\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> pos <span class=\"hljs-operator\">=</span> index\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> index <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> list.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n                <span class=\"hljs-keyword\">if</span> list.[i] <span class=\"hljs-operator\">&lt;</span> value <span class=\"hljs-keyword\">then</span> pos <span class=\"hljs-operator\">&lt;-</span> pos <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">if</span> pos <span class=\"hljs-operator\">&lt;&gt;</span> index <span class=\"hljs-keyword\">then</span>\r\n                <span class=\"hljs-keyword\">while</span> value <span class=\"hljs-operator\">=</span> list.[pos] <span class=\"hljs-keyword\">do</span>\r\n                    pos <span class=\"hljs-operator\">&lt;-</span> pos <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> tmp <span class=\"hljs-operator\">=</span> list.[pos]\r\n                list.[pos] <span class=\"hljs-operator\">&lt;-</span> value\r\n                value <span class=\"hljs-operator\">&lt;-</span> tmp\r\n                writes <span class=\"hljs-operator\">&lt;-</span> writes <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">while</span> pos <span class=\"hljs-operator\">&lt;&gt;</span> index <span class=\"hljs-keyword\">do</span>\r\n                    pos <span class=\"hljs-operator\">&lt;-</span> index\r\n                    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> index <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> list.Length <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n                        <span class=\"hljs-keyword\">if</span> list.[i] <span class=\"hljs-operator\">&lt;</span> value <span class=\"hljs-keyword\">then</span> pos <span class=\"hljs-operator\">&lt;-</span> pos <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n                    <span class=\"hljs-keyword\">while</span> value <span class=\"hljs-operator\">=</span> list.[pos] <span class=\"hljs-keyword\">do</span>\r\n                        pos <span class=\"hljs-operator\">&lt;-</span> pos <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n                    tmp <span class=\"hljs-operator\">&lt;-</span> list.[pos]\r\n                    list.[pos] <span class=\"hljs-operator\">&lt;-</span> value\r\n                    value <span class=\"hljs-operator\">&lt;-</span> tmp\r\n                    writes <span class=\"hljs-operator\">&lt;-</span> writes <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n        list\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/CycleSorter.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sorters\\Comparison\\CycleSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Cycle sort is an in-place, unstable sorting algorithm,</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     a comparison sort that is theoretically optimal in terms of the total</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     number of writes to the original array.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     It is based on the idea that the permutation to be sorted can be factored</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     into cycles, which can individually be rotated to give a sorted result.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type array input.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CycleSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts input array using Cycle sort.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Integer comparer.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length - <span class=\"hljs-number\">1</span>; i++)\r\n            {\r\n                MoveCycle(array, i, comparer);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MoveCycle</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> startingIndex, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> item = array[startingIndex];\r\n            <span class=\"hljs-keyword\">var</span> pos = startingIndex + CountSmallerElements(array, startingIndex + <span class=\"hljs-number\">1</span>, item, comparer);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (pos == startingIndex)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            pos = SkipSameElements(array, pos, item, comparer);\r\n\r\n            <span class=\"hljs-keyword\">var</span> temp = array[pos];\r\n            array[pos] = item;\r\n            item = temp;\r\n\r\n            <span class=\"hljs-keyword\">while</span> (pos != startingIndex)\r\n            {\r\n                pos = startingIndex + CountSmallerElements(array, startingIndex + <span class=\"hljs-number\">1</span>, item, comparer);\r\n                pos = SkipSameElements(array, pos, item, comparer);\r\n\r\n                temp = array[pos];\r\n                array[pos] = item;\r\n                item = temp;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">SkipSameElements</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> nextIndex, T item, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">while</span> (comparer.Compare(array[nextIndex], item) == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                nextIndex++;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> nextIndex;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">CountSmallerElements</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> startingIndex, T element, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> smallerElements = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = startingIndex; i &lt; array.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[i], element) &lt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    smallerElements++;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> smallerElements;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "RenCloud",
      "email": "thedarkrencloud@yandex.ru",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "Zykiel",
      "email": "48471587+ZykielErx@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KuLi",
      "email": "KuLi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "Tsung-Han Ho",
      "email": "mystes3016@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Sayan Bandyopadhyay",
      "email": "sayan.bandyopadhyay@yahoo.co.in",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Honey Sharma",
      "email": "softwaretester2016pro@gmail.com",
      "commits": 2
    },
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 4
    },
    {
      "name": "marsonya",
      "email": "akhil.marsonya27@gmail.com",
      "commits": 4
    },
    {
      "name": "Charlie Moore",
      "email": "moorejchar@gmail.com",
      "commits": 8
    }
  ],
  "explanationUrl": {}
}