{
  "slug": "avl-simple",
  "name": "AVL Simple",
  "categories": [
    "datastructures",
    "tree"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\AVLSimple.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\AVLSimple.java",
      "code": "  \r\n<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\r\n\r\n<span class=\"hljs-comment\">/*\r\n* Avl is algo that balance itself while adding new alues to tree\r\n* by rotating branches of binary tree and make itself Binary seaarch tree\r\n* there are four cases which has to tackle \r\n* rotating - left right ,left left,right right,right left \r\n\r\nTest Case:\r\n\r\nAVLTree tree=new AVLTree();\r\n\t\ttree.insert(20);\r\n\t\ttree.insert(25);\r\n\t\ttree.insert(30);\r\n\t\ttree.insert(10);\r\n\t\ttree.insert(5);\r\n\t\ttree.insert(15);\r\n\t\ttree.insert(27);\r\n\t\ttree.insert(19);\r\n\t\ttree.insert(16);\r\n\t\t\r\n\t\ttree.display();\r\n\r\n\r\n\r\n\r\n*/</span>\r\n\r\n\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AVLSimple</span> {\r\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>{\r\n\t\t<span class=\"hljs-type\">int</span> data;\r\n\t\t<span class=\"hljs-type\">int</span> height;\r\n\t\tNode left;\r\n\t\tNode right;\r\n\t\tNode(<span class=\"hljs-type\">int</span> data){\r\n\t\t\t<span class=\"hljs-built_in\">this</span>.data=data;\r\n\t\t\t<span class=\"hljs-built_in\">this</span>.height=<span class=\"hljs-number\">1</span>;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t<span class=\"hljs-keyword\">private</span> Node root;\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\r\n\t\t<span class=\"hljs-built_in\">this</span>.root=insert(<span class=\"hljs-built_in\">this</span>.root,data);\r\n\t}\r\n\t<span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(Node node,<span class=\"hljs-type\">int</span> item)</span> {\r\n\t\t<span class=\"hljs-keyword\">if</span>(node==<span class=\"hljs-literal\">null</span>) {\r\n\t\t\tNode add=<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(item);\r\n\t\t\t<span class=\"hljs-keyword\">return</span> add;\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">if</span>(node.data&gt;item) {\r\n\t\t\tnode.left=insert(node.left,item);\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">if</span>(node.data&lt;item) {\r\n\t\t\tnode.right=insert(node.right,item);\r\n\t\t}\r\n\t\tnode.height=Math.max(height(node.left),height(node.right))+<span class=\"hljs-number\">1</span>;\r\n\t\t<span class=\"hljs-type\">int</span> bf=bf(node);\r\n\t\t<span class=\"hljs-comment\">//LL case</span>\r\n\t\t<span class=\"hljs-keyword\">if</span>(bf&gt;<span class=\"hljs-number\">1</span>&amp;&amp;item&lt;node.left.data)\r\n\t\t\t<span class=\"hljs-keyword\">return</span> rightRotate(node);\r\n\t\t<span class=\"hljs-comment\">//RR case</span>\r\n\t\t<span class=\"hljs-keyword\">if</span>(bf&lt;-<span class=\"hljs-number\">1</span>&amp;&amp;item&gt;node.right.data)\r\n\t\t\t<span class=\"hljs-keyword\">return</span> leftRotate(node);\r\n\t\t<span class=\"hljs-comment\">//RL case</span>\r\n\t\t<span class=\"hljs-keyword\">if</span>(bf&lt;-<span class=\"hljs-number\">1</span>&amp;&amp;item&lt;node.right.data) {\r\n\t\t\tnode.right=rightRotate(node.right);\r\n\t\t\t<span class=\"hljs-keyword\">return</span> leftRotate(node);\r\n\t\t}\r\n\t\t<span class=\"hljs-comment\">//LR case</span>\r\n\t\t<span class=\"hljs-keyword\">if</span>(bf&gt;<span class=\"hljs-number\">1</span>&amp;&amp;item&gt;node.left.data) {\r\n\t\t\tnode.left=leftRotate(node.left);\r\n\t\t\t<span class=\"hljs-keyword\">return</span> rightRotate(node);\r\n\t\t}\r\n\t\t\t\r\n\t\t<span class=\"hljs-keyword\">return</span> node;\r\n\t}\r\n\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">()</span> { \r\n\t\t<span class=\"hljs-built_in\">this</span>.display(<span class=\"hljs-built_in\">this</span>.root);\r\n\t\tSystem.out.println(<span class=\"hljs-built_in\">this</span>.root.height);\r\n\t}\r\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">display</span> <span class=\"hljs-params\">(Node node)</span> {\r\n\t\tString str=<span class=\"hljs-string\">&quot;&quot;</span>;\r\n\t\t<span class=\"hljs-keyword\">if</span>(node.left!=<span class=\"hljs-literal\">null</span>)\r\n\t\t\tstr+=node.left.data+<span class=\"hljs-string\">&quot;=&gt;&quot;</span>;\r\n\t\t<span class=\"hljs-keyword\">else</span>\r\n\t\t\tstr+=<span class=\"hljs-string\">&quot;END=&gt;&quot;</span>;\r\n\t\tstr+=node.data+<span class=\"hljs-string\">&quot;&quot;</span>;\r\n\t\t<span class=\"hljs-keyword\">if</span>(node.right!=<span class=\"hljs-literal\">null</span>)\r\n\t\t\tstr+=<span class=\"hljs-string\">&quot;&lt;=&quot;</span>+node.right.data;\r\n\t\t<span class=\"hljs-keyword\">else</span>\r\n\t\t\tstr+=<span class=\"hljs-string\">&quot;&lt;=END&quot;</span>;\r\n\t\tSystem.out.println(str);\r\n\t\t<span class=\"hljs-keyword\">if</span>(node.left!=<span class=\"hljs-literal\">null</span>)\r\n\t\t\tdisplay(node.left);\r\n\t\t<span class=\"hljs-keyword\">if</span>(node.right!=<span class=\"hljs-literal\">null</span>)\r\n\t\t\tdisplay(node.right);\r\n\t}\r\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">height</span><span class=\"hljs-params\">(Node node)</span> {\r\n\t\t<span class=\"hljs-keyword\">if</span>(node==<span class=\"hljs-literal\">null</span>) {\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">return</span> node.height;\r\n\t\t\r\n\t}\r\n\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bf</span><span class=\"hljs-params\">(Node node)</span> {\r\n\t\t<span class=\"hljs-keyword\">if</span>(node==<span class=\"hljs-literal\">null</span>)\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n\t\t<span class=\"hljs-keyword\">return</span> height(node.left)-height(node.right);\r\n\t}\r\n\t\r\n\t<span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rightRotate</span><span class=\"hljs-params\">(Node c)</span> {\r\n\t\tNode b=c.left;\r\n\t\tNode T3=b.right;\r\n\t\t\r\n\t\tb.right=c;\r\n\t\tc.left=T3;\r\n\t\tc.height=Math.max(height(c.left),height(c.right))+<span class=\"hljs-number\">1</span>;\r\n\t\tb.height=Math.max(height(b.left),height(b.right))+<span class=\"hljs-number\">1</span>;\r\n\t\t<span class=\"hljs-keyword\">return</span> b;\r\n\t\t\r\n\t}\r\n\t<span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">leftRotate</span><span class=\"hljs-params\">(Node c)</span> {\r\n\t\tNode b=c.right;\r\n\t\tNode T3=b.left;\r\n\t\t\r\n\t\tb.left=c;\r\n\t\tc.right=T3;\r\n\t\tc.height=Math.max(height(c.left),height(c.right))+<span class=\"hljs-number\">1</span>;\r\n\t\tb.height=Math.max(height(b.left),height(b.right))+<span class=\"hljs-number\">1</span>;\r\n\t\t<span class=\"hljs-keyword\">return</span> b;\r\n\t\t\r\n\t}\r\n\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Ritik2604",
      "email": "49342895+Ritik2604@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}