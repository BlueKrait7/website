{
  "slug": "decimal-to-roman-numeral",
  "name": "Decimal to Roman Numeral",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "others\\decimal_to_roman_numeral.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others\\decimal_to_roman_numeral.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief This Programme Converts a given decimal number in the range [0,4000)\r\n * to both Lower case and Upper case Roman Numeral\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** This functions fills a string with character c, n times and returns it\r\n * @note This can probably be replace by `memcpy` function.\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">fill</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> c, <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    std::string s = <span class=\"hljs-string\">&quot;&quot;</span>;\r\n    <span class=\"hljs-keyword\">while</span> (n--) s += c;\r\n    <span class=\"hljs-keyword\">return</span> s;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** to convert to lowercase Roman Numeral\r\n * the function works recursively\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">tolowerRoman</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">4</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;i&#x27;</span>, n);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">6</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-number\">5</span> - n) + <span class=\"hljs-string\">&quot;v&quot;</span>;\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">9</span>)\r\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">string</span>(<span class=\"hljs-string\">&quot;v&quot;</span>) + <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;i&#x27;</span>, n - <span class=\"hljs-number\">5</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">11</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-number\">10</span> - n) + <span class=\"hljs-string\">&quot;x&quot;</span>;\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">40</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;x&#x27;</span>, n / <span class=\"hljs-number\">10</span>) + <span class=\"hljs-built_in\">tolowerRoman</span>(n % <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">60</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-number\">5</span> - n / <span class=\"hljs-number\">10</span>) + <span class=\"hljs-string\">&#x27;l&#x27;</span> + <span class=\"hljs-built_in\">tolowerRoman</span>(n % <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">90</span>)\r\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">string</span>(<span class=\"hljs-string\">&quot;l&quot;</span>) + <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;x&#x27;</span>, n / <span class=\"hljs-number\">10</span> - <span class=\"hljs-number\">5</span>) + <span class=\"hljs-built_in\">tolowerRoman</span>(n % <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">110</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-number\">10</span> - n / <span class=\"hljs-number\">10</span>) + <span class=\"hljs-string\">&quot;c&quot;</span> + <span class=\"hljs-built_in\">tolowerRoman</span>(n % <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">400</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;c&#x27;</span>, n / <span class=\"hljs-number\">100</span>) + <span class=\"hljs-built_in\">tolowerRoman</span>(n % <span class=\"hljs-number\">100</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">600</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">5</span> - n / <span class=\"hljs-number\">100</span>) + <span class=\"hljs-string\">&#x27;d&#x27;</span> + <span class=\"hljs-built_in\">tolowerRoman</span>(n % <span class=\"hljs-number\">100</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">900</span>)\r\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">string</span>(<span class=\"hljs-string\">&quot;d&quot;</span>) + <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;c&#x27;</span>, n / <span class=\"hljs-number\">100</span> - <span class=\"hljs-number\">5</span>) +\r\n               <span class=\"hljs-built_in\">tolowerRoman</span>(n % <span class=\"hljs-number\">100</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">1100</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-number\">10</span> - n / <span class=\"hljs-number\">100</span>) + <span class=\"hljs-string\">&quot;m&quot;</span> + <span class=\"hljs-built_in\">tolowerRoman</span>(n % <span class=\"hljs-number\">100</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">4000</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;m&#x27;</span>, n / <span class=\"hljs-number\">1000</span>) + <span class=\"hljs-built_in\">tolowerRoman</span>(n % <span class=\"hljs-number\">1000</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;?&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** to convert to uppercase Roman Numeral\r\n * the function works recursively\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">toupperRoman</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">4</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;I&#x27;</span>, n);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">6</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;I&#x27;</span>, <span class=\"hljs-number\">5</span> - n) + <span class=\"hljs-string\">&quot;V&quot;</span>;\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">9</span>)\r\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">string</span>(<span class=\"hljs-string\">&quot;V&quot;</span>) + <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;I&#x27;</span>, n - <span class=\"hljs-number\">5</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">11</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;I&#x27;</span>, <span class=\"hljs-number\">10</span> - n) + <span class=\"hljs-string\">&quot;X&quot;</span>;\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">40</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;X&#x27;</span>, n / <span class=\"hljs-number\">10</span>) + <span class=\"hljs-built_in\">toupperRoman</span>(n % <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">60</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;X&#x27;</span>, <span class=\"hljs-number\">5</span> - n / <span class=\"hljs-number\">10</span>) + <span class=\"hljs-string\">&#x27;L&#x27;</span> + <span class=\"hljs-built_in\">toupperRoman</span>(n % <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">90</span>)\r\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">string</span>(<span class=\"hljs-string\">&quot;L&quot;</span>) + <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;X&#x27;</span>, n / <span class=\"hljs-number\">10</span> - <span class=\"hljs-number\">5</span>) + <span class=\"hljs-built_in\">toupperRoman</span>(n % <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">110</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;X&#x27;</span>, <span class=\"hljs-number\">10</span> - n / <span class=\"hljs-number\">10</span>) + <span class=\"hljs-string\">&quot;C&quot;</span> + <span class=\"hljs-built_in\">toupperRoman</span>(n % <span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">400</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;C&#x27;</span>, n / <span class=\"hljs-number\">100</span>) + <span class=\"hljs-built_in\">toupperRoman</span>(n % <span class=\"hljs-number\">100</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">600</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-number\">5</span> - n / <span class=\"hljs-number\">100</span>) + <span class=\"hljs-string\">&#x27;D&#x27;</span> + <span class=\"hljs-built_in\">toupperRoman</span>(n % <span class=\"hljs-number\">100</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">900</span>)\r\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">string</span>(<span class=\"hljs-string\">&quot;D&quot;</span>) + <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;C&#x27;</span>, n / <span class=\"hljs-number\">100</span> - <span class=\"hljs-number\">5</span>) +\r\n               <span class=\"hljs-built_in\">toupperRoman</span>(n % <span class=\"hljs-number\">100</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">1100</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-number\">10</span> - n / <span class=\"hljs-number\">100</span>) + <span class=\"hljs-string\">&quot;M&quot;</span> + <span class=\"hljs-built_in\">toupperRoman</span>(n % <span class=\"hljs-number\">100</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">4000</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-string\">&#x27;M&#x27;</span>, n / <span class=\"hljs-number\">1000</span>) + <span class=\"hljs-built_in\">toupperRoman</span>(n % <span class=\"hljs-number\">1000</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;?&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> n;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t\\tRoman numbers converter\\n\\n&quot;</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Type in decimal number between 0 up to 4000 (exclusive): &quot;</span>;\r\n    std::cin &gt;&gt; n;\r\n    std::cout &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; in Upper Roman Numerals is &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">toupperRoman</span>(n) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n    std::cout &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; in Lower Roman Numerals is &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">tolowerRoman</span>(n) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Naveen Hegde",
      "email": "hegdenaveen1@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}