{
  "slug": "ascending-priority-queue",
  "name": "Ascending Priority Queue",
  "categories": [
    "datastructures",
    "linkedlist"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures\\linked_list\\ascending_priority_queue.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\linked_list\\ascending_priority_queue.c",
      "code": "<span class=\"hljs-comment\">/* Ascending priority queue using Linked List - Program to implement Ascending\r\n * priority queue using Linked List */</span>\r\n\r\n<span class=\"hljs-comment\">/*A priority queue is a special type of queue in which each element is\r\nassociated with a priority and is served according to its priority. If elements\r\nwith the same priority occur, they are served according to their order in the\r\nqueue.\r\n\r\nGenerally, the value of the element itself is considered for assigning the\r\npriority.\r\n\r\nFor example: The element with the highest value is considered as the highest\r\npriority element. However, in other cases, we can assume the element with the\r\nlowest value as the highest priority element. In other cases, we can set\r\npriorities according to our needs.\r\n\r\nIn a queue, the first-in-first-out rule is implemented whereas, in a priority\r\nqueue, the values are removed on the basis of priority. The element with the\r\nhighest priority is removed first.\r\n\r\ninsert() - Would insert an element in a queue\r\ndelete() -  Would delete the smallest element in the queue\r\n*/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NULL ((void *)0)</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> data;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\r\n};\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">front</span>, *<span class=\"hljs-title\">rear</span>;</span>\r\n\r\n<span class=\"hljs-comment\">/* This function initializes the queue to empty by making both front and rear as\r\n * NULL */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">createqueue</span><span class=\"hljs-params\">()</span> { front = rear = <span class=\"hljs-literal\">NULL</span>; }\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">empty</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (front == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">pnode</span>;</span>\r\n\r\n    pnode = (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\r\n    <span class=\"hljs-keyword\">if</span> (pnode == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Memory overflow. Unable to insert.\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    pnode-&gt;data = x;\r\n    pnode-&gt;next = <span class=\"hljs-literal\">NULL</span>; <span class=\"hljs-comment\">/* New node is always last node */</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (empty())\r\n        front = rear = pnode;\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        rear-&gt;next = pnode;\r\n        rear = pnode;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">removes</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> min;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">follow</span>, *<span class=\"hljs-title\">follow1</span>, *<span class=\"hljs-title\">p</span>, *<span class=\"hljs-title\">p1</span>;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (empty())\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nQueue Underflow. Unable to remove.&quot;</span>);\r\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* finding the node with minimum value in the APQ.*/</span>\r\n    p = p1 = front;\r\n    follow = follow1 = <span class=\"hljs-literal\">NULL</span>;\r\n    min = front-&gt;data;\r\n    <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (p-&gt;data &lt; min)\r\n        {\r\n            min = p-&gt;data;\r\n            follow1 = follow;\r\n            p1 = p;\r\n        }\r\n        follow = p;\r\n        p = p-&gt;next;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* Deleting the node with min value */</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (p1 == front) <span class=\"hljs-comment\">/* deleting first node.*/</span>\r\n    {\r\n        front = front-&gt;next;\r\n        <span class=\"hljs-keyword\">if</span> (front == <span class=\"hljs-literal\">NULL</span>) <span class=\"hljs-comment\">/* Deleting the only one node */</span>\r\n            rear = <span class=\"hljs-literal\">NULL</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p1 == rear) <span class=\"hljs-comment\">/* Deleting last node */</span>\r\n    {\r\n        rear = follow1;\r\n        rear-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">/* deleting any other node.*/</span>\r\n        follow1-&gt;next = p1-&gt;next;\r\n\r\n    <span class=\"hljs-built_in\">free</span>(p1);\r\n    <span class=\"hljs-keyword\">return</span> min; <span class=\"hljs-comment\">/* DONT FORGET LAST 2 STATEMENTS.*/</span>\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span>;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (empty())\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Queue empty. No data to display \\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Queue from front to rear is as shown: \\n&quot;</span>);\r\n\r\n        p = front;\r\n        <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, p-&gt;data);\r\n            p = p-&gt;next;\r\n        }\r\n\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">destroyqueue</span><span class=\"hljs-params\">()</span> { front = rear = <span class=\"hljs-literal\">NULL</span>; }\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> x, ch;\r\n\r\n    createqueue();\r\n\r\n    <span class=\"hljs-keyword\">do</span>\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\n  Menu: \\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;1:Insert \\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;2:Remove \\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;3:exit \\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter your choice: &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;ch);\r\n\r\n        <span class=\"hljs-keyword\">switch</span> (ch)\r\n        {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter element to be inserted: &quot;</span>);\r\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;x);\r\n            insert(x);\r\n            show();\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\r\n            x = removes();\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Element removed is: %d\\n&quot;</span>, x);\r\n            show();\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n    } <span class=\"hljs-keyword\">while</span> (ch != <span class=\"hljs-number\">3</span>);\r\n\r\n    destroyqueue();\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/* Output of the Program*/</span>\r\n\r\n<span class=\"hljs-comment\">/*\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 1\r\nEnter element to be inserted: 12\r\nQueue from front to rear is as shown:\r\n12\r\n\r\n\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 1\r\nEnter element to be inserted: 1\r\nQueue from front to rear is as shown:\r\n12 1\r\n\r\n\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 1\r\nEnter element to be inserted: 14\r\nQueue from front to rear is as shown:\r\n12 1 14\r\n\r\n\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 1\r\nEnter element to be inserted: 3\r\nQueue from front to rear is as shown:\r\n12 1 14 3\r\n\r\n\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 1\r\nEnter element to be inserted: 5\r\nQueue from front to rear is as shown:\r\n12 1 14 3 5\r\n\r\n\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 2\r\nElement removed is: 1\r\nQueue from front to rear is as shown:\r\n12 14 3 5\r\n\r\n\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 2\r\nElement removed is: 3\r\nQueue from front to rear is as shown:\r\n12 14 5\r\n\r\n\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 2\r\nElement removed is: 5\r\nQueue from front to rear is as shown:\r\n12 14\r\n\r\n\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 2\r\nElement removed is: 12\r\nQueue from front to rear is as shown:\r\n14\r\n\r\n\r\n  Menu:\r\n1:Insert\r\n2:Remove\r\n3:exit\r\nEnter your choice: 2\r\nElement removed is: 14\r\nQueue empty. No data to display\r\n\r\n*/</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Sombit Bose",
      "email": "sombit.bose15@gmail.com",
      "commits": 1
    },
    {
      "name": "Shubham Sah",
      "email": "42349247+shubhamsah@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}