{
  "slug": "interpolation-search",
  "name": "Interpolation Search",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "searches\\interpolation_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/searches\\interpolation_search.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is pure Python implementation of interpolation search algorithm\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">interpolation_search</span>(<span class=\"hljs-params\">sorted_collection, item</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of interpolation search algorithm in Python\r\n    Be careful collection must be ascending sorted, otherwise result will be\r\n    unpredictable\r\n    :param sorted_collection: some ascending sorted collection with comparable items\r\n    :param item: item value to search\r\n    :return: index of found item or None if item is not found\r\n    &quot;&quot;&quot;</span>\r\n    left = <span class=\"hljs-number\">0</span>\r\n    right = <span class=\"hljs-built_in\">len</span>(sorted_collection) - <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> left &lt;= right:\r\n        <span class=\"hljs-comment\"># avoid divided by 0 during interpolation</span>\r\n        <span class=\"hljs-keyword\">if</span> sorted_collection[left] == sorted_collection[right]:\r\n            <span class=\"hljs-keyword\">if</span> sorted_collection[left] == item:\r\n                <span class=\"hljs-keyword\">return</span> left\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n        point = left + ((item - sorted_collection[left]) * (right - left)) // (\r\n            sorted_collection[right] - sorted_collection[left]\r\n        )\r\n\r\n        <span class=\"hljs-comment\"># out of range check</span>\r\n        <span class=\"hljs-keyword\">if</span> point &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> point &gt;= <span class=\"hljs-built_in\">len</span>(sorted_collection):\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n        current_item = sorted_collection[point]\r\n        <span class=\"hljs-keyword\">if</span> current_item == item:\r\n            <span class=\"hljs-keyword\">return</span> point\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> point &lt; left:\r\n                right = left\r\n                left = point\r\n            <span class=\"hljs-keyword\">elif</span> point &gt; right:\r\n                left = right\r\n                right = point\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">if</span> item &lt; current_item:\r\n                    right = point - <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    left = point + <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">interpolation_search_by_recursion</span>(<span class=\"hljs-params\">sorted_collection, item, left, right</span>):\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of interpolation search algorithm in Python by recursion\r\n    Be careful collection must be ascending sorted, otherwise result will be\r\n    unpredictable\r\n    First recursion should be started with left=0 and right=(len(sorted_collection)-1)\r\n    :param sorted_collection: some ascending sorted collection with comparable items\r\n    :param item: item value to search\r\n    :return: index of found item or None if item is not found\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># avoid divided by 0 during interpolation</span>\r\n    <span class=\"hljs-keyword\">if</span> sorted_collection[left] == sorted_collection[right]:\r\n        <span class=\"hljs-keyword\">if</span> sorted_collection[left] == item:\r\n            <span class=\"hljs-keyword\">return</span> left\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    point = left + ((item - sorted_collection[left]) * (right - left)) // (\r\n        sorted_collection[right] - sorted_collection[left]\r\n    )\r\n\r\n    <span class=\"hljs-comment\"># out of range check</span>\r\n    <span class=\"hljs-keyword\">if</span> point &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> point &gt;= <span class=\"hljs-built_in\">len</span>(sorted_collection):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> sorted_collection[point] == item:\r\n        <span class=\"hljs-keyword\">return</span> point\r\n    <span class=\"hljs-keyword\">elif</span> point &lt; left:\r\n        <span class=\"hljs-keyword\">return</span> interpolation_search_by_recursion(sorted_collection, item, point, left)\r\n    <span class=\"hljs-keyword\">elif</span> point &gt; right:\r\n        <span class=\"hljs-keyword\">return</span> interpolation_search_by_recursion(sorted_collection, item, right, left)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">if</span> sorted_collection[point] &gt; item:\r\n            <span class=\"hljs-keyword\">return</span> interpolation_search_by_recursion(\r\n                sorted_collection, item, left, point - <span class=\"hljs-number\">1</span>\r\n            )\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> interpolation_search_by_recursion(\r\n                sorted_collection, item, point + <span class=\"hljs-number\">1</span>, right\r\n            )\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__assert_sorted</span>(<span class=\"hljs-params\">collection</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Check if collection is ascending sorted, if not - raises :py:class:`ValueError`\r\n    :param collection: collection\r\n    :return: True if collection is ascending sorted\r\n    :raise: :py:class:`ValueError` if collection is not ascending sorted\r\n    Examples:\r\n    &gt;&gt;&gt; __assert_sorted([0, 1, 2, 4])\r\n    True\r\n    &gt;&gt;&gt; __assert_sorted([10, -1, 5])\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Collection must be ascending sorted\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> collection != <span class=\"hljs-built_in\">sorted</span>(collection):\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Collection must be ascending sorted&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> sys\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        user_input = input(&#x27;Enter numbers separated by comma:\\n&#x27;).strip()\r\n    collection = [int(item) for item in user_input.split(&#x27;,&#x27;)]\r\n    try:\r\n        __assert_sorted(collection)\r\n    except ValueError:\r\n        sys.exit(&#x27;Sequence must be ascending sorted to apply interpolation search&#x27;)\r\n\r\n    target_input = input(&#x27;Enter a single number to be found in the list:\\n&#x27;)\r\n    target = int(target_input)\r\n        &quot;&quot;&quot;</span>\r\n\r\n    debug = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">if</span> debug == <span class=\"hljs-number\">1</span>:\r\n        collection = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">66</span>, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">93</span>]\r\n        <span class=\"hljs-keyword\">try</span>:\r\n            __assert_sorted(collection)\r\n        <span class=\"hljs-keyword\">except</span> ValueError:\r\n            sys.exit(<span class=\"hljs-string\">&quot;Sequence must be ascending sorted to apply interpolation search&quot;</span>)\r\n        target = <span class=\"hljs-number\">67</span>\r\n\r\n    result = interpolation_search(collection, target)\r\n    <span class=\"hljs-keyword\">if</span> result <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{target}</span> found at positions: <span class=\"hljs-subst\">{result}</span>&quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Not found&quot;</span>)\r\n"
    },
    "javascript": {
      "dir": "Search\\InterpolationSearch.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Search\\InterpolationSearch.js",
      "code": "<span class=\"hljs-comment\">/**\r\n * Interpolation Search\r\n *\r\n * Time Complexity:\r\n * -Best case: O(1)\r\n * -Worst case: O(n)\r\n * -O((log(log(n))) If the data are uniformly distributed\r\n *\r\n *\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">interpolationSearch</span> (arr, key) {\r\n  <span class=\"hljs-keyword\">const</span> length = arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">let</span> low = <span class=\"hljs-number\">0</span>\r\n  <span class=\"hljs-keyword\">let</span> high = length\r\n  <span class=\"hljs-keyword\">let</span> position = -<span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">let</span> delta = -<span class=\"hljs-number\">1</span>\r\n\r\n  <span class=\"hljs-comment\">// Because the array is sorted the key must be between low and high</span>\r\n  <span class=\"hljs-keyword\">while</span> (low &lt;= high &amp;&amp; key &gt;= arr[low] &amp;&amp; key &lt;= arr[high]) {\r\n    delta = (key - arr[low]) / (arr[high] - arr[low])\r\n    position = low + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((high - low) * delta)\r\n\r\n    <span class=\"hljs-comment\">// Target found return its position</span>\r\n    <span class=\"hljs-keyword\">if</span> (arr[position] === key) {\r\n      <span class=\"hljs-keyword\">return</span> position\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// If the key is larger then it is in the upper part of the array</span>\r\n    <span class=\"hljs-keyword\">if</span> (arr[position] &lt; key) {\r\n      low = position + <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-comment\">// If the key is smaller then it is in the lower part of the array</span>\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      high = position - <span class=\"hljs-number\">1</span>\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// const arr = [2, 6, 8, 10, 12, 14, 16, 18, 20, 22, 26, 34, 39]</span>\r\n\r\n<span class=\"hljs-comment\">// interpolationSearch(arr, 2)</span>\r\n<span class=\"hljs-comment\">// interpolationSearch(arr, 12)</span>\r\n<span class=\"hljs-comment\">// interpolationSearch(arr, 1000)</span>\r\n<span class=\"hljs-comment\">// interpolationSearch(arr, 39)</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "search\\interpolation_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search\\interpolation_search.cpp",
      "code": "\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @file\r\n * @brief [Interpolation search\r\n * algorithm](https://en.wikipedia.org/wiki/interpolation_search)\r\n *\r\n * @details\r\n * interpolation search resembles the method by which people search a telephone\r\n * directory for a name (the key value by which the book&#x27;s entries are ordered):\r\n * in each step the algorithm calculates where in the remaining search space\r\n * the sought item might be, based on the key values at the bounds of the search\r\n * space and the value of the sought key, usually via a linear interpolation.\r\n * The key value actually found at this estimated position is then compared to\r\n * the key value being sought. If it is not equal, then depending on the\r\n * comparison, the remaining search space is reduced to the part before or\r\n * after the estimated position. This method will only work if calculations\r\n * on the size of differences between key values are sensible.\r\n\r\n * ### Complexities\r\n *\r\n * //n is the number of element in the array.\r\n *\r\n * Worst-case time complexity\tO(n)                (when items are distributed\r\n exponentially)\r\n * Average time complexity\t    O(log2(log2 n))\r\n * space complexity  0(1)\r\n *\r\n * @author [Lajat Manekar](https://github.com/Lazeeez)\r\n * @author Unknown author\r\n *******************************************************************************/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::sort function</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for std::assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @namespace search\r\n * @brief Searching algorithms\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-keyword\">namespace</span> search {\r\n\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @namespace interpolation_search\r\n * @brief Functions for the [Interpolation\r\n *Search](https://en.wikipedia.org/wiki/interpolation_search) algorithm\r\n *implementation\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-keyword\">namespace</span> interpolation_search {\r\n\r\n<span class=\"hljs-comment\">/******************************************************************************\r\n * @brief The main function which implements interpolation search\r\n * @param arr vector to be searched in\r\n * @param number value to be searched\r\n * @returns integer index of `number` in vector `arr`\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">interpolationSearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; &amp;arr,\r\n                             <span class=\"hljs-type\">uint64_t</span> number)</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> size = arr.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-type\">uint64_t</span> low = <span class=\"hljs-number\">0</span>, high = (size - <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-comment\">// Since vector is sorted, an element present in array must be in range</span>\r\n    <span class=\"hljs-comment\">// defined by corner</span>\r\n    <span class=\"hljs-keyword\">while</span> (low &lt;= high &amp;&amp; number &gt;= arr[low] &amp;&amp; number &lt;= arr[high]) {\r\n        <span class=\"hljs-keyword\">if</span> (low == high) {\r\n            <span class=\"hljs-keyword\">if</span> (arr[low] == number) {\r\n                <span class=\"hljs-keyword\">return</span> low;\r\n            }\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n        }\r\n        <span class=\"hljs-comment\">// Probing the position with keeping uniform distribution in mind.</span>\r\n        <span class=\"hljs-type\">uint64_t</span> pos =\r\n            low +\r\n            ((<span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;(high - low) / (arr[high] - arr[low])) *\r\n             (number - arr[low]));\r\n\r\n        <span class=\"hljs-keyword\">if</span> (arr[pos] == number) {\r\n            <span class=\"hljs-keyword\">return</span> pos;  <span class=\"hljs-comment\">// Condition of target found</span>\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (arr[pos] &lt; number) {\r\n            low = pos + <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// If x is larger, x is in upper part</span>\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">else</span> {\r\n            high = pos - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// If x is smaller, x is in the lower part</span>\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace interpolation_search</span>\r\n\r\n}  <span class=\"hljs-comment\">// namespace search</span>\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Self-test implementation\r\n * @returns void\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// testcase</span>\r\n    <span class=\"hljs-comment\">// array = [10, 12, 13, 16, 18, 19, 20, 21, 1, 2, 3, 4, 22, 23, 24, 33, 35,</span>\r\n    <span class=\"hljs-comment\">// 42, 47] , Value = 33 should return 15</span>\r\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr = {{<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>,\r\n                                  <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">47</span>}};\r\n    <span class=\"hljs-built_in\">sort</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());\r\n    <span class=\"hljs-type\">uint64_t</span> number = <span class=\"hljs-number\">33</span>;  <span class=\"hljs-comment\">// Element to be searched</span>\r\n    <span class=\"hljs-type\">uint64_t</span> expected_answer = <span class=\"hljs-number\">15</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> derived_answer =\r\n        search::interpolation_search::<span class=\"hljs-built_in\">interpolationSearch</span>(arr, number);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Testcase: &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(derived_answer == expected_answer);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed!\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/*******************************************************************************\r\n * @brief Main function\r\n * @returns 0 on exit\r\n *******************************************************************************/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">tests</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\searches\\InterpolationSearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\searches\\InterpolationSearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.searches;\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.lang.String.format;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n<span class=\"hljs-keyword\">import</span> java.util.stream.IntStream;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Interpolation search algorithm implementation\r\n *\r\n * &lt;p&gt;\r\n * Worst-case performance O(n) Best-case performance O(1) Average performance\r\n * O(log(log(n))) if the elements are uniformly distributed if not O(n)\r\n * Worst-case space complexity O(1)\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InterpolationSearch</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> array is a sorted array\r\n     * <span class=\"hljs-doctag\">@param</span> key is a value what shoulb be found in the array\r\n     * <span class=\"hljs-doctag\">@return</span> an index if the array contains the key unless -1\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> array[], <span class=\"hljs-type\">int</span> key)</span> {\r\n        <span class=\"hljs-comment\">// Find indexes of two corners</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, end = (array.length - <span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-comment\">// Since array is sorted, an element present</span>\r\n        <span class=\"hljs-comment\">// in array must be in range defined by corner</span>\r\n        <span class=\"hljs-keyword\">while</span> (start &lt;= end &amp;&amp; key &gt;= array[start] &amp;&amp; key &lt;= array[end]) {\r\n            <span class=\"hljs-comment\">// Probing the position with keeping</span>\r\n            <span class=\"hljs-comment\">// uniform distribution in mind.</span>\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pos</span> <span class=\"hljs-operator\">=</span> start + (((end - start) / (array[end] - array[start])) * (key - array[start]));\r\n\r\n            <span class=\"hljs-comment\">// Condition of target found</span>\r\n            <span class=\"hljs-keyword\">if</span> (array[pos] == key) {\r\n                <span class=\"hljs-keyword\">return</span> pos;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// If key is larger, key is in upper part</span>\r\n            <span class=\"hljs-keyword\">if</span> (array[pos] &lt; key) {\r\n                start = pos + <span class=\"hljs-number\">1</span>;\r\n            } <span class=\"hljs-comment\">// If key is smaller, x is in lower part</span>\r\n            <span class=\"hljs-keyword\">else</span> {\r\n                end = pos - <span class=\"hljs-number\">1</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Driver method</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxElement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100000</span>;\r\n        <span class=\"hljs-type\">int</span>[] integers = IntStream.generate(() -&gt; r.nextInt(maxElement)).limit(size).sorted().toArray();\r\n\r\n        <span class=\"hljs-comment\">// the element that should be found</span>\r\n        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">shouldBeFound</span> <span class=\"hljs-operator\">=</span> integers[r.nextInt(size - <span class=\"hljs-number\">1</span>)];\r\n\r\n        <span class=\"hljs-type\">InterpolationSearch</span> <span class=\"hljs-variable\">search</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InterpolationSearch</span>();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">atIndex</span> <span class=\"hljs-operator\">=</span> search.find(integers, shouldBeFound);\r\n\r\n        System.out.println(\r\n                String.format(\r\n                        <span class=\"hljs-string\">&quot;Should be found: %d. Found %d at index %d. An array length %d&quot;</span>,\r\n                        shouldBeFound, integers[atIndex], atIndex, size));\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">toCheck</span> <span class=\"hljs-operator\">=</span> Arrays.binarySearch(integers, shouldBeFound);\r\n        System.out.println(\r\n                format(\r\n                        <span class=\"hljs-string\">&quot;Found by system method at an index: %d. Is equal: %b&quot;</span>, toCheck, toCheck == atIndex));\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "searching\\interpolation_search.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching\\interpolation_search.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/* By comparison, binary search always chooses the middle of the remaining\r\n * search space, discarding one half or the other, depending on the comparison\r\n * between the key found at the estimated position and the key sought. The\r\n * remaining search space is reduced to the part before or after the estimated\r\n * position. The linear search uses equality only as it compares elements\r\n * one-by-one from the start, ignoring any sorting. On average the interpolation\r\n * search makes about log(log(n)) comparisons (if the elements are uniformly\r\n * distributed), where n is the number of elements to be searched. In the worst\r\n * case (for instance where the numerical values of the keys increase\r\n * exponentially) it can make up to O(n) comparisons. In\r\n * interpolation-sequential search, interpolation is used to find an item near\r\n * the one being searched for, then linear search is used to find the exact\r\n * item. */</span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">interpolationSearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> key)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> low = <span class=\"hljs-number\">0</span>, high = n - <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">while</span> (low &lt;= high &amp;&amp; key &gt;= arr[low] &amp;&amp; key &lt;= arr[high])\r\n    {\r\n        <span class=\"hljs-comment\">/* Calculate the nearest posible position of key */</span>\r\n        <span class=\"hljs-type\">int</span> pos =\r\n            low + ((key - arr[low]) * (high - low)) / (arr[high] - arr[low]);\r\n        <span class=\"hljs-keyword\">if</span> (key &gt; arr[pos])\r\n            low = pos + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &lt; arr[pos])\r\n            high = pos - <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">/* Found */</span>\r\n            <span class=\"hljs-keyword\">return</span> pos;\r\n    }\r\n    <span class=\"hljs-comment\">/* Not found */</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> x;\r\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">47</span>};\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-keyword\">sizeof</span>(arr) / <span class=\"hljs-keyword\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Array: &quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEnter the number to be searched: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;x); <span class=\"hljs-comment\">/* Element to be searched */</span>\r\n\r\n    <span class=\"hljs-type\">int</span> index = interpolationSearch(arr, n, x);\r\n\r\n    <span class=\"hljs-comment\">/* If element was found */</span>\r\n    <span class=\"hljs-keyword\">if</span> (index != <span class=\"hljs-number\">-1</span>)\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Element found at position: %d\\n&quot;</span>, index);\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Element not found.\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "search\\interpolation_Search.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/search\\interpolation_Search.dart",
      "code": "<span class=\"hljs-comment\">/* By comparison, binary search always chooses the middle of the remaining\r\n * search space, discarding one half or the other, depending on the comparison\r\n * between the key found at the estimated position and the key sought. The remaining\r\n * search space is reduced to the part before or after the estimated position.\r\n * The linear search uses equality only as it compares elements one-by-one from the start, ignoring any sorting.\r\n * On average the interpolation search makes about log(log(n)) comparisons (if the elements\r\n * are uniformly distributed), where n is the number of elements to be searched. In the worst case\r\n * (for instance where the numerical values of the keys increase exponentially) it can make up to O(n) comparisons.\r\n * In interpolation-sequential search, interpolation is used to find an item near the one being searched for,\r\n * then linear search is used to find the exact item. */</span>\r\n\r\n<span class=\"hljs-comment\">//Author:Shawn</span>\r\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\r\n\r\n<span class=\"hljs-built_in\">int</span> interpolationSearch(<span class=\"hljs-built_in\">List</span> arr, <span class=\"hljs-built_in\">int</span> n, <span class=\"hljs-built_in\">int</span> key) {\r\n  <span class=\"hljs-built_in\">int</span> low = <span class=\"hljs-number\">0</span>, high = n - <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-keyword\">while</span> (low &lt;= high &amp;&amp; key &gt;= arr[low] &amp;&amp; key &lt;= arr[high]) {\r\n    <span class=\"hljs-comment\">/* Calculate the nearest possible position of key */</span>\r\n    <span class=\"hljs-built_in\">int</span> pos = low +\r\n        (((key - arr[low]) * (high - low)) / (arr[high] - arr[low])).round();\r\n    <span class=\"hljs-keyword\">if</span> (key &gt; arr[pos])\r\n      low = pos + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &lt; arr[pos])\r\n      high = pos - <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">/* Found */</span>\r\n      <span class=\"hljs-keyword\">return</span> pos;\r\n  }\r\n  <span class=\"hljs-comment\">/* Not found */</span>\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-built_in\">int</span> main() {\r\n  <span class=\"hljs-comment\">//Get the arr</span>\r\n  <span class=\"hljs-built_in\">List</span> arr = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\r\n  <span class=\"hljs-comment\">//The size of the arr</span>\r\n  <span class=\"hljs-keyword\">var</span> n = arr.length;\r\n  <span class=\"hljs-comment\">//The Key</span>\r\n  <span class=\"hljs-keyword\">var</span> key = <span class=\"hljs-number\">5</span>;\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;I want to found <span class=\"hljs-subst\">$key</span> at <span class=\"hljs-subst\">$arr</span>&quot;</span>);\r\n  <span class=\"hljs-comment\">//Get the index</span>\r\n  <span class=\"hljs-keyword\">var</span> index = interpolationSearch(arr, n, key);\r\n  <span class=\"hljs-comment\">//print the result</span>\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Element found at position: <span class=\"hljs-subst\">$index</span>&quot;</span>);\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "kotlin": {
      "dir": "src\\main\\kotlin\\search\\InterpolationSearch.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src\\main\\kotlin\\search\\InterpolationSearch.kt",
      "code": "<span class=\"hljs-keyword\">package</span> search\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Interpolation search is an algorithm which finds the position of a target value within an array (Sorted)\r\n *\r\n * Worst-case performance\tO(n)\r\n * Best-case performance\tO(1)\r\n * Average performance\tO(log log n)\r\n * Worst-case space complexity\tO(1)\r\n */</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@param</span> arr is an array where the element should be found\r\n * <span class=\"hljs-doctag\">@param</span> lo array starting index\r\n * <span class=\"hljs-doctag\">@param</span> hi array ending index\r\n * <span class=\"hljs-doctag\">@param</span> x is an element which should be found\r\n * <span class=\"hljs-doctag\">@return</span> index of the element\r\n */</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">interpolationSearch</span><span class=\"hljs-params\">(arr: <span class=\"hljs-type\">IntArray</span>, lo: <span class=\"hljs-type\">Int</span>,\r\n                        hi: <span class=\"hljs-type\">Int</span>, x: <span class=\"hljs-type\">Int</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\r\n    <span class=\"hljs-keyword\">val</span> pos: <span class=\"hljs-built_in\">Int</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (lo &lt;= hi &amp;&amp; x &gt;= arr[lo] &amp;&amp; x &lt;= arr[hi]) {\r\n\r\n        pos = (lo\r\n                + ((hi - lo) / (arr[hi] - arr[lo])\r\n                * (x - arr[lo])))\r\n\r\n        <span class=\"hljs-keyword\">if</span> (arr[pos] == x) <span class=\"hljs-keyword\">return</span> pos\r\n\r\n        <span class=\"hljs-keyword\">if</span> (arr[pos] &lt; x) <span class=\"hljs-keyword\">return</span> interpolationSearch(arr, pos + <span class=\"hljs-number\">1</span>, hi,\r\n                x)\r\n\r\n        <span class=\"hljs-keyword\">if</span> (arr[pos] &gt; x) <span class=\"hljs-keyword\">return</span> interpolationSearch(arr, lo, pos - <span class=\"hljs-number\">1</span>,\r\n                x)\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\r\n}"
    },
    "julia": {
      "dir": "src\\searches\\interpolation_search.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\searches\\interpolation_search.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n# Interpolation Search\r\nUsed for sorted array which is uniformly distributed.\r\nBinary Search always goes to the middle element to check. On the other hand, interpolation search may go to different locations according to the value of the key being searched. For example, if the value of the key is closer to the last element, interpolation search is likely to start search toward the end side.\r\nThe idea of formula is to return higher value of pos when element to be searched is closer to arr[hi]. And smaller value when closer to arr[lo]\r\npos = lo + [ (x-arr[lo])*(hi-lo) / (arr[hi]-arr[Lo]) ]\r\n- arr[] ==&gt; Array where elements need to be searched\r\n- x     ==&gt; Element to be searched\r\n- lo    ==&gt; Starting index in arr[]\r\n- hi    ==&gt; Ending index in arr[]\r\n## Derivation =&gt;\r\nLet&#x27;s assume that the elements of the array are linearly distributed.\r\nGeneral equation of line : y = m*x + c.\r\ny is the value in the array and x is its index.\r\nNow putting value of lo,hi and x in the equation\r\n- arr[hi] = m*hi+c ----(1)\r\n- arr[lo] = m*lo+c ----(2)\r\n- x = m*pos + c     ----(3)\r\nm = (arr[hi] - arr[lo] )/ (hi - lo)\r\nsubtracting eqxn (2) from (3)\r\n- x - arr[lo] = m * (pos - lo)\r\n- lo + (x - arr[lo])/m = pos\r\n- pos = lo + (x - arr[lo]) *(hi - lo)/(arr[hi] - arr[lo])\r\n## Algorithm:\r\nRest of the Interpolation algorithm is the same except the above partition logic.\r\n- Step1: In a loop, calculate the value of “pos” using the probe position formula.\r\n- Step2: If it is a match, return the index of the item, and exit.\r\n- Step3: If the item is less than arr[pos], calculate the probe position of the left sub-array. Otherwise calculate the same in the right sub-array.\r\n- Step4: Repeat until a match is found or the sub-array reduces to zero.\r\n\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n\t interpolation_search(arr::AbstractArray{T,1}, l::T, r::T, x::T) where {T &lt;: Real}\r\n\r\nInterpolation Search in 1-D array\r\nTime Complexity: O(log2(log2 n))\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> interpolation_search(arr::<span class=\"hljs-built_in\">AbstractArray</span>{T,<span class=\"hljs-number\">1</span>}, l::T, r::T, x::T) <span class=\"hljs-keyword\">where</span> {T &lt;: <span class=\"hljs-built_in\">Real</span>}\r\n\tn = size(arr)[<span class=\"hljs-number\">1</span>]\r\n\t<span class=\"hljs-keyword\">if</span> (r &gt;= l &amp;&amp; x &gt;= arr[l] &amp;&amp; x &lt;= arr[r])\r\n\t\tmid = <span class=\"hljs-built_in\">Int</span>(ceil(l + (((x - arr[l]) * (r - l)) / (arr[r] - arr[l]))))\r\n\t\t<span class=\"hljs-keyword\">if</span> (arr[mid] == x)\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Element present at index <span class=\"hljs-variable\">$mid</span>&quot;</span>\r\n\t\t<span class=\"hljs-keyword\">elseif</span> (arr[mid] &gt; x)\r\n\t\t\tinterpolation_search(arr, l, mid - <span class=\"hljs-number\">1</span>, x)\r\n\t\t<span class=\"hljs-keyword\">else</span>\r\n\t\t\tinterpolation_search(arr, mid + <span class=\"hljs-number\">1</span>, r, x)\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">else</span>\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Element not present in array&quot;</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Abhishek",
      "email": "raabhishek2@gmail.com",
      "commits": 1
    },
    {
      "name": "walter-ind",
      "email": "52423075+walter-ind@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "CrisesKhaos",
      "email": "76253854+CrisesKhaos@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "Hariprasad",
      "email": "hariprasadcsmails@gmail.com",
      "commits": 1
    },
    {
      "name": "James Mc Dermott",
      "email": "james.mcdermott89@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 1
    },
    {
      "name": "akshayanvi",
      "email": "35013678+akshayanvi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Yang Libin",
      "email": "contact@yanglibin.info",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Lakshika Parihar",
      "email": "31981299+lakshika1064@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "weixuanhu",
      "email": "44716380+weixuanhu@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Sarbajit Saha",
      "email": "sarbajitsaha1@gmail.com",
      "commits": 1
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Akshay Kumar",
      "email": "gakkikumar@gmail.com",
      "commits": 2
    },
    {
      "name": "LefterisD",
      "email": "elefthed@csd.auth.gr",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}