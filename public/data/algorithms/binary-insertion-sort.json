{
  "slug": "binary-insertion-sort",
  "name": "Binary Insertion Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting\\binary_insertion_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\binary_insertion_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\brief [Binary Insertion Sort Algorithm\r\n * (Insertion Sort)](https://en.wikipedia.org/wiki/Insertion_sort)\r\n *\r\n * \\details\r\n * If the cost of comparisons exceeds the cost of swaps, as is the case for\r\n * example with string keys stored by reference or with human interaction (such\r\n * as choosing one of a pair displayed side-by-side), then using binary\r\n * insertion sort may yield better performance. Binary insertion sort employs a\r\n * binary search to determine the correct location to insert new elements, and\r\n * therefore performs ⌈log2 n⌉ comparisons in the worst case. When each element\r\n * in the array is searched for and inserted this is O(n log n). The algorithm\r\n * as a whole still has a running time of O(n2) on average because of the series\r\n * * of swaps required for each insertion. However it has several advantages\r\n * such as\r\n * 1. Easy to implement\r\n * 2. For small set of data it is quite efficient\r\n * 3. More efficient that other Quadratic complexity algorithms like\r\n *    Selection sort or bubble sort.\r\n * 4. It is efficient to use it when the cost of comparison is high.\r\n * 5. It&#x27;s stable that is it does not change the relative order of\r\n *    elements with equal keys.\r\n * 6. It can sort the array or list as it receives.\r\n *\r\n * Example execution steps:\r\n * 1. Suppose initially we have\r\n * \\f{bmatrix}{40 &amp;30 &amp;20 &amp;50 &amp;10\\f}\r\n * 2. We start traversing from 40 till we reach 10\r\n * when we reach at 30 we find that it is not at it&#x27;s correct place so we take\r\n * 30 and place it at a correct position thus the array will become\r\n * \\f{bmatrix}{30 &amp;40 &amp;20 &amp;50 &amp;10\\f}\r\n * 3. In the next iteration we are at 20 we find that this is also misplaced so\r\n * we place it at the correct sorted position thus the array in this iteration\r\n * becomes\r\n * \\f{bmatrix}{20 &amp;30 &amp;40 &amp;50 &amp;10\\f}\r\n * 4. We do not do anything with 50 and move on to the next iteration and\r\n * select 10 which is misplaced and place it at correct position. Thus, we have\r\n * \\f{bmatrix}{10 &amp;20 &amp;30 &amp;40 &amp;50\\f}\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for algorithm functions</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for working with vectors</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * \\namespace sorting\r\n * @brief Sorting algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> sorting {\r\n\r\n<span class=\"hljs-comment\">/**\r\n * \\brief Binary search function to find the most suitable pace for an element.\r\n * \\tparam T The generic data type.\r\n * \\param arr The actual vector in which we are searching a suitable place for\r\n * the element. \\param val The value for which suitable place is to be found.\r\n * \\param low The lower bound of the range we are searching in.\r\n * \\param high The upper bound of the range we are searching in.\r\n * \\returns the index of most suitable position of val.\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">T</span>&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title\">binary_search</span><span class=\"hljs-params\">(std::vector&lt;T&gt; &amp;arr, T val, <span class=\"hljs-type\">int64_t</span> low, <span class=\"hljs-type\">int64_t</span> high)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (high &lt;= low) {\r\n        <span class=\"hljs-keyword\">return</span> (val &gt; arr[low]) ? (low + <span class=\"hljs-number\">1</span>) : low;\r\n    }\r\n    <span class=\"hljs-type\">int64_t</span> mid = low + (high - low) / <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-keyword\">if</span> (arr[mid] &gt; val) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">binary_search</span>(arr, val, low, mid - <span class=\"hljs-number\">1</span>);\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[mid] &lt; val) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">binary_search</span>(arr, val, mid + <span class=\"hljs-number\">1</span>, high);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">return</span> mid + <span class=\"hljs-number\">1</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * \\brief Insertion sort function to sort the vector.\r\n * \\tparam T The generic data type.\r\n * \\param arr The actual vector to sort.\r\n * \\returns Void.\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertionSort_binsrch</span><span class=\"hljs-params\">(std::vector&lt;T&gt; &amp;arr)</span> </span>{\r\n    <span class=\"hljs-type\">int64_t</span> n = arr.<span class=\"hljs-built_in\">size</span>();\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\r\n        T key = arr[i];\r\n        <span class=\"hljs-type\">int64_t</span> j = i - <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int64_t</span> loc = sorting::<span class=\"hljs-built_in\">binary_search</span>(arr, key, <span class=\"hljs-number\">0</span>, j);\r\n        <span class=\"hljs-keyword\">while</span> (j &gt;= loc) {\r\n            arr[j + <span class=\"hljs-number\">1</span>] = arr[j];\r\n            j--;\r\n        }\r\n        arr[j + <span class=\"hljs-number\">1</span>] = key;\r\n    }\r\n}\r\n}  <span class=\"hljs-comment\">// namespace sorting</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">/* descriptions of the following test */</span>\r\n    <span class=\"hljs-comment\">/* 1st test:\r\n       [5, -3, -1, -2, 7] returns [-3, -2, -1, 5, 7] */</span>\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; <span class=\"hljs-title\">arr1</span><span class=\"hljs-params\">({<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">-3</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">7</span>})</span></span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test... &quot;</span>;\r\n    sorting::<span class=\"hljs-built_in\">insertionSort_binsrch</span>(arr1);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr1), std::<span class=\"hljs-built_in\">end</span>(arr1)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">/* 2nd test:\r\n       [12, 26, 15, 91, 32, 54, 41] returns [12, 15, 26, 32, 41, 54, 91] */</span>\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; <span class=\"hljs-title\">arr2</span><span class=\"hljs-params\">({<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">91</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">41</span>})</span></span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test... &quot;</span>;\r\n    sorting::<span class=\"hljs-built_in\">insertionSort_binsrch</span>(arr2);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr2), std::<span class=\"hljs-built_in\">end</span>(arr2)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">/* 3rd test:\r\n       [7.1, -2.5, -4.0, -2.1, 5.7] returns [-4.0, -2.5, -2.1, 5.7, 7.1] */</span>\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">arr3</span><span class=\"hljs-params\">({<span class=\"hljs-number\">7.1</span>, <span class=\"hljs-number\">-2.5</span>, <span class=\"hljs-number\">-4.0</span>, <span class=\"hljs-number\">-2.1</span>, <span class=\"hljs-number\">5.7</span>})</span></span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test... &quot;</span>;\r\n    sorting::<span class=\"hljs-built_in\">insertionSort_binsrch</span>(arr3);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr3), std::<span class=\"hljs-built_in\">end</span>(arr3)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">/* 4th test:\r\n       [12.8, -3.7, -20.7, -7.1, 2.2] returns [-20.7, -7.1, -3.7, 2.2, 12.8] */</span>\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">arr4</span><span class=\"hljs-params\">({<span class=\"hljs-number\">12.8</span>, <span class=\"hljs-number\">-3.7</span>, <span class=\"hljs-number\">-20.7</span>, <span class=\"hljs-number\">-7.1</span>, <span class=\"hljs-number\">2.2</span>})</span></span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4th test... &quot;</span>;\r\n    sorting::<span class=\"hljs-built_in\">insertionSort_binsrch</span>(arr4);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(arr4), std::<span class=\"hljs-built_in\">end</span>(arr4)));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @return 0 on exit.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\binary_insertion_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\binary_insertion_sort.c",
      "code": "<span class=\"hljs-comment\">/* Sorting of array list using binary insertion sort\r\n * Using binary search to find the proper location for\r\n * inserting the selected item at each iteration. */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/*Displays the array, passed to this method*/</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">binarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (low &gt;= high)\r\n        <span class=\"hljs-keyword\">return</span> (key &gt; arr[low]) ? (low + <span class=\"hljs-number\">1</span>) : low;\r\n    <span class=\"hljs-type\">int</span> mid = low + (high - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\r\n    <span class=\"hljs-keyword\">if</span> (arr[mid] == key)\r\n        <span class=\"hljs-keyword\">return</span> mid + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[mid] &gt; key)\r\n        <span class=\"hljs-keyword\">return</span> binarySearch(arr, key, low, mid - <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> binarySearch(arr, key, mid + <span class=\"hljs-number\">1</span>, high);\r\n}\r\n<span class=\"hljs-comment\">/*This is where the sorting of the array takes place\r\n arr[] --- Array to be sorted\r\n size --- Array Size\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, j, key, index;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\r\n    {\r\n        j = i - <span class=\"hljs-number\">1</span>;\r\n        key = arr[i];\r\n        <span class=\"hljs-comment\">/* Use binrary search to find exact key&#x27;s index */</span>\r\n        index = binarySearch(arr, key, <span class=\"hljs-number\">0</span>, j);\r\n        <span class=\"hljs-comment\">/* Move all elements greater than key from [index...j]\r\n         * to one position */</span>\r\n        <span class=\"hljs-keyword\">while</span> (j &gt;= index)\r\n        {\r\n            arr[j + <span class=\"hljs-number\">1</span>] = arr[j];\r\n            j = j - <span class=\"hljs-number\">1</span>;\r\n        }\r\n        <span class=\"hljs-comment\">/* Insert key value in right place */</span>\r\n        arr[j + <span class=\"hljs-number\">1</span>] = key;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> n;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter size of array:\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);  <span class=\"hljs-comment\">// E.g. 8</span>\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the elements of the array\\n&quot;</span>);\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Original array: &quot;</span>);\r\n    display(arr, n);\r\n\r\n    insertionSort(arr, n);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\r\n    display(arr, n);\r\n\r\n    <span class=\"hljs-built_in\">free</span>(arr);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/BinaryInsertionSorter.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sorters\\Comparison\\BinaryInsertionSorter.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>TODO. 2.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinaryInsertionSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using specified comparer,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     variant of insertion sort where binary search is used to find place for next element</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     internal, in-place, unstable,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n^2),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt; array.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> target = array[i];\r\n                <span class=\"hljs-keyword\">var</span> moveIndex = i - <span class=\"hljs-number\">1</span>;\r\n                <span class=\"hljs-keyword\">var</span> targetInsertLocation = BinarySearch(array, <span class=\"hljs-number\">0</span>, moveIndex, target, comparer);\r\n                Array.Copy(array, targetInsertLocation, array, targetInsertLocation + <span class=\"hljs-number\">1</span>, i - targetInsertLocation);\r\n\r\n                array[targetInsertLocation] = target;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span>Implementation of Binary Search using an iterative approach.<span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     An array of values sorted in ascending order between the index values left and right to search</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     through.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;from&quot;&gt;</span>Left index to search from (inclusive).<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;to&quot;&gt;</span>Right index to search to (inclusive).<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;target&quot;&gt;</span>The value to find placefor in the provided array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>TODO.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The index where to insert target value.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">BinarySearch</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-built_in\">int</span> to, T target, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> left = <span class=\"hljs-keyword\">from</span>;\r\n            <span class=\"hljs-keyword\">var</span> right = to;\r\n            <span class=\"hljs-keyword\">while</span> (right &gt; left)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> middle = (left + right) / <span class=\"hljs-number\">2</span>;\r\n                <span class=\"hljs-keyword\">var</span> comparisonResult = comparer.Compare(target, array[middle]);\r\n\r\n                <span class=\"hljs-keyword\">if</span> (comparisonResult == <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> middle + <span class=\"hljs-number\">1</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (comparisonResult &gt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    left = middle + <span class=\"hljs-number\">1</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    right = middle - <span class=\"hljs-number\">1</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> comparer.Compare(target, array[left]) &lt; <span class=\"hljs-number\">0</span> ? left : left + <span class=\"hljs-number\">1</span>;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Sombit Bose",
      "email": "sombit.bose15@gmail.com",
      "commits": 1
    },
    {
      "name": "yyash01",
      "email": "yjain3.436@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 1
    },
    {
      "name": "neelneelpurk",
      "email": "soumyadeep1999.np@gmail.com",
      "commits": 1
    },
    {
      "name": "Siddhartha Shankar Padhy",
      "email": "83332618+Siddhartha-Padhy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "rkessler1248",
      "email": "rkessler1248@yahoo.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}