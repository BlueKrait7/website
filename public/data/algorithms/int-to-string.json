{
  "slug": "int-to-string",
  "name": "Int to String",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "conversions\\int_to_string.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\int_to_string.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Convert a positive integer to string (non-standard function)\r\n * representation.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Converts an integer value to a null-terminated string using the specified\r\n * base and stores the result in the array given by str parameter.\r\n * @param value Value to be converted to a string.\r\n * @param dest pointer to array in memory to store the resulting null-terminated\r\n * string.\r\n * @param base Numerical base used to represent the value as a string, between 2\r\n * and 16, where 10 means decimal base, 16 hexadecimal, 8 octal, and 2 binary.\r\n * @returns A pointer to the resulting null-terminated string, same as parameter\r\n * str.\r\n * @note The destination array must be pre-allocated by the calling function.\r\n */</span>\r\n<span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">int_to_string</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint16_t</span> value, <span class=\"hljs-type\">char</span> *dest, <span class=\"hljs-type\">int</span> base)</span>\r\n{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> hex_table[] = {<span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>, <span class=\"hljs-string\">&#x27;4&#x27;</span>, <span class=\"hljs-string\">&#x27;5&#x27;</span>, <span class=\"hljs-string\">&#x27;6&#x27;</span>, <span class=\"hljs-string\">&#x27;7&#x27;</span>,\r\n                              <span class=\"hljs-string\">&#x27;8&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>};\r\n\r\n    <span class=\"hljs-type\">int</span> len = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">do</span>\r\n    {\r\n        dest[len++] = hex_table[value % base];\r\n        value /= base;\r\n    } <span class=\"hljs-keyword\">while</span> (value != <span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-comment\">/* reverse characters */</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, limit = len / <span class=\"hljs-number\">2</span>; i &lt; limit; ++i)\r\n    {\r\n        <span class=\"hljs-type\">char</span> t = dest[i];\r\n        dest[i] = dest[len - <span class=\"hljs-number\">1</span> - i];\r\n        dest[len - <span class=\"hljs-number\">1</span> - i] = t;\r\n    }\r\n    dest[len] = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\r\n    <span class=\"hljs-keyword\">return</span> dest;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Test function\r\n * @returns `void`\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAX_SIZE = <span class=\"hljs-number\">100</span>;\r\n    <span class=\"hljs-type\">char</span> *str1 = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>), MAX_SIZE);\r\n    <span class=\"hljs-type\">char</span> *str2 = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>), MAX_SIZE);\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">100</span>; ++i) <span class=\"hljs-comment\">/* test 100 random numbers */</span>\r\n    {\r\n        <span class=\"hljs-comment\">/* Generate value from 0 to 100 */</span>\r\n        <span class=\"hljs-type\">int</span> value = rand() % <span class=\"hljs-number\">100</span>;\r\n\r\n        <span class=\"hljs-comment\">// assert(strcmp(itoa(value, str1, 2), int_to_string(value, str2, 2)) ==</span>\r\n        <span class=\"hljs-comment\">//        0);</span>\r\n        <span class=\"hljs-built_in\">snprintf</span>(str1, MAX_SIZE, <span class=\"hljs-string\">&quot;%o&quot;</span>, value);  <span class=\"hljs-comment\">//* standard C - to octal */</span>\r\n        assert(<span class=\"hljs-built_in\">strcmp</span>(str1, int_to_string(value, str2, <span class=\"hljs-number\">8</span>)) == <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-built_in\">snprintf</span>(str1, MAX_SIZE, <span class=\"hljs-string\">&quot;%d&quot;</span>, value); <span class=\"hljs-comment\">/* standard C - to decimal */</span>\r\n        assert(<span class=\"hljs-built_in\">strcmp</span>(str1, int_to_string(value, str2, <span class=\"hljs-number\">10</span>)) == <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-built_in\">snprintf</span>(str1, MAX_SIZE, <span class=\"hljs-string\">&quot;%x&quot;</span>, value); <span class=\"hljs-comment\">/* standard C - to hexadecimal */</span>\r\n        assert(<span class=\"hljs-built_in\">strcmp</span>(str1, int_to_string(value, str2, <span class=\"hljs-number\">16</span>)) == <span class=\"hljs-number\">0</span>);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">free</span>(str1);\r\n    <span class=\"hljs-built_in\">free</span>(str2);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Driver Code */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-comment\">/* Intializes random number generator */</span>\r\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\r\n    test();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}