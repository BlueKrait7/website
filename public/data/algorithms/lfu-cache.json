{
  "slug": "lfu-cache",
  "name": "Lfu Cache",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other\\lfu_cache.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other\\lfu_cache.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>, <span class=\"hljs-type\">Generic</span>, TypeVar\r\n\r\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\r\nU = TypeVar(<span class=\"hljs-string\">&quot;U&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedListNode</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Double Linked List Node built specifically for LFU Cache\r\n\r\n    &gt;&gt;&gt; node = DoubleLinkedListNode(1,1)\r\n    &gt;&gt;&gt; node\r\n    Node: key: 1, val: 1, freq: 0, has next: False, has prev: False\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, key: T | <span class=\"hljs-literal\">None</span>, val: U | <span class=\"hljs-literal\">None</span></span>):\r\n        self.key = key\r\n        self.val = val\r\n        self.freq: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\r\n        self.<span class=\"hljs-built_in\">next</span>: DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.prev: DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Node: key: {}, val: {}, freq: {}, has next: {}, has prev: {}&quot;</span>.<span class=\"hljs-built_in\">format</span>(\r\n            self.key, self.val, self.freq, self.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>, self.prev <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        )\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Double Linked List built specifically for LFU Cache\r\n\r\n    &gt;&gt;&gt; dll: DoubleLinkedList = DoubleLinkedList()\r\n    &gt;&gt;&gt; dll\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\r\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\r\n\r\n    &gt;&gt;&gt; first_node = DoubleLinkedListNode(1,10)\r\n    &gt;&gt;&gt; first_node\r\n    Node: key: 1, val: 10, freq: 0, has next: False, has prev: False\r\n\r\n\r\n    &gt;&gt;&gt; dll.add(first_node)\r\n    &gt;&gt;&gt; dll\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\r\n        Node: key: 1, val: 10, freq: 1, has next: True, has prev: True,\r\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\r\n\r\n    &gt;&gt;&gt; # node is mutated\r\n    &gt;&gt;&gt; first_node\r\n    Node: key: 1, val: 10, freq: 1, has next: True, has prev: True\r\n\r\n    &gt;&gt;&gt; second_node = DoubleLinkedListNode(2,20)\r\n    &gt;&gt;&gt; second_node\r\n    Node: key: 2, val: 20, freq: 0, has next: False, has prev: False\r\n\r\n    &gt;&gt;&gt; dll.add(second_node)\r\n    &gt;&gt;&gt; dll\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\r\n        Node: key: 1, val: 10, freq: 1, has next: True, has prev: True,\r\n        Node: key: 2, val: 20, freq: 1, has next: True, has prev: True,\r\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\r\n\r\n    &gt;&gt;&gt; removed_node = dll.remove(first_node)\r\n    &gt;&gt;&gt; assert removed_node == first_node\r\n    &gt;&gt;&gt; dll\r\n    DoubleLinkedList,\r\n        Node: key: None, val: None, freq: 0, has next: True, has prev: False,\r\n        Node: key: 2, val: 20, freq: 1, has next: True, has prev: True,\r\n        Node: key: None, val: None, freq: 0, has next: False, has prev: True\r\n\r\n\r\n    &gt;&gt;&gt; # Attempt to remove node not on list\r\n    &gt;&gt;&gt; removed_node = dll.remove(first_node)\r\n    &gt;&gt;&gt; removed_node is None\r\n    True\r\n\r\n    &gt;&gt;&gt; # Attempt to remove head or rear\r\n    &gt;&gt;&gt; dll.head\r\n    Node: key: None, val: None, freq: 0, has next: True, has prev: False\r\n    &gt;&gt;&gt; dll.remove(dll.head) is None\r\n    True\r\n\r\n    &gt;&gt;&gt; # Attempt to remove head or rear\r\n    &gt;&gt;&gt; dll.rear\r\n    Node: key: None, val: None, freq: 0, has next: False, has prev: True\r\n    &gt;&gt;&gt; dll.remove(dll.rear) is None\r\n    True\r\n\r\n\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.head: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\r\n        self.rear: DoubleLinkedListNode[T, U] = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\r\n        self.head.<span class=\"hljs-built_in\">next</span>, self.rear.prev = self.rear, self.head\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        rep = [<span class=\"hljs-string\">&quot;DoubleLinkedList&quot;</span>]\r\n        node = self.head\r\n        <span class=\"hljs-keyword\">while</span> node.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            rep.append(<span class=\"hljs-built_in\">str</span>(node))\r\n            node = node.<span class=\"hljs-built_in\">next</span>\r\n        rep.append(<span class=\"hljs-built_in\">str</span>(self.rear))\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;,\\n    &quot;</span>.join(rep)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">self, node: DoubleLinkedListNode[T, U]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Adds the given node at the tail of the list and shifting it to proper position\r\n        &quot;&quot;&quot;</span>\r\n\r\n        previous = self.rear.prev\r\n\r\n        <span class=\"hljs-comment\"># All nodes other than self.head are guaranteed to have non-None previous</span>\r\n        <span class=\"hljs-keyword\">assert</span> previous <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n\r\n        previous.<span class=\"hljs-built_in\">next</span> = node\r\n        node.prev = previous\r\n        self.rear.prev = node\r\n        node.<span class=\"hljs-built_in\">next</span> = self.rear\r\n        node.freq += <span class=\"hljs-number\">1</span>\r\n        self._position_node(node)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_position_node</span>(<span class=\"hljs-params\">self, node: DoubleLinkedListNode[T, U]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Moves node forward to maintain invariant of sort by freq value\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">while</span> node.prev <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> node.prev.freq &gt; node.freq:\r\n            <span class=\"hljs-comment\"># swap node with previous node</span>\r\n            previous_node = node.prev\r\n\r\n            node.prev = previous_node.prev\r\n            previous_node.<span class=\"hljs-built_in\">next</span> = node.prev\r\n            node.<span class=\"hljs-built_in\">next</span> = previous_node\r\n            previous_node.prev = node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">\r\n        self, node: DoubleLinkedListNode[T, U]\r\n    </span>) -&gt; DoubleLinkedListNode[T, U] | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Removes and returns the given node from the list\r\n\r\n        Returns None if node.prev or node.next is None\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> node.prev <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> node.<span class=\"hljs-built_in\">next</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n        node.prev.<span class=\"hljs-built_in\">next</span> = node.<span class=\"hljs-built_in\">next</span>\r\n        node.<span class=\"hljs-built_in\">next</span>.prev = node.prev\r\n        node.prev = <span class=\"hljs-literal\">None</span>\r\n        node.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">return</span> node\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LFUCache</span>(<span class=\"hljs-type\">Generic</span>[T, U]):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    LFU Cache to store a given capacity of data. Can be used as a stand-alone object\r\n    or as a function decorator.\r\n\r\n    &gt;&gt;&gt; cache = LFUCache(2)\r\n    &gt;&gt;&gt; cache.set(1, 1)\r\n    &gt;&gt;&gt; cache.set(2, 2)\r\n    &gt;&gt;&gt; cache.get(1)\r\n    1\r\n    &gt;&gt;&gt; cache.set(3, 3)\r\n    &gt;&gt;&gt; cache.get(2) is None\r\n    True\r\n    &gt;&gt;&gt; cache.set(4, 4)\r\n    &gt;&gt;&gt; cache.get(1) is None\r\n    True\r\n    &gt;&gt;&gt; cache.get(3)\r\n    3\r\n    &gt;&gt;&gt; cache.get(4)\r\n    4\r\n    &gt;&gt;&gt; cache\r\n    CacheInfo(hits=3, misses=2, capacity=2, current_size=2)\r\n    &gt;&gt;&gt; @LFUCache.decorator(100)\r\n    ... def fib(num):\r\n    ...     if num in (1, 2):\r\n    ...         return 1\r\n    ...     return fib(num - 1) + fib(num - 2)\r\n\r\n    &gt;&gt;&gt; for i in range(1, 101):\r\n    ...     res = fib(i)\r\n\r\n    &gt;&gt;&gt; fib.cache_info()\r\n    CacheInfo(hits=196, misses=100, capacity=100, current_size=100)\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># class variable to map the decorator functions to their respective instance</span>\r\n    decorator_function_to_instance_map: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-type\">Callable</span>[[T], U], LFUCache[T, U]] = {}\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, capacity: <span class=\"hljs-built_in\">int</span></span>):\r\n        self.<span class=\"hljs-built_in\">list</span>: DoubleLinkedList[T, U] = DoubleLinkedList()\r\n        self.capacity = capacity\r\n        self.num_keys = <span class=\"hljs-number\">0</span>\r\n        self.hits = <span class=\"hljs-number\">0</span>\r\n        self.miss = <span class=\"hljs-number\">0</span>\r\n        self.cache: <span class=\"hljs-built_in\">dict</span>[T, DoubleLinkedListNode[T, U]] = {}\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the details for the cache instance\r\n        [hits, misses, capacity, current_size]\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"hljs-string\">f&quot;CacheInfo(hits=<span class=\"hljs-subst\">{self.hits}</span>, misses=<span class=\"hljs-subst\">{self.miss}</span>, &quot;</span>\r\n            <span class=\"hljs-string\">f&quot;capacity=<span class=\"hljs-subst\">{self.capacity}</span>, current_size=<span class=\"hljs-subst\">{self.num_keys}</span>)&quot;</span>\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__contains__</span>(<span class=\"hljs-params\">self, key: T</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; cache = LFUCache(1)\r\n\r\n        &gt;&gt;&gt; 1 in cache\r\n        False\r\n\r\n        &gt;&gt;&gt; cache.set(1, 1)\r\n        &gt;&gt;&gt; 1 in cache\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">return</span> key <span class=\"hljs-keyword\">in</span> self.cache\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self, key: T</span>) -&gt; U | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Returns the value for the input key and updates the Double Linked List. Returns\r\n        Returns None if key is not present in cache\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">in</span> self.cache:\r\n            self.hits += <span class=\"hljs-number\">1</span>\r\n            value_node: DoubleLinkedListNode[T, U] = self.cache[key]\r\n            node = self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key])\r\n            <span class=\"hljs-keyword\">assert</span> node == value_node\r\n\r\n            <span class=\"hljs-comment\"># node is guaranteed not None because it is in self.cache</span>\r\n            <span class=\"hljs-keyword\">assert</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n            self.<span class=\"hljs-built_in\">list</span>.add(node)\r\n            <span class=\"hljs-keyword\">return</span> node.val\r\n        self.miss += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">self, key: T, value: U</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Sets the value for the input key and updates the Double Linked List\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.cache:\r\n            <span class=\"hljs-keyword\">if</span> self.num_keys &gt;= self.capacity:\r\n                <span class=\"hljs-comment\"># delete first node when over capacity</span>\r\n                first_node = self.<span class=\"hljs-built_in\">list</span>.head.<span class=\"hljs-built_in\">next</span>\r\n\r\n                <span class=\"hljs-comment\"># guaranteed to have a non-None first node when num_keys &gt; 0</span>\r\n                <span class=\"hljs-comment\"># explain to type checker via assertions</span>\r\n                <span class=\"hljs-keyword\">assert</span> first_node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n                <span class=\"hljs-keyword\">assert</span> first_node.key <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n                <span class=\"hljs-keyword\">assert</span> self.<span class=\"hljs-built_in\">list</span>.remove(first_node) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n                <span class=\"hljs-comment\"># first_node guaranteed to be in list</span>\r\n\r\n                <span class=\"hljs-keyword\">del</span> self.cache[first_node.key]\r\n                self.num_keys -= <span class=\"hljs-number\">1</span>\r\n            self.cache[key] = DoubleLinkedListNode(key, value)\r\n            self.<span class=\"hljs-built_in\">list</span>.add(self.cache[key])\r\n            self.num_keys += <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            node = self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key])\r\n            <span class=\"hljs-keyword\">assert</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># node guaranteed to be in list</span>\r\n            node.val = value\r\n            self.<span class=\"hljs-built_in\">list</span>.add(node)\r\n\r\n<span class=\"hljs-meta\">    @classmethod</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decorator</span>(<span class=\"hljs-params\">\r\n        cls: <span class=\"hljs-built_in\">type</span>[LFUCache[T, U]], size: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">128</span>\r\n    </span>) -&gt; <span class=\"hljs-type\">Callable</span>[[<span class=\"hljs-type\">Callable</span>[[T], U]], <span class=\"hljs-type\">Callable</span>[..., U]]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Decorator version of LFU Cache\r\n\r\n        Decorated function must be function of T -&gt; U\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_inner</span>(<span class=\"hljs-params\">func: <span class=\"hljs-type\">Callable</span>[[T], U]</span>) -&gt; <span class=\"hljs-type\">Callable</span>[..., U]:\r\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_wrapper</span>(<span class=\"hljs-params\">*args: T</span>) -&gt; U:\r\n                <span class=\"hljs-keyword\">if</span> func <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> cls.decorator_function_to_instance_map:\r\n                    cls.decorator_function_to_instance_map[func] = LFUCache(size)\r\n\r\n                result = cls.decorator_function_to_instance_map[func].get(args[<span class=\"hljs-number\">0</span>])\r\n                <span class=\"hljs-keyword\">if</span> result <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                    result = func(*args)\r\n                    cls.decorator_function_to_instance_map[func].<span class=\"hljs-built_in\">set</span>(args[<span class=\"hljs-number\">0</span>], result)\r\n                <span class=\"hljs-keyword\">return</span> result\r\n\r\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_info</span>() -&gt; LFUCache[T, U]:\r\n                <span class=\"hljs-keyword\">return</span> cls.decorator_function_to_instance_map[func]\r\n\r\n            <span class=\"hljs-built_in\">setattr</span>(cache_decorator_wrapper, <span class=\"hljs-string\">&quot;cache_info&quot;</span>, cache_info)\r\n\r\n            <span class=\"hljs-keyword\">return</span> cache_decorator_wrapper\r\n\r\n        <span class=\"hljs-keyword\">return</span> cache_decorator_inner\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Cache\\test\\LFUCache.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Cache\\test\\LFUCache.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">LFUCache</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../LFUCache&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;LFUCache&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Example 1 (Small Cache, size=2)&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LFUCache</span>(<span class=\"hljs-number\">2</span>)\r\n    cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\r\n    cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-comment\">// Additional entries triggers cache rotate</span>\r\n    cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\r\n\r\n    <span class=\"hljs-comment\">// Then we should have a cache miss for the first entry added</span>\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">null</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">3</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>)\r\n\r\n    cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// cache miss</span>\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// cache miss</span>\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">3</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">4</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">4</span>)\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">cacheInfo</span>()).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;CacheInfo(hits=6, misses=3, capacity=2, current size=2)&#x27;</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Example 2 (Computing Fibonacci Series, size=100)&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LFUCache</span>(<span class=\"hljs-number\">100</span>)\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">100</span>; i++) {\r\n      <span class=\"hljs-title function_\">fib</span>(i, cache)\r\n    }\r\n    <span class=\"hljs-title function_\">expect</span>(cache.<span class=\"hljs-title function_\">cacheInfo</span>()).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;CacheInfo(hits=193, misses=103, capacity=100, current size=98)&#x27;</span>)\r\n  })\r\n})\r\n\r\n<span class=\"hljs-comment\">// Helper for building and caching Fibonacci series</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fib</span> (num, cache = <span class=\"hljs-literal\">null</span>) {\r\n  <span class=\"hljs-keyword\">if</span> (cache) {\r\n    <span class=\"hljs-keyword\">const</span> value = cache.<span class=\"hljs-title function_\">get</span>(num)\r\n    <span class=\"hljs-keyword\">if</span> (value) {\r\n      <span class=\"hljs-keyword\">return</span> value\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">if</span> (num === <span class=\"hljs-number\">1</span> || num === <span class=\"hljs-number\">2</span>) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\r\n  }\r\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">fib</span>(num - <span class=\"hljs-number\">1</span>, cache) + <span class=\"hljs-title function_\">fib</span>(num - <span class=\"hljs-number\">2</span>, cache)\r\n  <span class=\"hljs-keyword\">if</span> (cache) {\r\n    cache.<span class=\"hljs-title function_\">set</span>(num, result)\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> result\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrew Grangaard",
      "email": "granny-github@ofb.net",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}