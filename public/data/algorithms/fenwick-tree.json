{
  "slug": "fenwick-tree",
  "name": "Fenwick Tree",
  "categories": [
    "datastructures",
    "binarytree"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\binary_tree\\fenwick_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\binary_tree\\fenwick_tree.py",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FenwickTree</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, SIZE</span>):  <span class=\"hljs-comment\"># create fenwick tree with size SIZE</span>\r\n        self.Size = SIZE\r\n        self.ft = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, SIZE)]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">self, i, val</span>):  <span class=\"hljs-comment\"># update data (adding) in index i in O(lg N)</span>\r\n        <span class=\"hljs-keyword\">while</span> i &lt; self.Size:\r\n            self.ft[i] += val\r\n            i += i &amp; (-i)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">query</span>(<span class=\"hljs-params\">self, i</span>):  <span class=\"hljs-comment\"># query cumulative data from index 0 to i in O(lg N)</span>\r\n        ret = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">while</span> i &gt; <span class=\"hljs-number\">0</span>:\r\n            ret += self.ft[i]\r\n            i -= i &amp; (-i)\r\n        <span class=\"hljs-keyword\">return</span> ret\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    f = FenwickTree(<span class=\"hljs-number\">100</span>)\r\n    f.update(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>)\r\n    f.update(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>)\r\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">1</span>))\r\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">3</span>))\r\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">4</span>))\r\n    f.update(<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">5</span>)\r\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">1</span>))\r\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">3</span>))\r\n"
    },
    "javascript": {
      "dir": "Trees\\test\\FenwickTree.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Trees\\test\\FenwickTree.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">FenwickTree</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../FenwickTree&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Fenwick Tree Implementation&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> fenwickArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">1000</span>)\r\n  <span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\r\n  <span class=\"hljs-keyword\">const</span> length = array.<span class=\"hljs-property\">length</span>\r\n\r\n  <span class=\"hljs-keyword\">const</span> fenwickTree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FenwickTree</span>(fenwickArray, array, length)\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Fenwick Tree - Prefix sum of array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> prefixSum = fenwickTree.<span class=\"hljs-title function_\">getPrefixSum</span>(fenwickArray, <span class=\"hljs-number\">6</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(prefixSum).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">23</span>)\r\n  })\r\n\r\n  array[<span class=\"hljs-number\">2</span>] += <span class=\"hljs-number\">6</span>\r\n  fenwickTree.<span class=\"hljs-title function_\">update</span>(fenwickArray, length, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>)\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Fenwick Tree - Prefix sum of Updated array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> prefixSum = fenwickTree.<span class=\"hljs-title function_\">getPrefixSum</span>(fenwickArray, <span class=\"hljs-number\">6</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(prefixSum).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">23</span>)\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "range_queries\\fenwick_tree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/range_queries\\fenwick_tree.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Fenwick tree\r\n *\r\n * A Fenwick tree or binary indexed tree is a data structure\r\n * that can efficiently update elements and calculate\r\n * prefix sums in a table of numbers.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * n --&gt; No. of elements present in input array.\r\n * bit[0..n] --&gt; Array that represents Binary Indexed Tree.\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FenwickTree</span> {\r\n    <span class=\"hljs-type\">int</span> n;\r\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; bit;\r\n\r\n    <span class=\"hljs-comment\">/** Returns the highest power of two which is not more than x */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">offset</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{ <span class=\"hljs-keyword\">return</span> (x &amp; (-x)); }\r\n\r\n <span class=\"hljs-keyword\">public</span>:\r\n    <span class=\"hljs-comment\">/** Constructor\r\n     * \\param[in] arr --&gt; Input array for which prefix sum is evaluated.\r\n     */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">FenwickTree</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; arr)</span> </span>{\r\n        n = arr.<span class=\"hljs-built_in\">size</span>();\r\n        bit.<span class=\"hljs-built_in\">assign</span>(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n            <span class=\"hljs-built_in\">update</span>(i, arr[i]);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/** Constructor\r\n     * \\param[in] x --&gt; Size of array that represents Binary Indexed Tree.\r\n     */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">FenwickTree</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\r\n        n = x;\r\n        bit.<span class=\"hljs-built_in\">assign</span>(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/** Add val at id */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id, <span class=\"hljs-type\">int</span> val)</span> </span>{\r\n        id++;\r\n        <span class=\"hljs-keyword\">while</span> (id &lt;= n) {\r\n            bit[id] += val;\r\n            id += <span class=\"hljs-built_in\">offset</span>(id);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/** Get prefix sum upto id */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id)</span> </span>{\r\n        id++;\r\n        <span class=\"hljs-type\">int</span> res = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">while</span> (id &gt; <span class=\"hljs-number\">0</span>) {\r\n            res += bit[id];\r\n            id -= <span class=\"hljs-built_in\">offset</span>(id);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> res;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/** Returns the prefix sum in range from l to r */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum_range</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(r) - <span class=\"hljs-built_in\">sum</span>(l - <span class=\"hljs-number\">1</span>); }\r\n};\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">5</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; arr = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\r\n    <span class=\"hljs-function\">FenwickTree <span class=\"hljs-title\">fenwick_tree</span><span class=\"hljs-params\">(arr)</span></span>;\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">6</span>);\r\n    fenwick_tree.<span class=\"hljs-built_in\">update</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">6</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">8</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">11</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\FenwickTree.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\trees\\FenwickTree.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.trees;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FenwickTree</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> n;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> fen_t[];\r\n\r\n    <span class=\"hljs-comment\">/* Constructor which takes the size of the array as a parameter */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">FenwickTree</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.n = n;\r\n        <span class=\"hljs-built_in\">this</span>.fen_t = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* A function which will add the element val at index i*/</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> val)</span> {\r\n        <span class=\"hljs-comment\">// As index starts from 0, increment the index by 1</span>\r\n        i += <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">while</span> (i &lt;= n) {\r\n            fen_t[i] += val;\r\n            i += i &amp; (-i);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* A function which will return the cumulative sum from index 1 to index i*/</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">query</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> {\r\n        <span class=\"hljs-comment\">// As index starts from 0, increment the index by 1</span>\r\n        i += <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cumSum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">while</span> (i &gt; <span class=\"hljs-number\">0</span>) {\r\n            cumSum += fen_t[i];\r\n            i -= i &amp; (-i);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> cumSum;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "KanakalathaVemuru",
      "email": "46847239+KanakalathaVemuru@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "DDullahan",
      "email": "DDullahan@163.com",
      "commits": 1
    },
    {
      "name": "matgrz1993",
      "email": "matgrz1993@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Sarot Busala",
      "email": "sabuza97@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Mohit Kumar",
      "email": "74761614+itsmohitmkk@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}