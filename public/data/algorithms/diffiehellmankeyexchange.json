{
  "slug": "diffiehellmankeyexchange",
  "name": "Diffiehellmankeyexchange",
  "categories": [
    "ciphers",
    "diffiehellman"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "cipher\\diffiehellman\\diffiehellmankeyexchange.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/cipher\\diffiehellman\\diffiehellmankeyexchange.go",
      "code": "<span class=\"hljs-comment\">// Package diffiehellman implements Deffie Hellman Key Exchange Algorithm</span>\r\n<span class=\"hljs-comment\">// for more information watch : https://www.youtube.com/watch?v=NmM9HA2MQGI</span>\r\n<span class=\"hljs-keyword\">package</span> diffiehellman\r\n\r\n<span class=\"hljs-keyword\">const</span> (\r\n\tgenerator         = <span class=\"hljs-number\">3</span>\r\n\tprimeNumber <span class=\"hljs-type\">int64</span> = <span class=\"hljs-number\">6700417</span> <span class=\"hljs-comment\">// prime number discovered by Leonhard Euler</span>\r\n)\r\n\r\n<span class=\"hljs-comment\">// GenerateShareKey : generates a key using client private key , generator and primeNumber</span>\r\n<span class=\"hljs-comment\">// this key can be made public</span>\r\n<span class=\"hljs-comment\">// shareKey = (g^key)%primeNumber</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GenerateShareKey</span><span class=\"hljs-params\">(prvKey <span class=\"hljs-type\">int64</span>)</span></span> <span class=\"hljs-type\">int64</span> {\r\n\t<span class=\"hljs-keyword\">return</span> modularExponentiation(generator, prvKey, primeNumber)\r\n}\r\n\r\n<span class=\"hljs-comment\">// GenerateMutualKey : generates a mutual key that can be used by only alice and bob</span>\r\n<span class=\"hljs-comment\">// mutualKey = (shareKey^prvKey)%primeNumber</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GenerateMutualKey</span><span class=\"hljs-params\">(prvKey, shareKey <span class=\"hljs-type\">int64</span>)</span></span> <span class=\"hljs-type\">int64</span> {\r\n\t<span class=\"hljs-keyword\">return</span> modularExponentiation(shareKey, prvKey, primeNumber)\r\n}\r\n\r\n<span class=\"hljs-comment\">// r = (b^e)%mod</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modularExponentiation</span><span class=\"hljs-params\">(b, e, mod <span class=\"hljs-type\">int64</span>)</span></span> <span class=\"hljs-type\">int64</span> {\r\n\r\n\t<span class=\"hljs-comment\">//runs in O(log(n)) where n = e</span>\r\n\t<span class=\"hljs-comment\">//uses exponentiation by squaring to speed up the process</span>\r\n\t<span class=\"hljs-keyword\">if</span> mod == <span class=\"hljs-number\">1</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">var</span> r <span class=\"hljs-type\">int64</span> = <span class=\"hljs-number\">1</span>\r\n\tb = b % mod\r\n\t<span class=\"hljs-keyword\">for</span> e &gt; <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">if</span> e&amp;<span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> {\r\n\t\t\tr = (r * b) % mod\r\n\t\t}\r\n\t\te = e &gt;&gt; <span class=\"hljs-number\">1</span>\r\n\t\tb = (b * b) % mod\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> r\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Pritam Singh",
      "email": "43764373+Zzocker@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "yicheng wang",
      "email": "yichengww@gmail.com",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}