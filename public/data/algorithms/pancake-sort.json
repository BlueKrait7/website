{
  "slug": "pancake-sort",
  "name": "Pancake Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\pancake_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\pancake_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is a pure Python implementation of the pancake sort algorithm\r\nFor doctests run following command:\r\npython3 -m doctest -v pancake_sort.py\r\nor\r\npython -m doctest -v pancake_sort.py\r\nFor manual testing run:\r\npython pancake_sort.py\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pancake_sort</span>(<span class=\"hljs-params\">arr</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Sort Array with Pancake Sort.\r\n    :param arr: Collection containing comparable items\r\n    :return: Collection ordered in ascending order of items\r\n    Examples:\r\n    &gt;&gt;&gt; pancake_sort([0, 5, 3, 2, 2])\r\n    [0, 2, 2, 3, 5]\r\n    &gt;&gt;&gt; pancake_sort([])\r\n    []\r\n    &gt;&gt;&gt; pancake_sort([-2, -5, -45])\r\n    [-45, -5, -2]\r\n    &quot;&quot;&quot;</span>\r\n    cur = <span class=\"hljs-built_in\">len</span>(arr)\r\n    <span class=\"hljs-keyword\">while</span> cur &gt; <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-comment\"># Find the maximum number in arr</span>\r\n        mi = arr.index(<span class=\"hljs-built_in\">max</span>(arr[<span class=\"hljs-number\">0</span>:cur]))\r\n        <span class=\"hljs-comment\"># Reverse from 0 to mi</span>\r\n        arr = arr[mi::-<span class=\"hljs-number\">1</span>] + arr[mi + <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">len</span>(arr)]\r\n        <span class=\"hljs-comment\"># Reverse whole list</span>\r\n        arr = arr[cur - <span class=\"hljs-number\">1</span> :: -<span class=\"hljs-number\">1</span>] + arr[cur : <span class=\"hljs-built_in\">len</span>(arr)]\r\n        cur -= <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> arr\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n    <span class=\"hljs-built_in\">print</span>(pancake_sort(unsorted))\r\n"
    },
    "javascript": {
      "dir": "Sorts\\test\\PancakeSort.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\test\\PancakeSort.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { flipArray, findMax, pancakeSort } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../PancakeSort&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;flipArray&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should flip any subarray of any array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">flipArray</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>)).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">flipArray</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">flipArray</span>([], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)).<span class=\"hljs-title function_\">toEqual</span>([])\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;findMax&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should find the index of the maximum value in any subarray of any array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">findMax</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>)).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">3</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">findMax</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">1</span>)\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;pancakeSort&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should sort any array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">pancakeSort</span>([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">pancakeSort</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>])\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">pancakeSort</span>([<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>])\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\pancake_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\pancake_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief pancake sort sorts a disordered stack of pancakes by flipping any\r\n * number of pancakes using a spatula using minimum number of flips.\r\n *\r\n * @details\r\n * Unlike a traditional sorting algorithm, which attempts to sort with the\r\n * fewest comparisons possible, the goal is to sort the sequence in as few\r\n * reversals as possible. Overall time complexity of pancake sort is O(n^2) For\r\n * example: example 1:- Disordered pancake sizes: {2,5,3,7,8} Sorted:\r\n * {2,3,5,7,8} For example: example 2:- Disordered pancake sizes:\r\n * {22,51,37,73,81} Sorted: {22,37,51,73,81}\r\n * @author [Divyansh Gupta](https://github.com/divyansh12323)\r\n * @see more on [Pancake sort](https://en.wikipedia.org/wiki/Pancake_sorting)\r\n * @see related problem at\r\n * [Leetcode](https://leetcode.com/problems/pancake-sorting/)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">// for std::is_sorted</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">// for std::assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">// for io operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace sorting\r\n * @brief Sorting algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> sorting {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace pancake_sort\r\n * @brief Functions for [Pancake\r\n * sort](https://en.wikipedia.org/wiki/Pancake_sorting) algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> pancake_sort {\r\n<span class=\"hljs-comment\">/**\r\n * @brief This implementation is for reversing elements in a a C-style array .\r\n * @param [start,end] arr our vector of elements.\r\n * @param start starting index of array\r\n * @param end ending index of array\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">reverse</span><span class=\"hljs-params\">(std::vector&lt;T&gt; &amp;arr, <span class=\"hljs-type\">int</span> start, <span class=\"hljs-type\">int</span> end)</span> </span>{\r\n    T temp;  <span class=\"hljs-comment\">// Temporary variable</span>\r\n    <span class=\"hljs-keyword\">while</span> (start &lt;= end) {\r\n        temp = arr[start];\r\n        arr[start] = arr[end];\r\n        arr[end] = temp;\r\n        start++;\r\n        end--;\r\n    }\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief This implementation is for a C-style array input that gets modified in\r\n * place.\r\n * @param [start,end] arr our vector of elements.\r\n * @param size size of given array\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">pancakeSort</span><span class=\"hljs-params\">(std::vector&lt;T&gt; &amp;arr, <span class=\"hljs-type\">int</span> size)</span> </span>{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = size; i &gt; <span class=\"hljs-number\">1</span>; --i) {\r\n        <span class=\"hljs-type\">int</span> max_index = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// intialize some variables.</span>\r\n        T max_value = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\r\n            <span class=\"hljs-keyword\">if</span> (arr[j] &gt;= max_value) {\r\n                max_value = arr[j];\r\n                max_index = j;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (max_index != i - <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// check for reversing</span>\r\n        {\r\n            <span class=\"hljs-built_in\">reverse</span>(arr, <span class=\"hljs-number\">0</span>, max_index);\r\n            <span class=\"hljs-built_in\">reverse</span>(arr, <span class=\"hljs-number\">0</span>, i - <span class=\"hljs-number\">1</span>);\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace pancake_sort</span>\r\n}  <span class=\"hljs-comment\">// namespace sorting</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// example 1: vector of int</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> size1 = <span class=\"hljs-number\">7</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTest 1- as std::vector&lt;int&gt;...&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; arr1 = {<span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>};\r\n    sorting::pancake_sort::<span class=\"hljs-built_in\">pancakeSort</span>(arr1, size1);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr1.<span class=\"hljs-built_in\">begin</span>(), arr1.<span class=\"hljs-built_in\">end</span>()));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size1; i++) {\r\n        std::cout &lt;&lt; arr1[i] &lt;&lt; <span class=\"hljs-string\">&quot; ,&quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// example 2: vector of double</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> size2 = <span class=\"hljs-number\">8</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTest 2- as std::vector&lt;double&gt;...&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">double</span>&gt; arr2 = {<span class=\"hljs-number\">23.56</span>, <span class=\"hljs-number\">10.62</span>, <span class=\"hljs-number\">200.78</span>, <span class=\"hljs-number\">111.484</span>,\r\n                                <span class=\"hljs-number\">3.9</span>,   <span class=\"hljs-number\">1.2</span>,   <span class=\"hljs-number\">61.77</span>,  <span class=\"hljs-number\">79.6</span>};\r\n    sorting::pancake_sort::<span class=\"hljs-built_in\">pancakeSort</span>(arr2, size2);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr2.<span class=\"hljs-built_in\">begin</span>(), arr2.<span class=\"hljs-built_in\">end</span>()));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size2; i++) {\r\n        std::cout &lt;&lt; arr2[i] &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// example 3:vector of float</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> size3 = <span class=\"hljs-number\">7</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTest 3- as std::vector&lt;float&gt;...&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; arr3 = {<span class=\"hljs-number\">6.56</span>, <span class=\"hljs-number\">12.62</span>, <span class=\"hljs-number\">200.78</span>, <span class=\"hljs-number\">768.484</span>, <span class=\"hljs-number\">19.27</span>, <span class=\"hljs-number\">68.87</span>, <span class=\"hljs-number\">9.6</span>};\r\n    sorting::pancake_sort::<span class=\"hljs-built_in\">pancakeSort</span>(arr3, size3);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr3.<span class=\"hljs-built_in\">begin</span>(), arr3.<span class=\"hljs-built_in\">end</span>()));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size3; i++) {\r\n        std::cout &lt;&lt; arr3[i] &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; std::endl;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\PancakeSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\PancakeSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.*;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Implementation of pancake sort\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\r\n * <span class=\"hljs-doctag\">@since</span> 2018-04-10\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PancakeSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] array) {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> array.length;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n            <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> array[<span class=\"hljs-number\">0</span>];\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; size - i; j++) {\r\n                <span class=\"hljs-keyword\">if</span> (less(max, array[j])) {\r\n                    max = array[j];\r\n                    index = j;\r\n                }\r\n            }\r\n            flip(array, index, array.length - <span class=\"hljs-number\">1</span> - i);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> array;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n\r\n        Integer[] arr = {\r\n            <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">8</span>, -<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>\r\n        };\r\n        <span class=\"hljs-type\">PancakeSort</span> <span class=\"hljs-variable\">pancakeSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PancakeSort</span>();\r\n        System.out.println(<span class=\"hljs-string\">&quot;After sorting:&quot;</span>);\r\n        pancakeSort.sort(arr);\r\n        print(arr);\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\pancake_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\pancake_sort.c",
      "code": "<span class=\"hljs-comment\">// Sorting of array list using pancake sort</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/* Reverses the array */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">flip</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> i)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> temp, start = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">while</span> (start &lt; i)\r\n    {\r\n        temp = arr[start];\r\n        arr[start] = arr[i];\r\n        arr[i] = temp;\r\n        start++;\r\n        i--;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Returns index of the maximum element in arr[0..n-1]</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMax</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> maxElementIdx, i;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (maxElementIdx = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i)\r\n        <span class=\"hljs-keyword\">if</span> (arr[i] &gt; arr[maxElementIdx])\r\n            maxElementIdx = i;\r\n\r\n    <span class=\"hljs-keyword\">return</span> maxElementIdx;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Sorts the array using flip operations</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pancakeSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-comment\">// Start from the complete array and one by one reduce current size by one</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> curr_size = n; curr_size &gt; <span class=\"hljs-number\">1</span>; --curr_size)\r\n    {\r\n        <span class=\"hljs-comment\">// Find index of the maximum element in arr[0..curr_size-1]</span>\r\n        <span class=\"hljs-type\">int</span> maxElementIdx = findMax(arr, curr_size);\r\n\r\n        <span class=\"hljs-comment\">// Move the maximum element to end of current array if it&#x27;s not already</span>\r\n        <span class=\"hljs-comment\">// at the end</span>\r\n        <span class=\"hljs-keyword\">if</span> (maxElementIdx != curr_size - <span class=\"hljs-number\">1</span>)\r\n        {\r\n            <span class=\"hljs-comment\">// To move at the end, first move maximum number to beginning</span>\r\n            flip(arr, maxElementIdx);\r\n\r\n            <span class=\"hljs-comment\">// Now move the maximum number to end by reversing current array</span>\r\n            flip(arr, curr_size - <span class=\"hljs-number\">1</span>);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Displays the array, passed to this method</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> N 50</span>\r\n\r\n<span class=\"hljs-comment\">// Driver program to test above function</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> arr[N];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++)\r\n        arr[i] = rand() % (N &lt;&lt; <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">/* random numbers from 0 to 2N */</span>\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Original array: &quot;</span>);\r\n    display(arr, N);\r\n\r\n    pancakeSort(arr, N);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\r\n    display(arr, N);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}"
    },
    "f-sharp": {
      "dir": "Algorithms\\Sort\\Pancake_Sort.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Sort\\Pancake_Sort.fs",
      "code": "<span class=\"hljs-keyword\">namespace</span> Algorithms.Sort\r\n\r\n<span class=\"hljs-keyword\">module</span> PancakeSort <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-keyword\">let</span> show data <span class=\"hljs-operator\">=</span>\r\n        data <span class=\"hljs-operator\">|&gt;</span> Array.iter (<span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">&quot;%d &quot;</span>)\r\n        <span class=\"hljs-built_in\">printfn</span> <span class=\"hljs-string\">&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">let</span> split (data<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span> []) pos <span class=\"hljs-operator\">=</span> data.[<span class=\"hljs-number\">0.</span>.pos], data.[(pos <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)<span class=\"hljs-operator\">..</span>]\r\n\r\n    <span class=\"hljs-keyword\">let</span> flip items pos <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> lower, upper <span class=\"hljs-operator\">=</span> split items pos\r\n        Array.append (Array.rev lower) upper\r\n\r\n    <span class=\"hljs-keyword\">let</span> sort items <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> loop data limit <span class=\"hljs-operator\">=</span>\r\n            <span class=\"hljs-keyword\">if</span> limit <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\r\n                data\r\n            <span class=\"hljs-keyword\">else</span>\r\n                <span class=\"hljs-keyword\">let</span> lower, upper <span class=\"hljs-operator\">=</span> split data limit\r\n\r\n                <span class=\"hljs-keyword\">let</span> indexOfMax <span class=\"hljs-operator\">=</span>\r\n                    lower <span class=\"hljs-operator\">|&gt;</span> Array.findIndex ((<span class=\"hljs-operator\">=</span>) (Array.max lower))\r\n\r\n                <span class=\"hljs-keyword\">let</span> partialSort <span class=\"hljs-operator\">=</span>\r\n                    Array.append (flip lower indexOfMax <span class=\"hljs-operator\">|&gt;</span> Array.rev) upper\r\n\r\n                loop partialSort (limit <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>)\r\n\r\n        loop items ((Array.length items) <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>)\r\n"
    },
    "aarch64_assembly": {
      "dir": "sorters\\pancake_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters\\pancake_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\r\n<span class=\"hljs-comment\">/*  program mergeSort64.s  */</span>\r\n \r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\r\n \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* Initialized data              */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.data</span>\r\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\r\n<span class=\"hljs-symbol\">sMessCounter:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;sorted in  @ flips \\n&quot;</span>\r\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n \r\n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-symbol\">TableNumber:</span>      .quad   <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>\r\n<span class=\"hljs-comment\">#TableNumber:     .quad   10,9,8,7,6,-5,4,3,2,1</span>\r\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.bss</span>\r\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/*  code section                 */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.text</span>\r\n<span class=\"hljs-symbol\">.global</span> main \r\n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// first element</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> pancakeSort\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">bl</span> displayTable\r\n    <span class=\"hljs-keyword\">mov</span> x0,x10                                     <span class=\"hljs-comment\">// display counter</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> conversion10S                               <span class=\"hljs-comment\">// décimal conversion</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessCounter\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc                          <span class=\"hljs-comment\">// insert result at @ character</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess                               <span class=\"hljs-comment\">// display message</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\r\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\r\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\r\n \r\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\r\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\r\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\r\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\r\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\r\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\r\n<span class=\"hljs-symbol\">qAdrsMessCounter:</span>         .quad sMessCounter\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\r\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\r\n<span class=\"hljs-symbol\">isSorted:</span>\r\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\r\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x4,x3\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\r\n<span class=\"hljs-number\">98</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">99</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\r\n \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*         flip                                                   */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains first start index\r\n/* x2 contains the number of elements  */</span>\r\n<span class=\"hljs-comment\">/* x3 contains the position of flip   */</span> \r\n<span class=\"hljs-symbol\">flip:</span>\r\n    <span class=\"hljs-comment\">//push {r1-r6,lr}             // save registers</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!           <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!           <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!           <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">str</span> x6,   [<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!           <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">add</span> x10,x10,<span class=\"hljs-number\">#1</span>                <span class=\"hljs-comment\">// flips counter</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x2\r\n    <span class=\"hljs-keyword\">sub</span> x4,x2,<span class=\"hljs-number\">1</span>\r\n    csel x3,x4,x3,ge               <span class=\"hljs-comment\">// last index if position &gt;= size</span>\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">cmp</span> x1,x3\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">100</span>f\r\n    <span class=\"hljs-keyword\">ldr</span> x5,[x0,x1,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]         <span class=\"hljs-comment\">// load value first  index </span>\r\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]         <span class=\"hljs-comment\">// load value position index</span>\r\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x1,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]         <span class=\"hljs-comment\">// inversion</span>\r\n    <span class=\"hljs-keyword\">str</span> x5,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]         <span class=\"hljs-comment\">// </span>\r\n    <span class=\"hljs-keyword\">sub</span> x3,x3,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">add</span> x1,x1,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\r\n<span class=\"hljs-number\">100</span>:\r\n    <span class=\"hljs-keyword\">ldr</span> x6,   [<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  1 register</span>\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*         pancake sort                                                   */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains first start index\r\n/* x2 contains the number of elements  */</span>\r\n<span class=\"hljs-symbol\">pancakeSort:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x8,x9,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">sub</span> x7,x2,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// last index</span>\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x5,x1                  <span class=\"hljs-comment\">// index</span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// max</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// position</span>\r\n    <span class=\"hljs-keyword\">mov</span> x8,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// top sorted</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x9,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[i-1]</span>\r\n<span class=\"hljs-number\">2</span>:\r\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value </span>\r\n    <span class=\"hljs-keyword\">cmp</span> x6,x4                  <span class=\"hljs-comment\">// compare max</span>\r\n    csel x4,x6,x4,ge           <span class=\"hljs-comment\">// max = A[i}</span>\r\n    csel x3,x5,x3,ge           <span class=\"hljs-comment\">// position = index</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x6,x9                  <span class=\"hljs-comment\">// cmp A[i] A[i-1] sorted ?</span>\r\n    csel x8,xzr,x8,lt          <span class=\"hljs-comment\">// no</span>\r\n    <span class=\"hljs-keyword\">mov</span> x9,x6                  <span class=\"hljs-comment\">//  A[i-1] = A[i]</span>\r\n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment index</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x5,x7                  <span class=\"hljs-comment\">// end ?</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">2</span>b\r\n    <span class=\"hljs-keyword\">cmp</span> x8,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// sorted ?</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// yes -&gt; end</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x7                  <span class=\"hljs-comment\">// position ok ?</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">4</span>f                     <span class=\"hljs-comment\">// yes</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// first position ?</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">3</span>f\r\n    <span class=\"hljs-keyword\">bl</span> flip                    <span class=\"hljs-comment\">// flip if not greather in first position</span>\r\n<span class=\"hljs-number\">3</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x3,x7                  <span class=\"hljs-comment\">// and flip the whole stack</span>\r\n    <span class=\"hljs-keyword\">bl</span> flip\r\n<span class=\"hljs-number\">4</span>:  \r\n    <span class=\"hljs-comment\">//bl displayTable          // to display an intermediate state</span>\r\n    <span class=\"hljs-keyword\">subs</span> x7,x7,<span class=\"hljs-number\">1</span>               <span class=\"hljs-comment\">// decrement number of pancake</span>\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">1</span>b                     <span class=\"hljs-comment\">// and loop</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x8,x9,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                        <span class=\"hljs-comment\">// return to address lr x30</span>\r\n \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-symbol\">displayTable:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> conversion10S                  <span class=\"hljs-comment\">// décimal conversion</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at @ character</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\r\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">mov</span> x0,x2\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\r\n"
    },
    "ruby": {
      "dir": "sorting\\pancake_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting\\pancake_sort.rb",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pancake_sort</span><span class=\"hljs-params\">(array)</span></span>\r\n  <span class=\"hljs-keyword\">return</span> array <span class=\"hljs-keyword\">if</span> array.length &lt;= <span class=\"hljs-number\">1</span>\r\n\r\n  (array.length - <span class=\"hljs-number\">1</span>).downto(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|index|</span>\r\n    max_index = array[<span class=\"hljs-number\">0</span>..index].index(array[<span class=\"hljs-number\">0</span>..index].max)\r\n    <span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">if</span> max_index == index\r\n\r\n    array[<span class=\"hljs-number\">0</span>..max_index] = array[<span class=\"hljs-number\">0</span>..max_index].reverse <span class=\"hljs-keyword\">if</span> max_index &gt; <span class=\"hljs-number\">0</span>\r\n    array[<span class=\"hljs-number\">0</span>..index] = array[<span class=\"hljs-number\">0</span>..index].reverse\r\n  <span class=\"hljs-keyword\">end</span>\r\n  array\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-keyword\">__FILE__</span>\r\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\r\n\r\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\r\n  p pancake_sort(list)\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/PancakeSorter.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sorters\\Comparison\\PancakeSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class that implements pancake sort algorithm.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PancakeSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using specified comparer,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     internal, in-place, stable,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n^2),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array length.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> n = array.Length;\r\n\r\n            <span class=\"hljs-comment\">// Start from the complete array and one by one</span>\r\n            <span class=\"hljs-comment\">// reduce current size by one</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> currSize = n; currSize &gt; <span class=\"hljs-number\">1</span>; --currSize)\r\n            {\r\n                <span class=\"hljs-comment\">// Find index of the maximum element in</span>\r\n                <span class=\"hljs-comment\">// array[0..curr_size-1]</span>\r\n                <span class=\"hljs-keyword\">var</span> mi = FindMax(array, currSize, comparer);\r\n\r\n                <span class=\"hljs-comment\">// Move the maximum element to end of current array</span>\r\n                <span class=\"hljs-comment\">// if it&#x27;s not already at  the end</span>\r\n                <span class=\"hljs-keyword\">if</span> (mi != currSize - <span class=\"hljs-number\">1</span>)\r\n                {\r\n                    <span class=\"hljs-comment\">// To move to the end, first move maximum</span>\r\n                    <span class=\"hljs-comment\">// number to beginning</span>\r\n                    Flip(array, mi);\r\n\r\n                    <span class=\"hljs-comment\">// Now move the maximum number to end by</span>\r\n                    <span class=\"hljs-comment\">// reversing current array</span>\r\n                    Flip(array, currSize - <span class=\"hljs-number\">1</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Reverses array[0..i]</span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Flip</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> i</span>)</span>\r\n        {\r\n            T temp;\r\n            <span class=\"hljs-keyword\">var</span> start = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">while</span> (start &lt; i)\r\n            {\r\n                temp = array[start];\r\n                array[start] = array[i];\r\n                array[i] = temp;\r\n                start++;\r\n                i--;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Returns index of the maximum element</span>\r\n        <span class=\"hljs-comment\">// in array[0..n-1]</span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindMax</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> n, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> mi = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[i], array[mi]) == <span class=\"hljs-number\">1</span>)\r\n                {\r\n                    mi = i;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> mi;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Aruj Sharma",
      "email": "aruj123sharma@gmail.com",
      "commits": 1
    },
    {
      "name": "maxbarsukov",
      "email": "maximbarsukov@bk.ru",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "Zykiel",
      "email": "48471587+ZykielErx@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Manan-Rathi",
      "email": "76519771+Manan-Rathi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "divyansh12323",
      "email": "53469850+divyansh12323@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "Parth Paradkar",
      "email": "parthparadkar3@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sichen Liu",
      "email": "sl2947@cornell.edu",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "arthurvergacas",
      "email": "arthurvdm@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}