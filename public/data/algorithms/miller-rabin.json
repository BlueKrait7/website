{
  "slug": "miller-rabin",
  "name": "Miller Rabin",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\miller_rabin.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\miller_rabin.py",
      "code": "<span class=\"hljs-keyword\">import</span> random\r\n\r\n<span class=\"hljs-keyword\">from</span> .binary_exp_mod <span class=\"hljs-keyword\">import</span> bin_exp_mod\r\n\r\n\r\n<span class=\"hljs-comment\"># This is a probabilistic check to test primality, useful for big numbers!</span>\r\n<span class=\"hljs-comment\"># if it&#x27;s a prime, it will return true</span>\r\n<span class=\"hljs-comment\"># if it&#x27;s not a prime, the chance of it returning true is at most 1/4**prec</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_prime</span>(<span class=\"hljs-params\">n, prec=<span class=\"hljs-number\">1000</span></span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; from .prime_check import prime_check\r\n    &gt;&gt;&gt; # all(is_prime(i) == prime_check(i) for i in range(1000))  # 3.45s\r\n    &gt;&gt;&gt; all(is_prime(i) == prime_check(i) for i in range(256))\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">2</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> n == <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-comment\"># this means n is odd</span>\r\n    d = n - <span class=\"hljs-number\">1</span>\r\n    exp = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> d % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\r\n        d /= <span class=\"hljs-number\">2</span>\r\n        exp += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># n - 1=d*(2**exp)</span>\r\n    count = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> count &lt; prec:\r\n        a = random.randint(<span class=\"hljs-number\">2</span>, n - <span class=\"hljs-number\">1</span>)\r\n        b = bin_exp_mod(a, d, n)\r\n        <span class=\"hljs-keyword\">if</span> b != <span class=\"hljs-number\">1</span>:\r\n            flag = <span class=\"hljs-literal\">True</span>\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(exp):\r\n                <span class=\"hljs-keyword\">if</span> b == n - <span class=\"hljs-number\">1</span>:\r\n                    flag = <span class=\"hljs-literal\">False</span>\r\n                    <span class=\"hljs-keyword\">break</span>\r\n                b = b * b\r\n                b %= n\r\n            <span class=\"hljs-keyword\">if</span> flag:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n            count += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    n = <span class=\"hljs-built_in\">abs</span>(<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter bound : &quot;</span>).strip()))\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Here&#x27;s the list of primes:&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;, &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">if</span> is_prime(i)))\r\n"
    },
    "c-plus-plus": {
      "dir": "math\\miller_rabin.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\miller_rabin.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * Copyright 2020 @author tjgurwara99\r\n * @file\r\n *\r\n * A basic implementation of Miller-Rabin primality test.\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;random&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to give a binary representation of a number in reverse order\r\n * @param num integer number that we want to convert\r\n * @return result vector of the number input in reverse binary\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">reverse_binary</span><span class=\"hljs-params\">(T num)</span> </span>{\r\n    std::vector&lt;T&gt; result;\r\n    T temp = num;\r\n    <span class=\"hljs-keyword\">while</span> (temp &gt; <span class=\"hljs-number\">0</span>) {\r\n        result.<span class=\"hljs-built_in\">push_back</span>(temp % <span class=\"hljs-number\">2</span>);\r\n        temp = temp / <span class=\"hljs-number\">2</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function for modular exponentiation.\r\n * This function is an efficient modular exponentiation function.\r\n * It can be used with any big integer library such as Boost multiprecision\r\n * to give result any modular exponentiation problem relatively quickly.\r\n * @param base number being raised to a power as integer\r\n * @param rev_binary_exponent reverse binary of the power the base is being\r\n * raised to\r\n * @param mod modulo\r\n * @return r the modular exponentiation of \\f$a^{n} \\equiv r \\mod{m}\\f$ where\r\n * \\f$n\\f$ is the base 10 representation of rev_binary_exponent and \\f$m = mod\r\n * \\f$ parameter.\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">modular_exponentiation</span><span class=\"hljs-params\">(T base, <span class=\"hljs-type\">const</span> std::vector&lt;T&gt; &amp;rev_binary_exponent,\r\n                         T mod)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (mod == <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    T b = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">if</span> (rev_binary_exponent.<span class=\"hljs-built_in\">size</span>() == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> b;\r\n    T A = base;\r\n    <span class=\"hljs-keyword\">if</span> (rev_binary_exponent[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span>)\r\n        b = base;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">typename</span> std::vector&lt;T&gt;::const_iterator it =\r\n             rev_binary_exponent.<span class=\"hljs-built_in\">cbegin</span>() + <span class=\"hljs-number\">1</span>;\r\n         it != rev_binary_exponent.<span class=\"hljs-built_in\">cend</span>(); ++it) {\r\n        A = A * A % mod;\r\n        <span class=\"hljs-keyword\">if</span> (*it == <span class=\"hljs-number\">1</span>)\r\n            b = A * b % mod;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> b;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Function for testing the conditions that are satisfied when a number is\r\n * prime.\r\n * \t@param d number such that \\f$d \\cdot 2^r = n - 1\\f$ where \\f$n = num\\f$\r\n * parameter and \\f$r \\geq 1\\f$\r\n * \t@param num number being tested for primality.\r\n * \t@return &#x27;false&#x27; if n is composite\r\n * \t@return &#x27;true&#x27; if n is (probably) prime.\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">miller_test</span><span class=\"hljs-params\">(T d, T num)</span> </span>{\r\n    <span class=\"hljs-comment\">// random number seed</span>\r\n    std::random_device rd_seed;\r\n    <span class=\"hljs-comment\">// random number generator</span>\r\n    <span class=\"hljs-function\">std::mt19937 <span class=\"hljs-title\">gen</span><span class=\"hljs-params\">(rd_seed())</span></span>;\r\n    <span class=\"hljs-comment\">// Uniformly distributed range [2, num - 2] for random numbers</span>\r\n    std::uniform_int_distribution&lt;&gt; <span class=\"hljs-built_in\">distribution</span>(<span class=\"hljs-number\">2</span>, num - <span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-comment\">// Random number generated in the range [2, num -2].</span>\r\n    T random = <span class=\"hljs-built_in\">distribution</span>(gen);\r\n    <span class=\"hljs-comment\">// vector for reverse binary of the power</span>\r\n    std::vector&lt;T&gt; power = <span class=\"hljs-built_in\">reverse_binary</span>(d);\r\n    <span class=\"hljs-comment\">// x = random ^ d % num</span>\r\n    T x = <span class=\"hljs-built_in\">modular_exponentiation</span>(random, power, num);\r\n    <span class=\"hljs-comment\">// miller conditions</span>\r\n    <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">1</span> || x == num - <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">while</span> (d != num - <span class=\"hljs-number\">1</span>) {\r\n        x = (x * x) % num;\r\n        d *= <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (x == num - <span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function that test (probabilistically) whether a given number is a prime\r\n * based on the Miller-Rabin Primality Test.\r\n * @param num number to be tested for primality.\r\n * @param repeats number of repetitions for the test to increase probability of\r\n * correct result.\r\n * @return &#x27;false&#x27; if num is composite\r\n * @return &#x27;true&#x27; if num is (probably) prime\r\n *\r\n * \\detail\r\n * First we check whether the num input is less than 4, if so we can determine\r\n * whether this is a prime or composite by checking for 2 and 3.\r\n * Next we check whether this num is odd (as all primes greater than 2 are odd).\r\n * Next we write our num in the following format \\f$num = 2^r \\cdot d + 1\\f$.\r\n * After finding r and d for our input num, we use for loop repeat number of\r\n * times inside which we check the miller conditions using the function\r\n * miller_test. If miller_test returns false then the number is composite After\r\n * the loop finishes completely without issuing a false return call, we can\r\n * conclude that this number is probably prime.\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">miller_rabin_primality_test</span><span class=\"hljs-params\">(T num, T repeats)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (num &lt;= <span class=\"hljs-number\">4</span>) {\r\n        <span class=\"hljs-comment\">// If num == 2 or num == 3 then prime</span>\r\n        <span class=\"hljs-keyword\">if</span> (num == <span class=\"hljs-number\">2</span> || num == <span class=\"hljs-number\">3</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">// If num is even then not prime</span>\r\n    <span class=\"hljs-keyword\">if</span> (num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n    <span class=\"hljs-comment\">// Finding d and r in num = 2^r * d + 1</span>\r\n    T d = num - <span class=\"hljs-number\">1</span>, r = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> (d % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\r\n        d = d / <span class=\"hljs-number\">2</span>;\r\n        r++;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (T i = <span class=\"hljs-number\">0</span>; i &lt; repeats; ++i) {\r\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">miller_test</span>(d, num)) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Functions for testing the miller_rabin_primality_test() function with some\r\n * assert statements.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// First test on 2</span>\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;2 is prime but function says otherwise.\\n&quot;</span>,\r\n            <span class=\"hljs-built_in\">miller_rabin_primality_test</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-literal\">true</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;First test passes.&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Second test on 5</span>\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;5 should be prime but the function says otherwise.\\n&quot;</span>,\r\n            <span class=\"hljs-built_in\">miller_rabin_primality_test</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-literal\">true</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Second test passes.&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Third test on 23</span>\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;23 should be prime but the function says otherwise.\\n&quot;</span>,\r\n            <span class=\"hljs-built_in\">miller_rabin_primality_test</span>(<span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-literal\">true</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Third test passes.&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Fourth test on 16</span>\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;16 is not a prime but the function says otherwise.\\n&quot;</span>,\r\n            <span class=\"hljs-built_in\">miller_rabin_primality_test</span>(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-literal\">false</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Fourth test passes.&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Fifth test on 27</span>\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;27 is not a prime but the function says otherwise.\\n&quot;</span>,\r\n            <span class=\"hljs-built_in\">miller_rabin_primality_test</span>(<span class=\"hljs-number\">27</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-literal\">false</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Fifth test passes.&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">tests</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Anzo Teh",
      "email": "anzoteh@hotmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}