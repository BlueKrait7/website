{
  "slug": "depth-first-search-tic-tac-toe",
  "name": "Depth First Search Tic Tac Toe",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src\\graph\\depth_first_search_tic_tac_toe.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\graph\\depth_first_search_tic_tac_toe.rs",
      "code": "<span class=\"hljs-comment\">/*\r\nTic-Tac-Toe Depth First Search Rust Demo\r\nCopyright 2021 David V. Makray\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the &quot;Software&quot;), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/</span>\r\n\r\n<span class=\"hljs-meta\">#[allow(unused_imports)]</span>\r\n<span class=\"hljs-keyword\">use</span> std::io;\r\n\r\n<span class=\"hljs-comment\">//Interactive Tic-Tac-Toe play needs the &quot;rand = &quot;0.8.3&quot; crate.</span>\r\n<span class=\"hljs-comment\">//#[cfg(not(test))]</span>\r\n<span class=\"hljs-comment\">//extern crate rand;</span>\r\n<span class=\"hljs-comment\">//#[cfg(not(test))]</span>\r\n<span class=\"hljs-comment\">//use rand::Rng;</span>\r\n\r\n<span class=\"hljs-meta\">#[derive(Copy, Clone, PartialEq, Debug)]</span>\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Position</span> {\r\n    x: <span class=\"hljs-type\">u8</span>,\r\n    y: <span class=\"hljs-type\">u8</span>,\r\n}\r\n\r\n<span class=\"hljs-meta\">#[derive(Copy, Clone, PartialEq, Debug)]</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Players</span> {\r\n    Blank,\r\n    PlayerX,\r\n    PlayerO,\r\n}\r\n\r\n<span class=\"hljs-meta\">#[derive(Copy, Clone, PartialEq, Debug)]</span>\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SinglePlayAction</span> {\r\n    position: Position,\r\n    side: Players,\r\n}\r\n\r\n<span class=\"hljs-meta\">#[derive(Clone, PartialEq, Debug)]</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">PlayActions</span> {\r\n    positions: <span class=\"hljs-type\">Vec</span>&lt;Position&gt;,\r\n    side: Players,\r\n}\r\n\r\n<span class=\"hljs-meta\">#[allow(dead_code)]</span>\r\n<span class=\"hljs-meta\">#[cfg(not(test))]</span>\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">board</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[Players::Blank; <span class=\"hljs-number\">3</span>]; <span class=\"hljs-number\">3</span>];\r\n\r\n    <span class=\"hljs-keyword\">while</span> !<span class=\"hljs-title function_ invoke__\">available_positions</span>(&amp;board).<span class=\"hljs-title function_ invoke__\">is_empty</span>()\r\n        &amp;&amp; !<span class=\"hljs-title function_ invoke__\">win_check</span>(Players::PlayerX, &amp;board)\r\n        &amp;&amp; !<span class=\"hljs-title function_ invoke__\">win_check</span>(Players::PlayerO, &amp;board)\r\n    {\r\n        <span class=\"hljs-title function_ invoke__\">display_board</span>(&amp;board);\r\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Type in coordinate for X mark to be played. ie. a1 etc.&quot;</span>);\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">input</span> = String::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        io::<span class=\"hljs-title function_ invoke__\">stdin</span>()\r\n            .<span class=\"hljs-title function_ invoke__\">read_line</span>(&amp;<span class=\"hljs-keyword\">mut</span> input)\r\n            .<span class=\"hljs-title function_ invoke__\">expect</span>(<span class=\"hljs-string\">&quot;Failed to read line&quot;</span>);\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">move_position</span>: <span class=\"hljs-type\">Option</span>&lt;Position&gt; = <span class=\"hljs-literal\">None</span>;\r\n        input.<span class=\"hljs-title function_ invoke__\">make_ascii_lowercase</span>();\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">bytes</span> = input.<span class=\"hljs-title function_ invoke__\">trim</span>().<span class=\"hljs-title function_ invoke__\">trim_start</span>().<span class=\"hljs-title function_ invoke__\">as_bytes</span>();\r\n        <span class=\"hljs-keyword\">if</span> bytes.<span class=\"hljs-title function_ invoke__\">len</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span> == <span class=\"hljs-number\">2</span>\r\n            &amp;&amp; (bytes[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>).<span class=\"hljs-title function_ invoke__\">is_alphabetic</span>()\r\n            &amp;&amp; (bytes[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>).<span class=\"hljs-title function_ invoke__\">is_numeric</span>()\r\n        {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">column</span>: <span class=\"hljs-type\">u8</span> = bytes[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-string\">b&#x27;a&#x27;</span>;\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">row</span>: <span class=\"hljs-type\">u8</span> = bytes[<span class=\"hljs-number\">1</span>] - <span class=\"hljs-string\">b&#x27;1&#x27;</span>;\r\n\r\n            <span class=\"hljs-keyword\">if</span> column &lt;= <span class=\"hljs-number\">2</span> &amp;&amp; row &lt;= <span class=\"hljs-number\">2</span> {\r\n                move_position = <span class=\"hljs-title function_ invoke__\">Some</span>(Position { x: column, y: row });\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">//Take the validated user input coordinate and use it.</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(move_pos) = move_position {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">open_positions</span> = <span class=\"hljs-title function_ invoke__\">available_positions</span>(&amp;board);\r\n\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">search</span> = open_positions.<span class=\"hljs-title function_ invoke__\">iter</span>();\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = search.<span class=\"hljs-title function_ invoke__\">find</span>(|&amp;&amp;x| x == move_pos);\r\n            <span class=\"hljs-keyword\">if</span> result.<span class=\"hljs-title function_ invoke__\">is_none</span>() {\r\n                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Not a valid empty coordinate.&quot;</span>);\r\n                <span class=\"hljs-keyword\">continue</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                board[move_pos.y <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>][move_pos.x <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] = Players::PlayerX;\r\n\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_ invoke__\">win_check</span>(Players::PlayerX, &amp;board) {\r\n                    <span class=\"hljs-title function_ invoke__\">display_board</span>(&amp;board);\r\n                    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Player X Wins!&quot;</span>);\r\n                    <span class=\"hljs-keyword\">return</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-comment\">//Find the best game plays from the current board state</span>\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">recusion_result</span> = <span class=\"hljs-title function_ invoke__\">minimax</span>(Players::PlayerO, &amp;board);\r\n            <span class=\"hljs-keyword\">match</span> recusion_result {\r\n                <span class=\"hljs-title function_ invoke__\">Some</span>(x) =&gt; {\r\n                    <span class=\"hljs-comment\">//Interactive Tic-Tac-Toe play needs the &quot;rand = &quot;0.8.3&quot; crate.</span>\r\n                    <span class=\"hljs-comment\">//#[cfg(not(test))]</span>\r\n                    <span class=\"hljs-comment\">//let random_selection = rand::thread_rng().gen_range(0..x.positions.len());</span>\r\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">random_selection</span> = <span class=\"hljs-number\">0</span>;\r\n\r\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">response_pos</span> = x.positions[random_selection];\r\n                    board[response_pos.y <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>][response_pos.x <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] = Players::PlayerO;\r\n                    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_ invoke__\">win_check</span>(Players::PlayerO, &amp;board) {\r\n                        <span class=\"hljs-title function_ invoke__\">display_board</span>(&amp;board);\r\n                        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Player O Wins!&quot;</span>);\r\n                        <span class=\"hljs-keyword\">return</span>;\r\n                    }\r\n                }\r\n\r\n                <span class=\"hljs-literal\">None</span> =&gt; {\r\n                    <span class=\"hljs-title function_ invoke__\">display_board</span>(&amp;board);\r\n                    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Draw game.&quot;</span>);\r\n                    <span class=\"hljs-keyword\">return</span>;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[allow(dead_code)]</span>\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">display_board</span>(board: &amp;[<span class=\"hljs-type\">Vec</span>&lt;Players&gt;]) {\r\n    <span class=\"hljs-built_in\">println!</span>();\r\n    <span class=\"hljs-title function_ invoke__\">for</span> (y, board_row) <span class=\"hljs-keyword\">in</span> board.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\r\n        <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">&quot;{} &quot;</span>, (y + <span class=\"hljs-number\">1</span>));\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">board_cell</span> <span class=\"hljs-keyword\">in</span> board_row {\r\n            <span class=\"hljs-keyword\">match</span> board_cell {\r\n                Players::PlayerX =&gt; <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">&quot;X &quot;</span>),\r\n                Players::PlayerO =&gt; <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">&quot;O &quot;</span>),\r\n                Players::Blank =&gt; <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">&quot;_ &quot;</span>),\r\n            }\r\n        }\r\n        <span class=\"hljs-built_in\">println!</span>();\r\n    }\r\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;  a b c&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">available_positions</span>(board: &amp;[<span class=\"hljs-type\">Vec</span>&lt;Players&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;Position&gt; {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">available</span>: <span class=\"hljs-type\">Vec</span>&lt;Position&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n    <span class=\"hljs-title function_ invoke__\">for</span> (y, board_row) <span class=\"hljs-keyword\">in</span> board.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\r\n        <span class=\"hljs-title function_ invoke__\">for</span> (x, board_cell) <span class=\"hljs-keyword\">in</span> board_row.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\r\n            <span class=\"hljs-keyword\">if</span> *board_cell == Players::Blank {\r\n                available.<span class=\"hljs-title function_ invoke__\">push</span>(Position {\r\n                    x: x <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\r\n                    y: y <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    available\r\n}\r\n\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">win_check</span>(player: Players, board: &amp;[<span class=\"hljs-type\">Vec</span>&lt;Players&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n    <span class=\"hljs-keyword\">if</span> player == Players::Blank {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//Check for a win on the diagonals.</span>\r\n    <span class=\"hljs-title function_ invoke__\">if</span> (board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] == board[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]) &amp;&amp; (board[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] == board[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>]) &amp;&amp; (board[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>] == player)\r\n        || (board[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">0</span>] == board[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]) &amp;&amp; (board[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] == board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>]) &amp;&amp; (board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] == player)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">3</span> {\r\n        <span class=\"hljs-comment\">//Check for a win on the horizontals.</span>\r\n        <span class=\"hljs-title function_ invoke__\">if</span> (board[i][<span class=\"hljs-number\">0</span>] == board[i][<span class=\"hljs-number\">1</span>]) &amp;&amp; (board[i][<span class=\"hljs-number\">1</span>] == board[i][<span class=\"hljs-number\">2</span>]) &amp;&amp; (board[i][<span class=\"hljs-number\">2</span>] == player) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">//Check for a win on the verticals.</span>\r\n        <span class=\"hljs-title function_ invoke__\">if</span> (board[<span class=\"hljs-number\">0</span>][i] == board[<span class=\"hljs-number\">1</span>][i]) &amp;&amp; (board[<span class=\"hljs-number\">1</span>][i] == board[<span class=\"hljs-number\">2</span>][i]) &amp;&amp; (board[<span class=\"hljs-number\">2</span>][i] == player) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-literal\">false</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">//Minimize the actions of the opponent while maximizing the game state of the current player.</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">minimax</span>(side: Players, board: &amp;[<span class=\"hljs-type\">Vec</span>&lt;Players&gt;]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;PlayActions&gt; {\r\n    <span class=\"hljs-comment\">//Check that board is in a valid state.</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_ invoke__\">win_check</span>(Players::PlayerX, board) || <span class=\"hljs-title function_ invoke__\">win_check</span>(Players::PlayerO, board) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">opposite</span> = <span class=\"hljs-keyword\">match</span> side {\r\n        Players::PlayerX =&gt; Players::PlayerO,\r\n        Players::PlayerO =&gt; Players::PlayerX,\r\n        Players::Blank =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Minimax can&#x27;t operate when a player isn&#x27;t specified.&quot;</span>),\r\n    };\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">positions</span> = <span class=\"hljs-title function_ invoke__\">available_positions</span>(board);\r\n    <span class=\"hljs-keyword\">if</span> positions.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//Play position</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">best_move</span>: <span class=\"hljs-type\">Option</span>&lt;PlayActions&gt; = <span class=\"hljs-literal\">None</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">pos</span> <span class=\"hljs-keyword\">in</span> positions {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">board_next</span> = board.<span class=\"hljs-title function_ invoke__\">to_owned</span>();\r\n        board_next[pos.y <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>][pos.x <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] = side;\r\n\r\n        <span class=\"hljs-comment\">//Check for a win condition before recursion to determine if this node is terminal.</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_ invoke__\">win_check</span>(Players::PlayerX, &amp;board_next) {\r\n            <span class=\"hljs-title function_ invoke__\">append_playaction</span>(\r\n                side,\r\n                &amp;<span class=\"hljs-keyword\">mut</span> best_move,\r\n                SinglePlayAction {\r\n                    position: pos,\r\n                    side: Players::PlayerX,\r\n                },\r\n            );\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_ invoke__\">win_check</span>(Players::PlayerO, &amp;board_next) {\r\n            <span class=\"hljs-title function_ invoke__\">append_playaction</span>(\r\n                side,\r\n                &amp;<span class=\"hljs-keyword\">mut</span> best_move,\r\n                SinglePlayAction {\r\n                    position: pos,\r\n                    side: Players::PlayerO,\r\n                },\r\n            );\r\n            <span class=\"hljs-keyword\">continue</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">result</span> = <span class=\"hljs-title function_ invoke__\">minimax</span>(opposite, &amp;board_next);\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">current_score</span> = <span class=\"hljs-keyword\">match</span> result {\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(x) =&gt; x.side,\r\n            _ =&gt; Players::Blank,\r\n        };\r\n\r\n        <span class=\"hljs-title function_ invoke__\">append_playaction</span>(\r\n            side,\r\n            &amp;<span class=\"hljs-keyword\">mut</span> best_move,\r\n            SinglePlayAction {\r\n                position: pos,\r\n                side: current_score,\r\n            },\r\n        )\r\n    }\r\n    best_move\r\n}\r\n\r\n<span class=\"hljs-comment\">//Promote only better or collate equally scored game plays</span>\r\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">append_playaction</span>(\r\n    current_side: Players,\r\n    opt_play_actions: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Option</span>&lt;PlayActions&gt;,\r\n    appendee: SinglePlayAction,\r\n) {\r\n    <span class=\"hljs-keyword\">if</span> opt_play_actions.<span class=\"hljs-title function_ invoke__\">is_none</span>() {\r\n        *opt_play_actions = <span class=\"hljs-title function_ invoke__\">Some</span>(PlayActions {\r\n            positions: <span class=\"hljs-built_in\">vec!</span>[appendee.position],\r\n            side: appendee.side,\r\n        });\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">play_actions</span> = opt_play_actions.<span class=\"hljs-title function_ invoke__\">as_mut</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\r\n\r\n    <span class=\"hljs-comment\">//New game action is scored from the current side and the current saved best score against the new game action.</span>\r\n    <span class=\"hljs-title function_ invoke__\">match</span> (current_side, play_actions.side, appendee.side) {\r\n        (Players::Blank, _, _) =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">&quot;Unreachable state.&quot;</span>),\r\n\r\n        <span class=\"hljs-comment\">//Winning scores</span>\r\n        (Players::PlayerX, Players::PlayerX, Players::PlayerX) =&gt; {\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">push</span>(appendee.position);\r\n        }\r\n        (Players::PlayerX, Players::PlayerX, _) =&gt; {}\r\n        (Players::PlayerO, Players::PlayerO, Players::PlayerO) =&gt; {\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">push</span>(appendee.position);\r\n        }\r\n        (Players::PlayerO, Players::PlayerO, _) =&gt; {}\r\n\r\n        <span class=\"hljs-comment\">//Non-winning to Winning scores</span>\r\n        (Players::PlayerX, _, Players::PlayerX) =&gt; {\r\n            play_actions.side = Players::PlayerX;\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">clear</span>();\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">push</span>(appendee.position);\r\n        }\r\n        (Players::PlayerO, _, Players::PlayerO) =&gt; {\r\n            play_actions.side = Players::PlayerO;\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">clear</span>();\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">push</span>(appendee.position);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">//Losing to Neutral scores</span>\r\n        (Players::PlayerX, Players::PlayerO, Players::Blank) =&gt; {\r\n            play_actions.side = Players::Blank;\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">clear</span>();\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">push</span>(appendee.position);\r\n        }\r\n\r\n        (Players::PlayerO, Players::PlayerX, Players::Blank) =&gt; {\r\n            play_actions.side = Players::Blank;\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">clear</span>();\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">push</span>(appendee.position);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">//Ignoring lower scored plays</span>\r\n        (Players::PlayerX, Players::Blank, Players::PlayerO) =&gt; {}\r\n        (Players::PlayerO, Players::Blank, Players::PlayerX) =&gt; {}\r\n\r\n        <span class=\"hljs-comment\">//No change hence append only</span>\r\n        (_, _, _) =&gt; {\r\n            <span class=\"hljs-built_in\">assert!</span>(play_actions.side == appendee.side);\r\n            play_actions.positions.<span class=\"hljs-title function_ invoke__\">push</span>(appendee.position);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> test {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">win_state_check</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">board</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[Players::Blank; <span class=\"hljs-number\">3</span>]; <span class=\"hljs-number\">3</span>];\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = Players::PlayerX;\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = Players::PlayerX;\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] = Players::PlayerX;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">responses</span> = <span class=\"hljs-title function_ invoke__\">minimax</span>(Players::PlayerO, &amp;board);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(responses, <span class=\"hljs-literal\">None</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">win_state_check2</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">board</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[Players::Blank; <span class=\"hljs-number\">3</span>]; <span class=\"hljs-number\">3</span>];\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = Players::PlayerX;\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = Players::PlayerO;\r\n        board[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = Players::PlayerX;\r\n        board[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = Players::PlayerO;\r\n        board[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">1</span>] = Players::PlayerO;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">responses</span> = <span class=\"hljs-title function_ invoke__\">minimax</span>(Players::PlayerO, &amp;board);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(responses, <span class=\"hljs-literal\">None</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">block_win_move</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">board</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[Players::Blank; <span class=\"hljs-number\">3</span>]; <span class=\"hljs-number\">3</span>];\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = Players::PlayerX;\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = Players::PlayerX;\r\n        board[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = Players::PlayerO;\r\n        board[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>] = Players::PlayerO;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">responses</span> = <span class=\"hljs-title function_ invoke__\">minimax</span>(Players::PlayerX, &amp;board);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            responses,\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(PlayActions {\r\n                positions: <span class=\"hljs-built_in\">vec!</span>[Position { x: <span class=\"hljs-number\">2</span>, y: <span class=\"hljs-number\">0</span> }],\r\n                side: Players::PlayerX\r\n            })\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">block_move</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">board</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[Players::Blank; <span class=\"hljs-number\">3</span>]; <span class=\"hljs-number\">3</span>];\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = Players::PlayerX;\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] = Players::PlayerO;\r\n        board[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">0</span>] = Players::PlayerO;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">responses</span> = <span class=\"hljs-title function_ invoke__\">minimax</span>(Players::PlayerX, &amp;board);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            responses,\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(PlayActions {\r\n                positions: <span class=\"hljs-built_in\">vec!</span>[Position { x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">1</span> }],\r\n                side: Players::Blank\r\n            })\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">expected_loss</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">board</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[Players::Blank; <span class=\"hljs-number\">3</span>]; <span class=\"hljs-number\">3</span>];\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = Players::PlayerX;\r\n        board[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] = Players::PlayerO;\r\n        board[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = Players::PlayerX;\r\n        board[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">0</span>] = Players::PlayerO;\r\n        board[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>] = Players::PlayerO;\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">responses</span> = <span class=\"hljs-title function_ invoke__\">minimax</span>(Players::PlayerX, &amp;board);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            responses,\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(PlayActions {\r\n                positions: <span class=\"hljs-built_in\">vec!</span>[\r\n                    Position { x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">0</span> },\r\n                    Position { x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">1</span> },\r\n                    Position { x: <span class=\"hljs-number\">2</span>, y: <span class=\"hljs-number\">1</span> },\r\n                    Position { x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">2</span> }\r\n                ],\r\n                side: Players::PlayerO\r\n            })\r\n        );\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "DaveAxiom",
      "email": "dmakray@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}