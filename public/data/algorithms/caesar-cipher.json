{
  "slug": "caesar-cipher",
  "name": "Caesar Cipher",
  "categories": [
    "ciphers"
  ],
  "body": {
    "en": "<p>The Caesar cipher is a simple cipher and one of the best known encryption algorithms. It is very simple to encrypt, decrypt and intercept. The Caesar cipher is a substitution cipher where each letter in the plain-text (decoded text) is replaced by a letter a certain number of spaces to the right of the letter in the alphabet. (The amount of spaces is called the key or shift and is only known by the sender and intended receiver).</p>\n<p><strong>Disclaimer: Do not attempt to encrypt personal data or serious messages with this cipher!!! It takes only half a second to crack by a computer!</strong></p>\n<ol>\n<li>It takes a very small amount of time to encode and decode messages. (Less than a second, usually)</li>\n<li>No real applications exist for the cipher as it is the most insecure out there.</li>\n<li>This cipher was invented by Julius Caesar as a way to send messages of high military significance.</li>\n</ol>\n<h2>Steps</h2>\n<h3>Encryption</h3>\n<ol>\n<li>Choose the alphabet you are going to use.</li>\n<li>Choose a secret key (shift) that you are going to use in this case <code>n</code>.</li>\n<li>For every letter in the plain-text, replace it by a letter of the alphabet that is <code>n</code> letters away from the letter. (Ex: for a key of <code>1</code>, <code>a</code> would become <code>b</code>, <code>z</code> would become <code>a</code>, etc.)</li>\n<li>The message should now be encoded.</li>\n</ol>\n<h3>Decryption</h3>\n<ol>\n<li>Choose the alphabet that the message was encrypted with.</li>\n<li>Let <code>n</code> be the secret key the message is encoded in.</li>\n<li>For every letter in the cipher-text, replace it by a letter of the alphabet that is <code>n</code> letters behind in the alphabet from the letter.</li>\n</ol>\n<p><code>c</code> would be <code>b</code>, <code>a</code> would be <code>z</code> with a key of <code>1</code>.\r\n4. The message should now be decoded</p>\n<h2>Example</h2>\n<h3>An example of encryption</h3>\n<p>Let us say we are sending a secret message to a friend.</p>\n<ul>\n<li>We first write out our message. In this case: <code>The Caesar cipher is a fun substitution cipher</code></li>\n<li>Our alphabet will be: <code>abcdefghijklmnopqrstuvwxyz</code>. For the uses of this tutorial, case doesn't matter. (On a shift of <code>1</code>: <code>A</code> will become <code>B</code>, <code>a</code> will become <code>b</code>)</li>\n<li>Let our key be 6.</li>\n<li>Starting with the first letter: <code>T</code>. The letter 6 letters away is <code>Z</code>. We add <code>Z</code> to the message.</li>\n<li>The second letter is <code>h</code>. The letter 6 letters away is <code>n</code>. Our message is now <code>Zn</code></li>\n<li>We continue like that until the end. Our final message is: <code>Znk Igkygx iovnkx oy g lat yahyzozazout iovnkx.</code></li>\n<li>Decryption is the same way, except instead of going to the right in the alphabet, we go backwards.</li>\n</ul>\n<h2>Implementation</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/ciphers/caesar_cipher.py\">Python</a></li>\n</ul>",
    "es": "<p>El cifrado César es un cifrado simple y uno de los algoritmos de cifrado más conocidos. Es muy simple de cifrar, descifrar e interceptar. El cifrado César es un cifrado de sustitución donde cada letra del texto sin formato (texto decodificado) se sustituye por una letra un cierto número de espacios a la derecha de la letra en el alfabeto (La cantidad de espacios se denomina clave o cambio y solo es conocida por el remitente y el receptor previsto).</p>\n<p><strong>Descargo de responsabilidad: ¡No intente cifrar datos personales o mensajes serios con este cifrado! ¡Sólo se tarda medio segundo en ser crackeado por un ordenador!</strong></p>\n<ol>\n<li>Se necesita una cantidad muy pequeña de tiempo para codificar y decodificar mensajes (Menos de un segundo, por lo general).</li>\n<li>No existen aplicaciones reales para el cifrado, ya que es el más inseguro por ahí.</li>\n<li>Este cifrado fue inventado por Julio César como una forma de enviar mensajes de gran importancia militar.</li>\n</ol>\n<h2>Pasos</h2>\n<h3>Cifrado</h3>\n<ol>\n<li>Elija el alfabeto que va a utilizar.</li>\n<li>Elija una clave secreta (turno) que va a utilizar en este caso <code>n</code>.</li>\n<li>Por cada letra del texto sin formato, sustitúyala por una letra del alfabeto que esté <code>n</code> letras alejadas de la letra. (Por ejemplo: para una clave de «1», «a» se convertiría en «b», «z» se convertiría en «a», etc.)</li>\n<li>El mensaje ahora debe codificarse.</li>\n</ol>\n<h3>Descifrado</h3>\n<ol>\n<li>Elija el alfabeto con el que se cifró el mensaje.</li>\n<li>Deje que <code>n</code> sea la clave secreta en la que se codifica el mensaje.</li>\n<li>Por cada letra del texto cifrado, sustitúyala por una letra del alfabeto que esté <code>n</code> letras detrás en el alfabeto de la letra.</li>\n</ol>\n<p><code>c</code> sería <code>b</code>, <code>a</code> sería <code>z</code> con una llave de <code>1</code>.\r\n4. El mensaje ahora debe ser decodificado</p>\n<h2>Ejemplo</h2>\n<h3>Un ejemplo de cifrado</h3>\n<p>Digamos que estamos enviando un mensaje secreto a un amigo.</p>\n<ul>\n<li>Primero escribimos nuestro mensaje. En este caso: <code>El cifrado César es un divertido cifrado de sustitución</code></li>\n<li>Nuestro alfabeto será: <code>abcdefghijklmnopqrstuvwxyz</code>. Para los usos de este tutorial, el caso no importa. (En un cambio de «1»: «A» se convertirá en «B», <code>a</code> se convertirá en «b»)</li>\n<li>Deje que nuestra llave sea 6.</li>\n<li>Comenzando con la primera letra: <code>T</code>. La letra a 6 letras de distancia es <code>Z</code>. Añadimos <code>Z</code> al mensaje.</li>\n<li>La segunda letra es <code>h</code>. La letra a 6 letras de distancia es <code>n</code>. Nuestro mensaje ahora es <code>Zn</code></li>\n<li>Seguimos así hasta el final. Nuestro mensaje final es: <code>Znk Igkygx iovnkx oy g lat yahyzozazout iovnkx.</code></li>\n<li>El descifrado es de la misma manera, excepto que en lugar de ir a la derecha en el alfabeto, vamos hacia atrás.</li>\n</ul>\n<h2>Implementación</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/ciphers/caesar_cipher.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/ciphers/caesar_cipher.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/caesar.rs\">Rust</a></li>\n</ul>"
  },
  "implementations": {
    "python": {
      "dir": "ciphers\\caesar_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers\\caesar_cipher.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> ascii_letters\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encrypt</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span>, alphabet: <span class=\"hljs-built_in\">str</span> | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    encrypt\r\n    =======\r\n    Encodes a given string with the caesar cipher and returns the encoded\r\n    message\r\n\r\n    Parameters:\r\n    -----------\r\n    *   input_string: the plain-text that needs to be encoded\r\n    *   key: the number of letters to shift the message by\r\n\r\n    Optional:\r\n    *   alphabet (None): the alphabet used to encode the cipher, if not\r\n        specified, the standard english alphabet with upper and lowercase\r\n        letters is used\r\n\r\n    Returns:\r\n    *   A string containing the encoded cipher-text\r\n\r\n    More on the caesar cipher\r\n    =========================\r\n    The caesar cipher is named after Julius Caesar who used it when sending\r\n    secret military messages to his troops. This is a simple substitution cipher\r\n    where very character in the plain-text is shifted by a certain number known\r\n    as the &quot;key&quot; or &quot;shift&quot;.\r\n\r\n    Example:\r\n    Say we have the following message:\r\n    &quot;Hello, captain&quot;\r\n\r\n    And our alphabet is made up of lower and uppercase letters:\r\n    &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;\r\n\r\n    And our shift is &quot;2&quot;\r\n\r\n    We can then encode the message, one letter at a time. &quot;H&quot; would become &quot;J&quot;,\r\n    since &quot;J&quot; is two letters away, and so on. If the shift is ever two large, or\r\n    our letter is at the end of the alphabet, we just start at the beginning\r\n    (&quot;Z&quot; would shift to &quot;a&quot; then &quot;b&quot; and so on).\r\n\r\n    Our final message would be &quot;Jgnnq, ecrvckp&quot;\r\n\r\n    Further reading\r\n    ===============\r\n    *   https://en.m.wikipedia.org/wiki/Caesar_cipher\r\n\r\n    Doctests\r\n    ========\r\n    &gt;&gt;&gt; encrypt(&#x27;The quick brown fox jumps over the lazy dog&#x27;, 8)\r\n    &#x27;bpm yCqks jzwEv nwF rCuxA wDmz Bpm tiHG lwo&#x27;\r\n\r\n    &gt;&gt;&gt; encrypt(&#x27;A very large key&#x27;, 8000)\r\n    &#x27;s nWjq dSjYW cWq&#x27;\r\n\r\n    &gt;&gt;&gt; encrypt(&#x27;a lowercase alphabet&#x27;, 5, &#x27;abcdefghijklmnopqrstuvwxyz&#x27;)\r\n    &#x27;f qtbjwhfxj fqumfgjy&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Set default alphabet to lower and upper case english chars</span>\r\n    alpha = alphabet <span class=\"hljs-keyword\">or</span> ascii_letters\r\n\r\n    <span class=\"hljs-comment\"># The final result string</span>\r\n    result = <span class=\"hljs-string\">&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> input_string:\r\n        <span class=\"hljs-keyword\">if</span> character <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> alpha:\r\n            <span class=\"hljs-comment\"># Append without encryption if character is not in the alphabet</span>\r\n            result += character\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-comment\"># Get the index of the new key and make sure it isn&#x27;t too large</span>\r\n            new_key = (alpha.index(character) + key) % <span class=\"hljs-built_in\">len</span>(alpha)\r\n\r\n            <span class=\"hljs-comment\"># Append the encoded character to the alphabet</span>\r\n            result += alpha[new_key]\r\n\r\n    <span class=\"hljs-keyword\">return</span> result\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrypt</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span>, alphabet: <span class=\"hljs-built_in\">str</span> | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    decrypt\r\n    =======\r\n    Decodes a given string of cipher-text and returns the decoded plain-text\r\n\r\n    Parameters:\r\n    -----------\r\n    *   input_string: the cipher-text that needs to be decoded\r\n    *   key: the number of letters to shift the message backwards by to decode\r\n\r\n    Optional:\r\n    *   alphabet (None): the alphabet used to decode the cipher, if not\r\n        specified, the standard english alphabet with upper and lowercase\r\n        letters is used\r\n\r\n    Returns:\r\n    *   A string containing the decoded plain-text\r\n\r\n    More on the caesar cipher\r\n    =========================\r\n    The caesar cipher is named after Julius Caesar who used it when sending\r\n    secret military messages to his troops. This is a simple substitution cipher\r\n    where very character in the plain-text is shifted by a certain number known\r\n    as the &quot;key&quot; or &quot;shift&quot;. Please keep in mind, here we will be focused on\r\n    decryption.\r\n\r\n    Example:\r\n    Say we have the following cipher-text:\r\n    &quot;Jgnnq, ecrvckp&quot;\r\n\r\n    And our alphabet is made up of lower and uppercase letters:\r\n    &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;\r\n\r\n    And our shift is &quot;2&quot;\r\n\r\n    To decode the message, we would do the same thing as encoding, but in\r\n    reverse. The first letter, &quot;J&quot; would become &quot;H&quot; (remember: we are decoding)\r\n    because &quot;H&quot; is two letters in reverse (to the left) of &quot;J&quot;. We would\r\n    continue doing this. A letter like &quot;a&quot; would shift back to the end of\r\n    the alphabet, and would become &quot;Z&quot; or &quot;Y&quot; and so on.\r\n\r\n    Our final message would be &quot;Hello, captain&quot;\r\n\r\n    Further reading\r\n    ===============\r\n    *   https://en.m.wikipedia.org/wiki/Caesar_cipher\r\n\r\n    Doctests\r\n    ========\r\n    &gt;&gt;&gt; decrypt(&#x27;bpm yCqks jzwEv nwF rCuxA wDmz Bpm tiHG lwo&#x27;, 8)\r\n    &#x27;The quick brown fox jumps over the lazy dog&#x27;\r\n\r\n    &gt;&gt;&gt; decrypt(&#x27;s nWjq dSjYW cWq&#x27;, 8000)\r\n    &#x27;A very large key&#x27;\r\n\r\n    &gt;&gt;&gt; decrypt(&#x27;f qtbjwhfxj fqumfgjy&#x27;, 5, &#x27;abcdefghijklmnopqrstuvwxyz&#x27;)\r\n    &#x27;a lowercase alphabet&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Turn on decode mode by making the key negative</span>\r\n    key *= -<span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> encrypt(input_string, key, alphabet)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">brute_force</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span>, alphabet: <span class=\"hljs-built_in\">str</span> | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">str</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    brute_force\r\n    ===========\r\n    Returns all the possible combinations of keys and the decoded strings in the\r\n    form of a dictionary\r\n\r\n    Parameters:\r\n    -----------\r\n    *   input_string: the cipher-text that needs to be used during brute-force\r\n\r\n    Optional:\r\n    *   alphabet:  (None): the alphabet used to decode the cipher, if not\r\n        specified, the standard english alphabet with upper and lowercase\r\n        letters is used\r\n\r\n    More about brute force\r\n    ======================\r\n    Brute force is when a person intercepts a message or password, not knowing\r\n    the key and tries every single combination. This is easy with the caesar\r\n    cipher since there are only all the letters in the alphabet. The more\r\n    complex the cipher, the larger amount of time it will take to do brute force\r\n\r\n    Ex:\r\n    Say we have a 5 letter alphabet (abcde), for simplicity and we intercepted the\r\n    following message:\r\n\r\n    &quot;dbc&quot;\r\n\r\n    we could then just write out every combination:\r\n    ecd... and so on, until we reach a combination that makes sense:\r\n    &quot;cab&quot;\r\n\r\n    Further reading\r\n    ===============\r\n    *   https://en.wikipedia.org/wiki/Brute_force\r\n\r\n    Doctests\r\n    ========\r\n    &gt;&gt;&gt; brute_force(&quot;jFyuMy xIH&#x27;N vLONy zILwy Gy!&quot;)[20]\r\n    &quot;Please don&#x27;t brute force me!&quot;\r\n\r\n    &gt;&gt;&gt; brute_force(1)\r\n    Traceback (most recent call last):\r\n    TypeError: &#x27;int&#x27; object is not iterable\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Set default alphabet to lower and upper case english chars</span>\r\n    alpha = alphabet <span class=\"hljs-keyword\">or</span> ascii_letters\r\n\r\n    <span class=\"hljs-comment\"># To store data on all the combinations</span>\r\n    brute_force_data = {}\r\n\r\n    <span class=\"hljs-comment\"># Cycle through each combination</span>\r\n    <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(alpha) + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-comment\"># Decrypt the message and store the result in the data</span>\r\n        brute_force_data[key] = decrypt(input_string, key, alpha)\r\n\r\n    <span class=\"hljs-keyword\">return</span> brute_force_data\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&#x27;\\n<span class=\"hljs-subst\">{<span class=\"hljs-string\">&quot;-&quot;</span> * <span class=\"hljs-number\">10</span>}</span>\\n Menu\\n<span class=\"hljs-subst\">{<span class=\"hljs-string\">&quot;-&quot;</span> * <span class=\"hljs-number\">10</span>}</span>&#x27;</span>)\r\n        <span class=\"hljs-built_in\">print</span>(*[<span class=\"hljs-string\">&quot;1.Encrypt&quot;</span>, <span class=\"hljs-string\">&quot;2.Decrypt&quot;</span>, <span class=\"hljs-string\">&quot;3.BruteForce&quot;</span>, <span class=\"hljs-string\">&quot;4.Quit&quot;</span>], sep=<span class=\"hljs-string\">&quot;\\n&quot;</span>)\r\n\r\n        <span class=\"hljs-comment\"># get user input</span>\r\n        choice = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;\\nWhat would you like to do?: &quot;</span>).strip() <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;4&quot;</span>\r\n\r\n        <span class=\"hljs-comment\"># run functions based on what the user chose</span>\r\n        <span class=\"hljs-keyword\">if</span> choice <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>):\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Invalid choice, please enter a valid choice&quot;</span>)\r\n        <span class=\"hljs-keyword\">elif</span> choice == <span class=\"hljs-string\">&quot;1&quot;</span>:\r\n            input_string = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Please enter the string to be encrypted: &quot;</span>)\r\n            key = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Please enter off-set: &quot;</span>).strip())\r\n\r\n            <span class=\"hljs-built_in\">print</span>(encrypt(input_string, key))\r\n        <span class=\"hljs-keyword\">elif</span> choice == <span class=\"hljs-string\">&quot;2&quot;</span>:\r\n            input_string = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Please enter the string to be decrypted: &quot;</span>)\r\n            key = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Please enter off-set: &quot;</span>).strip())\r\n\r\n            <span class=\"hljs-built_in\">print</span>(decrypt(input_string, key))\r\n        <span class=\"hljs-keyword\">elif</span> choice == <span class=\"hljs-string\">&quot;3&quot;</span>:\r\n            input_string = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Please enter the string to be decrypted: &quot;</span>)\r\n            brute_force_data = brute_force(input_string)\r\n\r\n            <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> brute_force_data.items():\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Key: <span class=\"hljs-subst\">{key}</span> | Message: <span class=\"hljs-subst\">{value}</span>&quot;</span>)\r\n\r\n        <span class=\"hljs-keyword\">elif</span> choice == <span class=\"hljs-string\">&quot;4&quot;</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Goodbye.&quot;</span>)\r\n            <span class=\"hljs-keyword\">break</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "ciphers\\caesar_cipher.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers\\caesar_cipher.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file caesar_cipher.cpp\r\n * @brief Implementation of [Caesar cipher](https://en.wikipedia.org/wiki/Caesar_cipher) algorithm.\r\n *\r\n * @details\r\n * In cryptography, a Caesar cipher, also known as Caesar&#x27;s cipher, the shift cipher, \r\n * Caesar&#x27;s code or Caesar shift, is one of the simplest and most widely known encryption \r\n * techniques. It is a type of substitution cipher in which each letter in the plaintext \r\n * is replaced by a letter some fixed number of positions down the alphabet. For example, \r\n * with a left shift of 3, D would be replaced by A, E would become B, and so on. \r\n * The method is named after Julius Caesar, who used it in his private correspondence.\r\n *\r\n * ### Algorithm\r\n * The encryption can also be represented using modular arithmetic by first transforming \r\n * the letters into numbers, according to the scheme, A → 0, B → 1, ..., Z → 25.\r\n * Encryption of a letter x by a shift n can be described mathematically as,\r\n * \\f[ E(x) = (x + n)\\;\\mbox{mod}\\; 26\\f]\r\n * while decryption can be described as,\r\n * \\f[ D(x) = (x - n) \\;\\mbox{mod}\\; 26\\f]\r\n * \r\n * \\note This program implements caesar cipher for only uppercase English alphabet characters (i.e. A-Z). \r\n * \r\n * @author [Deep Raval](https://github.com/imdeep2905)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** \\namespace ciphers\r\n * \\brief Algorithms for encryption and decryption\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> ciphers {\r\n    <span class=\"hljs-comment\">/** \\namespace caesar\r\n     * \\brief Functions for [Caesar cipher](https://en.wikipedia.org/wiki/Caesar_cipher) algorithm.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">namespace</span> caesar {   \r\n        <span class=\"hljs-keyword\">namespace</span> {\r\n            <span class=\"hljs-comment\">/**\r\n             * This function finds character for given value (i.e.A-Z)\r\n             * @param x value for which we want character \r\n             * @returns  corresponding character for perticular value\r\n             */</span>        \r\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-title\">get_char</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> x)</span> </span>{\r\n                <span class=\"hljs-comment\">// By adding 65 we are scaling 0-25 to 65-90. </span>\r\n                <span class=\"hljs-comment\">// Which are in fact ASCII values of A-Z. </span>\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">char</span>(x + <span class=\"hljs-number\">65</span>); \r\n            }\r\n            <span class=\"hljs-comment\">/**\r\n             * This function finds value for given character (i.e.0-25)\r\n             * @param c character for which we want value\r\n             * @returns returns corresponding value for perticular character\r\n             */</span>  \r\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">get_value</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> c)</span> </span>{\r\n                <span class=\"hljs-comment\">// A-Z have ASCII values in range 65-90.</span>\r\n                <span class=\"hljs-comment\">// Hence subtracting 65 will scale them to 0-25.</span>\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(c - <span class=\"hljs-number\">65</span>);\r\n            }\r\n        } <span class=\"hljs-comment\">// Unnamed namespace</span>\r\n        <span class=\"hljs-comment\">/**\r\n         * Encrypt given text using caesar cipher.\r\n         * @param text text to be encrypted\r\n         * @param shift number of shifts to be applied\r\n         * @returns new encrypted text\r\n         */</span>\r\n        <span class=\"hljs-function\">std::string <span class=\"hljs-title\">encrypt</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;text, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> &amp;shift)</span> </span>{\r\n            std::string encrypted_text = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// Empty string to store encrypted text</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> c : text) { <span class=\"hljs-comment\">// Going through each character</span>\r\n                <span class=\"hljs-type\">int</span> place_value = <span class=\"hljs-built_in\">get_value</span>(c); <span class=\"hljs-comment\">// Getting value of character (i.e. 0-25)</span>\r\n                place_value = (place_value + shift) % <span class=\"hljs-number\">26</span>; <span class=\"hljs-comment\">// Applying encryption formula</span>\r\n                <span class=\"hljs-type\">char</span> new_char = <span class=\"hljs-built_in\">get_char</span>(place_value); <span class=\"hljs-comment\">// Getting new character from new value (i.e. A-Z)</span>\r\n                encrypted_text += new_char; <span class=\"hljs-comment\">// Appending encrypted character</span>\r\n            }\r\n            <span class=\"hljs-keyword\">return</span> encrypted_text; <span class=\"hljs-comment\">// Returning encrypted text</span>\r\n        }\r\n        <span class=\"hljs-comment\">/**\r\n         * Decrypt given text using caesar cipher.\r\n         * @param text text to be decrypted\r\n         * @param shift number of shifts to be applied\r\n         * @returns new decrypted text\r\n         */</span>        \r\n        <span class=\"hljs-function\">std::string <span class=\"hljs-title\">decrypt</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;text, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> &amp;shift)</span> </span>{\r\n            std::string decrypted_text = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// Empty string to store decrypted text</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> c : text) { <span class=\"hljs-comment\">// Going through each character</span>\r\n                <span class=\"hljs-type\">int</span> place_value = <span class=\"hljs-built_in\">get_value</span>(c); <span class=\"hljs-comment\">// Getting value of character (i.e. 0-25)</span>\r\n                place_value = (place_value - shift) % <span class=\"hljs-number\">26</span>;<span class=\"hljs-comment\">// Applying decryption formula</span>\r\n                <span class=\"hljs-keyword\">if</span>(place_value &lt; <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// Handling case where remainder is negative </span>\r\n                    place_value = place_value + <span class=\"hljs-number\">26</span>;\r\n                }\r\n                <span class=\"hljs-type\">char</span> new_char = <span class=\"hljs-built_in\">get_char</span>(place_value); <span class=\"hljs-comment\">// Getting original character from decrypted value (i.e. A-Z)</span>\r\n                decrypted_text += new_char; <span class=\"hljs-comment\">// Appending decrypted character</span>\r\n            }\r\n            <span class=\"hljs-keyword\">return</span> decrypted_text; <span class=\"hljs-comment\">// Returning decrypted text</span>\r\n        }\r\n    } <span class=\"hljs-comment\">// namespace caesar</span>\r\n} <span class=\"hljs-comment\">// namespace ciphers</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to test above algorithm\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Test 1</span>\r\n    std::string text1 = <span class=\"hljs-string\">&quot;ALANTURING&quot;</span>;\r\n    std::string encrypted1 = ciphers::caesar::<span class=\"hljs-built_in\">encrypt</span>(text1, <span class=\"hljs-number\">17</span>);\r\n    std::string decrypted1 = ciphers::caesar::<span class=\"hljs-built_in\">decrypt</span>(encrypted1, <span class=\"hljs-number\">17</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(text1 == decrypted1);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original text : &quot;</span> &lt;&lt; text1;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Encrypted text (with shift = 21) : &quot;</span> &lt;&lt; encrypted1;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Decrypted text : &quot;</span>&lt;&lt; decrypted1 &lt;&lt; std::endl;\r\n    <span class=\"hljs-comment\">// Test 2</span>\r\n    std::string text2 = <span class=\"hljs-string\">&quot;HELLOWORLD&quot;</span>;\r\n    std::string encrypted2 = ciphers::caesar::<span class=\"hljs-built_in\">encrypt</span>(text2, <span class=\"hljs-number\">1729</span>);\r\n    std::string decrypted2 = ciphers::caesar::<span class=\"hljs-built_in\">decrypt</span>(encrypted2, <span class=\"hljs-number\">1729</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(text2 == decrypted2);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original text : &quot;</span> &lt;&lt; text2;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Encrypted text (with shift = 1729) : &quot;</span> &lt;&lt; encrypted2;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Decrypted text : &quot;</span>&lt;&lt; decrypted2 &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Driver Code */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Testing</span>\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "php": {
      "dir": "ciphers\\caesarCipher.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/ciphers\\caesarCipher.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Encrypt given text using caesar cipher.\r\n * <span class=\"hljs-doctag\">@param</span> string text text to be encrypted\r\n * <span class=\"hljs-doctag\">@param</span> int shift number of shifts to be applied\r\n * <span class=\"hljs-doctag\">@return</span> string new encrypted text\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">encrypt</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$text</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$shift</span></span>): <span class=\"hljs-title\">string</span>\r\n</span>{\r\n    <span class=\"hljs-variable\">$encryptedText</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>; <span class=\"hljs-comment\">// Empty string to store encrypted text</span>\r\n    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$text</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$c</span>) { <span class=\"hljs-comment\">// Going through each character</span>\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_ invoke__\">ctype_alpha</span>(<span class=\"hljs-variable\">$c</span>)) {\r\n            <span class=\"hljs-variable\">$placeValue</span> = <span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-variable\">$c</span>) - <span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-title function_ invoke__\">ctype_upper</span>(<span class=\"hljs-variable\">$c</span>) ? <span class=\"hljs-string\">&#x27;A&#x27;</span> : <span class=\"hljs-string\">&#x27;a&#x27;</span>); <span class=\"hljs-comment\">// Getting value of character (i.e. 0-25)</span>\r\n            <span class=\"hljs-variable\">$placeValue</span> = (<span class=\"hljs-variable\">$placeValue</span> + <span class=\"hljs-variable\">$shift</span>) % <span class=\"hljs-number\">26</span>; <span class=\"hljs-comment\">// Applying encryption formula</span>\r\n            <span class=\"hljs-variable\">$placeValue</span> += <span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-title function_ invoke__\">ctype_upper</span>(<span class=\"hljs-variable\">$c</span>) ? <span class=\"hljs-string\">&#x27;A&#x27;</span> : <span class=\"hljs-string\">&#x27;a&#x27;</span>);\r\n            <span class=\"hljs-variable\">$newChar</span> = <span class=\"hljs-title function_ invoke__\">chr</span>(<span class=\"hljs-variable\">$placeValue</span>); <span class=\"hljs-comment\">// Getting new character from new value (i.e. A-Z)</span>\r\n            <span class=\"hljs-variable\">$encryptedText</span> .= <span class=\"hljs-variable\">$newChar</span>; <span class=\"hljs-comment\">// Appending encrypted character</span>\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-variable\">$encryptedText</span> .= <span class=\"hljs-variable\">$c</span>; <span class=\"hljs-comment\">// Appending the original character</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$encryptedText</span>; <span class=\"hljs-comment\">// Returning encrypted text</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Decrypt given text using caesar cipher.\r\n * <span class=\"hljs-doctag\">@param</span> string text text to be decrypted\r\n * <span class=\"hljs-doctag\">@param</span> int shift number of shifts to be applied\r\n * <span class=\"hljs-doctag\">@return</span> string new decrypted text\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">decrypt</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$text</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$shift</span></span>): <span class=\"hljs-title\">string</span>\r\n</span>{\r\n    <span class=\"hljs-variable\">$decryptedText</span> = <span class=\"hljs-string\">&#x27;&#x27;</span>; <span class=\"hljs-comment\">// Empty string to store decrypted text</span>\r\n    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$text</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$c</span>) { <span class=\"hljs-comment\">// Going through each character</span>\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_ invoke__\">ctype_alpha</span>(<span class=\"hljs-variable\">$c</span>)) {\r\n            <span class=\"hljs-variable\">$placeValue</span> = <span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-variable\">$c</span>) - <span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-title function_ invoke__\">ctype_upper</span>(<span class=\"hljs-variable\">$c</span>) ? <span class=\"hljs-string\">&#x27;A&#x27;</span> : <span class=\"hljs-string\">&#x27;a&#x27;</span>); <span class=\"hljs-comment\">// Getting value of character (i.e. 0-25)</span>\r\n            <span class=\"hljs-variable\">$placeValue</span> = (<span class=\"hljs-variable\">$placeValue</span> - <span class=\"hljs-variable\">$shift</span>) % <span class=\"hljs-number\">26</span>; <span class=\"hljs-comment\">// Applying decryption formula</span>\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$placeValue</span> &lt; <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// Handling case where remainder is negative </span>\r\n                <span class=\"hljs-variable\">$placeValue</span> += <span class=\"hljs-number\">26</span>;\r\n            }\r\n            <span class=\"hljs-variable\">$placeValue</span> += <span class=\"hljs-title function_ invoke__\">ord</span>(<span class=\"hljs-title function_ invoke__\">ctype_upper</span>(<span class=\"hljs-variable\">$c</span>) ? <span class=\"hljs-string\">&#x27;A&#x27;</span> : <span class=\"hljs-string\">&#x27;a&#x27;</span>);\r\n            <span class=\"hljs-variable\">$newChar</span> = <span class=\"hljs-title function_ invoke__\">chr</span>(<span class=\"hljs-variable\">$placeValue</span>); <span class=\"hljs-comment\">// Getting new character from new value (i.e. A-Z)</span>\r\n            <span class=\"hljs-variable\">$decryptedText</span> .= <span class=\"hljs-variable\">$newChar</span>; <span class=\"hljs-comment\">// Appending decrypted character</span>\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-variable\">$decryptedText</span> .= <span class=\"hljs-variable\">$c</span>; <span class=\"hljs-comment\">// Appending the original character</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$decryptedText</span>; <span class=\"hljs-comment\">// Returning decrypted text</span>\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Nima HeydariNasab",
      "email": "nima.heydari79@yahoo.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "task4233",
      "email": "tks.m1205@gmail.com",
      "commits": 1
    },
    {
      "name": "Vedant Mamgain",
      "email": "mamgainvedant@gmail.com",
      "commits": 1
    },
    {
      "name": "adam-pog",
      "email": "adampog77@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Deep Raval",
      "email": "deepraval2905@gmail.com",
      "commits": 1
    },
    {
      "name": "Abdeldjaouad Nusayr Medakene",
      "email": "31663979+MrGeek1337@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "CapofWeird",
      "email": "40702379+CapofWeird@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maxim R",
      "email": "49735721+mrmaxguns@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Yurii",
      "email": "33547678+yuriimchg@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Abhi Kampurath",
      "email": "35632653+abhikmp@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "PyDevthon",
      "email": "34104945+PyDevthon@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Henocks",
      "email": "hr4574@naver.com",
      "commits": 1
    },
    {
      "name": "Sergey Tsaplin",
      "email": "me@sergeytsaplin.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en\\Ciphers\\caesar_cipher.md",
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es\\Cifrado\\Cifrado Cesar.md"
  }
}