{
  "slug": "3",
  "name": "3",
  "categories": [
    "leetcode"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "leetcode\\src\\3.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/leetcode\\src\\3.c",
      "code": "<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lengthOfLongestSubstring</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *str)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">strlen</span>(str);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (!n)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-type\">int</span> L_len = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// length of longest substring</span>\r\n    <span class=\"hljs-type\">int</span> C_len = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// length of current substring</span>\r\n\r\n    <span class=\"hljs-type\">int</span> P_ind, i;      <span class=\"hljs-comment\">//  P_ind for previous index</span>\r\n    <span class=\"hljs-type\">int</span> visited[<span class=\"hljs-number\">256</span>];  <span class=\"hljs-comment\">//  visited will keep track of visiting char for the last</span>\r\n                       <span class=\"hljs-comment\">//  instance. since there are 256 ASCII char, its size is</span>\r\n                       <span class=\"hljs-comment\">//  limited to that value.</span>\r\n    <span class=\"hljs-built_in\">memset</span>(visited, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * <span class=\"hljs-number\">256</span>);\r\n    visited[str[<span class=\"hljs-number\">0</span>]] =\r\n        <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">//  the index of that char will tell us that when it was visited.</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; n; i++)\r\n    {\r\n        P_ind = visited[str[i]];\r\n        <span class=\"hljs-keyword\">if</span> (P_ind == <span class=\"hljs-number\">-1</span> || i - C_len &gt; P_ind)\r\n            C_len++;  <span class=\"hljs-comment\">//  if the current char was not visited earlier, or it is</span>\r\n                      <span class=\"hljs-comment\">//  not the part of current substring</span>\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {  <span class=\"hljs-comment\">//  otherwise, we need to change the current/longest substring length</span>\r\n            <span class=\"hljs-keyword\">if</span> (C_len &gt; L_len)\r\n                L_len = C_len;\r\n            C_len = i - P_ind;\r\n        }\r\n        visited[str[i]] = i;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (C_len &gt; L_len)\r\n        L_len = C_len;\r\n    <span class=\"hljs-keyword\">return</span> L_len;\r\n}\r\n<span class=\"hljs-comment\">/* Brute force */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lengthOfLongestSubstring</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> cur_max = <span class=\"hljs-number\">0</span>, max = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> counter[<span class=\"hljs-number\">255</span>];\r\n    <span class=\"hljs-type\">int</span> end = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-built_in\">memset</span>(counter, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * <span class=\"hljs-number\">255</span>);\r\n    <span class=\"hljs-keyword\">while</span> (end &lt; <span class=\"hljs-built_in\">strlen</span>(s))\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (counter[s[end]] == <span class=\"hljs-number\">0</span>)\r\n        {\r\n            counter[s[end]]++;\r\n            end++;\r\n            cur_max++;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            <span class=\"hljs-type\">char</span> c = s[end];\r\n            <span class=\"hljs-built_in\">memset</span>(counter, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span> * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n            <span class=\"hljs-keyword\">if</span> (cur_max &gt;= max)\r\n                max = cur_max;\r\n            cur_max = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">while</span> (s[end - <span class=\"hljs-number\">1</span>] != c) end--;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (cur_max &gt;= max)\r\n        max = cur_max;\r\n    <span class=\"hljs-keyword\">return</span> max;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Liu Yihua",
      "email": "yihuajack@live.cn",
      "commits": 1
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}