{
  "slug": "fast-power",
  "name": "Fast Power",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\fast_power.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\fast_power.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Faster computation for \\f$a^b\\f$\r\n *\r\n * Program that computes \\f$a^b\\f$ in \\f$O(logN)\\f$ time.\r\n * It is based on formula that:\r\n * 1. if \\f$b\\f$ is even:\r\n *  \\f$a^b = a^\\frac{b}{2} \\cdot a^\\frac{b}{2} = {a^\\frac{b}{2}}^2\\f$\r\n * 2. if \\f$b\\f$ is odd: \\f$a^b = a^\\frac{b-1}{2}\r\n *  \\cdot a^\\frac{b-1}{2} \\cdot a = {a^\\frac{b-1}{2}}^2 \\cdot a\\f$\r\n *\r\n * We can compute \\f$a^b\\f$ recursively using above algorithm.\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * algorithm implementation for \\f$a^b\\f$\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">fast_power_recursive</span><span class=\"hljs-params\">(T a, T b)</span> </span>{\r\n    <span class=\"hljs-comment\">// negative power. a^b = 1 / (a^-b)</span>\r\n    <span class=\"hljs-keyword\">if</span> (b &lt; <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1.0</span> / <span class=\"hljs-built_in\">fast_power_recursive</span>(a, -b);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    T bottom = <span class=\"hljs-built_in\">fast_power_recursive</span>(a, b &gt;&gt; <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-comment\">// Since it is integer division b/2 = (b-1)/2 where b is odd.</span>\r\n    <span class=\"hljs-comment\">// Therefore, case2 is easily solved by integer division.</span>\r\n\r\n    <span class=\"hljs-type\">double</span> result;\r\n    <span class=\"hljs-keyword\">if</span> ((b &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// case1</span>\r\n        result = bottom * bottom;\r\n    <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-comment\">// case2</span>\r\n        result = bottom * bottom * a;\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n    Same algorithm with little different formula.\r\n    It still calculates in \\f$O(\\log N)\\f$\r\n*/</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">fast_power_linear</span><span class=\"hljs-params\">(T a, T b)</span> </span>{\r\n    <span class=\"hljs-comment\">// negative power. a^b = 1 / (a^-b)</span>\r\n    <span class=\"hljs-keyword\">if</span> (b &lt; <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1.0</span> / <span class=\"hljs-built_in\">fast_power_linear</span>(a, -b);\r\n\r\n    <span class=\"hljs-type\">double</span> result = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">while</span> (b) {\r\n        <span class=\"hljs-keyword\">if</span> (b &amp; <span class=\"hljs-number\">1</span>)\r\n            result = result * a;\r\n        a = a * a;\r\n        b = b &gt;&gt; <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::<span class=\"hljs-built_in\">srand</span>(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));\r\n    std::ios_base::<span class=\"hljs-built_in\">sync_with_stdio</span>(<span class=\"hljs-literal\">false</span>);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Testing...&quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) {\r\n        <span class=\"hljs-type\">int</span> a = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">20</span> - <span class=\"hljs-number\">10</span>;\r\n        <span class=\"hljs-type\">int</span> b = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">20</span> - <span class=\"hljs-number\">10</span>;\r\n        std::cout &lt;&lt; std::endl &lt;&lt; <span class=\"hljs-string\">&quot;Calculating &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;^&quot;</span> &lt;&lt; b &lt;&lt; std::endl;\r\n        <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">fast_power_recursive</span>(a, b) == std::<span class=\"hljs-built_in\">pow</span>(a, b));\r\n        <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">fast_power_linear</span>(a, b) == std::<span class=\"hljs-built_in\">pow</span>(a, b));\r\n\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;------ &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;^&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; = &quot;</span>\r\n                  &lt;&lt; <span class=\"hljs-built_in\">fast_power_recursive</span>(a, b) &lt;&lt; std::endl;\r\n    }\r\n\r\n    <span class=\"hljs-type\">int64_t</span> a, b;\r\n    std::cin &gt;&gt; a &gt;&gt; b;\r\n\r\n    std::cout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;^&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; = &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">fast_power_recursive</span>(a, b)\r\n              &lt;&lt; std::endl;\r\n\r\n    std::cout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;^&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; = &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">fast_power_linear</span>(a, b) &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\math\\fast_power.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\math\\fast_power.rs",
      "code": "<span class=\"hljs-comment\">/// fast_power returns the result of base^power mod modulus</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fast_power</span>(<span class=\"hljs-keyword\">mut</span> base: <span class=\"hljs-type\">usize</span>, <span class=\"hljs-keyword\">mut</span> power: <span class=\"hljs-type\">usize</span>, modulus: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\r\n    <span class=\"hljs-built_in\">assert!</span>(base &gt;= <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">while</span> power &gt; <span class=\"hljs-number\">0</span> {\r\n        <span class=\"hljs-keyword\">if</span> power &amp; <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span> {\r\n            res = (res * base) % modulus;\r\n        }\r\n        base = (base * base) % modulus;\r\n        power &gt;&gt;= <span class=\"hljs-number\">1</span>;\r\n    }\r\n    res\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test</span>() {\r\n        <span class=\"hljs-keyword\">const</span> MOD: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">1000000007</span>;\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fast_power</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, MOD), <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fast_power</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, MOD), <span class=\"hljs-number\">4</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fast_power</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, MOD), <span class=\"hljs-number\">16</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fast_power</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, MOD), <span class=\"hljs-number\">81</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fast_power</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">100</span>, MOD), <span class=\"hljs-number\">976371285</span>);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "fffzlfk",
      "email": "44939690+fffzlfk@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}