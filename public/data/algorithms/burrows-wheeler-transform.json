{
  "slug": "burrows-wheeler-transform",
  "name": "Burrows Wheeler Transform",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src\\string\\burrows_wheeler_transform.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\string\\burrows_wheeler_transform.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">burrows_wheeler_transform</span>(input: <span class=\"hljs-type\">String</span>) <span class=\"hljs-punctuation\">-&gt;</span> (<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">usize</span>) {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = input.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">table</span> = Vec::&lt;<span class=\"hljs-type\">String</span>&gt;::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(len);\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..len {\r\n        table.<span class=\"hljs-title function_ invoke__\">push</span>(input[i..].<span class=\"hljs-title function_ invoke__\">to_owned</span>() + &amp;input[..i]);\r\n    }\r\n    table.<span class=\"hljs-title function_ invoke__\">sort_by_key</span>(|a| a.<span class=\"hljs-title function_ invoke__\">to_lowercase</span>());\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">encoded</span> = String::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">index</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-title function_ invoke__\">for</span> (i, item) <span class=\"hljs-keyword\">in</span> table.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>().<span class=\"hljs-title function_ invoke__\">take</span>(len) {\r\n        encoded.<span class=\"hljs-title function_ invoke__\">push</span>(item.<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">last</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>());\r\n        <span class=\"hljs-keyword\">if</span> item.<span class=\"hljs-title function_ invoke__\">eq</span>(&amp;input) {\r\n            index = i;\r\n        }\r\n    }\r\n\r\n    (encoded, index)\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">inv_burrows_wheeler_transform</span>(input: (<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">usize</span>)) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = input.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">len</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">table</span> = Vec::&lt;(<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">char</span>)&gt;::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(len);\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..len {\r\n        table.<span class=\"hljs-title function_ invoke__\">push</span>((i, input.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">nth</span>(i).<span class=\"hljs-title function_ invoke__\">unwrap</span>()));\r\n    }\r\n\r\n    table.<span class=\"hljs-title function_ invoke__\">sort_by</span>(|a, b| a.<span class=\"hljs-number\">1</span>.<span class=\"hljs-title function_ invoke__\">cmp</span>(&amp;b.<span class=\"hljs-number\">1</span>));\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">decoded</span> = String::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">idx</span> = input.<span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..len {\r\n        decoded.<span class=\"hljs-title function_ invoke__\">push</span>(table[idx].<span class=\"hljs-number\">1</span>);\r\n        idx = table[idx].<span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    decoded\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">inv_burrows_wheeler_transform</span>(<span class=\"hljs-title function_ invoke__\">burrows_wheeler_transform</span>(<span class=\"hljs-string\">&quot;CARROT&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())),\r\n            <span class=\"hljs-string\">&quot;CARROT&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">inv_burrows_wheeler_transform</span>(<span class=\"hljs-title function_ invoke__\">burrows_wheeler_transform</span>(<span class=\"hljs-string\">&quot;TOMATO&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())),\r\n            <span class=\"hljs-string\">&quot;TOMATO&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">inv_burrows_wheeler_transform</span>(<span class=\"hljs-title function_ invoke__\">burrows_wheeler_transform</span>(<span class=\"hljs-string\">&quot;THISISATEST&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())),\r\n            <span class=\"hljs-string\">&quot;THISISATEST&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">inv_burrows_wheeler_transform</span>(<span class=\"hljs-title function_ invoke__\">burrows_wheeler_transform</span>(<span class=\"hljs-string\">&quot;THEALGORITHMS&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())),\r\n            <span class=\"hljs-string\">&quot;THEALGORITHMS&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">inv_burrows_wheeler_transform</span>(<span class=\"hljs-title function_ invoke__\">burrows_wheeler_transform</span>(<span class=\"hljs-string\">&quot;RUST&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())),\r\n            <span class=\"hljs-string\">&quot;RUST&quot;</span>\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">special_characters</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">inv_burrows_wheeler_transform</span>(<span class=\"hljs-title function_ invoke__\">burrows_wheeler_transform</span>(<span class=\"hljs-string\">&quot;!.!.!??.=::&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())),\r\n            <span class=\"hljs-string\">&quot;!.!.!??.=::&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">inv_burrows_wheeler_transform</span>(<span class=\"hljs-title function_ invoke__\">burrows_wheeler_transform</span>(\r\n                <span class=\"hljs-string\">&quot;!{}{}(((&amp;&amp;%%!??.=::&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>()\r\n            )),\r\n            <span class=\"hljs-string\">&quot;!{}{}(((&amp;&amp;%%!??.=::&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">inv_burrows_wheeler_transform</span>(<span class=\"hljs-title function_ invoke__\">burrows_wheeler_transform</span>(<span class=\"hljs-string\">&quot;//&amp;$[]&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())),\r\n            <span class=\"hljs-string\">&quot;//&amp;$[]&quot;</span>\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            <span class=\"hljs-title function_ invoke__\">inv_burrows_wheeler_transform</span>(<span class=\"hljs-title function_ invoke__\">burrows_wheeler_transform</span>(<span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())),\r\n            <span class=\"hljs-string\">&quot;&quot;</span>\r\n        );\r\n    }\r\n}\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/DataCompression/BurrowsWheelerTransform.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\DataCompression\\BurrowsWheelerTransform.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.DataCompression</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The Burrows–Wheeler transform (BWT) rearranges a character string into runs of similar characters.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This is useful for compression, since it tends to be easy to compress a string that has runs of repeated</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     characters.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     See <span class=\"hljs-doctag\">&lt;a href=&quot;https://en.wikipedia.org/wiki/Burrows%E2%80%93Wheeler_transform&quot;&gt;</span>here<span class=\"hljs-doctag\">&lt;/a&gt;</span> for more info.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BurrowsWheelerTransform</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes the input string using BWT and returns encoded string and the index of original string in the sorted</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     rotation matrix.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;s&quot;&gt;</span>Input string.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> (<span class=\"hljs-built_in\">string</span> encoded, <span class=\"hljs-built_in\">int</span> index) Encode(<span class=\"hljs-built_in\">string</span> s)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (s.Length == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">string</span>.Empty, <span class=\"hljs-number\">0</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> rotations = GetRotations(s);\r\n            Array.Sort(rotations, StringComparer.Ordinal);\r\n            <span class=\"hljs-keyword\">var</span> lastColumn = rotations\r\n                .Select(x =&gt; x[^<span class=\"hljs-number\">1</span>])\r\n                .ToArray();\r\n            <span class=\"hljs-keyword\">var</span> encoded = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>(lastColumn);\r\n            <span class=\"hljs-keyword\">return</span> (encoded, Array.IndexOf(rotations, s));\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Decodes the input string and returns original string.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;s&quot;&gt;</span>Encoded string.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;index&quot;&gt;</span>Index  of original string in the sorted rotation matrix.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s, <span class=\"hljs-built_in\">int</span> index</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (s.Length == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">string</span>.Empty;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> rotations = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[s.Length];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.Length; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; s.Length; j++)\r\n                {\r\n                    rotations[j] = s[j] + rotations[j];\r\n                }\r\n\r\n                Array.Sort(rotations, StringComparer.Ordinal);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> rotations[index];\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span>[] <span class=\"hljs-title\">GetRotations</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[s.Length];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.Length; i++)\r\n            {\r\n                result[i] = s.Substring(i) + s.Substring(<span class=\"hljs-number\">0</span>, i);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> result;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Jerrit Gläsker",
      "email": "50867655+cherrysrc@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Valdas",
      "email": "valdemar.silcenko@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}