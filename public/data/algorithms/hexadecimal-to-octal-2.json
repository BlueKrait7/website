{
  "slug": "hexadecimal-to-octal-2",
  "name": "Hexadecimal to Octal 2",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "conversions\\hexadecimal_to_octal2.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\hexadecimal_to_octal2.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Convert hexadecimal number to octal number (with decimal intermediary)\r\n * @details\r\n * The input is valid from 0 to 0xFFFF_FFFF_FFFF_FFFF.\r\n *\r\n * At first, this program converts a hex string to an unsigned long long\r\n * decimal, and then to an octal string.\r\n *\r\n * When there is an invalid character in input string, this program stops\r\n * parsing and converts the string until that character.\r\n *\r\n * @see hexadecimal_to_octal.c\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>  <span class=\"hljs-comment\">/// for printf() and fgets()</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span> <span class=\"hljs-comment\">/// for memset()</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Convert a hexadecimal number to octal number.\r\n * @param hex Hexadecimal number to convert.\r\n * @returns A pointer to the converted octal string.\r\n */</span>\r\n<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">hex_to_oct</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *hex)</span>\r\n{\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_OCT_STR_LEN 23 <span class=\"hljs-comment\">/* 17_7777_7777_7777_7777_7777 */</span></span>\r\n    <span class=\"hljs-type\">static</span> <span class=\"hljs-type\">char</span> octal[MAX_OCT_STR_LEN];\r\n    <span class=\"hljs-built_in\">memset</span>(octal, <span class=\"hljs-string\">&#x27;\\0&#x27;</span>, MAX_OCT_STR_LEN); <span class=\"hljs-comment\">// Initialize as NULL string</span>\r\n\r\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> decimal = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> len;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (hex == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-comment\">// Return an empty string</span>\r\n        <span class=\"hljs-keyword\">return</span> octal;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* Hexadecimal to decimal conversion */</span>\r\n    <span class=\"hljs-keyword\">while</span> (*hex != <span class=\"hljs-string\">&#x27;\\n&#x27;</span> &amp;&amp; *hex != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)\r\n    {\r\n        <span class=\"hljs-type\">char</span> ch = *hex;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (ch &gt;= <span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;9&#x27;</span>)\r\n        {\r\n            ch -= <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ch &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;f&#x27;</span>)\r\n        {\r\n            ch = ch - <span class=\"hljs-string\">&#x27;a&#x27;</span> + <span class=\"hljs-number\">10</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ch &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;F&#x27;</span>)\r\n        {\r\n            ch = ch - <span class=\"hljs-string\">&#x27;A&#x27;</span> + <span class=\"hljs-number\">10</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Invalid hexadecimal input: %c\\n&quot;</span>, ch);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n\r\n        decimal *= <span class=\"hljs-number\">16</span>;\r\n        decimal += ch;\r\n        hex++;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* Decimal to octal conversion */</span>\r\n    <span class=\"hljs-keyword\">if</span> (decimal == <span class=\"hljs-number\">0</span>)\r\n    {\r\n        octal[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n        len = <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        i = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">while</span> (decimal &gt; <span class=\"hljs-number\">0</span>)\r\n        {\r\n            octal[i] = <span class=\"hljs-string\">&#x27;0&#x27;</span> + decimal % <span class=\"hljs-number\">8</span>;\r\n            i++;\r\n            decimal /= <span class=\"hljs-number\">8</span>;\r\n        }\r\n\r\n        len = i;\r\n    }\r\n\r\n    octal[len] = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\r\n\r\n    <span class=\"hljs-comment\">/* Reverse the octal string */</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len / <span class=\"hljs-number\">2</span>; i++)\r\n    {\r\n        <span class=\"hljs-type\">char</span> tmp = octal[i];\r\n        octal[i] = octal[len - i - <span class=\"hljs-number\">1</span>];\r\n        octal[len - i - <span class=\"hljs-number\">1</span>] = tmp;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> octal;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_HEX_STR_LEN 17 <span class=\"hljs-comment\">/* FFFF_FFFF_FFFF_FFFF */</span></span>\r\n    <span class=\"hljs-type\">char</span> hex[MAX_HEX_STR_LEN];\r\n\r\n    <span class=\"hljs-comment\">/* Input hexadecimal number from user */</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter any hexadecimal number: &quot;</span>);\r\n    fgets(hex, MAX_HEX_STR_LEN, <span class=\"hljs-built_in\">stdin</span>);\r\n\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *octal = hex_to_oct(hex);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hexadecimal number = %s\\n&quot;</span>, hex);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Octal number = %s\\n&quot;</span>, octal);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Chayoung You",
      "email": "yousbe@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}