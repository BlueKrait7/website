{
  "slug": "flip-augmentation",
  "name": "Flip Augmentation",
  "categories": [
    "computervision"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "computer_vision\\flip_augmentation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/computer_vision\\flip_augmentation.py",
      "code": "<span class=\"hljs-keyword\">import</span> glob\r\n<span class=\"hljs-keyword\">import</span> os\r\n<span class=\"hljs-keyword\">import</span> random\r\n<span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> ascii_lowercase, digits\r\n\r\n<span class=\"hljs-keyword\">import</span> cv2\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nFlip image and bounding box for computer vision task\r\nhttps://paperswithcode.com/method/randomhorizontalflip\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-comment\"># Params</span>\r\nLABEL_DIR = <span class=\"hljs-string\">&quot;&quot;</span>\r\nIMAGE_DIR = <span class=\"hljs-string\">&quot;&quot;</span>\r\nOUTPUT_DIR = <span class=\"hljs-string\">&quot;&quot;</span>\r\nFLIP_TYPE = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># (0 is vertical, 1 is horizontal)</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Get images list and annotations list from input dir.\r\n    Update new images and annotations.\r\n    Save images and annotations in output dir.\r\n    &gt;&gt;&gt; pass  # A doctest is not possible for this function.\r\n    &quot;&quot;&quot;</span>\r\n    img_paths, annos = get_dataset(LABEL_DIR, IMAGE_DIR)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Processing...&quot;</span>)\r\n    new_images, new_annos, paths = update_image_and_anno(img_paths, annos, FLIP_TYPE)\r\n\r\n    <span class=\"hljs-keyword\">for</span> index, image <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(new_images):\r\n        <span class=\"hljs-comment\"># Get random string code: &#x27;7b7ad245cdff75241935e4dd860f3bad&#x27;</span>\r\n        letter_code = random_chars(<span class=\"hljs-number\">32</span>)\r\n        file_name = paths[index].split(os.sep)[-<span class=\"hljs-number\">1</span>].rsplit(<span class=\"hljs-string\">&quot;.&quot;</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]\r\n        file_root = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{OUTPUT_DIR}</span>/<span class=\"hljs-subst\">{file_name}</span>_FLIP_<span class=\"hljs-subst\">{letter_code}</span>&quot;</span>\r\n        cv2.imwrite(<span class=\"hljs-string\">f&quot;/<span class=\"hljs-subst\">{file_root}</span>.jpg&quot;</span>, image, [cv2.IMWRITE_JPEG_QUALITY, <span class=\"hljs-number\">85</span>])\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Success <span class=\"hljs-subst\">{index+<span class=\"hljs-number\">1</span>}</span>/<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(new_images)}</span> with <span class=\"hljs-subst\">{file_name}</span>&quot;</span>)\r\n        annos_list = []\r\n        <span class=\"hljs-keyword\">for</span> anno <span class=\"hljs-keyword\">in</span> new_annos[index]:\r\n            obj = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{anno[<span class=\"hljs-number\">0</span>]}</span> <span class=\"hljs-subst\">{anno[<span class=\"hljs-number\">1</span>]}</span> <span class=\"hljs-subst\">{anno[<span class=\"hljs-number\">2</span>]}</span> <span class=\"hljs-subst\">{anno[<span class=\"hljs-number\">3</span>]}</span> <span class=\"hljs-subst\">{anno[<span class=\"hljs-number\">4</span>]}</span>&quot;</span>\r\n            annos_list.append(obj)\r\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">f&quot;/<span class=\"hljs-subst\">{file_root}</span>.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> outfile:\r\n            outfile.write(<span class=\"hljs-string\">&quot;\\n&quot;</span>.join(line <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> annos_list))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_dataset</span>(<span class=\"hljs-params\">label_dir: <span class=\"hljs-built_in\">str</span>, img_dir: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">list</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    - label_dir &lt;type: str&gt;: Path to label include annotation of images\r\n    - img_dir &lt;type: str&gt;: Path to folder contain images\r\n    Return &lt;type: list&gt;: List of images path and labels\r\n    &gt;&gt;&gt; pass  # A doctest is not possible for this function.\r\n    &quot;&quot;&quot;</span>\r\n    img_paths = []\r\n    labels = []\r\n    <span class=\"hljs-keyword\">for</span> label_file <span class=\"hljs-keyword\">in</span> glob.glob(os.path.join(label_dir, <span class=\"hljs-string\">&quot;*.txt&quot;</span>)):\r\n        label_name = label_file.split(os.sep)[-<span class=\"hljs-number\">1</span>].rsplit(<span class=\"hljs-string\">&quot;.&quot;</span>, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]\r\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(label_file) <span class=\"hljs-keyword\">as</span> in_file:\r\n            obj_lists = in_file.readlines()\r\n        img_path = os.path.join(img_dir, <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{label_name}</span>.jpg&quot;</span>)\r\n\r\n        boxes = []\r\n        <span class=\"hljs-keyword\">for</span> obj_list <span class=\"hljs-keyword\">in</span> obj_lists:\r\n            obj = obj_list.rstrip(<span class=\"hljs-string\">&quot;\\n&quot;</span>).split(<span class=\"hljs-string\">&quot; &quot;</span>)\r\n            boxes.append(\r\n                [\r\n                    <span class=\"hljs-built_in\">int</span>(obj[<span class=\"hljs-number\">0</span>]),\r\n                    <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">1</span>]),\r\n                    <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">2</span>]),\r\n                    <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">3</span>]),\r\n                    <span class=\"hljs-built_in\">float</span>(obj[<span class=\"hljs-number\">4</span>]),\r\n                ]\r\n            )\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> boxes:\r\n            <span class=\"hljs-keyword\">continue</span>\r\n        img_paths.append(img_path)\r\n        labels.append(boxes)\r\n    <span class=\"hljs-keyword\">return</span> img_paths, labels\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_image_and_anno</span>(<span class=\"hljs-params\">\r\n    img_list: <span class=\"hljs-built_in\">list</span>, anno_list: <span class=\"hljs-built_in\">list</span>, flip_type: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">1</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">list</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    - img_list &lt;type: list&gt;: list of all images\r\n    - anno_list &lt;type: list&gt;: list of all annotations of specific image\r\n    - flip_type &lt;type: int&gt;: 0 is vertical, 1 is horizontal\r\n    Return:\r\n        - new_imgs_list &lt;type: narray&gt;: image after resize\r\n        - new_annos_lists &lt;type: list&gt;: list of new annotation after scale\r\n        - path_list &lt;type: list&gt;: list the name of image file\r\n    &gt;&gt;&gt; pass  # A doctest is not possible for this function.\r\n    &quot;&quot;&quot;</span>\r\n    new_annos_lists = []\r\n    path_list = []\r\n    new_imgs_list = []\r\n    <span class=\"hljs-keyword\">for</span> idx <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(img_list)):\r\n        new_annos = []\r\n        path = img_list[idx]\r\n        path_list.append(path)\r\n        img_annos = anno_list[idx]\r\n        img = cv2.imread(path)\r\n        <span class=\"hljs-keyword\">if</span> flip_type == <span class=\"hljs-number\">1</span>:\r\n            new_img = cv2.flip(img, flip_type)\r\n            <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> img_annos:\r\n                x_center_new = <span class=\"hljs-number\">1</span> - bbox[<span class=\"hljs-number\">1</span>]\r\n                new_annos.append([bbox[<span class=\"hljs-number\">0</span>], x_center_new, bbox[<span class=\"hljs-number\">2</span>], bbox[<span class=\"hljs-number\">3</span>], bbox[<span class=\"hljs-number\">4</span>]])\r\n        <span class=\"hljs-keyword\">elif</span> flip_type == <span class=\"hljs-number\">0</span>:\r\n            new_img = cv2.flip(img, flip_type)\r\n            <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> img_annos:\r\n                y_center_new = <span class=\"hljs-number\">1</span> - bbox[<span class=\"hljs-number\">2</span>]\r\n                new_annos.append([bbox[<span class=\"hljs-number\">0</span>], bbox[<span class=\"hljs-number\">1</span>], y_center_new, bbox[<span class=\"hljs-number\">3</span>], bbox[<span class=\"hljs-number\">4</span>]])\r\n        new_annos_lists.append(new_annos)\r\n        new_imgs_list.append(new_img)\r\n    <span class=\"hljs-keyword\">return</span> new_imgs_list, new_annos_lists, path_list\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_chars</span>(<span class=\"hljs-params\">number_char: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">32</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Automatic generate random 32 characters.\r\n    Get random string code: &#x27;7b7ad245cdff75241935e4dd860f3bad&#x27;\r\n    &gt;&gt;&gt; len(random_chars(32))\r\n    32\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">assert</span> number_char &gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;The number of character should greater than 1&quot;</span>\r\n    letter_code = ascii_lowercase + digits\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(random.choice(letter_code) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(number_char))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;DONE ✅&quot;</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Khoi Vo",
      "email": "nguyenkhoi8071@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}