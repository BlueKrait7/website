{
  "slug": "matrix-operation",
  "name": "Matrix Operation",
  "categories": [
    "matrix"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "matrix\\matrix_operation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/matrix\\matrix_operation.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nFunctions for 2D matrix operations\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">*matrix_s: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; add([[1,2],[3,4]],[[2,3],[4,5]])\r\n    [[3, 5], [7, 9]]\r\n    &gt;&gt;&gt; add([[1.2,2.4],[3,4]],[[2,3],[4,5]])\r\n    [[3.2, 5.4], [7, 9]]\r\n    &gt;&gt;&gt; add([[1, 2], [4, 5]], [[3, 7], [3, 4]], [[3, 5], [5, 7]])\r\n    [[7, 14], [12, 16]]\r\n    &gt;&gt;&gt; add([3], [4, 5])\r\n    Traceback (most recent call last):\r\n      ...\r\n    TypeError: Expected a matrix, got int/list instead\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">all</span>(_check_not_integer(m) <span class=\"hljs-keyword\">for</span> m <span class=\"hljs-keyword\">in</span> matrix_s):\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> matrix_s[<span class=\"hljs-number\">1</span>:]:\r\n            _verify_matrix_sizes(matrix_s[<span class=\"hljs-number\">0</span>], i)\r\n        <span class=\"hljs-keyword\">return</span> [[<span class=\"hljs-built_in\">sum</span>(t) <span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(*m)] <span class=\"hljs-keyword\">for</span> m <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(*matrix_s)]\r\n    <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;Expected a matrix, got int/list instead&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">subtract</span>(<span class=\"hljs-params\">matrix_a: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>], matrix_b: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; subtract([[1,2],[3,4]],[[2,3],[4,5]])\r\n    [[-1, -1], [-1, -1]]\r\n    &gt;&gt;&gt; subtract([[1,2.5],[3,4]],[[2,3],[4,5.5]])\r\n    [[-1, -0.5], [-1, -1.5]]\r\n    &gt;&gt;&gt; subtract([3], [4, 5])\r\n    Traceback (most recent call last):\r\n      ...\r\n    TypeError: Expected a matrix, got int/list instead\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> (\r\n        _check_not_integer(matrix_a)\r\n        <span class=\"hljs-keyword\">and</span> _check_not_integer(matrix_b)\r\n        <span class=\"hljs-keyword\">and</span> _verify_matrix_sizes(matrix_a, matrix_b)\r\n    ):\r\n        <span class=\"hljs-keyword\">return</span> [[i - j <span class=\"hljs-keyword\">for</span> i, j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(*m)] <span class=\"hljs-keyword\">for</span> m <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(matrix_a, matrix_b)]\r\n    <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;Expected a matrix, got int/list instead&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">scalar_multiply</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>], n: <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; scalar_multiply([[1,2],[3,4]],5)\r\n    [[5, 10], [15, 20]]\r\n    &gt;&gt;&gt; scalar_multiply([[1.4,2.3],[3,4]],5)\r\n    [[7.0, 11.5], [15, 20]]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> [[x * n <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> row] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> matrix]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-params\">matrix_a: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>], matrix_b: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; multiply([[1,2],[3,4]],[[5,5],[7,5]])\r\n    [[19, 15], [43, 35]]\r\n    &gt;&gt;&gt; multiply([[1,2.5],[3,4.5]],[[5,5],[7,5]])\r\n    [[22.5, 17.5], [46.5, 37.5]]\r\n    &gt;&gt;&gt; multiply([[1, 2, 3]], [[2], [3], [4]])\r\n    [[20]]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> _check_not_integer(matrix_a) <span class=\"hljs-keyword\">and</span> _check_not_integer(matrix_b):\r\n        rows, cols = _verify_matrix_sizes(matrix_a, matrix_b)\r\n\r\n    <span class=\"hljs-keyword\">if</span> cols[<span class=\"hljs-number\">0</span>] != rows[<span class=\"hljs-number\">1</span>]:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(\r\n            <span class=\"hljs-string\">f&quot;Cannot multiply matrix of dimensions (<span class=\"hljs-subst\">{rows[<span class=\"hljs-number\">0</span>]}</span>,<span class=\"hljs-subst\">{cols[<span class=\"hljs-number\">0</span>]}</span>) &quot;</span>\r\n            <span class=\"hljs-string\">f&quot;and (<span class=\"hljs-subst\">{rows[<span class=\"hljs-number\">1</span>]}</span>,<span class=\"hljs-subst\">{cols[<span class=\"hljs-number\">1</span>]}</span>)&quot;</span>\r\n        )\r\n    <span class=\"hljs-keyword\">return</span> [\r\n        [<span class=\"hljs-built_in\">sum</span>(m * n <span class=\"hljs-keyword\">for</span> m, n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(i, j)) <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(*matrix_b)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> matrix_a\r\n    ]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">identity</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    :param n: dimension for nxn matrix\r\n    :type n: int\r\n    :return: Identity matrix of shape [n, n]\r\n    &gt;&gt;&gt; identity(3)\r\n    [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\r\n    &quot;&quot;&quot;</span>\r\n    n = <span class=\"hljs-built_in\">int</span>(n)\r\n    <span class=\"hljs-keyword\">return</span> [[<span class=\"hljs-built_in\">int</span>(row == column) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">transpose</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>], return_map: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">True</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>] | <span class=\"hljs-built_in\">map</span>[<span class=\"hljs-built_in\">list</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; transpose([[1,2],[3,4]]) # doctest: +ELLIPSIS\r\n    &lt;map object at ...\r\n    &gt;&gt;&gt; transpose([[1,2],[3,4]], return_map=False)\r\n    [[1, 3], [2, 4]]\r\n    &gt;&gt;&gt; transpose([1, [2, 3]])\r\n    Traceback (most recent call last):\r\n      ...\r\n    TypeError: Expected a matrix, got int/list instead\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> _check_not_integer(matrix):\r\n        <span class=\"hljs-keyword\">if</span> return_map:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">zip</span>(*matrix))\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">zip</span>(*matrix)))\r\n    <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;Expected a matrix, got int/list instead&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minor</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>], row: <span class=\"hljs-built_in\">int</span>, column: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; minor([[1, 2], [3, 4]], 1, 1)\r\n    [[1]]\r\n    &quot;&quot;&quot;</span>\r\n    minor = matrix[:row] + matrix[row + <span class=\"hljs-number\">1</span> :]\r\n    <span class=\"hljs-keyword\">return</span> [row[:column] + row[column + <span class=\"hljs-number\">1</span> :] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> minor]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">determinant</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; determinant([[1, 2], [3, 4]])\r\n    -2\r\n    &gt;&gt;&gt; determinant([[1.5, 2.5], [3, 4]])\r\n    -1.5\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(matrix) == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(\r\n        x * determinant(minor(matrix, <span class=\"hljs-number\">0</span>, i)) * (-<span class=\"hljs-number\">1</span>) ** i\r\n        <span class=\"hljs-keyword\">for</span> i, x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(matrix[<span class=\"hljs-number\">0</span>])\r\n    )\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inverse</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>] | <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; inverse([[1, 2], [3, 4]])\r\n    [[-2.0, 1.0], [1.5, -0.5]]\r\n    &gt;&gt;&gt; inverse([[1, 1], [1, 1]])\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># https://stackoverflow.com/questions/20047519/python-doctests-test-for-none</span>\r\n    det = determinant(matrix)\r\n    <span class=\"hljs-keyword\">if</span> det == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    matrix_minor = [\r\n        [determinant(minor(matrix, i, j)) <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(matrix))]\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(matrix))\r\n    ]\r\n\r\n    cofactors = [\r\n        [x * (-<span class=\"hljs-number\">1</span>) ** (row + col) <span class=\"hljs-keyword\">for</span> col, x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(matrix_minor[row])]\r\n        <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(matrix))\r\n    ]\r\n    adjugate = <span class=\"hljs-built_in\">list</span>(transpose(cofactors))\r\n    <span class=\"hljs-keyword\">return</span> scalar_multiply(adjugate, <span class=\"hljs-number\">1</span> / det)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_check_not_integer</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(matrix, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(matrix[<span class=\"hljs-number\">0</span>], <span class=\"hljs-built_in\">int</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_shape</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(matrix), <span class=\"hljs-built_in\">len</span>(matrix[<span class=\"hljs-number\">0</span>])\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_verify_matrix_sizes</span>(<span class=\"hljs-params\">\r\n    matrix_a: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>], matrix_b: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>]\r\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">tuple</span>, <span class=\"hljs-built_in\">tuple</span>]:\r\n    shape = _shape(matrix_a) + _shape(matrix_b)\r\n    <span class=\"hljs-keyword\">if</span> shape[<span class=\"hljs-number\">0</span>] != shape[<span class=\"hljs-number\">3</span>] <span class=\"hljs-keyword\">or</span> shape[<span class=\"hljs-number\">1</span>] != shape[<span class=\"hljs-number\">2</span>]:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(\r\n            <span class=\"hljs-string\">f&quot;operands could not be broadcast together with shape &quot;</span>\r\n            <span class=\"hljs-string\">f&quot;(<span class=\"hljs-subst\">{shape[<span class=\"hljs-number\">0</span>], shape[<span class=\"hljs-number\">1</span>]}</span>), (<span class=\"hljs-subst\">{shape[<span class=\"hljs-number\">2</span>], shape[<span class=\"hljs-number\">3</span>]}</span>)&quot;</span>\r\n        )\r\n    <span class=\"hljs-keyword\">return</span> (shape[<span class=\"hljs-number\">0</span>], shape[<span class=\"hljs-number\">2</span>]), (shape[<span class=\"hljs-number\">1</span>], shape[<span class=\"hljs-number\">3</span>])\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    matrix_a = [[<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">10</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>]]\r\n    matrix_b = [[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>]]\r\n    matrix_c = [[<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>], [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">24</span>], [<span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">34</span>], [<span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">44</span>]]\r\n    matrix_d = [[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]]\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Add Operation, <span class=\"hljs-subst\">{add(matrix_a, matrix_b) = }</span> \\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">f&quot;Multiply Operation, <span class=\"hljs-subst\">{multiply(matrix_a, matrix_b) = }</span> \\n&quot;</span>,\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Identity: <span class=\"hljs-subst\">{identity(<span class=\"hljs-number\">5</span>)}</span>\\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Minor of <span class=\"hljs-subst\">{matrix_c}</span> = <span class=\"hljs-subst\">{minor(matrix_c, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)}</span> \\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Determinant of <span class=\"hljs-subst\">{matrix_b}</span> = <span class=\"hljs-subst\">{determinant(matrix_b)}</span> \\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Inverse of <span class=\"hljs-subst\">{matrix_d}</span> = <span class=\"hljs-subst\">{inverse(matrix_d)}</span>\\n&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    main()\r\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Rohan R Bharadwaj",
      "email": "rohanrbharadwaj@gmail.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Stephen Gemin",
      "email": "45926479+StephenGemin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "wuyudi",
      "email": "wuyudi1109@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}