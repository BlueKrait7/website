{
  "slug": "lower-bound",
  "name": "Lower Bound",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\searches\\LowerBound.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\searches\\LowerBound.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.searches;\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.lang.String.format;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadLocalRandom;\r\n<span class=\"hljs-keyword\">import</span> java.util.stream.IntStream;\r\n<span class=\"hljs-keyword\">import</span> com.thealgorithms.devutils.searches.SearchAlgorithm;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * The LowerBound method is used to return an index pointing to the first\r\n * element in the range [first, last) which has a value not less than val, i.e.\r\n * the index of the next smallest number just greater than or equal to that\r\n * number. If there are multiple values that are equal to val it returns the\r\n * index of the first such value.\r\n *\r\n * &lt;p&gt;\r\n * This is an extension of BinarySearch.\r\n *\r\n * &lt;p&gt;\r\n * Worst-case performance O(log n) Best-case performance O(1) Average\r\n * performance O(log n) Worst-case space complexity O(1)\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Pratik Padalia (https://github.com/15pratik)\r\n * <span class=\"hljs-doctag\">@see</span> SearchAlgorithm\r\n * <span class=\"hljs-doctag\">@see</span> BinarySearch\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LowerBound</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SearchAlgorithm</span> {\r\n\r\n    <span class=\"hljs-comment\">// Driver Program</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">// Just generate data</span>\r\n        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> ThreadLocalRandom.current();\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxElement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100000</span>;\r\n\r\n        Integer[] integers\r\n                = IntStream.generate(() -&gt; r.nextInt(maxElement))\r\n                        .limit(size)\r\n                        .sorted()\r\n                        .boxed()\r\n                        .toArray(Integer[]::<span class=\"hljs-keyword\">new</span>);\r\n\r\n        <span class=\"hljs-comment\">// The element for which the lower bound is to be found</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">val</span> <span class=\"hljs-operator\">=</span> integers[r.nextInt(size - <span class=\"hljs-number\">1</span>)] + <span class=\"hljs-number\">1</span>;\r\n\r\n        <span class=\"hljs-type\">LowerBound</span> <span class=\"hljs-variable\">search</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LowerBound</span>();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">atIndex</span> <span class=\"hljs-operator\">=</span> search.find(integers, val);\r\n\r\n        System.out.println(\r\n                format(\r\n                        <span class=\"hljs-string\">&quot;Val: %d. Lower Bound Found %d at index %d. An array length %d&quot;</span>,\r\n                        val, integers[atIndex], atIndex, size));\r\n\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">toCheck</span> <span class=\"hljs-operator\">=</span> integers[atIndex] &gt;= val || integers[size - <span class=\"hljs-number\">1</span>] &lt; val;\r\n        System.out.println(\r\n                format(\r\n                        <span class=\"hljs-string\">&quot;Lower Bound found at an index: %d. Is greater or max element: %b&quot;</span>, atIndex, toCheck));\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> array is an array where the LowerBound value is to be found\r\n     * <span class=\"hljs-doctag\">@param</span> key is an element for which the LowerBound is to be found\r\n     * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; is any comparable type\r\n     * <span class=\"hljs-doctag\">@return</span> index of the LowerBound element\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T[] array, T key)</span> {\r\n        <span class=\"hljs-keyword\">return</span> search(array, key, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method implements the Generic Binary Search\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> array The array to make the binary search\r\n     * <span class=\"hljs-doctag\">@param</span> key The number you are looking for\r\n     * <span class=\"hljs-doctag\">@param</span> left The lower bound\r\n     * <span class=\"hljs-doctag\">@param</span> right The upper bound\r\n     * <span class=\"hljs-doctag\">@return</span> the location of the key\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(T[] array, T key, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (right &lt;= left) {\r\n            <span class=\"hljs-keyword\">return</span> left;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// find median</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">median</span> <span class=\"hljs-operator\">=</span> (left + right) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">comp</span> <span class=\"hljs-operator\">=</span> key.compareTo(array[median]);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (comp == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> median;\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (comp &lt; <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-comment\">// median position can be a possible solution</span>\r\n            <span class=\"hljs-keyword\">return</span> search(array, key, left, median);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">// key we are looking is greater, so we must look on the right of median position</span>\r\n            <span class=\"hljs-keyword\">return</span> search(array, key, median + <span class=\"hljs-number\">1</span>, right);\r\n        }\r\n    }\r\n}\r\n"
    },
    "php": {
      "dir": "searches\\lower_bound.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/searches\\lower_bound.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@param</span> an array of integers\r\n * <span class=\"hljs-doctag\">@return</span> is array sorted in ascending\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">array_check</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$arr</span></span>): <span class=\"hljs-title\">void</span></span>{\r\n    <span class=\"hljs-variable\">$len</span> = <span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$arr</span>);\r\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable\">$len</span> == <span class=\"hljs-number\">0</span>){\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-title function_ invoke__\">is_int</span>(<span class=\"hljs-variable\">$arr</span>[<span class=\"hljs-number\">0</span>])){\r\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">UnexpectedValueException</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">1</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$len</span>; <span class=\"hljs-variable\">$i</span>++){\r\n        <span class=\"hljs-comment\">// a sorted array is expected</span>\r\n        <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-title function_ invoke__\">is_int</span>(<span class=\"hljs-variable\">$arr</span>[<span class=\"hljs-variable\">$i</span>]) &amp;&amp; <span class=\"hljs-variable\">$arr</span>[<span class=\"hljs-variable\">$i</span>] &lt; <span class=\"hljs-variable\">$arr</span>[<span class=\"hljs-variable\">$i</span>-<span class=\"hljs-number\">1</span>]){\r\n           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">UnexpectedValueException</span>;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Lower Bound of an element is minimum index that an element would be placed \r\n * if it is added into that sorted array\r\n * \r\n * [C++ Lower Bound](http://www.cplusplus.com/reference/algorithm/lower_bound/)\r\n * \r\n * It is assumed that an integer array is provided\r\n * and the second parameter is also a integer\r\n * \r\n * <span class=\"hljs-doctag\">@param</span> array of integers\r\n * <span class=\"hljs-doctag\">@param</span> integer whose lower bound is to be found\r\n * \r\n * <span class=\"hljs-doctag\">@return</span> the index of lower bound of the given element\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lower_bound</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$arr</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$elem</span></span>)</span>{\r\n    <span class=\"hljs-comment\">// array must be sorted</span>\r\n    <span class=\"hljs-comment\">// and all elemets must be integers</span>\r\n    <span class=\"hljs-title function_ invoke__\">array_check</span>(<span class=\"hljs-variable\">$arr</span>);\r\n    <span class=\"hljs-variable\">$hi</span> = <span class=\"hljs-title function_ invoke__\">count</span>(<span class=\"hljs-variable\">$arr</span>);\r\n    <span class=\"hljs-variable\">$lo</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-variable\">$lo</span> &lt; <span class=\"hljs-variable\">$hi</span>){\r\n        <span class=\"hljs-variable\">$mid</span> = <span class=\"hljs-variable\">$lo</span> + <span class=\"hljs-title function_ invoke__\">floor</span>((<span class=\"hljs-variable\">$hi</span> - <span class=\"hljs-variable\">$lo</span>)/<span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable\">$arr</span>[<span class=\"hljs-variable\">$mid</span>] &lt; <span class=\"hljs-variable\">$elem</span>){\r\n            <span class=\"hljs-variable\">$lo</span> = <span class=\"hljs-variable\">$mid</span>+<span class=\"hljs-number\">1</span>;\r\n        }<span class=\"hljs-keyword\">else</span>{\r\n            <span class=\"hljs-variable\">$hi</span> = <span class=\"hljs-variable\">$mid</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$lo</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">// test code</span>\r\n<span class=\"hljs-variable\">$arr</span> = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);\r\n<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-title function_ invoke__\">lower_bound</span>(<span class=\"hljs-variable\">$arr</span>, <span class=\"hljs-number\">3</span>);\r\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-variable\">$i</span>;"
    }
  },
  "contributors": [
    {
      "name": "lakhan_nad",
      "email": "lakhannad1999@gmail.com",
      "commits": 1
    },
    {
      "name": "Pratik Padalia",
      "email": "pratikpadalia7@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}