{
  "slug": "deques",
  "name": "Deques",
  "categories": [
    "datastructures",
    "queues"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\queues\\Deques.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\queues\\Deques.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.queues;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * A [deque](https://en.wikipedia.org/wiki/Double-ended_queue) is short for a\r\n * double ended queue pronounced &quot;deck&quot; and sometimes referred to as a head-tail\r\n * linked list. A deque is a data structure based on a doubly linked list, but\r\n * only supports adding and removal of nodes from the beginning and the end of\r\n * the list.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> [Ian Cowan](https://github.com/iccowan)\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Deques</span>&lt;T&gt; {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Node for the deque\r\n     */</span>\r\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DequeNode</span>&lt;S&gt; {\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Value of the node\r\n         */</span>\r\n        S val;\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Next node in the deque from this node\r\n         */</span>\r\n        DequeNode&lt;S&gt; next = <span class=\"hljs-literal\">null</span>;\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Previous node in the deque from this node\r\n         */</span>\r\n        DequeNode&lt;S&gt; prev = <span class=\"hljs-literal\">null</span>;\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * Constructor\r\n         */</span>\r\n        DequeNode(S val) {\r\n            <span class=\"hljs-built_in\">this</span>.val = val;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Head of the deque\r\n     */</span>\r\n    DequeNode&lt;T&gt; head = <span class=\"hljs-literal\">null</span>;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Tail of the deque\r\n     */</span>\r\n    DequeNode&lt;T&gt; tail = <span class=\"hljs-literal\">null</span>;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Size of the deque\r\n     */</span>\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Adds the specified value to the head of the deque\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> val Value to add to the deque\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addFirst</span><span class=\"hljs-params\">(T val)</span> {\r\n        <span class=\"hljs-comment\">// Create a new node with the given value</span>\r\n        DequeNode&lt;T&gt; newNode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DequeNode</span>&lt;T&gt;(val);\r\n\r\n        <span class=\"hljs-comment\">// Add the node</span>\r\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-comment\">// If the deque is empty, add the node as the head and tail</span>\r\n            head = newNode;\r\n            tail = newNode;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">// If the deque is not empty, insert the node as the new head</span>\r\n            newNode.next = head;\r\n            head.prev = newNode;\r\n            head = newNode;\r\n        }\r\n\r\n        size++;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Adds the specified value to the tail of the deque\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> val Value to add to the deque\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addLast</span><span class=\"hljs-params\">(T val)</span> {\r\n        <span class=\"hljs-comment\">// Create a new node with the given value</span>\r\n        DequeNode&lt;T&gt; newNode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DequeNode</span>&lt;T&gt;(val);\r\n\r\n        <span class=\"hljs-comment\">// Add the node</span>\r\n        <span class=\"hljs-keyword\">if</span> (tail == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-comment\">// If the deque is empty, add the node as the head and tail</span>\r\n            head = newNode;\r\n            tail = newNode;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">// If the deque is not empty, insert the node as the new tail</span>\r\n            newNode.prev = tail;\r\n            tail.next = newNode;\r\n            tail = newNode;\r\n        }\r\n\r\n        size++;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Removes and returns the first (head) value in the deque\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> the value of the head of the deque\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">pollFirst</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-comment\">// If the head is null, return null</span>\r\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// First, let&#x27;s get the value of the old head</span>\r\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">oldHeadVal</span> <span class=\"hljs-operator\">=</span> head.val;\r\n\r\n        <span class=\"hljs-comment\">// Now, let&#x27;s remove the head</span>\r\n        <span class=\"hljs-keyword\">if</span> (head == tail) {\r\n            <span class=\"hljs-comment\">// If there is only one node, remove it</span>\r\n            head = <span class=\"hljs-literal\">null</span>;\r\n            tail = <span class=\"hljs-literal\">null</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">// If there is more than one node, fix the references</span>\r\n            head.next.prev = <span class=\"hljs-literal\">null</span>;\r\n            DequeNode&lt;T&gt; oldHead = head;\r\n            head = head.next;\r\n\r\n            <span class=\"hljs-comment\">// Can be considered unnecessary...</span>\r\n            <span class=\"hljs-comment\">// Unlinking the old head to make sure there are no random</span>\r\n            <span class=\"hljs-comment\">// references possibly affecting garbage collection</span>\r\n            oldHead.next = <span class=\"hljs-literal\">null</span>;\r\n        }\r\n\r\n        size--;\r\n        <span class=\"hljs-keyword\">return</span> oldHeadVal;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Removes and returns the last (tail) value in the deque\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> the value of the tail of the deque\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">pollLast</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-comment\">// If the tail is null, return null</span>\r\n        <span class=\"hljs-keyword\">if</span> (tail == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Let&#x27;s get the value of the old tail</span>\r\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">oldTailVal</span> <span class=\"hljs-operator\">=</span> tail.val;\r\n\r\n        <span class=\"hljs-comment\">// Now, remove the tail</span>\r\n        <span class=\"hljs-keyword\">if</span> (head == tail) {\r\n            <span class=\"hljs-comment\">// If there is only one node, remove it</span>\r\n            head = <span class=\"hljs-literal\">null</span>;\r\n            tail = <span class=\"hljs-literal\">null</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">// If there is more than one node, fix the references</span>\r\n            tail.prev.next = <span class=\"hljs-literal\">null</span>;\r\n            DequeNode&lt;T&gt; oldTail = tail;\r\n            tail = tail.prev;\r\n\r\n            <span class=\"hljs-comment\">// Similarly to above, can be considered unnecessary</span>\r\n            <span class=\"hljs-comment\">// See `pollFirst()` for explanation</span>\r\n            oldTail.prev = <span class=\"hljs-literal\">null</span>;\r\n        }\r\n\r\n        size--;\r\n        <span class=\"hljs-keyword\">return</span> oldTailVal;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Returns the first (head) value of the deque WITHOUT removing\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> the value of the head of the deque\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">peekFirst</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> head.val;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Returns the last (tail) value of the deque WITHOUT removing\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> the value of the tail of the deque\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">peekLast</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> tail.val;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Returns the size of the deque\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> the size of the deque\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> size;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Returns whether or not the deque is empty\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> whether or not the deque is empty\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">head</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-literal\">null</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Returns a stringified deque in a pretty form:\r\n     *\r\n     * &lt;p&gt;\r\n     * Head -&gt; 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;- Tail\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> the stringified deque\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">dequeString</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Head -&gt; &quot;</span>;\r\n        DequeNode&lt;T&gt; currNode = head;\r\n        <span class=\"hljs-keyword\">while</span> (currNode != <span class=\"hljs-literal\">null</span>) {\r\n            dequeString += currNode.val;\r\n\r\n            <span class=\"hljs-keyword\">if</span> (currNode.next != <span class=\"hljs-literal\">null</span>) {\r\n                dequeString += <span class=\"hljs-string\">&quot; &lt;-&gt; &quot;</span>;\r\n            }\r\n\r\n            currNode = currNode.next;\r\n        }\r\n\r\n        dequeString += <span class=\"hljs-string\">&quot; &lt;- Tail&quot;</span>;\r\n\r\n        <span class=\"hljs-keyword\">return</span> dequeString;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        Deques&lt;Integer&gt; myDeque = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Deques</span>&lt;Integer&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">42</span>; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (i / <span class=\"hljs-number\">42.0</span> &lt; <span class=\"hljs-number\">0.5</span>) {\r\n                myDeque.addFirst(i);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                myDeque.addLast(i);\r\n            }\r\n        }\r\n\r\n        System.out.println(myDeque);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Size: &quot;</span> + myDeque.size());\r\n        System.out.println();\r\n\r\n        myDeque.pollFirst();\r\n        myDeque.pollFirst();\r\n        myDeque.pollLast();\r\n        System.out.println(myDeque);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Size: &quot;</span> + myDeque.size());\r\n        System.out.println();\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dequeSize</span> <span class=\"hljs-operator\">=</span> myDeque.size();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; dequeSize; i++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">removing</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">if</span> (i / <span class=\"hljs-number\">39.0</span> &lt; <span class=\"hljs-number\">0.5</span>) {\r\n                removing = myDeque.pollFirst();\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                removing = myDeque.pollLast();\r\n            }\r\n\r\n            System.out.println(<span class=\"hljs-string\">&quot;Removing: &quot;</span> + removing);\r\n        }\r\n\r\n        System.out.println(myDeque);\r\n        System.out.println(myDeque.size());\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ian Cowan",
      "email": "38896380+iccowan@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}