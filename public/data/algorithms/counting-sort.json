{
  "slug": "counting-sort",
  "name": "Counting Sort",
  "categories": [
    "sorts"
  ],
  "body": {
    "en": "<h4>Problem Statement</h4>\n<p>Given an unsorted array of <code>n</code> elements, write a function to sort the array.</p>\n<h4>Approach</h4>\n<ul>\n<li>Find out the maximum element (let's call it <code>max</code>) from the given array.</li>\n<li>Initialize an array of length <code>max+1</code> with all elements set to 0 to store the array's count.</li>\n<li>Store the count of each element at their respective index in the array's count.</li>\n<li>Store cumulative sum of the elements of the count array. It helps in placing the elements into the correct index of the sorted array.</li>\n<li>Find the index of each element of the original array in the array's count. This gives the cumulative count.</li>\n<li>Place the element at the index calculated and decrease its count by one.</li>\n</ul>\n<h4>Time Complexity</h4>\n<p><code>O(n+k)</code>: where <code>k</code> is the range of the non-negative key values.</p>\n<h4>Space Complexity</h4>\n<p><code>O(n+k)</code>: where <code>k</code> is the range of the non-negative key values.</p>\n<h4>Founder's Name</h4>\n<ul>\n<li>Harold H. Seward.</li>\n</ul>\n<h4>Example</h4>\n<pre><code class=\"hljs language-smali\">countingSort(array, size)\r\n  max &#x3C;- find largest element in<span class=\"hljs-built_in\"> array\r</span>\n  initialize count<span class=\"hljs-built_in\"> array </span>with all zeros\r\n  for j &#x3C;- 0 to size\r\n    find the total count of each unique element<span class=\"hljs-built_in\"> and\r</span>\n    store the count at jth index in count<span class=\"hljs-built_in\"> array\r</span>\n  for i &#x3C;- 1 to max\r\n    find the cumulative sum<span class=\"hljs-built_in\"> and </span>store it in count<span class=\"hljs-built_in\"> array </span>itself\r\n  for j &#x3C;- size down to 1\r\n    restore the elements to<span class=\"hljs-built_in\"> array\r</span>\n    decrease count of each element restored by 1\n</code></pre>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/counting_sort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/sorting/counting_sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Sorts/CountingSort.js\">JavaScript</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/MATLAB-Octave/blob/master/algorithms/sorting/counting_sort.m\">Matlab</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/counting_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/counting_sort.rs\">Rust</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=7zuGmKfUt7s\">A video explaining the Counting Sort Algorithm</a></p>\n<h4>Animation Explanation</h4>\n<p><a href=\"https://www.cs.usfca.edu/~galles/visualization/CountingSort.html\">Counting Sort visualization</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "sorts\\counting_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\counting_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is pure Python implementation of counting sort algorithm\r\nFor doctests run following command:\r\npython -m doctest -v counting_sort.py\r\nor\r\npython3 -m doctest -v counting_sort.py\r\nFor manual testing run:\r\npython counting_sort.py\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">counting_sort</span>(<span class=\"hljs-params\">collection</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of counting sort algorithm in Python\r\n    :param collection: some mutable ordered collection with heterogeneous\r\n    comparable items inside\r\n    :return: the same collection ordered by ascending\r\n    Examples:\r\n    &gt;&gt;&gt; counting_sort([0, 5, 3, 2, 2])\r\n    [0, 2, 2, 3, 5]\r\n    &gt;&gt;&gt; counting_sort([])\r\n    []\r\n    &gt;&gt;&gt; counting_sort([-2, -5, -45])\r\n    [-45, -5, -2]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># if the collection is empty, returns empty</span>\r\n    <span class=\"hljs-keyword\">if</span> collection == []:\r\n        <span class=\"hljs-keyword\">return</span> []\r\n\r\n    <span class=\"hljs-comment\"># get some information about the collection</span>\r\n    coll_len = <span class=\"hljs-built_in\">len</span>(collection)\r\n    coll_max = <span class=\"hljs-built_in\">max</span>(collection)\r\n    coll_min = <span class=\"hljs-built_in\">min</span>(collection)\r\n\r\n    <span class=\"hljs-comment\"># create the counting array</span>\r\n    counting_arr_length = coll_max + <span class=\"hljs-number\">1</span> - coll_min\r\n    counting_arr = [<span class=\"hljs-number\">0</span>] * counting_arr_length\r\n\r\n    <span class=\"hljs-comment\"># count how much a number appears in the collection</span>\r\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> collection:\r\n        counting_arr[number - coll_min] += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># sum each position with it&#x27;s predecessors. now, counting_arr[i] tells</span>\r\n    <span class=\"hljs-comment\"># us how many elements &lt;= i has in the collection</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, counting_arr_length):\r\n        counting_arr[i] = counting_arr[i] + counting_arr[i - <span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-comment\"># create the output collection</span>\r\n    ordered = [<span class=\"hljs-number\">0</span>] * coll_len\r\n\r\n    <span class=\"hljs-comment\"># place the elements in the output, respecting the original order (stable</span>\r\n    <span class=\"hljs-comment\"># sort) from end to begin, updating counting_arr</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">reversed</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, coll_len)):\r\n        ordered[counting_arr[collection[i] - coll_min] - <span class=\"hljs-number\">1</span>] = collection[i]\r\n        counting_arr[collection[i] - coll_min] -= <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> ordered\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">counting_sort_string</span>(<span class=\"hljs-params\">string</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; counting_sort_string(&quot;thisisthestring&quot;)\r\n    &#x27;eghhiiinrsssttt&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join([<span class=\"hljs-built_in\">chr</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> counting_sort([<span class=\"hljs-built_in\">ord</span>(c) <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> string])])\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-comment\"># Test string sort</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-string\">&quot;eghhiiinrsssttt&quot;</span> == counting_sort_string(<span class=\"hljs-string\">&quot;thisisthestring&quot;</span>)\r\n\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n    <span class=\"hljs-built_in\">print</span>(counting_sort(unsorted))\r\n"
    },
    "javascript": {
      "dir": "Sorts\\CountingSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\CountingSort.js",
      "code": "<span class=\"hljs-comment\">/**\r\n * Counting sort is an algorithm for sorting a collection\r\n * of objects according to keys that are small integers.\r\n *\r\n * It is an integer sorting algorithm.\r\n *\r\n * Wikipedia: https://en.wikipedia.org/wiki/Counting_sort\r\n * Animated Visual: https://www.cs.usfca.edu/~galles/visualization/CountingSort.html\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">countingSort</span> = (<span class=\"hljs-params\">arr, min, max</span>) =&gt; {\r\n  <span class=\"hljs-comment\">// Create an auxiliary resultant array</span>\r\n  <span class=\"hljs-keyword\">const</span> res = []\r\n  <span class=\"hljs-comment\">// Create and initialize the frequency[count] array</span>\r\n  <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(max - min + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>)\r\n  <span class=\"hljs-comment\">// Populate the freq array</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) {\r\n    count[arr[i] - min]++\r\n  }\r\n  <span class=\"hljs-comment\">// Create a prefix sum array out of the frequency[count] array</span>\r\n  count[<span class=\"hljs-number\">0</span>] -= <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; count.<span class=\"hljs-property\">length</span>; i++) {\r\n    count[i] += count[i - <span class=\"hljs-number\">1</span>]\r\n  }\r\n  <span class=\"hljs-comment\">// Populate the result array using the prefix sum array</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n    res[count[arr[i] - min]] = arr[i]\r\n    count[arr[i] - min]--\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> res\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Implementation of Counting Sort\r\n */</span>\r\n<span class=\"hljs-comment\">// const array = [3, 0, 2, 5, 4, 1]</span>\r\n<span class=\"hljs-comment\">// countingSort(array, 0, 5)</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\counting_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\counting_sort.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">Max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> Arr[], <span class=\"hljs-type\">int</span> N)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> max = Arr[<span class=\"hljs-number\">0</span>];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; N; i++)\r\n        <span class=\"hljs-keyword\">if</span> (Arr[i] &gt; max)\r\n            max = Arr[i];\r\n    <span class=\"hljs-keyword\">return</span> max;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">Min</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> Arr[], <span class=\"hljs-type\">int</span> N)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> min = Arr[<span class=\"hljs-number\">0</span>];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; N; i++)\r\n        <span class=\"hljs-keyword\">if</span> (Arr[i] &lt; min)\r\n            min = Arr[i];\r\n    <span class=\"hljs-keyword\">return</span> min;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> Arr[], <span class=\"hljs-type\">int</span> N)</span> </span>{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) cout &lt;&lt; Arr[i] &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> *<span class=\"hljs-title\">Counting_Sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> Arr[], <span class=\"hljs-type\">int</span> N)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> max = <span class=\"hljs-built_in\">Max</span>(Arr, N);\r\n    <span class=\"hljs-type\">int</span> min = <span class=\"hljs-built_in\">Min</span>(Arr, N);\r\n    <span class=\"hljs-type\">int</span> *Sorted_Arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[N];\r\n\r\n    <span class=\"hljs-type\">int</span> *Count = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[max - min + <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) Count[Arr[i] - min]++;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; (max - min + <span class=\"hljs-number\">1</span>); i++) Count[i] += Count[i - <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = N - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n        Sorted_Arr[Count[Arr[i] - min] - <span class=\"hljs-number\">1</span>] = Arr[i];\r\n        Count[Arr[i] - min]--;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> Sorted_Arr;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> Arr[] = {<span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">66</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">53</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">69</span>, <span class=\"hljs-number\">72</span>, <span class=\"hljs-number\">22</span>,\r\n                 <span class=\"hljs-number\">74</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">53</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">4</span>,  <span class=\"hljs-number\">69</span>, <span class=\"hljs-number\">86</span>, <span class=\"hljs-number\">19</span>},\r\n        N = <span class=\"hljs-number\">20</span>;\r\n    <span class=\"hljs-type\">int</span> *Sorted_Arr;\r\n\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\tOrignal Array = &quot;</span>;\r\n    <span class=\"hljs-built_in\">Print</span>(Arr, N);\r\n    Sorted_Arr = <span class=\"hljs-built_in\">Counting_Sort</span>(Arr, N);\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\t Sorted Array = &quot;</span>;\r\n    <span class=\"hljs-built_in\">Print</span>(Sorted_Arr, N);\r\n    cout &lt;&lt; endl;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\CountingSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\CountingSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.thealgorithms.sorts.SortUtils.print;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.util.stream.Collectors.toList;\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.util.stream.Collectors.toMap;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n<span class=\"hljs-keyword\">import</span> java.util.stream.IntStream;\r\n<span class=\"hljs-keyword\">import</span> java.util.stream.Stream;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span> Youssef Ali (https://github.com/youssefAli11997)\r\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CountingSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\r\n\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] unsorted) {\r\n        <span class=\"hljs-keyword\">return</span> sort(Arrays.asList(unsorted)).toArray(unsorted);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method implements the Generic Counting Sort\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> list The list to be sorted\r\n     * &lt;p&gt;\r\n     * Sorts the list in increasing order The method uses list elements as keys\r\n     * in the frequency map\r\n     */</span>\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; List&lt;T&gt; <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(List&lt;T&gt; list)</span> {\r\n\r\n        Map&lt;T, Integer&gt; frequency = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeMap</span>&lt;&gt;();\r\n        <span class=\"hljs-comment\">// The final output array</span>\r\n        List&lt;T&gt; sortedArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(list.size());\r\n\r\n        <span class=\"hljs-comment\">// Counting the frequency of @param array elements</span>\r\n        list.forEach(v -&gt; frequency.put(v, frequency.getOrDefault(v, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>));\r\n\r\n        <span class=\"hljs-comment\">// Filling the sortedArray</span>\r\n        <span class=\"hljs-keyword\">for</span> (Map.Entry&lt;T, Integer&gt; element : frequency.entrySet()) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; element.getValue(); j++) {\r\n                sortedArray.add(element.getKey());\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> sortedArray;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Stream Counting Sort The same as method {<span class=\"hljs-doctag\">@link</span> CountingSort#sort(List)} }\r\n     * but this method uses stream API\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> list The list to be sorted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; List&lt;T&gt; <span class=\"hljs-title function_\">streamSort</span><span class=\"hljs-params\">(List&lt;T&gt; list)</span> {\r\n        <span class=\"hljs-keyword\">return</span> list.stream()\r\n                .collect(toMap(k -&gt; k, v -&gt; <span class=\"hljs-number\">1</span>, (v1, v2) -&gt; v1 + v2, TreeMap::<span class=\"hljs-keyword\">new</span>))\r\n                .entrySet()\r\n                .stream()\r\n                .flatMap(entry -&gt; IntStream.rangeClosed(<span class=\"hljs-number\">1</span>, entry.getValue()).mapToObj(t -&gt; entry.getKey()))\r\n                .collect(toList());\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Driver Program</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">// Integer Input</span>\r\n        List&lt;Integer&gt; unsortedInts\r\n                = Stream.of(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>).collect(toList());\r\n        <span class=\"hljs-type\">CountingSort</span> <span class=\"hljs-variable\">countingSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CountingSort</span>();\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Before Sorting:&quot;</span>);\r\n        print(unsortedInts);\r\n\r\n        <span class=\"hljs-comment\">// Output =&gt; 1 1 4 6 9 9 12 23 23 54 78 231</span>\r\n        System.out.println(<span class=\"hljs-string\">&quot;After Sorting:&quot;</span>);\r\n        print(countingSort.sort(unsortedInts));\r\n        System.out.println(<span class=\"hljs-string\">&quot;After Sorting By Streams:&quot;</span>);\r\n        print(streamSort(unsortedInts));\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;\\n------------------------------\\n&quot;</span>);\r\n\r\n        <span class=\"hljs-comment\">// String Input</span>\r\n        List&lt;String&gt; unsortedStrings\r\n                = Stream.of(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;f&quot;</span>, <span class=\"hljs-string\">&quot;g&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>).collect(toList());\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Before Sorting:&quot;</span>);\r\n        print(unsortedStrings);\r\n\r\n        <span class=\"hljs-comment\">// Output =&gt; a a b c c d e f g</span>\r\n        System.out.println(<span class=\"hljs-string\">&quot;After Sorting:&quot;</span>);\r\n        print(countingSort.sort(unsortedStrings));\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;After Sorting By Streams:&quot;</span>);\r\n        print(streamSort(unsortedStrings));\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\counting_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\counting_sort.c",
      "code": "<span class=\"hljs-comment\">/*\r\n  &gt; Counting sort is a sorting technique based on keys between a specific range.\r\n  &gt; integer sorting algorithm\r\n  &gt; Worst-case performance O(n+k)\r\n  &gt; Stabilized by prefix sum array\r\n*/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, n, l = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter size of array = &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\r\n\r\n    <span class=\"hljs-type\">int</span> *a = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter %d elements in array :\\n&quot;</span>, n);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);\r\n        <span class=\"hljs-keyword\">if</span> (a[i] &gt; l)\r\n            l = a[i];\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> *b = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>((l + <span class=\"hljs-number\">1</span>) * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    <span class=\"hljs-built_in\">memset</span>(b, <span class=\"hljs-number\">0</span>, (l + <span class=\"hljs-number\">1</span>) * <span class=\"hljs-keyword\">sizeof</span>(b[<span class=\"hljs-number\">0</span>]));\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) b[a[i]]++;  <span class=\"hljs-comment\">// hashing number to array index</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; (l + <span class=\"hljs-number\">1</span>); i++)  <span class=\"hljs-comment\">// unstable , stabilized by prefix sum array</span>\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (b[i] &gt; <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">while</span> (b[i] != <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// for case when number exists more than once</span>\r\n            {\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, i);\r\n                b[i]--;\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">free</span>(a);\r\n    <span class=\"hljs-built_in\">free</span>(b);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "go": {
      "dir": "sort\\countingsort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sort\\countingsort.go",
      "code": "<span class=\"hljs-comment\">// countingsort.go</span>\r\n<span class=\"hljs-comment\">// description: Implementation of counting sort algorithm</span>\r\n<span class=\"hljs-comment\">// details: A simple counting sort algorithm implementation</span>\r\n<span class=\"hljs-comment\">// author [Phil](https://github.com/pschik)</span>\r\n<span class=\"hljs-comment\">// see sort_test.go for a test implementation, test function TestQuickSort</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> sort\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Count</span><span class=\"hljs-params\">(data []<span class=\"hljs-type\">int</span>)</span></span> []<span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">var</span> aMin, aMax = <span class=\"hljs-number\">-1000</span>, <span class=\"hljs-number\">1000</span>\r\n\tcount := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, aMax-aMin+<span class=\"hljs-number\">1</span>)\r\n\t<span class=\"hljs-keyword\">for</span> _, x := <span class=\"hljs-keyword\">range</span> data {\r\n\t\tcount[x-aMin]++\r\n\t}\r\n\tz := <span class=\"hljs-number\">0</span>\r\n\t<span class=\"hljs-keyword\">for</span> i, c := <span class=\"hljs-keyword\">range</span> count {\r\n\t\t<span class=\"hljs-keyword\">for</span> c &gt; <span class=\"hljs-number\">0</span> {\r\n\t\t\tdata[z] = i + aMin\r\n\t\t\tz++\r\n\t\t\tc--\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> data\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\sorting\\counting_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\sorting\\counting_sort.rs",
      "code": "<span class=\"hljs-comment\">/// In place counting sort for collections of u32</span>\r\n<span class=\"hljs-comment\">/// O(n + maxval) in time, where maxval is the biggest value an input can possibly take</span>\r\n<span class=\"hljs-comment\">/// O(maxval) in memory</span>\r\n<span class=\"hljs-comment\">/// u32 is chosen arbitrarly, a counting sort probably should&#x27;nt be used on data that requires bigger types.</span>\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">counting_sort</span>(arr: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">u32</span>], maxval: <span class=\"hljs-type\">usize</span>) {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">occurences</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; maxval + <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-keyword\">for</span> &amp;data <span class=\"hljs-keyword\">in</span> arr.<span class=\"hljs-title function_ invoke__\">iter</span>() {\r\n        occurences[data <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] += <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">i</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-title function_ invoke__\">for</span> (data, &amp;number) <span class=\"hljs-keyword\">in</span> occurences.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..number {\r\n            arr[i] = data <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\r\n            i += <span class=\"hljs-number\">1</span>;\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">use</span> std::ops::AddAssign;\r\n<span class=\"hljs-comment\">/// Generic implementation of a counting sort for all usigned types</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">generic_counting_sort</span>&lt;T: <span class=\"hljs-built_in\">Into</span>&lt;<span class=\"hljs-type\">u64</span>&gt; + <span class=\"hljs-built_in\">From</span>&lt;<span class=\"hljs-type\">u8</span>&gt; + AddAssign + <span class=\"hljs-built_in\">Copy</span>&gt;(\r\n    arr: &amp;<span class=\"hljs-keyword\">mut</span> [T],\r\n    maxval: <span class=\"hljs-type\">usize</span>,\r\n) {\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">occurences</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; maxval + <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-keyword\">for</span> &amp;data <span class=\"hljs-keyword\">in</span> arr.<span class=\"hljs-title function_ invoke__\">iter</span>() {\r\n        occurences[data.<span class=\"hljs-title function_ invoke__\">into</span>() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>] += <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Current index in output array</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">i</span> = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// current data point, necessary to be type-safe</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">data</span> = T::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-comment\">// This will iterate from 0 to the largest data point in `arr`</span>\r\n    <span class=\"hljs-comment\">// `number` contains the occurances of the data point `data`</span>\r\n    <span class=\"hljs-keyword\">for</span> &amp;number <span class=\"hljs-keyword\">in</span> occurences.<span class=\"hljs-title function_ invoke__\">iter</span>() {\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..number {\r\n            arr[i] = data;\r\n            i += <span class=\"hljs-number\">1</span>;\r\n        }\r\n\r\n        data += T::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-number\">1</span>);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> test {\r\n    <span class=\"hljs-keyword\">use</span> super::super::is_sorted;\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">counting_sort_descending</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ve1</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-title function_ invoke__\">counting_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve1, <span class=\"hljs-number\">6</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;ve1));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">counting_sort_pre_sorted</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ve2</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\r\n        <span class=\"hljs-title function_ invoke__\">counting_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve2, <span class=\"hljs-number\">6</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;ve2));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">generic_counting_sort</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ve1</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u8</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">1</span>];\r\n        super::<span class=\"hljs-title function_ invoke__\">generic_counting_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve1, <span class=\"hljs-number\">120</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;ve1));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">presorted_u64_counting_sort</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ve2</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u64</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\r\n        super::<span class=\"hljs-title function_ invoke__\">generic_counting_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve2, <span class=\"hljs-number\">6</span>);\r\n\r\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;ve2));\r\n    }\r\n}\r\n"
    },
    "aarch64_assembly": {
      "dir": "sorters\\counting_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters\\counting_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\r\n<span class=\"hljs-comment\">/*  program countSort64.s  */</span>\r\n \r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\r\n \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* Initialized data              */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.data</span>\r\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\r\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\r\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n \r\n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-comment\">#Caution : number strictly positive and not too big</span>\r\n<span class=\"hljs-symbol\">TableNumber:</span>      .quad   <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>\r\n<span class=\"hljs-comment\">//TableNumber:     .quad   10,9,8,7,6,5,4,3,2,1</span>\r\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.bss</span>\r\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/*  code section                 */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.text</span>\r\n<span class=\"hljs-symbol\">.global</span> main \r\n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> searchMinMax\r\n    <span class=\"hljs-keyword\">mov</span> x3,NBELEMENTS\r\n    <span class=\"hljs-keyword\">bl</span> countSort\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">bl</span> displayTable\r\n \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\r\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\r\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\r\n \r\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\r\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\r\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\r\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\r\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\r\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\r\n<span class=\"hljs-comment\">/* x0 return table address  r1 return min  r2 return max */</span>\r\n<span class=\"hljs-symbol\">searchMinMax:</span>\r\n    stp x3,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,x1                        <span class=\"hljs-comment\">// save size</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">62</span>                     <span class=\"hljs-comment\">// min</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>                         <span class=\"hljs-comment\">// max</span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">0</span>                         <span class=\"hljs-comment\">// index</span>\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">ldr</span> x5,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">cmp</span> x5,x1\r\n    csel x1,x5,x1,lt\r\n    <span class=\"hljs-keyword\">cmp</span> x5,x2\r\n    csel x2,x5,x2,gt\r\n    <span class=\"hljs-keyword\">add</span> x4,x4,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x4,x3\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>                <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x3,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>                <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                              <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\r\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\r\n<span class=\"hljs-symbol\">isSorted:</span>\r\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\r\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\r\n    <span class=\"hljs-keyword\">mov</span> x4,x3\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\r\n<span class=\"hljs-number\">98</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">99</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*         count sort                                             */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the minimum          */</span>\r\n<span class=\"hljs-comment\">/* x2 contains the maximum          */</span>\r\n<span class=\"hljs-comment\">/* x3 contains area size            */</span> \r\n<span class=\"hljs-comment\">/* caution : the count area is in the stack. if max is very large, risk of error */</span> \r\n<span class=\"hljs-symbol\">countSort:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x8,x9,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">sub</span> x3,x3,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// compute endidx = n - 1</span>\r\n    <span class=\"hljs-keyword\">sub</span> x5,x2,x1               <span class=\"hljs-comment\">// compute max - min</span>\r\n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// + 1</span>\r\n    <span class=\"hljs-keyword\">lsl</span> x9,x5,<span class=\"hljs-number\">3</span>                <span class=\"hljs-comment\">// 8 bytes by number</span>\r\n    <span class=\"hljs-keyword\">sub</span> <span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-built_in\">sp</span>,x9               <span class=\"hljs-comment\">// reserve count area in stack</span>\r\n    <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">fp</span>,<span class=\"hljs-built_in\">sp</span>                  <span class=\"hljs-comment\">// frame pointer = stack</span>\r\n    <span class=\"hljs-keyword\">mov</span> x6,<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-number\">1</span>:                             <span class=\"hljs-comment\">// loop init stack area </span>\r\n    <span class=\"hljs-keyword\">str</span> x6,[<span class=\"hljs-built_in\">fp</span>,x4, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">add</span> x4,x4,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x4,x5\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b\r\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#0</span>                  <span class=\"hljs-comment\">// indice</span>\r\n<span class=\"hljs-number\">2</span>:                             <span class=\"hljs-comment\">// start loop 2</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x5,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load value A[j]</span>\r\n    <span class=\"hljs-keyword\">sub</span> x5,x5,x1               <span class=\"hljs-comment\">// - min</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x6,[<span class=\"hljs-built_in\">fp</span>,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load count of value</span>\r\n    <span class=\"hljs-keyword\">add</span> x6,x6,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment counter</span>\r\n    <span class=\"hljs-keyword\">str</span> x6,[<span class=\"hljs-built_in\">fp</span>,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// and store </span>\r\n    <span class=\"hljs-keyword\">add</span> x4,x4,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment indice</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x4,x3                  <span class=\"hljs-comment\">// end ?</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">2</span>b                     <span class=\"hljs-comment\">// no -&gt; loop 2</span>\r\n \r\n    <span class=\"hljs-keyword\">mov</span> x7,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// z</span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,x1                  <span class=\"hljs-comment\">// index = min</span>\r\n<span class=\"hljs-number\">3</span>:                             <span class=\"hljs-comment\">// start loop 3</span>\r\n    <span class=\"hljs-keyword\">sub</span> x6,x4,x1               <span class=\"hljs-comment\">// compute index - min</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x5,[<span class=\"hljs-built_in\">fp</span>,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// load count</span>\r\n<span class=\"hljs-number\">4</span>:                             <span class=\"hljs-comment\">// start loop 4</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x5,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// count &lt;&gt; zéro</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">5</span>f\r\n    <span class=\"hljs-keyword\">str</span> x4,[x0,x7,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]       <span class=\"hljs-comment\">// store value A[j]</span>\r\n    <span class=\"hljs-keyword\">add</span> x7,x7,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment z</span>\r\n    <span class=\"hljs-keyword\">sub</span> x5,x5,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// decrement count  </span>\r\n    <span class=\"hljs-keyword\">b</span>  <span class=\"hljs-number\">4</span>b\r\n \r\n<span class=\"hljs-number\">5</span>:\r\n    <span class=\"hljs-keyword\">add</span> x4,x4,<span class=\"hljs-number\">1</span>                <span class=\"hljs-comment\">// increment index</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x4,x2                  <span class=\"hljs-comment\">// max ?</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">3</span>b                     <span class=\"hljs-comment\">// no -&gt; loop 3</span>\r\n \r\n    <span class=\"hljs-keyword\">add</span> <span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-built_in\">sp</span>,x9               <span class=\"hljs-comment\">// stack alignement</span>\r\n \r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x8,x9,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                        <span class=\"hljs-comment\">// return to address lr x30</span>\r\n \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-symbol\">displayTable:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> conversion10S                  <span class=\"hljs-comment\">// décimal conversion</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at @ character</span>\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\r\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n    <span class=\"hljs-keyword\">mov</span> x0,x2                       <span class=\"hljs-comment\">// table address</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms\\sorting\\counting_sort.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\sorting\\counting_sort.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ans</span> = <span class=\"hljs-title\">counting_sort</span><span class=\"hljs-params\">(arr, k)</span></span>\r\n  <span class=\"hljs-comment\">% countingSort : implements the counting sort algorithm</span>\r\n  <span class=\"hljs-comment\">% INPUT: array of integers between 1 and k</span>\r\n  <span class=\"hljs-comment\">% OUTPUT: sorted array</span>\r\n\r\n  <span class=\"hljs-built_in\">ans</span> = <span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-built_in\">size</span>(arr)); <span class=\"hljs-comment\">% result array (sorted array)</span>\r\n\r\n\r\n  C = <span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-number\">1</span>,k); <span class=\"hljs-comment\">% array for counting</span>\r\n\r\n  <span class=\"hljs-comment\">% counts the occurs of element i</span>\r\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(arr)\r\n    C(arr(<span class=\"hljs-built_in\">i</span>)) += <span class=\"hljs-number\">1</span>;\r\n  endfor\r\n\r\n  <span class=\"hljs-comment\">% adress calculation</span>\r\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-number\">2</span> : k\r\n    C(<span class=\"hljs-built_in\">j</span>) += C(<span class=\"hljs-built_in\">j</span><span class=\"hljs-number\">-1</span>);\r\n  endfor\r\n\r\n  <span class=\"hljs-keyword\">for</span> m = <span class=\"hljs-built_in\">length</span>(arr) : <span class=\"hljs-number\">-1</span> : <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-built_in\">ans</span>( C( arr(m) ) ) = arr(m);\r\n    C(arr(m)) -= <span class=\"hljs-number\">1</span>;\r\n  endfor\r\n\r\nendfunction"
    },
    "julia": {
      "dir": "src\\sorts\\counting_sort.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\sorts\\counting_sort.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n# Counting Sort \r\nOVERVIEW:\r\nCounting Sort is a sorting algorithm that sort elements within a specific range.\r\nThe sorting technique is to count the existing element and stored its occurrence time in a new list, then only print it out.\r\n\r\nSTEPS: \r\nAssume the input as --&gt; x=[-3, 1, -5, 0, -3]\r\n  minimum = -5\r\n- STEP 1: Create a list size within the range, in this case is -5 --&gt; 1 which have range of 7 (-5, -4, -3, -2, -1, 0, 1), so list with size 7 and assign all to 0 is created\r\n- STEP 2: Count the occurances of element in the list \r\n          First number = -3 it is the third number in the range, so count[3]+=1\r\n          Final view:\r\n          index : ( 1,  2,  3,  4,  5, 6, 7)\r\n          range : (-5, -4, -3, -2, -1, 0, 1)\r\n          count : [ 1,  0,  2,  0,  0, 1, 1] &lt;-- the list will store this occurences\r\n- STEP 3: Make the count list accumulate the occurances \r\n          The final count is (1, 1, 3, 3, 3, 4, 5)\r\n- STEP 4: Assign the elements in x into correct possition by creating a new list (will call &#x27;output&#x27; in this sample)\r\n          the 1st element in &#x27;x&#x27; is -3, it is third in range, so it will call the index of 3 in &#x27;count&#x27;, which is 3 and assign the -3 in to 3rd position in &#x27;output&#x27;, \r\n          then the third element in range will deduct by 1, so the next repeated element will get the correct position, new &#x27;count&#x27; --&gt; [1, 1, 2, 3, 3, 4, 5]\r\n\r\n          the 2nd element in &#x27;x&#x27; is  1, it is last  in range, so it will call the index of 7 in &#x27;count&#x27;, which is 5 and assign the  1 in to 5th position in &#x27;output&#x27;, \r\n          new &#x27;count&#x27; --&gt; [1, 1, 2, 3, 3, 4, 4]\r\n          ......\r\n          ......\r\n          *If you want the order of original array to have the same order as the output array use can change this to decremental for loop\r\n- STEP 5: Assign the &#x27;ouput&#x27; list back to &#x27;x&#x27;\r\n\r\nFINAL RESULT --&gt;  [-5, -3, -3, 0, 1]                                                                                    \r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> counting_sort!(arr::<span class=\"hljs-built_in\">Vector</span>{T},l::<span class=\"hljs-built_in\">Int</span>=<span class=\"hljs-number\">1</span>,r::<span class=\"hljs-built_in\">Int</span>=length(arr))<span class=\"hljs-keyword\">where</span> T\r\n    <span class=\"hljs-keyword\">if</span> l&gt;=r\r\n        <span class=\"hljs-keyword\">return</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    max = maximum(arr)\r\n    min = minimum(arr)\r\n    range = max-min+<span class=\"hljs-number\">1</span>\r\n    count = <span class=\"hljs-built_in\">Vector</span>{T}(<span class=\"hljs-literal\">undef</span>, range)\r\n    output = <span class=\"hljs-built_in\">Vector</span>{T}(<span class=\"hljs-literal\">undef</span>, r)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:range\r\n      count[i]=<span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-comment\"># Store count of the item that appear in the &#x27;arr&#x27; (STEP 2)</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:r\r\n      count[arr[i]-min+<span class=\"hljs-number\">1</span>]+=<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-comment\"># Calculate cumulative frequency in &#x27;count&#x27; (STEP 3)</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>:length(count)\r\n      count[i] += count[i-<span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-comment\"># Build the &#x27;output&#x27; by assigning the item into correct position (STEP 4)</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:r\r\n      index = arr[i] - min + <span class=\"hljs-number\">1</span>\r\n      output[count[index]] = arr[i]\r\n      count[index]-=<span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-comment\"># Copy the &#x27;output&#x27; to &#x27;arr&#x27;, so that &#x27;arr&#x27; contain sorted item (STEP 5)</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:r\r\n      arr[i]=output[i]\r\n    <span class=\"hljs-keyword\">end</span>\r\n  \r\n<span class=\"hljs-keyword\">end</span>"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Integer/CountingSorter.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sorters\\Integer\\CountingSorter.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Integer</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Counting sort is an algorithm for sorting a collection of objects according to keys that are small integers; that</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     is, it is an integer sorting algorithm. It operates by counting the number of objects that have each distinct key</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     value, and using arithmetic on those counts to determine the positions of each key value in the output sequence.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Its running time is linear in the number of items and the difference between the maximum and minimum key values, so</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     it is only suitable for direct use in situations where the variation in keys is not significantly greater than the</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     number of items. However, it is often used as a subroutine in another sorting algorithm, radix sort, that can</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     handle larger keys more efficiently.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CountingSorter</span> : <span class=\"hljs-title\">IIntegerSorter</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Sorts input array using counting sort algorithm.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Time complexity: O(n+k), where k is the range of the non-negative key values.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>         Space complexity: O(n+k), where k is the range of the non-negative key values.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/para&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] array</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (array.Length == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> max = array.Max();\r\n            <span class=\"hljs-keyword\">var</span> min = array.Min();\r\n            <span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[max - min + <span class=\"hljs-number\">1</span>];\r\n            <span class=\"hljs-keyword\">var</span> output = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[array.Length];\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length; i++)\r\n            {\r\n                count[array[i] - min]++;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt; count.Length; i++)\r\n            {\r\n                count[i] += count[i - <span class=\"hljs-number\">1</span>];\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = array.Length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--)\r\n            {\r\n                output[count[array[i] - min] - <span class=\"hljs-number\">1</span>] = array[i];\r\n                count[array[i] - min]--;\r\n            }\r\n\r\n            Array.Copy(output, array, array.Length);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Arnav Borborah",
      "email": "arnavborborah11@gmail.com",
      "commits": 1
    },
    {
      "name": "Norbert Melzer",
      "email": "timmelzer@gmail.com",
      "commits": 1
    },
    {
      "name": "Anshul",
      "email": "malikanshul29@gmail.com",
      "commits": 1
    },
    {
      "name": "Emilien Fugier",
      "email": "mail@emilienfugier.xyz",
      "commits": 1
    },
    {
      "name": "MaximSmolskiy",
      "email": "mithridatus@mail.ru",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "PoolOfDeath20",
      "email": "53143214+GervinFung@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KheeLong",
      "email": "kheelong0387@gmail.com",
      "commits": 1
    },
    {
      "name": "gohpeijin",
      "email": "72803504+gohpeijin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "nomisrevol",
      "email": "vdn1999bxvp@gmail.com",
      "commits": 1
    },
    {
      "name": "wdy",
      "email": "2664683329@qq.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ubc1729",
      "email": "udayudaya1729@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Chandan Vishwakarma",
      "email": "33517793+meet-cv@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "olshansky",
      "email": "olshansky0@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Youssef Ali",
      "email": "youssefali6212@gmail.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "camilne",
      "email": "cameronm213@gmail.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Shivam sharma",
      "email": "shivams334@gmail.com",
      "commits": 1
    },
    {
      "name": "André Almeida",
      "email": "fda.andre@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 2
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 2
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "marsonya",
      "email": "akhil.marsonya27@gmail.com",
      "commits": 3
    },
    {
      "name": "Mandy8055",
      "email": "msankrit8055@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en\\Sorting Algorithms\\Counting Sort.md"
  }
}