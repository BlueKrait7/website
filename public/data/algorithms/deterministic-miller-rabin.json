{
  "slug": "deterministic-miller-rabin",
  "name": "Deterministic Miller Rabin",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers\\deterministic_miller_rabin.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers\\deterministic_miller_rabin.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Created by Nathan Damon, @bizzfitch on github\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>test_miller_rabin()\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">miller_rabin</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, allow_probable: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Deterministic Miller-Rabin algorithm for primes ~&lt; 3.32e24.\r\n\r\n    Uses numerical analysis results to return whether or not the passed number\r\n    is prime. If the passed number is above the upper limit, and\r\n    allow_probable is True, then a return value of True indicates that n is\r\n    probably prime. This test does not allow False negatives- a return value\r\n    of False is ALWAYS composite.\r\n\r\n    Parameters\r\n    ----------\r\n    n : int\r\n        The integer to be tested. Since we usually care if a number is prime,\r\n        n &lt; 2 returns False instead of raising a ValueError.\r\n    allow_probable: bool, default False\r\n        Whether or not to test n above the upper bound of the deterministic test.\r\n\r\n    Raises\r\n    ------\r\n    ValueError\r\n\r\n    Reference\r\n    ---------\r\n    https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">2</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> n % <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">or</span> n &lt; <span class=\"hljs-number\">2</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">and</span> n % <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>):  <span class=\"hljs-comment\"># can quickly check last digit</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">3_317_044_064_679_887_385_961_981</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> allow_probable:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(\r\n            <span class=\"hljs-string\">&quot;Warning: upper bound of deterministic test is exceeded. &quot;</span>\r\n            <span class=\"hljs-string\">&quot;Pass allow_probable=True to allow probabilistic test. &quot;</span>\r\n            <span class=\"hljs-string\">&quot;A return value of True indicates a probable prime.&quot;</span>\r\n        )\r\n    <span class=\"hljs-comment\"># array bounds provided by analysis</span>\r\n    bounds = [\r\n        <span class=\"hljs-number\">2_047</span>,\r\n        <span class=\"hljs-number\">1_373_653</span>,\r\n        <span class=\"hljs-number\">25_326_001</span>,\r\n        <span class=\"hljs-number\">3_215_031_751</span>,\r\n        <span class=\"hljs-number\">2_152_302_898_747</span>,\r\n        <span class=\"hljs-number\">3_474_749_660_383</span>,\r\n        <span class=\"hljs-number\">341_550_071_728_321</span>,\r\n        <span class=\"hljs-number\">1</span>,\r\n        <span class=\"hljs-number\">3_825_123_056_546_413_051</span>,\r\n        <span class=\"hljs-number\">1</span>,\r\n        <span class=\"hljs-number\">1</span>,\r\n        <span class=\"hljs-number\">318_665_857_834_031_151_167_461</span>,\r\n        <span class=\"hljs-number\">3_317_044_064_679_887_385_961_981</span>,\r\n    ]\r\n\r\n    primes = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">41</span>]\r\n    <span class=\"hljs-keyword\">for</span> idx, _p <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(bounds, <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-keyword\">if</span> n &lt; _p:\r\n            <span class=\"hljs-comment\"># then we have our last prime to check</span>\r\n            plist = primes[:idx]\r\n            <span class=\"hljs-keyword\">break</span>\r\n    d, s = n - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-comment\"># break up n -1 into a power of 2 (s) and</span>\r\n    <span class=\"hljs-comment\"># remaining odd component</span>\r\n    <span class=\"hljs-comment\"># essentially, solve for d * 2 ** s == n - 1</span>\r\n    <span class=\"hljs-keyword\">while</span> d % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\r\n        d //= <span class=\"hljs-number\">2</span>\r\n        s += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">for</span> prime <span class=\"hljs-keyword\">in</span> plist:\r\n        pr = <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(s):\r\n            m = <span class=\"hljs-built_in\">pow</span>(prime, d * <span class=\"hljs-number\">2</span>**r, n)\r\n            <span class=\"hljs-comment\"># see article for analysis explanation for m</span>\r\n            <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> m == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">or</span> ((m + <span class=\"hljs-number\">1</span>) % n == <span class=\"hljs-number\">0</span>):\r\n                pr = <span class=\"hljs-literal\">True</span>\r\n                <span class=\"hljs-comment\"># this loop will not determine compositeness</span>\r\n                <span class=\"hljs-keyword\">break</span>\r\n        <span class=\"hljs-keyword\">if</span> pr:\r\n            <span class=\"hljs-keyword\">continue</span>\r\n        <span class=\"hljs-comment\"># if pr is False, then the above loop never evaluated to true,</span>\r\n        <span class=\"hljs-comment\"># and the n MUST be composite</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_miller_rabin</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Testing a nontrivial (ends in 1, 3, 7, 9) composite\r\n    and a prime in each range.\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">561</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">563</span>)\r\n    <span class=\"hljs-comment\"># 2047</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">838_201</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">838_207</span>)\r\n    <span class=\"hljs-comment\"># 1_373_653</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">17_316_001</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">17_316_017</span>)\r\n    <span class=\"hljs-comment\"># 25_326_001</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">3_078_386_641</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">3_078_386_653</span>)\r\n    <span class=\"hljs-comment\"># 3_215_031_751</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">1_713_045_574_801</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">1_713_045_574_819</span>)\r\n    <span class=\"hljs-comment\"># 2_152_302_898_747</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">2_779_799_728_307</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">2_779_799_728_327</span>)\r\n    <span class=\"hljs-comment\"># 3_474_749_660_383</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">113_850_023_909_441</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">113_850_023_909_527</span>)\r\n    <span class=\"hljs-comment\"># 341_550_071_728_321</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">1_275_041_018_848_804_351</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">1_275_041_018_848_804_391</span>)\r\n    <span class=\"hljs-comment\"># 3_825_123_056_546_413_051</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">79_666_464_458_507_787_791_867</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">79_666_464_458_507_787_791_951</span>)\r\n    <span class=\"hljs-comment\"># 318_665_857_834_031_151_167_461</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> miller_rabin(<span class=\"hljs-number\">552_840_677_446_647_897_660_333</span>)\r\n    <span class=\"hljs-keyword\">assert</span> miller_rabin(<span class=\"hljs-number\">552_840_677_446_647_897_660_359</span>)\r\n    <span class=\"hljs-comment\"># 3_317_044_064_679_887_385_961_981</span>\r\n    <span class=\"hljs-comment\"># upper limit for probabilistic test</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    test_miller_rabin()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "bizzfitch",
      "email": "56891892+bizzfitch@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}