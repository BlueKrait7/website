{
  "slug": "nagel-schrekenberg",
  "name": "Nagel Schrekenberg",
  "categories": [
    "cellularautomata"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "cellular_automata\\nagel_schrekenberg.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/cellular_automata\\nagel_schrekenberg.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nSimulate the evolution of a highway with only one road that is a loop.\r\nThe highway is divided in cells, each cell can have at most one car in it.\r\nThe highway is a loop so when a car comes to one end, it will come out on the other.\r\nEach car is represented by its speed (from 0 to 5).\r\n\r\nSome information about speed:\r\n    -1 means that the cell on the highway is empty\r\n    0 to 5 are the speed of the cars with 0 being the lowest and 5 the highest\r\n\r\nhighway: list[int]  Where every position and speed of every car will be stored\r\nprobability         The probability that a driver will slow down\r\ninitial_speed       The speed of the cars a the start\r\nfrequency           How many cells there are between two cars at the start\r\nmax_speed           The maximum speed a car can go to\r\nnumber_of_cells     How many cell are there in the highway\r\nnumber_of_update    How many times will the position be updated\r\n\r\nMore information here: https://en.wikipedia.org/wiki/Nagel%E2%80%93Schreckenberg_model\r\n\r\nExamples for doctest:\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>simulate(construct_highway(6, 3, 0), 2, 0, 2)\r\n[[0, -1, -1, 0, -1, -1], [-1, 1, -1, -1, 1, -1], [-1, -1, 1, -1, -1, 1]]\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>simulate(construct_highway(5, 2, -2), 3, 0, 2)\r\n[[0, -1, 0, -1, 0], [0, -1, 0, -1, -1], [0, -1, -1, 1, -1], [-1, 1, -1, 0, -1]]\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> randint, random\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">construct_highway</span>(<span class=\"hljs-params\">\r\n    number_of_cells: <span class=\"hljs-built_in\">int</span>,\r\n    frequency: <span class=\"hljs-built_in\">int</span>,\r\n    initial_speed: <span class=\"hljs-built_in\">int</span>,\r\n    random_frequency: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span>,\r\n    random_speed: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span>,\r\n    max_speed: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">5</span>,\r\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Build the highway following the parameters given\r\n    &gt;&gt;&gt; construct_highway(10, 2, 6)\r\n    [[6, -1, 6, -1, 6, -1, 6, -1, 6, -1]]\r\n    &gt;&gt;&gt; construct_highway(10, 10, 2)\r\n    [[2, -1, -1, -1, -1, -1, -1, -1, -1, -1]]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    highway = [[-<span class=\"hljs-number\">1</span>] * number_of_cells]  <span class=\"hljs-comment\"># Create a highway without any car</span>\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">if</span> initial_speed &lt; <span class=\"hljs-number\">0</span>:\r\n        initial_speed = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> i &lt; number_of_cells:\r\n        highway[<span class=\"hljs-number\">0</span>][i] = (\r\n            randint(<span class=\"hljs-number\">0</span>, max_speed) <span class=\"hljs-keyword\">if</span> random_speed <span class=\"hljs-keyword\">else</span> initial_speed\r\n        )  <span class=\"hljs-comment\"># Place the cars</span>\r\n        i += (\r\n            randint(<span class=\"hljs-number\">1</span>, max_speed * <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">if</span> random_frequency <span class=\"hljs-keyword\">else</span> frequency\r\n        )  <span class=\"hljs-comment\"># Arbitrary number, may need tuning</span>\r\n    <span class=\"hljs-keyword\">return</span> highway\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_distance</span>(<span class=\"hljs-params\">highway_now: <span class=\"hljs-built_in\">list</span>, car_index: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Get the distance between a car (at index car_index) and the next car\r\n    &gt;&gt;&gt; get_distance([6, -1, 6, -1, 6], 2)\r\n    1\r\n    &gt;&gt;&gt; get_distance([2, -1, -1, -1, 3, 1, 0, 1, 3, 2], 0)\r\n    3\r\n    &gt;&gt;&gt; get_distance([-1, -1, -1, -1, 2, -1, -1, -1, 3], -1)\r\n    4\r\n    &quot;&quot;&quot;</span>\r\n\r\n    distance = <span class=\"hljs-number\">0</span>\r\n    cells = highway_now[car_index + <span class=\"hljs-number\">1</span> :]\r\n    <span class=\"hljs-keyword\">for</span> cell <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(cells)):  <span class=\"hljs-comment\"># May need a better name for this</span>\r\n        <span class=\"hljs-keyword\">if</span> cells[cell] != -<span class=\"hljs-number\">1</span>:  <span class=\"hljs-comment\"># If the cell is not empty then</span>\r\n            <span class=\"hljs-keyword\">return</span> distance  <span class=\"hljs-comment\"># we have the distance we wanted</span>\r\n        distance += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-comment\"># Here if the car is near the end of the highway</span>\r\n    <span class=\"hljs-keyword\">return</span> distance + get_distance(highway_now, -<span class=\"hljs-number\">1</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">highway_now: <span class=\"hljs-built_in\">list</span>, probability: <span class=\"hljs-built_in\">float</span>, max_speed: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Update the speed of the cars\r\n    &gt;&gt;&gt; update([-1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 3], 0.0, 5)\r\n    [-1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 4]\r\n    &gt;&gt;&gt; update([-1, -1, 2, -1, -1, -1, -1, 3], 0.0, 5)\r\n    [-1, -1, 3, -1, -1, -1, -1, 1]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    number_of_cells = <span class=\"hljs-built_in\">len</span>(highway_now)\r\n    <span class=\"hljs-comment\"># Beforce calculations, the highway is empty</span>\r\n    next_highway = [-<span class=\"hljs-number\">1</span>] * number_of_cells\r\n\r\n    <span class=\"hljs-keyword\">for</span> car_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(number_of_cells):\r\n        <span class=\"hljs-keyword\">if</span> highway_now[car_index] != -<span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-comment\"># Add 1 to the current speed of the car and cap the speed</span>\r\n            next_highway[car_index] = <span class=\"hljs-built_in\">min</span>(highway_now[car_index] + <span class=\"hljs-number\">1</span>, max_speed)\r\n            <span class=\"hljs-comment\"># Number of empty cell before the next car</span>\r\n            dn = get_distance(highway_now, car_index) - <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-comment\"># We can&#x27;t have the car causing an accident</span>\r\n            next_highway[car_index] = <span class=\"hljs-built_in\">min</span>(next_highway[car_index], dn)\r\n            <span class=\"hljs-keyword\">if</span> random() &lt; probability:\r\n                <span class=\"hljs-comment\"># Randomly, a driver will slow down</span>\r\n                next_highway[car_index] = <span class=\"hljs-built_in\">max</span>(next_highway[car_index] - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-keyword\">return</span> next_highway\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simulate</span>(<span class=\"hljs-params\">\r\n    highway: <span class=\"hljs-built_in\">list</span>, number_of_update: <span class=\"hljs-built_in\">int</span>, probability: <span class=\"hljs-built_in\">float</span>, max_speed: <span class=\"hljs-built_in\">int</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    The main function, it will simulate the evolution of the highway\r\n    &gt;&gt;&gt; simulate([[-1, 2, -1, -1, -1, 3]], 2, 0.0, 3)\r\n    [[-1, 2, -1, -1, -1, 3], [-1, -1, -1, 2, -1, 0], [1, -1, -1, 0, -1, -1]]\r\n    &gt;&gt;&gt; simulate([[-1, 2, -1, 3]], 4, 0.0, 3)\r\n    [[-1, 2, -1, 3], [-1, 0, -1, 0], [-1, 0, -1, 0], [-1, 0, -1, 0], [-1, 0, -1, 0]]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    number_of_cells = <span class=\"hljs-built_in\">len</span>(highway[<span class=\"hljs-number\">0</span>])\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(number_of_update):\r\n        next_speeds_calculated = update(highway[i], probability, max_speed)\r\n        real_next_speeds = [-<span class=\"hljs-number\">1</span>] * number_of_cells\r\n\r\n        <span class=\"hljs-keyword\">for</span> car_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(number_of_cells):\r\n            speed = next_speeds_calculated[car_index]\r\n            <span class=\"hljs-keyword\">if</span> speed != -<span class=\"hljs-number\">1</span>:\r\n                <span class=\"hljs-comment\"># Change the position based on the speed (with % to create the loop)</span>\r\n                index = (car_index + speed) % number_of_cells\r\n                <span class=\"hljs-comment\"># Commit the change of position</span>\r\n                real_next_speeds[index] = speed\r\n        highway.append(real_next_speeds)\r\n\r\n    <span class=\"hljs-keyword\">return</span> highway\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Leoriem-code",
      "email": "73761711+Leoriem-code@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}