{
  "slug": "linear-regression-using-pandas",
  "name": "Linear Regression Using Pandas",
  "categories": [
    "machinelearning",
    "linearregression"
  ],
  "body": {
    "en": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>",
    "zh_Hans": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>",
    "ml": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>",
    "fr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>",
    "de": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>",
    "eo": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>",
    "es": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>",
    "it": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>",
    "hr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>",
    "uk": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h1 id=\"reliance---nse-stock-data\"><code>RELIANCE - NSE Stock Data</code></h1>\n<p>The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21</p>\n<p>The data can be used to forecast the stock prices of the future</p>\n<p>Its a timeseries data from the national stock exchange of India</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\"><code>Variable</code></th>\n<th align=\"center\"><code>Significance</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.</td>\n<td align=\"center\">Symbol</td>\n<td align=\"center\">Symbol of the listed stock on NSE</td>\n</tr>\n<tr>\n<td>2.</td>\n<td align=\"center\">Series</td>\n<td align=\"center\">To which series does the stock belong (Equity, Options Future)</td>\n</tr>\n<tr>\n<td>3.</td>\n<td align=\"center\">Date</td>\n<td align=\"center\">Date of the trade</td>\n</tr>\n<tr>\n<td>4.</td>\n<td align=\"center\">Prev Close</td>\n<td align=\"center\">Previous day closing value of the stock</td>\n</tr>\n<tr>\n<td>5.</td>\n<td align=\"center\">Open Price</td>\n<td align=\"center\">Current Day opening price of the stock</td>\n</tr>\n<tr>\n<td>6.</td>\n<td align=\"center\">High Price</td>\n<td align=\"center\">Highest price touched by the stock in current day <code>(Target Variable)</code></td>\n</tr>\n<tr>\n<td>7.</td>\n<td align=\"center\">Low Price</td>\n<td align=\"center\">lowest price touched by the stock in current day</td>\n</tr>\n<tr>\n<td>8.</td>\n<td align=\"center\">Last Price</td>\n<td align=\"center\">The price at which last trade occured in current day</td>\n</tr>\n<tr>\n<td>9.</td>\n<td align=\"center\">Close Price</td>\n<td align=\"center\">Current day closing price of the stock</td>\n</tr>\n<tr>\n<td>10.</td>\n<td align=\"center\">Average Price</td>\n<td align=\"center\">Average price of the day</td>\n</tr>\n<tr>\n<td>11.</td>\n<td align=\"center\">Total Traded Quantity</td>\n<td align=\"center\">Total number of stocks traded in current day</td>\n</tr>\n<tr>\n<td>12.</td>\n<td align=\"center\">Turnover</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>13.</td>\n<td align=\"center\">No. of Trades</td>\n<td align=\"center\">Current day's total number of trades</td>\n</tr>\n<tr>\n<td>14.</td>\n<td align=\"center\">Deliverabel Quantity</td>\n<td align=\"center\">Current day deliveable quantity to the traders</td>\n</tr>\n<tr>\n<td>15.</td>\n<td align=\"center\">% Dly Qt to Traded Qty</td>\n<td align=\"center\"><code>(Deliverable Quantity/Total Traded Quantity)*100</code></td>\n</tr>\n</tbody></table>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndata_path=<span class=\"hljs-string\">\"./data/RILO - Copy.csv\"</span>\ndata=pd.read_csv(data_path)\ndata</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)</span>\ndata.columns=[<span class=\"hljs-string\">\"_\"</span>.join(column.lower().split()) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> data.columns]\ndata.columns</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:</span>\ndata.describe()</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Checking for null values</span>\ndata.isnull().<span class=\"hljs-built_in\">sum</span>()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"as-shown-above-we-do-not-have-any-null-values-in-our-dataset-now-we-can-focus-on-feature-selection-and-model-building\">As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.</h3>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># By using the correlation method `.corr()` we can get the relationship between each continuous variable:</span>\ncorrelation=data.corr()\ncorrelation</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"matplotlib\"><code>Matplotlib</code></h3>\n<p>Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.</p>\n<p>One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.</p>\n<p>Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information</p>\n<h3 id=\"seaborn\"><code>Seaborn</code></h3>\n<p>Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Using seaborn and matplotlib to have a better visualization of correlation</span>\n<span class=\"hljs-keyword\">import</span> seaborn <span class=\"hljs-keyword\">as</span> sn\n<span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n\nplt.figure(figsize=(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>))\nsn.heatmap(correlation,annot=<span class=\"hljs-literal\">True</span>,linewidth=<span class=\"hljs-number\">1</span>,cmap=<span class=\"hljs-string\">'PuOr'</span>)\nplt.show()</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\nConsidering all the variables having <code>|corr|&gt;=0.5</code></p>\n<ul>\n<li>prev_close</li>\n<li>no._of_trades</li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li>turnover</li>\n<li>close_price</li>\n<li>%_dly_qt_to_traded_qty</li>\n<li>average_price</li>\n</ul>\n<p>Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">plt.figure(figsize=(<span class=\"hljs-number\">18</span>,<span class=\"hljs-number\">18</span>))\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>)\nplt.scatter(data.prev_close,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Previous Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>)\nplt.scatter(data[<span class=\"hljs-string\">'no._of_trades'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with No. of trades'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>)\nplt.scatter(data.open_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Opening Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>)\nplt.scatter(data.low_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Low Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>)\nplt.scatter(data.last_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Last Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>)\nplt.scatter(data.turnover,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Turnover'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">7</span>)\nplt.scatter(data.close_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Closing Price'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">8</span>)\nplt.scatter(data[<span class=\"hljs-string\">'%_dly_qt_to_traded_qty'</span>],data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Deliverable quantity'</span>)\n\nplt.subplot(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>)\nplt.scatter(data.average_price,data.high_price)\nplt.title(<span class=\"hljs-string\">'Relation with Average Price'</span>)\n\nplt.show</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><p>From above visualization, we are clear to choose features for the linear-regression model. Those are:</p>\n<ul>\n<li>prev_close</li>\n<li><del>no._of_trades</del></li>\n<li>open_price</li>\n<li>low_price</li>\n<li>last_price</li>\n<li><del>turnover</del></li>\n<li>close_price</li>\n<li><del>%_dly_qt_to_traded_qty</del></li>\n<li>average_price</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">features=[<span class=\"hljs-string\">'prev_close'</span>,<span class=\"hljs-string\">'open_price'</span>,<span class=\"hljs-string\">'low_price'</span>,<span class=\"hljs-string\">'last_price'</span>,<span class=\"hljs-string\">'close_price'</span>,<span class=\"hljs-string\">'average_price'</span>]\nX=data[features]\nX</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># Target variable</span>\ny=data.high_price\ny</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># split data into training and validation data, for both features and target</span>\n<span class=\"hljs-comment\"># The split is based on a random number generator. Supplying a numeric value to</span>\n<span class=\"hljs-comment\"># the random_state argument guarantees we get the same split every time we</span>\n<span class=\"hljs-comment\"># run this script.</span>\n\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\ntrain_X,val_X,train_y,val_y=train_test_split(X,y,test_size=<span class=\"hljs-number\">0.2</span>,random_state=<span class=\"hljs-number\">0</span>)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression\n<span class=\"hljs-comment\"># Define model</span>\nmodel=LinearRegression()\n<span class=\"hljs-comment\"># Fit model</span>\nmodel.fit(train_X,train_y)</code></pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\"># We use .score method to get an idea of quality of our model</span>\nmodel.score(val_X,val_y)</code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h3 id=\"model-validation\">Model Validation</h3>\n<p>There are many metrics for summarizing model quality, but we'll start with one called <code>Mean Absolute Error (also called MAE)</code>. Let's break down this metric starting with the last word, error.</p>\n<p><code>error=actual-predicted</code></p>\n<p>So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.</p>\n<p>With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as</p>\n<blockquote>\n<p>On average, our predictions are off by about X.</p>\n</blockquote>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error\n<span class=\"hljs-comment\"># Get predicted prices of stock on validation data</span>\npred_y=model.predict(val_X)\nmean_absolute_error(val_y,pred_y)</code></pre></div></div></div></div>"
  },
  "implementations": {
    "jupyter": {
      "dir": "machine_learning\\Linear_Regression\\linear_regression_using_pandas.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/machine_learning\\Linear_Regression\\linear_regression_using_pandas.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\r\n <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# `RELIANCE - NSE Stock Data`\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;The file contains RELIANCE - NSE Stock Data from 1-Jan-16 to 6-May-21\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;The data can be used to forecast the stock prices of the future\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;Its a timeseries data from the national stock exchange of India\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|| `Variable` | `Significance` |\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;| ------------- |:-------------:|:-------------:|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|1.|Symbol|Symbol of the listed stock on NSE|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|2.|Series|To which series does the stock belong (Equity, Options Future)|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|3.|Date|Date of the trade|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|4.|Prev Close|Previous day closing value of the stock|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|5.|Open Price|Current Day opening price of the stock|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|6.|High Price|Highest price touched by the stock in current day `(Target Variable)`|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|7.|Low Price|lowest price touched by the stock in current day|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|8.|Last Price|The price at which last trade occured in current day|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|9.|Close Price|Current day closing price of the stock|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|10.|Average Price|Average price of the day|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|11.|Total Traded Quantity|Total number of stocks traded in current day|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|12.|Turnover||\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|13.|No. of Trades|Current day&#x27;s total number of trades|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|14.|Deliverabel Quantity|Current day deliveable quantity to the traders|\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;|15.|% Dly Qt to Traded Qty|`(Deliverable Quantity/Total Traded Quantity)*100`|&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;import pandas as pd\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;data_path=\\&quot;./data/RILO - Copy.csv\\&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;data=pd.read_csv(data_path)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;data&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# Renaming the columns to have snake_case naming style. (Just as a convention and for convenience)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;data.columns=[\\&quot;_\\&quot;.join(column.lower().split()) for column in data.columns]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;data.columns&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# Using `.describe()` on an entire DataFrame we can get a summary of the distribution of continuous variables:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;data.describe()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# Checking for null values\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;data.isnull().sum()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;### As shown above, we do not have any null values in our dataset. Now we can focus on feature selection and model building.&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# By using the correlation method `.corr()` we can get the relationship between each continuous variable:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;correlation=data.corr()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;correlation&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;### `Matplotlib`\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;Matplotlib is a visualization library in Python for 2D plots of arrays. Matplotlib is a multi-platform data visualization library built on NumPy arrays and designed to work with the broader SciPy stack.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;One of the greatest benefits of visualization is that it allows us visual access to huge amounts of data in easily digestible visuals. Matplotlib consists of several plots like line, bar, scatter, histogram etc.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;Matplotlib comes with a wide variety of plots. Plots helps to understand trends, patterns, and to make correlations. Theyâ€™re typically instruments for reasoning about quantitative information\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;### `Seaborn`\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# Using seaborn and matplotlib to have a better visualization of correlation\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;import seaborn as sn\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;import matplotlib.pyplot as plt\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.figure(figsize=(10,8))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;sn.heatmap(correlation,annot=True,linewidth=1,cmap=&#x27;PuOr&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.show()&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;From the above correlation matrix, we get a general idea of which variables can be treated as features to build our model. Lets list them out\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;Considering all the variables having `|corr|&gt;=0.5`\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- prev_close\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- no._of_trades\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- open_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- low_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- last_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- turnover\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- close_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- %_dly_qt_to_traded_qty\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- average_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;Now that we have a rough idea about our features, lets confirm their behaviour aginst target variable using scatter plots.&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;plt.figure(figsize=(18,18))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.subplot(3,3,1)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.scatter(data.prev_close,data.high_price)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Relation with Previous Closing Price&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.subplot(3,3,2)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.scatter(data[&#x27;no._of_trades&#x27;],data.high_price)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Relation with No. of trades&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.subplot(3,3,3)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.scatter(data.open_price,data.high_price)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Relation with Opening Price&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.subplot(3,3,4)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.scatter(data.low_price,data.high_price)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Relation with Low Price&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.subplot(3,3,5)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.scatter(data.last_price,data.high_price)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Relation with Last Price&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.subplot(3,3,6)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.scatter(data.turnover,data.high_price)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Relation with Turnover&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.subplot(3,3,7)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.scatter(data.close_price,data.high_price)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Relation with Closing Price&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.subplot(3,3,8)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.scatter(data[&#x27;%_dly_qt_to_traded_qty&#x27;],data.high_price)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Relation with Deliverable quantity&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.subplot(3,3,9)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.scatter(data.average_price,data.high_price)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.title(&#x27;Relation with Average Price&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;plt.show&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;From above visualization, we are clear to choose features for the linear-regression model. Those are:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- prev_close\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- ~~no._of_trades~~\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- open_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- low_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- last_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- ~~turnover~~\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- close_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- ~~%_dly_qt_to_traded_qty~~\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;- average_price\\n&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;features=[&#x27;prev_close&#x27;,&#x27;open_price&#x27;,&#x27;low_price&#x27;,&#x27;last_price&#x27;,&#x27;close_price&#x27;,&#x27;average_price&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;X=data[features]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;X&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# Target variable\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;y=data.high_price\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;y&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# split data into training and validation data, for both features and target\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# The split is based on a random number generator. Supplying a numeric value to\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# the random_state argument guarantees we get the same split every time we\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# run this script.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;from sklearn.model_selection import train_test_split\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;train_X,val_X,train_y,val_y=train_test_split(X,y,test_size=0.2,random_state=0)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;from sklearn.linear_model import LinearRegression\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# Define model\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;model=LinearRegression()\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# Fit model\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;model.fit(train_X,train_y)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;# We use .score method to get an idea of quality of our model\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;model.score(val_X,val_y)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;### Model Validation\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;There are many metrics for summarizing model quality, but we&#x27;ll start with one called `Mean Absolute Error (also called MAE)`. Let&#x27;s break down this metric starting with the last word, error.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;`error=actual-predicted`\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;So, if a stock cost Rs.4000 at a timeframe, and we predicted it would cost Rs.3980 the error is Rs.20.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;With the MAE metric, we take the absolute value of each error. This converts each error to a positive number. We then take the average of those absolute errors. This is our measure of model quality. In plain English, it can be said as\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;&gt; On average, our predictions are off by about X.\\n&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\r\n    <span class=\"hljs-string\">&quot;from sklearn.metrics import mean_absolute_error\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;# Get predicted prices of stock on validation data\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;pred_y=model.predict(val_X)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-string\">&quot;mean_absolute_error(val_y,pred_y)&quot;</span>\r\n   <span class=\"hljs-punctuation\">]</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-attr\">&quot;interpreter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;hash&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;e7370f93d1d0cde622a1f8e1c04877d8463912d04d973331ad4851f04de6915a&quot;</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3.9.7 64-bit&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;language_info&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n   <span class=\"hljs-attr\">&quot;codemirror_mode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n    <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\r\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;file_extension&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;.py&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;mimetype&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text/x-python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;nbconvert_exporter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;pygments_lexer&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython3&quot;</span><span class=\"hljs-punctuation\">,</span>\r\n   <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3.9.7&quot;</span>\r\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n  <span class=\"hljs-attr\">&quot;orig_nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span>\r\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\r\n <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Raj",
      "email": "rajpansuriya40@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}