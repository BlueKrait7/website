{
  "slug": "columnar-transposition-cipher",
  "name": "Columnar Transposition Cipher",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\ciphers\\ColumnarTranspositionCipher.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\ciphers\\ColumnarTranspositionCipher.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.ciphers;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Columnar Transposition Cipher Encryption and Decryption.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=&quot;https://github.com/freitzzz&quot;&gt;freitzzz&lt;/a&gt;\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ColumnarTranspositionCipher</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String keyword;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[][] table;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String abecedarium;\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ABECEDARIUM</span>\r\n            <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFG&quot;</span> + <span class=\"hljs-string\">&quot;HIJKLMNOPQRSTUVWXYZ0123456789,.;:-@&quot;</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ENCRYPTION_FIELD</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;≈&quot;</span>;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">ENCRYPTION_FIELD_CHAR</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;≈&#x27;</span>;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Encrypts a certain String with the Columnar Transposition Cipher Rule\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> word Word being encrypted\r\n     * <span class=\"hljs-doctag\">@param</span> keyword String with keyword being used\r\n     * <span class=\"hljs-doctag\">@return</span> a String with the word encrypted by the Columnar Transposition\r\n     * Cipher Rule\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encrpyter</span><span class=\"hljs-params\">(String word, String keyword)</span> {\r\n        ColumnarTranspositionCipher.keyword = keyword;\r\n        abecedariumBuilder(<span class=\"hljs-number\">500</span>);\r\n        table = tableBuilder(word);\r\n        Object[][] sortedTable = sortTable(table);\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">wordEncrypted</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sortedTable[i].length; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; sortedTable.length; j++) {\r\n                wordEncrypted.append(sortedTable[j][i]);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> wordEncrypted.toString();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Encrypts a certain String with the Columnar Transposition Cipher Rule\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> word Word being encrypted\r\n     * <span class=\"hljs-doctag\">@param</span> keyword String with keyword being used\r\n     * <span class=\"hljs-doctag\">@param</span> abecedarium String with the abecedarium being used. null for\r\n     * default one\r\n     * <span class=\"hljs-doctag\">@return</span> a String with the word encrypted by the Columnar Transposition\r\n     * Cipher Rule\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encrpyter</span><span class=\"hljs-params\">(String word, String keyword, String abecedarium)</span> {\r\n        ColumnarTranspositionCipher.keyword = keyword;\r\n        ColumnarTranspositionCipher.abecedarium = Objects.requireNonNullElse(abecedarium, ABECEDARIUM);\r\n        table = tableBuilder(word);\r\n        Object[][] sortedTable = sortTable(table);\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">wordEncrypted</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sortedTable[<span class=\"hljs-number\">0</span>].length; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; sortedTable.length; j++) {\r\n                wordEncrypted.append(sortedTable[j][i]);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> wordEncrypted.toString();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Decrypts a certain encrypted String with the Columnar Transposition\r\n     * Cipher Rule\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> a String decrypted with the word encrypted by the Columnar\r\n     * Transposition Cipher Rule\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">decrypter</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">wordDecrypted</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; table.length; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (Object item : table[i]) {\r\n                wordDecrypted.append(item);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> wordDecrypted.toString().replaceAll(ENCRYPTION_FIELD, <span class=\"hljs-string\">&quot;&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Builds a table with the word to be encrypted in rows by the Columnar\r\n     * Transposition Cipher Rule\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> An Object[][] with the word to be encrypted filled in rows and\r\n     * columns\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[][] tableBuilder(String word) {\r\n        Object[][] table = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[numberOfRows(word) + <span class=\"hljs-number\">1</span>][keyword.length()];\r\n        <span class=\"hljs-type\">char</span>[] wordInChards = word.toCharArray();\r\n        <span class=\"hljs-comment\">// Fils in the respective numbers</span>\r\n        table[<span class=\"hljs-number\">0</span>] = findElements();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">charElement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; table.length; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; table[i].length; j++) {\r\n                <span class=\"hljs-keyword\">if</span> (charElement &lt; wordInChards.length) {\r\n                    table[i][j] = wordInChards[charElement];\r\n                    charElement++;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    table[i][j] = ENCRYPTION_FIELD_CHAR;\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> table;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Determines the number of rows the table should have regarding the\r\n     * Columnar Transposition Cipher Rule\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> an int with the number of rows that the table should have in\r\n     * order to respect the Columnar Transposition Cipher Rule.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfRows</span><span class=\"hljs-params\">(String word)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (word.length() / keyword.length() &gt; word.length() / keyword.length()) {\r\n            <span class=\"hljs-keyword\">return</span> (word.length() / keyword.length()) + <span class=\"hljs-number\">1</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> word.length() / keyword.length();\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> charValues\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[] findElements() {\r\n        Object[] charValues = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[keyword.length()];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; charValues.length; i++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">charValueIndex</span> <span class=\"hljs-operator\">=</span> abecedarium.indexOf(keyword.charAt(i));\r\n            charValues[i] = charValueIndex &gt; -<span class=\"hljs-number\">1</span> ? charValueIndex : <span class=\"hljs-literal\">null</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> charValues;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> tableSorted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[][] sortTable(Object[][] table) {\r\n        Object[][] tableSorted = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[table.length][table[<span class=\"hljs-number\">0</span>].length];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; tableSorted.length; i++) {\r\n            System.arraycopy(table[i], <span class=\"hljs-number\">0</span>, tableSorted[i], <span class=\"hljs-number\">0</span>, tableSorted[i].length);\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; tableSorted[<span class=\"hljs-number\">0</span>].length; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i + <span class=\"hljs-number\">1</span>; j &lt; tableSorted[<span class=\"hljs-number\">0</span>].length; j++) {\r\n                <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-type\">int</span>) tableSorted[<span class=\"hljs-number\">0</span>][i] &gt; (<span class=\"hljs-type\">int</span>) table[<span class=\"hljs-number\">0</span>][j]) {\r\n                    Object[] column = getColumn(tableSorted, tableSorted.length, i);\r\n                    switchColumns(tableSorted, j, i, column);\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> tableSorted;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> columnArray\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[] getColumn(Object[][] table, <span class=\"hljs-type\">int</span> rows, <span class=\"hljs-type\">int</span> column) {\r\n        Object[] columnArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[rows];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; rows; i++) {\r\n            columnArray[i] = table[i][column];\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> columnArray;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">switchColumns</span><span class=\"hljs-params\">(\r\n            Object[][] table, <span class=\"hljs-type\">int</span> firstColumnIndex, <span class=\"hljs-type\">int</span> secondColumnIndex, Object[] columnToSwitch)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; table.length; i++) {\r\n            table[i][secondColumnIndex] = table[i][firstColumnIndex];\r\n            table[i][firstColumnIndex] = columnToSwitch[i];\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Creates an abecedarium with a specified ascii inded\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> value Number of characters being used based on the ASCII Table\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">abecedariumBuilder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> {\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; value; i++) {\r\n            t.append((<span class=\"hljs-type\">char</span>) i);\r\n        }\r\n        abecedarium = t.toString();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">showTable</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">for</span> (Object[] table1 : table) {\r\n            <span class=\"hljs-keyword\">for</span> (Object item : table1) {\r\n                System.out.print(item + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">keywordForExample</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;asd215&quot;</span>;\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">wordBeingEncrypted</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;This is a test of the Columnar Transposition Cipher&quot;</span>;\r\n        System.out.println(<span class=\"hljs-string\">&quot;### Example of Columnar Transposition Cipher ###\\n&quot;</span>);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Word being encryped -&gt;&gt;&gt; &quot;</span> + wordBeingEncrypted);\r\n        System.out.println(\r\n                <span class=\"hljs-string\">&quot;Word encrypted -&gt;&gt;&gt; &quot;</span>\r\n                + ColumnarTranspositionCipher.encrpyter(wordBeingEncrypted, keywordForExample));\r\n        System.out.println(<span class=\"hljs-string\">&quot;Word decryped -&gt;&gt;&gt; &quot;</span> + ColumnarTranspositionCipher.decrypter());\r\n        System.out.println(<span class=\"hljs-string\">&quot;\\n### Encrypted Table ###&quot;</span>);\r\n        showTable();\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "DESKTOP-0VAEMFL\\joaom",
      "email": "1160907@isep.ipp.pt",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}