{
  "slug": "multikey-quick-sort",
  "name": "Multikey Quick Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "sorting\\multikey_quick_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\multikey_quick_sort.c",
      "code": "<span class=\"hljs-comment\">/* demo.c -- Implementations of multikey quicksort and ternary search trees\r\n   Usage\r\n    demo                  Run basic timings on /usr/dict/words\r\n    demo &lt;file&gt;           Run basic timings on &lt;file&gt;\r\n    demo &lt;file&gt; trysearch Interactive pm and nn search on &lt;file&gt;\r\n    demo &lt;file&gt; nncost    Run near neigbhor expers on &lt;file&gt;\r\n    demo &lt;file&gt; pmcost    Interactive partial match expers on &lt;file&gt;\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">// MULTIKEY QUICKSORT</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> min</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> min(a, b) ((a) &lt;= (b) ? (a) : (b))</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> swap(a, b)      \\</span>\r\n    {                   \\\r\n        <span class=\"hljs-type\">char</span> *t = x[a]; \\\r\n        x[a] = x[b];    \\\r\n        x[b] = t;       \\\r\n    }\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> i2c(i) x[i][depth]</span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">vecswap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">char</span> *x[])</span>\r\n{\r\n    <span class=\"hljs-keyword\">while</span> (n-- &gt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        swap(i, j);\r\n        i++;\r\n        j++;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">ssort1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *x[], <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> depth)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> a, b, c, d, r, v;\r\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    a = rand() % n;\r\n    swap(<span class=\"hljs-number\">0</span>, a);\r\n    v = i2c(<span class=\"hljs-number\">0</span>);\r\n    a = b = <span class=\"hljs-number\">1</span>;\r\n    c = d = n - <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">for</span> (;;)\r\n    {\r\n        <span class=\"hljs-keyword\">while</span> (b &lt;= c &amp;&amp; (r = i2c(b) - v) &lt;= <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                swap(a, b);\r\n                a++;\r\n            }\r\n            b++;\r\n        }\r\n        <span class=\"hljs-keyword\">while</span> (b &lt;= c &amp;&amp; (r = i2c(c) - v) &gt;= <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                swap(c, d);\r\n                d--;\r\n            }\r\n            c--;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (b &gt; c)\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        swap(b, c);\r\n        b++;\r\n        c--;\r\n    }\r\n    r = min(a, b - a);\r\n    vecswap(<span class=\"hljs-number\">0</span>, b - r, r, x);\r\n    r = min(d - c, n - d - <span class=\"hljs-number\">1</span>);\r\n    vecswap(b, n - r, r, x);\r\n    r = b - a;\r\n    ssort1(x, r, depth);\r\n    <span class=\"hljs-keyword\">if</span> (i2c(r) != <span class=\"hljs-number\">0</span>)\r\n        ssort1(x + r, a + n - d - <span class=\"hljs-number\">1</span>, depth + <span class=\"hljs-number\">1</span>);\r\n    r = d - c;\r\n    ssort1(x + n - r, r, depth);\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">ssort1main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *x[], <span class=\"hljs-type\">int</span> n)</span> { ssort1(x, n, <span class=\"hljs-number\">0</span>); }\r\n\r\n<span class=\"hljs-comment\">// ssort2 -- Faster Version of Multikey Quicksort</span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">vecswap2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> **a, <span class=\"hljs-type\">char</span> **b, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-keyword\">while</span> (n-- &gt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-type\">char</span> *t = *a;\r\n        *a++ = *b;\r\n        *b++ = t;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> swap2(a, b)  \\</span>\r\n    {                \\\r\n        t = *(a);    \\\r\n        *(a) = *(b); \\\r\n        *(b) = t;    \\\r\n    }\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ptr2char(i) (*(*(i) + depth))</span>\r\n\r\n<span class=\"hljs-type\">char</span> **<span class=\"hljs-title function_\">med3func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> **a, <span class=\"hljs-type\">char</span> **b, <span class=\"hljs-type\">char</span> **c, <span class=\"hljs-type\">int</span> depth)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> va, vb, vc;\r\n    <span class=\"hljs-keyword\">if</span> ((va = ptr2char(a)) == (vb = ptr2char(b)))\r\n        <span class=\"hljs-keyword\">return</span> a;\r\n    <span class=\"hljs-keyword\">if</span> ((vc = ptr2char(c)) == va || vc == vb)\r\n        <span class=\"hljs-keyword\">return</span> c;\r\n    <span class=\"hljs-keyword\">return</span> va &lt; vb ? (vb &lt; vc ? b : (va &lt; vc ? c : a))\r\n                   : (vb &gt; vc ? b : (va &lt; vc ? a : c));\r\n}\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> med3(a, b, c) med3func(a, b, c, depth)</span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">inssort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> **a, <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> d)</span>\r\n{\r\n    <span class=\"hljs-type\">char</span> **pi, **pj, *s, *t;\r\n    <span class=\"hljs-keyword\">for</span> (pi = a + <span class=\"hljs-number\">1</span>; --n &gt; <span class=\"hljs-number\">0</span>; pi++)\r\n        <span class=\"hljs-keyword\">for</span> (pj = pi; pj &gt; a; pj--)\r\n        {\r\n            <span class=\"hljs-comment\">// Inline strcmp: break if *(pj-1) &lt;= *pj</span>\r\n            <span class=\"hljs-keyword\">for</span> (s = *(pj - <span class=\"hljs-number\">1</span>) + d, t = *pj + d; *s == *t &amp;&amp; *s != <span class=\"hljs-number\">0</span>; s++, t++)\r\n                ;\r\n            <span class=\"hljs-keyword\">if</span> (*s &lt;= *t)\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            swap2(pj, pj - <span class=\"hljs-number\">1</span>);\r\n        }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">ssort2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> **a, <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> depth)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> d, r, partval;\r\n    <span class=\"hljs-type\">char</span> **pa, **pb, **pc, **pd, **pl, **pm, **pn, *t;\r\n    <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">10</span>)\r\n    {\r\n        inssort(a, n, depth);\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    pl = a;\r\n    pm = a + (n / <span class=\"hljs-number\">2</span>);\r\n    pn = a + (n - <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">30</span>)\r\n    {  <span class=\"hljs-comment\">// On big arrays, pseudomedian of 9</span>\r\n        d = (n / <span class=\"hljs-number\">8</span>);\r\n        pl = med3(pl, pl + d, pl + <span class=\"hljs-number\">2</span> * d);\r\n        pm = med3(pm - d, pm, pm + d);\r\n        pn = med3(pn - <span class=\"hljs-number\">2</span> * d, pn - d, pn);\r\n    }\r\n    pm = med3(pl, pm, pn);\r\n    swap2(a, pm);\r\n    partval = ptr2char(a);\r\n    pa = pb = a + <span class=\"hljs-number\">1</span>;\r\n    pc = pd = a + n - <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">for</span> (;;)\r\n    {\r\n        <span class=\"hljs-keyword\">while</span> (pb &lt;= pc &amp;&amp; (r = ptr2char(pb) - partval) &lt;= <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                swap2(pa, pb);\r\n                pa++;\r\n            }\r\n            pb++;\r\n        }\r\n        <span class=\"hljs-keyword\">while</span> (pb &lt;= pc &amp;&amp; (r = ptr2char(pc) - partval) &gt;= <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                swap2(pc, pd);\r\n                pd--;\r\n            }\r\n            pc--;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (pb &gt; pc)\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        swap2(pb, pc);\r\n        pb++;\r\n        pc--;\r\n    }\r\n    pn = a + n;\r\n    r = min(pa - a, pb - pa);\r\n    vecswap2(a, pb - r, r);\r\n    r = min(pd - pc, pn - pd - <span class=\"hljs-number\">1</span>);\r\n    vecswap2(pb, pn - r, r);\r\n    <span class=\"hljs-keyword\">if</span> ((r = pb - pa) &gt; <span class=\"hljs-number\">1</span>)\r\n        ssort2(a, r, depth);\r\n    <span class=\"hljs-keyword\">if</span> (ptr2char(a + r) != <span class=\"hljs-number\">0</span>)\r\n        ssort2(a + r, pa - a + pn - pd - <span class=\"hljs-number\">1</span>, depth + <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-keyword\">if</span> ((r = pd - pc) &gt; <span class=\"hljs-number\">1</span>)\r\n        ssort2(a + n - r, r, depth);\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">ssort2main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> **a, <span class=\"hljs-type\">int</span> n)</span> { ssort2(a, n, <span class=\"hljs-number\">0</span>); }\r\n\r\n<span class=\"hljs-comment\">// TERNARY SEARCH TREE ALGS</span>\r\n\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tnode</span> *<span class=\"hljs-title\">Tptr</span>;</span>\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tnode</span>\r\n{</span>\r\n    <span class=\"hljs-type\">char</span> splitchar;\r\n    Tptr lokid, eqkid, hikid;\r\n} Tnode;\r\nTptr root;\r\n\r\n<span class=\"hljs-comment\">// Insert 1 -- Simple Insertion Algorithm</span>\r\n\r\nTptr <span class=\"hljs-title function_\">insert1</span><span class=\"hljs-params\">(Tptr p, <span class=\"hljs-type\">char</span> *s)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (p == <span class=\"hljs-number\">0</span>)\r\n    {\r\n        p = (Tptr)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(Tnode));\r\n        p-&gt;splitchar = *s;\r\n        p-&gt;lokid = p-&gt;eqkid = p-&gt;hikid = <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (*s &lt; p-&gt;splitchar)\r\n        p-&gt;lokid = insert1(p-&gt;lokid, s);\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*s == p-&gt;splitchar)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (*s != <span class=\"hljs-number\">0</span>)\r\n            p-&gt;eqkid = insert1(p-&gt;eqkid, ++s);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n        p-&gt;hikid = insert1(p-&gt;hikid, s);\r\n    <span class=\"hljs-keyword\">return</span> p;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">cleanup1</span><span class=\"hljs-params\">(Tptr p)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (p)\r\n    {\r\n        cleanup1(p-&gt;lokid);\r\n        cleanup1(p-&gt;eqkid);\r\n        cleanup1(p-&gt;hikid);\r\n        <span class=\"hljs-built_in\">free</span>(p);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Insert 2 -- Faster version of Insert</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> BUFSIZE 1000</span>\r\nTptr buffer;\r\n<span class=\"hljs-type\">int</span> bufn, freen;\r\n<span class=\"hljs-type\">void</span> *freearr[<span class=\"hljs-number\">10000</span>];\r\n<span class=\"hljs-type\">int</span> storestring = <span class=\"hljs-number\">0</span>;\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insert2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> d;\r\n    <span class=\"hljs-type\">char</span> *instr = s;\r\n\r\n    Tptr pp, *p;\r\n    p = &amp;root;\r\n    pp = *p;\r\n    <span class=\"hljs-keyword\">while</span> (pp == *p)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> ((d = *s - pp-&gt;splitchar) == <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (*s++ == <span class=\"hljs-number\">0</span>)\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            p = &amp;(pp-&gt;eqkid);\r\n        }\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (d &lt; <span class=\"hljs-number\">0</span>)\r\n            p = &amp;(pp-&gt;lokid);\r\n        <span class=\"hljs-keyword\">else</span>\r\n            p = &amp;(pp-&gt;hikid);\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> (;;)\r\n    {\r\n        <span class=\"hljs-comment\">// *p = (Tptr) malloc(sizeof(Tnode));</span>\r\n        <span class=\"hljs-keyword\">if</span> (bufn-- == <span class=\"hljs-number\">0</span>)\r\n        {\r\n            buffer = (Tptr)<span class=\"hljs-built_in\">malloc</span>(BUFSIZE * <span class=\"hljs-keyword\">sizeof</span>(Tnode));\r\n            freearr[freen++] = (<span class=\"hljs-type\">void</span> *)buffer;\r\n            bufn = BUFSIZE - <span class=\"hljs-number\">1</span>;\r\n        }\r\n        *p = buffer++;\r\n        pp = *p;\r\n        pp-&gt;splitchar = *s;\r\n        pp-&gt;lokid = pp-&gt;eqkid = pp-&gt;hikid = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">if</span> (*s++ == <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (storestring)\r\n                pp-&gt;eqkid = (Tptr)instr;\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        p = &amp;(pp-&gt;eqkid);\r\n    }\r\n}\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">cleanup2</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; freen; i++) <span class=\"hljs-built_in\">free</span>(freearr[i]);\r\n}\r\n\r\n<span class=\"hljs-comment\">// Search Algorithms</span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">search1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span>\r\n{\r\n    Tptr p;\r\n    p = root;\r\n    <span class=\"hljs-keyword\">while</span> (p)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (*s &lt; p-&gt;splitchar)\r\n            p = p-&gt;lokid;\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*s == p-&gt;splitchar)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (*s++ == <span class=\"hljs-number\">0</span>)\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n            p = p-&gt;eqkid;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n            p = p-&gt;hikid;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">search2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> d, sc;\r\n    Tptr p;\r\n    sc = *s;\r\n    p = root;\r\n    <span class=\"hljs-keyword\">while</span> (p)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> ((d = sc - p-&gt;splitchar) == <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (sc == <span class=\"hljs-number\">0</span>)\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n            sc = *++s;\r\n            p = p-&gt;eqkid;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (d &lt; <span class=\"hljs-number\">0</span>)\r\n            p = p-&gt;lokid;\r\n        <span class=\"hljs-keyword\">else</span>\r\n            p = p-&gt;hikid;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Advanced searching: Partial match, near words</span>\r\n\r\n<span class=\"hljs-type\">int</span> nodecnt;\r\n<span class=\"hljs-type\">char</span> *srcharr[<span class=\"hljs-number\">100000</span>];\r\n<span class=\"hljs-type\">int</span> srchtop;\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pmsearch</span><span class=\"hljs-params\">(Tptr p, <span class=\"hljs-type\">char</span> *s)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (!p)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    nodecnt++;\r\n    <span class=\"hljs-keyword\">if</span> (*s == <span class=\"hljs-string\">&#x27;.&#x27;</span> || *s &lt; p-&gt;splitchar)\r\n        pmsearch(p-&gt;lokid, s);\r\n    <span class=\"hljs-keyword\">if</span> (*s == <span class=\"hljs-string\">&#x27;.&#x27;</span> || *s == p-&gt;splitchar)\r\n        <span class=\"hljs-keyword\">if</span> (p-&gt;splitchar &amp;&amp; *s)\r\n            pmsearch(p-&gt;eqkid, s + <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-keyword\">if</span> (*s == <span class=\"hljs-number\">0</span> &amp;&amp; p-&gt;splitchar == <span class=\"hljs-number\">0</span>)\r\n        srcharr[srchtop++] = (<span class=\"hljs-type\">char</span> *)p-&gt;eqkid;\r\n    <span class=\"hljs-keyword\">if</span> (*s == <span class=\"hljs-string\">&#x27;.&#x27;</span> || *s &gt; p-&gt;splitchar)\r\n        pmsearch(p-&gt;hikid, s);\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">nearsearch</span><span class=\"hljs-params\">(Tptr p, <span class=\"hljs-type\">char</span> *s, <span class=\"hljs-type\">int</span> d)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (!p || d &lt; <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    nodecnt++;\r\n    <span class=\"hljs-keyword\">if</span> (d &gt; <span class=\"hljs-number\">0</span> || *s &lt; p-&gt;splitchar)\r\n        nearsearch(p-&gt;lokid, s, d);\r\n    <span class=\"hljs-keyword\">if</span> (p-&gt;splitchar == <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">strlen</span>(s) &lt;= d)\r\n            srcharr[srchtop++] = (<span class=\"hljs-type\">char</span> *)p-&gt;eqkid;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n        nearsearch(p-&gt;eqkid, *s ? s + <span class=\"hljs-number\">1</span> : s, (*s == p-&gt;splitchar) ? d : d - <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-keyword\">if</span> (d &gt; <span class=\"hljs-number\">0</span> || *s &gt; p-&gt;splitchar)\r\n        nearsearch(p-&gt;hikid, s, d);\r\n}\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NUMBER_OF_STRING 3</span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\r\n{\r\n    <span class=\"hljs-type\">char</span> *arr[NUMBER_OF_STRING] = {<span class=\"hljs-string\">&quot;apple&quot;</span>, <span class=\"hljs-string\">&quot;cat&quot;</span>, <span class=\"hljs-string\">&quot;boy&quot;</span>};\r\n\r\n    ssort1main(arr, NUMBER_OF_STRING);\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; NUMBER_OF_STRING; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s &quot;</span>, arr[i]);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "Jian",
      "email": "jianloongliew@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}