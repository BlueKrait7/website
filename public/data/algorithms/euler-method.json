{
  "slug": "euler-method",
  "name": "Euler Method",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\euler_method.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\euler_method.py",
      "code": "<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">explicit_euler</span>(<span class=\"hljs-params\">\r\n    ode_func: <span class=\"hljs-type\">Callable</span>, y0: <span class=\"hljs-built_in\">float</span>, x0: <span class=\"hljs-built_in\">float</span>, step_size: <span class=\"hljs-built_in\">float</span>, x_end: <span class=\"hljs-built_in\">float</span>\r\n</span>) -&gt; np.ndarray:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Calculate numeric solution at each step to an ODE using Euler&#x27;s Method\r\n\r\n    For reference to Euler&#x27;s method refer to https://en.wikipedia.org/wiki/Euler_method.\r\n\r\n    Args:\r\n        ode_func (Callable):  The ordinary differential equation\r\n            as a function of x and y.\r\n        y0 (float): The initial value for y.\r\n        x0 (float): The initial value for x.\r\n        step_size (float): The increment value for x.\r\n        x_end (float): The final value of x to be calculated.\r\n\r\n    Returns:\r\n        np.ndarray: Solution of y for every step in x.\r\n\r\n    &gt;&gt;&gt; # the exact solution is math.exp(x)\r\n    &gt;&gt;&gt; def f(x, y):\r\n    ...     return y\r\n    &gt;&gt;&gt; y0 = 1\r\n    &gt;&gt;&gt; y = explicit_euler(f, y0, 0.0, 0.01, 5)\r\n    &gt;&gt;&gt; y[-1]\r\n    144.77277243257308\r\n    &quot;&quot;&quot;</span>\r\n    N = <span class=\"hljs-built_in\">int</span>(np.ceil((x_end - x0) / step_size))\r\n    y = np.zeros((N + <span class=\"hljs-number\">1</span>,))\r\n    y[<span class=\"hljs-number\">0</span>] = y0\r\n    x = x0\r\n\r\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N):\r\n        y[k + <span class=\"hljs-number\">1</span>] = y[k] + step_size * ode_func(x, y[k])\r\n        x += step_size\r\n\r\n    <span class=\"hljs-keyword\">return</span> y\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Maths\\test\\EulerMethod.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\EulerMethod.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { eulerFull, eulerStep } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../EulerMethod&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;eulerStep&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should calculate the next y value correctly&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">eulerStep</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) { <span class=\"hljs-keyword\">return</span> x })).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">eulerStep</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) { <span class=\"hljs-keyword\">return</span> x * x })).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5</span>)\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;eulerFull&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return all the points found&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">eulerFull</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) { <span class=\"hljs-keyword\">return</span> x }))\r\n      .<span class=\"hljs-title function_\">toEqual</span>([{ <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> }, { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span> }, { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">3</span> }])\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">eulerFull</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) { <span class=\"hljs-keyword\">return</span> x * x }))\r\n      .<span class=\"hljs-title function_\">toEqual</span>([{ <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">3.5</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">5.5</span> }, { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">11.625</span> }])\r\n  })\r\n})\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\EulerMethod.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\EulerMethod.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.function.BiFunction;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * In mathematics and computational science, the Euler method (also called\r\n * forward Euler method) is a first-order numerical procedure for solving\r\n * ordinary differential equations (ODEs) with a given initial value. It is the\r\n * most basic explicit method for numerical integration of ordinary differential\r\n * equations. The method proceeds in a series of steps. At each step the y-value\r\n * is calculated by evaluating the differential equation at the previous step,\r\n * multiplying the result with the step-size and adding it to the last y-value:\r\n * y_n+1 = y_n + stepSize * f(x_n, y_n). (description adapted from\r\n * https://en.wikipedia.org/wiki/Euler_method ) (see also:\r\n * https://www.geeksforgeeks.org/euler-method-solving-differential-equation/ )\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EulerMethod</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Illustrates how the algorithm is used in 3 examples and prints the\r\n     * results to the console.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        System.out.println(<span class=\"hljs-string\">&quot;example 1:&quot;</span>);\r\n        BiFunction&lt;Double, Double, Double&gt; exampleEquation1 = (x, y) -&gt; x;\r\n        ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; points1 = eulerFull(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0</span>, exampleEquation1);\r\n        <span class=\"hljs-keyword\">assert</span> points1.get(points1.size() - <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">7.800000000000003</span>;\r\n        points1.forEach(\r\n                point -&gt; System.out.println(String.format(<span class=\"hljs-string\">&quot;x: %1$f; y: %2$f&quot;</span>, point[<span class=\"hljs-number\">0</span>], point[<span class=\"hljs-number\">1</span>])));\r\n\r\n        <span class=\"hljs-comment\">// example from https://en.wikipedia.org/wiki/Euler_method</span>\r\n        System.out.println(<span class=\"hljs-string\">&quot;\\n\\nexample 2:&quot;</span>);\r\n        BiFunction&lt;Double, Double, Double&gt; exampleEquation2 = (x, y) -&gt; y;\r\n        ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; points2 = eulerFull(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">1</span>, exampleEquation2);\r\n        <span class=\"hljs-keyword\">assert</span> points2.get(points2.size() - <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">45.25925556817596</span>;\r\n        points2.forEach(\r\n                point -&gt; System.out.println(String.format(<span class=\"hljs-string\">&quot;x: %1$f; y: %2$f&quot;</span>, point[<span class=\"hljs-number\">0</span>], point[<span class=\"hljs-number\">1</span>])));\r\n\r\n        <span class=\"hljs-comment\">// example from https://www.geeksforgeeks.org/euler-method-solving-differential-equation/</span>\r\n        System.out.println(<span class=\"hljs-string\">&quot;\\n\\nexample 3:&quot;</span>);\r\n        BiFunction&lt;Double, Double, Double&gt; exampleEquation3 = (x, y) -&gt; x + y + x * y;\r\n        ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; points3 = eulerFull(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.025</span>, <span class=\"hljs-number\">1</span>, exampleEquation3);\r\n        <span class=\"hljs-keyword\">assert</span> points3.get(points3.size() - <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">1.1116729841674804</span>;\r\n        points3.forEach(\r\n                point -&gt; System.out.println(String.format(<span class=\"hljs-string\">&quot;x: %1$f; y: %2$f&quot;</span>, point[<span class=\"hljs-number\">0</span>], point[<span class=\"hljs-number\">1</span>])));\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * calculates the next y-value based on the current value of x, y and the\r\n     * stepSize the console.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> xCurrent Current x-value.\r\n     * <span class=\"hljs-doctag\">@param</span> stepSize Step-size on the x-axis.\r\n     * <span class=\"hljs-doctag\">@param</span> yCurrent Current y-value.\r\n     * <span class=\"hljs-doctag\">@param</span> differentialEquation The differential equation to be solved.\r\n     * <span class=\"hljs-doctag\">@return</span> The next y-value.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">eulerStep</span><span class=\"hljs-params\">(\r\n            <span class=\"hljs-type\">double</span> xCurrent,\r\n            <span class=\"hljs-type\">double</span> stepSize,\r\n            <span class=\"hljs-type\">double</span> yCurrent,\r\n            BiFunction&lt;Double, Double, Double&gt; differentialEquation)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (stepSize &lt;= <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;stepSize should be greater than zero&quot;</span>);\r\n        }\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">yNext</span> <span class=\"hljs-operator\">=</span> yCurrent + stepSize * differentialEquation.apply(xCurrent, yCurrent);\r\n        <span class=\"hljs-keyword\">return</span> yNext;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Loops through all the steps until xEnd is reached, adds a point for each\r\n     * step and then returns all the points\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> xStart First x-value.\r\n     * <span class=\"hljs-doctag\">@param</span> xEnd Last x-value.\r\n     * <span class=\"hljs-doctag\">@param</span> stepSize Step-size on the x-axis.\r\n     * <span class=\"hljs-doctag\">@param</span> yStart First y-value.\r\n     * <span class=\"hljs-doctag\">@param</span> differentialEquation The differential equation to be solved.\r\n     * <span class=\"hljs-doctag\">@return</span> The points constituting the solution of the differential\r\n     * equation.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; eulerFull(\r\n            <span class=\"hljs-type\">double</span> xStart,\r\n            <span class=\"hljs-type\">double</span> xEnd,\r\n            <span class=\"hljs-type\">double</span> stepSize,\r\n            <span class=\"hljs-type\">double</span> yStart,\r\n            BiFunction&lt;Double, Double, Double&gt; differentialEquation) {\r\n        <span class=\"hljs-keyword\">if</span> (xStart &gt;= xEnd) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;xEnd should be greater than xStart&quot;</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (stepSize &lt;= <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;stepSize should be greater than zero&quot;</span>);\r\n        }\r\n\r\n        ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; points = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-type\">double</span>[]&gt;();\r\n        <span class=\"hljs-type\">double</span>[] firstPoint = {xStart, yStart};\r\n        points.add(firstPoint);\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">yCurrent</span> <span class=\"hljs-operator\">=</span> yStart;\r\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">xCurrent</span> <span class=\"hljs-operator\">=</span> xStart;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (xCurrent &lt; xEnd) {\r\n            <span class=\"hljs-comment\">// Euler method for next step</span>\r\n            yCurrent = eulerStep(xCurrent, stepSize, yCurrent, differentialEquation);\r\n            xCurrent += stepSize;\r\n            <span class=\"hljs-type\">double</span>[] point = {xCurrent, yCurrent};\r\n            points.add(point);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> points;\r\n    }\r\n}\r\n"
    },
    "julia": {
      "dir": "src\\math\\euler_method.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\math\\euler_method.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    euler_method(f, x0, span, h=1.0e-2)\r\n\r\nCalculate the solution to a differential equation using forward euler method.\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> euler_method(f, x0, span, h=<span class=\"hljs-number\">1.0e-2</span>)\r\n    s, e = span\r\n    steps = floor((e - s) / h) |&gt; <span class=\"hljs-built_in\">Int</span>\r\n    x = <span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Float64</span>}(<span class=\"hljs-literal\">undef</span>, steps)\r\n\tt = <span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Float64</span>}(<span class=\"hljs-literal\">undef</span>, steps)\r\n    x[<span class=\"hljs-number\">1</span>] = x0\r\n\tt[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:(steps - <span class=\"hljs-number\">1</span>)\r\n        x[i + <span class=\"hljs-number\">1</span>] = x[i] + h * f(x[i], t[i])\r\n\t\tt[i + <span class=\"hljs-number\">1</span>] = t[i] + h\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> x, t\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Numeric/EulerMethod.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Numeric\\EulerMethod.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     In mathematics and computational science, the Euler method (also called forward Euler method)</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     is a first-order numerical procedure for solving ordinary differential equations (ODEs)</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     with a given initial value (aka. Cauchy problem). It is the most basic explicit method for numerical integration</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     of ordinary differential equations. The method proceeds in a series of steps. At each step</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the y-value is calculated by evaluating the differential equation at the previous step,</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     multiplying the result with the step-size and adding it to the last y-value:</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     y_n+1 = y_n + stepSize * f(x_n, y_n).</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (description adapted from https://en.wikipedia.org/wiki/Euler_method )</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (see also: https://www.geeksforgeeks.org/euler-method-solving-differential-equation/ ).</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EulerMethod</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Loops through all the steps until xEnd is reached, adds a point for each step and then</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     returns all the points.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;xStart&quot;&gt;</span>Initial conditions x-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;xEnd&quot;&gt;</span>Last x-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;stepSize&quot;&gt;</span>Step-size on the x-axis.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;yStart&quot;&gt;</span>Initial conditions y-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;yDerivative&quot;&gt;</span>The right hand side of the differential equation.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The solution of the Cauchy problem.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;<span class=\"hljs-built_in\">double</span>[]&gt; EulerFull(\r\n            <span class=\"hljs-built_in\">double</span> xStart,\r\n            <span class=\"hljs-built_in\">double</span> xEnd,\r\n            <span class=\"hljs-built_in\">double</span> stepSize,\r\n            <span class=\"hljs-built_in\">double</span> yStart,\r\n            Func&lt;<span class=\"hljs-built_in\">double</span>, <span class=\"hljs-built_in\">double</span>, <span class=\"hljs-built_in\">double</span>&gt; yDerivative)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (xStart &gt;= xEnd)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(\r\n                    <span class=\"hljs-keyword\">nameof</span>(xEnd),\r\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(xEnd)}</span> should be greater than <span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(xStart)}</span>&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (stepSize &lt;= <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(\r\n                    <span class=\"hljs-keyword\">nameof</span>(stepSize),\r\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(stepSize)}</span> should be greater than zero&quot;</span>);\r\n            }\r\n\r\n            List&lt;<span class=\"hljs-built_in\">double</span>[]&gt; points = <span class=\"hljs-keyword\">new</span>();\r\n            <span class=\"hljs-built_in\">double</span>[] firstPoint = { xStart, yStart };\r\n            points.Add(firstPoint);\r\n            <span class=\"hljs-keyword\">var</span> yCurrent = yStart;\r\n            <span class=\"hljs-keyword\">var</span> xCurrent = xStart;\r\n\r\n            <span class=\"hljs-keyword\">while</span> (xCurrent &lt; xEnd)\r\n            {\r\n                yCurrent = EulerStep(xCurrent, stepSize, yCurrent, yDerivative);\r\n                xCurrent += stepSize;\r\n                <span class=\"hljs-built_in\">double</span>[] point = { xCurrent, yCurrent };\r\n                points.Add(point);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> points;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Calculates the next y-value based on the current value of x, y and the stepSize.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;xCurrent&quot;&gt;</span>Current x-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;stepSize&quot;&gt;</span>Step-size on the x-axis.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;yCurrent&quot;&gt;</span>Current y-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;yDerivative&quot;&gt;</span>The right hand side of the differential equation.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The next y-value.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">EulerStep</span>(<span class=\"hljs-params\">\r\n            <span class=\"hljs-built_in\">double</span> xCurrent,\r\n            <span class=\"hljs-built_in\">double</span> stepSize,\r\n            <span class=\"hljs-built_in\">double</span> yCurrent,\r\n            Func&lt;<span class=\"hljs-built_in\">double</span>, <span class=\"hljs-built_in\">double</span>, <span class=\"hljs-built_in\">double</span>&gt; yDerivative</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> yNext = yCurrent + stepSize * yDerivative(xCurrent, yCurrent);\r\n            <span class=\"hljs-keyword\">return</span> yNext;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "poloso",
      "email": "osoriopabl@gmail.com",
      "commits": 1
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 3
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}