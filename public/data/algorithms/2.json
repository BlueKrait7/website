{
  "slug": "2",
  "name": "2",
  "categories": [
    "leetcode"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "leetcode\\src\\2.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/leetcode\\src\\2.c",
      "code": "<span class=\"hljs-comment\">/*\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">struct</span> ListNode *<span class=\"hljs-title function_\">addTwoNumbers</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> ListNode *l1, <span class=\"hljs-keyword\">struct</span> ListNode *l2)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ListNode</span> *<span class=\"hljs-title\">head</span> =</span> <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ListNode</span> *<span class=\"hljs-title\">walk</span> =</span> <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ListNode</span> *<span class=\"hljs-title\">tmp</span> =</span> <span class=\"hljs-literal\">NULL</span>;\r\n\r\n    <span class=\"hljs-type\">int</span> carry = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> val1 = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> val2 = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> val = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-keyword\">while</span> (l1 != <span class=\"hljs-literal\">NULL</span> || l2 != <span class=\"hljs-literal\">NULL</span> || carry)\r\n    {\r\n        val1 = <span class=\"hljs-number\">0</span>;\r\n        val2 = <span class=\"hljs-number\">0</span>;\r\n        val = <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (l1)\r\n        {\r\n            val1 = l1-&gt;val;\r\n            l1 = l1-&gt;next;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (l2)\r\n        {\r\n            val2 = l2-&gt;val;\r\n            l2 = l2-&gt;next;\r\n        }\r\n\r\n        val = carry + val1 + val2;\r\n        carry = val / <span class=\"hljs-number\">10</span>;\r\n\r\n        tmp = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> ListNode));\r\n        tmp-&gt;val = val % <span class=\"hljs-number\">10</span>;\r\n        tmp-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (!head)\r\n        {\r\n            head = walk = tmp;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            walk-&gt;next = tmp;\r\n            walk = walk-&gt;next;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> head;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Shubham Patil",
      "email": "shubhampatil.patil@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}