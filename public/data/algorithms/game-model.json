{
  "slug": "game-model",
  "name": "Game Model",
  "categories": [
    "ai",
    "minimax",
    "sources",
    "minimaxplayground",
    "sources",
    "model"
  ],
  "body": {},
  "implementations": {
    "swift": {
      "dir": "algorithms\\AI\\minimax\\Sources\\Minimax.playground\\Sources\\Model\\GameModel\\GameModel.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/algorithms\\AI\\minimax\\Sources\\Minimax.playground\\Sources\\Model\\GameModel\\GameModel.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GameModel</span> {\r\n    <span class=\"hljs-comment\">// MARK: -- Public variable&#x27;s</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> board: <span class=\"hljs-type\">Board</span>!\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> gameStatus: <span class=\"hljs-type\">BoardStatus</span>\r\n\r\n    <span class=\"hljs-comment\">// MARK: -- Private variable&#x27;s</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> playersList: [<span class=\"hljs-type\">Player</span>]<span class=\"hljs-operator\">!</span>\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> movementsSequence: [<span class=\"hljs-type\">Int</span>]<span class=\"hljs-operator\">!</span>\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> actualPlayerIndex: <span class=\"hljs-type\">Int</span>!\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> actualPlayer: <span class=\"hljs-type\">Player</span> {\r\n        <span class=\"hljs-keyword\">get</span> {\r\n            <span class=\"hljs-keyword\">return</span> playersList[actualPlayerIndex]\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> difficultLevel: <span class=\"hljs-type\">DifficultLevel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">DifficultLevel</span>.hard\r\n\r\n    <span class=\"hljs-comment\">// MARK: -- Public function&#x27;s</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">init</span>(<span class=\"hljs-params\">boardSize</span>: <span class=\"hljs-type\">Int</span>, <span class=\"hljs-params\">playersList</span>: [<span class=\"hljs-type\">Player</span>], <span class=\"hljs-params\">difficultLevel</span>: <span class=\"hljs-type\">DifficultLevel</span>) {\r\n        <span class=\"hljs-keyword\">self</span>.board <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Board</span>.<span class=\"hljs-keyword\">init</span>(size: boardSize)\r\n        <span class=\"hljs-keyword\">self</span>.playersList <span class=\"hljs-operator\">=</span> playersList\r\n        <span class=\"hljs-keyword\">self</span>.difficultLevel <span class=\"hljs-operator\">=</span> difficultLevel\r\n        <span class=\"hljs-keyword\">self</span>.gameStatus <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">BoardStatus</span>.continues\r\n\r\n        <span class=\"hljs-keyword\">self</span>.generateMovementsSequence()\r\n        <span class=\"hljs-keyword\">self</span>.changeActualPlayer()\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">update</span>() {\r\n        <span class=\"hljs-keyword\">self</span>.gameStatus <span class=\"hljs-operator\">=</span> board.check(player: actualPlayer)\r\n\r\n        <span class=\"hljs-keyword\">switch</span> <span class=\"hljs-keyword\">self</span>.gameStatus {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">BoardStatus</span>.continues:\r\n            changeActualPlayer()\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">BoardStatus</span>.draw:\r\n            changeActualPlayer()\r\n        <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-keyword\">break</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">playerMakeMove</span>(<span class=\"hljs-params\">selectedPosition</span>: (row: <span class=\"hljs-type\">Int</span>, column: <span class=\"hljs-type\">Int</span>)) {\r\n        <span class=\"hljs-keyword\">guard</span> board.symbol(forPosition: selectedPosition) <span class=\"hljs-operator\">==</span> <span class=\"hljs-type\">PlayerSymbol</span>.empty <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> }\r\n        <span class=\"hljs-keyword\">guard</span> board.hasEmptyField() <span class=\"hljs-operator\">==</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> }\r\n\r\n        board.makeMove(player: actualPlayer, position: selectedPosition)\r\n        update()\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">makeMinimaxMove</span>() {\r\n        <span class=\"hljs-keyword\">guard</span> actualPlayer.type <span class=\"hljs-operator\">==</span> <span class=\"hljs-type\">PlayerType</span>.computer <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> }\r\n        <span class=\"hljs-keyword\">guard</span> board.hasEmptyField() <span class=\"hljs-operator\">==</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> }\r\n\r\n        sleep(<span class=\"hljs-number\">1</span>)\r\n\r\n        <span class=\"hljs-keyword\">let</span> selectedPosition: <span class=\"hljs-type\">Position</span> <span class=\"hljs-operator\">=</span> minimaxMove(board: board, player: playersList[<span class=\"hljs-number\">0</span>], opponent: playersList[<span class=\"hljs-number\">1</span>], depth: <span class=\"hljs-keyword\">self</span>.difficultLevel.rawValue)\r\n        board.makeMove(player: actualPlayer, position: selectedPosition)\r\n        update()\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">newRound</span>() {\r\n        board.clear()\r\n        gameStatus <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">BoardStatus</span>.continues\r\n        generateMovementsSequence()\r\n        changeActualPlayer()\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// MARK: -- Private function&#x27;s</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">generateMovementsSequence</span>() {\r\n        <span class=\"hljs-keyword\">self</span>.movementsSequence <span class=\"hljs-operator\">=</span> []\r\n\r\n        <span class=\"hljs-keyword\">let</span> playersCount <span class=\"hljs-operator\">=</span> playersList.count\r\n        <span class=\"hljs-keyword\">let</span> movesCount <span class=\"hljs-operator\">=</span> (board.size <span class=\"hljs-operator\">*</span> board.size)\r\n\r\n        <span class=\"hljs-keyword\">var</span> move <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Int</span>.random(in: <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> playersCount)\r\n        movementsSequence.append(move)\r\n\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">_</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..&lt;</span> movesCount <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> {\r\n            move <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\r\n            movementsSequence.append(move <span class=\"hljs-operator\">%</span> playersCount)\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">changeActualPlayer</span>() {\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-operator\">!</span>movementsSequence.isEmpty {\r\n            actualPlayerIndex <span class=\"hljs-operator\">=</span> movementsSequence.first<span class=\"hljs-operator\">!</span>\r\n            movementsSequence.removeFirst()\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "michalnowak061",
      "email": "michal.nowak061@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}