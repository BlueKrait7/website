{
  "slug": "least-common-multiple",
  "name": "Least Common Multiple",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\least_common_multiple.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\least_common_multiple.py",
      "code": "<span class=\"hljs-keyword\">import</span> unittest\r\n<span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> timeit\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">least_common_multiple_slow</span>(<span class=\"hljs-params\">first_num: <span class=\"hljs-built_in\">int</span>, second_num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Find the least common multiple of two numbers.\r\n\r\n    Learn more: https://en.wikipedia.org/wiki/Least_common_multiple\r\n\r\n    &gt;&gt;&gt; least_common_multiple_slow(5, 2)\r\n    10\r\n    &gt;&gt;&gt; least_common_multiple_slow(12, 76)\r\n    228\r\n    &quot;&quot;&quot;</span>\r\n    max_num = first_num <span class=\"hljs-keyword\">if</span> first_num &gt;= second_num <span class=\"hljs-keyword\">else</span> second_num\r\n    common_mult = max_num\r\n    <span class=\"hljs-keyword\">while</span> (common_mult % first_num &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">or</span> (common_mult % second_num &gt; <span class=\"hljs-number\">0</span>):\r\n        common_mult += max_num\r\n    <span class=\"hljs-keyword\">return</span> common_mult\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greatest_common_divisor</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate Greatest Common Divisor (GCD).\r\n    see greatest_common_divisor.py\r\n    &gt;&gt;&gt; greatest_common_divisor(24, 40)\r\n    8\r\n    &gt;&gt;&gt; greatest_common_divisor(1, 1)\r\n    1\r\n    &gt;&gt;&gt; greatest_common_divisor(1, 800)\r\n    1\r\n    &gt;&gt;&gt; greatest_common_divisor(11, 37)\r\n    1\r\n    &gt;&gt;&gt; greatest_common_divisor(3, 5)\r\n    1\r\n    &gt;&gt;&gt; greatest_common_divisor(16, 4)\r\n    4\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> b <span class=\"hljs-keyword\">if</span> a == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> greatest_common_divisor(b % a, a)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">least_common_multiple_fast</span>(<span class=\"hljs-params\">first_num: <span class=\"hljs-built_in\">int</span>, second_num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Find the least common multiple of two numbers.\r\n    https://en.wikipedia.org/wiki/Least_common_multiple#Using_the_greatest_common_divisor\r\n    &gt;&gt;&gt; least_common_multiple_fast(5,2)\r\n    10\r\n    &gt;&gt;&gt; least_common_multiple_fast(12,76)\r\n    228\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> first_num // greatest_common_divisor(first_num, second_num) * second_num\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">benchmark</span>():\r\n    setup = (\r\n        <span class=\"hljs-string\">&quot;from __main__ import least_common_multiple_slow, least_common_multiple_fast&quot;</span>\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;least_common_multiple_slow():&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;least_common_multiple_slow(1000, 999)&quot;</span>, setup=setup),\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;least_common_multiple_fast():&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;least_common_multiple_fast(1000, 999)&quot;</span>, setup=setup),\r\n    )\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestLeastCommonMultiple</span>(unittest.TestCase):\r\n\r\n    test_inputs = [\r\n        (<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>),\r\n        (<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">15</span>),\r\n        (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">31</span>),\r\n        (<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">42</span>),\r\n        (<span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">34</span>),\r\n        (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">12</span>),\r\n        (<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">25</span>),\r\n        (<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">25</span>),\r\n        (<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>),\r\n    ]\r\n    expected_results = [<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">195</span>, <span class=\"hljs-number\">124</span>, <span class=\"hljs-number\">210</span>, <span class=\"hljs-number\">1462</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">18</span>]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_lcm_function</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">for</span> i, (first_num, second_num) <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.test_inputs):\r\n            slow_result = least_common_multiple_slow(first_num, second_num)\r\n            fast_result = least_common_multiple_fast(first_num, second_num)\r\n            <span class=\"hljs-keyword\">with</span> self.subTest(i=i):\r\n                self.assertEqual(slow_result, self.expected_results[i])\r\n                self.assertEqual(fast_result, self.expected_results[i])\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    benchmark()\r\n    unittest.main()\r\n"
    },
    "c-plus-plus": {
      "dir": "math\\least_common_multiple.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\least_common_multiple.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * Copyright 2020 @author tjgurwara99\r\n * @file\r\n *\r\n * A basic implementation of LCM function\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function for finding greatest common divisor of two numbers.\r\n * @params two integers x and y whose gcd we want to find.\r\n * @return greatest common divisor of x and y.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">gcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> y)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> y;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> x;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (x == y) {\r\n        <span class=\"hljs-keyword\">return</span> x;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (x &gt; y) {\r\n        <span class=\"hljs-comment\">// The following is valid because we have checked whether y == 0</span>\r\n\r\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> temp = x / y;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">gcd</span>(y, x - temp * y);\r\n    }\r\n    <span class=\"hljs-comment\">// Again the following is valid because we have checked whether x == 0</span>\r\n\r\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> temp = y / x;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">gcd</span>(x, y - temp * x);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function for finding the least common multiple of two numbers.\r\n * @params integer x and y whose lcm we want to find.\r\n * @return lcm of x and y using the relation x * y = gcd(x, y) * lcm(x, y)\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">lcm</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> y)</span> </span>{\r\n  <span class=\"hljs-keyword\">return</span> x / <span class=\"hljs-built_in\">gcd</span>(x, y) * y;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function for testing the lcm() functions with some assert statements.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// First test on lcm(5,10) == 10</span>\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;LCM of 5 and 10 is 10 but lcm function gives a different &quot;</span>\r\n                  <span class=\"hljs-string\">&quot;result.\\n&quot;</span>,\r\n            <span class=\"hljs-built_in\">lcm</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>) == <span class=\"hljs-number\">10</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;First assertion passes: LCM of 5 and 10 is &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">lcm</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>)\r\n              &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// Second test on lcm(2,3) == 6 as 2 and 3 are coprime (prime in fact)</span>\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;LCM of 2 and 3 is 6 but lcm function gives a different &quot;</span>\r\n                  <span class=\"hljs-string\">&quot;result.\\n&quot;</span>,\r\n            <span class=\"hljs-built_in\">lcm</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-number\">6</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Second assertion passes: LCM of 2 and 3 is &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">lcm</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\r\n              &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// Testing an integer overflow.</span>\r\n    <span class=\"hljs-comment\">// The algorithm should work as long as the result fits into integer.</span>\r\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;LCM of 987654321 and 987654321 is 987654321 but lcm function&quot;</span>\r\n                  <span class=\"hljs-string\">&quot; gives a different result.\\n&quot;</span>,\r\n            <span class=\"hljs-built_in\">lcm</span>(<span class=\"hljs-number\">987654321</span>, <span class=\"hljs-number\">987654321</span>) == <span class=\"hljs-number\">987654321</span>));\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Third assertion passes: LCM of 987654321 and 987654321 is &quot;</span>\r\n              &lt;&lt; <span class=\"hljs-built_in\">lcm</span>(<span class=\"hljs-number\">987654321</span>, <span class=\"hljs-number\">987654321</span>)\r\n              &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">tests</span>();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "lua": {
      "dir": "src\\numeric\\least_common_multiple.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src\\numeric\\least_common_multiple.lua",
      "code": "<span class=\"hljs-keyword\">local</span> gcd = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;numeric.greatest_common_divisor&quot;</span>)\r\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(\r\n\ta, <span class=\"hljs-comment\">-- number</span>\r\n\tb <span class=\"hljs-comment\">-- number</span>\r\n)</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">math</span>.<span class=\"hljs-built_in\">abs</span>(a * b) / gcd(a, b) <span class=\"hljs-comment\">-- least common multiple of a and b</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 1
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 1
    },
    {
      "name": "Yurii",
      "email": "33547678+yuriimchg@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}