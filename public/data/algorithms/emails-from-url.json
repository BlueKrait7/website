{
  "slug": "emails-from-url",
  "name": "Emails From Url",
  "categories": [
    "webprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "web_programming\\emails_from_url.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/web_programming\\emails_from_url.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Get the site emails from URL.&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n__author__ = <span class=\"hljs-string\">&quot;Muhammad Umer Farooq&quot;</span>\r\n__license__ = <span class=\"hljs-string\">&quot;MIT&quot;</span>\r\n__version__ = <span class=\"hljs-string\">&quot;1.0.0&quot;</span>\r\n__maintainer__ = <span class=\"hljs-string\">&quot;Muhammad Umer Farooq&quot;</span>\r\n__email__ = <span class=\"hljs-string\">&quot;contact@muhammadumerfarooq.me&quot;</span>\r\n__status__ = <span class=\"hljs-string\">&quot;Alpha&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> re\r\n<span class=\"hljs-keyword\">from</span> html.parser <span class=\"hljs-keyword\">import</span> HTMLParser\r\n<span class=\"hljs-keyword\">from</span> urllib <span class=\"hljs-keyword\">import</span> parse\r\n\r\n<span class=\"hljs-keyword\">import</span> requests\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Parser</span>(<span class=\"hljs-title class_ inherited__\">HTMLParser</span>):\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, domain: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">super</span>().__init__()\r\n        self.urls: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>] = []\r\n        self.domain = domain\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">handle_starttag</span>(<span class=\"hljs-params\">self, tag: <span class=\"hljs-built_in\">str</span>, attrs: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span> | <span class=\"hljs-literal\">None</span>]]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        This function parse html to take takes url from tags\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-comment\"># Only parse the &#x27;anchor&#x27; tag.</span>\r\n        <span class=\"hljs-keyword\">if</span> tag == <span class=\"hljs-string\">&quot;a&quot;</span>:\r\n            <span class=\"hljs-comment\"># Check the list of defined attributes.</span>\r\n            <span class=\"hljs-keyword\">for</span> name, value <span class=\"hljs-keyword\">in</span> attrs:\r\n                <span class=\"hljs-comment\"># If href is defined, and not empty nor # print it.</span>\r\n                <span class=\"hljs-keyword\">if</span> name == <span class=\"hljs-string\">&quot;href&quot;</span> <span class=\"hljs-keyword\">and</span> value != <span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-keyword\">and</span> value != <span class=\"hljs-string\">&quot;&quot;</span>:\r\n                    <span class=\"hljs-comment\"># If not already in urls.</span>\r\n                    <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.urls:\r\n                        url = parse.urljoin(self.domain, value)\r\n                        self.urls.append(url)\r\n\r\n\r\n<span class=\"hljs-comment\"># Get main domain name (example.com)</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_domain_name</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    This function get the main domain name\r\n\r\n    &gt;&gt;&gt; get_domain_name(&quot;https://a.b.c.d/e/f?g=h,i=j#k&quot;)\r\n    &#x27;c.d&#x27;\r\n    &gt;&gt;&gt; get_domain_name(&quot;Not a URL!&quot;)\r\n    &#x27;&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.&quot;</span>.join(get_sub_domain_name(url).split(<span class=\"hljs-string\">&quot;.&quot;</span>)[-<span class=\"hljs-number\">2</span>:])\r\n\r\n\r\n<span class=\"hljs-comment\"># Get sub domain name (sub.example.com)</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_sub_domain_name</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; get_sub_domain_name(&quot;https://a.b.c.d/e/f?g=h,i=j#k&quot;)\r\n    &#x27;a.b.c.d&#x27;\r\n    &gt;&gt;&gt; get_sub_domain_name(&quot;Not a URL!&quot;)\r\n    &#x27;&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> parse.urlparse(url).netloc\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">emails_from_url</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;https://github.com&quot;</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    This function takes url and return all valid urls\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># Get the base domain from the url</span>\r\n    domain = get_domain_name(url)\r\n\r\n    <span class=\"hljs-comment\"># Initialize the parser</span>\r\n    parser = Parser(domain)\r\n\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        <span class=\"hljs-comment\"># Open URL</span>\r\n        r = requests.get(url)\r\n\r\n        <span class=\"hljs-comment\"># pass the raw HTML to the parser to get links</span>\r\n        parser.feed(r.text)\r\n\r\n        <span class=\"hljs-comment\"># Get links and loop through</span>\r\n        valid_emails = <span class=\"hljs-built_in\">set</span>()\r\n        <span class=\"hljs-keyword\">for</span> link <span class=\"hljs-keyword\">in</span> parser.urls:\r\n            <span class=\"hljs-comment\"># open URL.</span>\r\n            <span class=\"hljs-comment\"># read = requests.get(link)</span>\r\n            <span class=\"hljs-keyword\">try</span>:\r\n                read = requests.get(link)\r\n                <span class=\"hljs-comment\"># Get the valid email.</span>\r\n                emails = re.findall(<span class=\"hljs-string\">&quot;[a-zA-Z0-9]+@&quot;</span> + domain, read.text)\r\n                <span class=\"hljs-comment\"># If not in list then append it.</span>\r\n                <span class=\"hljs-keyword\">for</span> email <span class=\"hljs-keyword\">in</span> emails:\r\n                    valid_emails.add(email)\r\n            <span class=\"hljs-keyword\">except</span> ValueError:\r\n                <span class=\"hljs-keyword\">pass</span>\r\n    <span class=\"hljs-keyword\">except</span> ValueError:\r\n        exit(-<span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-comment\"># Finally return a sorted list of email addresses with no duplicates.</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>(valid_emails)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    emails = emails_from_url(<span class=\"hljs-string\">&quot;https://github.com&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(emails)}</span> emails found:&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>.join(<span class=\"hljs-built_in\">sorted</span>(emails)))\r\n"
    }
  },
  "contributors": [
    {
      "name": "Muhammad Umer Farooq",
      "email": "mumerfarooqlablnet01@gmail.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}