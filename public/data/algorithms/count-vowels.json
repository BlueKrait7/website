{
  "slug": "count-vowels",
  "name": "Count Vowels",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "String\\test\\CountVowels.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/String\\test\\CountVowels.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { countVowels } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../CountVowels&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;CountVowels&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expect throws on use wrong param&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">countVowels</span>(<span class=\"hljs-number\">0</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;count the vowels in a string&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;Mad World&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return 0 when input is a string with no vowels&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;bcdfgh&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return 1 when input is a string of length 1 that is a vowel&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;a&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return the correct result when input is in all uppercase letters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;ABCDE&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return the correct result when input is in all lowercase letters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;abcdefghi&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return the correct result when input string contains spaces&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;abc def   ghi&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return the correct result when input contains number characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;a1b2c3&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return the correct result when input contains punctuation characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;a!b.ce)&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return 0 when the input is an empty string&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should count multiple occurrences of the same vowel in the input&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-string\">&#x27;aaaaa&#x27;</span>\r\n    <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title function_\">countVowels</span>(value)\r\n    <span class=\"hljs-title function_\">expect</span>(count).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5</span>)\r\n  })\r\n})\r\n"
    },
    "php": {
      "dir": "String\\CountVowels.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/String\\CountVowels.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n<span class=\"hljs-comment\">/**\r\n * This function returns\r\n * the Total no. of vowels\r\n * present in the given\r\n * string using a simple\r\n * method of looping\r\n * through all the\r\n * characters present in\r\n * the string.\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> string $string\r\n * <span class=\"hljs-doctag\">@return</span> int   $noOfVowels\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">countVowelsSimple</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span></span>)\r\n</span>{\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$string</span>)) {\r\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">\\Exception</span>(<span class=\"hljs-string\">&#x27;Please pass a non-empty string value&#x27;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-variable\">$noOfVowels</span> = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-variable\">$vowels</span>     = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;o&#x27;</span>, <span class=\"hljs-string\">&#x27;u&#x27;</span>]; <span class=\"hljs-comment\">// Vowels Set</span>\r\n    <span class=\"hljs-variable\">$string</span>     = <span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-variable\">$string</span>); <span class=\"hljs-comment\">// For case-insensitive checking</span>\r\n    <span class=\"hljs-variable\">$characters</span> = <span class=\"hljs-title function_ invoke__\">str_split</span>(<span class=\"hljs-variable\">$string</span>); <span class=\"hljs-comment\">// Splitting the string to a Character Array.</span>\r\n\r\n    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$characters</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$character</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_ invoke__\">in_array</span>(<span class=\"hljs-variable\">$character</span>, <span class=\"hljs-variable\">$vowels</span>)) {\r\n            <span class=\"hljs-variable\">$noOfVowels</span>++;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$noOfVowels</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This function returns\r\n * the Total no. of vowels\r\n * present in the given\r\n * string using a\r\n * regular expression.\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> string $string\r\n * <span class=\"hljs-doctag\">@return</span> int\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">countVowelsRegex</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$string</span></span>)\r\n</span>{\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-variable\">$string</span>)) {\r\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">\\Exception</span>(<span class=\"hljs-string\">&#x27;Please pass a non-empty string value&#x27;</span>);\r\n    }\r\n    <span class=\"hljs-variable\">$string</span> = <span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-variable\">$string</span>); <span class=\"hljs-comment\">// For case-insensitive checking</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">preg_match_all</span>(<span class=\"hljs-string\">&#x27;/[a,e,i,o,u]/&#x27;</span>, <span class=\"hljs-variable\">$string</span>);\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Akshay Khale",
      "email": "khale.akshay@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Khale",
      "email": "khaleakshay@gmail.com",
      "commits": 1
    },
    {
      "name": "Fahim Faisaal",
      "email": "57553028+fahimfaisaal@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}