{
  "slug": "fibonacci-fast",
  "name": "Fibonacci Fast",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\fibonacci_fast.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\fibonacci_fast.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Faster computation of Fibonacci series\r\n *\r\n * An efficient way to calculate nth fibonacci number faster and simpler than\r\n * \\f$O(n\\log n)\\f$ method of matrix exponentiation This works by using both\r\n * recursion and dynamic programming. as 93rd fibonacci exceeds 19 digits, which\r\n * cannot be stored in a single long long variable, we can only use it till 92nd\r\n * fibonacci we can use it for 10000th fibonacci etc, if we implement\r\n * bigintegers. This algorithm works with the fact that nth fibonacci can easily\r\n * found if we have already found n/2th or (n+1)/2th fibonacci It is a property\r\n * of fibonacci similar to matrix exponentiation.\r\n *\r\n * \\author [Krishna Vedala](https://github.com/kvedala)\r\n * @see fibonacci_large.cpp, fibonacci.cpp, string_fibonacci.cpp\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cinttypes&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * maximum number that can be computed - The result after 93 cannot be stored\r\n * in a `uint64_t` data type.\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 93</span>\r\n\r\n<span class=\"hljs-comment\">/** Algorithm */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\r\n    <span class=\"hljs-type\">static</span> <span class=\"hljs-type\">uint64_t</span> f1 = <span class=\"hljs-number\">1</span>,\r\n                    f2 = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// using static keyword will retain the values of</span>\r\n                             <span class=\"hljs-comment\">// f1 and f2 for the next function call.</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">2</span>)\r\n        <span class=\"hljs-keyword\">return</span> f2;\r\n    <span class=\"hljs-keyword\">if</span> (n &gt;= <span class=\"hljs-number\">93</span>) {\r\n        std::cerr\r\n            &lt;&lt; <span class=\"hljs-string\">&quot;Cannot compute for n&gt;93 due to limit of 64-bit integers\\n&quot;</span>;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-type\">uint64_t</span> temp = f2;  <span class=\"hljs-comment\">// we do not need temp to be static</span>\r\n    f2 += f1;\r\n    f1 = temp;\r\n\r\n    <span class=\"hljs-keyword\">return</span> f2;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Main Function</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">93</span>; i++) {\r\n        std::cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot; th fibonacci number is &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">fib</span>(i) &lt;&lt; std::endl;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "c": {
      "dir": "misc\\fibonacci_fast.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc\\fibonacci_fast.c",
      "code": "<span class=\"hljs-comment\">/**\r\n    @file\r\n    @author [Krishna Vedala](https://github.com/kvedala)\r\n    @date 2 October, 2019\r\n    @brief Compute \\f$m^{mth}\\f$ Fibonacci number using the formulae:\r\n    \\f{eqnarray*}{\r\n        F_{2n-1} &amp;=&amp; F_n^2 + F_{n-1}^2 \\\\\r\n        F_{2n}   &amp;=&amp; F_n\\left(2F_{n-1} + F_n\\right)\r\n   \\f}\r\n*/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;locale.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Get the \\f$n^{th}\\f$ and \\f$n+1^{th}\\f$ Fibonacci number using recursive\r\n * half-interval decimation.\r\n * \\param [in] n index of Fibonacci number to get\r\n * \\param [out] C left half interval value - end result here. Cannot be NULL\r\n * \\param [out] D right half interval can be discarded at end and can be NULL\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> n, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> *C, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> *D)</span>\r\n{\r\n    <span class=\"hljs-comment\">// Out of Range checking</span>\r\n    <span class=\"hljs-comment\">// commented out since `n` is unsigned integer</span>\r\n    <span class=\"hljs-comment\">// if (n &lt; 0)</span>\r\n    <span class=\"hljs-comment\">// {</span>\r\n    <span class=\"hljs-comment\">//     printf(&quot;\\nNo Such term !\\n&quot;);</span>\r\n    <span class=\"hljs-comment\">//     exit(0);</span>\r\n    <span class=\"hljs-comment\">// }</span>\r\n\r\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> a, b, c, d;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\r\n    {\r\n        C[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">if</span> (D) <span class=\"hljs-comment\">/* if D is not NULL */</span>\r\n            D[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    fib(n &gt;&gt; <span class=\"hljs-number\">1</span>, &amp;c, &amp;d); <span class=\"hljs-comment\">/* Compute F(n/2) */</span>\r\n\r\n    a = c * ((d &lt;&lt; <span class=\"hljs-number\">1</span>) - c);\r\n    b = c * c + d * d;\r\n    <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">/* If n is even */</span>\r\n    {\r\n        C[<span class=\"hljs-number\">0</span>] = a;\r\n        <span class=\"hljs-keyword\">if</span> (D)\r\n            D[<span class=\"hljs-number\">0</span>] = b;\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**&lt; If n is odd */</span>\r\n    C[<span class=\"hljs-number\">0</span>] = b;\r\n    <span class=\"hljs-keyword\">if</span> (D) <span class=\"hljs-comment\">/* if D is not NULL */</span>\r\n        D[<span class=\"hljs-number\">0</span>] = a + b;\r\n    <span class=\"hljs-keyword\">return</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * main function\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\r\n{\r\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> number, result;\r\n\r\n    setlocale(LC_NUMERIC, <span class=\"hljs-string\">&quot;&quot;</span>);  <span class=\"hljs-comment\">// format the printf output</span>\r\n\r\n    <span class=\"hljs-comment\">// Asks for the number/position of term in Fibonnacci sequence</span>\r\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">2</span>)\r\n        number = atoi(argv[<span class=\"hljs-number\">1</span>]);\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the value of n(n starts from 0 ): &quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lu&quot;</span>, &amp;number);\r\n    }\r\n\r\n    fib(number, &amp;result, <span class=\"hljs-literal\">NULL</span>);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The nth term is : %&#x27;lu \\n&quot;</span>, result);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}