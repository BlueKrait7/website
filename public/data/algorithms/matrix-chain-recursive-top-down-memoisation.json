{
  "slug": "matrix-chain-recursive-top-down-memoisation",
  "name": "Matrix Chain Recursive Top Down Memoisation",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\MatrixChainRecursiveTopDownMemoisation.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\MatrixChainRecursiveTopDownMemoisation.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-comment\">// Matrix-chain Multiplication</span>\r\n<span class=\"hljs-comment\">// Problem Statement</span>\r\n<span class=\"hljs-comment\">// we have given a chain A1,A2,...,Ani of n matrices, where for i = 1,2,...,n, </span>\r\n<span class=\"hljs-comment\">// matrix Ai has dimension pi−1 ×pi</span>\r\n<span class=\"hljs-comment\">// , fully parenthesize the product A1A2 ···An in a way that</span>\r\n<span class=\"hljs-comment\">// minimizes the number of scalar multiplications.</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MatrixChainRecursiveTopDownMemoisation</span> {\r\n\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Memoized_Matrix_Chain</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> p[])</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> p.length;\r\n        <span class=\"hljs-type\">int</span> m[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n][n];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\r\n                m[i][j] = Integer.MAX_VALUE;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> Lookup_Chain(m, p, <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Lookup_Chain</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> m[][], <span class=\"hljs-type\">int</span> p[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (i == j) {\r\n            m[i][j] = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">return</span> m[i][j];\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (m[i][j] &lt; Integer.MAX_VALUE) {\r\n            <span class=\"hljs-keyword\">return</span> m[i][j];\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> i; k &lt; j; k++) {\r\n                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> Lookup_Chain(m, p, i, k) + Lookup_Chain(m, p, k + <span class=\"hljs-number\">1</span>, j) + (p[i - <span class=\"hljs-number\">1</span>] * p[k] * p[j]);\r\n                <span class=\"hljs-keyword\">if</span> (q &lt; m[i][j]) {\r\n                    m[i][j] = q;\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> m[i][j];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// in this code we are taking the example of 4 matrixes whose orders are 1x2,2x3,3x4,4x5 respectively</span>\r\n    <span class=\"hljs-comment\">// output should be  Minimum number of multiplications is 38</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n\r\n        <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\r\n        System.out.println(<span class=\"hljs-string\">&quot;Minimum number of multiplications is &quot;</span> + Memoized_Matrix_Chain(arr));\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Karuna Sharma",
      "email": "79369446+Karunasharma09@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}