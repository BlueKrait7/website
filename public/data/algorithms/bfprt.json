{
  "slug": "bfprt",
  "name": "BFPRT",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\BFPRT.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\BFPRT.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * BFPRT algorithm.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BFPRT</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] getMinKNumsByBFPRT(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> k) {\r\n        <span class=\"hljs-keyword\">if</span> (k &lt; <span class=\"hljs-number\">1</span> || k &gt; arr.length) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n        }\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">minKth</span> <span class=\"hljs-operator\">=</span> getMinKthByBFPRT(arr, k);\r\n        <span class=\"hljs-type\">int</span>[] res = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[k];\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (arr[i] &lt; minKth) {\r\n                res[index++] = arr[i];\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (; index != res.length; index++) {\r\n            res[index] = minKth;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> res;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMinKthByBFPRT</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> k)</span> {\r\n        <span class=\"hljs-type\">int</span>[] copyArr = copyArray(arr);\r\n        <span class=\"hljs-keyword\">return</span> bfprt(copyArr, <span class=\"hljs-number\">0</span>, copyArr.length - <span class=\"hljs-number\">1</span>, k - <span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] copyArray(<span class=\"hljs-type\">int</span>[] arr) {\r\n        <span class=\"hljs-type\">int</span>[] copyArr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[arr.length];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\r\n            copyArr[i] = arr[i];\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> copyArr;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bfprt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end, <span class=\"hljs-type\">int</span> i)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (begin == end) {\r\n            <span class=\"hljs-keyword\">return</span> arr[begin];\r\n        }\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pivot</span> <span class=\"hljs-operator\">=</span> medianOfMedians(arr, begin, end);\r\n        <span class=\"hljs-type\">int</span>[] pivotRange = partition(arr, begin, end, pivot);\r\n        <span class=\"hljs-keyword\">if</span> (i &gt;= pivotRange[<span class=\"hljs-number\">0</span>] &amp;&amp; i &lt;= pivotRange[<span class=\"hljs-number\">1</span>]) {\r\n            <span class=\"hljs-keyword\">return</span> arr[i];\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i &lt; pivotRange[<span class=\"hljs-number\">0</span>]) {\r\n            <span class=\"hljs-keyword\">return</span> bfprt(arr, begin, pivotRange[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-number\">1</span>, i);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> bfprt(arr, pivotRange[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>, end, i);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * wikipedia: https://en.wikipedia.org/wiki/Median_of_medians .\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> arr an array.\r\n     * <span class=\"hljs-doctag\">@param</span> begin begin num.\r\n     * <span class=\"hljs-doctag\">@param</span> end end num.\r\n     * <span class=\"hljs-doctag\">@return</span> median of medians.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">medianOfMedians</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> end - begin + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">offset</span> <span class=\"hljs-operator\">=</span> num % <span class=\"hljs-number\">5</span> == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span>[] mArr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[num / <span class=\"hljs-number\">5</span> + offset];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; mArr.length; i++) {\r\n            mArr[i] = getMedian(arr, begin + i * <span class=\"hljs-number\">5</span>, Math.min(end, begin + i * <span class=\"hljs-number\">5</span> + <span class=\"hljs-number\">4</span>));\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> bfprt(mArr, <span class=\"hljs-number\">0</span>, mArr.length - <span class=\"hljs-number\">1</span>, mArr.length / <span class=\"hljs-number\">2</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">swap</span> <span class=\"hljs-operator\">=</span> arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = swap;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] partition(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end, <span class=\"hljs-type\">int</span> num) {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">small</span> <span class=\"hljs-operator\">=</span> begin - <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> begin;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">big</span> <span class=\"hljs-operator\">=</span> end + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">while</span> (cur != big) {\r\n            <span class=\"hljs-keyword\">if</span> (arr[cur] &lt; num) {\r\n                swap(arr, ++small, cur++);\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[cur] &gt; num) {\r\n                swap(arr, --big, cur);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                cur++;\r\n            }\r\n        }\r\n        <span class=\"hljs-type\">int</span>[] pivotRange = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">2</span>];\r\n        pivotRange[<span class=\"hljs-number\">0</span>] = small + <span class=\"hljs-number\">1</span>;\r\n        pivotRange[<span class=\"hljs-number\">1</span>] = big - <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">return</span> pivotRange;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMedian</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end)</span> {\r\n        insertionSort(arr, begin, end);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> begin + end;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> sum / <span class=\"hljs-number\">2</span> + (sum % <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-keyword\">return</span> arr[mid];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> begin, <span class=\"hljs-type\">int</span> end)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (arr == <span class=\"hljs-literal\">null</span> || arr.length &lt; <span class=\"hljs-number\">2</span>) {\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> begin + <span class=\"hljs-number\">1</span>; i != end + <span class=\"hljs-number\">1</span>; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i; j != begin; j--) {\r\n                <span class=\"hljs-keyword\">if</span> (arr[j - <span class=\"hljs-number\">1</span>] &gt; arr[j]) {\r\n                    swap(arr, j - <span class=\"hljs-number\">1</span>, j);\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    <span class=\"hljs-keyword\">break</span>;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">int</span>[] arr = {<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>};\r\n        <span class=\"hljs-type\">int</span>[] minK = getMinKNumsByBFPRT(arr, <span class=\"hljs-number\">5</span>);\r\n        System.out.println(Arrays.toString(minK));\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "めぐみん",
      "email": "59683877+AbnerHung@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}