{
  "slug": "check-anagram",
  "name": "Check Anagram",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "String\\test\\CheckAnagram.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/String\\test\\CheckAnagram.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { checkAnagramMap, checkAnagramRegex } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../CheckAnagram&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing checkAnagramRegex&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  it.<span class=\"hljs-property\">each</span><span class=\"hljs-string\">`\r\n    inputOne              | inputTwo\r\n    <span class=\"hljs-subst\">${<span class=\"hljs-number\">123456</span>}</span>             | <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>\r\n    <span class=\"hljs-subst\">${[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]}</span> | <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>\r\n    <span class=\"hljs-subst\">${{ test: <span class=\"hljs-string\">&#x27;test&#x27;</span> }}</span>   | <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>\r\n    <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>             | <span class=\"hljs-subst\">${<span class=\"hljs-number\">123456</span>}</span>\r\n    <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>             | <span class=\"hljs-subst\">${[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]}</span>\r\n    <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>             | <span class=\"hljs-subst\">${{ test: <span class=\"hljs-string\">&#x27;test&#x27;</span> }}</span>\r\n  `</span>(\r\n    <span class=\"hljs-string\">&#x27;expects to throw the type Error given values $inputOne and $inputTwo&#x27;</span>,\r\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{ inputOne, inputTwo }</span>) =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(\r\n        <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">checkAnagramRegex</span>(inputOne, inputTwo)\r\n      ).<span class=\"hljs-title function_\">toThrowError</span>()\r\n    }\r\n  )\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return false if the arguments have different lengths&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;abs&#x27;</span>, <span class=\"hljs-string\">&#x27;abds&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return false if the arguments are not anagrams&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;abcs&#x27;</span>, <span class=\"hljs-string\">&#x27;abds&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;abcd&#x27;</span>, <span class=\"hljs-string\">&#x27;bcad&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments of length 1 and are the same letter&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments of are both empty strings&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams with an odd length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;abcde&#x27;</span>, <span class=\"hljs-string\">&#x27;edcab&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams with an even length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;abcdef&#x27;</span>, <span class=\"hljs-string\">&#x27;fedcab&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return false if either argument is an empty string while the other is not&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;edcab&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SUT2</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;edcab&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">SUT2</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments contain the same letters but have unequal case&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;ABDCE&#x27;</span>, <span class=\"hljs-string\">&#x27;abcde&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SUT2</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;AbCdE&#x27;</span>, <span class=\"hljs-string\">&#x27;aBCdE&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">SUT2</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SUT3</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;Eleven plus two&#x27;</span>, <span class=\"hljs-string\">&#x27;Twelve plus one&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">SUT3</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams and contain number characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;a1b2&#x27;</span>, <span class=\"hljs-string\">&#x27;12ba&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams and contain space characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;a1 b2&#x27;</span>, <span class=\"hljs-string\">&#x27;1 2ba&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams and contain punctuation characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;a!1b@2&#x27;</span>, <span class=\"hljs-string\">&#x27;1@2ba!&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return false if the arguments contain the same letters but contain a different amount of space characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramRegex</span>(<span class=\"hljs-string\">&#x27;ea        cb&#x27;</span>, <span class=\"hljs-string\">&#x27;e cba&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing checkAnagramMap&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  it.<span class=\"hljs-property\">each</span><span class=\"hljs-string\">`\r\n    inputOne              | inputTwo\r\n    <span class=\"hljs-subst\">${<span class=\"hljs-number\">123456</span>}</span>             | <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>\r\n    <span class=\"hljs-subst\">${[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]}</span> | <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>\r\n    <span class=\"hljs-subst\">${{ test: <span class=\"hljs-string\">&#x27;test&#x27;</span> }}</span>   | <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>\r\n    <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>             | <span class=\"hljs-subst\">${<span class=\"hljs-number\">123456</span>}</span>\r\n    <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>             | <span class=\"hljs-subst\">${[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]}</span>\r\n    <span class=\"hljs-subst\">${<span class=\"hljs-string\">&#x27;abcd&#x27;</span>}</span>             | <span class=\"hljs-subst\">${{ test: <span class=\"hljs-string\">&#x27;test&#x27;</span> }}</span>\r\n  `</span>(\r\n    <span class=\"hljs-string\">&#x27;expects to throw the type Error given values $inputOne and $inputTwo&#x27;</span>,\r\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{ inputOne, inputTwo }</span>) =&gt;</span> {\r\n      <span class=\"hljs-title function_\">expect</span>(\r\n        <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">checkAnagramMap</span>(inputOne, inputTwo)\r\n      ).<span class=\"hljs-title function_\">toThrowError</span>()\r\n    }\r\n  )\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return false if the arguments have different lengths&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;abs&#x27;</span>, <span class=\"hljs-string\">&#x27;abds&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return false if the arguments are not anagrams&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;abcs&#x27;</span>, <span class=\"hljs-string\">&#x27;abds&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;abcd&#x27;</span>, <span class=\"hljs-string\">&#x27;bcad&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments of length 1 and are the same letter&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments of are both empty strings&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams with an odd length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;abcde&#x27;</span>, <span class=\"hljs-string\">&#x27;edcab&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams with an even length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;abcdef&#x27;</span>, <span class=\"hljs-string\">&#x27;fedcab&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return false if either argument is an empty string while the other is not&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;edcab&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SUT2</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;edcab&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">SUT2</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments contain the same letters but have unequal case&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;ABDCE&#x27;</span>, <span class=\"hljs-string\">&#x27;abcde&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SUT2</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;AbCdE&#x27;</span>, <span class=\"hljs-string\">&#x27;aBCdE&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">SUT2</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">SUT3</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;Eleven plus two&#x27;</span>, <span class=\"hljs-string\">&#x27;Twelve plus one&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">SUT3</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams and contain number characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;a1b2&#x27;</span>, <span class=\"hljs-string\">&#x27;12ba&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams and contain space characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;a1 b2&#x27;</span>, <span class=\"hljs-string\">&#x27;1 2ba&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return true if the arguments are anagrams and contain punctuation characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;a!1b@2&#x27;</span>, <span class=\"hljs-string\">&#x27;1@2ba!&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;expects to return false if the arguments contain the same letters but contain a different amount of space characters&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SUT</span> = <span class=\"hljs-title function_\">checkAnagramMap</span>(<span class=\"hljs-string\">&#x27;ea        cb&#x27;</span>, <span class=\"hljs-string\">&#x27;e cba&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-variable constant_\">SUT</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n})\r\n"
    },
    "php": {
      "dir": "String\\CheckAnagram.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/String\\CheckAnagram.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isAnagram</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$originalString</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$testString</span>, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-variable\">$caseInsensitive</span> = <span class=\"hljs-literal\">true</span></span>)\r\n</span>{\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$caseInsensitive</span>) \r\n    {\r\n        <span class=\"hljs-variable\">$originalString</span> = <span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-variable\">$originalString</span>); <span class=\"hljs-comment\">// Converting string to lowercase for case-insensitive check</span>\r\n        <span class=\"hljs-variable\">$testString</span> = <span class=\"hljs-title function_ invoke__\">strtolower</span>(<span class=\"hljs-variable\">$testString</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//count_chars(string, mode = 1) returns key-value pairs with character as key, frequency as value</span>\r\n    <span class=\"hljs-comment\">//We can directly compare the arrays in this case</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_ invoke__\">count_chars</span>(<span class=\"hljs-variable\">$originalString</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-title function_ invoke__\">count_chars</span>(<span class=\"hljs-variable\">$testString</span>, <span class=\"hljs-number\">1</span>))\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n}"
    }
  },
  "contributors": [
    {
      "name": "PalAditya",
      "email": "adityapal.nghss@gmail.com",
      "commits": 1
    },
    {
      "name": "balbaal",
      "email": "iqbal.mi20@gmail.com",
      "commits": 1
    },
    {
      "name": "techie_parth",
      "email": "parthdesai997@gmail.com",
      "commits": 1
    },
    {
      "name": "Fahim Faisaal",
      "email": "57553028+fahimfaisaal@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Charlie Moore",
      "email": "58339043+charliejmoore@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Alexandre Xavier",
      "email": "ale.bxsantos@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}