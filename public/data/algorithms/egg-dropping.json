{
  "slug": "egg-dropping",
  "name": "Egg Dropping",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\EggDropping.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\EggDropping.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * DynamicProgramming solution for the Egg Dropping Puzzle\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EggDropping</span> {\r\n\r\n    <span class=\"hljs-comment\">// min trials with n eggs and m floors</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minTrials</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> m)</span> {\r\n\r\n        <span class=\"hljs-type\">int</span>[][] eggFloor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>][m + <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-type\">int</span> result, x;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= n; i++) {\r\n            eggFloor[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Zero trial for zero floor.</span>\r\n            eggFloor[i][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// One trial for one floor</span>\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// j trials for only 1 egg</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt;= m; j++) {\r\n            eggFloor[<span class=\"hljs-number\">1</span>][j] = j;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Using bottom-up approach in DP</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= n; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; j &lt;= m; j++) {\r\n                eggFloor[i][j] = Integer.MAX_VALUE;\r\n                <span class=\"hljs-keyword\">for</span> (x = <span class=\"hljs-number\">1</span>; x &lt;= j; x++) {\r\n                    result = <span class=\"hljs-number\">1</span> + Math.max(eggFloor[i - <span class=\"hljs-number\">1</span>][x - <span class=\"hljs-number\">1</span>], eggFloor[i][j - x]);\r\n\r\n                    <span class=\"hljs-comment\">// choose min of all values for particular x</span>\r\n                    <span class=\"hljs-keyword\">if</span> (result &lt; eggFloor[i][j]) {\r\n                        eggFloor[i][j] = result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> eggFloor[n][m];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>, m = <span class=\"hljs-number\">4</span>;\r\n        <span class=\"hljs-comment\">// result outputs min no. of trials in worst case for n eggs and m floors</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> minTrials(n, m);\r\n        System.out.println(result);\r\n    }\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\dynamic_programming\\egg_dropping.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\dynamic_programming\\egg_dropping.rs",
      "code": "<span class=\"hljs-comment\">/// # Egg Dropping Puzzle</span>\r\n\r\n<span class=\"hljs-comment\">/// `egg_drop(eggs, floors)` returns the least number of egg droppings</span>\r\n<span class=\"hljs-comment\">///     required to determine the highest floor from which an egg will not</span>\r\n<span class=\"hljs-comment\">///     break upon dropping</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Assumptions: n &gt; 0</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">egg_drop</span>(eggs: <span class=\"hljs-type\">u32</span>, floors: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u32</span> {\r\n    <span class=\"hljs-built_in\">assert!</span>(eggs &gt; <span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-comment\">// Explicity handle edge cases (optional)</span>\r\n    <span class=\"hljs-keyword\">if</span> eggs == <span class=\"hljs-number\">1</span> || floors == <span class=\"hljs-number\">0</span> || floors == <span class=\"hljs-number\">1</span> {\r\n        <span class=\"hljs-keyword\">return</span> floors;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">eggs_index</span> = eggs <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">floors_index</span> = floors <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>;\r\n\r\n    <span class=\"hljs-comment\">// Store solutions to subproblems in 2D Vec,</span>\r\n    <span class=\"hljs-comment\">// where egg_drops[i][j] represents the solution to the egg dropping</span>\r\n    <span class=\"hljs-comment\">// problem with i eggs and j floors</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">egg_drops</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; floors_index + <span class=\"hljs-number\">1</span>]; eggs_index + <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-comment\">// Assign solutions for egg_drop(n, 0) = 0, egg_drop(n, 1) = 1</span>\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">egg_drop</span> <span class=\"hljs-keyword\">in</span> egg_drops.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">skip</span>(<span class=\"hljs-number\">1</span>) {\r\n        egg_drop[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\r\n        egg_drop[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Assign solutions to egg_drop(1, k) = k</span>\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=floors_index {\r\n        egg_drops[<span class=\"hljs-number\">1</span>][j] = j <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Complete solutions vector using optimal substructure property</span>\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..=eggs_index {\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">2</span>..=floors_index {\r\n            egg_drops[i][j] = std::u32::MAX;\r\n\r\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=j {\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-number\">1</span> + std::cmp::<span class=\"hljs-title function_ invoke__\">max</span>(egg_drops[i - <span class=\"hljs-number\">1</span>][k - <span class=\"hljs-number\">1</span>], egg_drops[i][j - k]);\r\n\r\n                <span class=\"hljs-keyword\">if</span> res &lt; egg_drops[i][j] {\r\n                    egg_drops[i][j] = res;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    egg_drops[eggs_index][floors_index]\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::egg_drop;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">zero_floors</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">egg_drop</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_egg</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">egg_drop</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">8</span>), <span class=\"hljs-number\">8</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">eggs2_floors2</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">egg_drop</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">2</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">eggs3_floors5</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">egg_drop</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">3</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">eggs2_floors10</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">egg_drop</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">4</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">eggs2_floors36</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">egg_drop</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">36</span>), <span class=\"hljs-number\">8</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">large_floors</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">egg_drop</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">14</span>);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Jake Curran",
      "email": "jake@jakecurran.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Deepak",
      "email": "deepakkumar180997@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}