{
  "slug": "huffman-compressor",
  "name": "Huffman Compressor",
  "categories": [
    "datacompression"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/DataCompression/HuffmanCompressor.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\DataCompression\\HuffmanCompressor.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n<span class=\"hljs-keyword\">using</span> Algorithms.Sorters.Comparison;\r\n<span class=\"hljs-keyword\">using</span> Utilities.Extensions;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.DataCompression</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Greedy lossless compression algorithm.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HuffmanCompressor</span>\r\n    {\r\n        <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> Use partial sorter</span>\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> IComparisonSorter&lt;ListNode&gt; sorter;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> Translator translator;\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">HuffmanCompressor</span>(<span class=\"hljs-params\">IComparisonSorter&lt;ListNode&gt; sorter, Translator translator</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">this</span>.sorter = sorter;\r\n            <span class=\"hljs-keyword\">this</span>.translator = translator;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Given an input string, returns a new compressed string</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     using huffman encoding.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;uncompressedText&quot;&gt;</span>Text message to compress.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Compressed string and keys to decompress it.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> (<span class=\"hljs-built_in\">string</span> compressedText, Dictionary&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt; decompressionKeys) Compress(<span class=\"hljs-built_in\">string</span> uncompressedText)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">string</span>.IsNullOrEmpty(uncompressedText))\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">string</span>.Empty, <span class=\"hljs-keyword\">new</span> Dictionary&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;());\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (uncompressedText.Distinct().Count() == <span class=\"hljs-number\">1</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> dict = <span class=\"hljs-keyword\">new</span> Dictionary&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;\r\n                {\r\n                    { <span class=\"hljs-string\">&quot;1&quot;</span>, uncompressedText[<span class=\"hljs-number\">0</span>].ToString() },\r\n                };\r\n                <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>, uncompressedText.Length), dict);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> nodes = GetListNodesFromText(uncompressedText);\r\n            <span class=\"hljs-keyword\">var</span> tree = GenerateHuffmanTree(nodes);\r\n            <span class=\"hljs-keyword\">var</span> (compressionKeys, decompressionKeys) = GetKeys(tree);\r\n            <span class=\"hljs-keyword\">return</span> (translator.Translate(uncompressedText, compressionKeys), decompressionKeys);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds frequency for each character in the text.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Symbol-frequency array.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ListNode[] <span class=\"hljs-title\">GetListNodesFromText</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> occurenceCounts = <span class=\"hljs-keyword\">new</span> Dictionary&lt;<span class=\"hljs-built_in\">char</span>, <span class=\"hljs-built_in\">int</span>&gt;();\r\n\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> ch <span class=\"hljs-keyword\">in</span> text)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (!occurenceCounts.ContainsKey(ch))\r\n                {\r\n                    occurenceCounts.Add(ch, <span class=\"hljs-number\">0</span>);\r\n                }\r\n\r\n                occurenceCounts[ch]++;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> occurenceCounts.Select(kvp =&gt; <span class=\"hljs-keyword\">new</span> ListNode(kvp.Key, <span class=\"hljs-number\">1</span>d * kvp.Value / text.Length)).ToArray();\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> (Dictionary&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt; compressionKeys, Dictionary&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt; decompressionKeys) GetKeys(\r\n            ListNode tree)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> compressionKeys = <span class=\"hljs-keyword\">new</span> Dictionary&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;();\r\n            <span class=\"hljs-keyword\">var</span> decompressionKeys = <span class=\"hljs-keyword\">new</span> Dictionary&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;();\r\n\r\n            <span class=\"hljs-keyword\">if</span> (tree.HasData)\r\n            {\r\n                compressionKeys.Add(tree.Data.ToString(), <span class=\"hljs-built_in\">string</span>.Empty);\r\n                decompressionKeys.Add(<span class=\"hljs-built_in\">string</span>.Empty, tree.Data.ToString());\r\n                <span class=\"hljs-keyword\">return</span> (compressionKeys, decompressionKeys);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (tree.LeftChild <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> (lsck, lsdk) = GetKeys(tree.LeftChild);\r\n                compressionKeys.AddMany(lsck.Select(kvp =&gt; (kvp.Key, <span class=\"hljs-string\">&quot;0&quot;</span> + kvp.Value)));\r\n                decompressionKeys.AddMany(lsdk.Select(kvp =&gt; (<span class=\"hljs-string\">&quot;0&quot;</span> + kvp.Key, kvp.Value)));\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (tree.RightChild <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> (rsck, rsdk) = GetKeys(tree.RightChild);\r\n                compressionKeys.AddMany(rsck.Select(kvp =&gt; (kvp.Key, <span class=\"hljs-string\">&quot;1&quot;</span> + kvp.Value)));\r\n                decompressionKeys.AddMany(rsdk.Select(kvp =&gt; (<span class=\"hljs-string\">&quot;1&quot;</span> + kvp.Key, kvp.Value)));\r\n\r\n                <span class=\"hljs-keyword\">return</span> (compressionKeys, decompressionKeys);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> (compressionKeys, decompressionKeys);\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ListNode <span class=\"hljs-title\">GenerateHuffmanTree</span>(<span class=\"hljs-params\">ListNode[] nodes</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> comparer = <span class=\"hljs-keyword\">new</span> ListNodeComparer();\r\n            <span class=\"hljs-keyword\">while</span> (nodes.Length &gt; <span class=\"hljs-number\">1</span>)\r\n            {\r\n                sorter.Sort(nodes, comparer);\r\n\r\n                <span class=\"hljs-keyword\">var</span> left = nodes[<span class=\"hljs-number\">0</span>];\r\n                <span class=\"hljs-keyword\">var</span> right = nodes[<span class=\"hljs-number\">1</span>];\r\n\r\n                <span class=\"hljs-keyword\">var</span> newNodes = <span class=\"hljs-keyword\">new</span> ListNode[nodes.Length - <span class=\"hljs-number\">1</span>];\r\n                Array.Copy(nodes, <span class=\"hljs-number\">2</span>, newNodes, <span class=\"hljs-number\">1</span>, nodes.Length - <span class=\"hljs-number\">2</span>);\r\n                newNodes[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">new</span> ListNode(left, right);\r\n                nodes = newNodes;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> nodes[<span class=\"hljs-number\">0</span>];\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Represents tree structure for the algorithm.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ListNode</span>\r\n        {\r\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ListNode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">char</span> data, <span class=\"hljs-built_in\">double</span> frequency</span>)</span>\r\n            {\r\n                HasData = <span class=\"hljs-literal\">true</span>;\r\n                Data = data;\r\n                Frequency = frequency;\r\n            }\r\n\r\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ListNode</span>(<span class=\"hljs-params\">ListNode leftChild, ListNode rightChild</span>)</span>\r\n            {\r\n                LeftChild = leftChild;\r\n                RightChild = rightChild;\r\n                Frequency = leftChild.Frequency + rightChild.Frequency;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">char</span> Data { <span class=\"hljs-keyword\">get</span>; }\r\n\r\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> HasData { <span class=\"hljs-keyword\">get</span>; }\r\n\r\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">double</span> Frequency { <span class=\"hljs-keyword\">get</span>; }\r\n\r\n            <span class=\"hljs-keyword\">public</span> ListNode? RightChild { <span class=\"hljs-keyword\">get</span>; }\r\n\r\n            <span class=\"hljs-keyword\">public</span> ListNode? LeftChild { <span class=\"hljs-keyword\">get</span>; }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ListNodeComparer</span> : <span class=\"hljs-title\">IComparer</span>&lt;<span class=\"hljs-title\">ListNode</span>&gt;\r\n        {\r\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Compare</span>(<span class=\"hljs-params\">ListNode? x, ListNode? y</span>)</span>\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> || y <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">return</span> x.Frequency.CompareTo(y.Frequency);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Siddharth Kochar",
      "email": "sidkcr@gmail.com",
      "commits": 1
    },
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 10
    }
  ],
  "explanationUrl": {}
}