{
  "slug": "kruskal-mst",
  "name": "Kruskal MST",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Graphs\\KruskalMST.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs\\KruskalMST.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DisjointSetTreeNode</span> {\r\n  <span class=\"hljs-comment\">// Disjoint Set Node to store the parent and rank</span>\r\n  <span class=\"hljs-title function_\">constructor</span> (key) {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">key</span> = key\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">parent</span> = <span class=\"hljs-variable language_\">this</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rank</span> = <span class=\"hljs-number\">0</span>\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DisjointSetTree</span> {\r\n  <span class=\"hljs-comment\">// Disjoint Set DataStructure</span>\r\n  <span class=\"hljs-title function_\">constructor</span> () {\r\n    <span class=\"hljs-comment\">// map to from node name to the node object</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span> = {}\r\n  }\r\n\r\n  makeSet (x) {\r\n    <span class=\"hljs-comment\">// Function to create a new set with x as its member</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DisjointSetTreeNode</span>(x)\r\n  }\r\n\r\n  findSet (x) {\r\n    <span class=\"hljs-comment\">// Function to find the set x belongs to (with path-compression)</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x] !== <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x].<span class=\"hljs-property\">parent</span>) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x].<span class=\"hljs-property\">parent</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findSet</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x].<span class=\"hljs-property\">parent</span>.<span class=\"hljs-property\">key</span>)\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x].<span class=\"hljs-property\">parent</span>\r\n  }\r\n\r\n  union (x, y) {\r\n    <span class=\"hljs-comment\">// Function to merge 2 disjoint sets</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">link</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findSet</span>(x), <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findSet</span>(y))\r\n  }\r\n\r\n  link (x, y) {\r\n    <span class=\"hljs-comment\">// Helper function for union operation</span>\r\n    <span class=\"hljs-keyword\">if</span> (x.<span class=\"hljs-property\">rank</span> &gt; y.<span class=\"hljs-property\">rank</span>) {\r\n      y.<span class=\"hljs-property\">parent</span> = x\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      x.<span class=\"hljs-property\">parent</span> = y\r\n      <span class=\"hljs-keyword\">if</span> (x.<span class=\"hljs-property\">rank</span> === y.<span class=\"hljs-property\">rank</span>) {\r\n        y.<span class=\"hljs-property\">rank</span> += <span class=\"hljs-number\">1</span>\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraphWeightedUndirectedAdjacencyList</span> {\r\n  <span class=\"hljs-comment\">// Weighted Undirected Graph class</span>\r\n  <span class=\"hljs-title function_\">constructor</span> () {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span> = {}\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">nodes</span> = <span class=\"hljs-number\">0</span>\r\n  }\r\n\r\n  addNode (node) {\r\n    <span class=\"hljs-comment\">// Function to add a node to the graph (connection represented by set)</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node] = {}\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">nodes</span> += <span class=\"hljs-number\">1</span>\r\n  }\r\n\r\n  addEdge (node1, node2, weight) {\r\n    <span class=\"hljs-comment\">// Function to add an edge (adds the node too if they are not present in the graph)</span>\r\n    <span class=\"hljs-keyword\">if</span> (!(node1 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node1) }\r\n    <span class=\"hljs-keyword\">if</span> (!(node2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node2) }\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node1][node2] = weight\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node2][node1] = weight\r\n  }\r\n\r\n  <span class=\"hljs-title class_\">KruskalMST</span> () {\r\n    <span class=\"hljs-comment\">// Kruskal&#x27;s Algorithm to generate a Minimum Spanning Tree (MST) of a graph</span>\r\n    <span class=\"hljs-comment\">// Details: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm</span>\r\n    <span class=\"hljs-comment\">// getting the edges in ascending order of weights</span>\r\n    <span class=\"hljs-keyword\">const</span> edges = []\r\n    <span class=\"hljs-keyword\">const</span> seen = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> start <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) {\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> end <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[start])) {\r\n        <span class=\"hljs-keyword\">if</span> (!seen.<span class=\"hljs-title function_\">has</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${start}</span> <span class=\"hljs-subst\">${end}</span>`</span>)) {\r\n          seen.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${end}</span> <span class=\"hljs-subst\">${start}</span>`</span>)\r\n          edges.<span class=\"hljs-title function_\">push</span>([start, end, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[start][end]])\r\n        }\r\n      }\r\n    }\r\n    edges.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a[<span class=\"hljs-number\">2</span>] - b[<span class=\"hljs-number\">2</span>])\r\n    <span class=\"hljs-comment\">// creating the disjoint set</span>\r\n    <span class=\"hljs-keyword\">const</span> disjointSet = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DisjointSetTree</span>()\r\n    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">node</span> =&gt;</span> disjointSet.<span class=\"hljs-title function_\">makeSet</span>(node))\r\n    <span class=\"hljs-comment\">// MST generation</span>\r\n    <span class=\"hljs-keyword\">const</span> graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GraphWeightedUndirectedAdjacencyList</span>()\r\n    <span class=\"hljs-keyword\">let</span> numEdges = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> (numEdges &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">nodes</span> - <span class=\"hljs-number\">1</span>) {\r\n      <span class=\"hljs-keyword\">const</span> [u, v, w] = edges[index]\r\n      index += <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-keyword\">if</span> (disjointSet.<span class=\"hljs-title function_\">findSet</span>(u) !== disjointSet.<span class=\"hljs-title function_\">findSet</span>(v)) {\r\n        numEdges += <span class=\"hljs-number\">1</span>\r\n        graph.<span class=\"hljs-title function_\">addEdge</span>(u, v, w)\r\n        disjointSet.<span class=\"hljs-title function_\">union</span>(u, v)\r\n      }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> graph\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">GraphWeightedUndirectedAdjacencyList</span> }\r\n\r\n<span class=\"hljs-comment\">// const graph = new GraphWeightedUndirectedAdjacencyList()</span>\r\n<span class=\"hljs-comment\">// graph.addEdge(1, 2, 1)</span>\r\n<span class=\"hljs-comment\">// graph.addEdge(2, 3, 2)</span>\r\n<span class=\"hljs-comment\">// graph.addEdge(3, 4, 1)</span>\r\n<span class=\"hljs-comment\">// graph.addEdge(3, 5, 100) // Removed in MST</span>\r\n<span class=\"hljs-comment\">// graph.addEdge(4, 5, 5)</span>\r\n<span class=\"hljs-comment\">// graph.KruskalMST()</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}