{
  "slug": "perfect-number",
  "name": "Perfect Number",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\perfect_number.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\perfect_number.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n== Perfect Number ==\r\nIn number theory, a perfect number is a positive integer that is equal to the sum of\r\nits positive divisors, excluding the number itself.\r\nFor example: 6 ==&gt; divisors[1, 2, 3, 6]\r\n    Excluding 6, the sum(divisors) is 1 + 2 + 3 = 6\r\n    So, 6 is a Perfect Number\r\n\r\nOther examples of Perfect Numbers: 28, 486, ...\r\n\r\nhttps://en.wikipedia.org/wiki/Perfect_number\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">perfect</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; perfect(27)\r\n    False\r\n    &gt;&gt;&gt; perfect(28)\r\n    True\r\n    &gt;&gt;&gt; perfect(29)\r\n    False\r\n\r\n    Start from 1 because dividing by 0 will raise ZeroDivisionError.\r\n    A number at most can be divisible by the half of the number except the number\r\n    itself.  For example, 6 is at most can be divisible by 3 except by 6 itself.\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, number // <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">if</span> number % i == <span class=\"hljs-number\">0</span>) == number\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Program to check whether a number is a Perfect number or not...&quot;</span>)\r\n    number = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter number: &quot;</span>).strip())\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{number}</span> is <span class=\"hljs-subst\">{<span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-keyword\">if</span> perfect(number) <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&#x27;not &#x27;</span>}</span>a Perfect Number.&quot;</span>)\r\n"
    },
    "javascript": {
      "dir": "Maths\\test\\PerfectNumber.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\PerfectNumber.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { perfectNumber } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../PerfectNumber&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;PerfectNumber&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return true for a perfect cube&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">perfectNumber</span>(<span class=\"hljs-number\">28</span>)).<span class=\"hljs-title function_\">toBeTruthy</span>()\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return false for a non perfect cube&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">perfectNumber</span>(<span class=\"hljs-number\">10</span>)).<span class=\"hljs-title function_\">toBeFalsy</span>()\r\n  })\r\n})\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\PerfectNumber.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\PerfectNumber.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * In number theory, a perfect number is a positive integer that is equal to the\r\n * sum of its positive divisors, excluding the number itself. For instance, 6\r\n * has divisors 1, 2 and 3 (excluding itself), and 1 + 2 + 3 = 6, so 6 is a\r\n * perfect number.\r\n *\r\n * &lt;p&gt;\r\n * link:https://en.wikipedia.org/wiki/Perfect_number\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PerfectNumber</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isPerfectNumber</span><span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>)</span>;\r\n        <span class=\"hljs-comment\">/* 1 + 2 + 3 == 6 */</span>\r\n        <span class=\"hljs-keyword\">assert</span> !isPerfectNumber(<span class=\"hljs-number\">8</span>);\r\n        <span class=\"hljs-comment\">/* 1 + 2 + 4 != 8 */</span>\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isPerfectNumber</span><span class=\"hljs-params\">(<span class=\"hljs-number\">28</span>)</span>;\r\n        <span class=\"hljs-comment\">/* 1 + 2 + 4 + 7 + 14 == 28 */</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Check if {<span class=\"hljs-doctag\">@code</span> number} is perfect number or not\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> number the number\r\n     * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if {<span class=\"hljs-doctag\">@code</span> number} is perfect number, otherwise false\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPerfectNumber</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-comment\">/* sum of its positive divisors */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; number; ++i) {\r\n            <span class=\"hljs-keyword\">if</span> (number % i == <span class=\"hljs-number\">0</span>) {\r\n                sum += i;\r\n            }\r\n        }\r\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span>= number;\r\n    }\r\n}\r\n"
    },
    "dart": {
      "dir": "maths\\perfect_number.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths\\perfect_number.dart",
      "code": "<span class=\"hljs-comment\">/* \r\n * From: https://www.britannica.com/science/perfect-number\r\n *\r\n * A positive integer that is equal to the sum of its proper divisors. \r\n * The smallest perfect number is 6, which is the sum of 1, 2, and 3. \r\n * Other perfect numbers are 28, 496, and 8,128.\r\n * \r\n * */</span>\r\n\r\n<span class=\"hljs-comment\">//this function returns true if number is perfect and false otherwise</span>\r\n<span class=\"hljs-built_in\">bool</span> perfect_number(<span class=\"hljs-built_in\">int</span> number) {\r\n  <span class=\"hljs-keyword\">if</span> (number &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\r\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; divisors = [];\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; number; i++) {\r\n    <span class=\"hljs-keyword\">if</span> (number % i == <span class=\"hljs-number\">0</span>) divisors.add(i);\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> divisors.reduce((a, b) =&gt; a + b) == number;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-built_in\">print</span>(perfect_number(<span class=\"hljs-number\">-1</span>)); <span class=\"hljs-comment\">// false</span>\r\n  <span class=\"hljs-built_in\">print</span>(perfect_number(<span class=\"hljs-number\">6</span>)); <span class=\"hljs-comment\">// true</span>\r\n  <span class=\"hljs-built_in\">print</span>(perfect_number(<span class=\"hljs-number\">12</span>)); <span class=\"hljs-comment\">// false</span>\r\n  <span class=\"hljs-built_in\">print</span>(perfect_number(<span class=\"hljs-number\">16</span>)); <span class=\"hljs-comment\">// false</span>\r\n  <span class=\"hljs-built_in\">print</span>(perfect_number(<span class=\"hljs-number\">26</span>)); <span class=\"hljs-comment\">// false</span>\r\n  <span class=\"hljs-built_in\">print</span>(perfect_number(<span class=\"hljs-number\">27</span>)); <span class=\"hljs-comment\">// false</span>\r\n  <span class=\"hljs-built_in\">print</span>(perfect_number(<span class=\"hljs-number\">28</span>)); <span class=\"hljs-comment\">// true</span>\r\n}\r\n"
    },
    "julia": {
      "dir": "src\\math\\perfect_number.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\math\\perfect_number.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    perfect_number(number)\r\n\r\nChecks if a number is a perfect_number number or not\r\n\r\n# Details\r\n\r\nperfect_number number is a positive integer that is equal to the sum of\r\nits positive divisors, excluding the number itself.\r\n\r\nFor example : 6 is perfect_number number\r\n\r\nDivisors of 6 =&gt; [1,2,3]\r\n\r\nSum of divisors =&gt; 1+2+3 = 6\r\n\r\n6 == sum(divisors) # which is true\r\n\r\n# Example\r\n\r\n```julia\r\nperfect_number(27)     # returns false\r\nperfect_number(28)     # returns true\r\nperfect_number(496)    # returns true\r\nperfect_number(8128)   # returns true\r\nperfect_number(123)    # returns false\r\n```\r\n\r\nContributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee) and [Rratic](https://github.com/Rratic)\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> perfect_number(number::N)<span class=\"hljs-keyword\">where</span> N&lt;:<span class=\"hljs-built_in\">Number</span>\r\n    divisors = <span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Int</span>}()\r\n    <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span>:(number÷<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">if</span> number % i == <span class=\"hljs-number\">0</span>\r\n            push!(divisors, i)\r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> sum(divisors) == number\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "simolab99",
      "email": "68537129+simolab99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "mohammadreza490",
      "email": "47437328+mohammadreza490@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "Rratic@163.com",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ephraim Atta-Duncan",
      "email": "55143799+dephraiim@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Utsav1999",
      "email": "utsavakash123@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}