{
  "slug": "binary-search-tree",
  "name": "Binary Search Tree",
  "categories": [
    "datastructures",
    "binarytree"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\binary_tree\\binary_search_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\binary_tree\\binary_search_tree.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nA binary search Tree\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, value, parent</span>):\r\n        self.value = value\r\n        self.parent = parent  <span class=\"hljs-comment\"># Added in order to delete a node easier</span>\r\n        self.left = <span class=\"hljs-literal\">None</span>\r\n        self.right = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">from</span> pprint <span class=\"hljs-keyword\">import</span> pformat\r\n\r\n        <span class=\"hljs-keyword\">if</span> self.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> self.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(self.value)\r\n        <span class=\"hljs-keyword\">return</span> pformat({<span class=\"hljs-string\">&quot;%s&quot;</span> % (self.value): (self.left, self.right)}, indent=<span class=\"hljs-number\">1</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinarySearchTree</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, root=<span class=\"hljs-literal\">None</span></span>):\r\n        self.root = root\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return a string of all the Nodes using in order traversal\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(self.root)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__reassign_nodes</span>(<span class=\"hljs-params\">self, node, new_children</span>):\r\n        <span class=\"hljs-keyword\">if</span> new_children <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># reset its kids</span>\r\n            new_children.parent = node.parent\r\n        <span class=\"hljs-keyword\">if</span> node.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># reset its parent</span>\r\n            <span class=\"hljs-keyword\">if</span> self.is_right(node):  <span class=\"hljs-comment\"># If it is the right children</span>\r\n                node.parent.right = new_children\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                node.parent.left = new_children\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.root = new_children\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_right</span>(<span class=\"hljs-params\">self, node</span>):\r\n        <span class=\"hljs-keyword\">return</span> node == node.parent.right\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">empty</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__insert</span>(<span class=\"hljs-params\">self, value</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Insert a new node in Binary Search Tree with value label\r\n        &quot;&quot;&quot;</span>\r\n        new_node = Node(value, <span class=\"hljs-literal\">None</span>)  <span class=\"hljs-comment\"># create a new Node</span>\r\n        <span class=\"hljs-keyword\">if</span> self.empty():  <span class=\"hljs-comment\"># if Tree is empty</span>\r\n            self.root = new_node  <span class=\"hljs-comment\"># set its root</span>\r\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># Tree is not empty</span>\r\n            parent_node = self.root  <span class=\"hljs-comment\"># from root</span>\r\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:  <span class=\"hljs-comment\"># While we don&#x27;t get to a leaf</span>\r\n                <span class=\"hljs-keyword\">if</span> value &lt; parent_node.value:  <span class=\"hljs-comment\"># We go left</span>\r\n                    <span class=\"hljs-keyword\">if</span> parent_node.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                        parent_node.left = new_node  <span class=\"hljs-comment\"># We insert the new node in a leaf</span>\r\n                        <span class=\"hljs-keyword\">break</span>\r\n                    <span class=\"hljs-keyword\">else</span>:\r\n                        parent_node = parent_node.left\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    <span class=\"hljs-keyword\">if</span> parent_node.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n                        parent_node.right = new_node\r\n                        <span class=\"hljs-keyword\">break</span>\r\n                    <span class=\"hljs-keyword\">else</span>:\r\n                        parent_node = parent_node.right\r\n            new_node.parent = parent_node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, *values</span>):\r\n        <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> values:\r\n            self.__insert(value)\r\n        <span class=\"hljs-keyword\">return</span> self\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self, value</span>):\r\n        <span class=\"hljs-keyword\">if</span> self.empty():\r\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;Warning: Tree is empty! please use another.&quot;</span>)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            node = self.root\r\n            <span class=\"hljs-comment\"># use lazy evaluation here to avoid NoneType Attribute error</span>\r\n            <span class=\"hljs-keyword\">while</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> node.value <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> value:\r\n                node = node.left <span class=\"hljs-keyword\">if</span> value &lt; node.value <span class=\"hljs-keyword\">else</span> node.right\r\n            <span class=\"hljs-keyword\">return</span> node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_max</span>(<span class=\"hljs-params\">self, node=<span class=\"hljs-literal\">None</span></span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        We go deep on the right branch\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            node = self.root\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.empty():\r\n            <span class=\"hljs-keyword\">while</span> node.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n                node = node.right\r\n        <span class=\"hljs-keyword\">return</span> node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_min</span>(<span class=\"hljs-params\">self, node=<span class=\"hljs-literal\">None</span></span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        We go deep on the left branch\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            node = self.root\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.empty():\r\n            node = self.root\r\n            <span class=\"hljs-keyword\">while</span> node.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n                node = node.left\r\n        <span class=\"hljs-keyword\">return</span> node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">self, value</span>):\r\n        node = self.search(value)  <span class=\"hljs-comment\"># Look for the node with that label</span>\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">if</span> node.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> node.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># If it has no children</span>\r\n                self.__reassign_nodes(node, <span class=\"hljs-literal\">None</span>)\r\n            <span class=\"hljs-keyword\">elif</span> node.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># Has only right children</span>\r\n                self.__reassign_nodes(node, node.right)\r\n            <span class=\"hljs-keyword\">elif</span> node.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># Has only left children</span>\r\n                self.__reassign_nodes(node, node.left)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                tmp_node = self.get_max(\r\n                    node.left\r\n                )  <span class=\"hljs-comment\"># Gets the max value of the left branch</span>\r\n                self.remove(tmp_node.value)\r\n                node.value = (\r\n                    tmp_node.value\r\n                )  <span class=\"hljs-comment\"># Assigns the value to the node to delete and keep tree structure</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">preorder_traverse</span>(<span class=\"hljs-params\">self, node</span>):\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">yield</span> node  <span class=\"hljs-comment\"># Preorder Traversal</span>\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self.preorder_traverse(node.left)\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self.preorder_traverse(node.right)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">traversal_tree</span>(<span class=\"hljs-params\">self, traversal_function=<span class=\"hljs-literal\">None</span></span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        This function traversal the tree.\r\n        You can pass a function to traversal the tree as needed by client code\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> traversal_function <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.preorder_traverse(self.root)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> traversal_function(self.root)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inorder</span>(<span class=\"hljs-params\">self, arr: <span class=\"hljs-built_in\">list</span>, node: Node</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Perform an inorder traversal and append values of the nodes to\r\n        a list named arr&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> node:\r\n            self.inorder(arr, node.left)\r\n            arr.append(node.value)\r\n            self.inorder(arr, node.right)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_kth_smallest</span>(<span class=\"hljs-params\">self, k: <span class=\"hljs-built_in\">int</span>, node: Node</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Return the kth smallest element in a binary search tree&quot;&quot;&quot;</span>\r\n        arr: <span class=\"hljs-built_in\">list</span> = []\r\n        self.inorder(arr, node)  <span class=\"hljs-comment\"># append all values to list using inorder traversal</span>\r\n        <span class=\"hljs-keyword\">return</span> arr[k - <span class=\"hljs-number\">1</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">postorder</span>(<span class=\"hljs-params\">curr_node</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    postOrder (left, right, self)\r\n    &quot;&quot;&quot;</span>\r\n    node_list = <span class=\"hljs-built_in\">list</span>()\r\n    <span class=\"hljs-keyword\">if</span> curr_node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n        node_list = postorder(curr_node.left) + postorder(curr_node.right) + [curr_node]\r\n    <span class=\"hljs-keyword\">return</span> node_list\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search_tree</span>():\r\n    <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n    Example\r\n                  8\r\n                 / \\\r\n                3   10\r\n               / \\    \\\r\n              1   6    14\r\n                 / \\   /\r\n                4   7 13\r\n\r\n    &gt;&gt;&gt; t = BinarySearchTree().insert(8, 3, 6, 1, 10, 14, 13, 4, 7)\r\n    &gt;&gt;&gt; print(&quot; &quot;.join(repr(i.value) for i in t.traversal_tree()))\r\n    8 3 1 6 4 7 10 14 13\r\n    &gt;&gt;&gt; print(&quot; &quot;.join(repr(i.value) for i in t.traversal_tree(postorder)))\r\n    1 4 7 6 3 13 14 10 8\r\n    &gt;&gt;&gt; BinarySearchTree().search(6)\r\n    Traceback (most recent call last):\r\n    ...\r\n    IndexError: Warning: Tree is empty! please use another.\r\n    &quot;&quot;&quot;</span>\r\n    testlist = (<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>)\r\n    t = BinarySearchTree()\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> testlist:\r\n        t.insert(i)\r\n\r\n    <span class=\"hljs-comment\"># Prints all the elements of the list in order traversal</span>\r\n    <span class=\"hljs-built_in\">print</span>(t)\r\n\r\n    <span class=\"hljs-keyword\">if</span> t.search(<span class=\"hljs-number\">6</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The value 6 exists&quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The value 6 doesn&#x27;t exist&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> t.search(-<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The value -1 exists&quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The value -1 doesn&#x27;t exist&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> t.empty():\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Max Value: &quot;</span>, t.get_max().value)\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Min Value: &quot;</span>, t.get_min().value)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> testlist:\r\n        t.remove(i)\r\n        <span class=\"hljs-built_in\">print</span>(t)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    <span class=\"hljs-comment\"># binary_search_tree()</span>\r\n"
    },
    "javascript": {
      "dir": "Data-Structures\\Tree\\BinarySearchTree.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures\\Tree\\BinarySearchTree.js",
      "code": "<span class=\"hljs-comment\">/* Binary Search Tree!!\r\n*\r\n* Nodes that will go on the Binary Tree.\r\n* They consist of the data in them, the node to the left, the node\r\n* to the right, and the parent from which they came from.\r\n*\r\n* A binary tree is a data structure in which an element\r\n* has two successors(children). The left child is usually\r\n* smaller than the parent, and the right child is usually\r\n* bigger.\r\n*/</span>\r\n\r\n<span class=\"hljs-comment\">// class Node</span>\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Node</span> = (<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Node</span> () {\r\n  <span class=\"hljs-comment\">// Node in the tree</span>\r\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Node</span> (val) {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = val\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> = <span class=\"hljs-literal\">null</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span> = <span class=\"hljs-literal\">null</span>\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Search the tree for a value</span>\r\n  <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">search</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) {\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> === val) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (val &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> !== <span class=\"hljs-literal\">null</span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span>.<span class=\"hljs-title function_\">search</span>(val)\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (val &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span> !== <span class=\"hljs-literal\">null</span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>.<span class=\"hljs-title function_\">search</span>(val)\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Visit a node</span>\r\n  <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">visit</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">output = value =&gt; <span class=\"hljs-variable language_\">console</span>.log(value)</span>) {\r\n    <span class=\"hljs-comment\">// Recursively go left</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> !== <span class=\"hljs-literal\">null</span>) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span>.<span class=\"hljs-title function_\">visit</span>()\r\n    }\r\n    <span class=\"hljs-comment\">// Print out value</span>\r\n    <span class=\"hljs-title function_\">output</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>)\r\n    <span class=\"hljs-comment\">// Recursively go right</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span> !== <span class=\"hljs-literal\">null</span>) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>.<span class=\"hljs-title function_\">visit</span>()\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Add a node</span>\r\n  <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">addNode</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">n</span>) {\r\n    <span class=\"hljs-keyword\">if</span> (n.<span class=\"hljs-property\">value</span> &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>) {\r\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> === <span class=\"hljs-literal\">null</span>) {\r\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> = n\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span>.<span class=\"hljs-title function_\">addNode</span>(n)\r\n      }\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (n.<span class=\"hljs-property\">value</span> &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>) {\r\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span> === <span class=\"hljs-literal\">null</span>) {\r\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span> = n\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>.<span class=\"hljs-title function_\">addNode</span>(n)\r\n      }\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// remove a node</span>\r\n  <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">removeNode</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) {\r\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>) {\r\n      <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> &amp;&amp; !<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span>) {\r\n          <span class=\"hljs-keyword\">const</span> leftMax = <span class=\"hljs-title function_\">maxVal</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span>)\r\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = leftMax\r\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span>.<span class=\"hljs-title function_\">removeNode</span>(leftMax)\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n          <span class=\"hljs-keyword\">const</span> rightMin = <span class=\"hljs-title function_\">minVal</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>)\r\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = rightMin\r\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>.<span class=\"hljs-title function_\">removeNode</span>(rightMin)\r\n        }\r\n      }\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (val &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span>.<span class=\"hljs-title function_\">removeNode</span>(val)\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (val &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>.<span class=\"hljs-title function_\">removeNode</span>(val)\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// find maximum value in the tree</span>\r\n  <span class=\"hljs-keyword\">const</span> maxVal = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) {\r\n    <span class=\"hljs-keyword\">if</span> (!node.<span class=\"hljs-property\">right</span>) {\r\n      <span class=\"hljs-keyword\">return</span> node.<span class=\"hljs-property\">value</span>\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">maxVal</span>(node.<span class=\"hljs-property\">right</span>)\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// find minimum value in the tree</span>\r\n  <span class=\"hljs-keyword\">const</span> minVal = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">node</span>) {\r\n    <span class=\"hljs-keyword\">if</span> (!node.<span class=\"hljs-property\">left</span>) {\r\n      <span class=\"hljs-keyword\">return</span> node.<span class=\"hljs-property\">value</span>\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">minVal</span>(node.<span class=\"hljs-property\">left</span>)\r\n  }\r\n  <span class=\"hljs-comment\">// returns the constructor</span>\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Node</span>\r\n}())\r\n\r\n<span class=\"hljs-comment\">// class Tree</span>\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Tree</span> = (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\r\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Tree</span> () {\r\n    <span class=\"hljs-comment\">// Just store the root</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> = <span class=\"hljs-literal\">null</span>\r\n  };\r\n\r\n  <span class=\"hljs-comment\">// Inorder traversal</span>\r\n  <span class=\"hljs-title class_\">Tree</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">traverse</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\r\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>) {\r\n      <span class=\"hljs-comment\">// No nodes are there in the tree till now</span>\r\n      <span class=\"hljs-keyword\">return</span>\r\n    }\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-title function_\">visit</span>()\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Start by searching the root</span>\r\n  <span class=\"hljs-title class_\">Tree</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">search</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) {\r\n    <span class=\"hljs-keyword\">const</span> found = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-title function_\">search</span>(val)\r\n    <span class=\"hljs-keyword\">if</span> (found !== <span class=\"hljs-literal\">null</span>) {\r\n      <span class=\"hljs-keyword\">return</span> found.<span class=\"hljs-property\">value</span>\r\n    }\r\n    <span class=\"hljs-comment\">// not found</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Add a new value to the tree</span>\r\n  <span class=\"hljs-title class_\">Tree</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">addValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) {\r\n    <span class=\"hljs-keyword\">const</span> n = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(val)\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> === <span class=\"hljs-literal\">null</span>) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> = n\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-title function_\">addNode</span>(n)\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// remove a value from the tree</span>\r\n  <span class=\"hljs-title class_\">Tree</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">removeValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) {\r\n    <span class=\"hljs-comment\">// remove something if root exists</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-title function_\">removeNode</span>(val)\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// returns the constructor</span>\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Tree</span>\r\n}())\r\n\r\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Tree</span> }\r\n"
    },
    "c-plus-plus": {
      "dir": "data_structures\\binary_search_tree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures\\binary_search_tree.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\brief A simple tree implementation using structured nodes\r\n *\r\n * \\todo update code to use C++ STL library features and OO structure\r\n * \\warning This program is a poor implementation - C style - and does not\r\n * utilize any of the C++ STL features.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\r\n    <span class=\"hljs-type\">int</span> val;\r\n    node *left;\r\n    node *right;\r\n};\r\n\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Queue</span> {\r\n    node *t[<span class=\"hljs-number\">100</span>];\r\n    <span class=\"hljs-type\">int</span> front;\r\n    <span class=\"hljs-type\">int</span> rear;\r\n};\r\n\r\nQueue queue;\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(node *n)</span> </span>{ queue.t[queue.rear++] = n; }\r\n\r\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> (queue.t[queue.front++]); }\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(node *n, <span class=\"hljs-type\">int</span> x)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (x &lt; n-&gt;val) {\r\n        <span class=\"hljs-keyword\">if</span> (n-&gt;left == <span class=\"hljs-literal\">NULL</span>) {\r\n            node *temp = <span class=\"hljs-keyword\">new</span> node;\r\n            temp-&gt;val = x;\r\n            temp-&gt;left = <span class=\"hljs-literal\">NULL</span>;\r\n            temp-&gt;right = <span class=\"hljs-literal\">NULL</span>;\r\n            n-&gt;left = temp;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-built_in\">Insert</span>(n-&gt;left, x);\r\n        }\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">if</span> (n-&gt;right == <span class=\"hljs-literal\">NULL</span>) {\r\n            node *temp = <span class=\"hljs-keyword\">new</span> node;\r\n            temp-&gt;val = x;\r\n            temp-&gt;left = <span class=\"hljs-literal\">NULL</span>;\r\n            temp-&gt;right = <span class=\"hljs-literal\">NULL</span>;\r\n            n-&gt;right = temp;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-built_in\">Insert</span>(n-&gt;right, x);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">findMaxInLeftST</span><span class=\"hljs-params\">(node *n)</span> </span>{\r\n    <span class=\"hljs-keyword\">while</span> (n-&gt;right != <span class=\"hljs-literal\">NULL</span>) {\r\n        n = n-&gt;right;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> n-&gt;val;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Remove</span><span class=\"hljs-params\">(node *p, node *n, <span class=\"hljs-type\">int</span> x)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n-&gt;val == x) {\r\n        <span class=\"hljs-keyword\">if</span> (n-&gt;right == <span class=\"hljs-literal\">NULL</span> &amp;&amp; n-&gt;left == <span class=\"hljs-literal\">NULL</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (x &lt; p-&gt;val) {\r\n                p-&gt;right = <span class=\"hljs-literal\">NULL</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                p-&gt;left = <span class=\"hljs-literal\">NULL</span>;\r\n            }\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (n-&gt;right == <span class=\"hljs-literal\">NULL</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (x &lt; p-&gt;val) {\r\n                p-&gt;right = n-&gt;left;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                p-&gt;left = n-&gt;left;\r\n            }\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (n-&gt;left == <span class=\"hljs-literal\">NULL</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (x &lt; p-&gt;val) {\r\n                p-&gt;right = n-&gt;right;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                p-&gt;left = n-&gt;right;\r\n            }\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-type\">int</span> y = <span class=\"hljs-built_in\">findMaxInLeftST</span>(n-&gt;left);\r\n            n-&gt;val = y;\r\n            <span class=\"hljs-built_in\">Remove</span>(n, n-&gt;right, y);\r\n        }\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &lt; n-&gt;val) {\r\n        <span class=\"hljs-built_in\">Remove</span>(n, n-&gt;left, x);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-built_in\">Remove</span>(n, n-&gt;right, x);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">BFT</span><span class=\"hljs-params\">(node *n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">NULL</span>) {\r\n        std::cout &lt;&lt; n-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\r\n        <span class=\"hljs-built_in\">enqueue</span>(n-&gt;left);\r\n        <span class=\"hljs-built_in\">enqueue</span>(n-&gt;right);\r\n        <span class=\"hljs-built_in\">BFT</span>(<span class=\"hljs-built_in\">dequeue</span>());\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Pre</span><span class=\"hljs-params\">(node *n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">NULL</span>) {\r\n        std::cout &lt;&lt; n-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\r\n        <span class=\"hljs-built_in\">Pre</span>(n-&gt;left);\r\n        <span class=\"hljs-built_in\">Pre</span>(n-&gt;right);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">In</span><span class=\"hljs-params\">(node *n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">NULL</span>) {\r\n        <span class=\"hljs-built_in\">In</span>(n-&gt;left);\r\n        std::cout &lt;&lt; n-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\r\n        <span class=\"hljs-built_in\">In</span>(n-&gt;right);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Post</span><span class=\"hljs-params\">(node *n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">NULL</span>) {\r\n        <span class=\"hljs-built_in\">Post</span>(n-&gt;left);\r\n        <span class=\"hljs-built_in\">Post</span>(n-&gt;right);\r\n        std::cout &lt;&lt; n-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    queue.front = <span class=\"hljs-number\">0</span>;\r\n    queue.rear = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> value;\r\n    <span class=\"hljs-type\">int</span> ch;\r\n    node *root = <span class=\"hljs-keyword\">new</span> node;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the value of root node :&quot;</span>;\r\n    std::cin &gt;&gt; value;\r\n    root-&gt;val = value;\r\n    root-&gt;left = <span class=\"hljs-literal\">NULL</span>;\r\n    root-&gt;right = <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-keyword\">do</span> {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n1. Insert&quot;</span>\r\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\n2. Delete&quot;</span>\r\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\n3. Breadth First&quot;</span>\r\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\n4. Preorder Depth First&quot;</span>\r\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\n5. Inorder Depth First&quot;</span>\r\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\n6. Postorder Depth First&quot;</span>;\r\n\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter Your Choice : &quot;</span>;\r\n        std::cin &gt;&gt; ch;\r\n        <span class=\"hljs-type\">int</span> x;\r\n        <span class=\"hljs-keyword\">switch</span> (ch) {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the value to be Inserted : &quot;</span>;\r\n            std::cin &gt;&gt; x;\r\n            <span class=\"hljs-built_in\">Insert</span>(root, x);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the value to be Deleted : &quot;</span>;\r\n            std::cin &gt;&gt; x;\r\n            <span class=\"hljs-built_in\">Remove</span>(root, root, x);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\r\n            <span class=\"hljs-built_in\">BFT</span>(root);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\r\n            <span class=\"hljs-built_in\">Pre</span>(root);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\r\n            <span class=\"hljs-built_in\">In</span>(root);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:\r\n            <span class=\"hljs-built_in\">Post</span>(root);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n    } <span class=\"hljs-keyword\">while</span> (ch != <span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "c": {
      "dir": "data_structures\\binary_trees\\binary_search_tree.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\binary_trees\\binary_search_tree.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief A basic unbalanced binary search tree implementation in C.\r\n * @details The implementation has the following functionalities implemented:\r\n * - Insertion\r\n * - Deletion\r\n * - Search by key value\r\n * - Listing of node keys in order of value (from left to right)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** Node, the basic data structure in the tree */</span>\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\r\n{</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">left</span>;</span>  <span class=\"hljs-comment\">/**&lt; left child */</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">right</span>;</span> <span class=\"hljs-comment\">/**&lt; right child */</span>\r\n    <span class=\"hljs-type\">int</span> data;           <span class=\"hljs-comment\">/**&lt; data of the node */</span>\r\n} node;\r\n\r\n<span class=\"hljs-comment\">/** The node constructor, which receives the key value input and returns a node\r\n * pointer\r\n * @param data data to store in a new node\r\n * @returns new node with the provided data\r\n * @note the node must be deleted before program terminates to avoid memory\r\n * leaks\r\n */</span>\r\nnode *<span class=\"hljs-title function_\">newNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span>\r\n{\r\n    <span class=\"hljs-comment\">// creates a slug</span>\r\n    node *tmp = (node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(node));\r\n\r\n    <span class=\"hljs-comment\">// initializes the slug</span>\r\n    tmp-&gt;data = data;\r\n    tmp-&gt;left = <span class=\"hljs-literal\">NULL</span>;\r\n    tmp-&gt;right = <span class=\"hljs-literal\">NULL</span>;\r\n\r\n    <span class=\"hljs-keyword\">return</span> tmp;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Insertion procedure, which inserts the input key in a new node in the tree\r\n * @param root pointer to parent node\r\n * @param data value to store int he new node\r\n * @returns pointer to parent node\r\n */</span>\r\nnode *<span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(node *root, <span class=\"hljs-type\">int</span> data)</span>\r\n{\r\n    <span class=\"hljs-comment\">// If the root of the subtree is null, insert key here</span>\r\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        root = newNode(data);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data &gt; root-&gt;data)\r\n    {\r\n        <span class=\"hljs-comment\">// If it isn&#x27;t null and the input key is greater than the root key,</span>\r\n        <span class=\"hljs-comment\">// insert in the right leaf</span>\r\n        root-&gt;right = insert(root-&gt;right, data);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data &lt; root-&gt;data)\r\n    {  <span class=\"hljs-comment\">// If it isn&#x27;t null and the input key is lower than the root key, insert</span>\r\n       <span class=\"hljs-comment\">// in the left leaf</span>\r\n        root-&gt;left = insert(root-&gt;left, data);\r\n    }\r\n    <span class=\"hljs-comment\">// Returns the modified tree</span>\r\n    <span class=\"hljs-keyword\">return</span> root;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Utilitary procedure to find the greatest key in the left subtree\r\n * @param root pointer to parent node\r\n * @returns pointer to parent node\r\n */</span>\r\nnode *<span class=\"hljs-title function_\">getMax</span><span class=\"hljs-params\">(node *root)</span>\r\n{\r\n    <span class=\"hljs-comment\">// If there&#x27;s no leaf to the right, then this is the maximum key value</span>\r\n    <span class=\"hljs-keyword\">if</span> (root-&gt;right != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> getMax(root-&gt;right);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> root;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Deletion procedure, which searches for the input key in the tree and removes\r\n * it if present\r\n * @param root pointer to parent node\r\n * @param data value to search for int the node\r\n * @returns pointer to parent node\r\n */</span>\r\nnode *<span class=\"hljs-title function_\">delete</span> <span class=\"hljs-params\">(node *root, <span class=\"hljs-type\">int</span> data)</span>\r\n{\r\n    <span class=\"hljs-comment\">// If the root is null, nothing to be done</span>\r\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> root;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data &gt; root-&gt;data)\r\n    {  <span class=\"hljs-comment\">// If the input key is greater than the root&#x27;s, search in the right</span>\r\n        <span class=\"hljs-comment\">// subtree</span>\r\n        root-&gt;right = delete (root-&gt;right, data);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data &lt; root-&gt;data)\r\n    {  <span class=\"hljs-comment\">// If the input key is lower than the root&#x27;s, search in the left subtree</span>\r\n        root-&gt;left = delete (root-&gt;left, data);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data == root-&gt;data)\r\n    {\r\n        <span class=\"hljs-comment\">// If the input key matches the root&#x27;s, check the following cases</span>\r\n        <span class=\"hljs-comment\">// termination condition</span>\r\n        <span class=\"hljs-keyword\">if</span> ((root-&gt;left == <span class=\"hljs-literal\">NULL</span>) &amp;&amp; (root-&gt;right == <span class=\"hljs-literal\">NULL</span>))\r\n        {  <span class=\"hljs-comment\">// Case 1: the root has no leaves, remove the node</span>\r\n            <span class=\"hljs-built_in\">free</span>(root);\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (root-&gt;left == <span class=\"hljs-literal\">NULL</span>)\r\n        {  <span class=\"hljs-comment\">// Case 2: the root has one leaf, make the leaf the new root and</span>\r\n            <span class=\"hljs-comment\">// remove</span>\r\n            <span class=\"hljs-comment\">// the old root</span>\r\n            node *tmp = root;\r\n            root = root-&gt;right;\r\n            <span class=\"hljs-built_in\">free</span>(tmp);\r\n            <span class=\"hljs-keyword\">return</span> root;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (root-&gt;right == <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            node *tmp = root;\r\n            root = root-&gt;left;\r\n            <span class=\"hljs-built_in\">free</span>(tmp);\r\n            <span class=\"hljs-keyword\">return</span> root;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {  <span class=\"hljs-comment\">// Case 3: the root has 2 leaves, find the greatest key in the left</span>\r\n            <span class=\"hljs-comment\">// subtree and switch with the root&#x27;s</span>\r\n\r\n            <span class=\"hljs-comment\">// finds the biggest node in the left branch.</span>\r\n            node *tmp = getMax(root-&gt;left);\r\n\r\n            <span class=\"hljs-comment\">// sets the data of this node equal to the data of the biggest node</span>\r\n            <span class=\"hljs-comment\">// (lefts)</span>\r\n            root-&gt;data = tmp-&gt;data;\r\n            root-&gt;left = delete (root-&gt;left, tmp-&gt;data);\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> root;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Search procedure, which looks for the input key in the tree and returns 1 if\r\n * it&#x27;s present or 0 if it&#x27;s not in the tree\r\n * @param root pointer to parent node\r\n * @param data value to store int he new node\r\n * @returns 0 if value not found in the nodes\r\n * @returns 1 if value was found\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(node *root, <span class=\"hljs-type\">int</span> data)</span>\r\n{\r\n    <span class=\"hljs-comment\">// If the root is null, the key&#x27;s not present</span>\r\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data &gt; root-&gt;data)\r\n    {\r\n        <span class=\"hljs-comment\">// If the input key is greater than the root&#x27;s, search in the right</span>\r\n        <span class=\"hljs-comment\">// subtree</span>\r\n        <span class=\"hljs-keyword\">return</span> find(root-&gt;right, data);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data &lt; root-&gt;data)\r\n    {\r\n        <span class=\"hljs-comment\">// If the input key is lower than the root&#x27;s, search in the left subtree</span>\r\n        <span class=\"hljs-keyword\">return</span> find(root-&gt;left, data);\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data == root-&gt;data)\r\n    {\r\n        <span class=\"hljs-comment\">// If the input and the root key match, return 1</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {  <span class=\"hljs-comment\">// unknown result!!</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Utilitary procedure to measure the height of the binary tree\r\n * @param root pointer to parent node\r\n * @param data value to store int he new node\r\n * @returns 0 if value not found in the nodes\r\n * @returns height of nodes to get to data from parent node\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">height</span><span class=\"hljs-params\">(node *root)</span>\r\n{\r\n    <span class=\"hljs-comment\">// If the root is null, this is the bottom of the tree (height 0)</span>\r\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-comment\">// Get the height from both left and right subtrees to check which is</span>\r\n        <span class=\"hljs-comment\">// the greatest</span>\r\n        <span class=\"hljs-type\">int</span> right_h = height(root-&gt;right);\r\n        <span class=\"hljs-type\">int</span> left_h = height(root-&gt;left);\r\n\r\n        <span class=\"hljs-comment\">// The final height is the height of the greatest subtree(left or right)</span>\r\n        <span class=\"hljs-comment\">// plus 1(which is the root&#x27;s level)</span>\r\n        <span class=\"hljs-keyword\">if</span> (right_h &gt; left_h)\r\n        {\r\n            <span class=\"hljs-keyword\">return</span> (right_h + <span class=\"hljs-number\">1</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            <span class=\"hljs-keyword\">return</span> (left_h + <span class=\"hljs-number\">1</span>);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Utilitary procedure to free all nodes in a tree\r\n * @param root pointer to parent node\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">purge</span><span class=\"hljs-params\">(node *root)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (root != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (root-&gt;left != <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            purge(root-&gt;left);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (root-&gt;right != <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            purge(root-&gt;right);\r\n        }\r\n        <span class=\"hljs-built_in\">free</span>(root);\r\n        root = <span class=\"hljs-literal\">NULL</span>;  <span class=\"hljs-comment\">// reset pointer</span>\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Traversal procedure to list the current keys in the tree in order of value\r\n * (from the left to the right)\r\n * @param root pointer to parent node\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">inOrder</span><span class=\"hljs-params\">(node *root)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (root != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        inOrder(root-&gt;left);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t[ %d ]\\t&quot;</span>, root-&gt;data);\r\n        inOrder(root-&gt;right);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main funcion */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-comment\">// this reference don&#x27;t change.</span>\r\n    <span class=\"hljs-comment\">// only the tree changes.</span>\r\n    node *root = <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-type\">int</span> opt = <span class=\"hljs-number\">-1</span>;\r\n    <span class=\"hljs-type\">int</span> data = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// event-loop.</span>\r\n    <span class=\"hljs-keyword\">while</span> (opt != <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(\r\n            <span class=\"hljs-string\">&quot;\\n\\n[1] Insert Node\\n[2] Delete Node\\n[3] Find a Node\\n[4] Get &quot;</span>\r\n            <span class=\"hljs-string\">&quot;current Height\\n[5] Print Tree in Crescent Order\\n[0] Quit\\n&quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;opt);  <span class=\"hljs-comment\">// reads the choice of the user</span>\r\n\r\n        <span class=\"hljs-comment\">// processes the choice</span>\r\n        <span class=\"hljs-keyword\">switch</span> (opt)\r\n        {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the new node&#x27;s value:\\n&quot;</span>);\r\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;data);\r\n            root = insert(root, data);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the value to be removed:\\n&quot;</span>);\r\n            <span class=\"hljs-keyword\">if</span> (root != <span class=\"hljs-literal\">NULL</span>)\r\n            {\r\n                <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;data);\r\n                root = delete (root, data);\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Tree is already empty!\\n&quot;</span>);\r\n            }\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the searched value:\\n&quot;</span>);\r\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;data);\r\n            find(root, data) ? <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The value is in the tree.\\n&quot;</span>)\r\n                             : <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The value is not in the tree.\\n&quot;</span>);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Current height of the tree is: %d\\n&quot;</span>, height(root));\r\n            <span class=\"hljs-keyword\">break</span>;\r\n\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\r\n            inOrder(root);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// deletes the tree from the heap.</span>\r\n    purge(root);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "haskell": {
      "dir": "src\\BinaryTree\\BinarySearchTree.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src\\BinaryTree\\BinarySearchTree.hs",
      "code": "<span class=\"hljs-keyword\">module</span> BinaryTree.BinarySearchTree <span class=\"hljs-keyword\">where</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-type\">BTree</span> a = <span class=\"hljs-type\">Empty</span> | <span class=\"hljs-type\">Node</span> a (<span class=\"hljs-type\">BTree</span> <span class=\"hljs-title\">a</span>) (<span class=\"hljs-type\">BTree</span> <span class=\"hljs-title\">a</span>) <span class=\"hljs-keyword\">deriving</span> (<span class=\"hljs-type\">Show</span>)</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-type\">Side</span> = <span class=\"hljs-type\">LeftSide</span> | <span class=\"hljs-type\">RightSide</span> <span class=\"hljs-keyword\">deriving</span> (<span class=\"hljs-type\">Eq</span>, <span class=\"hljs-type\">Show</span>)</span>\r\n\r\n<span class=\"hljs-comment\">-- Function to get the data associated with the node.</span>\r\n<span class=\"hljs-title\">nodeKey</span> :: <span class=\"hljs-type\">BTree</span> a -&gt; <span class=\"hljs-type\">Maybe</span> a\r\n<span class=\"hljs-title\">nodeKey</span> <span class=\"hljs-type\">Empty</span> = <span class=\"hljs-type\">Nothing</span>\r\n<span class=\"hljs-title\">nodeKey</span> (<span class=\"hljs-type\">Node</span> x _ _) = <span class=\"hljs-type\">Just</span> x\r\n\r\n<span class=\"hljs-comment\">-- Perform inorder walk of the binary search tree.</span>\r\n<span class=\"hljs-comment\">-- Cormen, Thomas H., et al. Introduction to algorithms.  pg. 288, MIT press, 2009.</span>\r\n<span class=\"hljs-title\">inorderWalk</span> :: (<span class=\"hljs-type\">Eq</span> a, <span class=\"hljs-type\">Ord</span> a) =&gt; <span class=\"hljs-type\">BTree</span> a -&gt; [a]\r\n<span class=\"hljs-title\">inorderWalk</span> <span class=\"hljs-type\">Empty</span> = []\r\n<span class=\"hljs-title\">inorderWalk</span> (<span class=\"hljs-type\">Node</span> x l r) = (inorderWalk l) ++ [x] ++ (inorderWalk r)\r\n\r\n<span class=\"hljs-comment\">-- Function to insert a value into the tree. Returns the new tree.</span>\r\n<span class=\"hljs-comment\">-- Cormen, Thomas H., et al. Introduction to algorithms.  pg. 294, MIT press, 2009.</span>\r\n<span class=\"hljs-title\">bstInsert</span> :: (<span class=\"hljs-type\">Eq</span> a, <span class=\"hljs-type\">Ord</span> a) =&gt; <span class=\"hljs-type\">BTree</span> a -&gt; a -&gt; <span class=\"hljs-type\">BTree</span> a\r\n<span class=\"hljs-title\">bstInsert</span> <span class=\"hljs-type\">Empty</span> z = <span class=\"hljs-type\">Node</span> z <span class=\"hljs-type\">Empty</span> <span class=\"hljs-type\">Empty</span>\r\n<span class=\"hljs-title\">bstInsert</span> (<span class=\"hljs-type\">Node</span> x l r) z\r\n    | z &lt; x = <span class=\"hljs-type\">Node</span> x (bstInsert l z) r\r\n    | otherwise = <span class=\"hljs-type\">Node</span> x l (bstInsert r z)\r\n\r\n<span class=\"hljs-comment\">-- Function to find the maximum value in the BST.</span>\r\n<span class=\"hljs-title\">bstMax</span> :: (<span class=\"hljs-type\">Eq</span> a, <span class=\"hljs-type\">Ord</span> a) =&gt; <span class=\"hljs-type\">BTree</span> a -&gt; <span class=\"hljs-type\">Maybe</span> a\r\n<span class=\"hljs-title\">bstMax</span> <span class=\"hljs-type\">Empty</span> = <span class=\"hljs-type\">Nothing</span>\r\n<span class=\"hljs-title\">bstMax</span> (<span class=\"hljs-type\">Node</span> x <span class=\"hljs-type\">Empty</span> <span class=\"hljs-type\">Empty</span>) = <span class=\"hljs-type\">Just</span> x\r\n<span class=\"hljs-title\">bstMax</span> (<span class=\"hljs-type\">Node</span> x l <span class=\"hljs-type\">Empty</span>) = <span class=\"hljs-type\">Just</span> x\r\n<span class=\"hljs-title\">bstMax</span> (<span class=\"hljs-type\">Node</span> x l r) = bstMax r\r\n\r\n<span class=\"hljs-comment\">-- Function to find the minimum value in the BST.</span>\r\n<span class=\"hljs-title\">bstMin</span> :: (<span class=\"hljs-type\">Eq</span> a, <span class=\"hljs-type\">Ord</span> a) =&gt; <span class=\"hljs-type\">BTree</span> a -&gt; <span class=\"hljs-type\">Maybe</span> a\r\n<span class=\"hljs-title\">bstMin</span> <span class=\"hljs-type\">Empty</span> = <span class=\"hljs-type\">Nothing</span>\r\n<span class=\"hljs-title\">bstMin</span> (<span class=\"hljs-type\">Node</span> x <span class=\"hljs-type\">Empty</span> <span class=\"hljs-type\">Empty</span>) = <span class=\"hljs-type\">Just</span> x\r\n<span class=\"hljs-title\">bstMin</span> (<span class=\"hljs-type\">Node</span> x <span class=\"hljs-type\">Empty</span> r) = <span class=\"hljs-type\">Just</span> x\r\n<span class=\"hljs-title\">bstMin</span> (<span class=\"hljs-type\">Node</span> x l r) = bstMin l\r\n\r\n<span class=\"hljs-comment\">-- Function to build BST from a list of values using a fold.</span>\r\n<span class=\"hljs-title\">bstFromList</span> :: (<span class=\"hljs-type\">Eq</span> a, <span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; <span class=\"hljs-type\">BTree</span> a\r\n<span class=\"hljs-title\">bstFromList</span> [] = <span class=\"hljs-type\">Empty</span>\r\n<span class=\"hljs-title\">bstFromList</span> lst = foldl (\\tree elem -&gt; bstInsert tree elem) <span class=\"hljs-type\">Empty</span> lst\r\n\r\n<span class=\"hljs-title\">sampleTree</span> = bstFromList [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]\r\n\r\n<span class=\"hljs-comment\">-- Function to check if a given tree is a Binary Search Tree.</span>\r\n<span class=\"hljs-comment\">-- Property: </span>\r\n<span class=\"hljs-comment\">--     x is a node in the BST. If y is a node in the left subtree of x then </span>\r\n<span class=\"hljs-comment\">--     y.key &lt;= x.key. If y is a node in the right subtree of x then</span>\r\n<span class=\"hljs-comment\">--     y.key &gt;= x.key.</span>\r\n<span class=\"hljs-comment\">--     Cormen, Thomas H., et al. Introduction to algorithms. MIT press, 2009.</span>\r\n<span class=\"hljs-title\">isBST</span> :: (<span class=\"hljs-type\">Ord</span> a, <span class=\"hljs-type\">Eq</span> a) =&gt; <span class=\"hljs-type\">BTree</span> a -&gt; <span class=\"hljs-type\">Bool</span>\r\n<span class=\"hljs-title\">isBST</span> <span class=\"hljs-type\">Empty</span> = <span class=\"hljs-type\">True</span>\r\n<span class=\"hljs-title\">isBST</span> (<span class=\"hljs-type\">Node</span> x <span class=\"hljs-type\">Empty</span> <span class=\"hljs-type\">Empty</span>) = <span class=\"hljs-type\">True</span>\r\n<span class=\"hljs-title\">isBST</span> (<span class=\"hljs-type\">Node</span> x <span class=\"hljs-type\">Empty</span> r) = (x &lt; (nkey r)) &amp;&amp; (isBST r) <span class=\"hljs-keyword\">where</span> nkey = (\\(<span class=\"hljs-type\">Node</span> n ll rr) -&gt; n)\r\n<span class=\"hljs-title\">isBST</span> (<span class=\"hljs-type\">Node</span> x l <span class=\"hljs-type\">Empty</span>) = (x &gt;= (nkey l)) &amp;&amp; (isBST l) <span class=\"hljs-keyword\">where</span> nkey = (\\(<span class=\"hljs-type\">Node</span> n ll rr) -&gt; n)\r\n<span class=\"hljs-title\">isBST</span> (<span class=\"hljs-type\">Node</span> x l r) = (x &gt;= (nkey l)) &amp;&amp; (x &lt; (nkey r)) &amp;&amp; (isBST l) &amp;&amp; (isBST r) <span class=\"hljs-keyword\">where</span> nkey = (\\(<span class=\"hljs-type\">Node</span> n ll rr) -&gt; n)"
    },
    "rust": {
      "dir": "src\\data_structures\\binary_search_tree.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\data_structures\\binary_search_tree.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\r\n<span class=\"hljs-keyword\">use</span> std::ops::Deref;\r\n\r\n<span class=\"hljs-comment\">/// This struct implements as Binary Search Tree (BST), which is a</span>\r\n<span class=\"hljs-comment\">/// simple data structure for storing sorted data</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">BinarySearchTree</span>&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Ord</span>,\r\n{\r\n    value: <span class=\"hljs-type\">Option</span>&lt;T&gt;,\r\n    left: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;BinarySearchTree&lt;T&gt;&gt;&gt;,\r\n    right: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">Box</span>&lt;BinarySearchTree&lt;T&gt;&gt;&gt;,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">BinarySearchTree</span>&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Ord</span>,\r\n{\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\r\n        <span class=\"hljs-keyword\">Self</span>::<span class=\"hljs-title function_ invoke__\">new</span>()\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; BinarySearchTree&lt;T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Ord</span>,\r\n{\r\n    <span class=\"hljs-comment\">/// Create a new, empty BST</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> BinarySearchTree&lt;T&gt; {\r\n        BinarySearchTree {\r\n            value: <span class=\"hljs-literal\">None</span>,\r\n            left: <span class=\"hljs-literal\">None</span>,\r\n            right: <span class=\"hljs-literal\">None</span>,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Find a value in this tree. Returns True iff value is in this</span>\r\n    <span class=\"hljs-comment\">/// tree, and false otherwise</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">search</span>(&amp;<span class=\"hljs-keyword\">self</span>, value: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.value {\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(key) =&gt; {\r\n                <span class=\"hljs-keyword\">match</span> key.<span class=\"hljs-title function_ invoke__\">cmp</span>(value) {\r\n                    Ordering::Equal =&gt; {\r\n                        <span class=\"hljs-comment\">// key == value</span>\r\n                        <span class=\"hljs-literal\">true</span>\r\n                    }\r\n                    Ordering::Greater =&gt; {\r\n                        <span class=\"hljs-comment\">// key &gt; value</span>\r\n                        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.left {\r\n                            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; node.<span class=\"hljs-title function_ invoke__\">search</span>(value),\r\n                            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">false</span>,\r\n                        }\r\n                    }\r\n                    Ordering::Less =&gt; {\r\n                        <span class=\"hljs-comment\">// key &lt; value</span>\r\n                        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.right {\r\n                            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; node.<span class=\"hljs-title function_ invoke__\">search</span>(value),\r\n                            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">false</span>,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">false</span>,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns a new iterator which iterates over this tree in order</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">iter</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Iterator</span>&lt;Item = &amp;T&gt; {\r\n        BinarySearchTreeIter::<span class=\"hljs-title function_ invoke__\">new</span>(<span class=\"hljs-keyword\">self</span>)\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Insert a value into the appropriate location in this tree.</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insert</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: T) {\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.value.<span class=\"hljs-title function_ invoke__\">is_none</span>() {\r\n            <span class=\"hljs-keyword\">self</span>.value = <span class=\"hljs-title function_ invoke__\">Some</span>(value);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.value {\r\n                <span class=\"hljs-literal\">None</span> =&gt; (),\r\n                <span class=\"hljs-title function_ invoke__\">Some</span>(key) =&gt; {\r\n                    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">target_node</span> = <span class=\"hljs-keyword\">if</span> value &lt; *key {\r\n                        &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.left\r\n                    } <span class=\"hljs-keyword\">else</span> {\r\n                        &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.right\r\n                    };\r\n                    <span class=\"hljs-keyword\">match</span> target_node {\r\n                        <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-keyword\">ref</span> <span class=\"hljs-keyword\">mut</span> node) =&gt; {\r\n                            node.<span class=\"hljs-title function_ invoke__\">insert</span>(value);\r\n                        }\r\n                        <span class=\"hljs-literal\">None</span> =&gt; {\r\n                            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">node</span> = BinarySearchTree::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n                            node.<span class=\"hljs-title function_ invoke__\">insert</span>(value);\r\n                            *target_node = <span class=\"hljs-title function_ invoke__\">Some</span>(Box::<span class=\"hljs-title function_ invoke__\">new</span>(node));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the smallest value in this tree</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">minimum</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;T&gt; {\r\n        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.left {\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; node.<span class=\"hljs-title function_ invoke__\">minimum</span>(),\r\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.value {\r\n                <span class=\"hljs-title function_ invoke__\">Some</span>(value) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(value),\r\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\r\n            },\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the largest value in this tree</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">maximum</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;T&gt; {\r\n        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.right {\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; node.<span class=\"hljs-title function_ invoke__\">maximum</span>(),\r\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.value {\r\n                <span class=\"hljs-title function_ invoke__\">Some</span>(value) =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(value),\r\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\r\n            },\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the largest value in this tree smaller than value</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">floor</span>(&amp;<span class=\"hljs-keyword\">self</span>, value: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;T&gt; {\r\n        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.value {\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(key) =&gt; {\r\n                <span class=\"hljs-keyword\">match</span> key.<span class=\"hljs-title function_ invoke__\">cmp</span>(value) {\r\n                    Ordering::Greater =&gt; {\r\n                        <span class=\"hljs-comment\">// key &gt; value</span>\r\n                        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.left {\r\n                            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; node.<span class=\"hljs-title function_ invoke__\">floor</span>(value),\r\n                            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\r\n                        }\r\n                    }\r\n                    Ordering::Less =&gt; {\r\n                        <span class=\"hljs-comment\">// key &lt; value</span>\r\n                        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.right {\r\n                            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; {\r\n                                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">val</span> = node.<span class=\"hljs-title function_ invoke__\">floor</span>(value);\r\n                                <span class=\"hljs-keyword\">match</span> val {\r\n                                    <span class=\"hljs-title function_ invoke__\">Some</span>(_) =&gt; val,\r\n                                    <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(key),\r\n                                }\r\n                            }\r\n                            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(key),\r\n                        }\r\n                    }\r\n                    Ordering::Equal =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(key),\r\n                }\r\n            }\r\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/// Returns the smallest value in this tree larger than value</span>\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">ceil</span>(&amp;<span class=\"hljs-keyword\">self</span>, value: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;T&gt; {\r\n        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.value {\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(key) =&gt; {\r\n                <span class=\"hljs-keyword\">match</span> key.<span class=\"hljs-title function_ invoke__\">cmp</span>(value) {\r\n                    Ordering::Less =&gt; {\r\n                        <span class=\"hljs-comment\">// key &lt; value</span>\r\n                        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.right {\r\n                            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; node.<span class=\"hljs-title function_ invoke__\">ceil</span>(value),\r\n                            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\r\n                        }\r\n                    }\r\n                    Ordering::Greater =&gt; {\r\n                        <span class=\"hljs-comment\">// key &gt; value</span>\r\n                        <span class=\"hljs-keyword\">match</span> &amp;<span class=\"hljs-keyword\">self</span>.left {\r\n                            <span class=\"hljs-title function_ invoke__\">Some</span>(node) =&gt; {\r\n                                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">val</span> = node.<span class=\"hljs-title function_ invoke__\">ceil</span>(value);\r\n                                <span class=\"hljs-keyword\">match</span> val {\r\n                                    <span class=\"hljs-title function_ invoke__\">Some</span>(_) =&gt; val,\r\n                                    <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(key),\r\n                                }\r\n                            }\r\n                            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-title function_ invoke__\">Some</span>(key),\r\n                        }\r\n                    }\r\n                    Ordering::Equal =&gt; {\r\n                        <span class=\"hljs-comment\">// key == value</span>\r\n                        <span class=\"hljs-title function_ invoke__\">Some</span>(key)\r\n                    }\r\n                }\r\n            }\r\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">BinarySearchTreeIter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Ord</span>,\r\n{\r\n    stack: <span class=\"hljs-type\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> BinarySearchTree&lt;T&gt;&gt;,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; BinarySearchTreeIter&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Ord</span>,\r\n{\r\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>(tree: &amp;BinarySearchTree&lt;T&gt;) <span class=\"hljs-punctuation\">-&gt;</span> BinarySearchTreeIter&lt;T&gt; {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">iter</span> = BinarySearchTreeIter { stack: <span class=\"hljs-built_in\">vec!</span>[tree] };\r\n        iter.<span class=\"hljs-title function_ invoke__\">stack_push_left</span>();\r\n        iter\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">stack_push_left</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(child) = &amp;<span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">last</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>().left {\r\n            <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">push</span>(child);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">BinarySearchTreeIter</span>&lt;<span class=\"hljs-symbol\">&#x27;a</span>, T&gt;\r\n<span class=\"hljs-keyword\">where</span>\r\n    T: <span class=\"hljs-built_in\">Ord</span>,\r\n{\r\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = &amp;<span class=\"hljs-symbol\">&#x27;a</span> T;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">&#x27;a</span> T&gt; {\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\r\n            <span class=\"hljs-literal\">None</span>\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">node</span> = <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">pop</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>();\r\n            <span class=\"hljs-keyword\">if</span> node.right.<span class=\"hljs-title function_ invoke__\">is_some</span>() {\r\n                <span class=\"hljs-keyword\">self</span>.stack.<span class=\"hljs-title function_ invoke__\">push</span>(node.right.<span class=\"hljs-title function_ invoke__\">as_ref</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>().<span class=\"hljs-title function_ invoke__\">deref</span>());\r\n                <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">stack_push_left</span>();\r\n            }\r\n            node.value.<span class=\"hljs-title function_ invoke__\">as_ref</span>()\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> test {\r\n    <span class=\"hljs-keyword\">use</span> super::BinarySearchTree;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">prequel_memes_tree</span>() <span class=\"hljs-punctuation\">-&gt;</span> BinarySearchTree&lt;&amp;<span class=\"hljs-symbol\">&#x27;static</span> <span class=\"hljs-type\">str</span>&gt; {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree</span> = BinarySearchTree::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;hello there&quot;</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;general kenobi&quot;</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;you are a bold one&quot;</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;kill him&quot;</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;back away...I will deal with this jedi slime myself&quot;</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;your move&quot;</span>);\r\n        tree.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-string\">&quot;you fool&quot;</span>);\r\n        tree\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_search</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span> = <span class=\"hljs-title function_ invoke__\">prequel_memes_tree</span>();\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">search</span>(&amp;<span class=\"hljs-string\">&quot;hello there&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">search</span>(&amp;<span class=\"hljs-string\">&quot;you are a bold one&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">search</span>(&amp;<span class=\"hljs-string\">&quot;general kenobi&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">search</span>(&amp;<span class=\"hljs-string\">&quot;you fool&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">search</span>(&amp;<span class=\"hljs-string\">&quot;kill him&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert!</span>(\r\n            !tree.<span class=\"hljs-title function_ invoke__\">search</span>(&amp;<span class=\"hljs-string\">&quot;but i was going to tosche station to pick up some power converters&quot;</span>,)\r\n        );\r\n        <span class=\"hljs-built_in\">assert!</span>(!tree.<span class=\"hljs-title function_ invoke__\">search</span>(&amp;<span class=\"hljs-string\">&quot;only a sith deals in absolutes&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert!</span>(!tree.<span class=\"hljs-title function_ invoke__\">search</span>(&amp;<span class=\"hljs-string\">&quot;you underestimate my power&quot;</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_maximum_and_minimum</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span> = <span class=\"hljs-title function_ invoke__\">prequel_memes_tree</span>();\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">maximum</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-string\">&quot;your move&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            *tree.<span class=\"hljs-title function_ invoke__\">minimum</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            <span class=\"hljs-string\">&quot;back away...I will deal with this jedi slime myself&quot;</span>\r\n        );\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">tree2</span>: BinarySearchTree&lt;<span class=\"hljs-type\">i32</span>&gt; = BinarySearchTree::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        <span class=\"hljs-built_in\">assert!</span>(tree2.<span class=\"hljs-title function_ invoke__\">maximum</span>().<span class=\"hljs-title function_ invoke__\">is_none</span>());\r\n        <span class=\"hljs-built_in\">assert!</span>(tree2.<span class=\"hljs-title function_ invoke__\">minimum</span>().<span class=\"hljs-title function_ invoke__\">is_none</span>());\r\n        tree2.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree2.<span class=\"hljs-title function_ invoke__\">minimum</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree2.<span class=\"hljs-title function_ invoke__\">maximum</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-number\">0</span>);\r\n        tree2.<span class=\"hljs-title function_ invoke__\">insert</span>(-<span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree2.<span class=\"hljs-title function_ invoke__\">minimum</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), -<span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree2.<span class=\"hljs-title function_ invoke__\">maximum</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-number\">0</span>);\r\n        tree2.<span class=\"hljs-title function_ invoke__\">insert</span>(<span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree2.<span class=\"hljs-title function_ invoke__\">minimum</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), -<span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree2.<span class=\"hljs-title function_ invoke__\">maximum</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-number\">5</span>);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_floor_and_ceil</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span> = <span class=\"hljs-title function_ invoke__\">prequel_memes_tree</span>();\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">floor</span>(&amp;<span class=\"hljs-string\">&quot;hello there&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-string\">&quot;hello there&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            *tree\r\n                .<span class=\"hljs-title function_ invoke__\">floor</span>(&amp;<span class=\"hljs-string\">&quot;these are not the droids you&#x27;re looking for&quot;</span>)\r\n                .<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            <span class=\"hljs-string\">&quot;kill him&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">floor</span>(&amp;<span class=\"hljs-string\">&quot;another death star&quot;</span>).<span class=\"hljs-title function_ invoke__\">is_none</span>());\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">floor</span>(&amp;<span class=\"hljs-string\">&quot;you fool&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-string\">&quot;you fool&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            *tree.<span class=\"hljs-title function_ invoke__\">floor</span>(&amp;<span class=\"hljs-string\">&quot;but i was going to tasche station&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            <span class=\"hljs-string\">&quot;back away...I will deal with this jedi slime myself&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            *tree.<span class=\"hljs-title function_ invoke__\">floor</span>(&amp;<span class=\"hljs-string\">&quot;you underestimate my power&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            <span class=\"hljs-string\">&quot;you fool&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">floor</span>(&amp;<span class=\"hljs-string\">&quot;your new empire&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-string\">&quot;your move&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">ceil</span>(&amp;<span class=\"hljs-string\">&quot;hello there&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-string\">&quot;hello there&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            *tree\r\n                .<span class=\"hljs-title function_ invoke__\">ceil</span>(&amp;<span class=\"hljs-string\">&quot;these are not the droids you&#x27;re looking for&quot;</span>)\r\n                .<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            <span class=\"hljs-string\">&quot;you are a bold one&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            *tree.<span class=\"hljs-title function_ invoke__\">ceil</span>(&amp;<span class=\"hljs-string\">&quot;another death star&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            <span class=\"hljs-string\">&quot;back away...I will deal with this jedi slime myself&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(*tree.<span class=\"hljs-title function_ invoke__\">ceil</span>(&amp;<span class=\"hljs-string\">&quot;you fool&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(), <span class=\"hljs-string\">&quot;you fool&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            *tree.<span class=\"hljs-title function_ invoke__\">ceil</span>(&amp;<span class=\"hljs-string\">&quot;but i was going to tasche station&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            <span class=\"hljs-string\">&quot;general kenobi&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            *tree.<span class=\"hljs-title function_ invoke__\">ceil</span>(&amp;<span class=\"hljs-string\">&quot;you underestimate my power&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            <span class=\"hljs-string\">&quot;your move&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert!</span>(tree.<span class=\"hljs-title function_ invoke__\">ceil</span>(&amp;<span class=\"hljs-string\">&quot;your new empire&quot;</span>).<span class=\"hljs-title function_ invoke__\">is_none</span>());\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_iterator</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tree</span> = <span class=\"hljs-title function_ invoke__\">prequel_memes_tree</span>();\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">iter</span> = tree.<span class=\"hljs-title function_ invoke__\">iter</span>();\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            iter.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            &amp;<span class=\"hljs-string\">&quot;back away...I will deal with this jedi slime myself&quot;</span>\r\n        );\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), &amp;<span class=\"hljs-string\">&quot;general kenobi&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), &amp;<span class=\"hljs-string\">&quot;hello there&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), &amp;<span class=\"hljs-string\">&quot;kill him&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), &amp;<span class=\"hljs-string\">&quot;you are a bold one&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), &amp;<span class=\"hljs-string\">&quot;you fool&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>(), &amp;<span class=\"hljs-string\">&quot;your move&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-literal\">None</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(iter.<span class=\"hljs-title function_ invoke__\">next</span>(), <span class=\"hljs-literal\">None</span>);\r\n    }\r\n}\r\n"
    },
    "lua": {
      "dir": "src\\data_structures\\sorted_set\\binary_search_tree.lua",
      "url": "https://github.com/TheAlgorithms/lua/tree/master/src\\data_structures\\sorted_set\\binary_search_tree.lua",
      "code": "<span class=\"hljs-keyword\">local</span> bst = {}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst.less_than</span><span class=\"hljs-params\">(a, b)</span></span>\r\n\t<span class=\"hljs-comment\">-- boolean indicating if a &lt; b</span>\r\n\t<span class=\"hljs-keyword\">return</span> a &lt; b\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst.new</span><span class=\"hljs-params\">(less_than)</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> { less_than = less_than }\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst:empty</span><span class=\"hljs-params\">()</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">self</span>.root\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst:get</span><span class=\"hljs-params\">(key)</span></span>\r\n\t<span class=\"hljs-keyword\">local</span> less_than = <span class=\"hljs-built_in\">self</span>.less_than\r\n\t<span class=\"hljs-keyword\">local</span> tree = <span class=\"hljs-built_in\">self</span>.root\r\n\t<span class=\"hljs-keyword\">while</span> tree <span class=\"hljs-keyword\">do</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> less_than(key, tree.key) <span class=\"hljs-keyword\">then</span>\r\n\t\t\ttree = tree[<span class=\"hljs-literal\">true</span>]\r\n\t\t<span class=\"hljs-keyword\">elseif</span> less_than(tree.key, key) <span class=\"hljs-keyword\">then</span>\r\n\t\t\ttree = tree[<span class=\"hljs-literal\">false</span>]\r\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">-- neither smaller nor larger than the key =&gt; must be equal</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span> tree.key\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst:has</span><span class=\"hljs-params\">(key)</span></span>\r\n\t<span class=\"hljs-comment\">-- Check if nothing was returned. This also works for `nil` keys.</span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">select</span>(<span class=\"hljs-string\">&quot;#&quot;</span>, <span class=\"hljs-built_in\">self</span>:get(key)) &gt; <span class=\"hljs-number\">0</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\">-- adding keys multiple times is possible (multisets), but not guaranteed to work; it also has worst-case linear time</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst:add</span><span class=\"hljs-params\">(key)</span></span>\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>:empty() <span class=\"hljs-keyword\">then</span>\r\n\t\t<span class=\"hljs-built_in\">self</span>.root = { key = key }\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">local</span> less_than = <span class=\"hljs-built_in\">self</span>.less_than\r\n\t<span class=\"hljs-keyword\">local</span> tree = <span class=\"hljs-built_in\">self</span>.root\r\n\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-keyword\">do</span>\r\n\t\t<span class=\"hljs-keyword\">local</span> is_smaller = less_than(key, tree.key)\r\n\t\t<span class=\"hljs-keyword\">if</span> tree[is_smaller] <span class=\"hljs-keyword\">then</span>\r\n\t\t\ttree = tree[is_smaller]\r\n\t\t<span class=\"hljs-keyword\">else</span>\r\n\t\t\ttree[is_smaller] = { key = key }\r\n\t\t\t<span class=\"hljs-keyword\">break</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst:remove</span><span class=\"hljs-params\">(key)</span></span>\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>:empty() <span class=\"hljs-keyword\">then</span>\r\n\t\t<span class=\"hljs-keyword\">return</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(parent, side)</span></span>\r\n\t\t<span class=\"hljs-keyword\">local</span> tree = parent[side]\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> tree <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">local</span> tree_key = tree.key\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>.less_than(key, tree_key) <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">remove</span>(tree, <span class=\"hljs-literal\">true</span>)\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">self</span>.less_than(tree_key, key) <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">remove</span>(tree, <span class=\"hljs-literal\">false</span>)\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-comment\">-- equals</span>\r\n\t\t<span class=\"hljs-keyword\">if</span> tree[<span class=\"hljs-literal\">true</span>] <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">if</span> tree[<span class=\"hljs-literal\">false</span>] <span class=\"hljs-keyword\">then</span> <span class=\"hljs-comment\">-- two children</span>\r\n\t\t\t\t<span class=\"hljs-comment\">-- pick the leftmost (lm) descendant to replace</span>\r\n\t\t\t\t<span class=\"hljs-keyword\">local</span> lm_parent, lm_key = tree, <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">-- parent of &amp; key to leftmost descendant</span>\r\n\t\t\t\t<span class=\"hljs-keyword\">while</span> lm_parent[lm_key][<span class=\"hljs-literal\">true</span>] <span class=\"hljs-keyword\">do</span>\r\n\t\t\t\t\tlm_parent, lm_key = lm_parent[lm_key], <span class=\"hljs-literal\">true</span>\r\n\t\t\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t\t\t<span class=\"hljs-keyword\">local</span> lm_descendant = lm_parent[lm_key]\r\n\t\t\t\ttree.key = lm_descendant.key <span class=\"hljs-comment\">-- update key</span>\r\n\t\t\t\t<span class=\"hljs-comment\">-- replace leftmost descendant with it&#x27;s only child (if any)</span>\r\n\t\t\t\tlm_parent[lm_key] = lm_descendant[<span class=\"hljs-literal\">false</span>]\r\n\t\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">-- only child</span>\r\n\t\t\t\tparent[side] = tree[<span class=\"hljs-literal\">true</span>] <span class=\"hljs-comment\">-- replace with child</span>\r\n\t\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">elseif</span> tree[<span class=\"hljs-literal\">false</span>] <span class=\"hljs-keyword\">then</span> <span class=\"hljs-comment\">-- only child</span>\r\n\t\t\tparent[side] = tree[<span class=\"hljs-literal\">false</span>] <span class=\"hljs-comment\">-- replace with child</span>\r\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">-- leaf, simply delete parent reference to this node</span>\r\n\t\t\tparent[side] = <span class=\"hljs-literal\">nil</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">return</span> tree_key\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-built_in\">self</span>, <span class=\"hljs-string\">&quot;root&quot;</span>)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst:range</span><span class=\"hljs-params\">(\r\n\t<span class=\"hljs-comment\">-- callback, called with key</span>\r\n\tfunc,\r\n\t<span class=\"hljs-comment\">-- optional min value, inclusive</span>\r\n\tfrom,\r\n\t<span class=\"hljs-comment\">-- optional max value, inclusive; if `to &lt; from`, traverses in reverse (descending) order</span>\r\n\tto\r\n)</span></span>\r\n\t<span class=\"hljs-keyword\">local</span> ascending, descending = <span class=\"hljs-built_in\">self</span>.less_than(from, to), <span class=\"hljs-built_in\">self</span>.less_than(to, from)\r\n\t<span class=\"hljs-keyword\">if</span> descending <span class=\"hljs-keyword\">then</span>\r\n\t\tfrom, to = to, from <span class=\"hljs-comment\">-- swap to &amp; from so that from &lt; to</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">range</span><span class=\"hljs-params\">(tree)</span></span>\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> tree <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\r\n\t\t<span class=\"hljs-keyword\">local</span> geq_from = (from == <span class=\"hljs-literal\">nil</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">self</span>.less_than(tree.key, from)\r\n\t\t<span class=\"hljs-keyword\">local</span> leq_to = (to == <span class=\"hljs-literal\">nil</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">self</span>.less_than(to, tree.key)\r\n\r\n\t\t<span class=\"hljs-keyword\">if</span> ascending <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">if</span> geq_from <span class=\"hljs-keyword\">then</span>\r\n\t\t\t\trange(tree[<span class=\"hljs-literal\">true</span>])\r\n\t\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">elseif</span> leq_to <span class=\"hljs-keyword\">then</span>\r\n\t\t\trange(tree[<span class=\"hljs-literal\">false</span>])\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\r\n\t\t<span class=\"hljs-keyword\">if</span> geq_from <span class=\"hljs-keyword\">and</span> leq_to <span class=\"hljs-keyword\">then</span>\r\n\t\t\tfunc(tree.key)\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\r\n\t\t<span class=\"hljs-keyword\">if</span> ascending <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">if</span> leq_to <span class=\"hljs-keyword\">then</span>\r\n\t\t\t\trange(tree[<span class=\"hljs-literal\">false</span>])\r\n\t\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\t<span class=\"hljs-keyword\">elseif</span> geq_from <span class=\"hljs-keyword\">then</span>\r\n\t\t\trange(tree[<span class=\"hljs-literal\">true</span>])\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\trange(<span class=\"hljs-built_in\">self</span>.root)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst:ascending</span><span class=\"hljs-params\">(func)</span></span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">self</span>:range(func)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bst:descending</span><span class=\"hljs-params\">(func)</span></span>\r\n\t<span class=\"hljs-keyword\">local</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">traverse</span><span class=\"hljs-params\">(tree)</span></span>\r\n\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> tree <span class=\"hljs-keyword\">then</span>\r\n\t\t\t<span class=\"hljs-keyword\">return</span>\r\n\t\t<span class=\"hljs-keyword\">end</span>\r\n\t\ttraverse(tree[<span class=\"hljs-literal\">false</span>])\r\n\t\tfunc(tree.key)\r\n\t\ttraverse(tree[<span class=\"hljs-literal\">true</span>])\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\ttraverse(<span class=\"hljs-built_in\">self</span>.root)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\">-- [post|pre|level]order have been omitted as they make little sense in the context of a sorted set implementation</span>\r\n\r\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;class&quot;</span>)(bst)\r\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Akhil",
      "email": "akhilgodvsdemon@gmail.com",
      "commits": 1
    },
    {
      "name": "Matthias Gilch",
      "email": "matthias.gilch.mg@gmail.com",
      "commits": 1
    },
    {
      "name": "JarredAllen",
      "email": "jarredallen73@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Artur Parowicz",
      "email": "arturparowicz@gmail,com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "liyl",
      "email": "30368453+yaolin-Li@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Pankaj Das",
      "email": "70905358+Pankaj455@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Juliano Nunes",
      "email": "julianomarquesnunes@gmail.com",
      "commits": 1
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 1
    },
    {
      "name": "Nishant Ingle",
      "email": "30694286+Nishant-Ingle@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "liushubin lwx470335",
      "email": "liushubin1@huawei.com",
      "commits": 1
    },
    {
      "name": "Sherman Hui",
      "email": "11592023+shermanhui@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "SiddhantBobde",
      "email": "58205856+SiddhantBobde@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "Hocnonsense",
      "email": "48747984+Hocnonsense@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mickaël Schoentgen",
      "email": "contact@tiger-222.fr",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Walt",
      "email": "32001362+Walt280@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "apple",
      "email": "1991585851@qq.com",
      "commits": 2
    },
    {
      "name": "Himanshu Shekhar",
      "email": "himanshushekharb16@gmail.com",
      "commits": 2
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Gabriel",
      "email": "g4briel.4lves@gmail.com",
      "commits": 2
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 4
    },
    {
      "name": "Pablo",
      "email": "pablo9891@gmail.com",
      "commits": 4
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    },
    {
      "name": "Ashwin Narayan",
      "email": "ashwinnarayan1994@gmail.com",
      "commits": 5
    },
    {
      "name": "Lars Mueller",
      "email": "appgurulars@gmx.de",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}