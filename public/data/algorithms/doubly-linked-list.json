{
  "slug": "doubly-linked-list",
  "name": "Doubly Linked List",
  "categories": [
    "datastructures",
    "linkedlist"
  ],
  "body": {
    "en": "<p>Singly Linked List is a linear and connected data structure made of Nodes. Each node is composed of a variable <code>data</code> where its content is stored and a pointer to the next Node on the list. The Linked List has a pointer to the first element of this Node sequence and may also have another pointer to the last Node to make operations at the far end less time-consuming. You can also store a <code>length</code> variable to store the total length.</p>\n<p>A <strong>Doubly Linked List (DLL)</strong> contains an extra pointer, typically called previous pointer, together with next pointer and data which are there in singly linked list.</p>\n<h3>Advantages over singly linked list</h3>\n<ul>\n<li>A DLL can be traversed in both forward and backward direction.</li>\n<li>The delete operation in DLL is more efficient if pointer to the node to be deleted is given.</li>\n<li>We can quickly insert a new node before a given node.</li>\n</ul>\n<p>In singly linked list, to delete a node, pointer to the previous node is needed. To get this previous node, sometimes the list is traversed. In DLL, we can get the previous node using previous pointer.</p>\n<h3>Disadvantages over singly linked list</h3>\n<ul>\n<li>Every node of DLL Require extra space for an previous pointer. It is possible to implement DLL with single pointer though (See this and this).</li>\n<li>All operations require an extra pointer previous to be maintained. For example, in insertion, we need to modify previous pointers together with next pointers. For example in following functions for insertions at different positions, we need 1 or 2 extra steps to set previous pointer.</li>\n</ul>\n<h3>Time Complexity</h3>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Average</th>\n<th>Worst</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Access</td>\n<td>Θ(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Search</td>\n<td>Θ(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Insertion</td>\n<td>Θ(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Deletion</td>\n<td>Θ(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<h2>Example</h2>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span> </span>{\r\n\r\n    Node head;      <span class=\"hljs-comment\">// Pointer to the first element</span>\r\n\tNode tail;      <span class=\"hljs-comment\">// Optional. Points to the last element</span>\r\n\r\n\t<span class=\"hljs-keyword\">int</span> length;     <span class=\"hljs-comment\">// Optional</span>\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\r\n        <span class=\"hljs-keyword\">int</span> data;   <span class=\"hljs-comment\">// Node data. Can be int, string, float, templates, etc</span>\r\n        Node next;  <span class=\"hljs-comment\">// Pointer to the next node on the list</span>\r\n        Node prev;\r\n\r\n        Node(<span class=\"hljs-keyword\">int</span> data) {\r\n            <span class=\"hljs-keyword\">this</span>.data = data;\r\n        }\r\n    }\r\n\r\n\r\n    <span class=\"hljs-comment\">// Adding a node at the front of the list</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> new_data)</span> </span>{\r\n\r\n        <span class=\"hljs-comment\">/* 1. allocate node\r\n         * 2. put in the data */</span>\r\n        Node new_Node = <span class=\"hljs-keyword\">new</span> Node(new_data);\r\n\r\n        <span class=\"hljs-comment\">/* 3. Make next of new node as head and previous as NULL */</span>\r\n        new_Node.next = head;\r\n        new_Node.prev = <span class=\"hljs-keyword\">null</span>;\r\n\r\n        <span class=\"hljs-comment\">/* 4. change prev of head node to new node */</span>\r\n        <span class=\"hljs-keyword\">if</span> (head != <span class=\"hljs-keyword\">null</span>)\r\n            head.prev = new_Node;\r\n\r\n        <span class=\"hljs-comment\">/* 5. move the head to point to the new node */</span>\r\n        head = new_Node;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* Given a node as prev_node, insert a new node after the given node */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InsertAfter</span><span class=\"hljs-params\">(Node prev_Node, <span class=\"hljs-keyword\">int</span> new_data)</span> </span>{\r\n\r\n        <span class=\"hljs-comment\">/*1. check if the given prev_node is NULL */</span>\r\n        <span class=\"hljs-keyword\">if</span> (prev_Node == <span class=\"hljs-keyword\">null</span>) {\r\n            System.out.println(<span class=\"hljs-string\">\"The given previous node cannot be NULL \"</span>);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* 2. allocate node\r\n         * 3. put in the data */</span>\r\n        Node new_node = <span class=\"hljs-keyword\">new</span> Node(new_data);\r\n\r\n        <span class=\"hljs-comment\">/* 4. Make next of new node as next of prev_node */</span>\r\n        new_node.next = prev_Node.next;\r\n\r\n        <span class=\"hljs-comment\">/* 5. Make the next of prev_node as new_node */</span>\r\n        prev_Node.next = new_node;\r\n\r\n        <span class=\"hljs-comment\">/* 6. Make prev_node as previous of new_node */</span>\r\n        new_node.prev = prev_Node;\r\n\r\n        <span class=\"hljs-comment\">/* 7. Change previous of new_node's next node */</span>\r\n        <span class=\"hljs-keyword\">if</span> (new_node.next != <span class=\"hljs-keyword\">null</span>)\r\n            new_node.next.prev = new_node;\r\n    }\r\n}\n</code></pre>\n<h3>Adding node at front</h3>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/gq/2014/03/DLL_add_front1.png\" alt=\"Tracing of algorithm\"></p>\n<h3>Add a node after a given node</h3>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/gq/2014/03/DLL_add_middle1.png\" alt=\"Tracing of algorithm\"></p>\n<h2>Code Implementation Links</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/DataStructures/Lists/DoublyLinkedList.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Data%20Structure/Doubly%20Linked%20List.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/data_structures/linked_list/doubly_linked_list.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/data-structures/linked-list/double-linkedlist.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/data_structures/linked_lists/double_list.rb\">Ruby</a></li>\n</ul>\n<h2>Video Explanation</h2>\n<p><a href=\"https://www.youtube.com/watch?v=FHMPswJDCvU\">A CS50 video explaining the Doubly Linked List Data Structure</a></p>",
    "es": "<p>Singly Linked List es una estructura de datos lineal y conectada formada por nodos. Cada nodo se compone de una variable 'data' donde se almacena su contenido y un puntero al siguiente nodo de la lista. La lista vinculada tiene un puntero al primer elemento de esta secuencia de nodos y también puede tener otro puntero al último nodo para realizar operaciones en el extremo lejano menos lento. También puede almacenar una variable 'length' para almacenar la longitud total.</p>\n<p>Una lista vinculada doblemente (DLL)** contiene un puntero adicional, normalmente denominado puntero anterior, junto con el puntero siguiente y los datos que están allí en la lista vinculada individualmente.</p>\n<h3>Ventajas sobre la lista vinculada individualmente</h3>\n<ul>\n<li>Un archivo DLL se puede atravesar tanto en dirección hacia delante como hacia atrás.</li>\n<li>La operación de eliminación en DLL es más eficaz si se da puntero al nodo que se va a eliminar.</li>\n<li>Podemos insertar rápidamente un nuevo nodo antes de un nodo determinado.</li>\n</ul>\n<p>En la lista vinculada individualmente, para eliminar un nodo, se necesita puntero al nodo anterior. Para obtener este nodo anterior, a veces se atraviesa la lista. En DLL, podemos obtener el nodo anterior mediante el puntero anterior.</p>\n<h3>Desventajas sobre la lista de vinculados individualmente</h3>\n<ul>\n<li>Cada nodo de DLL requiere espacio adicional para un puntero anterior. Sin embargo, es posible implementar DLL con un solo puntero (Consulte esto y esto).</li>\n<li>Todas las operaciones requieren un puntero adicional anterior para ser mantenido. Por ejemplo, en la inserción, necesitamos modificar punteros anteriores junto con punteros siguientes. Por ejemplo, en las siguientes funciones para las inserciones en diferentes posiciones, necesitamos 1 o 2 pasos adicionales para establecer el puntero anterior.</li>\n</ul>\n<h3>Complejidad temporal</h3>\n<table>\n<thead>\n<tr>\n<th>Operación</th>\n<th>Promedio</th>\n<th>Peor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Acceso</td>\n<td>Ḥ(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Buscar</td>\n<td>Ḥ(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td></td>\n<td>de inserción Θ(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td></td>\n<td>de eliminación Θ(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<h2>Ejemplo</h2>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span> </span>{\r\n\r\n    Node head;      <span class=\"hljs-comment\">// Pointer to the first element</span>\r\n\tNode tail;      <span class=\"hljs-comment\">// Optional. Points to the last element</span>\r\n\r\n\t<span class=\"hljs-keyword\">int</span> length;     <span class=\"hljs-comment\">// Optional</span>\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\r\n        <span class=\"hljs-keyword\">int</span> data;   <span class=\"hljs-comment\">// Node data. Can be int, string, float, templates, etc</span>\r\n        Node next;  <span class=\"hljs-comment\">// Pointer to the next node on the list</span>\r\n        Node prev;\r\n\r\n        Node(<span class=\"hljs-keyword\">int</span> data) {\r\n            <span class=\"hljs-keyword\">this</span>.data = data;\r\n        }\r\n    }\r\n\r\n\r\n    <span class=\"hljs-comment\">// Asignar el nodo al frente de la lista</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> new_data)</span> </span>{\r\n\r\n        <span class=\"hljs-comment\">/* 1. Asignar nodo.\r\n         * 2. Ponga los datos. */</span>\r\n        Node new_Node = <span class=\"hljs-keyword\">new</span> Node(new_data);\r\n\r\n        <span class=\"hljs-comment\">/* 3. Haga el siguiente de nuevo nodo como cabeza y anterior como NULL. */</span>\r\n        new_Node.next = head;\r\n        new_Node.prev = <span class=\"hljs-keyword\">null</span>;\r\n\r\n        <span class=\"hljs-comment\">/* 4. Cambie el nodo principal anterior a nuevo nodo. */</span>\r\n        <span class=\"hljs-keyword\">if</span> (head != <span class=\"hljs-keyword\">null</span>)\r\n            head.prev = new_Node;\r\n\r\n        <span class=\"hljs-comment\">/* 5. Mueva la cabeza para apuntar al nuevo nodo. */</span>\r\n        head = new_Node;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* Dado un nodo como prev_node, inserte un nuevo nodo después del nodo dado. */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InsertAfter</span><span class=\"hljs-params\">(Node prev_Node, <span class=\"hljs-keyword\">int</span> new_data)</span> </span>{\r\n\r\n        <span class=\"hljs-comment\">/* 1. Comprobar si el prev_node dado es NULL. */</span>\r\n        <span class=\"hljs-keyword\">if</span> (prev_Node == <span class=\"hljs-keyword\">null</span>) {\r\n            System.out.println(<span class=\"hljs-string\">\"The given previous node cannot be NULL \"</span>);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* 1. Asignar nodo.\r\n         * 2. Ponga los datos. */</span>\r\n        Node new_node = <span class=\"hljs-keyword\">new</span> Node(new_data);\r\n\r\n        <span class=\"hljs-comment\">/* 4. Haga el siguiente de nuevo nodo como el siguiente de prev_node. */</span>\r\n        new_node.next = prev_Node.next;\r\n\r\n        <span class=\"hljs-comment\">/* 5. Haz el siguiente de prev_node como new_node. */</span>\r\n        prev_Node.next = new_node;\r\n\r\n        <span class=\"hljs-comment\">/* 6. Haga prev_node como antes de new_node. */</span>\r\n        new_node.prev = prev_Node;\r\n\r\n        <span class=\"hljs-comment\">/* 7. Cambie el anterior del siguiente nodo de new_node. */</span>\r\n        <span class=\"hljs-keyword\">if</span> (new_node.next != <span class=\"hljs-keyword\">null</span>)\r\n            new_node.next.prev = new_node;\r\n    }\r\n}\n</code></pre>\n<h3>Adición de nodos en frente</h3>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/gq/2014/03/DLL_add_front1.png\" alt=\"Seguimiento del algoritmo\"></p>\n<h3>Agregue un nodo después de un nodo determinado</h3>\n<p><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/gq/2014/03/DLL_add_middle1.png\" alt=\"Seguimiento del algoritmo\"></p>\n<h2>Enlaces de implementación de código</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/DataStructures/Lists/DoublyLinkedList.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Data%20Structure/Doubly%20Linked%20List.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/data_structures/linked_list/doubly_linked_list.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/data-structures/linked-list/double-linkedlist.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/data_structures/linked_lists/double_list.rb\">Ruby</a></li>\n</ul>\n<h2>Explicación de vídeo</h2>\n<p><a href=\"https://www.youtube.com/watch?v=FHMPswJDCvU\">Un vídeo CS50 explicando la Estructura de Datos de la Lista Doblemente Vinculada</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "data_structures\\linked_list\\doubly_linked_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\linked_list\\doubly_linked_list.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nhttps://en.wikipedia.org/wiki/Doubly_linked_list\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data</span>):\r\n        self.data = data\r\n        self.previous = <span class=\"hljs-literal\">None</span>\r\n        self.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.data}</span>&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoublyLinkedList</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\r\n        self.head = <span class=\"hljs-literal\">None</span>\r\n        self.tail = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; linked_list = DoublyLinkedList()\r\n        &gt;&gt;&gt; linked_list.insert_at_head(&#x27;b&#x27;)\r\n        &gt;&gt;&gt; linked_list.insert_at_head(&#x27;a&#x27;)\r\n        &gt;&gt;&gt; linked_list.insert_at_tail(&#x27;c&#x27;)\r\n        &gt;&gt;&gt; tuple(linked_list)\r\n        (&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)\r\n        &quot;&quot;&quot;</span>\r\n        node = self.head\r\n        <span class=\"hljs-keyword\">while</span> node:\r\n            <span class=\"hljs-keyword\">yield</span> node.data\r\n            node = node.<span class=\"hljs-built_in\">next</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; linked_list = DoublyLinkedList()\r\n        &gt;&gt;&gt; linked_list.insert_at_tail(&#x27;a&#x27;)\r\n        &gt;&gt;&gt; linked_list.insert_at_tail(&#x27;b&#x27;)\r\n        &gt;&gt;&gt; linked_list.insert_at_tail(&#x27;c&#x27;)\r\n        &gt;&gt;&gt; str(linked_list)\r\n        &#x27;a-&gt;b-&gt;c&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join([<span class=\"hljs-built_in\">str</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> self])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; linked_list = DoublyLinkedList()\r\n        &gt;&gt;&gt; for i in range(0, 5):\r\n        ...     linked_list.insert_at_nth(i, i + 1)\r\n        &gt;&gt;&gt; len(linked_list) == 5\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">iter</span>(self)))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_at_head</span>(<span class=\"hljs-params\">self, data</span>):\r\n        self.insert_at_nth(<span class=\"hljs-number\">0</span>, data)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_at_tail</span>(<span class=\"hljs-params\">self, data</span>):\r\n        self.insert_at_nth(<span class=\"hljs-built_in\">len</span>(self), data)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_at_nth</span>(<span class=\"hljs-params\">self, index: <span class=\"hljs-built_in\">int</span>, data</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; linked_list = DoublyLinkedList()\r\n        &gt;&gt;&gt; linked_list.insert_at_nth(-1, 666)\r\n        Traceback (most recent call last):\r\n        ....\r\n        IndexError: list index out of range\r\n        &gt;&gt;&gt; linked_list.insert_at_nth(1, 666)\r\n        Traceback (most recent call last):\r\n        ....\r\n        IndexError: list index out of range\r\n        &gt;&gt;&gt; linked_list.insert_at_nth(0, 2)\r\n        &gt;&gt;&gt; linked_list.insert_at_nth(0, 1)\r\n        &gt;&gt;&gt; linked_list.insert_at_nth(2, 4)\r\n        &gt;&gt;&gt; linked_list.insert_at_nth(2, 3)\r\n        &gt;&gt;&gt; str(linked_list)\r\n        &#x27;1-&gt;2-&gt;3-&gt;4&#x27;\r\n        &gt;&gt;&gt; linked_list.insert_at_nth(5, 5)\r\n        Traceback (most recent call last):\r\n        ....\r\n        IndexError: list index out of range\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt;= index &lt;= <span class=\"hljs-built_in\">len</span>(self):\r\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range&quot;</span>)\r\n        new_node = Node(data)\r\n        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            self.head = self.tail = new_node\r\n        <span class=\"hljs-keyword\">elif</span> index == <span class=\"hljs-number\">0</span>:\r\n            self.head.previous = new_node\r\n            new_node.<span class=\"hljs-built_in\">next</span> = self.head\r\n            self.head = new_node\r\n        <span class=\"hljs-keyword\">elif</span> index == <span class=\"hljs-built_in\">len</span>(self):\r\n            self.tail.<span class=\"hljs-built_in\">next</span> = new_node\r\n            new_node.previous = self.tail\r\n            self.tail = new_node\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            temp = self.head\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, index):\r\n                temp = temp.<span class=\"hljs-built_in\">next</span>\r\n            temp.previous.<span class=\"hljs-built_in\">next</span> = new_node\r\n            new_node.previous = temp.previous\r\n            new_node.<span class=\"hljs-built_in\">next</span> = temp\r\n            temp.previous = new_node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_head</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.delete_at_nth(<span class=\"hljs-number\">0</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_tail</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.delete_at_nth(<span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_at_nth</span>(<span class=\"hljs-params\">self, index: <span class=\"hljs-built_in\">int</span></span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; linked_list = DoublyLinkedList()\r\n        &gt;&gt;&gt; linked_list.delete_at_nth(0)\r\n        Traceback (most recent call last):\r\n        ....\r\n        IndexError: list index out of range\r\n        &gt;&gt;&gt; for i in range(0, 5):\r\n        ...     linked_list.insert_at_nth(i, i + 1)\r\n        &gt;&gt;&gt; linked_list.delete_at_nth(0) == 1\r\n        True\r\n        &gt;&gt;&gt; linked_list.delete_at_nth(3) == 5\r\n        True\r\n        &gt;&gt;&gt; linked_list.delete_at_nth(1) == 3\r\n        True\r\n        &gt;&gt;&gt; str(linked_list)\r\n        &#x27;2-&gt;4&#x27;\r\n        &gt;&gt;&gt; linked_list.delete_at_nth(2)\r\n        Traceback (most recent call last):\r\n        ....\r\n        IndexError: list index out of range\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt;= index &lt;= <span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range&quot;</span>)\r\n        delete_node = self.head  <span class=\"hljs-comment\"># default first node</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self) == <span class=\"hljs-number\">1</span>:\r\n            self.head = self.tail = <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">elif</span> index == <span class=\"hljs-number\">0</span>:\r\n            self.head = self.head.<span class=\"hljs-built_in\">next</span>\r\n            self.head.previous = <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">elif</span> index == <span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>:\r\n            delete_node = self.tail\r\n            self.tail = self.tail.previous\r\n            self.tail.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            temp = self.head\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, index):\r\n                temp = temp.<span class=\"hljs-built_in\">next</span>\r\n            delete_node = temp\r\n            temp.<span class=\"hljs-built_in\">next</span>.previous = temp.previous\r\n            temp.previous.<span class=\"hljs-built_in\">next</span> = temp.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-keyword\">return</span> delete_node.data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">self, data</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n        current = self.head\r\n\r\n        <span class=\"hljs-keyword\">while</span> current.data != data:  <span class=\"hljs-comment\"># Find the position to delete</span>\r\n            <span class=\"hljs-keyword\">if</span> current.<span class=\"hljs-built_in\">next</span>:\r\n                current = current.<span class=\"hljs-built_in\">next</span>\r\n            <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># We have reached the end an no value matches</span>\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;No data matching given value&quot;</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> current == self.head:\r\n            self.delete_head()\r\n\r\n        <span class=\"hljs-keyword\">elif</span> current == self.tail:\r\n            self.delete_tail()\r\n\r\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># Before: 1 &lt;--&gt; 2(current) &lt;--&gt; 3</span>\r\n            current.previous.<span class=\"hljs-built_in\">next</span> = current.<span class=\"hljs-built_in\">next</span>  <span class=\"hljs-comment\"># 1 --&gt; 3</span>\r\n            current.<span class=\"hljs-built_in\">next</span>.previous = current.previous  <span class=\"hljs-comment\"># 1 &lt;--&gt; 3</span>\r\n        <span class=\"hljs-keyword\">return</span> data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; linked_list = DoublyLinkedList()\r\n        &gt;&gt;&gt; linked_list.is_empty()\r\n        True\r\n        &gt;&gt;&gt; linked_list.insert_at_tail(1)\r\n        &gt;&gt;&gt; linked_list.is_empty()\r\n        False\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self) == <span class=\"hljs-number\">0</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_doubly_linked_list</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; test_doubly_linked_list()\r\n    &quot;&quot;&quot;</span>\r\n    linked_list = DoublyLinkedList()\r\n    <span class=\"hljs-keyword\">assert</span> linked_list.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(linked_list) == <span class=\"hljs-string\">&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        linked_list.delete_head()\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen.</span>\r\n    <span class=\"hljs-keyword\">except</span> IndexError:\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen.</span>\r\n\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        linked_list.delete_tail()\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen.</span>\r\n    <span class=\"hljs-keyword\">except</span> IndexError:\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen.</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(linked_list) == i\r\n        linked_list.insert_at_nth(i, i + <span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>))\r\n\r\n    linked_list.insert_at_head(<span class=\"hljs-number\">0</span>)\r\n    linked_list.insert_at_tail(<span class=\"hljs-number\">11</span>)\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">12</span>))\r\n\r\n    <span class=\"hljs-keyword\">assert</span> linked_list.delete_head() == <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">assert</span> linked_list.delete_at_nth(<span class=\"hljs-number\">9</span>) == <span class=\"hljs-number\">10</span>\r\n    <span class=\"hljs-keyword\">assert</span> linked_list.delete_tail() == <span class=\"hljs-number\">11</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(linked_list) == <span class=\"hljs-number\">9</span>\r\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n"
    },
    "javascript": {
      "dir": "Data-Structures\\Linked-List\\test\\DoublyLinkedList.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures\\Linked-List\\test\\DoublyLinkedList.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">DoubleLinkedList</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../DoublyLinkedList&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;DoubleLinkedList&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check append&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n\r\n    list.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getHead</span>().<span class=\"hljs-property\">element</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">1</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getTail</span>().<span class=\"hljs-property\">element</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">2</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check insert&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getHead</span>().<span class=\"hljs-property\">element</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">1</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getTail</span>().<span class=\"hljs-property\">element</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">20</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check removeAt&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>)\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">40</span>)\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">30</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">removeAt</span>(<span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getHead</span>().<span class=\"hljs-property\">element</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">40</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">removeAt</span>(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getTail</span>().<span class=\"hljs-property\">element</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">40</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check delete&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>)\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">40</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-number\">10</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getHead</span>().<span class=\"hljs-property\">element</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">40</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check deleteTail&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>)\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">40</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">deleteTail</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getTail</span>().<span class=\"hljs-property\">element</span>).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-number\">10</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check toString&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">20</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">toString</span>()).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-string\">&#x27;20&#x27;</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check isEmpty&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">isEmpty</span>()).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-literal\">true</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;Hello&#x27;</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">isEmpty</span>()).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check size&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">size</span>()).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-number\">10</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">size</span>()).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">removeAt</span>(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">size</span>()).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check toArray&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n    list.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-number\">1</span>)\r\n    list.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-keyword\">const</span> listArray = list.<span class=\"hljs-title function_\">toArray</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(listArray).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>])\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check getHead&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getHead</span>()).<span class=\"hljs-title function_\">toEqual</span>(<span class=\"hljs-literal\">null</span>)\r\n\r\n    list.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-number\">1</span>)\r\n    list.<span class=\"hljs-title function_\">append</span>(<span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(list.<span class=\"hljs-title function_\">getHead</span>()).<span class=\"hljs-title function_\">toBeInstanceOf</span>(<span class=\"hljs-title class_\">Object</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Check Iterator&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\r\n\r\n    <span class=\"hljs-keyword\">let</span> iterate = list.<span class=\"hljs-title function_\">iterator</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(iterate).<span class=\"hljs-title function_\">toBe</span>(-<span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">5</span>]\r\n    list.<span class=\"hljs-title function_\">append</span>(arr[<span class=\"hljs-number\">0</span>])\r\n    list.<span class=\"hljs-title function_\">append</span>(arr[<span class=\"hljs-number\">1</span>])\r\n    list.<span class=\"hljs-title function_\">append</span>(arr[<span class=\"hljs-number\">2</span>])\r\n    iterate = list.<span class=\"hljs-title function_\">iterator</span>()\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) {\r\n      <span class=\"hljs-title function_\">expect</span>(iterate.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>).<span class=\"hljs-title function_\">toBe</span>(arr[i])\r\n    }\r\n    <span class=\"hljs-title function_\">expect</span>(iterate.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">undefined</span>)\r\n\r\n    iterate = list.<span class=\"hljs-title function_\">iterator</span>()\r\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> item <span class=\"hljs-keyword\">of</span> iterate) {\r\n      <span class=\"hljs-title function_\">expect</span>(item).<span class=\"hljs-title function_\">toBe</span>(arr[count])\r\n      count++\r\n    }\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "data_structures\\doubly_linked_list.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures\\doubly_linked_list.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\r\n    <span class=\"hljs-type\">int</span> val;\r\n    node *prev;\r\n    node *next;\r\n} * start;\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">double_linked_list</span> {\r\n <span class=\"hljs-keyword\">public</span>:\r\n    <span class=\"hljs-built_in\">double_linked_list</span>() { start = <span class=\"hljs-literal\">NULL</span>; }\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span></span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">reverseShow</span><span class=\"hljs-params\">()</span></span>;\r\n};\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">double_linked_list::insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\r\n    node *t = start;\r\n    <span class=\"hljs-keyword\">if</span> (start != <span class=\"hljs-literal\">NULL</span>) {\r\n        <span class=\"hljs-keyword\">while</span> (t-&gt;next != <span class=\"hljs-literal\">NULL</span>) {\r\n            t = t-&gt;next;\r\n        }\r\n        node *n = <span class=\"hljs-keyword\">new</span> node;\r\n        t-&gt;next = n;\r\n        n-&gt;prev = t;\r\n        n-&gt;val = x;\r\n        n-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        node *n = <span class=\"hljs-keyword\">new</span> node;\r\n        n-&gt;val = x;\r\n        n-&gt;prev = <span class=\"hljs-literal\">NULL</span>;\r\n        n-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n        start = n;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">double_linked_list::remove</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\r\n    node *t = start;\r\n    <span class=\"hljs-keyword\">while</span> (t != <span class=\"hljs-literal\">NULL</span> &amp;&amp; t-&gt;val != x) {\r\n        t = t-&gt;next;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (t == <span class=\"hljs-literal\">NULL</span>) {\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (t-&gt;prev == <span class=\"hljs-literal\">NULL</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (t-&gt;next == <span class=\"hljs-literal\">NULL</span>) {\r\n            start = <span class=\"hljs-literal\">NULL</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            start = t-&gt;next;\r\n            start-&gt;prev = <span class=\"hljs-literal\">NULL</span>;\r\n        }\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (t-&gt;next == <span class=\"hljs-literal\">NULL</span>) {\r\n        t-&gt;prev-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        t-&gt;prev-&gt;next = t-&gt;next;\r\n        t-&gt;next-&gt;prev = t-&gt;prev;\r\n    }\r\n    <span class=\"hljs-keyword\">delete</span> t;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">double_linked_list::search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\r\n    node *t = start;\r\n    <span class=\"hljs-type\">int</span> found = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> (t != <span class=\"hljs-literal\">NULL</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (t-&gt;val == x) {\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nFound&quot;</span>;\r\n            found = <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n        t = t-&gt;next;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>) {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nNot Found&quot;</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">double_linked_list::show</span><span class=\"hljs-params\">()</span> </span>{\r\n    node *t = start;\r\n    <span class=\"hljs-keyword\">while</span> (t != <span class=\"hljs-literal\">NULL</span>) {\r\n        std::cout &lt;&lt; t-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\r\n        t = t-&gt;next;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">double_linked_list::reverseShow</span><span class=\"hljs-params\">()</span> </span>{\r\n    node *t = start;\r\n    <span class=\"hljs-keyword\">while</span> (t != <span class=\"hljs-literal\">NULL</span> &amp;&amp; t-&gt;next != <span class=\"hljs-literal\">NULL</span>) {\r\n        t = t-&gt;next;\r\n    }\r\n    <span class=\"hljs-keyword\">while</span> (t != <span class=\"hljs-literal\">NULL</span>) {\r\n        std::cout &lt;&lt; t-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\r\n        t = t-&gt;prev;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> choice, x;\r\n    double_linked_list ob;\r\n    <span class=\"hljs-keyword\">do</span> {\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n1. Insert&quot;</span>;\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n2. Delete&quot;</span>;\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n3. Search&quot;</span>;\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n4. Forward print&quot;</span>;\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n5. Reverse print&quot;</span>;\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nEnter you choice : &quot;</span>;\r\n        std::cin &gt;&gt; choice;\r\n        <span class=\"hljs-keyword\">switch</span> (choice) {\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the element to be inserted : &quot;</span>;\r\n            std::cin &gt;&gt; x;\r\n            ob.<span class=\"hljs-built_in\">insert</span>(x);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the element to be removed : &quot;</span>;\r\n            std::cin &gt;&gt; x;\r\n            ob.<span class=\"hljs-built_in\">remove</span>(x);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\r\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the element to be searched : &quot;</span>;\r\n            std::cin &gt;&gt; x;\r\n            ob.<span class=\"hljs-built_in\">search</span>(x);\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\r\n            ob.<span class=\"hljs-built_in\">show</span>();\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\r\n            ob.<span class=\"hljs-built_in\">reverseShow</span>();\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n    } <span class=\"hljs-keyword\">while</span> (choice != <span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\lists\\DoublyLinkedList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\lists\\DoublyLinkedList.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.lists;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This class implements a DoublyLinkedList. This is done using the classes\r\n * LinkedList and Link.\r\n *\r\n * &lt;p&gt;\r\n * A linked list is similar to an array, it holds values. However, links in a\r\n * linked list do not have indexes. With a linked list you do not need to\r\n * predetermine it&#x27;s size as it grows and shrinks as it is edited. This is an\r\n * example of a double ended, doubly linked list. Each link references the next\r\n * link and the previous one.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Unknown\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoublyLinkedList</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Head refers to the front of the list\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> Link head;\r\n    <span class=\"hljs-comment\">/**\r\n     * Tail refers to the back of the list\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> Link tail;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Size refers to the number of elements present in the list\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Default Constructor\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DoublyLinkedList</span><span class=\"hljs-params\">()</span> {\r\n        head = <span class=\"hljs-literal\">null</span>;\r\n        tail = <span class=\"hljs-literal\">null</span>;\r\n        size = <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Constructs a list containing the elements of the array\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> array the array whose elements are to be placed into this list\r\n     * <span class=\"hljs-doctag\">@throws</span> NullPointerException if the specified collection is null\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DoublyLinkedList</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (array == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NullPointerException</span>();\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : array) {\r\n            insertTail(i);\r\n        }\r\n        size = array.length;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Insert an element at the head\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> x Element to be inserted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertHead</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">newLink</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Link</span>(x); <span class=\"hljs-comment\">// Create a new link with a value attached to it</span>\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) <span class=\"hljs-comment\">// Set the first element added to be the tail</span>\r\n        {\r\n            tail = newLink;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            head.previous = newLink; <span class=\"hljs-comment\">// newLink &lt;-- currenthead(head)</span>\r\n        }\r\n        newLink.next = head; <span class=\"hljs-comment\">// newLink &lt;--&gt; currenthead(head)</span>\r\n        head = newLink; <span class=\"hljs-comment\">// newLink(head) &lt;--&gt; oldhead</span>\r\n        ++size;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Insert an element at the tail\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> x Element to be inserted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertTail</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">newLink</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Link</span>(x);\r\n        newLink.next = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// currentTail(tail)     newlink --&gt;</span>\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) { <span class=\"hljs-comment\">// Check if there are no elements in list then it adds first element</span>\r\n            tail = newLink;\r\n            head = tail;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            tail.next = newLink; <span class=\"hljs-comment\">// currentTail(tail) --&gt; newLink --&gt;</span>\r\n            newLink.previous = tail; <span class=\"hljs-comment\">// currentTail(tail) &lt;--&gt; newLink --&gt;</span>\r\n            tail = newLink; <span class=\"hljs-comment\">// oldTail &lt;--&gt; newLink(tail) --&gt;</span>\r\n        }\r\n        ++size;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Insert an element at the index\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> x Element to be inserted\r\n     * <span class=\"hljs-doctag\">@param</span> index Index(from start) at which the element x to be inserted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertElementByIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> index)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (index &gt; size) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexOutOfBoundsException</span>(<span class=\"hljs-string\">&quot;Index: &quot;</span> + index + <span class=\"hljs-string\">&quot;, Size: &quot;</span> + size);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-number\">0</span>) {\r\n            insertHead(x);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">if</span> (index == size) {\r\n                insertTail(x);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">newLink</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Link</span>(x);\r\n                <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">previousLink</span> <span class=\"hljs-operator\">=</span> head; <span class=\"hljs-comment\">//</span>\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; index; i++) { <span class=\"hljs-comment\">// Loop to reach the index</span>\r\n                    previousLink = previousLink.next;\r\n                }\r\n                <span class=\"hljs-comment\">// previousLink is the Link at index - 1 from start</span>\r\n                previousLink.next.previous = newLink;\r\n                newLink.next = previousLink.next;\r\n                newLink.previous = previousLink;\r\n                previousLink.next = newLink;\r\n            }\r\n        }\r\n        ++size;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Delete the element at the head\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> The new head\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> Link <span class=\"hljs-title function_\">deleteHead</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> head;\r\n        head = head.next; <span class=\"hljs-comment\">// oldHead &lt;--&gt; 2ndElement(head)</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span>) {\r\n            tail = <span class=\"hljs-literal\">null</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            head.previous\r\n                    = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// oldHead --&gt; 2ndElement(head) nothing pointing at old head so will be removed</span>\r\n        }\r\n        --size;\r\n        <span class=\"hljs-keyword\">return</span> temp;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Delete the element at the tail\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> The new tail\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> Link <span class=\"hljs-title function_\">deleteTail</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> tail;\r\n        tail = tail.previous; <span class=\"hljs-comment\">// 2ndLast(tail) &lt;--&gt; oldTail --&gt; null</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> (tail == <span class=\"hljs-literal\">null</span>) {\r\n            head = <span class=\"hljs-literal\">null</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            tail.next = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 2ndLast(tail) --&gt; null</span>\r\n        }\r\n        --size;\r\n        <span class=\"hljs-keyword\">return</span> temp;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Delete the element from somewhere in the list\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> x element to be deleted\r\n     * <span class=\"hljs-doctag\">@return</span> Link deleted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> head;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (current.value != x) { <span class=\"hljs-comment\">// Find the position to delete</span>\r\n            <span class=\"hljs-keyword\">if</span> (current != tail) {\r\n                current = current.next;\r\n            } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// If we reach the tail and the element is still not found</span>\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;The element to be deleted does not exist!&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (current == head) {\r\n            deleteHead();\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (current == tail) {\r\n            deleteTail();\r\n        } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// Before: 1 &lt;--&gt; 2(current) &lt;--&gt; 3</span>\r\n            current.previous.next = current.next; <span class=\"hljs-comment\">// 1 --&gt; 3</span>\r\n            current.next.previous = current.previous; <span class=\"hljs-comment\">// 1 &lt;--&gt; 3</span>\r\n        }\r\n        --size;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Inserts element and reorders\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> x Element to be added\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertOrdered</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">newLink</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Link</span>(x);\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> head;\r\n        <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">null</span> &amp;&amp; x &gt; current.value) <span class=\"hljs-comment\">// Find the position to insert</span>\r\n        {\r\n            current = current.next;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (current == head) {\r\n            insertHead(x);\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (current == <span class=\"hljs-literal\">null</span>) {\r\n            insertTail(x);\r\n        } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// Before: 1 &lt;--&gt; 2(current) &lt;--&gt; 3</span>\r\n            newLink.previous = current.previous; <span class=\"hljs-comment\">// 1 &lt;-- newLink</span>\r\n            current.previous.next = newLink; <span class=\"hljs-comment\">// 1 &lt;--&gt; newLink</span>\r\n            newLink.next = current; <span class=\"hljs-comment\">// 1 &lt;--&gt; newLink --&gt; 2(current) &lt;--&gt; 3</span>\r\n            current.previous = newLink; <span class=\"hljs-comment\">// 1 &lt;--&gt; newLink &lt;--&gt; 2(current) &lt;--&gt; 3</span>\r\n        }\r\n        ++size;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Deletes the passed node from the current list\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> z Element to be deleted\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteNode</span><span class=\"hljs-params\">(Link z)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (z.next == <span class=\"hljs-literal\">null</span>) {\r\n            deleteTail();\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (z == head) {\r\n            deleteHead();\r\n        } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// before &lt;-- 1 &lt;--&gt; 2(z) &lt;--&gt; 3 --&gt;</span>\r\n            z.previous.next = z.next; <span class=\"hljs-comment\">// 1 --&gt; 3</span>\r\n            z.next.previous = z.previous; <span class=\"hljs-comment\">// 1 &lt;--&gt; 3</span>\r\n        }\r\n        --size;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeDuplicates</span><span class=\"hljs-params\">(DoublyLinkedList l)</span> {\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">linkOne</span> <span class=\"hljs-operator\">=</span> l.head;\r\n        <span class=\"hljs-keyword\">while</span> (linkOne.next != <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// list is present</span>\r\n            <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">linkTwo</span> <span class=\"hljs-operator\">=</span> linkOne.next; <span class=\"hljs-comment\">// second link for comparison</span>\r\n            <span class=\"hljs-keyword\">while</span> (linkTwo.next != <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-keyword\">if</span> (linkOne.value == linkTwo.value) <span class=\"hljs-comment\">// if there are duplicates values then</span>\r\n                {\r\n                    l.delete(linkTwo.value); <span class=\"hljs-comment\">// delete the link</span>\r\n                }\r\n                linkTwo = linkTwo.next; <span class=\"hljs-comment\">// go to next link</span>\r\n            }\r\n            linkOne = linkOne.next; <span class=\"hljs-comment\">// go to link link to iterate the whole list again</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Reverses the list in place\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> l the DoublyLinkedList to reverse\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reverse</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-comment\">// Keep references to the head and tail</span>\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">thisHead</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.head;\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">thisTail</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.tail;\r\n\r\n        <span class=\"hljs-comment\">// Flip the head and tail references</span>\r\n        <span class=\"hljs-built_in\">this</span>.head = thisTail;\r\n        <span class=\"hljs-built_in\">this</span>.tail = thisHead;\r\n\r\n        <span class=\"hljs-comment\">// While the link we&#x27;re visiting is not null, flip the</span>\r\n        <span class=\"hljs-comment\">// next and previous links</span>\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">nextLink</span> <span class=\"hljs-operator\">=</span> thisHead;\r\n        <span class=\"hljs-keyword\">while</span> (nextLink != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">nextLinkNext</span> <span class=\"hljs-operator\">=</span> nextLink.next;\r\n            <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">nextLinkPrevious</span> <span class=\"hljs-operator\">=</span> nextLink.previous;\r\n            nextLink.next = nextLinkPrevious;\r\n            nextLink.previous = nextLinkNext;\r\n\r\n            <span class=\"hljs-comment\">// Now, we want to go to the next link</span>\r\n            nextLink = nextLinkNext;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Clears List\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clearList</span><span class=\"hljs-params\">()</span> {\r\n        head = <span class=\"hljs-literal\">null</span>;\r\n        tail = <span class=\"hljs-literal\">null</span>;\r\n        size = <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Returns true if list is empty\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> true if list is empty\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> (head == <span class=\"hljs-literal\">null</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Prints contents of the list\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-comment\">// Prints contents of the list</span>\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> head;\r\n        <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">null</span>) {\r\n            current.displayLink();\r\n            current = current.next;\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Prints the contents of the list in reverse order\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayBackwards</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">Link</span> <span class=\"hljs-variable\">current</span> <span class=\"hljs-operator\">=</span> tail;\r\n        <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">null</span>) {\r\n            current.displayLink();\r\n            current = current.previous;\r\n        }\r\n        System.out.println();\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This class is used to implement the nodes of the linked list.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Unknown\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Link</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Value of node\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> value;\r\n    <span class=\"hljs-comment\">/**\r\n     * This points to the link in front of the new link\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> Link next;\r\n    <span class=\"hljs-comment\">/**\r\n     * This points to the link behind the new link\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> Link previous;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Constructor\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> value Value of node\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Link</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> {\r\n        <span class=\"hljs-built_in\">this</span>.value = value;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Displays the node\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayLink</span><span class=\"hljs-params\">()</span> {\r\n        System.out.print(value + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Main Method\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> args Command line arguments\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\r\n        <span class=\"hljs-type\">DoublyLinkedList</span> <span class=\"hljs-variable\">myList</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoublyLinkedList</span>();\r\n        myList.insertHead(<span class=\"hljs-number\">13</span>);\r\n        myList.insertHead(<span class=\"hljs-number\">7</span>);\r\n        myList.insertHead(<span class=\"hljs-number\">10</span>);\r\n        myList.display(); <span class=\"hljs-comment\">// &lt;-- 10(head) &lt;--&gt; 7 &lt;--&gt; 13(tail) --&gt;</span>\r\n        myList.displayBackwards();\r\n\r\n        myList.insertTail(<span class=\"hljs-number\">11</span>);\r\n        myList.display(); <span class=\"hljs-comment\">// &lt;-- 10(head) &lt;--&gt; 7 &lt;--&gt; 13 &lt;--&gt; 11(tail) --&gt;</span>\r\n        myList.displayBackwards();\r\n\r\n        myList.deleteTail();\r\n        myList.display(); <span class=\"hljs-comment\">// &lt;-- 10(head) &lt;--&gt; 7 &lt;--&gt; 13(tail) --&gt;</span>\r\n        myList.displayBackwards();\r\n\r\n        myList.delete(<span class=\"hljs-number\">7</span>);\r\n        myList.display(); <span class=\"hljs-comment\">// &lt;-- 10(head) &lt;--&gt; 13(tail) --&gt;</span>\r\n        myList.displayBackwards();\r\n\r\n        myList.insertOrdered(<span class=\"hljs-number\">23</span>);\r\n        myList.insertOrdered(<span class=\"hljs-number\">67</span>);\r\n        myList.insertOrdered(<span class=\"hljs-number\">3</span>);\r\n        myList.display(); <span class=\"hljs-comment\">// &lt;-- 3(head) &lt;--&gt; 10 &lt;--&gt; 13 &lt;--&gt; 23 &lt;--&gt; 67(tail) --&gt;</span>\r\n        myList.insertElementByIndex(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>);\r\n        myList.display(); <span class=\"hljs-comment\">// &lt;-- 3(head) &lt;--&gt; 5 &lt;--&gt; 10 &lt;--&gt; 13 &lt;--&gt; 23 &lt;--&gt; 67(tail) --&gt;</span>\r\n        myList.displayBackwards();\r\n        myList.reverse(); <span class=\"hljs-comment\">// &lt;-- 67(head) &lt;--&gt; 23 &lt;--&gt; 13 &lt;--&gt; 10 &lt;--&gt; 5 &lt;--&gt; 3(tail) --&gt;</span>\r\n        myList.display();\r\n\r\n        myList.clearList();\r\n        myList.display();\r\n        myList.displayBackwards();\r\n        myList.insertHead(<span class=\"hljs-number\">20</span>);\r\n        myList.display();\r\n        myList.displayBackwards();\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "data_structures\\linked_list\\doubly_linked_list.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\linked_list\\doubly_linked_list.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [Doubly linked list](https://en.wikipedia.org/wiki/Doubly_linked_list)\r\n * @details\r\n * A doubly linked list is a data structure with a sequence\r\n * of components called nodes. Within that nodes there are\r\n * three elements: a value recorded, a pointer to the next\r\n * node, and a pointer to the previous node.\r\n *\r\n * In this implementation, the functions of creating the list,\r\n * inserting by position, deleting by position, searching \r\n * for value, printing the list, and an example of how the\r\n * list works were coded.\r\n *\r\n * @author  [Gabriel Mota Bromonschenkel Lima](https://github.com/GabrielMotaBLima)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Doubly linked list struct\r\n */</span>\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">list</span>\r\n{</span>\r\n    <span class=\"hljs-type\">double</span> value;               <span class=\"hljs-comment\">///&lt; value saved on each node</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">list</span> *<span class=\"hljs-title\">next</span>, *<span class=\"hljs-title\">prev</span>;</span>   <span class=\"hljs-comment\">///&lt; directing to other nodes or NULL</span>\r\n} List;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Create list function, a new list containing one node will be created\r\n * @param   value       a value to be saved into the first list node\r\n * @returns new_list    the list created\r\n */</span>\r\nList *<span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> value)</span>;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Insertion by position into the list function\r\n * @param   list    a doubly linked List\r\n * @param   value   a value to be inserted into the list\r\n * @param   pos     a position into the list for value insertion\r\n * @returns list    the input list with a node more or the same list\r\n */</span>\r\nList *<span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(List *<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-type\">double</span> value, <span class=\"hljs-type\">int</span> pos)</span>;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Deletion by position into the list function\r\n * @param   list    a doubly linked List\r\n * @param   pos     a position into the list for value Deletion\r\n * @returns list    the input list with deleted values or the same list\r\n */</span>\r\nList *<span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(List *<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-type\">int</span> pos)</span>;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Search value into the list function\r\n * @param   list    a doubly linked list\r\n * @param   value   a value to be looked for into the list\r\n * @returns `1`     if the looked up value exists\r\n * @returns `0`     if the looked up value doesn&#x27;t exist\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(List *<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-type\">double</span> value)</span>;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Print list function\r\n * @param   list    a doubly linked List\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(List *<span class=\"hljs-built_in\">list</span>)</span>;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Example function\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">example</span><span class=\"hljs-params\">()</span>;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Main function\r\n * @returns 0   on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-comment\">// examples for better understanding</span>\r\n    example();\r\n    <span class=\"hljs-comment\">// code here</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Create list function, a new list containing one node will be created\r\n * @param   value       a value to be saved into the first list node\r\n * @returns new_list    the list created\r\n */</span>\r\nList *<span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> value)</span>\r\n{\r\n    List *new_list = (List *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(List));\r\n    new_list-&gt;value = value;\r\n    new_list-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n    new_list-&gt;prev = <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-keyword\">return</span> new_list;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Insertion by position into the list function\r\n * @param   list    a doubly linked List\r\n * @param   value   a value to be inserted into the list\r\n * @param   pos     a position into the list for value insertion\r\n * @returns list    the input list with a node more or the same list\r\n */</span>\r\nList *<span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(List *<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-type\">double</span> value, <span class=\"hljs-type\">int</span> pos)</span>\r\n{\r\n    <span class=\"hljs-comment\">// list NULL case</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">list</span> == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">list</span> = create(value);\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// position existing case</span>\r\n    <span class=\"hljs-keyword\">if</span> (pos &gt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        List *cpy = <span class=\"hljs-built_in\">list</span>, *tmp = cpy;\r\n        <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-number\">1</span>, index = <span class=\"hljs-number\">1</span>, size = <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (tmp != <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            size++;\r\n            tmp = tmp-&gt;next;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// first position case</span>\r\n        <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-number\">1</span>)\r\n        {\r\n            List *new_node = create(value);\r\n            new_node-&gt;next = cpy;\r\n            cpy-&gt;prev = new_node;\r\n            <span class=\"hljs-built_in\">list</span> = new_node;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// position existing in list range case</span>\r\n        <span class=\"hljs-keyword\">if</span> (size + <span class=\"hljs-number\">2</span> &gt; pos)\r\n        {\r\n            <span class=\"hljs-keyword\">while</span> (cpy-&gt;next != <span class=\"hljs-literal\">NULL</span> &amp;&amp; index &lt; pos)\r\n            {\r\n                flag++;\r\n                index++;\r\n                cpy = cpy-&gt;next;\r\n            }\r\n\r\n            List *new_node = (List *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(List));\r\n            new_node-&gt;value = value;\r\n\r\n            <span class=\"hljs-comment\">// position into list with no poiting for NULL</span>\r\n            <span class=\"hljs-keyword\">if</span> (flag == pos)\r\n            {\r\n                cpy-&gt;prev-&gt;next = new_node;\r\n                new_node-&gt;next = cpy;\r\n                new_node-&gt;prev = cpy-&gt;prev;\r\n                cpy-&gt;prev = new_node;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// last position case</span>\r\n            <span class=\"hljs-keyword\">if</span> (flag &lt; pos)\r\n            {\r\n                new_node-&gt;next = cpy-&gt;next;\r\n                new_node-&gt;prev = cpy;\r\n                cpy-&gt;next = new_node;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Deletion by position into the list function\r\n * @param   list    a doubly linked List\r\n * @param   pos     a position into the list for value Deletion\r\n * @returns list    the input list with deleted values or the same list\r\n */</span>\r\nList *<span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(List *<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-type\">int</span> pos)</span>\r\n{\r\n    <span class=\"hljs-comment\">// list NULL case</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">list</span> == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\r\n\r\n    <span class=\"hljs-comment\">// position existing case</span>\r\n    <span class=\"hljs-keyword\">if</span> (pos &gt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        List *cpy = <span class=\"hljs-built_in\">list</span>, *tmp = cpy;\r\n        <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-number\">1</span>, index = <span class=\"hljs-number\">1</span>, size = <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (tmp != <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            size++;\r\n            tmp = tmp-&gt;next;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// first position case</span>\r\n        <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-number\">1</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">1</span>)\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\r\n            cpy = cpy-&gt;next;\r\n            cpy-&gt;prev = <span class=\"hljs-literal\">NULL</span>;\r\n            <span class=\"hljs-keyword\">return</span> cpy;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// position existing in list range case</span>\r\n        <span class=\"hljs-keyword\">if</span> (size + <span class=\"hljs-number\">2</span> &gt; pos)\r\n        {\r\n            <span class=\"hljs-keyword\">while</span> (cpy-&gt;next != <span class=\"hljs-literal\">NULL</span> &amp;&amp; index &lt; pos)\r\n            {\r\n                flag++;\r\n                index++;\r\n                cpy = cpy-&gt;next;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (flag == pos)\r\n            {\r\n                <span class=\"hljs-comment\">// position into list with no poiting for NULL</span>\r\n                <span class=\"hljs-keyword\">if</span> (cpy-&gt;next != <span class=\"hljs-literal\">NULL</span>)\r\n                {\r\n                    cpy-&gt;prev-&gt;next = cpy-&gt;next;\r\n                    cpy-&gt;next-&gt;prev = cpy-&gt;prev;\r\n                }\r\n\r\n                <span class=\"hljs-comment\">// last position case</span>\r\n                <span class=\"hljs-keyword\">else</span>\r\n                    cpy-&gt;prev-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Search value into the list function\r\n * @param   list    a doubly linked list\r\n * @param   value   a value to be looked for into the list\r\n * @returns `1`     if the looked up value exists\r\n * @returns `0`     if the looked up value doesn&#x27;t exist\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(List *<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-type\">double</span> value)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">list</span> == <span class=\"hljs-literal\">NULL</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">list</span>-&gt;value == value)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    search(<span class=\"hljs-built_in\">list</span>-&gt;next, value);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Print list function\r\n * @param   list    a doubly linked List\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(List *<span class=\"hljs-built_in\">list</span>)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">list</span> != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%f\\t&quot;</span>, <span class=\"hljs-built_in\">list</span>-&gt;value);\r\n        print(<span class=\"hljs-built_in\">list</span>-&gt;next);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief   Example function\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">example</span><span class=\"hljs-params\">()</span>\r\n{\r\n    List *my_list = <span class=\"hljs-literal\">NULL</span>;\r\n    <span class=\"hljs-type\">double</span> node_value = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> searching;\r\n\r\n    my_list = create(node_value);\r\n    my_list = insert(my_list, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>);\r\n    my_list = insert(my_list, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>);\r\n    my_list = insert(my_list, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>);\r\n    my_list = insert(my_list, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">3</span>);\r\n\r\n    print(my_list);\r\n    searching = search(my_list, <span class=\"hljs-number\">20</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n%d\\n&quot;</span>, searching);\r\n\r\n    my_list = delete (my_list, <span class=\"hljs-number\">1</span>);\r\n    my_list = delete (my_list, <span class=\"hljs-number\">1</span>);\r\n    my_list = delete (my_list, <span class=\"hljs-number\">1</span>);\r\n    my_list = delete (my_list, <span class=\"hljs-number\">1</span>);\r\n\r\n    print(my_list);\r\n    searching = search(my_list, <span class=\"hljs-number\">20</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n%d\\n&quot;</span>, searching);\r\n}\r\n"
    },
    "ruby": {
      "dir": "data_structures\\linked_lists\\doubly_linked_list.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures\\linked_lists\\doubly_linked_list.rb",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DoublyLinkedList</span></span>\r\n  <span class=\"hljs-comment\"># Initialize the data structure here.</span>\r\n  <span class=\"hljs-keyword\">attr_reader</span> <span class=\"hljs-symbol\">:head</span>, <span class=\"hljs-symbol\">:tail</span>, <span class=\"hljs-symbol\">:size</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span></span>\r\n    <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-literal\">nil</span>\r\n    <span class=\"hljs-variable\">@tail</span> = <span class=\"hljs-literal\">nil</span>\r\n    <span class=\"hljs-variable\">@size</span> = <span class=\"hljs-number\">0</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># Get the value of the index-th node in the linked list.</span>\r\n  <span class=\"hljs-comment\"># If the index is invalid, return -1.</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(index)</span></span>\r\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\r\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> index &gt; <span class=\"hljs-variable\">@size</span> - <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-variable\">@size</span> - index\r\n      iter = <span class=\"hljs-variable\">@head</span>\r\n      cnt = <span class=\"hljs-number\">0</span>\r\n      <span class=\"hljs-keyword\">until</span> iter.<span class=\"hljs-literal\">nil</span>?\r\n        <span class=\"hljs-keyword\">return</span> iter.val <span class=\"hljs-keyword\">if</span> cnt == index\r\n\r\n        iter = iter.<span class=\"hljs-keyword\">next</span>\r\n        cnt += <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">else</span>\r\n      iter = <span class=\"hljs-variable\">@tail</span>\r\n      cnt = <span class=\"hljs-variable\">@size</span> - <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-keyword\">until</span> iter.<span class=\"hljs-literal\">nil</span>?\r\n        <span class=\"hljs-keyword\">return</span> iter.val <span class=\"hljs-keyword\">if</span> cnt == index\r\n\r\n        iter = iter.prev\r\n        cnt -= <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    -<span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># Add a node of value val before the first element of the linked list.</span>\r\n  <span class=\"hljs-comment\"># After the insertion, the new node will be the first node of the linked list.</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert_head</span><span class=\"hljs-params\">(val)</span></span>\r\n    node = Node.new(val, <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-variable\">@head</span>)\r\n    <span class=\"hljs-variable\">@tail</span> = node <span class=\"hljs-keyword\">unless</span> <span class=\"hljs-variable\">@head</span>\r\n    <span class=\"hljs-variable\">@head</span>.prev = node <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>\r\n    <span class=\"hljs-variable\">@head</span> = node\r\n    <span class=\"hljs-variable\">@size</span> += <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># Append a node of value val to the last element of the linked list.</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert_tail</span><span class=\"hljs-params\">(val)</span></span>\r\n    <span class=\"hljs-keyword\">return</span> insert_head(val) <span class=\"hljs-keyword\">unless</span> <span class=\"hljs-variable\">@head</span>\r\n\r\n    node = Node.new(val, <span class=\"hljs-variable\">@tail</span>, <span class=\"hljs-literal\">nil</span>)\r\n    <span class=\"hljs-variable\">@tail</span>.<span class=\"hljs-keyword\">next</span> = node\r\n    <span class=\"hljs-variable\">@tail</span> = node\r\n    <span class=\"hljs-variable\">@size</span> += <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># Add a node of value val before the index-th node in the linked list.</span>\r\n  <span class=\"hljs-comment\"># If index equals to the length of linked list, the node will be appended</span>\r\n  <span class=\"hljs-comment\"># to the end of linked list. If index is greater than the length, the node</span>\r\n  <span class=\"hljs-comment\"># will not be inserted.</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_at_index</span><span class=\"hljs-params\">(index, val)</span></span>\r\n    <span class=\"hljs-keyword\">case</span> index\r\n    <span class=\"hljs-keyword\">when</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span> insert_head(val)\r\n    <span class=\"hljs-keyword\">when</span> <span class=\"hljs-variable\">@size</span> <span class=\"hljs-keyword\">then</span> insert_tail(val)\r\n    <span class=\"hljs-keyword\">when</span> <span class=\"hljs-number\">1</span>...<span class=\"hljs-variable\">@size</span>\r\n      <span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-variable\">@size</span> - index\r\n        iter = <span class=\"hljs-variable\">@head</span>\r\n        cnt = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">until</span> iter.<span class=\"hljs-literal\">nil</span>?\r\n          <span class=\"hljs-keyword\">return</span> insert(iter, Node.new(val)) <span class=\"hljs-keyword\">if</span> cnt == index - <span class=\"hljs-number\">1</span>\r\n\r\n          iter = iter.<span class=\"hljs-keyword\">next</span>\r\n          cnt += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n      <span class=\"hljs-keyword\">else</span>\r\n        iter = <span class=\"hljs-variable\">@tail</span>\r\n        cnt = <span class=\"hljs-variable\">@size</span> - <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">until</span> iter.<span class=\"hljs-literal\">nil</span>?\r\n          <span class=\"hljs-keyword\">return</span> insert(iter, Node.new(val)) <span class=\"hljs-keyword\">if</span> cnt == index - <span class=\"hljs-number\">1</span>\r\n\r\n          iter = iter.prev\r\n          cnt -= <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(node, new_node)</span></span>\r\n    new_node.prev = node\r\n    new_node.<span class=\"hljs-keyword\">next</span> = node.<span class=\"hljs-keyword\">next</span>\r\n    node.<span class=\"hljs-keyword\">next</span>.prev = new_node\r\n    node.<span class=\"hljs-keyword\">next</span> = new_node\r\n    <span class=\"hljs-variable\">@size</span> += <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># Delete the index-th node in the linked list, if the index is valid.</span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">delete_at_index</span><span class=\"hljs-params\">(index)</span></span>\r\n    <span class=\"hljs-keyword\">case</span> index\r\n    <span class=\"hljs-keyword\">when</span> <span class=\"hljs-number\">0</span>\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">unless</span> <span class=\"hljs-variable\">@head</span>\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">@head</span>, <span class=\"hljs-variable\">@tail</span>, <span class=\"hljs-variable\">@size</span> = <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@size</span> == <span class=\"hljs-number\">1</span>\r\n\r\n      remove(<span class=\"hljs-variable\">@head</span>)\r\n    <span class=\"hljs-keyword\">when</span> <span class=\"hljs-variable\">@size</span> - <span class=\"hljs-number\">1</span>\r\n      remove(<span class=\"hljs-variable\">@tail</span>)\r\n    <span class=\"hljs-keyword\">when</span> <span class=\"hljs-number\">1</span>...<span class=\"hljs-variable\">@size</span> - <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-variable\">@size</span> - index\r\n        iter = <span class=\"hljs-variable\">@head</span>\r\n        cnt = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">until</span> iter.<span class=\"hljs-literal\">nil</span>?\r\n          <span class=\"hljs-keyword\">return</span> remove(iter) <span class=\"hljs-keyword\">if</span> cnt == index\r\n\r\n          iter = iter.<span class=\"hljs-keyword\">next</span>\r\n          cnt += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n      <span class=\"hljs-keyword\">else</span>\r\n        iter = <span class=\"hljs-variable\">@tail</span>\r\n        cnt = <span class=\"hljs-variable\">@size</span> - <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">until</span> iter.<span class=\"hljs-literal\">nil</span>?\r\n          <span class=\"hljs-keyword\">return</span> remove(iter) <span class=\"hljs-keyword\">if</span> cnt == index\r\n\r\n          iter = iter.prev\r\n          cnt -= <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(node)</span></span>\r\n    <span class=\"hljs-keyword\">if</span> node == <span class=\"hljs-variable\">@head</span>\r\n      <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span>\r\n      <span class=\"hljs-variable\">@head</span>.prev = <span class=\"hljs-literal\">nil</span>\r\n    <span class=\"hljs-keyword\">elsif</span> node == <span class=\"hljs-variable\">@tail</span>\r\n      <span class=\"hljs-variable\">@tail</span> = tail.prev\r\n      <span class=\"hljs-variable\">@tail</span>.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-literal\">nil</span>\r\n    <span class=\"hljs-keyword\">else</span>\r\n      node.prev.<span class=\"hljs-keyword\">next</span> = node.<span class=\"hljs-keyword\">next</span>\r\n      node.<span class=\"hljs-keyword\">next</span>.prev = node.prev\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-variable\">@size</span> -= <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_values</span><span class=\"hljs-params\">(head = <span class=\"hljs-variable\">@head</span>)</span></span>\r\n    print <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">#{head.val}</span> --&gt; &quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> head.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-literal\">nil</span>?\r\n      puts(<span class=\"hljs-string\">&quot;nil\\n&quot;</span>)\r\n    <span class=\"hljs-keyword\">else</span>\r\n      print_values(head.<span class=\"hljs-keyword\">next</span>)\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span></span>\r\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:val</span>, <span class=\"hljs-symbol\">:prev</span>, <span class=\"hljs-symbol\">:next</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(val = <span class=\"hljs-literal\">nil</span>, prev = <span class=\"hljs-literal\">nil</span>, next_ = <span class=\"hljs-literal\">nil</span>)</span></span>\r\n    <span class=\"hljs-variable\">@val</span> = val\r\n    <span class=\"hljs-variable\">@prev</span> = prev\r\n    <span class=\"hljs-variable\">@next</span> = next_\r\n  <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nobj = DoublyLinkedList.new\r\nobj.get(<span class=\"hljs-number\">1</span>)\r\n\r\nobj.insert_head(<span class=\"hljs-number\">2</span>)\r\nobj.print_values\r\n\r\nobj.insert_tail(<span class=\"hljs-number\">3</span>)\r\nobj.print_values\r\n\r\nobj.add_at_index(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\r\nobj.print_values\r\n\r\nobj.delete_at_index(<span class=\"hljs-number\">1</span>)\r\nobj.print_values\r\n"
    },
    "elixir": {
      "dir": "lib\\data_structures\\doubly_linked_list.ex",
      "url": "https://github.com/TheAlgorithms/elixir/tree/master/lib\\data_structures\\doubly_linked_list.ex",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Algorithms.DataStructures.DoublyLinkedList</span></span> <span class=\"hljs-keyword\">do</span>\r\n  <span class=\"hljs-variable\">@moduledoc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\r\n  Because of elixir&#x27;s immutability, there is no true way of having fully cyclical, referential structures. You would have to make a copy of the list with each change, and account for the new reference.\r\n  We will not write overly complex code to do that, and allow the user to understand the nuance here.\r\n\r\n  Access for DoublyLinkedList is O(n)\r\n  Search for DoublyLinkedList is O(n)\r\n  Deletion/Insertion at element is O(1)\r\n  &quot;&quot;&quot;</span>\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Node</span></span>, <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-keyword\">defstruct</span>([<span class=\"hljs-symbol\">:value</span>, <span class=\"hljs-symbol\">:prev</span>, <span class=\"hljs-symbol\">:next</span>])\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">LinkedList</span></span>, <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-keyword\">defstruct</span>([<span class=\"hljs-symbol\">:size</span>, <span class=\"hljs-symbol\">:head</span>, <span class=\"hljs-symbol\">:tail</span>])\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_node</span></span>(%LinkedList{<span class=\"hljs-symbol\">size:</span> <span class=\"hljs-number\">0</span>}, _value), <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-literal\">nil</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_node</span></span>(%LinkedList{<span class=\"hljs-symbol\">size:</span> _size, <span class=\"hljs-symbol\">head:</span> head, <span class=\"hljs-symbol\">tail:</span> _tail}, value) <span class=\"hljs-keyword\">do</span>\r\n    check_node(head, value)\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">check_node</span></span>(%Node{<span class=\"hljs-symbol\">value:</span> value, <span class=\"hljs-symbol\">next:</span> <span class=\"hljs-literal\">nil</span>} = node, _value), <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-literal\">nil</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">check_node</span></span>(%Node{<span class=\"hljs-symbol\">value:</span> value, <span class=\"hljs-symbol\">next:</span> next} = node, value) <span class=\"hljs-keyword\">do</span>\r\n    <span class=\"hljs-keyword\">if</span> node.value == value <span class=\"hljs-keyword\">do</span>\r\n      node\r\n    <span class=\"hljs-keyword\">else</span>\r\n      check_node(node.next, value)\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_node</span></span>(list, value) <span class=\"hljs-keyword\">do</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_to_head</span></span>(%LinkedList{<span class=\"hljs-symbol\">head:</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-symbol\">tail:</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-symbol\">size:</span> <span class=\"hljs-number\">0</span>}, value) <span class=\"hljs-keyword\">do</span>\r\n    new_node = %Node{<span class=\"hljs-symbol\">value:</span> value, <span class=\"hljs-symbol\">prev:</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-symbol\">next:</span> <span class=\"hljs-literal\">nil</span>}\r\n    %LinkedList{<span class=\"hljs-symbol\">head:</span> new_node, <span class=\"hljs-symbol\">tail:</span> new_node, <span class=\"hljs-symbol\">size:</span> <span class=\"hljs-number\">1</span>}\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_to_head</span></span>(%LinkedList{<span class=\"hljs-symbol\">head:</span> old_head, <span class=\"hljs-symbol\">tail:</span> tail, <span class=\"hljs-symbol\">size:</span> size}, value) <span class=\"hljs-keyword\">do</span>\r\n    new_head = %Node{<span class=\"hljs-symbol\">prev:</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-symbol\">next:</span> old_head}\r\n    old_head = %Node{<span class=\"hljs-symbol\">prev:</span> new_head, <span class=\"hljs-symbol\">next:</span> old_head.next}\r\n    %LinkedList{<span class=\"hljs-symbol\">size:</span> size + <span class=\"hljs-number\">1</span>, <span class=\"hljs-symbol\">tail:</span> tail, <span class=\"hljs-symbol\">head:</span> new_head}\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_to_tail</span></span>(%LinkedList{<span class=\"hljs-symbol\">head:</span> head, <span class=\"hljs-symbol\">tail:</span> old_tail, <span class=\"hljs-symbol\">size:</span> size}, value) <span class=\"hljs-keyword\">do</span>\r\n    new_tail = %Node{<span class=\"hljs-symbol\">prev:</span> old_tail, <span class=\"hljs-symbol\">next:</span> <span class=\"hljs-literal\">nil</span>}\r\n    <span class=\"hljs-comment\"># old_tail.next = new_tail</span>\r\n    %LinkedList{<span class=\"hljs-symbol\">size:</span> size + <span class=\"hljs-number\">1</span>, <span class=\"hljs-symbol\">tail:</span> old_tail, <span class=\"hljs-symbol\">head:</span> head}\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">remove</span></span>(%LinkedList{<span class=\"hljs-symbol\">size:</span> <span class=\"hljs-number\">0</span>}, value), <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-literal\">nil</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">remove</span></span>(%LinkedList{<span class=\"hljs-symbol\">size:</span> size, <span class=\"hljs-symbol\">head:</span> head, <span class=\"hljs-symbol\">tail:</span> tail} = list, value) <span class=\"hljs-keyword\">do</span>\r\n    node_to_remove =\r\n      <span class=\"hljs-keyword\">case</span> get_node(list, value) <span class=\"hljs-keyword\">do</span>\r\n        <span class=\"hljs-literal\">nil</span> -&gt; <span class=\"hljs-keyword\">raise</span> <span class=\"hljs-string\">&quot;No node&quot;</span>\r\n        node -&gt; node\r\n      <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-comment\"># in elixir need to actually update references, this won&#x27;t work in functional programming.</span>\r\n    <span class=\"hljs-comment\"># previous = node_to_remove.prev</span>\r\n    <span class=\"hljs-comment\"># next = node_to_remove.next</span>\r\n    <span class=\"hljs-comment\"># previous.next = next</span>\r\n    <span class=\"hljs-comment\"># next.previous = previous</span>\r\n    %LinkedList{<span class=\"hljs-symbol\">size:</span> size - <span class=\"hljs-number\">1</span>, <span class=\"hljs-symbol\">head:</span> head, <span class=\"hljs-symbol\">tail:</span> tail}\r\n  <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./DataStructures/LinkedList/DoublyLinkedList/DoublyLinkedList.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\DataStructures\\LinkedList\\DoublyLinkedList\\DoublyLinkedList.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> Utilities.Exceptions;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.LinkedList.DoublyLinkedList</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Similar to a Singly Linked List but each node contains a refenrence to the previous node in the list.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;see cref=&quot;System.Collections.Generic.LinkedList{T}&quot; /&gt;</span> is a doubly linked list.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Compared to singly linked lists it can be traversed forwards and backwards.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adding a node to a doubly linked list is simpler because ever node contains a reference to the previous node.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Generic type.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DoublyLinkedList</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;DoublyLinkedList{T}&quot; /&gt;</span> class.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span> Data of the original head of the list.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DoublyLinkedList</span>(<span class=\"hljs-params\">T data</span>)</span>\r\n        {\r\n            Head = <span class=\"hljs-keyword\">new</span> DoublyLinkedListNode&lt;T&gt;(data);\r\n            Tail = Head;\r\n            Count = <span class=\"hljs-number\">1</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;DoublyLinkedList{T}&quot; /&gt;</span> class from an enumerable.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span> Enumerable of data to be stored in the list.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DoublyLinkedList</span>(<span class=\"hljs-params\">IEnumerable&lt;T&gt; data</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> d <span class=\"hljs-keyword\">in</span> data)\r\n            {\r\n                Add(d);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the amount of nodes in the list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Count { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">set</span>; }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets or sets the first node of the list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">private</span> DoublyLinkedListNode&lt;T&gt;? Head { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets or sets the last node of the list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-keyword\">private</span> DoublyLinkedListNode&lt;T&gt;? Tail { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Replaces the Head of the list with the new value.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span> Value for the new Head of the list.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The new Head node.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DoublyLinkedListNode&lt;T&gt; <span class=\"hljs-title\">AddHead</span>(<span class=\"hljs-params\">T data</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> node = <span class=\"hljs-keyword\">new</span> DoublyLinkedListNode&lt;T&gt;(data);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (Head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                Head = node;\r\n                Tail = node;\r\n                Count = <span class=\"hljs-number\">1</span>;\r\n                <span class=\"hljs-keyword\">return</span> node;\r\n            }\r\n\r\n            Head.Previous = node;\r\n            node.Next = Head;\r\n            Head = node;\r\n            Count++;\r\n            <span class=\"hljs-keyword\">return</span> node;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adds a new value at the end of the list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span> New value to be added to the list.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The new node created based on the new value.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DoublyLinkedListNode&lt;T&gt; <span class=\"hljs-title\">Add</span>(<span class=\"hljs-params\">T data</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (Head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> AddHead(data);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> node = <span class=\"hljs-keyword\">new</span> DoublyLinkedListNode&lt;T&gt;(data);\r\n            Tail!.Next = node;\r\n            node.Previous = Tail;\r\n            Tail = node;\r\n            Count++;\r\n            <span class=\"hljs-keyword\">return</span> node;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adds a new value after an existing node.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span> New value to be added to the list.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;existingNode&quot;&gt;</span> An existing node in the list.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The new node created based on the new value.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DoublyLinkedListNode&lt;T&gt; <span class=\"hljs-title\">AddAfter</span>(<span class=\"hljs-params\">T data, DoublyLinkedListNode&lt;T&gt; existingNode</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (existingNode == Tail)\r\n            {\r\n                <span class=\"hljs-keyword\">return</span> Add(data);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> node = <span class=\"hljs-keyword\">new</span> DoublyLinkedListNode&lt;T&gt;(data);\r\n            node.Next = existingNode.Next;\r\n            node.Previous = existingNode;\r\n            existingNode.Next = node;\r\n\r\n            <span class=\"hljs-keyword\">if</span> (existingNode.Next <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                existingNode.Next.Previous = node;\r\n            }\r\n\r\n            Count++;\r\n            <span class=\"hljs-keyword\">return</span> node;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets an enumerable based on the data in the list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The data in the list in an IEnumerable. It can used to create a list or an array with LINQ.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;T&gt; <span class=\"hljs-title\">GetData</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> current = Head;\r\n            <span class=\"hljs-keyword\">while</span> (current <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> current.Data;\r\n                current = current.Next;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets an enumerable based on the data in the list reversed.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The data in the list in an IEnumerable. It can used to create a list or an array with LINQ.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;T&gt; <span class=\"hljs-title\">GetDataReversed</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> current = Tail;\r\n            <span class=\"hljs-keyword\">while</span> (current <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> current.Data;\r\n                current = current.Previous;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Reverses the list. Because of how doubly linked list are structured this is not a complex action.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Reverse</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> current = Head;\r\n            DoublyLinkedListNode&lt;T&gt;? temp = <span class=\"hljs-literal\">null</span>;\r\n\r\n            <span class=\"hljs-keyword\">while</span> (current <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                temp = current.Previous;\r\n                current.Previous = current.Next;\r\n                current.Next = temp;\r\n                current = current.Previous;\r\n            }\r\n\r\n            Tail = Head;\r\n\r\n            <span class=\"hljs-comment\">// temp can be null on empty list</span>\r\n            <span class=\"hljs-keyword\">if</span> (temp <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                Head = temp.Previous;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Looks for a node in the list that contains the value of the parameter.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span> Value to be looked for in a node.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The node in the list the has the paramater as a value or null if not found.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DoublyLinkedListNode&lt;T&gt; <span class=\"hljs-title\">Find</span>(<span class=\"hljs-params\">T data</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> current = Head;\r\n            <span class=\"hljs-keyword\">while</span> (current <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (current.Data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> &amp;&amp; data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> || current.Data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span> &amp;&amp; current.Data.Equals(data))\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> current;\r\n                }\r\n\r\n                current = current.Next;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ItemNotFoundException();\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Looks for a node in the list that contains the value of the parameter.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;position&quot;&gt;</span> Position in the list.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The node in the list the has the paramater as a value or null if not found.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentOutOfRangeException&quot;&gt;</span>Thrown when position is negative or out range of the list.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DoublyLinkedListNode&lt;T&gt; <span class=\"hljs-title\">GetAt</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> position</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (position &lt; <span class=\"hljs-number\">0</span> || position &gt;= Count)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-string\">$&quot;Max count is <span class=\"hljs-subst\">{Count}</span>&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> current = Head;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; position; i++)\r\n            {\r\n                current = current!.Next;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> current ?? <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(position)}</span> must be an index in the list&quot;</span>);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes the Head and replaces it with the second node in the list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">RemoveHead</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (Head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException();\r\n            }\r\n\r\n            Head = Head.Next;\r\n            <span class=\"hljs-keyword\">if</span> (Head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                Tail = <span class=\"hljs-literal\">null</span>;\r\n                Count = <span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            Head.Previous = <span class=\"hljs-literal\">null</span>;\r\n            Count--;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes the last node in the list.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Remove</span>()</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (Tail <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Cannot prune empty list&quot;</span>);\r\n            }\r\n\r\n            Tail = Tail.Previous;\r\n            <span class=\"hljs-keyword\">if</span> (Tail <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                Head = <span class=\"hljs-literal\">null</span>;\r\n                Count = <span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            Tail.Next = <span class=\"hljs-literal\">null</span>;\r\n            Count--;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes specific node.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span> Node to be removed.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">RemoveNode</span>(<span class=\"hljs-params\">DoublyLinkedListNode&lt;T&gt; node</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (node == Head)\r\n            {\r\n                RemoveHead();\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (node == Tail)\r\n            {\r\n                Remove();\r\n                <span class=\"hljs-keyword\">return</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">if</span> (node.Previous <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> || node.Next <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(\r\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(node)}</span> cannot have Previous or Next null if it&#x27;s an internal node&quot;</span>);\r\n            }\r\n\r\n            node.Previous.Next = node.Next;\r\n            node.Next.Previous = node.Previous;\r\n            Count--;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes a node that contains the data from the parameter.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span> Data to be removed form the list.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Remove</span>(<span class=\"hljs-params\">T data</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> node = Find(data);\r\n            RemoveNode(node);\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Looks for the index of the node with the parameter as data.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span> Data to look for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Returns the index of the node if it is found or -1 if the node is not found.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">IndexOf</span>(<span class=\"hljs-params\">T data</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> current = Head;\r\n            <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">while</span> (current <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (current.Data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> &amp;&amp; data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> || current.Data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span> &amp;&amp; current.Data.Equals(data))\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> index;\r\n                }\r\n\r\n                index++;\r\n                current = current.Next;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     List contains a node that has the parameter as data.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span> Node to be removed.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>True if the node is found. False if it isn&#x27;t.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Contains</span>(<span class=\"hljs-params\">T data</span>)</span> =&gt; IndexOf(data) != <span class=\"hljs-number\">-1</span>;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Oskar Niburski",
      "email": "oskarniburski@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "David Chavarria",
      "email": "dvchavarriam@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Milad",
      "email": "mposhtdari@gmail.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Gabriel Mota Bromonschenkel Lima",
      "email": "gabriel.mota.b.lima@gmail.com",
      "commits": 1
    },
    {
      "name": "Meer Estiyak",
      "email": "50128043+mmestiyak@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Juliano Nunes",
      "email": "julianomarquesnunes@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ray",
      "email": "rbshealy@live.unc.edu",
      "commits": 1
    },
    {
      "name": "rnitish",
      "email": "nitishrajput2020.nr@gmail.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Moetez Skouri",
      "email": "moetezskouri@Moetezs-MacBook.local",
      "commits": 1
    },
    {
      "name": "Yang Libin",
      "email": "contact@yanglibin.info",
      "commits": 1
    },
    {
      "name": "Abhijay Kumar",
      "email": "abhijaynsit@gmail.com",
      "commits": 1
    },
    {
      "name": "Pratham Gupta",
      "email": "pratham18072@iiitd.ac.in",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "zacharyjones123",
      "email": "zrjones@ncsu.edu",
      "commits": 1
    },
    {
      "name": "liushubin-gitHub",
      "email": "65377959+liushubin-gitHub@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "TheSuperNoob",
      "email": "larsthorland@gmail.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aditya Sharma",
      "email": "32771292+adityasharma1234@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Keramot UL Islam",
      "email": "keramotul.islam@gmail.com",
      "commits": 2
    },
    {
      "name": "hmizz",
      "email": "hamza.chabchoub@medtech.tn",
      "commits": 2
    },
    {
      "name": "Ian Cowan",
      "email": "38896380+iccowan@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Abhijay Kumar",
      "email": "abhijay.kumar@centricconsulting.com",
      "commits": 2
    },
    {
      "name": "Rian Gallagher",
      "email": "rianogallagher@gmail.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Doru Kesriyeli",
      "email": "dkesriyelI@gmail.com",
      "commits": 3
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 4
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    },
    {
      "name": "Samrat De",
      "email": "rajmalhotra2016iitjee@gmail.com",
      "commits": 7
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en\\Data Structures\\Linked Lists\\Doubly Linked List.md",
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es\\Estructuras de datos\\Listas vinculadas\\Doble lista vinculada.md"
  }
}