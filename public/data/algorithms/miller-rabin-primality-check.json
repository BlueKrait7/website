{
  "slug": "miller-rabin-primality-check",
  "name": "Miller-Rabin primality check",
  "categories": [
    "numeric"
  ],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "./Algorithms/Numeric/MillerRabinPrimalityChecker.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Numeric\\MillerRabinPrimalityChecker.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Numerics;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> https://en.wikipedia.org/wiki/Miller-Rabin_primality_test</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> The Miller–Rabin primality test or Rabin–Miller primality test is a probabilistic primality test:</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> an algorithm which determines whether a given number is likely to be prime,</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> similar to the Fermat primality test and the Solovay–Strassen primality test.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> It is of historical significance in the search for a polynomial-time deterministic primality test.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Its probabilistic variant remains widely used in practice, as one of the simplest and fastest tests known.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MillerRabinPrimalityChecker</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Run the probabilistic primality test.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>Number to check.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;rounds&quot;&gt;</span>Number of rounds, the parameter determines the accuracy of the test, recommended value is Log2(n).<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>True if is a highly likely prime number; False otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error: number should be morhe than 3.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">IsProbablyPrimeNumber</span>(<span class=\"hljs-params\">BigInteger n, BigInteger rounds</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">3</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(n)}</span> should be more than 3&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// Input #1: n &gt; 3, an odd integer to be tested for primality</span>\r\n            <span class=\"hljs-comment\">// Input #2: k, the number of rounds of testing to perform, recommended k = Log2(n)</span>\r\n            <span class=\"hljs-comment\">// Output:   false = “composite”</span>\r\n            <span class=\"hljs-comment\">//           true  = “probably prime”</span>\r\n\r\n            <span class=\"hljs-comment\">// write n as 2r·d + 1 with d odd(by factoring out powers of 2 from n − 1)</span>\r\n            BigInteger r = <span class=\"hljs-number\">0</span>;\r\n            BigInteger d = n - <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">while</span> (d % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\r\n            {\r\n                r++;\r\n                d /= <span class=\"hljs-number\">2</span>;\r\n            }\r\n\r\n            BigInteger x;\r\n            Random rand = <span class=\"hljs-keyword\">new</span>();\r\n\r\n            <span class=\"hljs-comment\">// as there is no native random function for BigInteger we suppose a random int number is sufficient</span>\r\n            <span class=\"hljs-built_in\">int</span> nMaxValue = (n &gt; <span class=\"hljs-built_in\">int</span>.MaxValue) ? <span class=\"hljs-built_in\">int</span>.MaxValue : (<span class=\"hljs-built_in\">int</span>)n;\r\n            BigInteger a = rand.Next(<span class=\"hljs-number\">2</span>, nMaxValue - <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// ; pick a random integer a in the range[2, n − 2]</span>\r\n\r\n            <span class=\"hljs-keyword\">while</span> (rounds &gt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                rounds--;\r\n                x = BigInteger.ModPow(a, d, n);\r\n                <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">1</span> || x == (n - <span class=\"hljs-number\">1</span>))\r\n                {\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                BigInteger tempr = r - <span class=\"hljs-number\">1</span>;\r\n                <span class=\"hljs-keyword\">while</span> (tempr &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (x != n - <span class=\"hljs-number\">1</span>))\r\n                {\r\n                    tempr--;\r\n                    x = BigInteger.ModPow(x, <span class=\"hljs-number\">2</span>, n);\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">if</span> (x == n - <span class=\"hljs-number\">1</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}