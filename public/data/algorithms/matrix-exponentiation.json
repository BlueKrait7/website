{
  "slug": "matrix-exponentiation",
  "name": "Matrix Exponentiation",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\matrix_exponentiation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\matrix_exponentiation.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Matrix Exponentiation&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> timeit\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nMatrix Exponentiation is a technique to solve linear recurrences in logarithmic time.\r\nYou read more about it here:\r\nhttp://zobayer.blogspot.com/2010/11/matrix-exponentiation.html\r\nhttps://www.hackerearth.com/practice/notes/matrix-exponentiation-1/\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Matrix</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, arg</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(arg, <span class=\"hljs-built_in\">list</span>):  <span class=\"hljs-comment\"># Initializes a matrix identical to the one provided.</span>\r\n            self.t = arg\r\n            self.n = <span class=\"hljs-built_in\">len</span>(arg)\r\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># Initializes a square matrix of the given size and set values to zero.</span>\r\n            self.n = arg\r\n            self.t = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.n)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.n)]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, b</span>):\r\n        matrix = Matrix(self.n)\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.n):\r\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.n):\r\n                <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.n):\r\n                    matrix.t[i][j] += self.t[i][k] * b.t[k][j]\r\n        <span class=\"hljs-keyword\">return</span> matrix\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">modular_exponentiation</span>(<span class=\"hljs-params\">a, b</span>):\r\n    matrix = Matrix([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]])\r\n    <span class=\"hljs-keyword\">while</span> b &gt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">if</span> b &amp; <span class=\"hljs-number\">1</span>:\r\n            matrix *= a\r\n        a *= a\r\n        b &gt;&gt;= <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> matrix\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fibonacci_with_matrix_exponentiation</span>(<span class=\"hljs-params\">n, f1, f2</span>):\r\n    <span class=\"hljs-comment\"># Trivial Cases</span>\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> f1\r\n    <span class=\"hljs-keyword\">elif</span> n == <span class=\"hljs-number\">2</span>:\r\n        <span class=\"hljs-keyword\">return</span> f2\r\n    matrix = Matrix([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]])\r\n    matrix = modular_exponentiation(matrix, n - <span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-keyword\">return</span> f2 * matrix.t[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] + f1 * matrix.t[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simple_fibonacci</span>(<span class=\"hljs-params\">n, f1, f2</span>):\r\n    <span class=\"hljs-comment\"># Trivial Cases</span>\r\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> f1\r\n    <span class=\"hljs-keyword\">elif</span> n == <span class=\"hljs-number\">2</span>:\r\n        <span class=\"hljs-keyword\">return</span> f2\r\n\r\n    fn_1 = f1\r\n    fn_2 = f2\r\n    n -= <span class=\"hljs-number\">2</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> n &gt; <span class=\"hljs-number\">0</span>:\r\n        fn_1, fn_2 = fn_1 + fn_2, fn_1\r\n        n -= <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> fn_1\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">matrix_exponentiation_time</span>():\r\n    setup = <span class=\"hljs-string\">&quot;&quot;&quot;\r\nfrom random import randint\r\nfrom __main__ import fibonacci_with_matrix_exponentiation\r\n&quot;&quot;&quot;</span>\r\n    code = <span class=\"hljs-string\">&quot;fibonacci_with_matrix_exponentiation(randint(1,70000), 1, 1)&quot;</span>\r\n    exec_time = timeit.timeit(setup=setup, stmt=code, number=<span class=\"hljs-number\">100</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;With matrix exponentiation the average execution time is &quot;</span>, exec_time / <span class=\"hljs-number\">100</span>)\r\n    <span class=\"hljs-keyword\">return</span> exec_time\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simple_fibonacci_time</span>():\r\n    setup = <span class=\"hljs-string\">&quot;&quot;&quot;\r\nfrom random import randint\r\nfrom __main__ import simple_fibonacci\r\n&quot;&quot;&quot;</span>\r\n    code = <span class=\"hljs-string\">&quot;simple_fibonacci(randint(1,70000), 1, 1)&quot;</span>\r\n    exec_time = timeit.timeit(setup=setup, stmt=code, number=<span class=\"hljs-number\">100</span>)\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;Without matrix exponentiation the average execution time is &quot;</span>, exec_time / <span class=\"hljs-number\">100</span>\r\n    )\r\n    <span class=\"hljs-keyword\">return</span> exec_time\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    matrix_exponentiation_time()\r\n    simple_fibonacci_time()\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    },
    "c-plus-plus": {
      "dir": "others\\matrix_exponentiation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others\\matrix_exponentiation.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n@file\r\n@brief Matrix Exponentiation.\r\n\r\nThe problem can be solved with DP but constraints are high.\r\n&lt;br/&gt;\\f$a_i = b_i\\f$ (for \\f$i &lt;= k\\f$)\r\n&lt;br/&gt;\\f$a_i = c_1 a_{i-1} + c_2 a_{i-2} + ... + c_k a_{i-k}\\f$ (for \\f$i &gt; k\\f$)\r\n&lt;br/&gt;Taking the example of Fibonacci series, \\f$k=2\\f$\r\n&lt;br/&gt;\\f$b_1 = 1,\\; b_2=1\\f$\r\n&lt;br/&gt;\\f$c_1 = 1,\\; c_2=1\\f$\r\n&lt;br/&gt;\\f$a = \\begin{bmatrix}0&amp; 1&amp; 1&amp; 2&amp; \\ldots\\end{bmatrix}\\f$\r\n&lt;br/&gt;This way you can find the \\f$10^{18}\\f$ fibonacci number%MOD.\r\nI have given a general way to use it. The program takes the input of B and C\r\nmatrix.\r\n\r\nSteps for Matrix Expo\r\n1. Create vector F1 : which is the copy of B.\r\n2. Create transpose matrix (Learn more about it on the internet)\r\n3. Perform \\f$T^{n-1}\\f$ [transpose matrix to the power n-1]\r\n4. Multiply with F to get the last matrix of size (1\\f$\\times\\f$k).\r\n\r\nThe first element of this matrix is the required result.\r\n*/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">using</span> std::cin;\r\n<span class=\"hljs-keyword\">using</span> std::cout;\r\n<span class=\"hljs-keyword\">using</span> std::vector;\r\n\r\n<span class=\"hljs-comment\">/*! shorthand definition for `int64_t` */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ll int64_t</span>\r\n\r\n<span class=\"hljs-comment\">/*! shorthand definition for `std::endl` */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> endl std::endl</span>\r\n\r\n<span class=\"hljs-comment\">/*! shorthand definition for `int64_t` */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MOD 1000000007</span>\r\n\r\n<span class=\"hljs-comment\">/** global variable mat_size\r\n * @todo @stepfencurryxiao add documetnation\r\n */</span>\r\nll mat_size;\r\n\r\n<span class=\"hljs-comment\">/** global vector variables used in the ::ans function.\r\n * @todo @stepfencurryxiao add documetnation\r\n */</span>\r\nvector&lt;ll&gt; fib_b, fib_c;\r\n\r\n<span class=\"hljs-comment\">/** To multiply 2 matrices\r\n * \\param [in] A matrix 1 of size (m\\f$\\times\\f$n)\r\n * \\param [in] B \\p matrix 2 of size (p\\f$\\times\\f$q)\\n\\note \\f$p=n\\f$\r\n * \\result matrix of dimension (m\\f$\\times\\f$q)\r\n */</span>\r\nvector&lt;vector&lt;ll&gt;&gt; <span class=\"hljs-built_in\">multiply</span>(<span class=\"hljs-type\">const</span> vector&lt;vector&lt;ll&gt;&gt; &amp;A,\r\n                            <span class=\"hljs-type\">const</span> vector&lt;vector&lt;ll&gt;&gt; &amp;B) {\r\n    vector&lt;vector&lt;ll&gt;&gt; <span class=\"hljs-built_in\">C</span>(mat_size + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">vector</span>&lt;ll&gt;(mat_size + <span class=\"hljs-number\">1</span>));\r\n    <span class=\"hljs-keyword\">for</span> (ll i = <span class=\"hljs-number\">1</span>; i &lt;= mat_size; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (ll j = <span class=\"hljs-number\">1</span>; j &lt;= mat_size; j++) {\r\n            <span class=\"hljs-keyword\">for</span> (ll z = <span class=\"hljs-number\">1</span>; z &lt;= mat_size; z++) {\r\n                C[i][j] = (C[i][j] + (A[i][z] * B[z][j]) % MOD) % MOD;\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> C;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** computing integer power of a matrix using recursive multiplication.\r\n * @note A must be a square matrix for this algorithm.\r\n * \\param [in] A base matrix\r\n * \\param [in] p exponent\r\n * \\return matrix of same dimension as A\r\n */</span>\r\nvector&lt;vector&lt;ll&gt;&gt; <span class=\"hljs-built_in\">power</span>(<span class=\"hljs-type\">const</span> vector&lt;vector&lt;ll&gt;&gt; &amp;A, ll p) {\r\n    <span class=\"hljs-keyword\">if</span> (p == <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">return</span> A;\r\n    <span class=\"hljs-keyword\">if</span> (p % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">multiply</span>(A, <span class=\"hljs-built_in\">power</span>(A, p - <span class=\"hljs-number\">1</span>));\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        vector&lt;vector&lt;ll&gt;&gt; X = <span class=\"hljs-built_in\">power</span>(A, p / <span class=\"hljs-number\">2</span>);\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">multiply</span>(X, X);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/*! Wrapper for Fibonacci\r\n * \\param[in] n \\f$n^\\text{th}\\f$ Fibonacci number\r\n * \\return \\f$n^\\text{th}\\f$ Fibonacci number\r\n */</span>\r\n<span class=\"hljs-function\">ll <span class=\"hljs-title\">ans</span><span class=\"hljs-params\">(ll n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">if</span> (n &lt;= mat_size)\r\n        <span class=\"hljs-keyword\">return</span> fib_b[n - <span class=\"hljs-number\">1</span>];\r\n    <span class=\"hljs-comment\">// F1</span>\r\n    <span class=\"hljs-function\">vector&lt;ll&gt; <span class=\"hljs-title\">F1</span><span class=\"hljs-params\">(mat_size + <span class=\"hljs-number\">1</span>)</span></span>;\r\n    <span class=\"hljs-keyword\">for</span> (ll i = <span class=\"hljs-number\">1</span>; i &lt;= mat_size; i++) F1[i] = fib_b[i - <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-comment\">// Transpose matrix</span>\r\n    vector&lt;vector&lt;ll&gt;&gt; <span class=\"hljs-built_in\">T</span>(mat_size + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">vector</span>&lt;ll&gt;(mat_size + <span class=\"hljs-number\">1</span>));\r\n    <span class=\"hljs-keyword\">for</span> (ll i = <span class=\"hljs-number\">1</span>; i &lt;= mat_size; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (ll j = <span class=\"hljs-number\">1</span>; j &lt;= mat_size; j++) {\r\n            <span class=\"hljs-keyword\">if</span> (i &lt; mat_size) {\r\n                <span class=\"hljs-keyword\">if</span> (j == i + <span class=\"hljs-number\">1</span>)\r\n                    T[i][j] = <span class=\"hljs-number\">1</span>;\r\n                <span class=\"hljs-keyword\">else</span>\r\n                    T[i][j] = <span class=\"hljs-number\">0</span>;\r\n                <span class=\"hljs-keyword\">continue</span>;\r\n            }\r\n            T[i][j] = fib_c[mat_size - j];\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">// T^n-1</span>\r\n    T = <span class=\"hljs-built_in\">power</span>(T, n - <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-comment\">// T*F1</span>\r\n    ll res = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (ll i = <span class=\"hljs-number\">1</span>; i &lt;= mat_size; i++) {\r\n        res = (res + (T[<span class=\"hljs-number\">1</span>][i] * F1[i]) % MOD) % MOD;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> res;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    cin.<span class=\"hljs-built_in\">tie</span>(<span class=\"hljs-number\">0</span>);\r\n    cout.<span class=\"hljs-built_in\">tie</span>(<span class=\"hljs-number\">0</span>);\r\n    ll t;\r\n    cin &gt;&gt; t;\r\n    ll i, j, x;\r\n    <span class=\"hljs-keyword\">while</span> (t--) {\r\n        cin &gt;&gt; mat_size;\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; mat_size; i++) {\r\n            cin &gt;&gt; x;\r\n            fib_b.<span class=\"hljs-built_in\">pb</span>(x);\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; mat_size; i++) {\r\n            cin &gt;&gt; x;\r\n            fib_c.<span class=\"hljs-built_in\">pb</span>(x);\r\n        }\r\n        cin &gt;&gt; x;\r\n        cout &lt;&lt; <span class=\"hljs-built_in\">ans</span>(x) &lt;&lt; endl;\r\n        fib_b.<span class=\"hljs-built_in\">clear</span>();\r\n        fib_c.<span class=\"hljs-built_in\">clear</span>();\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Aniruddha Bhattacharjee",
      "email": "aniruddha97bhatt@gmail.com",
      "commits": 1
    },
    {
      "name": "Kushagra Nigam",
      "email": "kushagra1998@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}