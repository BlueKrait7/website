{
  "slug": "number-of-possible-binary-trees",
  "name": "Number of Possible Binary Trees",
  "categories": [
    "datastructures",
    "binarytree"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\binary_tree\\number_of_possible_binary_trees.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\binary_tree\\number_of_possible_binary_trees.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nHey, we are going to find an exciting number called Catalan number which is use to find\r\nthe number of possible binary search trees from tree of a given number of nodes.\r\n\r\nWe will use the formula: t(n) = SUMMATION(i = 1 to n)t(i-1)t(n-i)\r\n\r\nFurther details at Wikipedia: https://en.wikipedia.org/wiki/Catalan_number\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\nOur Contribution:\r\nBasically we Create the 2 function:\r\n    1. catalan_number(node_count: int) -&gt; int\r\n        Returns the number of possible binary search trees for n nodes.\r\n    2. binary_tree_count(node_count: int) -&gt; int\r\n        Returns the number of possible binary trees for n nodes.\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binomial_coefficient</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, k: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Since Here we Find the Binomial Coefficient:\r\n    https://en.wikipedia.org/wiki/Binomial_coefficient\r\n    C(n,k) = n! / k!(n-k)!\r\n    :param n: 2 times of Number of nodes\r\n    :param k: Number of nodes\r\n    :return:  Integer Value\r\n\r\n    &gt;&gt;&gt; binomial_coefficient(4, 2)\r\n    6\r\n    &quot;&quot;&quot;</span>\r\n    result = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># To kept the Calculated Value</span>\r\n    <span class=\"hljs-comment\"># Since C(n, k) = C(n, n-k)</span>\r\n    <span class=\"hljs-keyword\">if</span> k &gt; (n - k):\r\n        k = n - k\r\n    <span class=\"hljs-comment\"># Calculate C(n,k)</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(k):\r\n        result *= n - i\r\n        result //= i + <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> result\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">catalan_number</span>(<span class=\"hljs-params\">node_count: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    We can find Catalan number many ways but here we use Binomial Coefficient because it\r\n    does the job in O(n)\r\n\r\n    return the Catalan number of n using 2nCn/(n+1).\r\n    :param n: number of nodes\r\n    :return: Catalan number of n nodes\r\n\r\n    &gt;&gt;&gt; catalan_number(5)\r\n    42\r\n    &gt;&gt;&gt; catalan_number(6)\r\n    132\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> binomial_coefficient(<span class=\"hljs-number\">2</span> * node_count, node_count) // (node_count + <span class=\"hljs-number\">1</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">factorial</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return the factorial of a number.\r\n    :param n: Number to find the Factorial of.\r\n    :return: Factorial of n.\r\n\r\n    &gt;&gt;&gt; import math\r\n    &gt;&gt;&gt; all(factorial(i) == math.factorial(i) for i in range(10))\r\n    True\r\n    &gt;&gt;&gt; factorial(-5)  # doctest: +ELLIPSIS\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: factorial() not defined for negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;factorial() not defined for negative values&quot;</span>)\r\n    result = <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\r\n        result *= i\r\n    <span class=\"hljs-keyword\">return</span> result\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_tree_count</span>(<span class=\"hljs-params\">node_count: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return the number of possible of binary trees.\r\n    :param n: number of nodes\r\n    :return: Number of possible binary trees\r\n\r\n    &gt;&gt;&gt; binary_tree_count(5)\r\n    5040\r\n    &gt;&gt;&gt; binary_tree_count(6)\r\n    95040\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> catalan_number(node_count) * factorial(node_count)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    node_count = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the number of nodes: &quot;</span>).strip() <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-keyword\">if</span> node_count &lt;= <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;We need some nodes to work with.&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">f&quot;Given <span class=\"hljs-subst\">{node_count}</span> nodes, there are <span class=\"hljs-subst\">{binary_tree_count(node_count)}</span> &quot;</span>\r\n        <span class=\"hljs-string\">f&quot;binary trees and <span class=\"hljs-subst\">{catalan_number(node_count)}</span> binary search trees.&quot;</span>\r\n    )\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "MadhavCode",
      "email": "madhav0404dixit@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}