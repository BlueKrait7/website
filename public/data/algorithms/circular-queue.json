{
  "slug": "circular-queue",
  "name": "Circular Queue",
  "categories": [
    "datastructures",
    "queues"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\queue\\circular_queue.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\queue\\circular_queue.py",
      "code": "<span class=\"hljs-comment\"># Implementation of Circular Queue (using Python lists)</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularQueue</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Circular FIFO queue with a fixed capacity&quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, n: <span class=\"hljs-built_in\">int</span></span>):\r\n        self.n = n\r\n        self.array = [<span class=\"hljs-literal\">None</span>] * self.n\r\n        self.front = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># index of the first element</span>\r\n        self.rear = <span class=\"hljs-number\">0</span>\r\n        self.size = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; cq = CircularQueue(5)\r\n        &gt;&gt;&gt; len(cq)\r\n        0\r\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;)  # doctest: +ELLIPSIS\r\n        &lt;data_structures.queue.circular_queue.CircularQueue object at ...\r\n        &gt;&gt;&gt; len(cq)\r\n        1\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.size\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; cq = CircularQueue(5)\r\n        &gt;&gt;&gt; cq.is_empty()\r\n        True\r\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;).is_empty()\r\n        False\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.size == <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">first</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; cq = CircularQueue(5)\r\n        &gt;&gt;&gt; cq.first()\r\n        False\r\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;).first()\r\n        &#x27;A&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">if</span> self.is_empty() <span class=\"hljs-keyword\">else</span> self.array[self.front]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-params\">self, data</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        This function insert an element in the queue using self.rear value as an index\r\n        &gt;&gt;&gt; cq = CircularQueue(5)\r\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;)  # doctest: +ELLIPSIS\r\n        &lt;data_structures.queue.circular_queue.CircularQueue object at ...\r\n        &gt;&gt;&gt; (cq.size, cq.first())\r\n        (1, &#x27;A&#x27;)\r\n        &gt;&gt;&gt; cq.enqueue(&quot;B&quot;)  # doctest: +ELLIPSIS\r\n        &lt;data_structures.queue.circular_queue.CircularQueue object at ...\r\n        &gt;&gt;&gt; (cq.size, cq.first())\r\n        (2, &#x27;A&#x27;)\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.size &gt;= self.n:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;QUEUE IS FULL&quot;</span>)\r\n\r\n        self.array[self.rear] = data\r\n        self.rear = (self.rear + <span class=\"hljs-number\">1</span>) % self.n\r\n        self.size += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> self\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dequeue</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        This function removes an element from the queue using on self.front value as an\r\n        index\r\n        &gt;&gt;&gt; cq = CircularQueue(5)\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        Traceback (most recent call last):\r\n           ...\r\n        Exception: UNDERFLOW\r\n        &gt;&gt;&gt; cq.enqueue(&quot;A&quot;).enqueue(&quot;B&quot;).dequeue()\r\n        &#x27;A&#x27;\r\n        &gt;&gt;&gt; (cq.size, cq.first())\r\n        (1, &#x27;B&#x27;)\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        &#x27;B&#x27;\r\n        &gt;&gt;&gt; cq.dequeue()\r\n        Traceback (most recent call last):\r\n           ...\r\n        Exception: UNDERFLOW\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.size == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;UNDERFLOW&quot;</span>)\r\n\r\n        temp = self.array[self.front]\r\n        self.array[self.front] = <span class=\"hljs-literal\">None</span>\r\n        self.front = (self.front + <span class=\"hljs-number\">1</span>) % self.n\r\n        self.size -= <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> temp\r\n"
    },
    "javascript": {
      "dir": "Data-Structures\\Queue\\CircularQueue.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures\\Queue\\CircularQueue.js",
      "code": "<span class=\"hljs-comment\">// Circular Queues offer a quick to store FIFO data with a maximum size.</span>\r\n<span class=\"hljs-comment\">// Conserves memory as we only store up to our capacity</span>\r\n<span class=\"hljs-comment\">// It is opposed to a queue which could continue to grow if input outpaces output</span>\r\n<span class=\"hljs-comment\">// Doesnâ€™t use dynamic memory so No memory leaks</span>\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularQueue</span> {\r\n  <span class=\"hljs-title function_\">constructor</span> (maxLength) {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span> = []\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">maxLength</span> = maxLength\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// ADD ELEMENTS TO QUEUE</span>\r\n  enqueue (value) {\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">checkOverflow</span>()) <span class=\"hljs-keyword\">return</span>\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">checkEmpty</span>()) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> += <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> += <span class=\"hljs-number\">1</span>\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">maxLength</span>) {\r\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> = <span class=\"hljs-number\">1</span>\r\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> += <span class=\"hljs-number\">1</span>\r\n    }\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span>] = value\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// REMOVES ELEMENTS</span>\r\n  dequeue () {\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">checkEmpty</span>()) {\r\n      <span class=\"hljs-comment\">// UNDERFLOW</span>\r\n      <span class=\"hljs-keyword\">return</span>\r\n    }\r\n    <span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span>]\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span>] = <span class=\"hljs-string\">&#x27;*&#x27;</span>\r\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">checkSingleelement</span>()) {\r\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">maxLength</span>) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> = <span class=\"hljs-number\">1</span>\r\n      <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> += <span class=\"hljs-number\">1</span>\r\n      }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> y <span class=\"hljs-comment\">// Returns the removed element and replaces it with a star</span>\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// checks if the queue is empty or not</span>\r\n  checkEmpty () {\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> === <span class=\"hljs-number\">0</span>) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\r\n    }\r\n  }\r\n\r\n  checkSingleelement () {\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> !== <span class=\"hljs-number\">0</span>) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> = <span class=\"hljs-number\">0</span>\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Checks if max capacity of queue has been reached or not</span>\r\n  checkOverflow () {\r\n    <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-number\">1</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">maxLength</span>) || (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> + <span class=\"hljs-number\">1</span>)) {\r\n      <span class=\"hljs-comment\">// CIRCULAR QUEUE OVERFLOW</span>\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Prints the entire array (&#x27;*&#x27; represents blank space)</span>\r\n  display (output = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">1</span>; index &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-property\">length</span>; index++) {\r\n      <span class=\"hljs-title function_\">output</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[index])\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Displays the length of queue</span>\r\n  length () {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// Display the top most value of queue</span>\r\n  peek () {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">front</span>]\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">CircularQueue</span> }\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\queues\\CircularQueue.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\queues\\CircularQueue.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.queues;\r\n\r\n<span class=\"hljs-comment\">//This program implements the concept of CircularQueue in Java</span>\r\n<span class=\"hljs-comment\">//Link to the concept: (https://en.wikipedia.org/wiki/Circular_buffer)</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularQueue</span> {\r\n\r\n    <span class=\"hljs-type\">int</span>[] arr;\r\n    <span class=\"hljs-type\">int</span> topOfQueue;\r\n    <span class=\"hljs-type\">int</span> beginningOfQueue;\r\n    <span class=\"hljs-type\">int</span> size;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CircularQueue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> {\r\n        arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size];\r\n        topOfQueue = -<span class=\"hljs-number\">1</span>;\r\n        beginningOfQueue = -<span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-built_in\">this</span>.size = size;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (beginningOfQueue == -<span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFull</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (topOfQueue + <span class=\"hljs-number\">1</span> == beginningOfQueue) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (topOfQueue == size - <span class=\"hljs-number\">1</span> &amp;&amp; beginningOfQueue == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">enQueue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (isFull()) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;The Queue is full!&quot;</span>);\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            beginningOfQueue = <span class=\"hljs-number\">0</span>;\r\n            topOfQueue++;\r\n            arr[topOfQueue] = value;\r\n            System.out.println(value + <span class=\"hljs-string\">&quot; has been successfully inserted!&quot;</span>);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">if</span> (topOfQueue + <span class=\"hljs-number\">1</span> == size) {\r\n                topOfQueue = <span class=\"hljs-number\">0</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                topOfQueue++;\r\n            }\r\n            arr[topOfQueue] = value;\r\n            System.out.println(value + <span class=\"hljs-string\">&quot; has been successfully inserted!&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">deQueue</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;The Queue is Empty!&quot;</span>);\r\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> arr[beginningOfQueue];\r\n            arr[beginningOfQueue] = Integer.MIN_VALUE;\r\n            <span class=\"hljs-keyword\">if</span> (beginningOfQueue == topOfQueue) {\r\n                beginningOfQueue = topOfQueue = -<span class=\"hljs-number\">1</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (beginningOfQueue + <span class=\"hljs-number\">1</span> == size) {\r\n                beginningOfQueue = <span class=\"hljs-number\">0</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                beginningOfQueue++;\r\n            }\r\n            <span class=\"hljs-keyword\">return</span> res;\r\n        }\r\n\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peek</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (isEmpty()) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;The Queue is Empty!&quot;</span>);\r\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">return</span> arr[beginningOfQueue];\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteQueue</span><span class=\"hljs-params\">()</span> {\r\n        arr = <span class=\"hljs-literal\">null</span>;\r\n        System.out.println(<span class=\"hljs-string\">&quot;The Queue is deleted!&quot;</span>);\r\n    }\r\n\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">CircularQueue</span> <span class=\"hljs-variable\">cq</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CircularQueue</span>(<span class=\"hljs-number\">5</span>);\r\n        System.out.println(cq.isEmpty());\r\n        System.out.println(cq.isFull());\r\n        cq.enQueue(<span class=\"hljs-number\">1</span>);\r\n        cq.enQueue(<span class=\"hljs-number\">2</span>);\r\n        cq.enQueue(<span class=\"hljs-number\">3</span>);\r\n        cq.enQueue(<span class=\"hljs-number\">4</span>);\r\n        cq.enQueue(<span class=\"hljs-number\">5</span>);\r\n\r\n        System.out.println(cq.deQueue());\r\n        System.out.println(cq.deQueue());\r\n        System.out.println(cq.deQueue());\r\n        System.out.println(cq.deQueue());\r\n        System.out.println(cq.deQueue());\r\n        System.out.println(cq.isFull());\r\n        System.out.println(cq.isEmpty());\r\n        cq.enQueue(<span class=\"hljs-number\">6</span>);\r\n        cq.enQueue(<span class=\"hljs-number\">7</span>);\r\n        cq.enQueue(<span class=\"hljs-number\">8</span>);\r\n        System.out.println(cq.peek());\r\n        System.out.println(cq.peek());\r\n        cq.deleteQueue();\r\n\r\n    }\r\n}\r\n"
    },
    "dart": {
      "dir": "data_structures\\Queue\\Circular_Queue.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures\\Queue\\Circular_Queue.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-comment\">// author: kjain1810</span>\r\n<span class=\"hljs-comment\">// reference: https://en.wikipedia.org/wiki/Circular_buffer</span>\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> MAX_SIZE = <span class=\"hljs-number\">10</span>;\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CircularQueue</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\r\n  <span class=\"hljs-built_in\">int</span> start = <span class=\"hljs-number\">-1</span>, end = <span class=\"hljs-number\">-1</span>;\r\n  <span class=\"hljs-built_in\">List</span>&lt;T&gt; queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>&lt;T&gt;(MAX_SIZE);\r\n\r\n  <span class=\"hljs-comment\">// insert elements into the queue</span>\r\n  <span class=\"hljs-keyword\">void</span> enque(T element) {\r\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-number\">-1</span>) {\r\n      start = <span class=\"hljs-number\">0</span>;\r\n      end = <span class=\"hljs-number\">0</span>;\r\n      queue[<span class=\"hljs-number\">0</span>] = element;\r\n      <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (end == MAX_SIZE - <span class=\"hljs-number\">1</span> &amp;&amp; start == <span class=\"hljs-number\">0</span>) {\r\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The queue is full!!!&quot;</span>);\r\n      <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (end == start - <span class=\"hljs-number\">1</span>) {\r\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The queue is full!!!&quot;</span>);\r\n      <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    end++;\r\n    end %= MAX_SIZE;\r\n    queue[end] = element;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// remove elements from the queue</span>\r\n  T deque() {\r\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-number\">-1</span>) {\r\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The queue is empty!!!&quot;</span>);\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\r\n    }\r\n    T here = queue[start];\r\n    <span class=\"hljs-keyword\">if</span> (start == end) {\r\n      start = <span class=\"hljs-number\">-1</span>;\r\n      end = <span class=\"hljs-number\">-1</span>;\r\n      <span class=\"hljs-keyword\">return</span> here;\r\n    }\r\n    start++;\r\n    start %= MAX_SIZE;\r\n    <span class=\"hljs-keyword\">return</span> here;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// get the size of the queue</span>\r\n  <span class=\"hljs-built_in\">int</span> size() {\r\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-number\">-1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">if</span> (start &lt; end) <span class=\"hljs-keyword\">return</span> end - start + <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">return</span> (MAX_SIZE - (start - end));\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// print all the elements of the queue</span>\r\n  <span class=\"hljs-keyword\">void</span> printAll() {\r\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-number\">-1</span>) {\r\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The queue is empty!!!&quot;</span>);\r\n      <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    <span class=\"hljs-built_in\">int</span> i = start;\r\n    <span class=\"hljs-keyword\">while</span> (i != end) {\r\n      i++;\r\n      i %= MAX_SIZE;\r\n      <span class=\"hljs-built_in\">print</span>(queue[i]);\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  test(<span class=\"hljs-string\">&quot;Initial CircularQueue is empty&quot;</span>, () {\r\n    CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt; queue = <span class=\"hljs-keyword\">new</span> CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt;();\r\n\r\n    expect(queue.deque(), isNull);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;deque return first item put to CircularQueue&quot;</span>, () {\r\n    CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt; queue = <span class=\"hljs-keyword\">new</span> CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt;();\r\n    queue.enque(<span class=\"hljs-number\">1</span>);\r\n\r\n    expect(queue.deque(), equals(<span class=\"hljs-number\">1</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;CircularQueue act as fifo&quot;</span>, () {\r\n    CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt; queue = <span class=\"hljs-keyword\">new</span> CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt;();\r\n    queue.enque(<span class=\"hljs-number\">1</span>);\r\n    queue.enque(<span class=\"hljs-number\">2</span>);\r\n    queue.enque(<span class=\"hljs-number\">3</span>);\r\n\r\n    expect(queue.deque(), equals(<span class=\"hljs-number\">1</span>));\r\n    expect(queue.deque(), equals(<span class=\"hljs-number\">2</span>));\r\n    expect(queue.deque(), equals(<span class=\"hljs-number\">3</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;deque returns null after removing all items&quot;</span>, () {\r\n    CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt; queue = <span class=\"hljs-keyword\">new</span> CircularQueue&lt;<span class=\"hljs-built_in\">int</span>&gt;();\r\n    queue.enque(<span class=\"hljs-number\">1</span>);\r\n    queue.enque(<span class=\"hljs-number\">2</span>);\r\n    queue.enque(<span class=\"hljs-number\">3</span>);\r\n\r\n    queue.deque();\r\n    queue.deque();\r\n    queue.deque();\r\n\r\n    expect(queue.deque(), isNull);\r\n  });\r\n}\r\n"
    },
    "ruby": {
      "dir": "data_structures\\queues\\circular_queue.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures\\queues\\circular_queue.rb",
      "code": "<span class=\"hljs-comment\"># Challenge name: Circular Queue</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Design the implementation of a circular queue.</span>\r\n<span class=\"hljs-comment\"># The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and</span>\r\n<span class=\"hljs-comment\"># the last position is connected back to the first position to make a circle. It is also called &quot;Ring Buffer&quot;.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Complexity Analysis</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Time complexity: O(1).</span>\r\n<span class=\"hljs-comment\"># All of the methods in our circular data structure are of constant time complexity.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Space Complexity: O(N).</span>\r\n<span class=\"hljs-comment\"># The overall space complexity of the data structure is linear, where N is the pre-assigned capacity of the queue.</span>\r\n<span class=\"hljs-comment\"># However, it is worth mentioning that the memory consumption of the data structure remains as its pre-assigned capacity during its entire life cycle.</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CircularQueue</span></span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(max_size)</span></span>\r\n    <span class=\"hljs-variable\">@max_size</span> = max_size\r\n    <span class=\"hljs-variable\">@queue</span> = Array.new(max_size, <span class=\"hljs-literal\">nil</span>)\r\n    <span class=\"hljs-variable\">@front</span> = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-variable\">@back</span> = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-variable\">@size</span> = <span class=\"hljs-number\">0</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:front</span>, <span class=\"hljs-symbol\">:back</span>, <span class=\"hljs-symbol\">:size</span>\r\n  <span class=\"hljs-keyword\">attr_reader</span> <span class=\"hljs-symbol\">:max_size</span>, <span class=\"hljs-symbol\">:queue</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">empty?</span></span>\r\n    size == <span class=\"hljs-number\">0</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">peek</span></span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span> <span class=\"hljs-keyword\">if</span> empty?\r\n\r\n    queue[front]\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(x)</span></span>\r\n    raise <span class=\"hljs-string\">&#x27;Queue is at max capacity&#x27;</span> <span class=\"hljs-keyword\">if</span> size == max_size\r\n\r\n    queue[back] = x\r\n    <span class=\"hljs-variable\">@back</span> = (back + <span class=\"hljs-number\">1</span>) % max_size\r\n    <span class=\"hljs-variable\">@size</span> += <span class=\"hljs-number\">1</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pop</span></span>\r\n    raise <span class=\"hljs-string\">&#x27;Queue is empty&#x27;</span> <span class=\"hljs-keyword\">if</span> size == <span class=\"hljs-number\">0</span>\r\n\r\n    temp = queue[front]\r\n    queue[front] = <span class=\"hljs-literal\">nil</span>\r\n    <span class=\"hljs-variable\">@front</span> = (front + <span class=\"hljs-number\">1</span>) % max_size\r\n    <span class=\"hljs-variable\">@size</span> -= <span class=\"hljs-number\">1</span>\r\n\r\n    temp\r\n  <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nqueue = CircularQueue.new(<span class=\"hljs-number\">3</span>)\r\n\r\n<span class=\"hljs-keyword\">begin</span>\r\n  queue.pop\r\n<span class=\"hljs-keyword\">rescue</span> StandardError =&gt; e\r\n  puts e.message\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nqueue.add(<span class=\"hljs-number\">1</span>)\r\nqueue.add(<span class=\"hljs-number\">2</span>)\r\nqueue.add(<span class=\"hljs-number\">3</span>)\r\n\r\n<span class=\"hljs-keyword\">begin</span>\r\n  queue.add(<span class=\"hljs-number\">4</span>)\r\n<span class=\"hljs-keyword\">rescue</span> StandardError =&gt; e\r\n  puts e.message\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs queue.inspect\r\n<span class=\"hljs-comment\"># =&gt; #&lt;CircularQueue:0x00007fea23876cd8 <span class=\"hljs-doctag\">@max</span>_size=3, <span class=\"hljs-doctag\">@queue</span>=[1, 2, 3], <span class=\"hljs-doctag\">@front</span>=0, <span class=\"hljs-doctag\">@back</span>=0, <span class=\"hljs-doctag\">@size</span>=3&gt;</span>\r\n\r\nputs queue.peek\r\n<span class=\"hljs-comment\"># =&gt; 1</span>\r\n\r\nqueue.pop\r\n\r\nputs queue.peek\r\n<span class=\"hljs-comment\"># =&gt; 2</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 1
    },
    {
      "name": "Vijay Siva",
      "email": "vijay.sivasubramaniam@instacart.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sandeepan-Das",
      "email": "sandeepandas2000@gmail.com",
      "commits": 1
    },
    {
      "name": "FyZhu97",
      "email": "73351452+FyZhu97@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Paridhi Jain",
      "email": "83594113+Paridhicodes@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Himanshu Bhatnagar",
      "email": "33115688+Himan10@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 2
    },
    {
      "name": "Kunal Jain",
      "email": "30985312+kjain1810@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "kjain1810",
      "email": "kunaljain.2000@yahoo.in",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}