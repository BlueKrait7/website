{
  "slug": "fft-bluestein",
  "name": "FFT Bluestein",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\FFTBluestein.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\FFTBluestein.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Class for calculating the Fast Fourier Transform (FFT) of a discrete signal\r\n * using the Bluestein&#x27;s algorithm.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Ioannis Karavitsis\r\n * <span class=\"hljs-doctag\">@version</span> 1.0\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FFTBluestein</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Bluestein&#x27;s FFT Algorithm.\r\n     *\r\n     * &lt;p&gt;\r\n     * More info:\r\n     * https://en.wikipedia.org/wiki/Chirp_Z-transform#Bluestein.27s_algorithm\r\n     * http://tka4.org/materials/lib/Articles-Books/Numerical%20Algorithms/Hartley_Trasform/Bluestein%27s%20FFT%20algorithm%20-%20Wikipedia,%20the%20free%20encyclopedia.htm\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> x The discrete signal which is then converted to the FFT or the\r\n     * IFFT of signal x.\r\n     * <span class=\"hljs-doctag\">@param</span> inverse True if you want to find the inverse FFT.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fftBluestein</span><span class=\"hljs-params\">(ArrayList&lt;FFT.Complex&gt; x, <span class=\"hljs-type\">boolean</span> inverse)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> x.size();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bnSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> * N - <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">direction</span> <span class=\"hljs-operator\">=</span> inverse ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>;\r\n        ArrayList&lt;FFT.Complex&gt; an = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n        ArrayList&lt;FFT.Complex&gt; bn = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n\r\n        <span class=\"hljs-comment\">/* Initialization of the b(n) sequence (see Wikipedia&#x27;s article above for the symbols used)*/</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; bnSize; i++) {\r\n            bn.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex());\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">angle</span> <span class=\"hljs-operator\">=</span> (i - N + <span class=\"hljs-number\">1</span>) * (i - N + <span class=\"hljs-number\">1</span>) * Math.PI / N * direction;\r\n            bn.set(i, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex(Math.cos(angle), Math.sin(angle)));\r\n            bn.set(bnSize - i - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex(Math.cos(angle), Math.sin(angle)));\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* Initialization of the a(n) sequence */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">angle</span> <span class=\"hljs-operator\">=</span> -i * i * Math.PI / N * direction;\r\n            an.add(x.get(i).multiply(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex(Math.cos(angle), Math.sin(angle))));\r\n        }\r\n\r\n        ArrayList&lt;FFT.Complex&gt; convolution = ConvolutionFFT.convolutionFFT(an, bn);\r\n\r\n        <span class=\"hljs-comment\">/* The final multiplication of the convolution with the b*(k) factor  */</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n            <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">angle</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span> * i * i * Math.PI / N * direction;\r\n            FFT.<span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">bk</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex(Math.cos(angle), Math.sin(angle));\r\n            x.set(i, bk.multiply(convolution.get(i + N - <span class=\"hljs-number\">1</span>)));\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/* Divide by N if we want the inverse FFT */</span>\r\n        <span class=\"hljs-keyword\">if</span> (inverse) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n                FFT.<span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">z</span> <span class=\"hljs-operator\">=</span> x.get(i);\r\n                x.set(i, z.divide(N));\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "JohnKara",
      "email": "kcioannis@csd.auth.gr",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}