{
  "slug": "coin-change-topdown",
  "name": "Coin Change Topdown",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming\\coin_change_topdown.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\coin_change_topdown.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Minimum coins](https://leetcode.com/problems/coin-change/) change\r\n * problem is a problem used to find the minimum number of coins required to\r\n * completely reach a target amount.\r\n *\r\n * @details\r\n * This problem can be solved using 2 methods:\r\n * 1. Top down approach\r\n * 2. Bottom up appraoch\r\n * Top down approach involves a vector with all elements initialised to 0.\r\n * It is based on optimal substructure and overlapping subproblems.\r\n * Overall time complexity of coin change problem is O(n*t)\r\n * For example: example 1:-\r\n * Coins: {1,7,10}\r\n * Target:15\r\n * Therfore minimum number of coins required = 3 of denomination 1,7 and 7.\r\n * @author [Divyansh Kushwaha](https://github.com/webdesignbydivyansh)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span>   <span class=\"hljs-comment\">// for INT_MAX</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">// for io operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">// for std::vector</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace dynamic_programming\r\n * @brief Dynamic Programming algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace mincoins_topdown\r\n * @brief Functions for [minimum coin\r\n * exchange](https://leetcode.com/problems/coin-change/) problem\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> mincoins_topdown {\r\n<span class=\"hljs-comment\">/**\r\n * @brief This implementation is for finding minimum number of coins .\r\n * @param T template-type to use any kind of value\r\n * @param n amount to be reached\r\n * @param coins vector of coins\r\n * @param t deontes the number of coins\r\n * @param dp initilised to 0\r\n * @returns minimum number of coins\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title\">mincoins</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> T &amp;n, <span class=\"hljs-type\">const</span> std::vector&lt;T&gt; &amp;coins, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int16_t</span> &amp;t,\r\n                 std::vector&lt;T&gt; dp)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (dp[n] != <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> dp[n];\r\n    }\r\n    <span class=\"hljs-type\">int</span> ans = INT_MAX;  <span class=\"hljs-comment\">// variable to store min coins</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; t; i++) {\r\n        <span class=\"hljs-keyword\">if</span> (n - coins[i] &gt;= <span class=\"hljs-number\">0</span>) {  <span class=\"hljs-comment\">// if after subtracting the current</span>\r\n                                  <span class=\"hljs-comment\">// denomination is it greater than 0 or not</span>\r\n            <span class=\"hljs-type\">int</span> sub = <span class=\"hljs-built_in\">mincoins</span>(n - coins[i], coins, t, dp);\r\n            ans = std::<span class=\"hljs-built_in\">min</span>(ans, sub + <span class=\"hljs-number\">1</span>);\r\n        }\r\n    }\r\n    dp[n] = ans;\r\n    <span class=\"hljs-keyword\">return</span> dp[n];  <span class=\"hljs-comment\">// returns minimum number of coins</span>\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace mincoins_topdown</span>\r\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// example 1: number of coins=3 and minimum coins required=3(7,7,1)</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int64_t</span> n1 = <span class=\"hljs-number\">15</span>;\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int8_t</span> t1 = <span class=\"hljs-number\">3</span>, a1 = <span class=\"hljs-number\">0</span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTest 1...&quot;</span>;\r\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; arr1{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>};\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; <span class=\"hljs-title\">dp1</span><span class=\"hljs-params\">(n1 + <span class=\"hljs-number\">1</span>)</span></span>;\r\n    <span class=\"hljs-built_in\">fill</span>(dp1.<span class=\"hljs-built_in\">begin</span>(), dp1.<span class=\"hljs-built_in\">end</span>(), a1);\r\n    <span class=\"hljs-built_in\">assert</span>(dynamic_programming::mincoins_topdown::<span class=\"hljs-built_in\">mincoins</span>(n1, arr1, t1, dp1) ==\r\n           <span class=\"hljs-number\">3</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the test</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "webdesignbydivyansh",
      "email": "62607594+webdesignbydivyansh@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}