{
  "slug": "minimum-spanning-tree-kruskal-2",
  "name": "Minimum Spanning Tree Kruskal 2",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\minimum_spanning_tree_kruskal2.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\minimum_spanning_tree_kruskal2.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Generic</span>, TypeVar\r\n\r\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DisjointSetTreeNode</span>(<span class=\"hljs-type\">Generic</span>[T]):\r\n    <span class=\"hljs-comment\"># Disjoint Set Node to store the parent and rank</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.data = data\r\n        self.parent = self\r\n        self.rank = <span class=\"hljs-number\">0</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DisjointSetTree</span>(<span class=\"hljs-type\">Generic</span>[T]):\r\n    <span class=\"hljs-comment\"># Disjoint Set DataStructure</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># map from node name to the node object</span>\r\n        self.<span class=\"hljs-built_in\">map</span>: <span class=\"hljs-built_in\">dict</span>[T, DisjointSetTreeNode[T]] = {}\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_set</span>(<span class=\"hljs-params\">self, data: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># create a new set with x as its member</span>\r\n        self.<span class=\"hljs-built_in\">map</span>[data] = DisjointSetTreeNode(data)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_set</span>(<span class=\"hljs-params\">self, data: T</span>) -&gt; DisjointSetTreeNode[T]:\r\n        <span class=\"hljs-comment\"># find the set x belongs to (with path-compression)</span>\r\n        elem_ref = self.<span class=\"hljs-built_in\">map</span>[data]\r\n        <span class=\"hljs-keyword\">if</span> elem_ref != elem_ref.parent:\r\n            elem_ref.parent = self.find_set(elem_ref.parent.data)\r\n        <span class=\"hljs-keyword\">return</span> elem_ref.parent\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">link</span>(<span class=\"hljs-params\">\r\n        self, node1: DisjointSetTreeNode[T], node2: DisjointSetTreeNode[T]\r\n    </span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># helper function for union operation</span>\r\n        <span class=\"hljs-keyword\">if</span> node1.rank &gt; node2.rank:\r\n            node2.parent = node1\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            node1.parent = node2\r\n            <span class=\"hljs-keyword\">if</span> node1.rank == node2.rank:\r\n                node2.rank += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">union</span>(<span class=\"hljs-params\">self, data1: T, data2: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># merge 2 disjoint sets</span>\r\n        self.link(self.find_set(data1), self.find_set(data2))\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraphUndirectedWeighted</span>(<span class=\"hljs-type\">Generic</span>[T]):\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># connections: map from the node to the neighbouring nodes (with weights)</span>\r\n        self.connections: <span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-built_in\">int</span>]] = {}\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_node</span>(<span class=\"hljs-params\">self, node: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># add a node ONLY if its not present in the graph</span>\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.connections:\r\n            self.connections[node] = {}\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_edge</span>(<span class=\"hljs-params\">self, node1: T, node2: T, weight: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-comment\"># add an edge with the given weight</span>\r\n        self.add_node(node1)\r\n        self.add_node(node2)\r\n        self.connections[node1][node2] = weight\r\n        self.connections[node2][node1] = weight\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">kruskal</span>(<span class=\"hljs-params\">self</span>) -&gt; GraphUndirectedWeighted[T]:\r\n        <span class=\"hljs-comment\"># Kruskal&#x27;s Algorithm to generate a Minimum Spanning Tree (MST) of a graph</span>\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Details: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\r\n\r\n        Example:\r\n        &gt;&gt;&gt; g1 = GraphUndirectedWeighted[int]()\r\n        &gt;&gt;&gt; g1.add_edge(1, 2, 1)\r\n        &gt;&gt;&gt; g1.add_edge(2, 3, 2)\r\n        &gt;&gt;&gt; g1.add_edge(3, 4, 1)\r\n        &gt;&gt;&gt; g1.add_edge(3, 5, 100) # Removed in MST\r\n        &gt;&gt;&gt; g1.add_edge(4, 5, 5)\r\n        &gt;&gt;&gt; assert 5 in g1.connections[3]\r\n        &gt;&gt;&gt; mst = g1.kruskal()\r\n        &gt;&gt;&gt; assert 5 not in mst.connections[3]\r\n\r\n        &gt;&gt;&gt; g2 = GraphUndirectedWeighted[str]()\r\n        &gt;&gt;&gt; g2.add_edge(&#x27;A&#x27;, &#x27;B&#x27;, 1)\r\n        &gt;&gt;&gt; g2.add_edge(&#x27;B&#x27;, &#x27;C&#x27;, 2)\r\n        &gt;&gt;&gt; g2.add_edge(&#x27;C&#x27;, &#x27;D&#x27;, 1)\r\n        &gt;&gt;&gt; g2.add_edge(&#x27;C&#x27;, &#x27;E&#x27;, 100) # Removed in MST\r\n        &gt;&gt;&gt; g2.add_edge(&#x27;D&#x27;, &#x27;E&#x27;, 5)\r\n        &gt;&gt;&gt; assert &#x27;E&#x27; in g2.connections[&quot;C&quot;]\r\n        &gt;&gt;&gt; mst = g2.kruskal()\r\n        &gt;&gt;&gt; assert &#x27;E&#x27; not in mst.connections[&#x27;C&#x27;]\r\n        &quot;&quot;&quot;</span>\r\n\r\n        <span class=\"hljs-comment\"># getting the edges in ascending order of weights</span>\r\n        edges = []\r\n        seen = <span class=\"hljs-built_in\">set</span>()\r\n        <span class=\"hljs-keyword\">for</span> start <span class=\"hljs-keyword\">in</span> self.connections:\r\n            <span class=\"hljs-keyword\">for</span> end <span class=\"hljs-keyword\">in</span> self.connections[start]:\r\n                <span class=\"hljs-keyword\">if</span> (start, end) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> seen:\r\n                    seen.add((end, start))\r\n                    edges.append((start, end, self.connections[start][end]))\r\n        edges.sort(key=<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-number\">2</span>])\r\n\r\n        <span class=\"hljs-comment\"># creating the disjoint set</span>\r\n        disjoint_set = DisjointSetTree[T]()\r\n        <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.connections:\r\n            disjoint_set.make_set(node)\r\n\r\n        <span class=\"hljs-comment\"># MST generation</span>\r\n        num_edges = <span class=\"hljs-number\">0</span>\r\n        index = <span class=\"hljs-number\">0</span>\r\n        graph = GraphUndirectedWeighted[T]()\r\n        <span class=\"hljs-keyword\">while</span> num_edges &lt; <span class=\"hljs-built_in\">len</span>(self.connections) - <span class=\"hljs-number\">1</span>:\r\n            u, v, w = edges[index]\r\n            index += <span class=\"hljs-number\">1</span>\r\n            parent_u = disjoint_set.find_set(u)\r\n            parent_v = disjoint_set.find_set(v)\r\n            <span class=\"hljs-keyword\">if</span> parent_u != parent_v:\r\n                num_edges += <span class=\"hljs-number\">1</span>\r\n                graph.add_edge(u, v, w)\r\n                disjoint_set.union(u, v)\r\n        <span class=\"hljs-keyword\">return</span> graph\r\n"
    }
  },
  "contributors": [
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}