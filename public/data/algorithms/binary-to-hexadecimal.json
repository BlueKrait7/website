{
  "slug": "binary-to-hexadecimal",
  "name": "Binary to Hexadecimal",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "conversions\\binary_to_hexadecimal.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/conversions\\binary_to_hexadecimal.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bin_to_hexadecimal</span>(<span class=\"hljs-params\">binary_str: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Converting a binary string into hexadecimal using Grouping Method\r\n\r\n    &gt;&gt;&gt; bin_to_hexadecimal(&#x27;101011111&#x27;)\r\n    &#x27;0x15f&#x27;\r\n    &gt;&gt;&gt; bin_to_hexadecimal(&#x27; 1010   &#x27;)\r\n    &#x27;0x0a&#x27;\r\n    &gt;&gt;&gt; bin_to_hexadecimal(&#x27;-11101&#x27;)\r\n    &#x27;-0x1d&#x27;\r\n    &gt;&gt;&gt; bin_to_hexadecimal(&#x27;a&#x27;)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Non-binary value was passed to the function\r\n    &gt;&gt;&gt; bin_to_hexadecimal(&#x27;&#x27;)\r\n    Traceback (most recent call last):\r\n    ...\r\n    ValueError: Empty string was passed to the function\r\n    &quot;&quot;&quot;</span>\r\n    BITS_TO_HEX = {\r\n        <span class=\"hljs-string\">&quot;0000&quot;</span>: <span class=\"hljs-string\">&quot;0&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;0001&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;0010&quot;</span>: <span class=\"hljs-string\">&quot;2&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;0011&quot;</span>: <span class=\"hljs-string\">&quot;3&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;0100&quot;</span>: <span class=\"hljs-string\">&quot;4&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;0101&quot;</span>: <span class=\"hljs-string\">&quot;5&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;0110&quot;</span>: <span class=\"hljs-string\">&quot;6&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;0111&quot;</span>: <span class=\"hljs-string\">&quot;7&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;1000&quot;</span>: <span class=\"hljs-string\">&quot;8&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;1001&quot;</span>: <span class=\"hljs-string\">&quot;9&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;1010&quot;</span>: <span class=\"hljs-string\">&quot;a&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;1011&quot;</span>: <span class=\"hljs-string\">&quot;b&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;1100&quot;</span>: <span class=\"hljs-string\">&quot;c&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;1101&quot;</span>: <span class=\"hljs-string\">&quot;d&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;1110&quot;</span>: <span class=\"hljs-string\">&quot;e&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;1111&quot;</span>: <span class=\"hljs-string\">&quot;f&quot;</span>,\r\n    }\r\n\r\n    <span class=\"hljs-comment\"># Sanitising parameter</span>\r\n    binary_str = <span class=\"hljs-built_in\">str</span>(binary_str).strip()\r\n\r\n    <span class=\"hljs-comment\"># Exceptions</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> binary_str:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Empty string was passed to the function&quot;</span>)\r\n    is_negative = binary_str[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;-&quot;</span>\r\n    binary_str = binary_str[<span class=\"hljs-number\">1</span>:] <span class=\"hljs-keyword\">if</span> is_negative <span class=\"hljs-keyword\">else</span> binary_str\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>(char <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&quot;01&quot;</span> <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> binary_str):\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Non-binary value was passed to the function&quot;</span>)\r\n\r\n    binary_str = (\r\n        <span class=\"hljs-string\">&quot;0&quot;</span> * (<span class=\"hljs-number\">4</span> * (<span class=\"hljs-built_in\">divmod</span>(<span class=\"hljs-built_in\">len</span>(binary_str), <span class=\"hljs-number\">4</span>)[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">1</span>) - <span class=\"hljs-built_in\">len</span>(binary_str)) + binary_str\r\n    )\r\n\r\n    hexadecimal = []\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(binary_str), <span class=\"hljs-number\">4</span>):\r\n        hexadecimal.append(BITS_TO_HEX[binary_str[x : x + <span class=\"hljs-number\">4</span>]])\r\n    hexadecimal_str = <span class=\"hljs-string\">&quot;0x&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(hexadecimal)\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + hexadecimal_str <span class=\"hljs-keyword\">if</span> is_negative <span class=\"hljs-keyword\">else</span> hexadecimal_str\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\conversions\\BinaryToHexadecimal.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\conversions\\BinaryToHexadecimal.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.conversions;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Converts any Binary Number to a Hexadecimal Number\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Nishita Aggarwal\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinaryToHexadecimal</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method converts a binary number to a hexadecimal number.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> binary The binary number\r\n     * <span class=\"hljs-doctag\">@return</span> The hexadecimal number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">binToHex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> binary)</span> {\r\n        <span class=\"hljs-comment\">// hm to store hexadecimal codes for binary numbers within the range: 0000 to 1111 i.e. for</span>\r\n        <span class=\"hljs-comment\">// decimal numbers 0 to 15</span>\r\n        HashMap&lt;Integer, String&gt; hm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\r\n        <span class=\"hljs-comment\">// String to store hexadecimal code</span>\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\r\n        <span class=\"hljs-type\">int</span> i;\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\r\n            hm.put(i, String.valueOf(i));\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">10</span>; i &lt; <span class=\"hljs-number\">16</span>; i++) {\r\n            hm.put(i, String.valueOf((<span class=\"hljs-type\">char</span>) (<span class=\"hljs-string\">&#x27;A&#x27;</span> + i - <span class=\"hljs-number\">10</span>)));\r\n        }\r\n        <span class=\"hljs-type\">int</span> currbit;\r\n        <span class=\"hljs-keyword\">while</span> (binary != <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">code4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// to store decimal equivalent of number formed by 4 decimal digits</span>\r\n            <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) {\r\n                currbit = binary % <span class=\"hljs-number\">10</span>;\r\n                binary = binary / <span class=\"hljs-number\">10</span>;\r\n                code4 += currbit * Math.pow(<span class=\"hljs-number\">2</span>, i);\r\n            }\r\n            hex = hm.get(code4) + hex;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> hex;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Main method\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> args Command line arguments\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter binary number:&quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">binary</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hex</span> <span class=\"hljs-operator\">=</span> binToHex(binary);\r\n        System.out.println(<span class=\"hljs-string\">&quot;Hexadecimal Code:&quot;</span> + hex);\r\n        sc.close();\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "conversions\\binary_to_hexadecimal.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\binary_to_hexadecimal.c",
      "code": "<span class=\"hljs-comment\">/*\r\n * C Program to Convert Binary to Hexadecimal\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> binary, hexa = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">1</span>, remainder;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the binary number: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%ld&quot;</span>, &amp;binary);\r\n    <span class=\"hljs-keyword\">while</span> (binary != <span class=\"hljs-number\">0</span>)\r\n    {\r\n        remainder = binary % <span class=\"hljs-number\">10</span>;\r\n        hexa = hexa + remainder * i;\r\n        i = i * <span class=\"hljs-number\">2</span>;\r\n        binary = binary / <span class=\"hljs-number\">10</span>;\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The equivalent hexadecimal value: %lX&quot;</span>, hexa);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "conversions\\binary_to_hexadecimal.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions\\binary_to_hexadecimal.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\r\n\r\n<span class=\"hljs-comment\">//Binary number to hexadecimal number conversion</span>\r\n<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">String</span>&gt; hex_table = {\r\n  <span class=\"hljs-string\">&quot;0000&quot;</span>: <span class=\"hljs-string\">&#x27;0&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;0001&quot;</span>: <span class=\"hljs-string\">&#x27;1&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;0010&quot;</span>: <span class=\"hljs-string\">&#x27;2&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;0011&quot;</span>: <span class=\"hljs-string\">&#x27;3&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;0100&quot;</span>: <span class=\"hljs-string\">&#x27;4&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;0101&quot;</span>: <span class=\"hljs-string\">&#x27;5&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;0110&quot;</span>: <span class=\"hljs-string\">&#x27;6&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;0111&quot;</span>: <span class=\"hljs-string\">&#x27;7&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;1000&quot;</span>: <span class=\"hljs-string\">&#x27;8&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;1001&quot;</span>: <span class=\"hljs-string\">&#x27;9&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;1010&quot;</span>: <span class=\"hljs-string\">&#x27;A&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;1011&quot;</span>: <span class=\"hljs-string\">&#x27;B&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;1100&quot;</span>: <span class=\"hljs-string\">&#x27;C&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;1101&quot;</span>: <span class=\"hljs-string\">&#x27;D&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;1110&quot;</span>: <span class=\"hljs-string\">&#x27;E&#x27;</span>,\r\n  <span class=\"hljs-string\">&quot;1111&quot;</span>: <span class=\"hljs-string\">&#x27;F&#x27;</span>,\r\n};\r\n\r\n<span class=\"hljs-comment\">// function to take a binary string and to return hex value</span>\r\n<span class=\"hljs-built_in\">String</span> binary_to_hexadecimal(<span class=\"hljs-built_in\">String</span> bin_string) {\r\n  <span class=\"hljs-comment\">// checking for unexpected values</span>\r\n  bin_string = bin_string.trim();\r\n  <span class=\"hljs-keyword\">if</span> (bin_string == <span class=\"hljs-keyword\">null</span> || bin_string == <span class=\"hljs-string\">&quot;&quot;</span>) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An empty value was passed to the function&quot;</span>);\r\n  }\r\n  <span class=\"hljs-keyword\">try</span> {\r\n    <span class=\"hljs-built_in\">int</span>.parse(bin_string);\r\n  } <span class=\"hljs-keyword\">catch</span> (e) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An invalid value was passed to the function&quot;</span>);\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// negative number check</span>\r\n  <span class=\"hljs-built_in\">bool</span> is_negative = bin_string[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;-&quot;</span>;\r\n  <span class=\"hljs-keyword\">if</span> (is_negative) bin_string = bin_string.substring(<span class=\"hljs-number\">1</span>);\r\n\r\n  <span class=\"hljs-comment\">// add min 0&#x27;s in the end to make right substring length divisible by 4</span>\r\n  <span class=\"hljs-keyword\">var</span> len_bin = bin_string.length;\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= (<span class=\"hljs-number\">4</span> - len_bin % <span class=\"hljs-number\">4</span>) % <span class=\"hljs-number\">4</span>; i++)\r\n    bin_string = <span class=\"hljs-string\">&#x27;0&#x27;</span> + bin_string;\r\n\r\n  <span class=\"hljs-comment\">// coverting the binary values to hex by diving into substring</span>\r\n  <span class=\"hljs-built_in\">String</span> hex_val = <span class=\"hljs-string\">&quot;&quot;</span>;\r\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n  <span class=\"hljs-keyword\">while</span> (i != bin_string.length) {\r\n    <span class=\"hljs-built_in\">String</span> bin_curr = bin_string.substring(i, i + <span class=\"hljs-number\">4</span>);\r\n    hex_val += hex_table[bin_curr];\r\n    i += <span class=\"hljs-number\">4</span>;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">// returning the value</span>\r\n  <span class=\"hljs-keyword\">if</span> (is_negative) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + hex_val;\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> hex_val;\r\n}\r\n\r\n<span class=\"hljs-comment\">// driver function</span>\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  test(<span class=\"hljs-string\">&quot;binary_to_hexadecimal -1111&quot;</span>, () {\r\n    expect(binary_to_hexadecimal(<span class=\"hljs-string\">&quot;-1111&quot;</span>), equals(<span class=\"hljs-string\">&quot;-F&quot;</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;binary_to_hexadecimal 101011&quot;</span>, () {\r\n    expect(binary_to_hexadecimal(<span class=\"hljs-string\">&quot;101011&quot;</span>), equals(<span class=\"hljs-string\">&quot;2B&quot;</span>));\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;binary_to_hexadecimal rasies error when number is invalid&quot;</span>, () {\r\n    expect(() =&gt; binary_to_hexadecimal(<span class=\"hljs-string\">&quot;-1011a01&quot;</span>), throwsFormatException);\r\n  });\r\n\r\n  test(<span class=\"hljs-string\">&quot;binary_to_hexadecimal of empty string raises error&quot;</span>, () {\r\n    expect(() =&gt; binary_to_hexadecimal(<span class=\"hljs-string\">&quot;&quot;</span>), throwsFormatException);\r\n  });\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vishnu",
      "email": "vishnupothan2@gmail.com",
      "commits": 1
    },
    {
      "name": "Nicola Masarone",
      "email": "nick67.android@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nishita Aggarwal",
      "email": "naggarwal97@gmail.com",
      "commits": 1
    },
    {
      "name": "Francisco Perez",
      "email": "92104963+franciscoperez2021@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}