{
  "slug": "get-products-of-all-other-elements",
  "name": "Get Products of All Other Elements",
  "categories": [
    "datastructures",
    "array"
  ],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "data_structures\\arrays\\get_products_of_all_other_elements.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures\\arrays\\get_products_of_all_other_elements.rb",
      "code": "<span class=\"hljs-comment\"># Arrays - Get Products of all other elements in Ruby</span>\r\n\r\n<span class=\"hljs-comment\"># Algorithm challenge description:</span>\r\n<span class=\"hljs-comment\"># Given an array of integers, return a new array such that</span>\r\n<span class=\"hljs-comment\"># each element at index `i` of the new array is the product of</span>\r\n<span class=\"hljs-comment\"># all the numbers in the original array except the one at `i`.</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># This file solves the algorithm in 3 approaches:</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># 1. Brute force</span>\r\n<span class=\"hljs-comment\"># 2. Left and Right product lists</span>\r\n<span class=\"hljs-comment\"># 3. O(1) space approach</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># 1. Brute force solution</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">calculate_products_of_all_other_elements</span><span class=\"hljs-params\">(nums)</span></span>\r\n  product_of_other_elements = Array.new(nums.count, <span class=\"hljs-number\">1</span>)\r\n\r\n  nums.count.times <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n    nums.count.times <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|j|</span>\r\n      <span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">if</span> i == j\r\n\r\n      product_of_other_elements[i] = product_of_other_elements[i] * nums[j]\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  product_of_other_elements\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs(calculate_products_of_all_other_elements([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach 2: Left and Right product lists</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-comment\"># Complexity analysis</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Time complexity: O(N) where N represents the number of elements in the input</span>\r\n<span class=\"hljs-comment\"># array. We use one iteration to construct the array prefix_products, one to construct</span>\r\n<span class=\"hljs-comment\"># the array suffix_products and one last to construct the answeranswer array using L and R.</span>\r\n<span class=\"hljs-comment\"># Space complexity: O(N) used up by the two intermediate arrays that</span>\r\n<span class=\"hljs-comment\"># we constructed to keep track of product of elements to the left and right.</span>\r\n\r\n<span class=\"hljs-comment\"># Generates prefix products</span>\r\n<span class=\"hljs-comment\"># prefix_products[i] contains the product of all the elements to the left</span>\r\n<span class=\"hljs-comment\"># Note: for the element at index &#x27;0&#x27;, there are no elements to the left,</span>\r\n<span class=\"hljs-comment\"># so the prefix_products[0] would be 1</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">build_prefix_products</span><span class=\"hljs-params\">(nums)</span></span>\r\n  prefix_products = []\r\n\r\n  nums.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num|</span>\r\n    prefix_products &lt;&lt; <span class=\"hljs-keyword\">if</span> prefix_products.count &gt; <span class=\"hljs-number\">0</span>\r\n                         prefix_products.last * num\r\n                       <span class=\"hljs-keyword\">else</span>\r\n                         num\r\n                       <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  prefix_products\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\"># Generates suffix products</span>\r\n<span class=\"hljs-comment\"># suffix_products[i] contains the product of all the elements to the right</span>\r\n<span class=\"hljs-comment\"># Note: for the element at index &#x27;length - 1&#x27;, there are no elements to the right,</span>\r\n<span class=\"hljs-comment\"># so the suffix_products[length - 1] would be 1</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">build_suffix_products</span><span class=\"hljs-params\">(nums)</span></span>\r\n  suffix_products = []\r\n\r\n  nums.reverse.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num|</span>\r\n    suffix_products &lt;&lt; <span class=\"hljs-keyword\">if</span> suffix_products.count &gt; <span class=\"hljs-number\">0</span>\r\n                         suffix_products.last * num\r\n                       <span class=\"hljs-keyword\">else</span>\r\n                         num\r\n                       <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  suffix_products\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\"># Builds output</span>\r\n<span class=\"hljs-comment\"># For the first element, suffix_products[i] would be product except self</span>\r\n<span class=\"hljs-comment\"># For the last element of the array, product except self would be prefix_products[i]</span>\r\n<span class=\"hljs-comment\"># Else, multiple product of all elements to the left and to the right</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">output</span><span class=\"hljs-params\">(prefix_products, suffix_products, nums)</span></span>\r\n  result = []\r\n\r\n  nums.count.times <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|index|</span>\r\n    result &lt;&lt; <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-number\">0</span>\r\n                suffix_products[index + <span class=\"hljs-number\">1</span>]\r\n              <span class=\"hljs-keyword\">elsif</span> index == nums.count - <span class=\"hljs-number\">1</span>\r\n                prefix_products[index - <span class=\"hljs-number\">1</span>]\r\n              <span class=\"hljs-keyword\">else</span>\r\n                (prefix_products[index - <span class=\"hljs-number\">1</span>] * suffix_products[index + <span class=\"hljs-number\">1</span>])\r\n              <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  result\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\"># Generate result from the product of prefixes and suffixes</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">products</span><span class=\"hljs-params\">(nums)</span></span>\r\n  prefix_products = build_prefix_products(nums)\r\n  suffix_products = build_suffix_products(nums)\r\n  suffix_products = suffix_products.reverse\r\n\r\n  output(prefix_products, suffix_products, nums)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs(products([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))\r\n<span class=\"hljs-comment\"># =&gt; [6, 3, 2]</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach 3: O(1) space approach</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-comment\"># This approach is essentially an extension of the approach 2.</span>\r\n<span class=\"hljs-comment\"># Basically, we will be using the output array as one of L or R and we will</span>\r\n<span class=\"hljs-comment\"># be constructing the other one on the fly.</span>\r\n\r\n<span class=\"hljs-comment\"># Complexity analysis</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Time complexity: O(N) where N represents the number of elements in the input</span>\r\n<span class=\"hljs-comment\"># array. We use one iteration to construct the array L, one to update the array</span>\r\n<span class=\"hljs-comment\"># answer.</span>\r\n\r\n<span class=\"hljs-comment\"># Space complexity: O(1) since don&#x27;t use any additional array for our</span>\r\n<span class=\"hljs-comment\"># computations. The problem statement mentions that using the answer</span>\r\n<span class=\"hljs-comment\"># array doesn&#x27;t add to the space complexity.</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">products</span><span class=\"hljs-params\">(nums)</span></span>\r\n  <span class=\"hljs-keyword\">return</span> [] <span class=\"hljs-keyword\">if</span> nums.count &lt; <span class=\"hljs-number\">2</span>\r\n\r\n  res = [<span class=\"hljs-number\">1</span>]\r\n\r\n  <span class=\"hljs-comment\"># res[i] contains the product of all the elements to the left</span>\r\n  <span class=\"hljs-comment\"># Note: for the element at index &#x27;0&#x27;, there are no elements to the left,</span>\r\n  <span class=\"hljs-comment\"># so the res[0] would be 1</span>\r\n  (<span class=\"hljs-number\">0</span>..(nums.count - <span class=\"hljs-number\">2</span>)).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n    num = nums[i]\r\n    res &lt;&lt; num * res[i]\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-comment\"># product contains the product of all the elements to the right</span>\r\n  <span class=\"hljs-comment\"># Note: for the element at index &#x27;length - 1&#x27;, there are no elements to the right,</span>\r\n  <span class=\"hljs-comment\"># so the product would be 1</span>\r\n  product = <span class=\"hljs-number\">1</span>\r\n\r\n  (nums.count - <span class=\"hljs-number\">1</span>).downto(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n    num = nums[i]\r\n    <span class=\"hljs-comment\"># For the index &#x27;i&#x27;, product would contain the</span>\r\n    <span class=\"hljs-comment\"># product of all elements to the right. We update product accordingly.</span>\r\n    res[i - <span class=\"hljs-number\">1</span>] *= (product * num)\r\n    product *= num\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  res\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs(products([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))\r\n<span class=\"hljs-comment\"># =&gt; [6, 3, 2]</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 12
    }
  ],
  "explanationUrl": {}
}