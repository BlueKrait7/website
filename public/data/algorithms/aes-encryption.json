{
  "slug": "aes-encryption",
  "name": "AES Encryption",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\ciphers\\AESEncryption.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\ciphers\\AESEncryption.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.ciphers;\r\n\r\n<span class=\"hljs-keyword\">import</span> javax.crypto.*;\r\n<span class=\"hljs-keyword\">import</span> java.security.InvalidKeyException;\r\n<span class=\"hljs-keyword\">import</span> java.security.NoSuchAlgorithmException;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This example program shows how AES encryption and decryption can be done in\r\n * Java. Please note that secret key and encrypted text is unreadable binary and\r\n * hence in the following program we display it in hexadecimal format of the\r\n * underlying bytes.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AESEncryption</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] HEX_ARRAY = <span class=\"hljs-string\">&quot;0123456789ABCDEF&quot;</span>.toCharArray();\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * 1. Generate a plain text for encryption 2. Get a secret key (printed in\r\n     * hexadecimal form). In actual use this must by encrypted and kept safe.\r\n     * The same key is required for decryption.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">plainText</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Hello World&quot;</span>;\r\n        <span class=\"hljs-type\">SecretKey</span> <span class=\"hljs-variable\">secKey</span> <span class=\"hljs-operator\">=</span> getSecretEncryptionKey();\r\n        <span class=\"hljs-type\">byte</span>[] cipherText = encryptText(plainText, secKey);\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">decryptedText</span> <span class=\"hljs-operator\">=</span> decryptText(cipherText, secKey);\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;Original Text:&quot;</span> + plainText);\r\n        System.out.println(<span class=\"hljs-string\">&quot;AES Key (Hex Form):&quot;</span> + bytesToHex(secKey.getEncoded()));\r\n        System.out.println(<span class=\"hljs-string\">&quot;Encrypted Text (Hex Form):&quot;</span> + bytesToHex(cipherText));\r\n        System.out.println(<span class=\"hljs-string\">&quot;Descrypted Text:&quot;</span> + decryptedText);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * gets the AES encryption key. In your actual programs, this should be\r\n     * safely stored.\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> secKey (Secret key that we encrypt using it)\r\n     * <span class=\"hljs-doctag\">@throws</span> NoSuchAlgorithmException (from KeyGenrator)\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> SecretKey <span class=\"hljs-title function_\">getSecretEncryptionKey</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NoSuchAlgorithmException {\r\n        <span class=\"hljs-type\">KeyGenerator</span> <span class=\"hljs-variable\">aesKeyGenerator</span> <span class=\"hljs-operator\">=</span> KeyGenerator.getInstance(<span class=\"hljs-string\">&quot;AES&quot;</span>);\r\n        aesKeyGenerator.init(<span class=\"hljs-number\">128</span>); <span class=\"hljs-comment\">// The AES key size in number of bits</span>\r\n        <span class=\"hljs-keyword\">return</span> aesKeyGenerator.generateKey();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Encrypts plainText in AES using the secret key\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> byteCipherText (The encrypted text)\r\n     * <span class=\"hljs-doctag\">@throws</span> NoSuchPaddingException (from Cipher)\r\n     * <span class=\"hljs-doctag\">@throws</span> NoSuchAlgorithmException (from Cipher)\r\n     * <span class=\"hljs-doctag\">@throws</span> InvalidKeyException (from Cipher)\r\n     * <span class=\"hljs-doctag\">@throws</span> BadPaddingException (from Cipher)\r\n     * <span class=\"hljs-doctag\">@throws</span> IllegalBlockSizeException (from Cipher)\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">byte</span>[] encryptText(String plainText, SecretKey secKey)\r\n            <span class=\"hljs-keyword\">throws</span> NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\r\n            IllegalBlockSizeException, BadPaddingException {\r\n        <span class=\"hljs-comment\">// AES defaults to AES/ECB/PKCS5Padding in Java 7</span>\r\n        <span class=\"hljs-type\">Cipher</span> <span class=\"hljs-variable\">aesCipher</span> <span class=\"hljs-operator\">=</span> Cipher.getInstance(<span class=\"hljs-string\">&quot;AES&quot;</span>);\r\n        aesCipher.init(Cipher.ENCRYPT_MODE, secKey);\r\n        <span class=\"hljs-keyword\">return</span> aesCipher.doFinal(plainText.getBytes());\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Decrypts encrypted byte array using the key used for encryption.\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> plainText\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">decryptText</span><span class=\"hljs-params\">(<span class=\"hljs-type\">byte</span>[] byteCipherText, SecretKey secKey)</span>\r\n            <span class=\"hljs-keyword\">throws</span> NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\r\n            IllegalBlockSizeException, BadPaddingException {\r\n        <span class=\"hljs-comment\">// AES defaults to AES/ECB/PKCS5Padding in Java 7</span>\r\n        <span class=\"hljs-type\">Cipher</span> <span class=\"hljs-variable\">aesCipher</span> <span class=\"hljs-operator\">=</span> Cipher.getInstance(<span class=\"hljs-string\">&quot;AES&quot;</span>);\r\n        aesCipher.init(Cipher.DECRYPT_MODE, secKey);\r\n        <span class=\"hljs-type\">byte</span>[] bytePlainText = aesCipher.doFinal(byteCipherText);\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(bytePlainText);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Convert a binary byte array into readable hex form Old library is\r\n     * deprecated on OpenJdk 11 and this is faster regarding other solution is\r\n     * using StringBuilder\r\n     *\r\n     * <span class=\"hljs-doctag\">@return</span> hexHash\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">bytesToHex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">byte</span>[] bytes)</span> {\r\n        <span class=\"hljs-type\">char</span>[] hexChars = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">char</span>[bytes.length * <span class=\"hljs-number\">2</span>];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; bytes.length; j++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">=</span> bytes[j] &amp; <span class=\"hljs-number\">0xFF</span>;\r\n            hexChars[j * <span class=\"hljs-number\">2</span>] = HEX_ARRAY[v &gt;&gt;&gt; <span class=\"hljs-number\">4</span>];\r\n            hexChars[j * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>] = HEX_ARRAY[v &amp; <span class=\"hljs-number\">0x0F</span>];\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(hexChars);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Hakan Arslan",
      "email": "hakan0arslan@gmail.com",
      "commits": 1
    },
    {
      "name": "Mahmoud khalil",
      "email": "khalil2535@yahoo.com",
      "commits": 1
    },
    {
      "name": "Piyush Yadav",
      "email": "piyush13y@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}