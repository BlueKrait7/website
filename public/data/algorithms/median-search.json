{
  "slug": "median-search",
  "name": "Median Search",
  "categories": [
    "searches"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "search\\median_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search\\median_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file median_search.cpp\r\n * @brief Implementation of [Median search](https://en.wikipedia.org/wiki/Median_of_medians) algorithm.\r\n * @cases from [here](https://brilliant.org/wiki/median-finding-algorithm/)\r\n *\r\n * @details\r\n * Given an array A[1,...,n] of n numbers and an index i, where 1 ≤ i ≤ n, find the i-th smallest element of A.\r\n * median_of_medians(A, i):\r\n *  #divide A into sublists of len 5\r\n *  sublists = [A[j:j+5] for j in range(0, len(A), 5)]\r\n *  medians = [sorted(sublist)[len(sublist)/2] for sublist in sublists]\r\n *  if len(medians) &lt;= 5:\r\n *\tpivot = sorted(medians)[len(medians)/2]\r\n *  else:\r\n *      #the pivot is the median of the medians\r\n *      pivot = median_of_medians(medians, len(medians)/2)\r\n *  #partitioning step\r\n *  low = [j for j in A if j &lt; pivot]\r\n *  high = [j for j in A if j &gt; pivot]\r\n *  k = len(low)\r\n *   if i &lt; k:\r\n *      return median_of_medians(low,i)\r\n *   elif i &gt; k:\r\n *      return median_of_medians(high,i-k-1)\r\n *  else: #pivot = k\r\n *       return pivot\r\n *\r\n * \\note this algorithm implements median search for only arrays which have distinct elements\r\n *\r\n * Here are some example lists you can use to see how the algorithm works\r\n * A = [1,2,3,4,5,1000,8,9,99] (Contain Unique Elements)\r\n * B = [1,2,3,4,5,6] (Contains Unique Elements)\r\n * print median_of_medians(A, 0) #should be 1\r\n * print median_of_medians(A,7) #should be 99\r\n * print median_of_medians(B,4) #should be 5\r\n *\r\n * @author Unknown author\r\n * @author [Sushil Kumar](https://github.com/Rp-sushil)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace search\r\n * @brief Search algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> search {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace median_search\r\n * @brief Functions for [Median search](https://en.wikipedia.org/wiki/Median_search) algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> median_search {\r\n<span class=\"hljs-comment\">/**\r\n* This function search the element in an array for the given index.\r\n* @param A array where numbers are saved\r\n* @param idx current index in array\r\n* @returns corresponding element which we want to search.\r\n*/</span>  \r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">median_of_medians</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; A,  <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span>&amp; idx)</span> </span>{\r\n\t<span class=\"hljs-type\">int</span> pivot = <span class=\"hljs-number\">0</span>;\t\t\t\t\t<span class=\"hljs-comment\">// initialized with zero</span>\r\n\t<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(A.begin(), A.end())</span></span>;\r\n\tstd::vector&lt;<span class=\"hljs-type\">int</span>&gt; m;\r\n\t<span class=\"hljs-type\">int</span> r = a.<span class=\"hljs-built_in\">size</span>();\r\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; r; i += <span class=\"hljs-number\">5</span>){\r\n\t\tstd::<span class=\"hljs-built_in\">sort</span>(a.<span class=\"hljs-built_in\">begin</span>() + i, a.<span class=\"hljs-built_in\">begin</span>() + std::<span class=\"hljs-built_in\">min</span>(r, i + <span class=\"hljs-number\">5</span>));\r\n\t\t<span class=\"hljs-type\">int</span> mid = (i + std::<span class=\"hljs-built_in\">min</span>(r, i + <span class=\"hljs-number\">5</span>)) / <span class=\"hljs-number\">2</span>;\r\n\t\tm.<span class=\"hljs-built_in\">push_back</span>(a[mid]);\r\n\t}\r\n\t<span class=\"hljs-type\">int</span> sz = <span class=\"hljs-built_in\">int</span>(m.<span class=\"hljs-built_in\">size</span>());\r\n\t<span class=\"hljs-keyword\">if</span>(sz &lt;= <span class=\"hljs-number\">5</span>){\r\n\t\tstd::<span class=\"hljs-built_in\">sort</span>(m.<span class=\"hljs-built_in\">begin</span>(), m.<span class=\"hljs-built_in\">end</span>());\r\n\t\tpivot = m[(sz- <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>];\r\n\t}\r\n\t<span class=\"hljs-keyword\">else</span>{\r\n\t\tpivot = <span class=\"hljs-built_in\">median_of_medians</span>(m, idx);\r\n\t}\r\n\tstd::vector&lt;<span class=\"hljs-type\">int</span>&gt; low;\r\n\tstd::vector&lt;<span class=\"hljs-type\">int</span>&gt; high;\r\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; r; i++){\r\n\t\t<span class=\"hljs-keyword\">if</span>(a[i] &lt; pivot){\r\n\t\t\tlow.<span class=\"hljs-built_in\">push_back</span>(a[i]);\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(a[i] &gt; pivot){\r\n\t\t\thigh.<span class=\"hljs-built_in\">push_back</span>(a[i]);\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-type\">int</span> k = <span class=\"hljs-built_in\">int</span>(low.<span class=\"hljs-built_in\">size</span>());\r\n\t<span class=\"hljs-keyword\">if</span>(idx &lt; k){\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">median_of_medians</span>(low, idx);\r\n\t}\r\n\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(idx &gt; k){\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">median_of_medians</span>(high, idx-k<span class=\"hljs-number\">-1</span>);\r\n\t}\r\n\t<span class=\"hljs-keyword\">else</span>{\r\n\t\t<span class=\"hljs-keyword\">return</span> pivot;\r\n\t}\r\n}\r\n}  <span class=\"hljs-comment\">// namespace median_search</span>\r\n}  <span class=\"hljs-comment\">// namespace search</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to test above algorithm\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span>{\r\n\tstd::vector&lt;<span class=\"hljs-type\">int</span>&gt; A{<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">21</span>,<span class=\"hljs-number\">98</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">76</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">43</span>,<span class=\"hljs-number\">60</span>,<span class=\"hljs-number\">89</span>,<span class=\"hljs-number\">87</span>};\r\n\t<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">3</span>;\r\n\t<span class=\"hljs-built_in\">assert</span>(A[<span class=\"hljs-number\">6</span>] == search::median_search::<span class=\"hljs-built_in\">median_of_medians</span>(A, i));\t\t<span class=\"hljs-comment\">// A[6]  = 43, is the fourth smallest element.</span>\r\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;test case:1 passed\\n&quot;</span>;\r\n\t\r\n\tstd::vector&lt;<span class=\"hljs-type\">int</span>&gt; B{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>};\r\n\t<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">4</span>;\r\n\t<span class=\"hljs-built_in\">assert</span>(B[<span class=\"hljs-number\">4</span>] == search::median_search::<span class=\"hljs-built_in\">median_of_medians</span>(B, j));\t\t<span class=\"hljs-comment\">// B[4] = 5, is the fifth smallest element.</span>\r\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;test case:2 passed\\n&quot;</span>;\r\n\t\r\n\tstd::vector&lt;<span class=\"hljs-type\">int</span>&gt; C{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">1000</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">99</span>};\r\n\t<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">3</span>;\r\n\t<span class=\"hljs-built_in\">assert</span>(C[<span class=\"hljs-number\">3</span>] == search::median_search::<span class=\"hljs-built_in\">median_of_medians</span>(C, k)); \t<span class=\"hljs-comment\">// C[3] = 4, is the fourth smallest element.</span>\r\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;test case:3 passed\\n&quot;</span>;\r\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;--All tests passed--\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\r\n</span>{\r\n\t<span class=\"hljs-built_in\">test</span>();\r\n\t<span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\r\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter Size of Array: &quot;</span>;\r\n\tstd::cin &gt;&gt; n;\r\n\t<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(n)</span></span>;\r\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter Array: &quot;</span>;\r\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++){\r\n\t\tstd::cin &gt;&gt; a[i];\r\n\t}\r\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;Median: &quot;</span>;\t\t\t<span class=\"hljs-comment\">// Median defination: https://en.wikipedia.org/wiki/Median</span>\r\n\t<span class=\"hljs-type\">int</span> x = search::median_search::<span class=\"hljs-built_in\">median_of_medians</span>(a,  (n - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>);\r\n\t<span class=\"hljs-keyword\">if</span>(n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>){\r\n\t\t<span class=\"hljs-type\">int</span> y = search::median_search::<span class=\"hljs-built_in\">median_of_medians</span>(a, n / <span class=\"hljs-number\">2</span>);\r\n\t\tstd::cout &lt;&lt; (<span class=\"hljs-built_in\">float</span>(x) + <span class=\"hljs-built_in\">float</span>(y))/<span class=\"hljs-number\">2.0</span>;\r\n\t}\r\n\t<span class=\"hljs-keyword\">else</span>{\r\n\t\tstd::cout &lt;&lt; x;\r\n\t}\r\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTo find i-th smallest element &quot;</span>;\r\n       \tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter i: &quot;</span>;\r\n\t<span class=\"hljs-type\">int</span> idx = <span class=\"hljs-number\">0</span>;\r\n\tstd::cin &gt;&gt; idx;\r\n\tidx--;\r\n\tstd::cout &lt;&lt; idx + <span class=\"hljs-number\">1</span>&lt;&lt; <span class=\"hljs-string\">&quot;-th smallest element: &quot;</span> &lt;&lt; search::median_search::<span class=\"hljs-built_in\">median_of_medians</span>(a, idx) &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ayush Nagar",
      "email": "32647423+ayushnagar123@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sushil Kumar",
      "email": "sushil.18je0861@am.iitism.ac.in",
      "commits": 10
    }
  ],
  "explanationUrl": {}
}