{
  "slug": "infix-to-postfix",
  "name": "Infix To Postfix",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\stacks\\InfixToPostfix.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\stacks\\InfixToPostfix.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.stacks;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InfixToPostfix</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception {\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-string\">&quot;32+&quot;</span>.equals(infix2PostFix(<span class=\"hljs-string\">&quot;3+2&quot;</span>));\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-string\">&quot;123++&quot;</span>.equals(infix2PostFix(<span class=\"hljs-string\">&quot;1+(2+3)&quot;</span>));\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-string\">&quot;34+5*6-&quot;</span>.equals(infix2PostFix(<span class=\"hljs-string\">&quot;(3+4)*5-6&quot;</span>));\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">infix2PostFix</span><span class=\"hljs-params\">(String infixExpression)</span> <span class=\"hljs-keyword\">throws</span> Exception {\r\n        <span class=\"hljs-keyword\">if</span> (!BalancedBrackets.isBalanced(infixExpression)) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Exception</span>(<span class=\"hljs-string\">&quot;invalid expression&quot;</span>);\r\n        }\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">output</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        Stack&lt;Character&gt; stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> element : infixExpression.toCharArray()) {\r\n            <span class=\"hljs-keyword\">if</span> (Character.isLetterOrDigit(element)) {\r\n                output.append(element);\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (element == <span class=\"hljs-string\">&#x27;(&#x27;</span>) {\r\n                stack.push(element);\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (element == <span class=\"hljs-string\">&#x27;)&#x27;</span>) {\r\n                <span class=\"hljs-keyword\">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() != <span class=\"hljs-string\">&#x27;(&#x27;</span>) {\r\n                    output.append(stack.pop());\r\n                }\r\n                stack.pop();\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">while</span> (!stack.isEmpty() &amp;&amp; precedence(element) &lt;= precedence(stack.peek())) {\r\n                    output.append(stack.pop());\r\n                }\r\n                stack.push(element);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">while</span> (!stack.isEmpty()) {\r\n            output.append(stack.pop());\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> output.toString();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">precedence</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> operator)</span> {\r\n        <span class=\"hljs-keyword\">switch</span> (operator) {\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;^&#x27;</span>:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\r\n            <span class=\"hljs-keyword\">default</span>:\r\n                <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n        }\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "conversions\\infix_to_postfix.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\infix_to_postfix.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Infix to\r\n * Postfix](https://condor.depaul.edu/ichu/csc415/notes/notes9/Infix.htm)\r\n * Expression Conversion\r\n * @details Convert Infixed expressions to Postfix expression.\r\n * @author [Harsh Karande](https://github.com/harshcut)\r\n */</span>\r\n\r\n<span class=\"hljs-comment\">// include header files</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>  <span class=\"hljs-comment\">/// for printf() and scanf()</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief a globally declared structure with an array and an variable that\r\n * points to the topmost index of the array\r\n */</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span>\r\n{</span>\r\n    <span class=\"hljs-type\">char</span> arr[<span class=\"hljs-number\">10</span>];  <span class=\"hljs-comment\">///&gt; static array of integers</span>\r\n    <span class=\"hljs-type\">int</span> tos;       <span class=\"hljs-comment\">///&gt; stores index on topmost element in stack</span>\r\n};\r\n\r\n<span class=\"hljs-comment\">// function headers</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *p, <span class=\"hljs-type\">char</span> ch)</span>;  <span class=\"hljs-comment\">// pust element in stack</span>\r\n<span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *p)</span>;            <span class=\"hljs-comment\">// pop topmost element from the stack</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isOprnd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> ch)</span>;                 <span class=\"hljs-comment\">// check if element is operand or not</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack s)</span>;          <span class=\"hljs-comment\">// check if stack is empty</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getPrecedence</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> op1, <span class=\"hljs-type\">char</span> op2)</span>;        <span class=\"hljs-comment\">// check operator precedence</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> infix[],\r\n             <span class=\"hljs-type\">char</span> postfix[])</span>;  <span class=\"hljs-comment\">// convert infix to postfix expression</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">char</span> infix[<span class=\"hljs-number\">20</span>], postfix[<span class=\"hljs-number\">20</span>];  <span class=\"hljs-comment\">// initialize empty infix and postfix array</span>\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter infix expression: &quot;</span>);  <span class=\"hljs-comment\">// example : A+B-C*D/E$F</span>\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>, infix);                  <span class=\"hljs-comment\">// get values for infix array</span>\r\n\r\n    convert(infix, postfix);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Postfix expression is %s&quot;</span>, postfix);  <span class=\"hljs-comment\">// output : AB+CD*EF$/-</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief push function\r\n * @param *p : used as a pointer variable of stack\r\n * @param x : char to be pushed in stack\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *p, <span class=\"hljs-type\">char</span> x)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (p-&gt;tos == <span class=\"hljs-number\">9</span>)  <span class=\"hljs-comment\">// check if stack has reached its max limit</span>\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Stack Overflow!&quot;</span>);\r\n        <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n\r\n    p-&gt;tos += <span class=\"hljs-number\">1</span>;         <span class=\"hljs-comment\">// increment tos</span>\r\n    p-&gt;arr[p-&gt;tos] = x;  <span class=\"hljs-comment\">// assign char x to index of stack pointed by tos</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief pop function\r\n * @param *p : used as a pointer variable of stack\r\n * @returns x or \\0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *p)</span>\r\n{\r\n    <span class=\"hljs-type\">char</span> x;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (p-&gt;tos == <span class=\"hljs-number\">-1</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Stack Underflow!&quot;</span>);\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\r\n    }\r\n\r\n    x = p-&gt;arr[p-&gt;tos];  <span class=\"hljs-comment\">// assign the value of stack at index tos to x</span>\r\n    p-&gt;tos -= <span class=\"hljs-number\">1</span>;         <span class=\"hljs-comment\">// decrement tos</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> x;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief isOprnd function\r\n * @param ch : this is the element from the infix array\r\n * @returns 1 or 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isOprnd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> ch)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> ((ch &gt;= <span class=\"hljs-number\">65</span> &amp;&amp; ch &lt;= <span class=\"hljs-number\">90</span>) ||\r\n        (ch &gt;= <span class=\"hljs-number\">97</span> &amp;&amp; ch &lt;= <span class=\"hljs-number\">122</span>) ||  <span class=\"hljs-comment\">// check if ch is an operator or</span>\r\n        (ch &gt;= <span class=\"hljs-number\">48</span> &amp;&amp; ch &lt;= <span class=\"hljs-number\">57</span>))     <span class=\"hljs-comment\">// operand using ASCII values</span>\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// return for true result</span>\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// return for false result</span>\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief isEmpty function\r\n * @param s : it is the object reference of stack\r\n * @returns 1 or 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack s)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (s.tos == <span class=\"hljs-number\">-1</span>)  <span class=\"hljs-comment\">// check if stack is empty</span>\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// return for true result</span>\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// return for false result</span>\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief convert function\r\n * @param infix[] : infix array provided by user\r\n * @param postfix[] : empty array to be given to convert()\r\n * @returns postfixed expresion or \\0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> infix[], <span class=\"hljs-type\">char</span> postfix[])</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span> <span class=\"hljs-title\">s</span>;</span>  <span class=\"hljs-comment\">// initialze object reference of stack</span>\r\n    s.tos = <span class=\"hljs-number\">-1</span>;      <span class=\"hljs-comment\">// initalize the tos</span>\r\n\r\n    <span class=\"hljs-type\">int</span> i, j = <span class=\"hljs-number\">0</span>, pr;\r\n    <span class=\"hljs-type\">char</span> ch, temp;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; infix[i] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>; i++)\r\n    {\r\n        ch = infix[i];\r\n\r\n        <span class=\"hljs-keyword\">if</span> (isOprnd(ch) == <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// check if char is operand or operator</span>\r\n        {\r\n            postfix[j] = ch;  <span class=\"hljs-comment\">// assign ch to postfix array with index j</span>\r\n            j++;              <span class=\"hljs-comment\">// incement j</span>\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (ch == <span class=\"hljs-string\">&#x27;(&#x27;</span>)\r\n            {\r\n                push(&amp;s, ch);\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (ch == <span class=\"hljs-string\">&#x27;)&#x27;</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">while</span> ((temp = pop(&amp;s)) != <span class=\"hljs-string\">&#x27;(&#x27;</span>)\r\n                    {\r\n                        postfix[j] = temp;\r\n                        j++;\r\n                    }\r\n                }\r\n                <span class=\"hljs-keyword\">else</span>\r\n                {\r\n                    <span class=\"hljs-keyword\">while</span> (isEmpty(s) == <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// check if stack is empty</span>\r\n                    {\r\n                        pr = getPrecedence (ch,\r\n                                   s.arr[s.tos]);  <span class=\"hljs-comment\">// check operator precedence</span>\r\n\r\n                        <span class=\"hljs-keyword\">if</span> (pr == <span class=\"hljs-number\">1</span>)\r\n                        {\r\n                            <span class=\"hljs-keyword\">break</span>;  <span class=\"hljs-comment\">// if ch has a greater precedence than</span>\r\n                                    <span class=\"hljs-comment\">// s.arr[s.top]</span>\r\n                        }\r\n\r\n                        postfix[j] = pop(&amp;s);\r\n                        j++;\r\n                    }\r\n\r\n                    push(&amp;s, ch);  <span class=\"hljs-comment\">// push ch to stack</span>\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">while</span> (isEmpty(s) == <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// check if stack is empty</span>\r\n    {\r\n        postfix[j] = pop(&amp;s);\r\n        j++;\r\n    }\r\n\r\n    postfix[j] = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief getPrecedence function returns the precedence after comparing two operators passed as parameter.\r\n * @param op1 : first operator\r\n * @param op2 : second operator\r\n * @returns 1 or 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getPrecedence</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> op1, <span class=\"hljs-type\">char</span> op2)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (op2 == <span class=\"hljs-string\">&#x27;$&#x27;</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (op1 == <span class=\"hljs-string\">&#x27;$&#x27;</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (op2 == <span class=\"hljs-string\">&#x27;*&#x27;</span> || op2 == <span class=\"hljs-string\">&#x27;/&#x27;</span> || op2 == <span class=\"hljs-string\">&#x27;%&#x27;</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (op1 == <span class=\"hljs-string\">&#x27;*&#x27;</span> || op1 == <span class=\"hljs-string\">&#x27;/&#x27;</span> || op1 == <span class=\"hljs-string\">&#x27;%&#x27;</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (op2 == <span class=\"hljs-string\">&#x27;+&#x27;</span> || op2 == <span class=\"hljs-string\">&#x27;-&#x27;</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "Harsh Karande",
      "email": "harshskarande@gmail.com",
      "commits": 3
    },
    {
      "name": "Harsh Karande",
      "email": "66206863+harshcut@users.noreply.github.com",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}