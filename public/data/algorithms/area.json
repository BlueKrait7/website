{
  "slug": "area",
  "name": "Area",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\area.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\area.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nFind the area of various geometric shapes\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> pi, sqrt\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_cube</span>(<span class=\"hljs-params\">side_length: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Cube.\r\n\r\n    &gt;&gt;&gt; surface_area_cube(1)\r\n    6\r\n    &gt;&gt;&gt; surface_area_cube(3)\r\n    54\r\n    &gt;&gt;&gt; surface_area_cube(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cube() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> side_length &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_cube() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span> * side_length**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_sphere</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Sphere.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Sphere\r\n    Formula: 4 * pi * r^2\r\n\r\n    &gt;&gt;&gt; surface_area_sphere(5)\r\n    314.1592653589793\r\n    &gt;&gt;&gt; surface_area_sphere(1)\r\n    12.566370614359172\r\n    &gt;&gt;&gt; surface_area_sphere(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_sphere() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_sphere() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * pi * radius**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_hemisphere</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Hemisphere.\r\n    Formula: 3 * pi * r^2\r\n\r\n    &gt;&gt;&gt; surface_area_hemisphere(5)\r\n    235.61944901923448\r\n    &gt;&gt;&gt; surface_area_hemisphere(1)\r\n    9.42477796076938\r\n    &gt;&gt;&gt; surface_area_hemisphere(0)\r\n    0.0\r\n    &gt;&gt;&gt; surface_area_hemisphere(1.1)\r\n    11.40398133253095\r\n    &gt;&gt;&gt; surface_area_hemisphere(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_hemisphere() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_hemisphere() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span> * pi * radius**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_cone</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Cone.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Cone\r\n    Formula: pi * r * (r + (h ** 2 + r ** 2) ** 0.5)\r\n\r\n    &gt;&gt;&gt; surface_area_cone(10, 24)\r\n    1130.9733552923256\r\n    &gt;&gt;&gt; surface_area_cone(6, 8)\r\n    301.59289474462014\r\n    &gt;&gt;&gt; surface_area_cone(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cone() only accepts non-negative values\r\n    &gt;&gt;&gt; surface_area_cone(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cone() only accepts non-negative values\r\n    &gt;&gt;&gt; surface_area_cone(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cone() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_cone() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> pi * radius * (radius + (height**<span class=\"hljs-number\">2</span> + radius**<span class=\"hljs-number\">2</span>) ** <span class=\"hljs-number\">0.5</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_cylinder</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Cylinder.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Cylinder\r\n    Formula: 2 * pi * r * (h + r)\r\n\r\n    &gt;&gt;&gt; surface_area_cylinder(7, 10)\r\n    747.6990515543707\r\n    &gt;&gt;&gt; surface_area_cylinder(6, 8)\r\n    527.7875658030853\r\n    &gt;&gt;&gt; surface_area_cylinder(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cylinder() only accepts non-negative values\r\n    &gt;&gt;&gt; surface_area_cylinder(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cylinder() only accepts non-negative values\r\n    &gt;&gt;&gt; surface_area_cylinder(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cylinder() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_cylinder() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * pi * radius * (height + radius)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_rectangle</span>(<span class=\"hljs-params\">length: <span class=\"hljs-built_in\">float</span>, width: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a rectangle.\r\n\r\n    &gt;&gt;&gt; area_rectangle(10, 20)\r\n    200\r\n    &gt;&gt;&gt; area_rectangle(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rectangle(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rectangle(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> length &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> width &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_rectangle() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> length * width\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_square</span>(<span class=\"hljs-params\">side_length: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a square.\r\n\r\n    &gt;&gt;&gt; area_square(10)\r\n    100\r\n    &gt;&gt;&gt; area_square(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_square() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> side_length &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_square() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> side_length**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_triangle</span>(<span class=\"hljs-params\">base: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a triangle given the base and height.\r\n\r\n    &gt;&gt;&gt; area_triangle(10, 10)\r\n    50.0\r\n    &gt;&gt;&gt; area_triangle(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_triangle() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> (base * height) / <span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_triangle_three_sides</span>(<span class=\"hljs-params\">side1: <span class=\"hljs-built_in\">float</span>, side2: <span class=\"hljs-built_in\">float</span>, side3: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate area of triangle when the length of 3 sides are known.\r\n\r\n    This function uses Heron&#x27;s formula: https://en.wikipedia.org/wiki/Heron%27s_formula\r\n\r\n    &gt;&gt;&gt; area_triangle_three_sides(5, 12, 13)\r\n    30.0\r\n    &gt;&gt;&gt; area_triangle_three_sides(10, 11, 12)\r\n    51.521233486786784\r\n    &gt;&gt;&gt; area_triangle_three_sides(-1, -2, -1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle_three_sides() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle_three_sides(1, -2, 1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle_three_sides() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle_three_sides(2, 4, 7)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Given three sides do not form a triangle\r\n    &gt;&gt;&gt; area_triangle_three_sides(2, 7, 4)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Given three sides do not form a triangle\r\n    &gt;&gt;&gt; area_triangle_three_sides(7, 2, 4)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Given three sides do not form a triangle\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> side1 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> side2 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> side3 &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_triangle_three_sides() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">elif</span> side1 + side2 &lt; side3 <span class=\"hljs-keyword\">or</span> side1 + side3 &lt; side2 <span class=\"hljs-keyword\">or</span> side2 + side3 &lt; side1:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Given three sides do not form a triangle&quot;</span>)\r\n    semi_perimeter = (side1 + side2 + side3) / <span class=\"hljs-number\">2</span>\r\n    area = sqrt(\r\n        semi_perimeter\r\n        * (semi_perimeter - side1)\r\n        * (semi_perimeter - side2)\r\n        * (semi_perimeter - side3)\r\n    )\r\n    <span class=\"hljs-keyword\">return</span> area\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_parallelogram</span>(<span class=\"hljs-params\">base: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a parallelogram.\r\n\r\n    &gt;&gt;&gt; area_parallelogram(10, 20)\r\n    200\r\n    &gt;&gt;&gt; area_parallelogram(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    &gt;&gt;&gt; area_parallelogram(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    &gt;&gt;&gt; area_parallelogram(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_parallelogram() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> base * height\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_trapezium</span>(<span class=\"hljs-params\">base1: <span class=\"hljs-built_in\">float</span>, base2: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a trapezium.\r\n\r\n    &gt;&gt;&gt; area_trapezium(10, 20, 30)\r\n    450.0\r\n    &gt;&gt;&gt; area_trapezium(-1, -2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(-1, 2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(-1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(1, -2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(-1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> base1 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> base2 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_trapezium() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * (base1 + base2) * height\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_circle</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a circle.\r\n\r\n    &gt;&gt;&gt; area_circle(20)\r\n    1256.6370614359173\r\n    &gt;&gt;&gt; area_circle(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_circle() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_circle() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> pi * radius**<span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_ellipse</span>(<span class=\"hljs-params\">radius_x: <span class=\"hljs-built_in\">float</span>, radius_y: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a ellipse.\r\n\r\n    &gt;&gt;&gt; area_ellipse(10, 10)\r\n    314.1592653589793\r\n    &gt;&gt;&gt; area_ellipse(10, 20)\r\n    628.3185307179587\r\n    &gt;&gt;&gt; area_ellipse(-10, 20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    &gt;&gt;&gt; area_ellipse(10, -20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    &gt;&gt;&gt; area_ellipse(-10, -20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius_x &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> radius_y &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_ellipse() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> pi * radius_x * radius_y\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_rhombus</span>(<span class=\"hljs-params\">diagonal_1: <span class=\"hljs-built_in\">float</span>, diagonal_2: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a rhombus.\r\n\r\n    &gt;&gt;&gt; area_rhombus(10, 20)\r\n    100.0\r\n    &gt;&gt;&gt; area_rhombus(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rhombus(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rhombus(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> diagonal_1 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> diagonal_2 &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_rhombus() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * diagonal_1 * diagonal_2\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod(verbose=<span class=\"hljs-literal\">True</span>)  <span class=\"hljs-comment\"># verbose so we can see methods missing tests</span>\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;[DEMO] Areas of various geometric shapes: \\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Rectangle: <span class=\"hljs-subst\">{area_rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Square: <span class=\"hljs-subst\">{area_square(<span class=\"hljs-number\">10</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Triangle: <span class=\"hljs-subst\">{area_triangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Triangle: <span class=\"hljs-subst\">{area_triangle_three_sides(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Parallelogram: <span class=\"hljs-subst\">{area_parallelogram(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Rhombus: <span class=\"hljs-subst\">{area_rhombus(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Trapezium: <span class=\"hljs-subst\">{area_trapezium(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Circle: <span class=\"hljs-subst\">{area_circle(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nSurface Areas of various geometric shapes: \\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Cube: <span class=\"hljs-subst\">{surface_area_cube(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Sphere: <span class=\"hljs-subst\">{surface_area_sphere(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Hemisphere: <span class=\"hljs-subst\">{surface_area_hemisphere(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Cone: <span class=\"hljs-subst\">{surface_area_cone(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Cylinder: <span class=\"hljs-subst\">{surface_area_cylinder(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n"
    },
    "javascript": {
      "dir": "Maths\\test\\Area.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\Area.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> area <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../Area&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing surfaceAreaCube calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with natural number&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> surfaceAreaOfOne = area.<span class=\"hljs-title function_\">surfaceAreaCube</span>(<span class=\"hljs-number\">1.2</span>)\r\n    <span class=\"hljs-keyword\">const</span> surfaceAreaOfThree = area.<span class=\"hljs-title function_\">surfaceAreaCube</span>(<span class=\"hljs-number\">3</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(surfaceAreaOfOne).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">8.64</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(surfaceAreaOfThree).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">54</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with negative argument, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">surfaceAreaCube</span>(-<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with non-numeric argument, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">surfaceAreaCube</span>(<span class=\"hljs-string\">&#x27;199&#x27;</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing surfaceAreaSphere calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with correct value&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> calculateArea = area.<span class=\"hljs-title function_\">surfaceAreaSphere</span>(<span class=\"hljs-number\">5</span>)\r\n    <span class=\"hljs-keyword\">const</span> expected = <span class=\"hljs-number\">314.1592653589793</span>\r\n    <span class=\"hljs-title function_\">expect</span>(calculateArea).<span class=\"hljs-title function_\">toBe</span>(expected)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with negative value, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">surfaceAreaSphere</span>(-<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing areaRectangle calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with correct args&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> areaRectangle = area.<span class=\"hljs-title function_\">areaRectangle</span>(<span class=\"hljs-number\">2.5</span>, <span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(areaRectangle).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5.0</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with incorrect args, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaRectangle</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaRectangle</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-number\">0</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaRectangle</span>(<span class=\"hljs-number\">23</span>, -<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaRectangle</span>(<span class=\"hljs-number\">23</span>, <span class=\"hljs-string\">&#x27;zero&#x27;</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing areaSquare calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with correct args&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> areaSquare = area.<span class=\"hljs-title function_\">areaSquare</span>(<span class=\"hljs-number\">2.5</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(areaSquare).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">6.25</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with incorrect side length, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaSquare</span>(-<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaSquare</span>(<span class=\"hljs-string\">&#x27;zero&#x27;</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing areaTriangle calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with correct args&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> areaTriangle = area.<span class=\"hljs-title function_\">areaTriangle</span>(<span class=\"hljs-number\">1.66</span>, <span class=\"hljs-number\">3.44</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(areaTriangle).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2.8552</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with incorrect base and height, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaTriangle</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaTriangle</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&#x27;zero&#x27;</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing areaTriangleWithAllThreeSides calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with correct args&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> areaTriangle = area.<span class=\"hljs-title function_\">areaTriangleWithAllThreeSides</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(areaTriangle).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">14.7</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with incorrect sides, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaTriangleWithAllThreeSides</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaTriangleWithAllThreeSides</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&#x27;zero&#x27;</span>, <span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaTriangleWithAllThreeSides</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">12</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing areaParallelogram calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with correct args&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> areaParallelogram = area.<span class=\"hljs-title function_\">areaParallelogram</span>(<span class=\"hljs-number\">1.66</span>, <span class=\"hljs-number\">3.44</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(areaParallelogram).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">5.7104</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with incorrect base and height, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaParallelogram</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaParallelogram</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&#x27;zero&#x27;</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing areaTrapezium calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with correct args&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> areaTrapezium = area.<span class=\"hljs-title function_\">areaTrapezium</span>(<span class=\"hljs-number\">1.66</span>, <span class=\"hljs-number\">2.41</span>, <span class=\"hljs-number\">4.1</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(areaTrapezium).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">8.3435</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with incorrect bases and height, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaTrapezium</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaTrapezium</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&#x27;zero&#x27;</span>, <span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaTrapezium</span>(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;seven&#x27;</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing areaCircle calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with correct args&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> areaCircle = area.<span class=\"hljs-title function_\">areaCircle</span>(<span class=\"hljs-number\">3.456</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(areaCircle).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">37.52298159254666</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with incorrect diagonal, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaCircle</span>(-<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaCircle</span>(<span class=\"hljs-string\">&#x27;zero&#x27;</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Testing areaRhombus calculations&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with correct args&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-keyword\">const</span> areaRhombus = area.<span class=\"hljs-title function_\">areaRhombus</span>(<span class=\"hljs-number\">2.5</span>, <span class=\"hljs-number\">2.0</span>)\r\n    <span class=\"hljs-title function_\">expect</span>(areaRhombus).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2.5</span>)\r\n  })\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;with incorrect diagonals, expect throw&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaRhombus</span>(<span class=\"hljs-number\">7</span>, -<span class=\"hljs-number\">1</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-function\">() =&gt;</span> area.<span class=\"hljs-title function_\">areaRhombus</span>(<span class=\"hljs-string\">&#x27;zero&#x27;</span>, <span class=\"hljs-number\">2</span>)).<span class=\"hljs-title function_\">toThrow</span>()\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "math\\area.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\area.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementations for the [area](https://en.wikipedia.org/wiki/Area) of\r\n * various shapes\r\n * @details The area of a shape is the amount of 2D space it takes up.\r\n * All shapes have a formula to get the area of any given shape.\r\n * These implementations support multiple return types.\r\n *\r\n * @author [Focusucof](https://github.com/Focusucof)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _USE_MATH_DEFINES</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>  <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>    <span class=\"hljs-comment\">/// for M_PI definition and pow()</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span>   <span class=\"hljs-comment\">/// for uint16_t datatype</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace math\r\n * @brief Mathematical algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> math {\r\n<span class=\"hljs-comment\">/**\r\n * @brief area of a [square](https://en.wikipedia.org/wiki/Square) (l * l)\r\n * @param length is the length of the square\r\n * @returns area of square\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">square_area</span><span class=\"hljs-params\">(T length)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> length * length;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief area of a [rectangle](https://en.wikipedia.org/wiki/Rectangle) (l * w)\r\n * @param length is the length of the rectangle\r\n * @param width is the width of the rectangle\r\n * @returns area of the rectangle\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">rect_area</span><span class=\"hljs-params\">(T length, T width)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> length * width;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief area of a [triangle](https://en.wikipedia.org/wiki/Triangle) (b * h /\r\n * 2)\r\n * @param base is the length of the bottom side of the triangle\r\n * @param height is the length of the tallest point in the triangle\r\n * @returns area of the triangle\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">triangle_area</span><span class=\"hljs-params\">(T base, T height)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> base * height / <span class=\"hljs-number\">2</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief area of a [circle](https://en.wikipedia.org/wiki/Area_of_a_circle) (pi\r\n * * r^2)\r\n * @param radius is the radius of the circle\r\n * @returns area of the circle\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">circle_area</span><span class=\"hljs-params\">(T radius)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> M_PI * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief area of a [parallelogram](https://en.wikipedia.org/wiki/Parallelogram)\r\n * (b * h)\r\n * @param base is the length of the bottom side of the parallelogram\r\n * @param height is the length of the tallest point in the parallelogram\r\n * @returns area of the parallelogram\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">parallelogram_area</span><span class=\"hljs-params\">(T base, T height)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> base * height;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief surface area of a [cube](https://en.wikipedia.org/wiki/Cube) ( 6 * (l\r\n * * l))\r\n * @param length is the length of the cube\r\n * @returns surface area of the cube\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">cube_surface_area</span><span class=\"hljs-params\">(T length)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span> * length * length;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief surface area of a [sphere](https://en.wikipedia.org/wiki/Sphere) ( 4 *\r\n * pi * r^2)\r\n * @param radius is the radius of the sphere\r\n * @returns surface area of the sphere\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">sphere_surface_area</span><span class=\"hljs-params\">(T radius)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * M_PI * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief surface area of a [cylinder](https://en.wikipedia.org/wiki/Cylinder)\r\n * (2 * pi * r * h + 2 * pi * r^2)\r\n * @param radius is the radius of the cylinder\r\n * @param height is the height of the cylinder\r\n * @returns surface area of the cylinder\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\">T <span class=\"hljs-title\">cylinder_surface_area</span><span class=\"hljs-params\">(T radius, T height)</span> </span>{\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * M_PI * radius * height + <span class=\"hljs-number\">2</span> * M_PI * <span class=\"hljs-built_in\">pow</span>(radius, <span class=\"hljs-number\">2</span>);\r\n}\r\n}  <span class=\"hljs-comment\">// namespace math</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// I/O variables for testing</span>\r\n    <span class=\"hljs-type\">uint16_t</span> int_length = <span class=\"hljs-number\">0</span>;    <span class=\"hljs-comment\">// 16 bit integer length input</span>\r\n    <span class=\"hljs-type\">uint16_t</span> int_width = <span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// 16 bit integer width input</span>\r\n    <span class=\"hljs-type\">uint16_t</span> int_base = <span class=\"hljs-number\">0</span>;      <span class=\"hljs-comment\">// 16 bit integer base input</span>\r\n    <span class=\"hljs-type\">uint16_t</span> int_height = <span class=\"hljs-number\">0</span>;    <span class=\"hljs-comment\">// 16 bit integer height input</span>\r\n    <span class=\"hljs-type\">uint16_t</span> int_expected = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// 16 bit integer expected output</span>\r\n    <span class=\"hljs-type\">uint16_t</span> int_area = <span class=\"hljs-number\">0</span>;      <span class=\"hljs-comment\">// 16 bit integer output</span>\r\n\r\n    <span class=\"hljs-type\">float</span> float_length = NAN;    <span class=\"hljs-comment\">// float length input</span>\r\n    <span class=\"hljs-type\">float</span> float_expected = NAN;  <span class=\"hljs-comment\">// float expected output</span>\r\n    <span class=\"hljs-type\">float</span> float_area = NAN;      <span class=\"hljs-comment\">// float output</span>\r\n\r\n    <span class=\"hljs-type\">double</span> double_length = NAN;    <span class=\"hljs-comment\">// double length input</span>\r\n    <span class=\"hljs-type\">double</span> double_width = NAN;     <span class=\"hljs-comment\">// double width input</span>\r\n    <span class=\"hljs-type\">double</span> double_radius = NAN;    <span class=\"hljs-comment\">// double radius input</span>\r\n    <span class=\"hljs-type\">double</span> double_height = NAN;    <span class=\"hljs-comment\">// double height input</span>\r\n    <span class=\"hljs-type\">double</span> double_expected = NAN;  <span class=\"hljs-comment\">// double expected output</span>\r\n    <span class=\"hljs-type\">double</span> double_area = NAN;      <span class=\"hljs-comment\">// double output</span>\r\n\r\n    <span class=\"hljs-comment\">// 1st test</span>\r\n    int_length = <span class=\"hljs-number\">5</span>;\r\n    int_expected = <span class=\"hljs-number\">25</span>;\r\n    int_area = math::<span class=\"hljs-built_in\">square_area</span>(int_length);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A SQUARE (int)&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(int_area == int_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 2nd test</span>\r\n    float_length = <span class=\"hljs-number\">2.5</span>;\r\n    float_expected = <span class=\"hljs-number\">6.25</span>;\r\n    float_area = math::<span class=\"hljs-built_in\">square_area</span>(float_length);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A SQUARE (float)&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; float_length &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; float_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; float_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(float_area == float_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 3rd test</span>\r\n    int_length = <span class=\"hljs-number\">4</span>;\r\n    int_width = <span class=\"hljs-number\">7</span>;\r\n    int_expected = <span class=\"hljs-number\">28</span>;\r\n    int_area = math::<span class=\"hljs-built_in\">rect_area</span>(int_length, int_width);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A RECTANGLE (int)&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; int_length &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Width: &quot;</span> &lt;&lt; int_width &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(int_area == int_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 4th test</span>\r\n    double_length = <span class=\"hljs-number\">2.5</span>;\r\n    double_width = <span class=\"hljs-number\">5.7</span>;\r\n    double_expected = <span class=\"hljs-number\">14.25</span>;\r\n    double_area = math::<span class=\"hljs-built_in\">rect_area</span>(double_length, double_width);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A RECTANGLE (double)&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; double_length &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Width: &quot;</span> &lt;&lt; double_width &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 5th test</span>\r\n    int_base = <span class=\"hljs-number\">10</span>;\r\n    int_height = <span class=\"hljs-number\">3</span>;\r\n    int_expected = <span class=\"hljs-number\">15</span>;\r\n    int_area = math::<span class=\"hljs-built_in\">triangle_area</span>(int_base, int_height);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A TRIANGLE&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Base: &quot;</span> &lt;&lt; int_base &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; int_height &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(int_area == int_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 6th test</span>\r\n    double_radius = <span class=\"hljs-number\">6</span>;\r\n    double_expected =\r\n        <span class=\"hljs-number\">113.09733552923255</span>;  <span class=\"hljs-comment\">// rounded down because the double datatype</span>\r\n                             <span class=\"hljs-comment\">// truncates after 14 decimal places</span>\r\n    double_area = math::<span class=\"hljs-built_in\">circle_area</span>(double_radius);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A CIRCLE&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 7th test</span>\r\n    int_base = <span class=\"hljs-number\">6</span>;\r\n    int_height = <span class=\"hljs-number\">7</span>;\r\n    int_expected = <span class=\"hljs-number\">42</span>;\r\n    int_area = math::<span class=\"hljs-built_in\">parallelogram_area</span>(int_base, int_height);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;AREA OF A PARALLELOGRAM&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Base: &quot;</span> &lt;&lt; int_base &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; int_height &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; int_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; int_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(int_area == int_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 8th test</span>\r\n    double_length = <span class=\"hljs-number\">5.5</span>;\r\n    double_expected = <span class=\"hljs-number\">181.5</span>;\r\n    double_area = math::<span class=\"hljs-built_in\">cube_surface_area</span>(double_length);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;SURFACE AREA OF A CUBE&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Length: &quot;</span> &lt;&lt; double_length &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 9th test</span>\r\n    double_radius = <span class=\"hljs-number\">10.0</span>;\r\n    double_expected = <span class=\"hljs-number\">1256.6370614359172</span>;  <span class=\"hljs-comment\">// rounded down because the whole</span>\r\n                                           <span class=\"hljs-comment\">// value gets truncated</span>\r\n    double_area = math::<span class=\"hljs-built_in\">sphere_surface_area</span>(double_radius);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;SURFACE AREA OF A SPHERE&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 10th test</span>\r\n    double_radius = <span class=\"hljs-number\">4.0</span>;\r\n    double_height = <span class=\"hljs-number\">7.0</span>;\r\n    double_expected = <span class=\"hljs-number\">276.46015351590177</span>;\r\n    double_area = math::<span class=\"hljs-built_in\">cylinder_surface_area</span>(double_radius, double_height);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;SURFACE AREA OF A CYLINDER&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Radius: &quot;</span> &lt;&lt; double_radius &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Input Height: &quot;</span> &lt;&lt; double_height &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Expected Output: &quot;</span> &lt;&lt; double_expected &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Output: &quot;</span> &lt;&lt; double_area &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">assert</span>(double_area == double_expected);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;TEST PASSED&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\Area.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\Area.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Find the area of various geometric shapes\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Area</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n\r\n        <span class=\"hljs-comment\">/* test cube */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCube(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">6.0</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test sphere */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaSphere(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">314.1592653589793</span>) == <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaSphere(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">12.566370614359172</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test rectangle */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaRectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">200.0</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test square */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaSquare(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">100.0</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test triangle */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaTriangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">50.0</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test parallelogram */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaParallelogram(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">200.0</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test trapezium */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaTrapezium(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>), <span class=\"hljs-number\">450.0</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test circle */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCircle(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">1256.6370614359173</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test cylinder */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCylinder(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">18.84955592153876</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test hemisphere */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaHemisphere(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">235.61944901923448</span>) == <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaHemisphere(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">9.42477796076938</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-comment\">/* test cone */</span>\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCone(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>), <span class=\"hljs-number\">301.59289474462014</span>) == <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCone(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">24</span>), <span class=\"hljs-number\">1130.9733552923256</span>) == <span class=\"hljs-number\">0</span>;\r\n\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the surface area of a cube.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> sideLength side length of cube\r\n     * <span class=\"hljs-doctag\">@return</span> surface area of given cube\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCube</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sideLength)</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span> * sideLength * sideLength;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the surface area of a sphere.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> radius radius of sphere\r\n     * <span class=\"hljs-doctag\">@return</span> surface area of given sphere\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaSphere</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * Math.PI * radius * radius;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the area of a rectangle\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> length length of rectangle\r\n     * <span class=\"hljs-doctag\">@param</span> width width of rectangle\r\n     * <span class=\"hljs-doctag\">@return</span> area of given rectangle\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaRectangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> length, <span class=\"hljs-type\">double</span> width)</span> {\r\n        <span class=\"hljs-keyword\">return</span> length * width;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate surface area of a cylinder\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> radius radius of the floor\r\n     * <span class=\"hljs-doctag\">@param</span> height height of the cylinder.\r\n     * <span class=\"hljs-doctag\">@return</span> volume of given cylinder\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCylinder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius, <span class=\"hljs-type\">double</span> height)</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * (Math.PI * radius * radius + Math.PI * radius * height);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the area of a square\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> sideLength side length of square\r\n     * <span class=\"hljs-doctag\">@return</span> area of given square\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaSquare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sideLength)</span> {\r\n        <span class=\"hljs-keyword\">return</span> sideLength * sideLength;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the area of a triangle\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> base base of triangle\r\n     * <span class=\"hljs-doctag\">@param</span> height height of triangle\r\n     * <span class=\"hljs-doctag\">@return</span> area of given triangle\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> base, <span class=\"hljs-type\">double</span> height)</span> {\r\n        <span class=\"hljs-keyword\">return</span> base * height / <span class=\"hljs-number\">2</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the area of a parallelogram\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> base base of parallelogram\r\n     * <span class=\"hljs-doctag\">@param</span> height height of parallelogram\r\n     * <span class=\"hljs-doctag\">@return</span> area of given parallelogram\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaParallelogram</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> base, <span class=\"hljs-type\">double</span> height)</span> {\r\n        <span class=\"hljs-keyword\">return</span> base * height;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the area of a trapezium\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> base1 upper base of trapezium\r\n     * <span class=\"hljs-doctag\">@param</span> base2 bottom base of trapezium\r\n     * <span class=\"hljs-doctag\">@param</span> height height of trapezium\r\n     * <span class=\"hljs-doctag\">@return</span> area of given trapezium\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaTrapezium</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> base1, <span class=\"hljs-type\">double</span> base2, <span class=\"hljs-type\">double</span> height)</span> {\r\n        <span class=\"hljs-keyword\">return</span> (base1 + base2) * height / <span class=\"hljs-number\">2</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the area of a circle\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> radius radius of circle\r\n     * <span class=\"hljs-doctag\">@return</span> area of given circle\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCircle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\r\n        <span class=\"hljs-keyword\">return</span> Math.PI * radius * radius;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the surface area of a hemisphere.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> radius radius of hemisphere\r\n     * <span class=\"hljs-doctag\">@return</span> surface area of given hemisphere\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaHemisphere</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span> * Math.PI * radius * radius;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate the surface area of a cone.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> radius radius of cone.\r\n     * <span class=\"hljs-doctag\">@param</span> height of cone.\r\n     * <span class=\"hljs-doctag\">@return</span> surface area of given cone.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCone</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius, <span class=\"hljs-type\">double</span> height)</span> {\r\n        <span class=\"hljs-keyword\">return</span> Math.PI * radius * (radius + Math.pow((height * height + radius * radius), <span class=\"hljs-number\">0.5</span>));\r\n    }\r\n}\r\n"
    },
    "kotlin": {
      "dir": "src\\main\\kotlin\\math\\Area.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src\\main\\kotlin\\math\\Area.kt",
      "code": "<span class=\"hljs-keyword\">package</span> math\r\n\r\n<span class=\"hljs-keyword\">import</span> java.lang.IllegalArgumentException\r\n<span class=\"hljs-keyword\">import</span> kotlin.math.pow\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Calculate the area of a rectangle\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> length length of rectangle\r\n * <span class=\"hljs-doctag\">@param</span> width width of rectangle\r\n * <span class=\"hljs-doctag\">@return</span> area of given rectangle\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfARectangle</span><span class=\"hljs-params\">(length: <span class=\"hljs-type\">Double</span>, width: <span class=\"hljs-type\">Double</span>)</span></span> =  <span class=\"hljs-keyword\">when</span> {\r\n    length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; width &gt; <span class=\"hljs-number\">0</span> -&gt; length * width\r\n    <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Length and Width must be positive&quot;</span>)\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Calculate the area of a square\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> sideLength side length of square\r\n * <span class=\"hljs-doctag\">@return</span> area of given square\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfASquare</span><span class=\"hljs-params\">(sideLength: <span class=\"hljs-type\">Double</span>)</span></span> =\r\n    <span class=\"hljs-keyword\">when</span> {\r\n        sideLength &gt; <span class=\"hljs-number\">0</span> -&gt; sideLength * sideLength\r\n        <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Side Length must be positive&quot;</span>)\r\n    }\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Calculate the area of a triangle\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> base base of triangle\r\n * <span class=\"hljs-doctag\">@param</span> height height of triangle\r\n * <span class=\"hljs-doctag\">@return</span> area of given triangle\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfATriangle</span><span class=\"hljs-params\">(base: <span class=\"hljs-type\">Double</span>, height: <span class=\"hljs-type\">Double</span>)</span></span> =\r\n    <span class=\"hljs-keyword\">when</span> {\r\n        base &gt; <span class=\"hljs-number\">0</span> &amp;&amp; height &gt; <span class=\"hljs-number\">0</span> -&gt; base * height / <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Base and Height must be positive&quot;</span>)\r\n    }\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Calculate the area of a circle\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> radius radius of circle\r\n * <span class=\"hljs-doctag\">@return</span> area of given circle\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfACircle</span><span class=\"hljs-params\">(radius: <span class=\"hljs-type\">Double</span>)</span></span> =\r\n    <span class=\"hljs-keyword\">when</span> {\r\n        radius &gt; <span class=\"hljs-number\">0</span> -&gt; Math.PI * radius.pow(<span class=\"hljs-number\">2.0</span>)\r\n        <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Radius must be positive&quot;</span>)\r\n    }"
    },
    "julia": {
      "dir": "src\\math\\area.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\math\\area.jl",
      "code": "<span class=\"hljs-comment\"># Functions for area of various geometric shapes</span>\r\n<span class=\"hljs-comment\"># Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee)</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    surfarea_cube(side)\r\n\r\nFinds surface area of a cube\r\n\r\n# Example\r\n\r\n```julia\r\nsurfarea_cube(1)  # returns 6\r\nsurfarea_cube(3)  # returns 54\r\nsurfarea_cube(-1) # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> surfarea_cube(side)\r\n    <span class=\"hljs-keyword\">if</span> side &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(side, <span class=\"hljs-string\">&quot;surfarea_cube() only works for non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span>(side^<span class=\"hljs-number\">2</span>)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    surfarea_sphere(side)\r\n\r\nFinds surface area of a sphere\r\n\r\n# Example\r\n\r\n```julia\r\nsurfarea_sphere(5)  # returns 314.1592653589793\r\nsurfarea_sphere(1)  # returns 12.566370614359172\r\nsurfarea_sphere(-1) # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> surfarea_sphere(radius)\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(radius, <span class=\"hljs-string\">&quot;surfarea_sphere() only works for non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span><span class=\"hljs-literal\">π</span> * (radius^<span class=\"hljs-number\">2</span>)\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    area_rectangle(length, width)\r\n\r\nFinds area of the rectangle\r\n\r\n# Example\r\n\r\n```julia\r\narea_rectangle(10,20) # returns 200\r\narea_rectangle(-1,-2) # returns DomainError\r\narea_rectangle(1,-2)  # returns DomainError\r\narea_rectangle(-1,2)  # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> area_rectangle(length, width)\r\n    <span class=\"hljs-keyword\">if</span> length &lt; <span class=\"hljs-number\">0</span> || width &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_rectangle() only works for non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> length * width\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    area_square(side)\r\n\r\nFinds area of the area_square\r\n\r\n# Example\r\n\r\n```julia\r\narea_square(10) # returns 100\r\narea_square(-1) # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> area_square(side)\r\n    <span class=\"hljs-keyword\">if</span> side &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_square() only works for non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> side^<span class=\"hljs-number\">2</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    area_triangle(base, height)\r\n\r\nFinds area of the right angled triangle with base height\r\n\r\n# Example\r\n\r\n```julia\r\narea_triangle(10,10) # returns 50.0\r\narea_triangle(-1,-2) # returns DomainError\r\narea_triangle(1,-2)  # returns DomainError\r\narea_triangle(-1,2)  # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> area_triangle(base, height)\r\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_triangle() only accepts non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> (base * height) / <span class=\"hljs-number\">2</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    area_heron_triangle(side1, side2, side3)\r\n\r\nFinds area of a triangle using heron&#x27;s formula\r\n\r\n# Example\r\n\r\n```julia\r\narea_heron_triangle(5,12,13) # returns 30.0\r\narea_heron_triangle(-1,-2,1) # returns DomainError\r\narea_heron_triangle(1,-2,1)  # returns DomainError\r\narea_heron_triangle(-1,2,1)  # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> area_heron_triangle(side1, side2, side3)\r\n    <span class=\"hljs-keyword\">if</span> side1 &lt; <span class=\"hljs-number\">0</span> || side2 &lt; <span class=\"hljs-number\">0</span> || side3 &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_triangle_three_sides() only accepts non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">elseif</span> side1 + side2 &lt; side3 || side1 + side3 &lt; side2 || side2 + side3 &lt; side1\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;Given three sides do not form a triangle&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    semi_perimeter = (side1 + side2 + side3) / <span class=\"hljs-number\">2</span>\r\n    area = sqrt(\r\n        semi_perimeter\r\n        * (semi_perimeter - side1)\r\n        * (semi_perimeter - side2)\r\n        * (semi_perimeter - side3)\r\n    )\r\n    <span class=\"hljs-keyword\">return</span> area\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    area_parallelogram(base, height)\r\n\r\nFinds area of the parallelogram\r\n\r\n# Example\r\n\r\n```julia\r\narea_parallelogram(10,20) # returns 200\r\narea_parallelogram(-1,-2) # returns DomainError\r\narea_parallelogram(1,-2)  # returns DomainError\r\narea_parallelogram(-1,2)  # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> area_parallelogram(base, height)\r\n\r\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_parallelogram() only accepts non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> base * height\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\narea_trapezium(base1,base2,height)\r\n\r\nFinds area of the traπzium\r\n\r\n# Example\r\n\r\n```julia\r\narea_trapezium(10, 20, 30)  # returns 450.0\r\narea_trapezium(-1, -2, -3)  # returns DomainError\r\narea_trapezium(-1, 2, 3)    # returns DomainError\r\narea_trapezium(1, -2, 3)    # returns DomainError\r\narea_trapezium(1, 2, -3)    # returns DomainError\r\narea_trapezium(-1, -2, 3)   # returns DomainError\r\narea_trapezium(1, -2, -3)   # returns DomainError\r\narea_trapezium(-1, 2, -3)   # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> area_trapezium(base1, base2, height)\r\n    <span class=\"hljs-keyword\">if</span> base1 &lt; <span class=\"hljs-number\">0</span> || base2 &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_trapezium() only accepts non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * (base1 + base2) * height\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    area_circle(radius)\r\n\r\nFinds area of the circle\r\n\r\n# Example\r\n\r\n```julia\r\narea_circle(20) # returns 1256.6370614359173\r\narea_circle(-1) # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> area_circle(radius)\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_circle() only accepts non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">π</span> * radius^<span class=\"hljs-number\">2</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    area_ellipse(radius_x, radius_y)\r\n\r\nFinds area of the ellipse\r\n\r\n# Example\r\n\r\n```julia\r\narea_ellipse(10, 10) # returns 314.1592653589793\r\narea_ellipse(10, 20) # returns 628.3185307179587\r\narea_ellipse(1, -2) # returns DomainError\r\narea_ellipse(-1, 2) # returns DomainError\r\narea_ellipse(-1, -2) # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> area_ellipse(radius_x, radius_y)\r\n    <span class=\"hljs-keyword\">if</span> radius_x &lt; <span class=\"hljs-number\">0</span> || radius_y &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_ellipse() only accepts non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">π</span> * radius_x * radius_y\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    area_rhombus(diagonal_1, diagonal_2)\r\n\r\nFinds area of the rhombus\r\n\r\n# Example\r\n\r\n```julia\r\narea_rhombus(10, 20) # returns 100.0\r\narea_rhombus(-1,-2) # returns DomainError\r\narea_rhombus(1,-2)  # returns DomainError\r\narea_rhombus(-1,2)  # returns DomainError\r\n```\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> area_rhombus(diagonal_1, diagonal_2)\r\n    <span class=\"hljs-keyword\">if</span> diagonal_1 &lt; <span class=\"hljs-number\">0</span> || diagonal_2 &lt; <span class=\"hljs-number\">0</span>\r\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_rhombus() only accepts non-negative values&quot;</span>))\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * diagonal_1 * diagonal_2\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    trapazoidal_area(f, x_start, x_end, steps)\r\n\r\nApproximates the area under the curve using the trapezoidal rule\r\nArguments:\r\n - f: function for the\r\n - x_start: starting value for x\r\n - x_end: ending value for x\r\n - steps: steps taken while integrating.\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> trapazoidal_area(f, x_start, x_end, steps)\r\n\tx1 = x_start\r\n\tfx1 = f(x_start)\r\n\tarea = <span class=\"hljs-number\">0.0</span>\r\n\r\n\t<span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:steps\r\n\t\tx2 = ((x_end - x_start) / steps) + x1\r\n\t\tfx2 = f(x2)\r\n\t\tarea += abs(fx2 + fx1) * (x2 - x1) / <span class=\"hljs-number\">2</span>\r\n\t\tx1 = x2\r\n\t\tfx1 = fx2\r\n\t<span class=\"hljs-keyword\">end</span>\r\n\r\n\t<span class=\"hljs-keyword\">return</span> area\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "laurelr2020",
      "email": "reganlaurell@gmail.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "66054069+uncomfyhalomacro@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "Sabari Ganesh",
      "email": "64348740+SabariGanesh-K@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Marco Steinke",
      "email": "49523050+MarcoSteinke@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rohan R Bharadwaj",
      "email": "rohanrbharadwaj@gmail.com",
      "commits": 1
    },
    {
      "name": "Rohan R Bharadwaj",
      "email": "89947037+Rohanrbharadwaj@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Lewis Tian",
      "email": "taseikyo@gmail.com",
      "commits": 1
    },
    {
      "name": "SiddhantJain15",
      "email": "siddhant.jain150397@gmail.com",
      "commits": 1
    },
    {
      "name": "김수연",
      "email": "tnehd158@gmail.com",
      "commits": 1
    },
    {
      "name": "Adityanagraj",
      "email": "42292430+Adityanagraj@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Carlos Carvalho",
      "email": "jcarloss.carvalho@gmail.com",
      "commits": 2
    },
    {
      "name": "Vɪɴᴀʏᴀᴋ Pᴀɴᴅᴇʏ",
      "email": "87496159+Harpia-Vieillot@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "lance-pyles",
      "email": "36748284+lance-pyles@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}