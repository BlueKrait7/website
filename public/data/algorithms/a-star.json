{
  "slug": "a-star",
  "name": "A Star",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning\\astar.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning\\astar.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThe A* algorithm combines features of uniform-cost search and pure\r\nheuristic search to efficiently compute optimal solutions.\r\nA* algorithm is a best-first search algorithm in which the cost\r\nassociated with a node is f(n) = g(n) + h(n),\r\nwhere g(n) is the cost of the path from the initial state to node n and\r\nh(n) is the heuristic estimate or the cost or a path\r\nfrom node n to a goal.A* algorithm introduces a heuristic into a\r\nregular graph-searching algorithm,\r\nessentially planning ahead at each step so a more optimal decision\r\nis made.A* also known as the algorithm with brains\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cell</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Class cell represents a cell in the world which have the property\r\n    position : The position of the represented by  tupleof x and y\r\n    coordinates initially set to (0,0)\r\n    parent : This contains the parent cell object which we visited\r\n    before arrinving this cell\r\n    g,h,f : The parameters for constructing the heuristic function\r\n    which can be any function. for simplicity used line\r\n    distance\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\r\n        self.position = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n        self.parent = <span class=\"hljs-literal\">None</span>\r\n\r\n        self.g = <span class=\"hljs-number\">0</span>\r\n        self.h = <span class=\"hljs-number\">0</span>\r\n        self.f = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    overrides equals method because otherwise cell assign will give\r\n    wrong results\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__eq__</span>(<span class=\"hljs-params\">self, cell</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.position == cell.position\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">showcell</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-built_in\">print</span>(self.position)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Gridworld</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Gridworld class represents the  external world here a grid M*M\r\n    matrix\r\n    world_size: create a numpy array with the given world_size default is 5\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, world_size=(<span class=\"hljs-params\"><span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span></span>)</span>):\r\n        self.w = np.zeros(world_size)\r\n        self.world_x_limit = world_size[<span class=\"hljs-number\">0</span>]\r\n        self.world_y_limit = world_size[<span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-built_in\">print</span>(self.w)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_neigbours</span>(<span class=\"hljs-params\">self, cell</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the neighbours of cell\r\n        &quot;&quot;&quot;</span>\r\n        neughbour_cord = [\r\n            (-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>),\r\n            (-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>),\r\n            (-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>),\r\n            (<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>),\r\n            (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>),\r\n            (<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>),\r\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>),\r\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>),\r\n        ]\r\n        current_x = cell.position[<span class=\"hljs-number\">0</span>]\r\n        current_y = cell.position[<span class=\"hljs-number\">1</span>]\r\n        neighbours = []\r\n        <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> neughbour_cord:\r\n            x = current_x + n[<span class=\"hljs-number\">0</span>]\r\n            y = current_y + n[<span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= x &lt; self.world_x_limit <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= y &lt; self.world_y_limit:\r\n                c = Cell()\r\n                c.position = (x, y)\r\n                c.parent = cell\r\n                neighbours.append(c)\r\n        <span class=\"hljs-keyword\">return</span> neighbours\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">astar</span>(<span class=\"hljs-params\">world, start, goal</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Implementation of a start algorithm\r\n    world : Object of the world object\r\n    start : Object of the cell as  start position\r\n    stop  : Object of the cell as goal position\r\n\r\n    &gt;&gt;&gt; p = Gridworld()\r\n    &gt;&gt;&gt; start = Cell()\r\n    &gt;&gt;&gt; start.position = (0,0)\r\n    &gt;&gt;&gt; goal = Cell()\r\n    &gt;&gt;&gt; goal.position = (4,4)\r\n    &gt;&gt;&gt; astar(p, start, goal)\r\n    [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]\r\n    &quot;&quot;&quot;</span>\r\n    _<span class=\"hljs-built_in\">open</span> = []\r\n    _closed = []\r\n    _<span class=\"hljs-built_in\">open</span>.append(start)\r\n\r\n    <span class=\"hljs-keyword\">while</span> _<span class=\"hljs-built_in\">open</span>:\r\n        min_f = np.argmin([n.f <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> _<span class=\"hljs-built_in\">open</span>])\r\n        current = _<span class=\"hljs-built_in\">open</span>[min_f]\r\n        _closed.append(_<span class=\"hljs-built_in\">open</span>.pop(min_f))\r\n        <span class=\"hljs-keyword\">if</span> current == goal:\r\n            <span class=\"hljs-keyword\">break</span>\r\n        <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> world.get_neigbours(current):\r\n            <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> _closed:\r\n                <span class=\"hljs-keyword\">if</span> c == n:\r\n                    <span class=\"hljs-keyword\">continue</span>\r\n            n.g = current.g + <span class=\"hljs-number\">1</span>\r\n            x1, y1 = n.position\r\n            x2, y2 = goal.position\r\n            n.h = (y2 - y1) ** <span class=\"hljs-number\">2</span> + (x2 - x1) ** <span class=\"hljs-number\">2</span>\r\n            n.f = n.h + n.g\r\n\r\n            <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> _<span class=\"hljs-built_in\">open</span>:\r\n                <span class=\"hljs-keyword\">if</span> c == n <span class=\"hljs-keyword\">and</span> c.f &lt; n.f:\r\n                    <span class=\"hljs-keyword\">continue</span>\r\n            _<span class=\"hljs-built_in\">open</span>.append(n)\r\n    path = []\r\n    <span class=\"hljs-keyword\">while</span> current.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n        path.append(current.position)\r\n        current = current.parent\r\n    path.append(current.position)\r\n    <span class=\"hljs-keyword\">return</span> path[::-<span class=\"hljs-number\">1</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    world = Gridworld()\r\n    <span class=\"hljs-comment\">#   stat position and Goal</span>\r\n    start = Cell()\r\n    start.position = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n    goal = Cell()\r\n    goal.position = (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;path from <span class=\"hljs-subst\">{start.position}</span> to <span class=\"hljs-subst\">{goal.position}</span>&quot;</span>)\r\n    s = astar(world, start, goal)\r\n    <span class=\"hljs-comment\">#   Just for visual reasons</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> s:\r\n        world.w[i] = <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-built_in\">print</span>(world.w)\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\graphs\\A_Star.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\graphs\\A_Star.java",
      "code": "<span class=\"hljs-comment\">/*\r\n\tTime Complexity = O(E), where E is equal to the number of edges\r\n */</span>\r\n<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.graphs;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A_Star</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\r\n        <span class=\"hljs-comment\">// Graph&#x27;s structure can be changed only applying changes to this class.</span>\r\n\r\n        <span class=\"hljs-keyword\">private</span> ArrayList&lt;ArrayList&lt;Edge&gt;&gt; graph;\r\n\r\n        <span class=\"hljs-comment\">// Initialise ArrayLists in Constructor</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\r\n                <span class=\"hljs-built_in\">this</span>.graph.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;());\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> ArrayList&lt;Edge&gt; <span class=\"hljs-title function_\">getNeighbours</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from)</span> {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.graph.get(from);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Graph is bidirectional, for just one direction remove second instruction of this method.</span>\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(Edge edge)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.graph.get(edge.getFrom()).add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(edge.getFrom(), edge.getTo(), edge.getWeight()));\r\n            <span class=\"hljs-built_in\">this</span>.graph.get(edge.getTo()).add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(edge.getTo(), edge.getFrom(), edge.getWeight()));\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Edge</span> {\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> from;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> to;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> weight;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Edge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to, <span class=\"hljs-type\">int</span> weight)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.from = from;\r\n            <span class=\"hljs-built_in\">this</span>.to = to;\r\n            <span class=\"hljs-built_in\">this</span>.weight = weight;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getFrom</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> from;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getTo</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> to;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getWeight</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> weight;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// class to iterate during the algorithm execution, and also used to return the solution.</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PathAndDistance</span> {\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> distance; <span class=\"hljs-comment\">// distance advanced so far.</span>\r\n        <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; path; <span class=\"hljs-comment\">// list of visited nodes in this path.</span>\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> estimated; <span class=\"hljs-comment\">// heuristic value associated to the last node od the path (current node).</span>\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">PathAndDistance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> distance, ArrayList&lt;Integer&gt; path, <span class=\"hljs-type\">int</span> estimated)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.distance = distance;\r\n            <span class=\"hljs-built_in\">this</span>.path = path;\r\n            <span class=\"hljs-built_in\">this</span>.estimated = estimated;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getDistance</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> distance;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">getPath</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> path;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getEstimated</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> estimated;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printSolution</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.path != <span class=\"hljs-literal\">null</span>) {\r\n                System.out.println(\r\n                        <span class=\"hljs-string\">&quot;Optimal path: &quot;</span> + <span class=\"hljs-built_in\">this</span>.path + <span class=\"hljs-string\">&quot;, distance: &quot;</span> + <span class=\"hljs-built_in\">this</span>.distance);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                System.out.println(<span class=\"hljs-string\">&quot;There is no path available to connect the points&quot;</span>);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initializeGraph</span><span class=\"hljs-params\">(Graph graph, ArrayList&lt;Integer&gt; data)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; data.size(); i += <span class=\"hljs-number\">4</span>) {\r\n            graph.addEdge(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(data.get(i), data.get(i + <span class=\"hljs-number\">1</span>), data.get(i + <span class=\"hljs-number\">2</span>)));\r\n        }\r\n        <span class=\"hljs-comment\">/*\r\n    .x. node\r\n    (y) cost\r\n    - or | or / bidirectional connection\r\n\r\n                          ( 98)- .7. -(86)- .4.\r\n                            |\r\n                    ( 85)- .17. -(142)- .18. -(92)- .8. -(87)- .11.\r\n                      |\r\n                     . 1. -------------------- (160)\r\n                      |  \\                       |\r\n                    (211) \\                     .6.\r\n                      |    \\                     |\r\n                     . 5.  (101)-.13. -(138)   (115)\r\n                      |           |     |     /\r\n                    ( 99)       ( 97)   |    /\r\n                      |           |     |   /\r\n        .12. -(151)- .15. -(80)- .14.   |  /\r\n         |            |           |     | /\r\n       ( 71)        (140)       (146)- .2. -(120)\r\n         |            |                       |\r\n        .19. -( 75)- . 0.        .10. -(75)- .3.\r\n                      |            |\r\n                    (118)        ( 70)\r\n                      |            |\r\n                     .16. -(111)- .9.\r\n         */</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">// heuristic function optimistic values</span>\r\n        <span class=\"hljs-type\">int</span>[] heuristic = {\r\n            <span class=\"hljs-number\">366</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-number\">242</span>, <span class=\"hljs-number\">161</span>, <span class=\"hljs-number\">178</span>, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">151</span>, <span class=\"hljs-number\">226</span>, <span class=\"hljs-number\">244</span>, <span class=\"hljs-number\">241</span>, <span class=\"hljs-number\">234</span>, <span class=\"hljs-number\">380</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-number\">193</span>, <span class=\"hljs-number\">253</span>, <span class=\"hljs-number\">329</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">199</span>, <span class=\"hljs-number\">374</span>\r\n        };\r\n\r\n        <span class=\"hljs-type\">Graph</span> <span class=\"hljs-variable\">graph</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>(<span class=\"hljs-number\">20</span>);\r\n        ArrayList&lt;Integer&gt; graphData\r\n                = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(\r\n                        Arrays.asList(\r\n                                <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">140</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">118</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">71</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">151</span>,\r\n                                <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">14</span>,\r\n                                <span class=\"hljs-number\">146</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">138</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">115</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">14</span>,\r\n                                <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">97</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">211</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-literal\">null</span>,\r\n                                <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">86</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">142</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">92</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">87</span>));\r\n        initializeGraph(graph, graphData);\r\n\r\n        <span class=\"hljs-type\">PathAndDistance</span> <span class=\"hljs-variable\">solution</span> <span class=\"hljs-operator\">=</span> aStar(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, graph, heuristic);\r\n        solution.printSolution();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> PathAndDistance <span class=\"hljs-title function_\">aStar</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to, Graph graph, <span class=\"hljs-type\">int</span>[] heuristic)</span> {\r\n        <span class=\"hljs-comment\">// nodes are prioritised by the less value of the current distance of their paths, and the</span>\r\n        <span class=\"hljs-comment\">// estimated value</span>\r\n        <span class=\"hljs-comment\">// given by the heuristic function to reach the destination point from the current point.</span>\r\n        PriorityQueue&lt;PathAndDistance&gt; queue\r\n                = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PriorityQueue</span>&lt;&gt;(Comparator.comparingInt(a -&gt; (a.getDistance() + a.getEstimated())));\r\n\r\n        <span class=\"hljs-comment\">// dummy data to start the algorithm from the beginning point</span>\r\n        queue.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(List.of(from)), <span class=\"hljs-number\">0</span>));\r\n\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">solutionFound</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\r\n        <span class=\"hljs-type\">PathAndDistance</span> <span class=\"hljs-variable\">currentData</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">null</span>, -<span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-keyword\">while</span> (!queue.isEmpty() &amp;&amp; !solutionFound) {\r\n            currentData = queue.poll(); <span class=\"hljs-comment\">// first in the queue, best node so keep exploring.</span>\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">currentPosition</span>\r\n                    <span class=\"hljs-operator\">=</span> currentData.getPath().get(currentData.getPath().size() - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// current node.</span>\r\n            <span class=\"hljs-keyword\">if</span> (currentPosition == to) {\r\n                solutionFound = <span class=\"hljs-literal\">true</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-keyword\">for</span> (Edge edge : graph.getNeighbours(currentPosition)) {\r\n                    <span class=\"hljs-keyword\">if</span> (!currentData.getPath().contains(edge.getTo())) { <span class=\"hljs-comment\">// Avoid Cycles</span>\r\n                        ArrayList&lt;Integer&gt; updatedPath = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(currentData.getPath());\r\n                        updatedPath.add(edge.getTo()); <span class=\"hljs-comment\">// Add the new node to the path, update the distance,</span>\r\n                        <span class=\"hljs-comment\">// and the heuristic function value associated to that path.</span>\r\n                        queue.add(\r\n                                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(\r\n                                        currentData.getDistance() + edge.getWeight(),\r\n                                        updatedPath,\r\n                                        heuristic[edge.getTo()]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> (solutionFound) ? currentData : <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">null</span>, -<span class=\"hljs-number\">1</span>);\r\n        <span class=\"hljs-comment\">// Out of while loop, if there is a solution, the current Data stores the optimal path, and its</span>\r\n        <span class=\"hljs-comment\">// distance</span>\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Tim Akermann",
      "email": "ti.akermann@gmail.com",
      "commits": 1
    },
    {
      "name": "R_juzi",
      "email": "59160257+R-juzi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sohan Rudra",
      "email": "sohanrudra@gmail.com",
      "commits": 1
    },
    {
      "name": "poloso",
      "email": "osoriopabl@gmail.com",
      "commits": 1
    },
    {
      "name": "Milton Chandro Bhowmick",
      "email": "miltonbhowmick6@gmail.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erwin Lejeune",
      "email": "erwin.lejeune15@gmail.com",
      "commits": 1
    },
    {
      "name": "Jeffin Francis",
      "email": "francisjeffin07@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "MarcosVillacanas",
      "email": "marcosvillacanas@icloud.com",
      "commits": 3
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 4
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}