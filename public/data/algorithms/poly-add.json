{
  "slug": "poly-add",
  "name": "Poly Add",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc\\poly_add.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc\\poly_add.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [Addition of two polynomials]\r\n * (https://en.wikipedia.org/wiki/Polynomial#Addition)\r\n * @author [Ankita Roy Chowdhury](https://github.com/Ankita19ms0010)\r\n * @details\r\n * This code takes two polynomials as input\r\n * and prints their sum using linked list.\r\n * The polynomials must be in increasing or decreasing order of degree.\r\n * Degree must be positive.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>  <span class=\"hljs-comment\">// for io operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief identifier for single-variable polynomial coefficients as a linked\r\n * list\r\n */</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">term</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> coef;          <span class=\"hljs-comment\">/**&lt; coefficient value */</span>\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">pow</span>;           <span class=\"hljs-comment\">/**&lt; power of the polynomial term */</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">term</span> *<span class=\"hljs-title\">next</span>;</span> <span class=\"hljs-comment\">/**&lt; pointer to the successive term */</span>\r\n};\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Frees memory space\r\n * @param poly first term of polynomial\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">free_poly</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> term *poly)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (!poly)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span>;  <span class=\"hljs-comment\">// NULL pointer does not need delete</span>\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        <span class=\"hljs-keyword\">while</span> (!poly-&gt;next)\r\n        {\r\n            <span class=\"hljs-built_in\">free</span>(poly-&gt;next);  <span class=\"hljs-comment\">// Deletes next term</span>\r\n        }\r\n        <span class=\"hljs-built_in\">free</span>(poly);  <span class=\"hljs-comment\">// delete the current term</span>\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * The function will create a polynomial\r\n * @param poly stores the address of the polynomial being created\r\n * @param coef contains the coefficient of the node\r\n * @param pow contains the degree\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">create_polynomial</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> term **poly, <span class=\"hljs-type\">int</span> coef, <span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">pow</span>)</span>\r\n{\r\n    <span class=\"hljs-comment\">// Creating the polynomial using temporary linked lists</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">term</span> *<span class=\"hljs-title\">temp1</span>, *<span class=\"hljs-title\">temp2</span>;</span>\r\n    temp1 = *poly;  <span class=\"hljs-comment\">// Contains the null pointer</span>\r\n\r\n    <span class=\"hljs-comment\">// Initiating first term</span>\r\n    <span class=\"hljs-keyword\">if</span> (temp1 == <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        temp2 = (<span class=\"hljs-keyword\">struct</span> term *)<span class=\"hljs-built_in\">malloc</span>(\r\n            <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> term));  <span class=\"hljs-comment\">// Dynamic node creation</span>\r\n        temp2-&gt;coef = coef;\r\n        temp2-&gt;<span class=\"hljs-built_in\">pow</span> = <span class=\"hljs-built_in\">pow</span>;\r\n        <span class=\"hljs-comment\">// Updating the null pointer with the address of the first node of the</span>\r\n        <span class=\"hljs-comment\">// polynomial just created</span>\r\n        *poly = temp2;\r\n        temp2-&gt;next = <span class=\"hljs-literal\">NULL</span>;  <span class=\"hljs-comment\">// Increasing the pointer temp2</span>\r\n    }\r\n    <span class=\"hljs-comment\">// Creating the rest of the nodes</span>\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n        temp2-&gt;next = (<span class=\"hljs-keyword\">struct</span> term *)<span class=\"hljs-built_in\">malloc</span>(\r\n            <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> term));  <span class=\"hljs-comment\">// Dynamic node creation</span>\r\n        temp2 = temp2-&gt;next;       <span class=\"hljs-comment\">// Increasing the pointer temp2</span>\r\n        temp2-&gt;coef = coef;\r\n        temp2-&gt;<span class=\"hljs-built_in\">pow</span> = <span class=\"hljs-built_in\">pow</span>;\r\n        temp2-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * The function will add 2 polynomials\r\n * @param poly1 first polynomial of the addition\r\n * @param poly2 second polynomial of the addition\r\n * @param pol  the resultant polynomial\r\n */</span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">poly_add</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> term **pol, <span class=\"hljs-keyword\">struct</span> term *poly1, <span class=\"hljs-keyword\">struct</span> term *poly2)</span>\r\n{\r\n    <span class=\"hljs-comment\">// Creating a temporary linked list to store the resultant polynomial</span>\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">term</span> *<span class=\"hljs-title\">temp</span> =</span> (<span class=\"hljs-keyword\">struct</span> term *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> term));\r\n    temp-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n    *pol =\r\n        temp;  <span class=\"hljs-comment\">//*pol always points to the 1st node of the resultant polynomial</span>\r\n\r\n    <span class=\"hljs-comment\">// Comparing the powers of the nodes of both the polynomials</span>\r\n    <span class=\"hljs-comment\">// until one gets exhausted</span>\r\n    <span class=\"hljs-keyword\">while</span> (poly1 &amp;&amp; poly2)\r\n    {\r\n        <span class=\"hljs-comment\">/* If the power of the first polynomial is greater than the power of the\r\n       second one place the power and coefficient of that node of the first\r\n       polynomial in temp and increase the pointer poly1\r\n       */</span>\r\n        <span class=\"hljs-keyword\">if</span> (poly1-&gt;<span class=\"hljs-built_in\">pow</span> &gt; poly2-&gt;<span class=\"hljs-built_in\">pow</span>)\r\n        {\r\n            temp-&gt;coef = poly1-&gt;coef;\r\n            temp-&gt;<span class=\"hljs-built_in\">pow</span> = poly1-&gt;<span class=\"hljs-built_in\">pow</span>;\r\n            poly1 = poly1-&gt;next;\r\n        }\r\n        <span class=\"hljs-comment\">/* If the power of the second polynomial is greater than the power of\r\n          the first one place the power and coefficient of that node of the\r\n          second polynomial in temp and increase the pointer poly2\r\n        */</span>\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (poly1-&gt;<span class=\"hljs-built_in\">pow</span> &lt; poly2-&gt;<span class=\"hljs-built_in\">pow</span>)\r\n        {\r\n            temp-&gt;coef = poly2-&gt;coef;\r\n            temp-&gt;<span class=\"hljs-built_in\">pow</span> = poly2-&gt;<span class=\"hljs-built_in\">pow</span>;\r\n            poly2 = poly2-&gt;next;\r\n        }\r\n        <span class=\"hljs-comment\">/* If both of them have same power then sum the coefficients\r\n          place both the summed coefficient and the power in temp\r\n          increase both the pointers poly1 and poly2\r\n        */</span>\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            temp-&gt;coef = poly1-&gt;coef + poly2-&gt;coef;\r\n            temp-&gt;<span class=\"hljs-built_in\">pow</span> = poly1-&gt;<span class=\"hljs-built_in\">pow</span>;\r\n            poly1 = poly1-&gt;next;\r\n            poly2 = poly2-&gt;next;\r\n        }\r\n        <span class=\"hljs-comment\">/* If none of the polynomials are exhausted\r\n         dynamically create a node in temp\r\n         */</span>\r\n        <span class=\"hljs-keyword\">if</span> (poly1 &amp;&amp; poly2)\r\n        {\r\n            temp-&gt;next = (<span class=\"hljs-keyword\">struct</span> term *)<span class=\"hljs-built_in\">malloc</span>(\r\n                <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> term));  <span class=\"hljs-comment\">// Dynamic node creation</span>\r\n            temp = temp-&gt;next;         <span class=\"hljs-comment\">// Increase the pointer temp</span>\r\n            temp-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">/* If one of the polynomials is exhausted\r\n    place the rest of the other polynomial as it is in temp\r\n    by creating nodes dynamically\r\n    */</span>\r\n    <span class=\"hljs-keyword\">while</span> (poly1 || poly2)\r\n    {\r\n        temp-&gt;next = (<span class=\"hljs-keyword\">struct</span> term *)<span class=\"hljs-built_in\">malloc</span>(\r\n            <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> term));  <span class=\"hljs-comment\">// Dynamic node creation</span>\r\n        temp = temp-&gt;next;         <span class=\"hljs-comment\">// Increasing the pointer</span>\r\n        temp-&gt;next = <span class=\"hljs-literal\">NULL</span>;\r\n\r\n        <span class=\"hljs-comment\">/* If poly1 is not exhausted\r\n        place rest of that polynomial in temp\r\n        */</span>\r\n        <span class=\"hljs-keyword\">if</span> (poly1)\r\n        {\r\n            temp-&gt;coef = poly1-&gt;coef;\r\n            temp-&gt;<span class=\"hljs-built_in\">pow</span> = poly1-&gt;<span class=\"hljs-built_in\">pow</span>;\r\n            poly1 = poly1-&gt;next;\r\n        }\r\n        <span class=\"hljs-comment\">/* If poly2 is not exhausted\r\n       place rest of that polynomial in temp\r\n       */</span>\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (poly2)\r\n        {\r\n            temp-&gt;coef = poly2-&gt;coef;\r\n            temp-&gt;<span class=\"hljs-built_in\">pow</span> = poly2-&gt;<span class=\"hljs-built_in\">pow</span>;\r\n            poly2 = poly2-&gt;next;\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * The function will display the polynomial\r\n * @param poly first term of the polynomial to be displayed\r\n * @returns none\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display_polynomial</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> term *poly)</span>\r\n{\r\n    <span class=\"hljs-keyword\">while</span> (poly != <span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d x^%d&quot;</span>, poly-&gt;coef, poly-&gt;<span class=\"hljs-built_in\">pow</span>);\r\n        poly = poly-&gt;next;\r\n        <span class=\"hljs-keyword\">if</span> (poly != <span class=\"hljs-literal\">NULL</span>)\r\n        {\r\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; + &quot;</span>);\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function 1\r\n *\r\n * @details\r\n * Polynomial 1 is 5 x^2 + 3 x^1 + 2 x^0\r\n * Polynomial 2 is 7 x^3 + 9 x^1 + 10 x^0\r\n * Resultant polynomial is 7 x^3 + 5 x^2 + 12 x^1 + 12 x^0\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> term *poly1, <span class=\"hljs-keyword\">struct</span> term *poly2, <span class=\"hljs-keyword\">struct</span> term *poly3)</span>\r\n{\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n----Test 1----\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nFirst Polynomial:\\n&quot;</span>);  <span class=\"hljs-comment\">// Defining the 1st polynomial</span>\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>);\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>);\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>);\r\n    display_polynomial(poly1);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSecond Polynomial:\\n&quot;</span>);  <span class=\"hljs-comment\">// Defining the 2nd polynomial</span>\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>);\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>);\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>);\r\n    display_polynomial(poly2);\r\n\r\n    poly_add(&amp;poly3, poly1, poly2);  <span class=\"hljs-comment\">// Adding the two polynomials</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nResultant polynomial:\\n&quot;</span>);\r\n    display_polynomial(poly3);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n\r\n    <span class=\"hljs-comment\">// Frees memory space</span>\r\n    free_poly(poly1);\r\n    free_poly(poly2);\r\n    free_poly(poly3);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function 2\r\n *\r\n * @details\r\n * Polynomial 1 is 3 x^5 + 1 x^4 + 2 x^3 + -2 x^1 + 5 x^0\r\n * Polynomial 2 is 2 x^5 + 3 x^3 + 7 x^1 + 2 x^0\r\n * Resultant polynomial is 5 x^5 + 1 x^4 + 5 x^3 + 5 x^1 + 7 x^0\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> term *poly1, <span class=\"hljs-keyword\">struct</span> term *poly2, <span class=\"hljs-keyword\">struct</span> term *poly3)</span>\r\n{\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n----Test 2----\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nFirst Polynomial:\\n&quot;</span>);  <span class=\"hljs-comment\">// Defining the 1st polynomial</span>\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>);\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">1</span>);\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>);\r\n\r\n    display_polynomial(poly1);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSecond Polynomial:\\n&quot;</span>);  <span class=\"hljs-comment\">// Defining the 2nd polynomial</span>\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>);\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>);\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>);\r\n\r\n    display_polynomial(poly2);\r\n\r\n    poly_add(&amp;poly3, poly1, poly2);  <span class=\"hljs-comment\">// Adding the two polynomials</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nResultant polynomial:\\n&quot;</span>);\r\n    display_polynomial(poly3);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n\r\n    <span class=\"hljs-comment\">// Frees memory space</span>\r\n    free_poly(poly1);\r\n    free_poly(poly2);\r\n    free_poly(poly3);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function 3\r\n *\r\n * @details\r\n * Polynomial 1 is -12 x^0 + 8 x^1 + 4 x^3\r\n * Polynomial 2 is 5 x^0 + -13 x^1 + 3 x^3\r\n * Resultant polynomial is -7 x^0 + -5 x^1 + 7 x^3\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test3</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> term *poly1, <span class=\"hljs-keyword\">struct</span> term *poly2, <span class=\"hljs-keyword\">struct</span> term *poly3)</span>\r\n{\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n----Test 3----\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nFirst Polynomial:\\n&quot;</span>);  <span class=\"hljs-comment\">// Defining the 1st polynomial</span>\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">-12</span>, <span class=\"hljs-number\">0</span>);\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>);\r\n    create_polynomial(&amp;poly1, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>);\r\n\r\n    display_polynomial(poly1);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSecond Polynomial:\\n&quot;</span>);  <span class=\"hljs-comment\">// Defining the 2nd polynomial</span>\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>);\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">-13</span>, <span class=\"hljs-number\">1</span>);\r\n    create_polynomial(&amp;poly2, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>);\r\n\r\n    display_polynomial(poly2);\r\n\r\n    poly_add(&amp;poly3, poly1, poly2);  <span class=\"hljs-comment\">// Adding the two polynomials</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nResultant polynomial:\\n&quot;</span>);\r\n    display_polynomial(poly3);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n\r\n    <span class=\"hljs-comment\">// Frees memory space</span>\r\n    free_poly(poly1);\r\n    free_poly(poly2);\r\n    free_poly(poly3);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\r\n{\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">term</span> *<span class=\"hljs-title\">poly1</span> =</span> <span class=\"hljs-literal\">NULL</span>, *poly2 = <span class=\"hljs-literal\">NULL</span>, *poly3 = <span class=\"hljs-literal\">NULL</span>;\r\n    test1(poly1, poly2, poly3);\r\n    test2(poly1, poly2, poly3);\r\n    test3(poly1, poly2, poly3);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}