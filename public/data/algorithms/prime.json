{
  "slug": "prime",
  "name": "Prime",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc\\prime.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc\\prime.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Program to identify if a number is [prime\r\n * number](https://en.wikipedia.org/wiki/Prime_number) or not\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Check if a given number is prime number or not\r\n * @param x number to check\r\n * @return `true` if given number is prime number, otherwise `false`\r\n */</span>\r\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">isPrime</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">2</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">2</span> || x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-type\">double</span> squareRoot = <span class=\"hljs-built_in\">sqrt</span>(x);\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">3</span>; i &lt;= squareRoot; i += <span class=\"hljs-number\">2</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (x % i == <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test function\r\n * @return void\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-comment\">/* all the prime numbers less than 100 */</span>\r\n    <span class=\"hljs-type\">int</span> primers[] = {<span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">3</span>,  <span class=\"hljs-number\">5</span>,  <span class=\"hljs-number\">7</span>,  <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">41</span>,\r\n                     <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">53</span>, <span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">71</span>, <span class=\"hljs-number\">73</span>, <span class=\"hljs-number\">79</span>, <span class=\"hljs-number\">83</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">97</span>};\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>, size = <span class=\"hljs-keyword\">sizeof</span>(primers) / <span class=\"hljs-keyword\">sizeof</span>(primers[<span class=\"hljs-number\">0</span>]); i &lt; size;\r\n         ++i)\r\n    {\r\n        assert(isPrime(primers[i]));\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* Example Non-prime numbers */</span>\r\n    <span class=\"hljs-type\">int</span> NonPrimers[] = {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>};\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>, size = <span class=\"hljs-keyword\">sizeof</span>(NonPrimers) / <span class=\"hljs-keyword\">sizeof</span>(NonPrimers[<span class=\"hljs-number\">0</span>]);\r\n         i &lt; size; ++i)\r\n    {\r\n        assert(!isPrime(NonPrimers[i]));\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Driver Code\r\n * @return None\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    test();\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Math\\Prime.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Math\\Prime.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Math\r\n\r\n<span class=\"hljs-keyword\">module</span> Prime <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-comment\">/// Check if a number is prime. Time complexity: O(√n)</span>\r\n    <span class=\"hljs-keyword\">let</span> isPrime n <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">if</span> n <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">then</span>\r\n            <span class=\"hljs-literal\">false</span>\r\n        <span class=\"hljs-keyword\">elif</span> n <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">then</span>\r\n            <span class=\"hljs-literal\">true</span>\r\n        <span class=\"hljs-keyword\">elif</span> n <span class=\"hljs-operator\">%</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\r\n            <span class=\"hljs-literal\">false</span>\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-keyword\">seq</span> {\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>\r\n\r\n                <span class=\"hljs-keyword\">while</span> i <span class=\"hljs-operator\">*</span> i <span class=\"hljs-operator\">&lt;=</span> n <span class=\"hljs-keyword\">do</span>\r\n                    <span class=\"hljs-keyword\">yield</span> i\r\n                    i <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">2</span>\r\n            }\r\n            <span class=\"hljs-operator\">|&gt;</span> Seq.forall ((<span class=\"hljs-operator\">%</span>) n <span class=\"hljs-operator\">&gt;&gt;</span> (<span class=\"hljs-operator\">&lt;&gt;</span>) <span class=\"hljs-number\">0</span>)\r\n"
    },
    "r": {
      "dir": "Mathematics\\Prime.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Mathematics\\Prime.R",
      "code": "<span class=\"hljs-comment\"># Prime Number Checking in R</span>\r\nisPrime <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>number<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-punctuation\">(</span>number <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">|</span> number <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">3</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span>\r\n  <span class=\"hljs-punctuation\">}</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-punctuation\">(</span>number <span class=\"hljs-operator\">%%</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">|</span> number <span class=\"hljs-operator\">%%</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\r\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span>\r\n  <span class=\"hljs-punctuation\">}</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-punctuation\">{</span>\r\n    k <span class=\"hljs-operator\">&lt;-</span> 1\r\n    <span class=\"hljs-keyword\">while</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">6</span> <span class=\"hljs-operator\">*</span> k <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-built_in\">sqrt</span><span class=\"hljs-punctuation\">(</span>number<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\r\n      <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>number <span class=\"hljs-operator\">%%</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">6</span> <span class=\"hljs-operator\">*</span> k <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span>\r\n      <span class=\"hljs-punctuation\">}</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>number <span class=\"hljs-operator\">%%</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">6</span> <span class=\"hljs-operator\">*</span> k <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\r\n        <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span>\r\n      <span class=\"hljs-punctuation\">}</span>\r\n      k <span class=\"hljs-operator\">&lt;-</span> k <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-punctuation\">}</span>\r\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span>\r\n  <span class=\"hljs-punctuation\">}</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n\r\nisPrime<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span>\r\nisPrime<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">5</span><span class=\"hljs-punctuation\">)</span>\r\nisPrime<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "i1e0",
      "email": "96235137+i1e0@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erez Shomron",
      "email": "48328872+eshom@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Alex Garland",
      "email": "alex@numinar.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}