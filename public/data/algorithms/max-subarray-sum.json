{
  "slug": "max-subarray-sum",
  "name": "Max Subarray Sum",
  "categories": [
    "divideandconquer"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "divide_and_conquer\\max_subarray_sum.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/divide_and_conquer\\max_subarray_sum.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nGiven a array of length n, max_subarray_sum() finds\r\nthe maximum of sum of contiguous sub-array using divide and conquer method.\r\n\r\nTime complexity : O(n log n)\r\n\r\nRef : INTRODUCTION TO ALGORITHMS THIRD EDITION\r\n(section : 4, sub-section : 4.1, page : 70)\r\n\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">max_sum_from_start</span>(<span class=\"hljs-params\">array</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;This function finds the maximum contiguous sum of array from 0 index\r\n\r\n    Parameters :\r\n    array (list[int]) : given array\r\n\r\n    Returns :\r\n    max_sum (int) : maximum contiguous sum of array from 0 index\r\n\r\n    &quot;&quot;&quot;</span>\r\n    array_sum = <span class=\"hljs-number\">0</span>\r\n    max_sum = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;-inf&quot;</span>)\r\n    <span class=\"hljs-keyword\">for</span> num <span class=\"hljs-keyword\">in</span> array:\r\n        array_sum += num\r\n        <span class=\"hljs-keyword\">if</span> array_sum &gt; max_sum:\r\n            max_sum = array_sum\r\n    <span class=\"hljs-keyword\">return</span> max_sum\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">max_cross_array_sum</span>(<span class=\"hljs-params\">array, left, mid, right</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;This function finds the maximum contiguous sum of left and right arrays\r\n\r\n    Parameters :\r\n    array, left, mid, right (list[int], int, int, int)\r\n\r\n    Returns :\r\n    (int) :  maximum of sum of contiguous sum of left and right arrays\r\n\r\n    &quot;&quot;&quot;</span>\r\n\r\n    max_sum_of_left = max_sum_from_start(array[left : mid + <span class=\"hljs-number\">1</span>][::-<span class=\"hljs-number\">1</span>])\r\n    max_sum_of_right = max_sum_from_start(array[mid + <span class=\"hljs-number\">1</span> : right + <span class=\"hljs-number\">1</span>])\r\n    <span class=\"hljs-keyword\">return</span> max_sum_of_left + max_sum_of_right\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">max_subarray_sum</span>(<span class=\"hljs-params\">array, left, right</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Maximum contiguous sub-array sum, using divide and conquer method\r\n\r\n    Parameters :\r\n    array, left, right (list[int], int, int) :\r\n    given array, current left index and current right index\r\n\r\n    Returns :\r\n    int :  maximum of sum of contiguous sub-array\r\n\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># base case: array has only one element</span>\r\n    <span class=\"hljs-keyword\">if</span> left == right:\r\n        <span class=\"hljs-keyword\">return</span> array[right]\r\n\r\n    <span class=\"hljs-comment\"># Recursion</span>\r\n    mid = (left + right) // <span class=\"hljs-number\">2</span>\r\n    left_half_sum = max_subarray_sum(array, left, mid)\r\n    right_half_sum = max_subarray_sum(array, mid + <span class=\"hljs-number\">1</span>, right)\r\n    cross_sum = max_cross_array_sum(array, left, mid, right)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>(left_half_sum, right_half_sum, cross_sum)\r\n\r\n\r\narray = [-<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, -<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">6</span>]\r\narray_length = <span class=\"hljs-built_in\">len</span>(array)\r\n<span class=\"hljs-built_in\">print</span>(\r\n    <span class=\"hljs-string\">&quot;Maximum sum of contiguous subarray:&quot;</span>, max_subarray_sum(array, <span class=\"hljs-number\">0</span>, array_length - <span class=\"hljs-number\">1</span>)\r\n)\r\n"
    },
    "go": {
      "dir": "other\\maxsubarraysum\\maxsubarraysum.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/other\\maxsubarraysum\\maxsubarraysum.go",
      "code": "<span class=\"hljs-comment\">/* O(n) solution, for calculating\r\nmaximum contiguous sum in the given array. */</span>\r\n\r\n<span class=\"hljs-comment\">// Package maxsubarraysum is a package containing a solution to a common</span>\r\n<span class=\"hljs-comment\">// problem of finding max contiguous sum within a array of ints.</span>\r\n<span class=\"hljs-keyword\">package</span> maxsubarraysum\r\n\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/max&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-comment\">// MaxSubarraySum returns the maximum subarray sum</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MaxSubarraySum</span><span class=\"hljs-params\">(array []<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\t<span class=\"hljs-keyword\">var</span> currentMax <span class=\"hljs-type\">int</span>\r\n\t<span class=\"hljs-keyword\">var</span> maxTillNow <span class=\"hljs-type\">int</span>\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(array) != <span class=\"hljs-number\">0</span> {\r\n\t\tcurrentMax = array[<span class=\"hljs-number\">0</span>]\r\n\t\tmaxTillNow = array[<span class=\"hljs-number\">0</span>]\r\n\t}\r\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> array {\r\n\t\tcurrentMax = max.Int(v, currentMax+v)\r\n\t\tmaxTillNow = max.Int(maxTillNow, currentMax)\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> maxTillNow\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "62670517+brayo-pip@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "dharni0607",
      "email": "dharanidevi.a16@iiits.in",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Dharni0607",
      "email": "30770547+Dharni0607@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}