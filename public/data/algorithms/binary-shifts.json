{
  "slug": "binary-shifts",
  "name": "Binary Shifts",
  "categories": [
    "bitmanipulation"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "bit_manipulation\\binary_shifts.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/bit_manipulation\\binary_shifts.py",
      "code": "<span class=\"hljs-comment\"># Information on binary shifts:</span>\r\n<span class=\"hljs-comment\"># https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types</span>\r\n<span class=\"hljs-comment\"># https://www.interviewcake.com/concept/java/bit-shift</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">logical_left_shift</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span>, shift_amount: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Take in 2 positive integers.\r\n    &#x27;number&#x27; is the integer to be logically left shifted &#x27;shift_amount&#x27; times.\r\n    i.e. (number &lt;&lt; shift_amount)\r\n    Return the shifted binary representation.\r\n\r\n    &gt;&gt;&gt; logical_left_shift(0, 1)\r\n    &#x27;0b00&#x27;\r\n    &gt;&gt;&gt; logical_left_shift(1, 1)\r\n    &#x27;0b10&#x27;\r\n    &gt;&gt;&gt; logical_left_shift(1, 5)\r\n    &#x27;0b100000&#x27;\r\n    &gt;&gt;&gt; logical_left_shift(17, 2)\r\n    &#x27;0b1000100&#x27;\r\n    &gt;&gt;&gt; logical_left_shift(1983, 4)\r\n    &#x27;0b111101111110000&#x27;\r\n    &gt;&gt;&gt; logical_left_shift(1, -1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: both inputs must be positive integers\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> number &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> shift_amount &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;both inputs must be positive integers&quot;</span>)\r\n\r\n    binary_number = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">bin</span>(number))\r\n    binary_number += <span class=\"hljs-string\">&quot;0&quot;</span> * shift_amount\r\n    <span class=\"hljs-keyword\">return</span> binary_number\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">logical_right_shift</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span>, shift_amount: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Take in positive 2 integers.\r\n    &#x27;number&#x27; is the integer to be logically right shifted &#x27;shift_amount&#x27; times.\r\n    i.e. (number &gt;&gt;&gt; shift_amount)\r\n    Return the shifted binary representation.\r\n\r\n    &gt;&gt;&gt; logical_right_shift(0, 1)\r\n    &#x27;0b0&#x27;\r\n    &gt;&gt;&gt; logical_right_shift(1, 1)\r\n    &#x27;0b0&#x27;\r\n    &gt;&gt;&gt; logical_right_shift(1, 5)\r\n    &#x27;0b0&#x27;\r\n    &gt;&gt;&gt; logical_right_shift(17, 2)\r\n    &#x27;0b100&#x27;\r\n    &gt;&gt;&gt; logical_right_shift(1983, 4)\r\n    &#x27;0b1111011&#x27;\r\n    &gt;&gt;&gt; logical_right_shift(1, -1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: both inputs must be positive integers\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> number &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> shift_amount &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;both inputs must be positive integers&quot;</span>)\r\n\r\n    binary_number = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">bin</span>(number))[<span class=\"hljs-number\">2</span>:]\r\n    <span class=\"hljs-keyword\">if</span> shift_amount &gt;= <span class=\"hljs-built_in\">len</span>(binary_number):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0b0&quot;</span>\r\n    shifted_binary_number = binary_number[: <span class=\"hljs-built_in\">len</span>(binary_number) - shift_amount]\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0b&quot;</span> + shifted_binary_number\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">arithmetic_right_shift</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span>, shift_amount: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Take in 2 integers.\r\n    &#x27;number&#x27; is the integer to be arithmetically right shifted &#x27;shift_amount&#x27; times.\r\n    i.e. (number &gt;&gt; shift_amount)\r\n    Return the shifted binary representation.\r\n\r\n    &gt;&gt;&gt; arithmetic_right_shift(0, 1)\r\n    &#x27;0b00&#x27;\r\n    &gt;&gt;&gt; arithmetic_right_shift(1, 1)\r\n    &#x27;0b00&#x27;\r\n    &gt;&gt;&gt; arithmetic_right_shift(-1, 1)\r\n    &#x27;0b11&#x27;\r\n    &gt;&gt;&gt; arithmetic_right_shift(17, 2)\r\n    &#x27;0b000100&#x27;\r\n    &gt;&gt;&gt; arithmetic_right_shift(-17, 2)\r\n    &#x27;0b111011&#x27;\r\n    &gt;&gt;&gt; arithmetic_right_shift(-1983, 4)\r\n    &#x27;0b111110000100&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> number &gt;= <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># Get binary representation of positive number</span>\r\n        binary_number = <span class=\"hljs-string\">&quot;0&quot;</span> + <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">bin</span>(number)).strip(<span class=\"hljs-string\">&quot;-&quot;</span>)[<span class=\"hljs-number\">2</span>:]\r\n    <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># Get binary (2&#x27;s complement) representation of negative number</span>\r\n        binary_number_length = <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">bin</span>(number)[<span class=\"hljs-number\">3</span>:])  <span class=\"hljs-comment\"># Find 2&#x27;s complement of number</span>\r\n        binary_number = <span class=\"hljs-built_in\">bin</span>(<span class=\"hljs-built_in\">abs</span>(number) - (<span class=\"hljs-number\">1</span> &lt;&lt; binary_number_length))[<span class=\"hljs-number\">3</span>:]\r\n        binary_number = (\r\n            <span class=\"hljs-string\">&quot;1&quot;</span> + <span class=\"hljs-string\">&quot;0&quot;</span> * (binary_number_length - <span class=\"hljs-built_in\">len</span>(binary_number)) + binary_number\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">if</span> shift_amount &gt;= <span class=\"hljs-built_in\">len</span>(binary_number):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0b&quot;</span> + binary_number[<span class=\"hljs-number\">0</span>] * <span class=\"hljs-built_in\">len</span>(binary_number)\r\n    <span class=\"hljs-keyword\">return</span> (\r\n        <span class=\"hljs-string\">&quot;0b&quot;</span>\r\n        + binary_number[<span class=\"hljs-number\">0</span>] * shift_amount\r\n        + binary_number[: <span class=\"hljs-built_in\">len</span>(binary_number) - shift_amount]\r\n    )\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Elisha Hollander",
      "email": "just4now666666@gmail.com",
      "commits": 1
    },
    {
      "name": "Leyza",
      "email": "56138111+Leyza@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}