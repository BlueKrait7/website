{
  "slug": "lowest-base-palindrome",
  "name": "Lowest Base Palindrome",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\LowestBasePalindrome.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\LowestBasePalindrome.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.InputMismatchException;\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Class for finding the lowest base in which a given integer is a palindrome.\r\n * Includes auxiliary methods for converting between bases and reversing\r\n * strings.\r\n *\r\n * &lt;p&gt;\r\n * <span class=\"hljs-doctag\">NOTE:</span> There is potential for error, see note at line 63.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> RollandMichael\r\n * <span class=\"hljs-doctag\">@version</span> 2017.09.28\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LowestBasePalindrome</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\r\n            <span class=\"hljs-keyword\">try</span> {\r\n                System.out.print(<span class=\"hljs-string\">&quot;Enter number: &quot;</span>);\r\n                n = in.nextInt();\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            } <span class=\"hljs-keyword\">catch</span> (InputMismatchException e) {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Invalid input!&quot;</span>);\r\n                in.next();\r\n            }\r\n        }\r\n        System.out.println(n + <span class=\"hljs-string\">&quot; is a palindrome in base &quot;</span> + lowestBasePalindrome(n));\r\n        System.out.println(base2base(Integer.toString(n), <span class=\"hljs-number\">10</span>, lowestBasePalindrome(n)));\r\n        in.close();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Given a number in base 10, returns the lowest base in which the number is\r\n     * represented by a palindrome (read the same left-to-right and\r\n     * right-to-left).\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> num A number in base 10.\r\n     * <span class=\"hljs-doctag\">@return</span> The lowest base in which num is a palindrome.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lowestBasePalindrome</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num)</span> {\r\n        <span class=\"hljs-type\">int</span> base, num2 = num;\r\n        <span class=\"hljs-type\">int</span> digit;\r\n        <span class=\"hljs-type\">char</span> digitC;\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">foundBase</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">newNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">digits</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (!foundBase) {\r\n            <span class=\"hljs-comment\">// Try from bases 2 to num-1</span>\r\n            <span class=\"hljs-keyword\">for</span> (base = <span class=\"hljs-number\">2</span>; base &lt; num2; base++) {\r\n                newNum = <span class=\"hljs-string\">&quot;&quot;</span>;\r\n                <span class=\"hljs-keyword\">while</span> (num &gt; <span class=\"hljs-number\">0</span>) {\r\n                    <span class=\"hljs-comment\">// Obtain the first digit of n in the current base,</span>\r\n                    <span class=\"hljs-comment\">// which is equivalent to the integer remainder of (n/base).</span>\r\n                    <span class=\"hljs-comment\">// The next digit is obtained by dividing n by the base and</span>\r\n                    <span class=\"hljs-comment\">// continuing the process of getting the remainder. This is done</span>\r\n                    <span class=\"hljs-comment\">// until n is &lt;=0 and the number in the new base is obtained.</span>\r\n                    digit = (num % base);\r\n                    num /= base;\r\n                    <span class=\"hljs-comment\">// If the digit isn&#x27;t in the set of [0-9][A-Z] (beyond base 36), its character</span>\r\n                    <span class=\"hljs-comment\">// form is just its value in ASCII.</span>\r\n\r\n                    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> This may cause problems, as the capital letters are ASCII values</span>\r\n                    <span class=\"hljs-comment\">// 65-90. It may cause false positives when one digit is, for instance 10 and assigned</span>\r\n                    <span class=\"hljs-comment\">// &#x27;A&#x27; from the character array and the other is 65 and also assigned &#x27;A&#x27;.</span>\r\n                    <span class=\"hljs-comment\">// Regardless, the character is added to the representation of n</span>\r\n                    <span class=\"hljs-comment\">// in the current base.</span>\r\n                    <span class=\"hljs-keyword\">if</span> (digit &gt;= digits.length()) {\r\n                        digitC = (<span class=\"hljs-type\">char</span>) (digit);\r\n                        newNum += digitC;\r\n                        <span class=\"hljs-keyword\">continue</span>;\r\n                    }\r\n                    newNum += digits.charAt(digit);\r\n                }\r\n                <span class=\"hljs-comment\">// Num is assigned back its original value for the next iteration.</span>\r\n                num = num2;\r\n                <span class=\"hljs-comment\">// Auxiliary method reverses the number.</span>\r\n                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">reverse</span> <span class=\"hljs-operator\">=</span> reverse(newNum);\r\n                <span class=\"hljs-comment\">// If the number is read the same as its reverse, then it is a palindrome.</span>\r\n                <span class=\"hljs-comment\">// The current base is returned.</span>\r\n                <span class=\"hljs-keyword\">if</span> (reverse.equals(newNum)) {\r\n                    foundBase = <span class=\"hljs-literal\">true</span>;\r\n                    <span class=\"hljs-keyword\">return</span> base;\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">// If all else fails, n is always a palindrome in base n-1. (&quot;11&quot;)</span>\r\n        <span class=\"hljs-keyword\">return</span> num - <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">reverse</span><span class=\"hljs-params\">(String str)</span> {\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">reverse</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> str.length() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\r\n            reverse += str.charAt(i);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> reverse;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">base2base</span><span class=\"hljs-params\">(String n, <span class=\"hljs-type\">int</span> b1, <span class=\"hljs-type\">int</span> b2)</span> {\r\n        <span class=\"hljs-comment\">// Declare variables: decimal value of n,</span>\r\n        <span class=\"hljs-comment\">// character of base b1, character of base b2,</span>\r\n        <span class=\"hljs-comment\">// and the string that will be returned.</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">decimalValue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, charB2;\r\n        <span class=\"hljs-type\">char</span> charB1;\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">output</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\r\n        <span class=\"hljs-comment\">// Go through every character of n</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n.length(); i++) {\r\n            <span class=\"hljs-comment\">// store the character in charB1</span>\r\n            charB1 = n.charAt(i);\r\n            <span class=\"hljs-comment\">// if it is a non-number, convert it to a decimal value &gt;9 and store it in charB2</span>\r\n            <span class=\"hljs-keyword\">if</span> (charB1 &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; charB1 &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>) {\r\n                charB2 = <span class=\"hljs-number\">10</span> + (charB1 - <span class=\"hljs-string\">&#x27;A&#x27;</span>);\r\n            } <span class=\"hljs-comment\">// Else, store the integer value in charB2</span>\r\n            <span class=\"hljs-keyword\">else</span> {\r\n                charB2 = charB1 - <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n            }\r\n            <span class=\"hljs-comment\">// Convert the digit to decimal and add it to the</span>\r\n            <span class=\"hljs-comment\">// decimalValue of n</span>\r\n            decimalValue = decimalValue * b1 + charB2;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Converting the decimal value to base b2:</span>\r\n        <span class=\"hljs-comment\">// A number is converted from decimal to another base</span>\r\n        <span class=\"hljs-comment\">// by continuously dividing by the base and recording</span>\r\n        <span class=\"hljs-comment\">// the remainder until the quotient is zero. The number in the</span>\r\n        <span class=\"hljs-comment\">// new base is the remainders, with the last remainder</span>\r\n        <span class=\"hljs-comment\">// being the left-most digit.</span>\r\n        <span class=\"hljs-comment\">// While the quotient is NOT zero:</span>\r\n        <span class=\"hljs-keyword\">while</span> (decimalValue != <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-comment\">// If the remainder is a digit &lt; 10, simply add it to</span>\r\n            <span class=\"hljs-comment\">// the left side of the new number.</span>\r\n            <span class=\"hljs-keyword\">if</span> (decimalValue % b2 &lt; <span class=\"hljs-number\">10</span>) {\r\n                output = Integer.toString(decimalValue % b2) + output;\r\n            } <span class=\"hljs-comment\">// If the remainder is &gt;= 10, add a character with the</span>\r\n            <span class=\"hljs-comment\">// corresponding value to the new number. (A = 10, B = 11, C = 12, ...)</span>\r\n            <span class=\"hljs-keyword\">else</span> {\r\n                output = (<span class=\"hljs-type\">char</span>) ((decimalValue % b2) + <span class=\"hljs-number\">55</span>) + output;\r\n            }\r\n            <span class=\"hljs-comment\">// Divide by the new base again</span>\r\n            decimalValue /= b2;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> output;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}