{
  "slug": "decimal-to-binary",
  "name": "Decimal to Binary",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "conversions\\decimal_to_binary.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/conversions\\decimal_to_binary.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Convert a Decimal Number to a Binary Number.&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decimal_to_binary</span>(<span class=\"hljs-params\">num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Convert an Integer Decimal Number to a Binary Number as str.\r\n    &gt;&gt;&gt; decimal_to_binary(0)\r\n    &#x27;0b0&#x27;\r\n    &gt;&gt;&gt; decimal_to_binary(2)\r\n    &#x27;0b10&#x27;\r\n    &gt;&gt;&gt; decimal_to_binary(7)\r\n    &#x27;0b111&#x27;\r\n    &gt;&gt;&gt; decimal_to_binary(35)\r\n    &#x27;0b100011&#x27;\r\n    &gt;&gt;&gt; # negatives work too\r\n    &gt;&gt;&gt; decimal_to_binary(-2)\r\n    &#x27;-0b10&#x27;\r\n    &gt;&gt;&gt; # other floats will error\r\n    &gt;&gt;&gt; decimal_to_binary(16.16) # doctest: +ELLIPSIS\r\n    Traceback (most recent call last):\r\n    ...\r\n    TypeError: &#x27;float&#x27; object cannot be interpreted as an integer\r\n    &gt;&gt;&gt; # strings will error as well\r\n    &gt;&gt;&gt; decimal_to_binary(&#x27;0xfffff&#x27;) # doctest: +ELLIPSIS\r\n    Traceback (most recent call last):\r\n    ...\r\n    TypeError: &#x27;str&#x27; object cannot be interpreted as an integer\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(num, <span class=\"hljs-built_in\">float</span>):\r\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;&#x27;float&#x27; object cannot be interpreted as an integer&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(num, <span class=\"hljs-built_in\">str</span>):\r\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;&#x27;str&#x27; object cannot be interpreted as an integer&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">if</span> num == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0b0&quot;</span>\r\n\r\n    negative = <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> num &lt; <span class=\"hljs-number\">0</span>:\r\n        negative = <span class=\"hljs-literal\">True</span>\r\n        num = -num\r\n\r\n    binary: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>] = []\r\n    <span class=\"hljs-keyword\">while</span> num &gt; <span class=\"hljs-number\">0</span>:\r\n        binary.insert(<span class=\"hljs-number\">0</span>, num % <span class=\"hljs-number\">2</span>)\r\n        num &gt;&gt;= <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> negative:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-0b&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(e) <span class=\"hljs-keyword\">for</span> e <span class=\"hljs-keyword\">in</span> binary)\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0b&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(e) <span class=\"hljs-keyword\">for</span> e <span class=\"hljs-keyword\">in</span> binary)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Conversions\\DecimalToBinary.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Conversions\\DecimalToBinary.js",
      "code": "<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">decimalToBinary</span> (num) {\r\n  <span class=\"hljs-keyword\">const</span> bin = []\r\n  <span class=\"hljs-keyword\">while</span> (num &gt; <span class=\"hljs-number\">0</span>) {\r\n    bin.<span class=\"hljs-title function_\">unshift</span>(num % <span class=\"hljs-number\">2</span>)\r\n    num &gt;&gt;= <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// basically /= 2 without remainder if any</span>\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> bin.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { decimalToBinary }\r\n\r\n<span class=\"hljs-comment\">// &gt; decimalToBinary(2)</span>\r\n<span class=\"hljs-comment\">// &#x27;10&#x27;</span>\r\n\r\n<span class=\"hljs-comment\">// &gt; decimalToBinary(7)</span>\r\n<span class=\"hljs-comment\">// &#x27;111&#x27;</span>\r\n\r\n<span class=\"hljs-comment\">// &gt; decimalToBinary(35)</span>\r\n<span class=\"hljs-comment\">// &#x27;100011&#x27;</span>\r\n"
    },
    "c-plus-plus": {
      "dir": "others\\decimal_to_binary.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others\\decimal_to_binary.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Function to convert decimal number to binary representation\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This method converts the bit representation and stores it as a decimal\r\n * number.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">method1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> remainder, binary = <span class=\"hljs-number\">0</span>, var = <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-keyword\">do</span> {\r\n        remainder = number % <span class=\"hljs-number\">2</span>;\r\n        number = number / <span class=\"hljs-number\">2</span>;\r\n        binary = binary + (remainder * var);\r\n        var = var * <span class=\"hljs-number\">10</span>;\r\n    } <span class=\"hljs-keyword\">while</span> (number &gt; <span class=\"hljs-number\">0</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Method 1 : &quot;</span> &lt;&lt; binary &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This method stores each bit value from LSB to MSB and then prints them back\r\n * from MSB to LSB\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">method2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> </span>{\r\n    <span class=\"hljs-type\">int</span> num_bits = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">char</span> bit_string[<span class=\"hljs-number\">50</span>];\r\n\r\n    <span class=\"hljs-keyword\">do</span> {\r\n        <span class=\"hljs-type\">bool</span> bit = number &amp; <span class=\"hljs-number\">0x01</span>;  <span class=\"hljs-comment\">// get last bit</span>\r\n        <span class=\"hljs-keyword\">if</span> (bit)\r\n            bit_string[num_bits++] = <span class=\"hljs-string\">&#x27;1&#x27;</span>;\r\n        <span class=\"hljs-keyword\">else</span>\r\n            bit_string[num_bits++] = <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n        number &gt;&gt;= <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// right shift bit 1 bit</span>\r\n    } <span class=\"hljs-keyword\">while</span> (number &gt; <span class=\"hljs-number\">0</span>);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Method 2 : &quot;</span>;\r\n    <span class=\"hljs-keyword\">while</span> (num_bits &gt;= <span class=\"hljs-number\">0</span>)\r\n        std::cout &lt;&lt; bit_string[num_bits--];  <span class=\"hljs-comment\">// print from MSB to LSB</span>\r\n    std::cout &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> number;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter a number:&quot;</span>;\r\n    std::cin &gt;&gt; number;\r\n\r\n    <span class=\"hljs-built_in\">method1</span>(number);\r\n    <span class=\"hljs-built_in\">method2</span>(number);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\conversions\\DecimalToBinary.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\conversions\\DecimalToBinary.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.conversions;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This class converts a Decimal number to a Binary number\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DecimalToBinary</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Main Method\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> args Command Line Arguments\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\r\n        conventionalConversion();\r\n        bitwiseConversion();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method converts a decimal number to a binary number using a\r\n     * conventional algorithm.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">conventionalConversion</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">int</span> n, b = <span class=\"hljs-number\">0</span>, c = <span class=\"hljs-number\">0</span>, d;\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        System.out.printf(<span class=\"hljs-string\">&quot;Conventional conversion.%n Enter the decimal number: &quot;</span>);\r\n        n = input.nextInt();\r\n        <span class=\"hljs-keyword\">while</span> (n != <span class=\"hljs-number\">0</span>) {\r\n            d = n % <span class=\"hljs-number\">2</span>;\r\n            b = b + d * (<span class=\"hljs-type\">int</span>) Math.pow(<span class=\"hljs-number\">10</span>, c++);\r\n            n /= <span class=\"hljs-number\">2</span>;\r\n        } <span class=\"hljs-comment\">// converting decimal to binary</span>\r\n        System.out.println(<span class=\"hljs-string\">&quot;\\tBinary number: &quot;</span> + b);\r\n        input.close();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * This method converts a decimal number to a binary number using a bitwise\r\n     * algorithm\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bitwiseConversion</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">int</span> n, b = <span class=\"hljs-number\">0</span>, c = <span class=\"hljs-number\">0</span>, d;\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        System.out.printf(<span class=\"hljs-string\">&quot;Bitwise conversion.%n Enter the decimal number: &quot;</span>);\r\n        n = input.nextInt();\r\n        <span class=\"hljs-keyword\">while</span> (n != <span class=\"hljs-number\">0</span>) {\r\n            d = (n &amp; <span class=\"hljs-number\">1</span>);\r\n            b += d * (<span class=\"hljs-type\">int</span>) Math.pow(<span class=\"hljs-number\">10</span>, c++);\r\n            n &gt;&gt;= <span class=\"hljs-number\">1</span>;\r\n        }\r\n        System.out.println(<span class=\"hljs-string\">&quot;\\tBinary number: &quot;</span> + b);\r\n        input.close();\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "conversions\\decimal_to_binary.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions\\decimal_to_binary.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXBITS 100</span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-comment\">// input of the user</span>\r\n    <span class=\"hljs-type\">int</span> inputNumber;\r\n\r\n    <span class=\"hljs-comment\">// for the remainder</span>\r\n    <span class=\"hljs-type\">int</span> re;\r\n\r\n    <span class=\"hljs-comment\">// contains the bits 0/1</span>\r\n    <span class=\"hljs-type\">int</span> bits[MAXBITS];\r\n\r\n    <span class=\"hljs-comment\">// for the loops</span>\r\n    <span class=\"hljs-type\">int</span> j;\r\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t\\tConverter decimal --&gt; binary\\n\\n&quot;</span>);\r\n\r\n    <span class=\"hljs-comment\">// reads a decimal number from the user.</span>\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nenter a positive integer number: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;inputNumber);\r\n\r\n    <span class=\"hljs-comment\">// make sure the input number is a positive integer.</span>\r\n    <span class=\"hljs-keyword\">if</span> (inputNumber &lt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;only positive integers &gt;= 0\\n&quot;</span>);\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// actual processing</span>\r\n    <span class=\"hljs-keyword\">while</span> (inputNumber &gt; <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-comment\">// computes the remainder by modulo 2</span>\r\n        re = inputNumber % <span class=\"hljs-number\">2</span>;\r\n\r\n        <span class=\"hljs-comment\">// computes the quotient of division by 2</span>\r\n        inputNumber = inputNumber / <span class=\"hljs-number\">2</span>;\r\n\r\n        bits[i] = re;\r\n        i++;\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n the number in binary is: &quot;</span>);\r\n\r\n    <span class=\"hljs-comment\">// iterates backwards over all bits</span>\r\n    <span class=\"hljs-keyword\">for</span> (j = i - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span>; j--)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, bits[j]);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// for the case the input number is 0</span>\r\n    <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;0&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "go": {
      "dir": "conversion\\decimaltobinary.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/conversion\\decimaltobinary.go",
      "code": "<span class=\"hljs-comment\">/*\r\nAuthor: Motasim\r\nGitHub: https://github.com/motasimmakki\r\nDate: 14-Oct-2021\r\n*/</span>\r\n\r\n<span class=\"hljs-comment\">// This algorithm will convert any Decimal (+ve integer) number to Binary number.</span>\r\n<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Binary_number</span>\r\n<span class=\"hljs-comment\">// Function receives a integer as a Decimal number and returns the Binary number.</span>\r\n<span class=\"hljs-comment\">// Supported integer value range is 0 to 2^(31 -1).</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> conversion\r\n\r\n<span class=\"hljs-comment\">// Importing necessary package.</span>\r\n<span class=\"hljs-keyword\">import</span> (\r\n\t<span class=\"hljs-string\">&quot;errors&quot;</span>\r\n\t<span class=\"hljs-string\">&quot;strconv&quot;</span>\r\n)\r\n\r\n<span class=\"hljs-comment\">// Reverse() function that will take string,</span>\r\n<span class=\"hljs-comment\">// and returns the reverse of that string.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Reverse</span><span class=\"hljs-params\">(str <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> {\r\n\trStr := []<span class=\"hljs-type\">rune</span>(str)\r\n\t<span class=\"hljs-keyword\">for</span> i, j := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(rStr)<span class=\"hljs-number\">-1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(rStr)/<span class=\"hljs-number\">2</span>; i, j = i+<span class=\"hljs-number\">1</span>, j<span class=\"hljs-number\">-1</span> {\r\n\t\trStr[i], rStr[j] = rStr[j], rStr[i]\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(rStr)\r\n}\r\n\r\n<span class=\"hljs-comment\">// DecimalToBinary() function that will take Decimal number as int,</span>\r\n<span class=\"hljs-comment\">// and return it&#x27;s Binary equivalent as string.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">DecimalToBinary</span><span class=\"hljs-params\">(num <span class=\"hljs-type\">int</span>)</span></span> (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) {\r\n\t<span class=\"hljs-keyword\">if</span> num &lt; <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, errors.New(<span class=\"hljs-string\">&quot;integer must have +ve value&quot;</span>)\r\n\t}\r\n\t<span class=\"hljs-keyword\">if</span> num == <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0&quot;</span>, <span class=\"hljs-literal\">nil</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">var</span> result <span class=\"hljs-type\">string</span> = <span class=\"hljs-string\">&quot;&quot;</span>\r\n\t<span class=\"hljs-keyword\">for</span> num &gt; <span class=\"hljs-number\">0</span> {\r\n\t\tresult += strconv.Itoa(num &amp; <span class=\"hljs-number\">1</span>)\r\n\t\tnum &gt;&gt;= <span class=\"hljs-number\">1</span>\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> Reverse(result), <span class=\"hljs-literal\">nil</span>\r\n}\r\n"
    },
    "dart": {
      "dir": "conversions\\Decimal_To_Binary.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions\\Decimal_To_Binary.dart",
      "code": "<span class=\"hljs-comment\">//Author:Shawn</span>\r\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;dart:math&quot;</span> <span class=\"hljs-keyword\">show</span> pow;\r\n\r\n<span class=\"hljs-comment\">/*\r\n * This method converts a decimal number \r\n * to a binary number using a bitwise\r\n * algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">void</span> bitwiseConversion(<span class=\"hljs-keyword\">var</span> n) {\r\n  <span class=\"hljs-built_in\">int</span> b = <span class=\"hljs-number\">0</span>, c = <span class=\"hljs-number\">0</span>, d;\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Bitwise conversion.\\n&quot;</span>);\r\n  <span class=\"hljs-keyword\">while</span> (n != <span class=\"hljs-number\">0</span>) {\r\n    d = (n &amp; <span class=\"hljs-number\">1</span>);\r\n    b += d * (pow(<span class=\"hljs-number\">10</span>, c++).toInt());\r\n    n &gt;&gt;= <span class=\"hljs-number\">1</span>;\r\n  }\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\tBinary number: <span class=\"hljs-subst\">$b</span>&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">//Main method</span>\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  bitwiseConversion(<span class=\"hljs-number\">8</span>);\r\n}\r\n"
    },
    "ruby": {
      "dir": "maths\\decimal_to_binary.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths\\decimal_to_binary.rb",
      "code": "<span class=\"hljs-comment\"># Convert a given decimal number into binary.</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach 1: Iterative</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">decimal_to_binary</span><span class=\"hljs-params\">(n)</span></span>\r\n  bin = []\r\n\r\n  <span class=\"hljs-keyword\">until</span> n.zero?\r\n    bin &lt;&lt; n % <span class=\"hljs-number\">2</span>\r\n    n /= <span class=\"hljs-number\">2</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  bin.reverse.join\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs <span class=\"hljs-string\">&#x27;Binary value of 4 is &#x27;</span> + decimal_to_binary(<span class=\"hljs-number\">4</span>).to_s\r\n<span class=\"hljs-comment\"># Binary value of 4 is 100</span>\r\n\r\nputs <span class=\"hljs-string\">&#x27;Binary value of 31 is &#x27;</span> + decimal_to_binary(<span class=\"hljs-number\">31</span>).to_s\r\n<span class=\"hljs-comment\"># Binary value of 31 is 11111</span>\r\n\r\nputs <span class=\"hljs-string\">&#x27;Binary value of 64 is &#x27;</span> + decimal_to_binary(<span class=\"hljs-number\">64</span>).to_s\r\n<span class=\"hljs-comment\"># Binary value of 64 is 1000000</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach 2: Recursive</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">decimal_to_binary</span><span class=\"hljs-params\">(d)</span></span>\r\n  binary = (d % <span class=\"hljs-number\">2</span>).to_s\r\n\r\n  <span class=\"hljs-keyword\">return</span> binary <span class=\"hljs-keyword\">if</span> d == <span class=\"hljs-number\">0</span>\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>.to_s <span class=\"hljs-keyword\">if</span> d == <span class=\"hljs-number\">1</span>\r\n\r\n  decimal_to_binary(d / <span class=\"hljs-number\">2</span>).to_s + binary\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs <span class=\"hljs-string\">&#x27;Binary value of 4 is &#x27;</span> + decimal_to_binary(<span class=\"hljs-number\">4</span>).to_s\r\n<span class=\"hljs-comment\"># Binary value of 4 is 100</span>\r\n\r\nputs <span class=\"hljs-string\">&#x27;Binary value of 31 is &#x27;</span> + decimal_to_binary(<span class=\"hljs-number\">31</span>).to_s\r\n<span class=\"hljs-comment\"># Binary value of 31 is 11111</span>\r\n\r\nputs <span class=\"hljs-string\">&#x27;Binary value of 64 is &#x27;</span> + decimal_to_binary(<span class=\"hljs-number\">64</span>).to_s\r\n<span class=\"hljs-comment\"># Binary value of 64 is 1000000</span>\r\n"
    },
    "php": {
      "dir": "Conversions\\DecimalToBinary.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/Conversions\\DecimalToBinary.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Recursive function to convert a decimal number to binary\r\n * \r\n * <span class=\"hljs-doctag\">@param</span> int $dec number to convert\r\n * <span class=\"hljs-doctag\">@return</span> string\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">decToBin</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$dec</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$result</span> = <span class=\"hljs-string\">&quot;&quot;</span></span>)\r\n</span>{\r\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable\">$dec</span> == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$result</span>;\r\n\r\n    <span class=\"hljs-variable\">$result</span> = (<span class=\"hljs-keyword\">string</span>)(<span class=\"hljs-variable\">$dec</span> % <span class=\"hljs-number\">2</span>) . <span class=\"hljs-variable\">$result</span>;\r\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">int</span>)<span class=\"hljs-title function_ invoke__\">decToBin</span>(<span class=\"hljs-variable\">$dec</span> / <span class=\"hljs-number\">2</span>, <span class=\"hljs-variable\">$result</span>);\r\n}\r\n\r\n<span class=\"hljs-keyword\">print</span> <span class=\"hljs-title function_ invoke__\">decToBin</span>(<span class=\"hljs-number\">200</span>);\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Shivam Verma",
      "email": "50954641+sarcastic-verma@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "raklaptudirm@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Leonardo",
      "email": "lvenk26@gmail.com",
      "commits": 1
    },
    {
      "name": "Rupeshiya",
      "email": "31209617+Rupeshiya@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Arogon1",
      "email": "40372809+Arogon1@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Peterson Daronch de Bem",
      "email": "petersondaronch@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Hardik Aggarwal",
      "email": "b17086@students.iitmandi.ac.in",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Syed Waleed Hyder",
      "email": "syedwaleedhyder@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    },
    {
      "name": "Motasim",
      "email": "44056349+motasimmakki@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Andrew S Erwin",
      "email": "andrew@andrewerwin.com",
      "commits": 4
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}