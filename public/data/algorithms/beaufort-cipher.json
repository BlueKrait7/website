{
  "slug": "beaufort-cipher",
  "name": "Beaufort Cipher",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers\\beaufort_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers\\beaufort_cipher.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nAuthor: Mohit Radadiya\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> ascii_uppercase\r\n\r\ndict1 = {char: i <span class=\"hljs-keyword\">for</span> i, char <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(ascii_uppercase)}\r\ndict2 = {i: char <span class=\"hljs-keyword\">for</span> i, char <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(ascii_uppercase)}\r\n\r\n\r\n<span class=\"hljs-comment\"># This function generates the key in</span>\r\n<span class=\"hljs-comment\"># a cyclic manner until it&#x27;s length isn&#x27;t</span>\r\n<span class=\"hljs-comment\"># equal to the length of original text</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_key</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; generate_key(&quot;THE GERMAN ATTACK&quot;,&quot;SECRET&quot;)\r\n    &#x27;SECRETSECRETSECRE&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    x = <span class=\"hljs-built_in\">len</span>(message)\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n        <span class=\"hljs-keyword\">if</span> x == i:\r\n            i = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(key) == <span class=\"hljs-built_in\">len</span>(message):\r\n            <span class=\"hljs-keyword\">break</span>\r\n        key += key[i]\r\n        i += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> key\r\n\r\n\r\n<span class=\"hljs-comment\"># This function returns the encrypted text</span>\r\n<span class=\"hljs-comment\"># generated with the help of the key</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cipher_text</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">str</span>, key_new: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; cipher_text(&quot;THE GERMAN ATTACK&quot;,&quot;SECRETSECRETSECRE&quot;)\r\n    &#x27;BDC PAYUWL JPAIYI&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    cipher_text = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> message:\r\n        <span class=\"hljs-keyword\">if</span> letter == <span class=\"hljs-string\">&quot; &quot;</span>:\r\n            cipher_text += <span class=\"hljs-string\">&quot; &quot;</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            x = (dict1[letter] - dict1[key_new[i]]) % <span class=\"hljs-number\">26</span>\r\n            i += <span class=\"hljs-number\">1</span>\r\n            cipher_text += dict2[x]\r\n    <span class=\"hljs-keyword\">return</span> cipher_text\r\n\r\n\r\n<span class=\"hljs-comment\"># This function decrypts the encrypted text</span>\r\n<span class=\"hljs-comment\"># and returns the original text</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">original_text</span>(<span class=\"hljs-params\">cipher_text: <span class=\"hljs-built_in\">str</span>, key_new: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; original_text(&quot;BDC PAYUWL JPAIYI&quot;,&quot;SECRETSECRETSECRE&quot;)\r\n    &#x27;THE GERMAN ATTACK&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    or_txt = <span class=\"hljs-string\">&quot;&quot;</span>\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> cipher_text:\r\n        <span class=\"hljs-keyword\">if</span> letter == <span class=\"hljs-string\">&quot; &quot;</span>:\r\n            or_txt += <span class=\"hljs-string\">&quot; &quot;</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            x = (dict1[letter] + dict1[key_new[i]] + <span class=\"hljs-number\">26</span>) % <span class=\"hljs-number\">26</span>\r\n            i += <span class=\"hljs-number\">1</span>\r\n            or_txt += dict2[x]\r\n    <span class=\"hljs-keyword\">return</span> or_txt\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    message = <span class=\"hljs-string\">&quot;THE GERMAN ATTACK&quot;</span>\r\n    key = <span class=\"hljs-string\">&quot;SECRET&quot;</span>\r\n    key_new = generate_key(message, key)\r\n    s = cipher_text(message, key_new)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Encrypted Text = <span class=\"hljs-subst\">{s}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Original Text = <span class=\"hljs-subst\">{original_text(s, key_new)}</span>&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    main()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "RadadiyaMohit",
      "email": "30775542+radadiyamohit81@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}