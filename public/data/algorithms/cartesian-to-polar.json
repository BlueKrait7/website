{
  "slug": "cartesian-to-polar",
  "name": "Cartesian to Polar",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc\\cartesian_to_polar.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc\\cartesian_to_polar.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Function to convert a Cartesian co-ordinate to polar form.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _USE_MATH_DEFINES <span class=\"hljs-comment\">/**&lt; required for MS Visual C */</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function to convert cartesian coordinates to polar.\r\n *\\f{eqnarray*}{\r\n r &amp;=&amp; \\sqrt{x^2+y^2}\\\\\r\n \\theta &amp;=&amp; \\atan\\frac{y}{x}\r\n \\f}\r\n * @param [in] x absicca value\r\n * @param [in] y ordinate value\r\n * @param [out] r pointer to store polar radius\r\n * @param [out] theta pointer to store polar angle (in radian)\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">to_polar</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x, <span class=\"hljs-type\">double</span> y, <span class=\"hljs-type\">double</span> *r, <span class=\"hljs-type\">double</span> *theta)</span>\r\n{\r\n    <span class=\"hljs-type\">double</span> thetaFinal = <span class=\"hljs-number\">0.f</span>;\r\n\r\n    *r = <span class=\"hljs-built_in\">sqrt</span>(x * x + y * y);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (x != <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (y != <span class=\"hljs-number\">0</span>)\r\n        {\r\n            *theta = <span class=\"hljs-built_in\">atan</span>(y / x);\r\n            <span class=\"hljs-keyword\">if</span> ((x &gt; <span class=\"hljs-number\">0</span> &amp;&amp; y &gt; <span class=\"hljs-number\">0</span>) || (x == -y))\r\n            {  <span class=\"hljs-comment\">// Q1</span>\r\n                thetaFinal = *theta;\r\n            }\r\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span> &amp;&amp; y &gt; <span class=\"hljs-number\">0</span>)\r\n            {  <span class=\"hljs-comment\">// Q2</span>\r\n                thetaFinal = *theta + M_PI;\r\n            }\r\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; <span class=\"hljs-number\">0</span>)\r\n            {  <span class=\"hljs-comment\">// Q3</span>\r\n                thetaFinal = *theta - M_PI;\r\n            }\r\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &gt; <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; <span class=\"hljs-number\">0</span>)\r\n            {  <span class=\"hljs-comment\">// Q4</span>\r\n                thetaFinal = <span class=\"hljs-number\">2</span> * M_PI - *theta;\r\n            }\r\n            <span class=\"hljs-keyword\">else</span>\r\n            {\r\n                <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Should not reach here!\\n&quot;</span>);\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {  <span class=\"hljs-comment\">// exceptions when no actual angle is present</span>\r\n        <span class=\"hljs-keyword\">if</span> (y &gt; <span class=\"hljs-number\">0</span>)\r\n        {\r\n            thetaFinal = M_PI / <span class=\"hljs-number\">2</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            thetaFinal = -(M_PI / <span class=\"hljs-number\">2</span>);\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (x &gt; <span class=\"hljs-number\">0</span>)\r\n        {\r\n            thetaFinal = <span class=\"hljs-number\">0</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n        {\r\n            thetaFinal = -M_PI;\r\n        }\r\n    }\r\n\r\n    *theta = thetaFinal;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Generate a random number in the given limits\r\n *\r\n * @param lim1 lower limit\r\n * @param lim2 upper limit\r\n * @return random number in the given range\r\n */</span>\r\n<span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">get_rand</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> lim1, <span class=\"hljs-type\">double</span> lim2)</span>\r\n{\r\n    <span class=\"hljs-type\">double</span> r = (<span class=\"hljs-type\">double</span>)rand() / RAND_MAX;  <span class=\"hljs-comment\">// value in [0,1)</span>\r\n    <span class=\"hljs-keyword\">return</span> (lim2 - lim1) * r + lim1;       <span class=\"hljs-comment\">// scale to range</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test implementation\r\n *\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\r\n{\r\n    srand(<span class=\"hljs-number\">10</span>);\r\n    <span class=\"hljs-type\">int</span> NUM_TESTS = <span class=\"hljs-number\">5</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; NUM_TESTS; i++)\r\n    {\r\n        <span class=\"hljs-type\">double</span> r, theta;\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test %d.... &quot;</span>, i);\r\n        <span class=\"hljs-type\">double</span> x = get_rand(<span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-type\">double</span> y = get_rand(<span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">5</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;(%.2g, %.2g).... &quot;</span>, x, y);\r\n        to_polar(x, y, &amp;r, &amp;theta);\r\n        assert(<span class=\"hljs-built_in\">fabs</span>(r - hypot(x, y)) &lt; <span class=\"hljs-number\">0.01</span>);\r\n        assert(<span class=\"hljs-built_in\">fabs</span>(theta - <span class=\"hljs-built_in\">atan2</span>(y, x)) &lt; <span class=\"hljs-number\">0.01</span>);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed\\n&quot;</span>);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    test();\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}