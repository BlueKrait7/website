{
  "slug": "greedy-best-first",
  "name": "Greedy Best First",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\greedy_best_first.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\greedy_best_first.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nhttps://en.wikipedia.org/wiki/Best-first_search#Greedy_BFS\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\nPath = <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]]\r\n\r\ngrid = [\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],  <span class=\"hljs-comment\"># 0 are free path whereas 1&#x27;s are obstacles</span>\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\r\n]\r\n\r\ndelta = ([-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])  <span class=\"hljs-comment\"># up, left, down, right</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; k = Node(0, 0, 4, 5, 0, None)\r\n    &gt;&gt;&gt; k.calculate_heuristic()\r\n    9\r\n    &gt;&gt;&gt; n = Node(1, 4, 3, 4, 2, None)\r\n    &gt;&gt;&gt; n.calculate_heuristic()\r\n    2\r\n    &gt;&gt;&gt; l = [k, n]\r\n    &gt;&gt;&gt; n == l[0]\r\n    False\r\n    &gt;&gt;&gt; l.sort()\r\n    &gt;&gt;&gt; n == l[0]\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">\r\n        self,\r\n        pos_x: <span class=\"hljs-built_in\">int</span>,\r\n        pos_y: <span class=\"hljs-built_in\">int</span>,\r\n        goal_x: <span class=\"hljs-built_in\">int</span>,\r\n        goal_y: <span class=\"hljs-built_in\">int</span>,\r\n        g_cost: <span class=\"hljs-built_in\">float</span>,\r\n        parent: Node | <span class=\"hljs-literal\">None</span>,\r\n    </span>):\r\n        self.pos_x = pos_x\r\n        self.pos_y = pos_y\r\n        self.pos = (pos_y, pos_x)\r\n        self.goal_x = goal_x\r\n        self.goal_y = goal_y\r\n        self.g_cost = g_cost\r\n        self.parent = parent\r\n        self.f_cost = self.calculate_heuristic()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_heuristic</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        The heuristic here is the Manhattan Distance\r\n        Could elaborate to offer more than one choice\r\n        &quot;&quot;&quot;</span>\r\n        dy = <span class=\"hljs-built_in\">abs</span>(self.pos_x - self.goal_x)\r\n        dx = <span class=\"hljs-built_in\">abs</span>(self.pos_y - self.goal_y)\r\n        <span class=\"hljs-keyword\">return</span> dx + dy\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__lt__</span>(<span class=\"hljs-params\">self, other</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-keyword\">return</span> self.f_cost &lt; other.f_cost\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GreedyBestFirst</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; gbf = GreedyBestFirst((0, 0), (len(grid) - 1, len(grid[0]) - 1))\r\n    &gt;&gt;&gt; [x.pos for x in gbf.get_successors(gbf.start)]\r\n    [(1, 0), (0, 1)]\r\n    &gt;&gt;&gt; (gbf.start.pos_y + delta[3][0], gbf.start.pos_x + delta[3][1])\r\n    (0, 1)\r\n    &gt;&gt;&gt; (gbf.start.pos_y + delta[2][0], gbf.start.pos_x + delta[2][1])\r\n    (1, 0)\r\n    &gt;&gt;&gt; gbf.retrace_path(gbf.start)\r\n    [(0, 0)]\r\n    &gt;&gt;&gt; gbf.search()  # doctest: +NORMALIZE_WHITESPACE\r\n    [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (6, 1),\r\n     (6, 2), (6, 3), (5, 3), (5, 4), (5, 5), (6, 5), (6, 6)]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, start: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>], goal: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]</span>):\r\n        self.start = Node(start[<span class=\"hljs-number\">1</span>], start[<span class=\"hljs-number\">0</span>], goal[<span class=\"hljs-number\">1</span>], goal[<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">None</span>)\r\n        self.target = Node(goal[<span class=\"hljs-number\">1</span>], goal[<span class=\"hljs-number\">0</span>], goal[<span class=\"hljs-number\">1</span>], goal[<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">99999</span>, <span class=\"hljs-literal\">None</span>)\r\n\r\n        self.open_nodes = [self.start]\r\n        self.closed_nodes: <span class=\"hljs-built_in\">list</span>[Node] = []\r\n\r\n        self.reached = <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self</span>) -&gt; Path | <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Search for the path,\r\n        if a path is not found, only the starting position is returned\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">while</span> self.open_nodes:\r\n            <span class=\"hljs-comment\"># Open Nodes are sorted using __lt__</span>\r\n            self.open_nodes.sort()\r\n            current_node = self.open_nodes.pop(<span class=\"hljs-number\">0</span>)\r\n\r\n            <span class=\"hljs-keyword\">if</span> current_node.pos == self.target.pos:\r\n                self.reached = <span class=\"hljs-literal\">True</span>\r\n                <span class=\"hljs-keyword\">return</span> self.retrace_path(current_node)\r\n\r\n            self.closed_nodes.append(current_node)\r\n            successors = self.get_successors(current_node)\r\n\r\n            <span class=\"hljs-keyword\">for</span> child_node <span class=\"hljs-keyword\">in</span> successors:\r\n                <span class=\"hljs-keyword\">if</span> child_node <span class=\"hljs-keyword\">in</span> self.closed_nodes:\r\n                    <span class=\"hljs-keyword\">continue</span>\r\n\r\n                <span class=\"hljs-keyword\">if</span> child_node <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.open_nodes:\r\n                    self.open_nodes.append(child_node)\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    <span class=\"hljs-comment\"># retrieve the best current path</span>\r\n                    better_node = self.open_nodes.pop(self.open_nodes.index(child_node))\r\n\r\n                    <span class=\"hljs-keyword\">if</span> child_node.g_cost &lt; better_node.g_cost:\r\n                        self.open_nodes.append(child_node)\r\n                    <span class=\"hljs-keyword\">else</span>:\r\n                        self.open_nodes.append(better_node)\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.reached:\r\n            <span class=\"hljs-keyword\">return</span> [self.start.pos]\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_successors</span>(<span class=\"hljs-params\">self, parent: Node</span>) -&gt; <span class=\"hljs-built_in\">list</span>[Node]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Returns a list of successors (both in the grid and free spaces)\r\n        &quot;&quot;&quot;</span>\r\n        successors = []\r\n        <span class=\"hljs-keyword\">for</span> action <span class=\"hljs-keyword\">in</span> delta:\r\n            pos_x = parent.pos_x + action[<span class=\"hljs-number\">1</span>]\r\n            pos_y = parent.pos_y + action[<span class=\"hljs-number\">0</span>]\r\n\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (<span class=\"hljs-number\">0</span> &lt;= pos_x &lt;= <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]) - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= pos_y &lt;= <span class=\"hljs-built_in\">len</span>(grid) - <span class=\"hljs-number\">1</span>):\r\n                <span class=\"hljs-keyword\">continue</span>\r\n\r\n            <span class=\"hljs-keyword\">if</span> grid[pos_y][pos_x] != <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">continue</span>\r\n\r\n            successors.append(\r\n                Node(\r\n                    pos_x,\r\n                    pos_y,\r\n                    self.target.pos_y,\r\n                    self.target.pos_x,\r\n                    parent.g_cost + <span class=\"hljs-number\">1</span>,\r\n                    parent,\r\n                )\r\n            )\r\n        <span class=\"hljs-keyword\">return</span> successors\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">retrace_path</span>(<span class=\"hljs-params\">self, node: Node | <span class=\"hljs-literal\">None</span></span>) -&gt; Path:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Retrace the path from parents to parents until start node\r\n        &quot;&quot;&quot;</span>\r\n        current_node = node\r\n        path = []\r\n        <span class=\"hljs-keyword\">while</span> current_node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            path.append((current_node.pos_y, current_node.pos_x))\r\n            current_node = current_node.parent\r\n        path.reverse()\r\n        <span class=\"hljs-keyword\">return</span> path\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    init = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n    goal = (<span class=\"hljs-built_in\">len</span>(grid) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]) - <span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> grid:\r\n        <span class=\"hljs-built_in\">print</span>(elem)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;------&quot;</span>)\r\n\r\n    greedy_bf = GreedyBestFirst(init, goal)\r\n    path = greedy_bf.search()\r\n    <span class=\"hljs-keyword\">if</span> path:\r\n        <span class=\"hljs-keyword\">for</span> pos_x, pos_y <span class=\"hljs-keyword\">in</span> path:\r\n            grid[pos_x][pos_y] = <span class=\"hljs-number\">2</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> grid:\r\n            <span class=\"hljs-built_in\">print</span>(elem)\r\n"
    }
  },
  "contributors": [
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "Erwin Lejeune",
      "email": "erwin.lejeune15@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}