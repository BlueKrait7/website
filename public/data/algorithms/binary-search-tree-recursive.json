{
  "slug": "binary-search-tree-recursive",
  "name": "Binary Search Tree Recursive",
  "categories": [
    "datastructures",
    "binarytree"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\binary_tree\\binary_search_tree_recursive.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\binary_tree\\binary_search_tree_recursive.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is a python3 implementation of binary search tree using recursion\r\n\r\nTo run tests:\r\npython -m unittest binary_search_tree_recursive.py\r\n\r\nTo run an example:\r\npython binary_search_tree_recursive.py\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">import</span> unittest\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Iterator\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span>, parent: Node | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.label = label\r\n        self.parent = parent\r\n        self.left: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        self.right: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinarySearchTree</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.root: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Empties the tree\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; assert t.root is None\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; assert t.root is not None\r\n        &quot;&quot;&quot;</span>\r\n        self.root = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Checks if the tree is empty\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; t.is_empty()\r\n        True\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; t.is_empty()\r\n        False\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">put</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Put a new node in the tree\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; assert t.root.parent is None\r\n        &gt;&gt;&gt; assert t.root.label == 8\r\n\r\n        &gt;&gt;&gt; t.put(10)\r\n        &gt;&gt;&gt; assert t.root.right.parent == t.root\r\n        &gt;&gt;&gt; assert t.root.right.label == 10\r\n\r\n        &gt;&gt;&gt; t.put(3)\r\n        &gt;&gt;&gt; assert t.root.left.parent == t.root\r\n        &gt;&gt;&gt; assert t.root.left.label == 3\r\n        &quot;&quot;&quot;</span>\r\n        self.root = self._put(self.root, label)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_put</span>(<span class=\"hljs-params\">self, node: Node | <span class=\"hljs-literal\">None</span>, label: <span class=\"hljs-built_in\">int</span>, parent: Node | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span></span>) -&gt; Node:\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            node = Node(label, parent)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> label &lt; node.label:\r\n                node.left = self._put(node.left, label, node)\r\n            <span class=\"hljs-keyword\">elif</span> label &gt; node.label:\r\n                node.right = self._put(node.right, label, node)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;Node with label <span class=\"hljs-subst\">{label}</span> already exists&quot;</span>)\r\n\r\n        <span class=\"hljs-keyword\">return</span> node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; Node:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Searches a node in the tree\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; t.put(10)\r\n        &gt;&gt;&gt; node = t.search(8)\r\n        &gt;&gt;&gt; assert node.label == 8\r\n\r\n        &gt;&gt;&gt; node = t.search(3)\r\n        Traceback (most recent call last):\r\n            ...\r\n        Exception: Node with label 3 does not exist\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self._search(self.root, label)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_search</span>(<span class=\"hljs-params\">self, node: Node | <span class=\"hljs-literal\">None</span>, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; Node:\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;Node with label <span class=\"hljs-subst\">{label}</span> does not exist&quot;</span>)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> label &lt; node.label:\r\n                node = self._search(node.left, label)\r\n            <span class=\"hljs-keyword\">elif</span> label &gt; node.label:\r\n                node = self._search(node.right, label)\r\n\r\n        <span class=\"hljs-keyword\">return</span> node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Removes a node in the tree\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; t.put(10)\r\n        &gt;&gt;&gt; t.remove(8)\r\n        &gt;&gt;&gt; assert t.root.label == 10\r\n\r\n        &gt;&gt;&gt; t.remove(3)\r\n        Traceback (most recent call last):\r\n            ...\r\n        Exception: Node with label 3 does not exist\r\n        &quot;&quot;&quot;</span>\r\n        node = self.search(label)\r\n        <span class=\"hljs-keyword\">if</span> node.right <span class=\"hljs-keyword\">and</span> node.left:\r\n            lowest_node = self._get_lowest_node(node.right)\r\n            lowest_node.left = node.left\r\n            lowest_node.right = node.right\r\n            node.left.parent = lowest_node\r\n            <span class=\"hljs-keyword\">if</span> node.right:\r\n                node.right.parent = lowest_node\r\n            self._reassign_nodes(node, lowest_node)\r\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-keyword\">not</span> node.right <span class=\"hljs-keyword\">and</span> node.left:\r\n            self._reassign_nodes(node, node.left)\r\n        <span class=\"hljs-keyword\">elif</span> node.right <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> node.left:\r\n            self._reassign_nodes(node, node.right)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self._reassign_nodes(node, <span class=\"hljs-literal\">None</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_reassign_nodes</span>(<span class=\"hljs-params\">self, node: Node, new_children: Node | <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">if</span> new_children:\r\n            new_children.parent = node.parent\r\n\r\n        <span class=\"hljs-keyword\">if</span> node.parent:\r\n            <span class=\"hljs-keyword\">if</span> node.parent.right == node:\r\n                node.parent.right = new_children\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                node.parent.left = new_children\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.root = new_children\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_get_lowest_node</span>(<span class=\"hljs-params\">self, node: Node</span>) -&gt; Node:\r\n        <span class=\"hljs-keyword\">if</span> node.left:\r\n            lowest_node = self._get_lowest_node(node.left)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            lowest_node = node\r\n            self._reassign_nodes(node, node.right)\r\n\r\n        <span class=\"hljs-keyword\">return</span> lowest_node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">exists</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Checks if a node exists in the tree\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; t.put(10)\r\n        &gt;&gt;&gt; t.exists(8)\r\n        True\r\n\r\n        &gt;&gt;&gt; t.exists(3)\r\n        False\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">try</span>:\r\n            self.search(label)\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">except</span> Exception:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_max_label</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Gets the max label inserted in the tree\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; t.get_max_label()\r\n        Traceback (most recent call last):\r\n            ...\r\n        Exception: Binary search tree is empty\r\n\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; t.put(10)\r\n        &gt;&gt;&gt; t.get_max_label()\r\n        10\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Binary search tree is empty&quot;</span>)\r\n\r\n        node = self.root\r\n        <span class=\"hljs-keyword\">while</span> node.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            node = node.right\r\n\r\n        <span class=\"hljs-keyword\">return</span> node.label\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_min_label</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Gets the min label inserted in the tree\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; t.get_min_label()\r\n        Traceback (most recent call last):\r\n            ...\r\n        Exception: Binary search tree is empty\r\n\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; t.put(10)\r\n        &gt;&gt;&gt; t.get_min_label()\r\n        8\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Binary search tree is empty&quot;</span>)\r\n\r\n        node = self.root\r\n        <span class=\"hljs-keyword\">while</span> node.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            node = node.left\r\n\r\n        <span class=\"hljs-keyword\">return</span> node.label\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inorder_traversal</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[Node]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the inorder traversal of the tree\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; [i.label for i in t.inorder_traversal()]\r\n        []\r\n\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; t.put(10)\r\n        &gt;&gt;&gt; t.put(9)\r\n        &gt;&gt;&gt; [i.label for i in t.inorder_traversal()]\r\n        [8, 9, 10]\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self._inorder_traversal(self.root)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_inorder_traversal</span>(<span class=\"hljs-params\">self, node: Node | <span class=\"hljs-literal\">None</span></span>) -&gt; Iterator[Node]:\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self._inorder_traversal(node.left)\r\n            <span class=\"hljs-keyword\">yield</span> node\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self._inorder_traversal(node.right)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">preorder_traversal</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[Node]:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return the preorder traversal of the tree\r\n\r\n        &gt;&gt;&gt; t = BinarySearchTree()\r\n        &gt;&gt;&gt; [i.label for i in t.preorder_traversal()]\r\n        []\r\n\r\n        &gt;&gt;&gt; t.put(8)\r\n        &gt;&gt;&gt; t.put(10)\r\n        &gt;&gt;&gt; t.put(9)\r\n        &gt;&gt;&gt; [i.label for i in t.preorder_traversal()]\r\n        [8, 10, 9]\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self._preorder_traversal(self.root)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_preorder_traversal</span>(<span class=\"hljs-params\">self, node: Node | <span class=\"hljs-literal\">None</span></span>) -&gt; Iterator[Node]:\r\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">yield</span> node\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self._preorder_traversal(node.left)\r\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self._preorder_traversal(node.right)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinarySearchTreeTest</span>(unittest.TestCase):\r\n<span class=\"hljs-meta\">    @staticmethod</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_get_binary_search_tree</span>() -&gt; BinarySearchTree:\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            3   10\r\n           / \\    \\\r\n          1   6    14\r\n             / \\   /\r\n            4   7 13\r\n             \\\r\n              5\r\n        &quot;&quot;&quot;</span>\r\n        t = BinarySearchTree()\r\n        t.put(<span class=\"hljs-number\">8</span>)\r\n        t.put(<span class=\"hljs-number\">3</span>)\r\n        t.put(<span class=\"hljs-number\">6</span>)\r\n        t.put(<span class=\"hljs-number\">1</span>)\r\n        t.put(<span class=\"hljs-number\">10</span>)\r\n        t.put(<span class=\"hljs-number\">14</span>)\r\n        t.put(<span class=\"hljs-number\">13</span>)\r\n        t.put(<span class=\"hljs-number\">4</span>)\r\n        t.put(<span class=\"hljs-number\">7</span>)\r\n        t.put(<span class=\"hljs-number\">5</span>)\r\n\r\n        <span class=\"hljs-keyword\">return</span> t\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_put</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = BinarySearchTree()\r\n        <span class=\"hljs-keyword\">assert</span> t.is_empty()\r\n\r\n        t.put(<span class=\"hljs-number\">8</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.label == <span class=\"hljs-number\">8</span>\r\n\r\n        t.put(<span class=\"hljs-number\">10</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n               \\\r\n                10\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.right.parent == t.root\r\n        <span class=\"hljs-keyword\">assert</span> t.root.right.label == <span class=\"hljs-number\">10</span>\r\n\r\n        t.put(<span class=\"hljs-number\">3</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            3   10\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.parent == t.root\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.label == <span class=\"hljs-number\">3</span>\r\n\r\n        t.put(<span class=\"hljs-number\">6</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            3   10\r\n             \\\r\n              6\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.parent == t.root.left\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.label == <span class=\"hljs-number\">6</span>\r\n\r\n        t.put(<span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            3   10\r\n           / \\\r\n          1   6\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(Exception):\r\n            t.put(<span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_search</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n\r\n        node = t.search(<span class=\"hljs-number\">6</span>)\r\n        <span class=\"hljs-keyword\">assert</span> node.label == <span class=\"hljs-number\">6</span>\r\n\r\n        node = t.search(<span class=\"hljs-number\">13</span>)\r\n        <span class=\"hljs-keyword\">assert</span> node.label == <span class=\"hljs-number\">13</span>\r\n\r\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(Exception):\r\n            t.search(<span class=\"hljs-number\">2</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_remove</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n\r\n        t.remove(<span class=\"hljs-number\">13</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            3   10\r\n           / \\    \\\r\n          1   6    14\r\n             / \\\r\n            4   7\r\n             \\\r\n              5\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.right.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.right.right.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n\r\n        t.remove(<span class=\"hljs-number\">7</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            3   10\r\n           / \\    \\\r\n          1   6    14\r\n             /\r\n            4\r\n             \\\r\n              5\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left.label == <span class=\"hljs-number\">4</span>\r\n\r\n        t.remove(<span class=\"hljs-number\">6</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            3   10\r\n           / \\    \\\r\n          1   4    14\r\n               \\\r\n                5\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.label == <span class=\"hljs-number\">4</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right.label == <span class=\"hljs-number\">5</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.parent == t.root.left\r\n\r\n        t.remove(<span class=\"hljs-number\">3</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            4   10\r\n           / \\    \\\r\n          1   5    14\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.label == <span class=\"hljs-number\">4</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.label == <span class=\"hljs-number\">5</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.parent == t.root\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.parent == t.root.left\r\n\r\n        t.remove(<span class=\"hljs-number\">4</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            5   10\r\n           /      \\\r\n          1        14\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.label == <span class=\"hljs-number\">5</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.parent == t.root\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_remove_2</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n\r\n        t.remove(<span class=\"hljs-number\">3</span>)\r\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n              8\r\n             / \\\r\n            4   10\r\n           / \\    \\\r\n          1   6    14\r\n             / \\   /\r\n            5   7 13\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.label == <span class=\"hljs-number\">4</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.label == <span class=\"hljs-number\">6</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right.label == <span class=\"hljs-number\">7</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left.label == <span class=\"hljs-number\">5</span>\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.parent == t.root\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.parent == t.root.left\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\r\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left.parent == t.root.left.right\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n        t.empty()\r\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> t.is_empty()\r\n\r\n        t.empty()\r\n        <span class=\"hljs-keyword\">assert</span> t.is_empty()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_exists</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n\r\n        <span class=\"hljs-keyword\">assert</span> t.exists(<span class=\"hljs-number\">6</span>)\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> t.exists(-<span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_get_max_label</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n\r\n        <span class=\"hljs-keyword\">assert</span> t.get_max_label() == <span class=\"hljs-number\">14</span>\r\n\r\n        t.empty()\r\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(Exception):\r\n            t.get_max_label()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_get_min_label</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n\r\n        <span class=\"hljs-keyword\">assert</span> t.get_min_label() == <span class=\"hljs-number\">1</span>\r\n\r\n        t.empty()\r\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(Exception):\r\n            t.get_min_label()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_inorder_traversal</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n\r\n        inorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.inorder_traversal()]\r\n        <span class=\"hljs-keyword\">assert</span> inorder_traversal_nodes == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_preorder_traversal</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        t = self._get_binary_search_tree()\r\n\r\n        preorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.preorder_traversal()]\r\n        <span class=\"hljs-keyword\">assert</span> preorder_traversal_nodes == [<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">13</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search_tree_example</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">r&quot;&quot;&quot;\r\n    Example\r\n                  8\r\n                 / \\\r\n                3   10\r\n               / \\    \\\r\n              1   6    14\r\n                 / \\   /\r\n                4   7 13\r\n                \\\r\n                5\r\n\r\n    Example After Deletion\r\n                  4\r\n                 / \\\r\n                1   7\r\n                     \\\r\n                      5\r\n\r\n    &quot;&quot;&quot;</span>\r\n\r\n    t = BinarySearchTree()\r\n    t.put(<span class=\"hljs-number\">8</span>)\r\n    t.put(<span class=\"hljs-number\">3</span>)\r\n    t.put(<span class=\"hljs-number\">6</span>)\r\n    t.put(<span class=\"hljs-number\">1</span>)\r\n    t.put(<span class=\"hljs-number\">10</span>)\r\n    t.put(<span class=\"hljs-number\">14</span>)\r\n    t.put(<span class=\"hljs-number\">13</span>)\r\n    t.put(<span class=\"hljs-number\">4</span>)\r\n    t.put(<span class=\"hljs-number\">7</span>)\r\n    t.put(<span class=\"hljs-number\">5</span>)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n            8\r\n           / \\\\\r\n          3   10\r\n         / \\\\    \\\\\r\n        1   6    14\r\n           / \\\\   /\r\n          4   7 13\r\n           \\\\\r\n            5\r\n        &quot;&quot;&quot;</span>\r\n    )\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Label 6 exists:&quot;</span>, t.exists(<span class=\"hljs-number\">6</span>))\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Label 13 exists:&quot;</span>, t.exists(<span class=\"hljs-number\">13</span>))\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Label -1 exists:&quot;</span>, t.exists(-<span class=\"hljs-number\">1</span>))\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Label 12 exists:&quot;</span>, t.exists(<span class=\"hljs-number\">12</span>))\r\n\r\n    <span class=\"hljs-comment\"># Prints all the elements of the list in inorder traversal</span>\r\n    inorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.inorder_traversal()]\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Inorder traversal:&quot;</span>, inorder_traversal_nodes)\r\n\r\n    <span class=\"hljs-comment\"># Prints all the elements of the list in preorder traversal</span>\r\n    preorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.preorder_traversal()]\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Preorder traversal:&quot;</span>, preorder_traversal_nodes)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Max. label:&quot;</span>, t.get_max_label())\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Min. label:&quot;</span>, t.get_min_label())\r\n\r\n    <span class=\"hljs-comment\"># Delete elements</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nDeleting elements 13, 10, 8, 3, 6, 14&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n          4\r\n         / \\\\\r\n        1   7\r\n             \\\\\r\n              5\r\n        &quot;&quot;&quot;</span>\r\n    )\r\n    t.remove(<span class=\"hljs-number\">13</span>)\r\n    t.remove(<span class=\"hljs-number\">10</span>)\r\n    t.remove(<span class=\"hljs-number\">8</span>)\r\n    t.remove(<span class=\"hljs-number\">3</span>)\r\n    t.remove(<span class=\"hljs-number\">6</span>)\r\n    t.remove(<span class=\"hljs-number\">14</span>)\r\n\r\n    <span class=\"hljs-comment\"># Prints all the elements of the list in inorder traversal after delete</span>\r\n    inorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.inorder_traversal()]\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Inorder traversal after delete:&quot;</span>, inorder_traversal_nodes)\r\n\r\n    <span class=\"hljs-comment\"># Prints all the elements of the list in preorder traversal after delete</span>\r\n    preorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.preorder_traversal()]\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Preorder traversal after delete:&quot;</span>, preorder_traversal_nodes)\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Max. label:&quot;</span>, t.get_max_label())\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Min. label:&quot;</span>, t.get_min_label())\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    binary_search_tree_example()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Hao LI",
      "email": "8520588+Leo-LiHao@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Joan Martin Miralles",
      "email": "JoanMartin@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}