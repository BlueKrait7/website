{
  "slug": "brightness",
  "name": "Brightness",
  "categories": [
    "machinelearning",
    "nearestneighbor"
  ],
  "body": {},
  "implementations": {
    "matlab-octave": {
      "dir": "algorithms\\machine_learning\\Nearest-Neighbor\\brightness.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms\\machine_learning\\Nearest-Neighbor\\brightness.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">y</span> = <span class=\"hljs-title\">brightness</span><span class=\"hljs-params\">(red, green, blue)</span></span>\r\n  <span class=\"hljs-comment\">% brightness: returns 1 if the color is light otherwise 0</span>\r\n  <span class=\"hljs-comment\">% INPUT: RGB-value of the color (red, green, blue)</span>\r\n  <span class=\"hljs-comment\">% OUTPUT: 0 or 1 (0 dark, 1 light)</span>\r\n  <span class=\"hljs-comment\">% The function used the nearest neighbor algorithm</span>\r\n\r\n  <span class=\"hljs-comment\">% train set for various rgb-values and its brightness</span>\r\n  <span class=\"hljs-comment\">% the set contains vectors with dimension 4x1</span>\r\n  <span class=\"hljs-comment\">% [r, g, b, brightness]</span>\r\n  train_set = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-number\">37</span>,<span class=\"hljs-number\">44</span>,<span class=\"hljs-number\">58</span>,<span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-number\">139</span>, <span class=\"hljs-number\">169</span>, <span class=\"hljs-number\">229</span>,<span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-number\">252</span>, <span class=\"hljs-number\">227</span>, <span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-number\">71</span>, <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-number\">168</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">80</span>,<span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-number\">119</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">0</span>; \r\n            <span class=\"hljs-number\">186</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">126</span>, <span class=\"hljs-number\">1</span>;];\r\n            \r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">length</span> = <span class=\"hljs-title\">eulidean</span><span class=\"hljs-params\">(v1, v2)</span></span>\r\n    <span class=\"hljs-comment\">% eulidean: calculates the eulidean length between two vectors (3x1)</span>\r\n    <span class=\"hljs-comment\">% The calculation contains only the RGB-values! (3x1)</span>\r\n    <span class=\"hljs-comment\">% HELPER-FUNCTION</span>\r\n    <span class=\"hljs-built_in\">length</span> = <span class=\"hljs-built_in\">sqrt</span>((v2(<span class=\"hljs-number\">1</span>)-v1(<span class=\"hljs-number\">1</span>))^<span class=\"hljs-number\">2</span> + (v2(<span class=\"hljs-number\">2</span>)-v1(<span class=\"hljs-number\">2</span>))^<span class=\"hljs-number\">2</span> + (v2(<span class=\"hljs-number\">3</span>)-v1(<span class=\"hljs-number\">3</span>))^<span class=\"hljs-number\">2</span>);\r\n  endfunction\r\n  \r\n  \r\n  rgb = [red green blue];\r\n  x1 = train_set(<span class=\"hljs-number\">1</span>,:);\r\n  x2 = x1(<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">3</span>);\r\n  <span class=\"hljs-built_in\">min</span> = eulidean(rgb,x2);\r\n  index = <span class=\"hljs-number\">1</span>;\r\n  \r\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">2</span>:<span class=\"hljs-built_in\">length</span>(train_set)\r\n    x1 = train_set(<span class=\"hljs-built_in\">i</span>,:);\r\n    x2 = x1(<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">3</span>);\r\n    result = eulidean(rgb,x2);\r\n    <span class=\"hljs-keyword\">if</span> (result &lt; <span class=\"hljs-built_in\">min</span>)\r\n      <span class=\"hljs-built_in\">min</span> = result;\r\n      index = <span class=\"hljs-built_in\">i</span>;\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n  \r\n  y = train_set(index,:)(<span class=\"hljs-number\">4</span>);\r\n            \r\n\r\nendfunction"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}