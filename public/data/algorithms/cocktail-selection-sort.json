{
  "slug": "cocktail-selection-sort",
  "name": "Cocktail Selection Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting\\cocktail_selection_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\cocktail_selection_sort.cpp",
      "code": "<span class=\"hljs-comment\">// Returns Sorted elements after performing Cocktail Selection Sort</span>\r\n<span class=\"hljs-comment\">// It is a Sorting algorithm which chooses the minimum and maximum element in an</span>\r\n<span class=\"hljs-comment\">// array simultaneously, and swaps it with the lowest and highest available</span>\r\n<span class=\"hljs-comment\">// position iteratively or recursively</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">// Iterative Version</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">CocktailSelectionSort</span><span class=\"hljs-params\">(std::vector&lt;<span class=\"hljs-type\">int</span>&gt; *vec, <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> </span>{\r\n    <span class=\"hljs-keyword\">while</span> (low &lt;= high) {\r\n        <span class=\"hljs-type\">int</span> minimum = (*vec)[low];\r\n        <span class=\"hljs-type\">int</span> minimumindex = low;\r\n        <span class=\"hljs-type\">int</span> maximum = (*vec)[high];\r\n        <span class=\"hljs-type\">int</span> maximumindex = high;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = low; i &lt;= high; i++) {\r\n            <span class=\"hljs-keyword\">if</span> ((*vec)[i] &gt;= maximum) {\r\n                maximum = (*vec)[i];\r\n                maximumindex = i;\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> ((*vec)[i] &lt;= minimum) {\r\n                minimum = (*vec)[i];\r\n                minimumindex = i;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (low != maximumindex || high != minimumindex) {\r\n            std::<span class=\"hljs-built_in\">swap</span>((*vec)[low], (*vec)[minimumindex]);\r\n            std::<span class=\"hljs-built_in\">swap</span>((*vec)[high], (*vec)[maximumindex]);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            std::<span class=\"hljs-built_in\">swap</span>((*vec)[low], (*vec)[high]);\r\n        }\r\n\r\n        low++;\r\n        high--;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// Recursive Version</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">CocktailSelectionSort_v2</span><span class=\"hljs-params\">(std::vector&lt;<span class=\"hljs-type\">int</span>&gt; *vec, <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (low &gt;= high)\r\n        <span class=\"hljs-keyword\">return</span>;\r\n\r\n    <span class=\"hljs-type\">int</span> minimum = (*vec)[low];\r\n    <span class=\"hljs-type\">int</span> minimumindex = low;\r\n    <span class=\"hljs-type\">int</span> maximum = (*vec)[high];\r\n    <span class=\"hljs-type\">int</span> maximumindex = high;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = low; i &lt;= high; i++) {\r\n        <span class=\"hljs-keyword\">if</span> ((*vec)[i] &gt;= maximum) {\r\n            maximum = (*vec)[i];\r\n            maximumindex = i;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> ((*vec)[i] &lt;= minimum) {\r\n            minimum = (*vec)[i];\r\n            minimumindex = i;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (low != maximumindex || high != minimumindex) {\r\n        std::<span class=\"hljs-built_in\">swap</span>((*vec)[low], (*vec)[minimumindex]);\r\n        std::<span class=\"hljs-built_in\">swap</span>((*vec)[high], (*vec)[maximumindex]);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        std::<span class=\"hljs-built_in\">swap</span>((*vec)[low], (*vec)[high]);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">CocktailSelectionSort</span>(vec, low + <span class=\"hljs-number\">1</span>, high - <span class=\"hljs-number\">1</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">// main function, select any one of iterative or recursive version</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> n;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of elements\\n&quot;</span>;\r\n    std::cin &gt;&gt; n;\r\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(n)</span></span>;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter all the elements\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n        std::cin &gt;&gt; v[i];\r\n    }\r\n\r\n    <span class=\"hljs-type\">int</span> method;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter method: \\n\\t0: iterative\\n\\t1: recursive:\\t&quot;</span>;\r\n    std::cin &gt;&gt; method;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (method == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-built_in\">CocktailSelectionSort</span>(&amp;v, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>);\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (method == <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-built_in\">CocktailSelectionSort_v2</span>(&amp;v, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Unknown method&quot;</span> &lt;&lt; std::endl;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted elements are\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n        std::cout &lt;&lt; v[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Naveen Hegde",
      "email": "hegdenaveen1@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}