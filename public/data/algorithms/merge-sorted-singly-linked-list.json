{
  "slug": "merge-sorted-singly-linked-list",
  "name": "Merge Sorted Singly Linked List",
  "categories": [
    "datastructures",
    "list"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\lists\\MergeSortedSinglyLinkedList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\lists\\MergeSortedSinglyLinkedList.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.lists;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MergeSortedSinglyLinkedList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SinglyLinkedList</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">SinglyLinkedList</span> <span class=\"hljs-variable\">listA</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>();\r\n        <span class=\"hljs-type\">SinglyLinkedList</span> <span class=\"hljs-variable\">listB</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>();\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= <span class=\"hljs-number\">10</span>; i += <span class=\"hljs-number\">2</span>) {\r\n            listA.insert(i);\r\n            listB.insert(i - <span class=\"hljs-number\">1</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">assert</span> listA.toString().equals(<span class=\"hljs-string\">&quot;2-&gt;4-&gt;6-&gt;8-&gt;10&quot;</span>);\r\n        <span class=\"hljs-keyword\">assert</span> listB.toString().equals(<span class=\"hljs-string\">&quot;1-&gt;3-&gt;5-&gt;7-&gt;9&quot;</span>);\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">(listA, listB)</span>.toString().equals(<span class=\"hljs-string\">&quot;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9-&gt;10&quot;</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Merge two sorted SingleLinkedList\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> listA the first sorted list\r\n     * <span class=\"hljs-doctag\">@param</span> listB the second sored list\r\n     * <span class=\"hljs-doctag\">@return</span> merged sorted list\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> SinglyLinkedList <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">(SinglyLinkedList listA, SinglyLinkedList listB)</span> {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">headA</span> <span class=\"hljs-operator\">=</span> listA.getHead();\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">headB</span> <span class=\"hljs-operator\">=</span> listB.getHead();\r\n\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> listA.size() + listB.size();\r\n\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">head</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>();\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">tail</span> <span class=\"hljs-operator\">=</span> head;\r\n        <span class=\"hljs-keyword\">while</span> (headA != <span class=\"hljs-literal\">null</span> &amp;&amp; headB != <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">if</span> (headA.value &lt;= headB.value) {\r\n                tail.next = headA;\r\n                headA = headA.next;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                tail.next = headB;\r\n                headB = headB.next;\r\n            }\r\n            tail = tail.next;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (headA == <span class=\"hljs-literal\">null</span>) {\r\n            tail.next = headB;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (headB == <span class=\"hljs-literal\">null</span>) {\r\n            tail.next = headA;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>(head.next, size);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}