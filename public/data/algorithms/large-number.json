{
  "slug": "large-number",
  "name": "Large Number",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math\\large_number.h",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math\\large_number.h",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Library to perform arithmatic operations on arbitrarily large\r\n * numbers.\r\n * \\author [Krishna Vedala](https://github.com/kvedala)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> MATH_LARGE_NUMBER_H_</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MATH_LARGE_NUMBER_H_</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cinttypes&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;type_traits&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Store large unsigned numbers as a C++ vector\r\n * The class provides convenience functions to add a\r\n * digit to the number, perform multiplication of\r\n * large number with long unsigned integers.\r\n **/</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">large_number</span> {\r\n <span class=\"hljs-keyword\">public</span>:\r\n    <span class=\"hljs-comment\">/**&lt; initializer with value = 1 */</span>\r\n    <span class=\"hljs-built_in\">large_number</span>() { _digits.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-number\">1</span>); }\r\n\r\n    <span class=\"hljs-comment\">// /**&lt; initializer from an integer */</span>\r\n    <span class=\"hljs-comment\">// explicit large_number(uint64_t n) {</span>\r\n    <span class=\"hljs-comment\">//     uint64_t carry = n;</span>\r\n    <span class=\"hljs-comment\">//     do {</span>\r\n    <span class=\"hljs-comment\">//         add_digit(carry % 10);</span>\r\n    <span class=\"hljs-comment\">//         carry /= 10;</span>\r\n    <span class=\"hljs-comment\">//     } while (carry != 0);</span>\r\n    <span class=\"hljs-comment\">// }</span>\r\n\r\n    <span class=\"hljs-comment\">/**&lt; initializer from an integer */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">large_number</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\r\n        <span class=\"hljs-type\">int</span> carry = n;\r\n        <span class=\"hljs-keyword\">do</span> {\r\n            <span class=\"hljs-built_in\">add_digit</span>(carry % <span class=\"hljs-number\">10</span>);\r\n            carry /= <span class=\"hljs-number\">10</span>;\r\n        } <span class=\"hljs-keyword\">while</span> (carry != <span class=\"hljs-number\">0</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**&lt; initializer from another large_number */</span>\r\n    <span class=\"hljs-built_in\">large_number</span>(<span class=\"hljs-type\">const</span> large_number &amp;a) : _digits(a._digits) {}\r\n\r\n    <span class=\"hljs-comment\">/**&lt; initializer from a vector */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">large_number</span><span class=\"hljs-params\">(std::vector&lt;<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>&gt; &amp;vec)</span> : _digits(vec) {</span>}\r\n\r\n    <span class=\"hljs-comment\">/**&lt; initializer from a string */</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">large_number</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> <span class=\"hljs-type\">const</span> *number_str)</span> </span>{\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-built_in\">strlen</span>(number_str); i &gt; <span class=\"hljs-number\">0</span>; i--) {\r\n            <span class=\"hljs-type\">char</span> a = number_str[i - <span class=\"hljs-number\">1</span>] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n            <span class=\"hljs-keyword\">if</span> (a &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; a &lt;= <span class=\"hljs-number\">9</span>)\r\n                _digits.<span class=\"hljs-built_in\">push_back</span>(a);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Function to check implementation\r\n     **/</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;------ Checking `large_number` class implementations\\t&quot;</span>\r\n                  &lt;&lt; std::endl;\r\n        <span class=\"hljs-function\">large_number <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-number\">40</span>)</span></span>;\r\n        <span class=\"hljs-comment\">// 1. test multiplication</span>\r\n        a *= <span class=\"hljs-number\">10</span>;\r\n        <span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-built_in\">large_number</span>(<span class=\"hljs-number\">400</span>)) {\r\n            std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;\\tFailed 1/6 (&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;!=400)&quot;</span> &lt;&lt; std::endl;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPassed 1/6...&quot;</span>;\r\n        <span class=\"hljs-comment\">// 2. test compound addition with integer</span>\r\n        a += <span class=\"hljs-number\">120</span>;\r\n        <span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-built_in\">large_number</span>(<span class=\"hljs-number\">520</span>)) {\r\n            std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;\\tFailed 2/6 (&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;!=520)&quot;</span> &lt;&lt; std::endl;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPassed 2/6...&quot;</span>;\r\n        <span class=\"hljs-comment\">// 3. test compound multiplication again</span>\r\n        a *= <span class=\"hljs-number\">10</span>;\r\n        <span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-built_in\">large_number</span>(<span class=\"hljs-number\">5200</span>)) {\r\n            std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;\\tFailed 3/6 (&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;!=5200)&quot;</span> &lt;&lt; std::endl;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPassed 3/6...&quot;</span>;\r\n        <span class=\"hljs-comment\">// 4. test increment (prefix)</span>\r\n        ++a;\r\n        <span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-built_in\">large_number</span>(<span class=\"hljs-number\">5201</span>)) {\r\n            std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;\\tFailed 4/6 (&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;!=5201)&quot;</span> &lt;&lt; std::endl;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPassed 4/6...&quot;</span>;\r\n        <span class=\"hljs-comment\">// 5. test increment (postfix)</span>\r\n        a++;\r\n        <span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-built_in\">large_number</span>(<span class=\"hljs-number\">5202</span>)) {\r\n            std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;\\tFailed 5/6 (&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;!=5202)&quot;</span> &lt;&lt; std::endl;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPassed 5/6...&quot;</span>;\r\n        <span class=\"hljs-comment\">// 6. test addition with another large number</span>\r\n        a = a + <span class=\"hljs-built_in\">large_number</span>(<span class=\"hljs-string\">&quot;7000000000000000000000000000000&quot;</span>);\r\n        <span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-built_in\">large_number</span>(<span class=\"hljs-string\">&quot;7000000000000000000000000005202&quot;</span>)) {\r\n            std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;\\tFailed 6/6 (&quot;</span> &lt;&lt; a\r\n                      &lt;&lt; <span class=\"hljs-string\">&quot;!=7000000000000000000000000005202)&quot;</span> &lt;&lt; std::endl;\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        }\r\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPassed 6/6...&quot;</span> &lt;&lt; std::endl;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * add a digit at MSB to the large number\r\n     **/</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">add_digit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> value)</span> </span>{\r\n        <span class=\"hljs-keyword\">if</span> (value &gt; <span class=\"hljs-number\">9</span>) {\r\n            std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;digit &gt; 9!!\\n&quot;</span>;\r\n            <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\r\n        }\r\n\r\n        _digits.<span class=\"hljs-built_in\">push_back</span>(value);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Get number of digits in the number\r\n     **/</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">size_t</span> <span class=\"hljs-title\">num_digits</span><span class=\"hljs-params\">()</span> <span class=\"hljs-type\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> _digits.<span class=\"hljs-built_in\">size</span>(); }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * operator over load to access the\r\n     * i^th digit conveniently and also\r\n     * assign value to it\r\n     **/</span>\r\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> &amp;<span class=\"hljs-keyword\">operator</span>[](<span class=\"hljs-type\">size_t</span> n) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>-&gt;_digits[n]; }\r\n\r\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> &amp;<span class=\"hljs-keyword\">operator</span>[](<span class=\"hljs-type\">size_t</span> n) <span class=\"hljs-type\">const</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>-&gt;_digits[n];\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * operator overload to compare two numbers\r\n     **/</span>\r\n    <span class=\"hljs-keyword\">friend</span> std::ostream &amp;<span class=\"hljs-keyword\">operator</span>&lt;&lt;(std::ostream &amp;out, <span class=\"hljs-type\">const</span> large_number &amp;a) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = a.<span class=\"hljs-built_in\">num_digits</span>(); i &gt; <span class=\"hljs-number\">0</span>; i--)\r\n            out &lt;&lt; <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">int</span>&gt;(a[i - <span class=\"hljs-number\">1</span>]);\r\n        <span class=\"hljs-keyword\">return</span> out;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * operator overload to compare two numbers\r\n     **/</span>\r\n    <span class=\"hljs-keyword\">friend</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(large_number <span class=\"hljs-type\">const</span> &amp;a, large_number <span class=\"hljs-type\">const</span> &amp;b) {\r\n        <span class=\"hljs-type\">size_t</span> N = a.<span class=\"hljs-built_in\">num_digits</span>();\r\n        <span class=\"hljs-keyword\">if</span> (N != b.<span class=\"hljs-built_in\">num_digits</span>())\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++)\r\n            <span class=\"hljs-keyword\">if</span> (a[i] != b[i])\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * operator overload to compare two numbers\r\n     **/</span>\r\n    <span class=\"hljs-keyword\">friend</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>!=(large_number <span class=\"hljs-type\">const</span> &amp;a, large_number <span class=\"hljs-type\">const</span> &amp;b) {\r\n        <span class=\"hljs-keyword\">return</span> !(a == b);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * operator overload to increment (prefix)\r\n     **/</span>\r\n    large_number &amp;<span class=\"hljs-keyword\">operator</span>++() {\r\n        (*<span class=\"hljs-keyword\">this</span>) += <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * operator overload to increment (postfix)\r\n     **/</span>\r\n    large_number &amp;<span class=\"hljs-keyword\">operator</span>++(<span class=\"hljs-type\">int</span>) {\r\n        <span class=\"hljs-function\"><span class=\"hljs-type\">static</span> large_number <span class=\"hljs-title\">tmp</span><span class=\"hljs-params\">(_digits)</span></span>;\r\n        ++(*<span class=\"hljs-keyword\">this</span>);\r\n        <span class=\"hljs-keyword\">return</span> tmp;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * operator overload to add\r\n     **/</span>\r\n    large_number &amp;<span class=\"hljs-keyword\">operator</span>+=(large_number n) {\r\n        <span class=\"hljs-comment\">// if adding with another large_number</span>\r\n        large_number *b = <span class=\"hljs-built_in\">reinterpret_cast</span>&lt;large_number *&gt;(&amp;n);\r\n        <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">size_t</span> max_L = std::<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">num_digits</span>(), b-&gt;<span class=\"hljs-built_in\">num_digits</span>());\r\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> carry = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-type\">size_t</span> i;\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; max_L || carry != <span class=\"hljs-number\">0</span>; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (i &lt; b-&gt;<span class=\"hljs-built_in\">num_digits</span>())\r\n                carry += (*b)[i];\r\n            <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">num_digits</span>())\r\n                carry += (*<span class=\"hljs-keyword\">this</span>)[i];\r\n            <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">num_digits</span>())\r\n                (*<span class=\"hljs-keyword\">this</span>)[i] = carry % <span class=\"hljs-number\">10</span>;\r\n            <span class=\"hljs-keyword\">else</span>\r\n                <span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">add_digit</span>(carry % <span class=\"hljs-number\">10</span>);\r\n            carry /= <span class=\"hljs-number\">10</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\r\n    }\r\n\r\n    large_number &amp;<span class=\"hljs-keyword\">operator</span>+=(<span class=\"hljs-type\">int</span> n) { <span class=\"hljs-built_in\">return</span> (*<span class=\"hljs-keyword\">this</span>) += <span class=\"hljs-built_in\">large_number</span>(n); }\r\n    <span class=\"hljs-comment\">// large_number &amp;operator+=(uint64_t n) { return (*this) += large_number(n);</span>\r\n    <span class=\"hljs-comment\">// }</span>\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * operator overload to perform addition\r\n     **/</span>\r\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">T</span>&gt;\r\n    <span class=\"hljs-keyword\">friend</span> large_number &amp;<span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-type\">const</span> large_number &amp;a, <span class=\"hljs-type\">const</span> T &amp;b) {\r\n        <span class=\"hljs-type\">static</span> large_number c = a;\r\n        c += b;\r\n        <span class=\"hljs-keyword\">return</span> c;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * assignment operator\r\n     **/</span>\r\n    large_number &amp;<span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-type\">const</span> large_number &amp;b) {\r\n        <span class=\"hljs-keyword\">this</span>-&gt;_digits = b._digits;\r\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * operator overload to increment\r\n     **/</span>\r\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">T</span>&gt;\r\n    large_number &amp;<span class=\"hljs-keyword\">operator</span>*=(<span class=\"hljs-type\">const</span> T n) {\r\n        <span class=\"hljs-built_in\">static_assert</span>(std::is_integral&lt;T&gt;::value,\r\n                      <span class=\"hljs-string\">&quot;Must be integer addition unsigned integer types.&quot;</span>);\r\n        <span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">multiply</span>(n);\r\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * returns i^th digit as an ASCII character\r\n     **/</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">char</span> <span class=\"hljs-title\">digit_char</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> i)</span> <span class=\"hljs-type\">const</span> </span>{\r\n        <span class=\"hljs-keyword\">return</span> _digits[<span class=\"hljs-built_in\">num_digits</span>() - i - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n    }\r\n\r\n <span class=\"hljs-keyword\">private</span>:\r\n    <span class=\"hljs-comment\">/**\r\n     * multiply large number with another integer and\r\n     * store the result in the same large number\r\n     **/</span>\r\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">T</span>&gt;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">multiply</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> T n)</span> </span>{\r\n        <span class=\"hljs-built_in\">static_assert</span>(std::is_integral&lt;T&gt;::value,\r\n                      <span class=\"hljs-string\">&quot;Can only have integer types.&quot;</span>);\r\n        <span class=\"hljs-comment\">// assert(!(std::is_signed&lt;T&gt;::value)); //, &quot;Implemented only for</span>\r\n        <span class=\"hljs-comment\">// unsigned integer types.&quot;);</span>\r\n\r\n        <span class=\"hljs-type\">size_t</span> i;\r\n        <span class=\"hljs-type\">uint64_t</span> carry = <span class=\"hljs-number\">0</span>, temp;\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">num_digits</span>(); i++) {\r\n            temp = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;((*<span class=\"hljs-keyword\">this</span>)[i]) * n;\r\n            temp += carry;\r\n            <span class=\"hljs-keyword\">if</span> (temp &lt; <span class=\"hljs-number\">10</span>) {\r\n                carry = <span class=\"hljs-number\">0</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                carry = temp / <span class=\"hljs-number\">10</span>;\r\n                temp = temp % <span class=\"hljs-number\">10</span>;\r\n            }\r\n            (*<span class=\"hljs-keyword\">this</span>)[i] = temp;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">while</span> (carry != <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">add_digit</span>(carry % <span class=\"hljs-number\">10</span>);\r\n            carry /= <span class=\"hljs-number\">10</span>;\r\n        }\r\n    }\r\n\r\n    std::vector&lt;<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span>&gt;\r\n        _digits; <span class=\"hljs-comment\">/**&lt; where individual digits are stored */</span>\r\n};\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span>  <span class=\"hljs-comment\">// MATH_LARGE_NUMBER_H_</span></span>\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}