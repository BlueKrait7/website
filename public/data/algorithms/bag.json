{
  "slug": "bag",
  "name": "Bag",
  "categories": [
    "datastructures",
    "bags"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\bags\\Bag.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\bags\\Bag.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.bags;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Iterator;\r\n<span class=\"hljs-keyword\">import</span> java.util.NoSuchElementException;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Collection which does not allow removing elements (only collect and iterate)\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> &lt;Element&gt; - the generic type of an element in this bag\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Bag</span>&lt;Element&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Iterable</span>&lt;Element&gt; {\r\n\r\n    <span class=\"hljs-keyword\">private</span> Node&lt;Element&gt; firstElement; <span class=\"hljs-comment\">// first element of the bag</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size; <span class=\"hljs-comment\">// size of bag</span>\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;Element&gt; {\r\n\r\n        <span class=\"hljs-keyword\">private</span> Element content;\r\n        <span class=\"hljs-keyword\">private</span> Node&lt;Element&gt; nextElement;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Create an empty bag\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Bag</span><span class=\"hljs-params\">()</span> {\r\n        firstElement = <span class=\"hljs-literal\">null</span>;\r\n        size = <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> true if this bag is empty, false otherwise\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">firstElement</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-literal\">null</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> the number of elements\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> size;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@param</span> element - the element to add\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(Element element)</span> {\r\n        Node&lt;Element&gt; oldfirst = firstElement;\r\n        firstElement = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>&lt;&gt;();\r\n        firstElement.content = element;\r\n        firstElement.nextElement = oldfirst;\r\n        size++;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Checks if the bag contains a specific element\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> element which you want to look for\r\n     * <span class=\"hljs-doctag\">@return</span> true if bag contains element, otherwise false\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">contains</span><span class=\"hljs-params\">(Element element)</span> {\r\n        Iterator&lt;Element&gt; iterator = <span class=\"hljs-built_in\">this</span>.iterator();\r\n        <span class=\"hljs-keyword\">while</span> (iterator.hasNext()) {\r\n            <span class=\"hljs-keyword\">if</span> (iterator.next().equals(element)) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * <span class=\"hljs-doctag\">@return</span> an iterator that iterates over the elements in this bag in\r\n     * arbitrary order\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> Iterator&lt;Element&gt; <span class=\"hljs-title function_\">iterator</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListIterator</span>&lt;&gt;(firstElement);\r\n    }\r\n\r\n    <span class=\"hljs-meta\">@SuppressWarnings(&quot;hiding&quot;)</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ListIterator</span>&lt;Element&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Iterator</span>&lt;Element&gt; {\r\n\r\n        <span class=\"hljs-keyword\">private</span> Node&lt;Element&gt; currentElement;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ListIterator</span><span class=\"hljs-params\">(Node&lt;Element&gt; firstElement)</span> {\r\n            currentElement = firstElement;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">hasNext</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> currentElement != <span class=\"hljs-literal\">null</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/**\r\n         * remove is not allowed in a bag\r\n         */</span>\r\n        <span class=\"hljs-meta\">@Override</span>\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UnsupportedOperationException</span>();\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title function_\">next</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">if</span> (!hasNext()) {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>();\r\n            }\r\n            <span class=\"hljs-type\">Element</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> currentElement.content;\r\n            currentElement = currentElement.nextElement;\r\n            <span class=\"hljs-keyword\">return</span> element;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * main-method for testing\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        Bag&lt;String&gt; bag = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Bag</span>&lt;&gt;();\r\n\r\n        bag.add(<span class=\"hljs-string\">&quot;1&quot;</span>);\r\n        bag.add(<span class=\"hljs-string\">&quot;1&quot;</span>);\r\n        bag.add(<span class=\"hljs-string\">&quot;2&quot;</span>);\r\n\r\n        System.out.println(<span class=\"hljs-string\">&quot;size of bag = &quot;</span> + bag.size());\r\n        <span class=\"hljs-keyword\">for</span> (String s : bag) {\r\n            System.out.println(s);\r\n        }\r\n\r\n        System.out.println(bag.contains(<span class=\"hljs-literal\">null</span>));\r\n        System.out.println(bag.contains(<span class=\"hljs-string\">&quot;1&quot;</span>));\r\n        System.out.println(bag.contains(<span class=\"hljs-string\">&quot;3&quot;</span>));\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo SÃ¡nchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "David Hinske",
      "email": "david.hinske@gmx.net",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}