{
  "slug": "carray",
  "name": "Carray",
  "categories": [
    "datastructures",
    "array"
  ],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures\\array\\carray.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\array\\carray.c",
      "code": "<span class=\"hljs-comment\">/*\r\n * CArray.c\r\n *\r\n * Author: Leonardo Vencovsky\r\n * Created on 19/03/2018\r\n *\r\n * Modified by: Leonardo Vencovsky\r\n * Last modified: 19/03/2018\r\n *\r\n * Array Implementations in C\r\n *\r\n * Compiled in Visual Studio 2017\r\n *\r\n */</span>\r\n\r\n<span class=\"hljs-comment\">/*\r\nReturn Codes\r\n\r\n-1 - Array Erased\r\n0 - Success\r\n1 - Invalid Position\r\n2 - Position already initialized (use update function)\r\n3 - Position not initialized (use insert function)\r\n4 - Position already empty\r\n5 - Array is full\r\n\r\n*/</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;carray.h&quot;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position1, <span class=\"hljs-type\">int</span> position2)</span>;\r\n\r\nCArray *<span class=\"hljs-title function_\">getCArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span>\r\n{\r\n    CArray *<span class=\"hljs-built_in\">array</span> = (CArray *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(CArray));\r\n    <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span> = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * size);\r\n    <span class=\"hljs-built_in\">array</span>-&gt;size = size;\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] = <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">insertValueCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position, <span class=\"hljs-type\">int</span> value)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt; <span class=\"hljs-built_in\">array</span>-&gt;size)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] == <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] = value;\r\n            <span class=\"hljs-keyword\">return</span> SUCCESS;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-keyword\">return</span> POSITION_INIT;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> INVALID_POSITION;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">removeValueCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt; <span class=\"hljs-built_in\">array</span>-&gt;size)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] != <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] = <span class=\"hljs-number\">0</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-keyword\">return</span> POSITION_EMPTY;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> INVALID_POSITION;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pushValueCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> value)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-type\">int</span> ok = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] == <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] = value;\r\n            ok = <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (ok == <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">return</span> SUCCESS;\r\n    <span class=\"hljs-keyword\">else</span>\r\n        <span class=\"hljs-keyword\">return</span> ARRAY_FULL;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">updateValueCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position, <span class=\"hljs-type\">int</span> value)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt; <span class=\"hljs-built_in\">array</span>-&gt;size)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] != <span class=\"hljs-number\">0</span>)\r\n        {\r\n            <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] = value;\r\n            <span class=\"hljs-keyword\">return</span> SUCCESS;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-keyword\">return</span> POSITION_NOT_INIT;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> INVALID_POSITION;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">eraseCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] = <span class=\"hljs-number\">0</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">switchValuesCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position1, <span class=\"hljs-type\">int</span> position2)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (position1 &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position1 &lt; <span class=\"hljs-built_in\">array</span>-&gt;size &amp;&amp; position2 &gt;= <span class=\"hljs-number\">0</span> &amp;&amp;\r\n        position2 &lt; <span class=\"hljs-built_in\">array</span>-&gt;size)\r\n    {\r\n        <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position1];\r\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position1] = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position2];\r\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position2] = temp;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> INVALID_POSITION;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">reverseCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size / <span class=\"hljs-number\">2</span>; i++)\r\n    {\r\n        swap(<span class=\"hljs-built_in\">array</span>, i, <span class=\"hljs-built_in\">array</span>-&gt;size - i - <span class=\"hljs-number\">1</span>);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> SUCCESS;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">displayCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nC ARRAY\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i]);\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">blenderCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\r\n{\r\n    srand(time(<span class=\"hljs-literal\">NULL</span>) * <span class=\"hljs-built_in\">array</span>-&gt;size);\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-type\">int</span> total = <span class=\"hljs-built_in\">array</span>-&gt;size * <span class=\"hljs-number\">100</span>;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; total; i++)\r\n    {\r\n        swap(<span class=\"hljs-built_in\">array</span>, rand() % <span class=\"hljs-built_in\">array</span>-&gt;size, rand() % <span class=\"hljs-built_in\">array</span>-&gt;size);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\nCArray *<span class=\"hljs-title function_\">getCopyCArray</span><span class=\"hljs-params\">(CArray *arr)</span>\r\n{\r\n    CArray *<span class=\"hljs-built_in\">array</span> = (CArray *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(CArray));\r\n    <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span> = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * arr-&gt;size);\r\n    <span class=\"hljs-built_in\">array</span>-&gt;size = arr-&gt;size;\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; arr-&gt;size; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] = arr-&gt;<span class=\"hljs-built_in\">array</span>[i];\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position1, <span class=\"hljs-type\">int</span> position2)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position1];\r\n    <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position1] = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position2];\r\n    <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position2] = temp;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bubbleSortCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, j;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size - <span class=\"hljs-number\">1</span>; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">array</span>-&gt;size - i - <span class=\"hljs-number\">1</span>; j++)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j] &gt; <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j + <span class=\"hljs-number\">1</span>])\r\n            {\r\n                swap(<span class=\"hljs-built_in\">array</span>, j, j + <span class=\"hljs-number\">1</span>);\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">selectionSortCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, j, min;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size - <span class=\"hljs-number\">1</span>; i++)\r\n    {\r\n        min = i;\r\n        <span class=\"hljs-keyword\">for</span> (j = i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; j++)\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j] &lt; <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[min])\r\n                min = j;\r\n        swap(<span class=\"hljs-built_in\">array</span>, min, i);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">insertionSortCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, j, num;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\r\n    {\r\n        num = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i];\r\n        j = i - <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j] &gt; num)\r\n        {\r\n            <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j];\r\n            j--;\r\n        }\r\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j + <span class=\"hljs-number\">1</span>] = num;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">valueOcurranceCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> value)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, total = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] == value)\r\n            total++;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> total;\r\n}\r\n\r\nCArray *<span class=\"hljs-title function_\">valuePositionsCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> value)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, j = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">int</span> total = valueOcurranceCArray(<span class=\"hljs-built_in\">array</span>, value);\r\n    CArray *resultArray = getCArray(total);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] == value)\r\n        {\r\n            <span class=\"hljs-comment\">// Hopefully this won&#x27;t overflow</span>\r\n            resultArray-&gt;<span class=\"hljs-built_in\">array</span>[j] = i;\r\n            j++;\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> resultArray;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMinCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-type\">int</span> min = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>];\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] &lt; min)\r\n        {\r\n            min = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i];\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> min;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMaxCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-type\">int</span> max = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>];\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] &gt; max)\r\n        {\r\n            max = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i];\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> max;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Yannick Brenning",
      "email": "90418998+ybrenning@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ravi Shankar Reddy B",
      "email": "ravishankarbommana@gmail.com",
      "commits": 1
    },
    {
      "name": "A Silent Cat",
      "email": "silentcat@protonmail.com",
      "commits": 2
    },
    {
      "name": "Leonardo",
      "email": "lvenk26@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}