{
  "slug": "heap-generic",
  "name": "Heap Generic",
  "categories": [
    "datastructures",
    "heap"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\heap\\heap_generic.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\heap\\heap_generic.py",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Heap</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    A generic Heap class, can be used as min or max by passing the key function\r\n    accordingly.\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, key=<span class=\"hljs-literal\">None</span></span>):\r\n        <span class=\"hljs-comment\"># Stores actual heap items.</span>\r\n        self.arr = <span class=\"hljs-built_in\">list</span>()\r\n        <span class=\"hljs-comment\"># Stores indexes of each item for supporting updates and deletion.</span>\r\n        self.pos_map = {}\r\n        <span class=\"hljs-comment\"># Stores current size of heap.</span>\r\n        self.size = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-comment\"># Stores function used to evaluate the score of an item on which basis ordering</span>\r\n        <span class=\"hljs-comment\"># will be done.</span>\r\n        self.key = key <span class=\"hljs-keyword\">or</span> (<span class=\"hljs-keyword\">lambda</span> x: x)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_parent</span>(<span class=\"hljs-params\">self, i</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns parent index of given index if exists else None&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>((i - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">if</span> i &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_left</span>(<span class=\"hljs-params\">self, i</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns left-child-index of given index if exists else None&quot;&quot;&quot;</span>\r\n        left = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">return</span> left <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt; left &lt; self.size <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_right</span>(<span class=\"hljs-params\">self, i</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns right-child-index of given index if exists else None&quot;&quot;&quot;</span>\r\n        right = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>)\r\n        <span class=\"hljs-keyword\">return</span> right <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt; right &lt; self.size <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_swap</span>(<span class=\"hljs-params\">self, i, j</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Performs changes required for swapping two elements in the heap&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-comment\"># First update the indexes of the items in index map.</span>\r\n        self.pos_map[self.arr[i][<span class=\"hljs-number\">0</span>]], self.pos_map[self.arr[j][<span class=\"hljs-number\">0</span>]] = (\r\n            self.pos_map[self.arr[j][<span class=\"hljs-number\">0</span>]],\r\n            self.pos_map[self.arr[i][<span class=\"hljs-number\">0</span>]],\r\n        )\r\n        <span class=\"hljs-comment\"># Then swap the items in the list.</span>\r\n        self.arr[i], self.arr[j] = self.arr[j], self.arr[i]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_cmp</span>(<span class=\"hljs-params\">self, i, j</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Compares the two items using default comparison&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.arr[i][<span class=\"hljs-number\">1</span>] &lt; self.arr[j][<span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_get_valid_parent</span>(<span class=\"hljs-params\">self, i</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Returns index of valid parent as per desired ordering among given index and\r\n        both it&#x27;s children\r\n        &quot;&quot;&quot;</span>\r\n        left = self._left(i)\r\n        right = self._right(i)\r\n        valid_parent = i\r\n\r\n        <span class=\"hljs-keyword\">if</span> left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> self._cmp(left, valid_parent):\r\n            valid_parent = left\r\n        <span class=\"hljs-keyword\">if</span> right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> self._cmp(right, valid_parent):\r\n            valid_parent = right\r\n\r\n        <span class=\"hljs-keyword\">return</span> valid_parent\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_heapify_up</span>(<span class=\"hljs-params\">self, index</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Fixes the heap in upward direction of given index&quot;&quot;&quot;</span>\r\n        parent = self._parent(index)\r\n        <span class=\"hljs-keyword\">while</span> parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> self._cmp(index, parent):\r\n            self._swap(index, parent)\r\n            index, parent = parent, self._parent(parent)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_heapify_down</span>(<span class=\"hljs-params\">self, index</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Fixes the heap in downward direction of given index&quot;&quot;&quot;</span>\r\n        valid_parent = self._get_valid_parent(index)\r\n        <span class=\"hljs-keyword\">while</span> valid_parent != index:\r\n            self._swap(index, valid_parent)\r\n            index, valid_parent = valid_parent, self._get_valid_parent(valid_parent)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_item</span>(<span class=\"hljs-params\">self, item, item_value</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Updates given item value in heap if present&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> item <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.pos_map:\r\n            <span class=\"hljs-keyword\">return</span>\r\n        index = self.pos_map[item]\r\n        self.arr[index] = [item, self.key(item_value)]\r\n        <span class=\"hljs-comment\"># Make sure heap is right in both up and down direction.</span>\r\n        <span class=\"hljs-comment\"># Ideally only one of them will make any change.</span>\r\n        self._heapify_up(index)\r\n        self._heapify_down(index)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_item</span>(<span class=\"hljs-params\">self, item</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Deletes given item from heap if present&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> item <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.pos_map:\r\n            <span class=\"hljs-keyword\">return</span>\r\n        index = self.pos_map[item]\r\n        <span class=\"hljs-keyword\">del</span> self.pos_map[item]\r\n        self.arr[index] = self.arr[self.size - <span class=\"hljs-number\">1</span>]\r\n        self.pos_map[self.arr[self.size - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]] = index\r\n        self.size -= <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-comment\"># Make sure heap is right in both up and down direction. Ideally only one</span>\r\n        <span class=\"hljs-comment\"># of them will make any change- so no performance loss in calling both.</span>\r\n        <span class=\"hljs-keyword\">if</span> self.size &gt; index:\r\n            self._heapify_up(index)\r\n            self._heapify_down(index)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_item</span>(<span class=\"hljs-params\">self, item, item_value</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Inserts given item with given value in heap&quot;&quot;&quot;</span>\r\n        arr_len = <span class=\"hljs-built_in\">len</span>(self.arr)\r\n        <span class=\"hljs-keyword\">if</span> arr_len == self.size:\r\n            self.arr.append([item, self.key(item_value)])\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.arr[self.size] = [item, self.key(item_value)]\r\n        self.pos_map[item] = self.size\r\n        self.size += <span class=\"hljs-number\">1</span>\r\n        self._heapify_up(self.size - <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_top</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;Returns top item tuple (Calculated value, item) from heap if present&quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.arr[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">if</span> self.size <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extract_top</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Return top item tuple (Calculated value, item) from heap and removes it as well\r\n        if present\r\n        &quot;&quot;&quot;</span>\r\n        top_item_tuple = self.get_top()\r\n        <span class=\"hljs-keyword\">if</span> top_item_tuple:\r\n            self.delete_item(top_item_tuple[<span class=\"hljs-number\">0</span>])\r\n        <span class=\"hljs-keyword\">return</span> top_item_tuple\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_heap</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; h = Heap()  # Max-heap\r\n    &gt;&gt;&gt; h.insert_item(5, 34)\r\n    &gt;&gt;&gt; h.insert_item(6, 31)\r\n    &gt;&gt;&gt; h.insert_item(7, 37)\r\n    &gt;&gt;&gt; h.get_top()\r\n    [7, 37]\r\n    &gt;&gt;&gt; h.extract_top()\r\n    [7, 37]\r\n    &gt;&gt;&gt; h.extract_top()\r\n    [5, 34]\r\n    &gt;&gt;&gt; h.extract_top()\r\n    [6, 31]\r\n    &gt;&gt;&gt; h = Heap(key=lambda x: -x)  # Min heap\r\n    &gt;&gt;&gt; h.insert_item(5, 34)\r\n    &gt;&gt;&gt; h.insert_item(6, 31)\r\n    &gt;&gt;&gt; h.insert_item(7, 37)\r\n    &gt;&gt;&gt; h.get_top()\r\n    [6, -31]\r\n    &gt;&gt;&gt; h.extract_top()\r\n    [6, -31]\r\n    &gt;&gt;&gt; h.extract_top()\r\n    [5, -34]\r\n    &gt;&gt;&gt; h.extract_top()\r\n    [7, -37]\r\n    &gt;&gt;&gt; h.insert_item(8, 45)\r\n    &gt;&gt;&gt; h.insert_item(9, 40)\r\n    &gt;&gt;&gt; h.insert_item(10, 50)\r\n    &gt;&gt;&gt; h.get_top()\r\n    [9, -40]\r\n    &gt;&gt;&gt; h.update_item(10, 30)\r\n    &gt;&gt;&gt; h.get_top()\r\n    [10, -30]\r\n    &gt;&gt;&gt; h.delete_item(10)\r\n    &gt;&gt;&gt; h.get_top()\r\n    [9, -40]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">pass</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Níkolas Vargas",
      "email": "vargasnikolass@gmail.com",
      "commits": 1
    },
    {
      "name": "Saurabh Goyal",
      "email": "saurabh.2561@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}