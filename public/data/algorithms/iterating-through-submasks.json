{
  "slug": "iterating-through-submasks",
  "name": "Iterating Through Submasks",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming\\iterating_through_submasks.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming\\iterating_through_submasks.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nAuthor : Syed Faizan (3rd Year Student IIIT Pune)\r\ngithub : faizan2700\r\nYou are given a bitmask m and you want to efficiently iterate through all of\r\nits submasks. The mask s is submask of m if only bits that were included in\r\nbitmask are set\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">list_of_submasks</span>(<span class=\"hljs-params\">mask: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Args:\r\n        mask : number which shows mask ( always integer &gt; 0, zero does not have any\r\n            submasks )\r\n\r\n    Returns:\r\n        all_submasks : the list of submasks of mask (mask s is called submask of mask\r\n        m if only bits that were included in original mask are set\r\n\r\n    Raises:\r\n        AssertionError: mask not positive integer\r\n\r\n    &gt;&gt;&gt; list_of_submasks(15)\r\n    [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n    &gt;&gt;&gt; list_of_submasks(13)\r\n    [13, 12, 9, 8, 5, 4, 1]\r\n    &gt;&gt;&gt; list_of_submasks(-7)  # doctest: +ELLIPSIS\r\n    Traceback (most recent call last):\r\n        ...\r\n    AssertionError: mask needs to be positive integer, your input -7\r\n    &gt;&gt;&gt; list_of_submasks(0)  # doctest: +ELLIPSIS\r\n    Traceback (most recent call last):\r\n        ...\r\n    AssertionError: mask needs to be positive integer, your input 0\r\n\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">assert</span> (\r\n        <span class=\"hljs-built_in\">isinstance</span>(mask, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> mask &gt; <span class=\"hljs-number\">0</span>\r\n    ), <span class=\"hljs-string\">f&quot;mask needs to be positive integer, your input <span class=\"hljs-subst\">{mask}</span>&quot;</span>\r\n\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    first submask iterated will be mask itself then operation will be performed\r\n    to get other submasks till we reach empty submask that is zero ( zero is not\r\n    included in final submasks list )\r\n    &quot;&quot;&quot;</span>\r\n    all_submasks = []\r\n    submask = mask\r\n\r\n    <span class=\"hljs-keyword\">while</span> submask:\r\n        all_submasks.append(submask)\r\n        submask = (submask - <span class=\"hljs-number\">1</span>) &amp; mask\r\n\r\n    <span class=\"hljs-keyword\">return</span> all_submasks\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "CarsonHam",
      "email": "carson.ham@utexas.edu",
      "commits": 1
    },
    {
      "name": "faizan2700",
      "email": "46817346+faizan2700@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}