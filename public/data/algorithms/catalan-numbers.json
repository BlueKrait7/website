{
  "slug": "catalan-numbers",
  "name": "Catalan Numbers",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming\\catalan_numbers.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming\\catalan_numbers.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nPrint all the Catalan numbers from 0 to n, n being the user input.\r\n\r\n * The Catalan numbers are a sequence of positive integers that\r\n * appear in many counting problems in combinatorics [1]. Such\r\n * problems include counting [2]:\r\n * - The number of Dyck words of length 2n\r\n * - The number well-formed expressions with n pairs of parentheses\r\n *   (e.g., `()()` is valid but `())(` is not)\r\n * - The number of different ways n + 1 factors can be completely\r\n *   parenthesized (e.g., for n = 2, C(n) = 2 and (ab)c and a(bc)\r\n *   are the two valid ways to parenthesize.\r\n * - The number of full binary trees with n + 1 leaves\r\n\r\n * A Catalan number satisfies the following recurrence relation\r\n * which we will use in this algorithm [1].\r\n * C(0) = C(1) = 1\r\n * C(n) = sum(C(i).C(n-i-1)), from i = 0 to n-1\r\n\r\n * In addition, the n-th Catalan number can be calculated using\r\n * the closed form formula below [1]:\r\n * C(n) = (1 / (n + 1)) * (2n choose n)\r\n\r\n * Sources:\r\n *  [1] https://brilliant.org/wiki/catalan-numbers/\r\n *  [2] https://en.wikipedia.org/wiki/Catalan_number\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">catalan_numbers</span>(<span class=\"hljs-params\">upper_limit: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-string\">&quot;list[int]&quot;</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return a list of the Catalan number sequence from 0 through `upper_limit`.\r\n\r\n    &gt;&gt;&gt; catalan_numbers(5)\r\n    [1, 1, 2, 5, 14, 42]\r\n    &gt;&gt;&gt; catalan_numbers(2)\r\n    [1, 1, 2]\r\n    &gt;&gt;&gt; catalan_numbers(-1)\r\n    Traceback (most recent call last):\r\n    ValueError: Limit for the Catalan sequence must be ≥ 0\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> upper_limit &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Limit for the Catalan sequence must be ≥ 0&quot;</span>)\r\n\r\n    catalan_list = [<span class=\"hljs-number\">0</span>] * (upper_limit + <span class=\"hljs-number\">1</span>)\r\n\r\n    <span class=\"hljs-comment\"># Base case: C(0) = C(1) = 1</span>\r\n    catalan_list[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">if</span> upper_limit &gt; <span class=\"hljs-number\">0</span>:\r\n        catalan_list[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-comment\"># Recurrence relation: C(i) = sum(C(j).C(i-j-1)), from j = 0 to i</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, upper_limit + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i):\r\n            catalan_list[i] += catalan_list[j] * catalan_list[i - j - <span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-keyword\">return</span> catalan_list\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n********* Catalan Numbers Using Dynamic Programming ************\\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n*** Enter -1 at any time to quit ***&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nEnter the upper limit (≥ 0) for the Catalan number sequence: &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n            N = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>().strip())\r\n            <span class=\"hljs-keyword\">if</span> N &lt; <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n********* Goodbye!! ************&quot;</span>)\r\n                <span class=\"hljs-keyword\">break</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;The Catalan numbers from 0 through <span class=\"hljs-subst\">{N}</span> are:&quot;</span>)\r\n                <span class=\"hljs-built_in\">print</span>(catalan_numbers(N))\r\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Try another upper limit for the sequence: &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)\r\n    <span class=\"hljs-keyword\">except</span> (NameError, ValueError):\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n********* Invalid input, goodbye! ************\\n&quot;</span>)\r\n\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming\\catalan_numbers.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\catalan_numbers.cpp",
      "code": "<span class=\"hljs-comment\">/** Print all the Catalan numbers from 0 to n, n being the user input.\r\n\r\n * A Catalan number satifies the following two properties:\r\n * C(0) = C(1) = 1; C(n) = sum(C(i).C(n-i-1)), from i = 0 to n-1\r\n * Read more about Catalan numbers here:\r\n    https://en.wikipedia.org/wiki/Catalan_number\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\r\n\r\n<span class=\"hljs-type\">int</span> *cat;  <span class=\"hljs-comment\">// global array to hold catalan numbers</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">catalan_dp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-comment\">/** Using the tabulation technique in dynamic programming,\r\n        this function computes the first `n+1` Catalan numbers\r\n\r\n        Parameter\r\n        ---------\r\n        n: The number of catalan numbers to be computed.\r\n\r\n        Returns\r\n        -------\r\n        cat[n]: An array containing the first `n+1` Catalan numbers\r\n    */</span>\r\n\r\n    <span class=\"hljs-comment\">// By definition, the first two Catalan numbers are 1</span>\r\n    cat[<span class=\"hljs-number\">0</span>] = cat[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-comment\">// Compute the remaining numbers from index 2 to index n, using tabulation</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++) {\r\n        cat[i] = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++)\r\n            cat[i] += cat[j] * cat[i - j - <span class=\"hljs-number\">1</span>];  <span class=\"hljs-comment\">// applying the definition here</span>\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Return the result</span>\r\n    <span class=\"hljs-keyword\">return</span> cat[n];\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\r\n    <span class=\"hljs-type\">int</span> n;\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter n: &quot;</span>;\r\n    cin &gt;&gt; n;\r\n\r\n    cat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[n + <span class=\"hljs-number\">1</span>];\r\n\r\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Catalan numbers from 0 to &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; are:\\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= n; i++) {\r\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;catalan (&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;) = &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">catalan_dp</span>(i) &lt;&lt; endl;\r\n        <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> Since `cat` is a global array, calling `catalan_dp`</span>\r\n        <span class=\"hljs-comment\">// repeatedly will not recompute the the values already computed</span>\r\n        <span class=\"hljs-comment\">// as in case of pre-computed values, the array will simply return them,</span>\r\n        <span class=\"hljs-comment\">// instead of recomputing them.</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Sample Test Case:\r\n\r\n$ cd &quot;Dynamic Programming&quot;\r\n$ g++ Catalan-Numbers.cpp\r\n$ ./a.exe\r\n\r\nEnter n: 5\r\nCatalan numbers from 0 to 5 are:\r\ncatalan (0) = 1\r\ncatalan (1) = 1\r\ncatalan (2) = 2\r\ncatalan (3) = 5\r\ncatalan (4) = 14\r\ncatalan (5) = 42\r\n\r\n*/</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Md Rafi Akhtar",
      "email": "alimdrafi@gmail.com",
      "commits": 1
    },
    {
      "name": "Lakshay Akula",
      "email": "Kommandat@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}