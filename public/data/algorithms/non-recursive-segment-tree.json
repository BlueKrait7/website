{
  "slug": "non-recursive-segment-tree",
  "name": "Non Recursive Segment Tree",
  "categories": [
    "datastructures",
    "binarytree"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\binary_tree\\non_recursive_segment_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\binary_tree\\non_recursive_segment_tree.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nA non-recursive Segment Tree implementation with range query and single element update,\r\nworks virtually with any list of the same type of elements with a &quot;commutative&quot;\r\ncombiner.\r\n\r\nExplanation:\r\nhttps://www.geeksforgeeks.org/iterative-segment-tree-range-minimum-query/\r\nhttps://www.geeksforgeeks.org/segment-tree-efficient-implementation/\r\n\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>SegmentTree([1, 2, 3], lambda a, b: a + b).query(0, 2)\r\n6\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>SegmentTree([3, 1, 2], min).query(0, 2)\r\n1\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>SegmentTree([2, 3, 1], max).query(0, 2)\r\n3\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st = SegmentTree([1, 5, 7, -1, 6], lambda a, b: a + b)\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.update(1, -1)\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.update(2, 3)\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.query(1, 2)\r\n2\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.query(1, 1)\r\n-1\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.update(4, 1)\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.query(3, 4)\r\n0\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st = SegmentTree([[1, 2, 3], [3, 2, 1], [1, 1, 1]], lambda a, b: [a[i] + b[i] for i\r\n<span class=\"hljs-meta\">... </span>                                                                  in range(len(a))])\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.query(0, 1)\r\n[4, 4, 4]\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.query(1, 2)\r\n[4, 3, 2]\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.update(1, [-1, -1, -1])\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.query(1, 2)\r\n[0, 0, 0]\r\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>st.query(0, 2)\r\n[1, 2, 3]\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>, <span class=\"hljs-type\">Callable</span>, <span class=\"hljs-type\">Generic</span>, TypeVar\r\n\r\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SegmentTree</span>(<span class=\"hljs-type\">Generic</span>[T]):\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, arr: <span class=\"hljs-built_in\">list</span>[T], fnc: <span class=\"hljs-type\">Callable</span>[[T, T], T]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Segment Tree constructor, it works just with commutative combiner.\r\n        :param arr: list of elements for the segment tree\r\n        :param fnc: commutative function for combine two elements\r\n\r\n        &gt;&gt;&gt; SegmentTree([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], lambda a, b: f&#x27;{a}{b}&#x27;).query(0, 2)\r\n        &#x27;abc&#x27;\r\n        &gt;&gt;&gt; SegmentTree([(1, 2), (2, 3), (3, 4)],\r\n        ...             lambda a, b: (a[0] + b[0], a[1] + b[1])).query(0, 2)\r\n        (6, 9)\r\n        &quot;&quot;&quot;</span>\r\n        any_type: <span class=\"hljs-type\">Any</span> | T = <span class=\"hljs-literal\">None</span>\r\n\r\n        self.N: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">len</span>(arr)\r\n        self.st: <span class=\"hljs-built_in\">list</span>[T] = [any_type <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.N)] + arr\r\n        self.fn = fnc\r\n        self.build()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.N - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>):\r\n            self.st[p] = self.fn(self.st[p * <span class=\"hljs-number\">2</span>], self.st[p * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">self, p: <span class=\"hljs-built_in\">int</span>, v: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Update an element in log(N) time\r\n        :param p: position to be update\r\n        :param v: new value\r\n\r\n        &gt;&gt;&gt; st = SegmentTree([3, 1, 2, 4], min)\r\n        &gt;&gt;&gt; st.query(0, 3)\r\n        1\r\n        &gt;&gt;&gt; st.update(2, -1)\r\n        &gt;&gt;&gt; st.query(0, 3)\r\n        -1\r\n        &quot;&quot;&quot;</span>\r\n        p += self.N\r\n        self.st[p] = v\r\n        <span class=\"hljs-keyword\">while</span> p &gt; <span class=\"hljs-number\">1</span>:\r\n            p = p // <span class=\"hljs-number\">2</span>\r\n            self.st[p] = self.fn(self.st[p * <span class=\"hljs-number\">2</span>], self.st[p * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">query</span>(<span class=\"hljs-params\">self, l: <span class=\"hljs-built_in\">int</span>, r: <span class=\"hljs-built_in\">int</span></span>) -&gt; T | <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># noqa: E741</span>\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Get range query value in log(N) time\r\n        :param l: left element index\r\n        :param r: right element index\r\n        :return: element combined in the range [l, r]\r\n\r\n        &gt;&gt;&gt; st = SegmentTree([1, 2, 3, 4], lambda a, b: a + b)\r\n        &gt;&gt;&gt; st.query(0, 2)\r\n        6\r\n        &gt;&gt;&gt; st.query(1, 2)\r\n        5\r\n        &gt;&gt;&gt; st.query(0, 3)\r\n        10\r\n        &gt;&gt;&gt; st.query(2, 3)\r\n        7\r\n        &quot;&quot;&quot;</span>\r\n        l, r = l + self.N, r + self.N  <span class=\"hljs-comment\"># noqa: E741</span>\r\n\r\n        res: T | <span class=\"hljs-literal\">None</span> = <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">while</span> l &lt;= r:  <span class=\"hljs-comment\"># noqa: E741</span>\r\n            <span class=\"hljs-keyword\">if</span> l % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>:\r\n                res = self.st[l] <span class=\"hljs-keyword\">if</span> res <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">else</span> self.fn(res, self.st[l])\r\n            <span class=\"hljs-keyword\">if</span> r % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\r\n                res = self.st[r] <span class=\"hljs-keyword\">if</span> res <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">else</span> self.fn(res, self.st[r])\r\n            l, r = (l + <span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">2</span>, (r - <span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">return</span> res\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> reduce\r\n\r\n    test_array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, -<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">11</span>, -<span class=\"hljs-number\">12</span>]\r\n\r\n    test_updates = {\r\n        <span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">7</span>,\r\n        <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">2</span>,\r\n        <span class=\"hljs-number\">2</span>: <span class=\"hljs-number\">6</span>,\r\n        <span class=\"hljs-number\">3</span>: -<span class=\"hljs-number\">14</span>,\r\n        <span class=\"hljs-number\">4</span>: <span class=\"hljs-number\">5</span>,\r\n        <span class=\"hljs-number\">5</span>: <span class=\"hljs-number\">4</span>,\r\n        <span class=\"hljs-number\">6</span>: <span class=\"hljs-number\">7</span>,\r\n        <span class=\"hljs-number\">7</span>: -<span class=\"hljs-number\">10</span>,\r\n        <span class=\"hljs-number\">8</span>: <span class=\"hljs-number\">9</span>,\r\n        <span class=\"hljs-number\">9</span>: <span class=\"hljs-number\">10</span>,\r\n        <span class=\"hljs-number\">10</span>: <span class=\"hljs-number\">12</span>,\r\n        <span class=\"hljs-number\">11</span>: <span class=\"hljs-number\">1</span>,\r\n    }\r\n\r\n    min_segment_tree = SegmentTree(test_array, <span class=\"hljs-built_in\">min</span>)\r\n    max_segment_tree = SegmentTree(test_array, <span class=\"hljs-built_in\">max</span>)\r\n    sum_segment_tree = SegmentTree(test_array, <span class=\"hljs-keyword\">lambda</span> a, b: a + b)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_all_segments</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        Test all possible segments\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(test_array)):\r\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i, <span class=\"hljs-built_in\">len</span>(test_array)):\r\n                min_range = reduce(<span class=\"hljs-built_in\">min</span>, test_array[i : j + <span class=\"hljs-number\">1</span>])\r\n                max_range = reduce(<span class=\"hljs-built_in\">max</span>, test_array[i : j + <span class=\"hljs-number\">1</span>])\r\n                sum_range = reduce(<span class=\"hljs-keyword\">lambda</span> a, b: a + b, test_array[i : j + <span class=\"hljs-number\">1</span>])\r\n                <span class=\"hljs-keyword\">assert</span> min_range == min_segment_tree.query(i, j)\r\n                <span class=\"hljs-keyword\">assert</span> max_range == max_segment_tree.query(i, j)\r\n                <span class=\"hljs-keyword\">assert</span> sum_range == sum_segment_tree.query(i, j)\r\n\r\n    test_all_segments()\r\n\r\n    <span class=\"hljs-keyword\">for</span> index, value <span class=\"hljs-keyword\">in</span> test_updates.items():\r\n        test_array[index] = value\r\n        min_segment_tree.update(index, value)\r\n        max_segment_tree.update(index, value)\r\n        sum_segment_tree.update(index, value)\r\n        test_all_segments()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Dylan Buchi",
      "email": "devybuchi@gmail.com",
      "commits": 1
    },
    {
      "name": "CarsonHam",
      "email": "carson.ham@utexas.edu",
      "commits": 1
    },
    {
      "name": "Jonathan Alberth Quispe Fuentes",
      "email": "qf.jonathan@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}