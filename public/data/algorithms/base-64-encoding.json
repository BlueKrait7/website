{
  "slug": "base-64-encoding",
  "name": "Base 64 Encoding",
  "categories": [
    "ciphers"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "ciphers\\base64_encoding.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers\\base64_encoding.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @brief [Base64 Encoding and\r\n * Decoding](https://en.wikipedia.org/wiki/Base64)\r\n * @details In programming, [Base64](https://en.wikipedia.org/wiki/Base64) is a\r\n * group of binary-to-text encoding schemes that represent binary data (more\r\n * specifically, a sequence of 8-bit bytes) in an ASCII string format by\r\n * translating the data into a radix-64 representation. The term Base64\r\n * originates from a specific MIME content transfer encoding. Each non-final\r\n * Base64 digit represents exactly 6 bits of data. Three 8-bit bytes (i.e., a\r\n * total of 24 bits) can therefore be represented by four 6-bit Base64\r\n * digits.\r\n * @author [Ashish Daulatabad](https://github.com/AshishYUO)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>     <span class=\"hljs-comment\">/// for `std::array`</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for `assert` operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace ciphers\r\n * @brief Cipher algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> ciphers {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace base64_encoding\r\n * @brief Functions for [Base64 Encoding and\r\n * Decoding](https://en.wikipedia.org/wiki/Base64) implementation.\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> base64_encoding {\r\n<span class=\"hljs-comment\">// chars denoting the format for encoding and decoding array.</span>\r\n<span class=\"hljs-comment\">// This array is already decided by</span>\r\n<span class=\"hljs-comment\">// [RFC4648](https://tools.ietf.org/html/rfc4648#section-4) standard</span>\r\n<span class=\"hljs-type\">const</span> std::string chars =\r\n    <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;\r\n<span class=\"hljs-comment\">/**\r\n * @brief Base64 Encoder\r\n * @details Converts the given string to Base64 equivalent.\r\n * @param input Input as a string\r\n * @returns Base64 encoded string\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">base64_encode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;input)</span> </span>{\r\n    std::string base64_string;  <span class=\"hljs-comment\">/// Output of this function: base64 string</span>\r\n    <span class=\"hljs-comment\">// base64 deals with 6-bit chars encoded as per chars, so</span>\r\n    <span class=\"hljs-comment\">// we will always filter 6-bits from input.</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; input.<span class=\"hljs-built_in\">size</span>(); i += <span class=\"hljs-number\">3</span>) {\r\n        <span class=\"hljs-type\">char</span> first_byte = input[i];  <span class=\"hljs-comment\">/// First byte of the iteration</span>\r\n        <span class=\"hljs-comment\">// Take first six bits of first character.</span>\r\n        <span class=\"hljs-comment\">// Encode the first six bits with character defined in string `chars`</span>\r\n        base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[first_byte &gt;&gt; <span class=\"hljs-number\">2</span>]);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (i + <span class=\"hljs-number\">1</span> &lt; input.<span class=\"hljs-built_in\">size</span>()) {\r\n            <span class=\"hljs-type\">char</span> second_byte = input[i + <span class=\"hljs-number\">1</span>];  <span class=\"hljs-comment\">/// Second byte of the iteration</span>\r\n            <span class=\"hljs-comment\">// Take remaining two bits of first character, and four first bits</span>\r\n            <span class=\"hljs-comment\">// from second character Combine two numbers as 6-bit digits and</span>\r\n            <span class=\"hljs-comment\">// encode by array chars (first two bits of first byte and next four</span>\r\n            <span class=\"hljs-comment\">// of second byte)</span>\r\n            base64_string.<span class=\"hljs-built_in\">push_back</span>(\r\n                chars[(((first_byte &amp; <span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">4</span>) | ((second_byte &amp; <span class=\"hljs-number\">0xF0</span>) &gt;&gt; <span class=\"hljs-number\">4</span>))]);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (i + <span class=\"hljs-number\">2</span> &lt; input.<span class=\"hljs-built_in\">size</span>()) {\r\n                <span class=\"hljs-type\">char</span> third_byte = input[i + <span class=\"hljs-number\">2</span>];  <span class=\"hljs-comment\">/// Third byte of the iteration</span>\r\n                <span class=\"hljs-comment\">// Take remaining four bits of second character, and first two</span>\r\n                <span class=\"hljs-comment\">// bits from third character Combine two numbers as 6-bit digits</span>\r\n                <span class=\"hljs-comment\">// and encode by array chars (remaining four bits of second byte</span>\r\n                <span class=\"hljs-comment\">// and first two of third byte)</span>\r\n                base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[((third_byte &amp; <span class=\"hljs-number\">0xC0</span>) &gt;&gt; <span class=\"hljs-number\">6</span>) |\r\n                                              ((second_byte &amp; <span class=\"hljs-number\">0x0F</span>) &lt;&lt; <span class=\"hljs-number\">2</span>)]);\r\n                <span class=\"hljs-comment\">// Encode remaining 6-bit of third byte by array chars</span>\r\n                base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[(third_byte &amp; <span class=\"hljs-number\">0x3F</span>)]);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-comment\">// Take remaining four bits of second character as 6-bit number</span>\r\n                base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[((second_byte &amp; <span class=\"hljs-number\">0x0F</span>) &lt;&lt; <span class=\"hljs-number\">2</span>)]);\r\n                base64_string.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>);  <span class=\"hljs-comment\">// padding characters</span>\r\n            }\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">// Take remaining two bits of first character as 6-bit number</span>\r\n            base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[((first_byte &amp; <span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">4</span>)]);\r\n            base64_string.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>);  <span class=\"hljs-comment\">// padding characters</span>\r\n            base64_string.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>);  <span class=\"hljs-comment\">// padding characters</span>\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> base64_string;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief Utility function for finding index\r\n * @details Utility function for finding the position of a character in array\r\n * `chars`\r\n * @param c character to search in array `chars`\r\n * @returns integer denoting position of character in array `chars`\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint8_t</span> <span class=\"hljs-title\">find_idx</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> c)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (c &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>) {\r\n        <span class=\"hljs-keyword\">return</span> c - <span class=\"hljs-string\">&#x27;A&#x27;</span>;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>) {\r\n        <span class=\"hljs-keyword\">return</span> c - <span class=\"hljs-string\">&#x27;a&#x27;</span> + <span class=\"hljs-number\">26</span>;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c &gt;= <span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;9&#x27;</span>) {\r\n        <span class=\"hljs-keyword\">return</span> c - <span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-number\">52</span>;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">&#x27;+&#x27;</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">62</span>;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">&#x27;/&#x27;</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">63</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief Base64 Decoder\r\n * @details Decodes the Base64 string\r\n * @param base64_str Input as a Base64 string\r\n * @returns Base64 decoded string\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">base64_decode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string &amp;base64_str)</span> </span>{\r\n    std::string\r\n        base64_decoded;  <span class=\"hljs-comment\">/// Output of this function: base64 decoded string</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; base64_str.<span class=\"hljs-built_in\">size</span>(); i += <span class=\"hljs-number\">4</span>) {\r\n        <span class=\"hljs-comment\">/// First 6-bit representation of Base64</span>\r\n        <span class=\"hljs-type\">char</span> first_byte = base64_str[i];\r\n        <span class=\"hljs-comment\">/// Second 6-bit representation of Base64</span>\r\n        <span class=\"hljs-type\">char</span> second_byte = base64_str[i + <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-comment\">// Actual str characters are of 8 bits (or 1 byte):</span>\r\n        <span class=\"hljs-comment\">// :: 8 bits are decode by taking 6 bits from 1st byte of base64 string</span>\r\n        <span class=\"hljs-comment\">// and first 2 bits from 2nd byte of base64 string.</span>\r\n        <span class=\"hljs-type\">char</span> first_actual_byte = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">char</span>&gt;(\r\n            (<span class=\"hljs-built_in\">find_idx</span>(first_byte) &lt;&lt; <span class=\"hljs-number\">2</span>) | ((<span class=\"hljs-built_in\">find_idx</span>(second_byte)) &gt;&gt; <span class=\"hljs-number\">4</span>));\r\n        base64_decoded.<span class=\"hljs-built_in\">push_back</span>(first_actual_byte);\r\n        <span class=\"hljs-keyword\">if</span> (i + <span class=\"hljs-number\">2</span> &lt; base64_str.<span class=\"hljs-built_in\">size</span>() &amp;&amp; base64_str[i + <span class=\"hljs-number\">2</span>] != <span class=\"hljs-string\">&#x27;=&#x27;</span>) {\r\n            <span class=\"hljs-comment\">/// Third 6-bit representation of Base64</span>\r\n            <span class=\"hljs-type\">char</span> third_byte = base64_str[i + <span class=\"hljs-number\">2</span>];\r\n            <span class=\"hljs-comment\">// :: Next 8 bits are decode by taking remaining 4 bits from 2nd</span>\r\n            <span class=\"hljs-comment\">// byte of base64 string and first 4 bits from 3rd byte of base64</span>\r\n            <span class=\"hljs-comment\">// string.</span>\r\n            <span class=\"hljs-type\">char</span> second_actual_byte =\r\n                <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">char</span>&gt;(((<span class=\"hljs-built_in\">find_idx</span>(second_byte) &amp; <span class=\"hljs-number\">0x0F</span>) &lt;&lt; <span class=\"hljs-number\">4</span>) |\r\n                                  (<span class=\"hljs-built_in\">find_idx</span>(third_byte) &gt;&gt; <span class=\"hljs-number\">2</span>));\r\n            base64_decoded.<span class=\"hljs-built_in\">push_back</span>(second_actual_byte);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (i + <span class=\"hljs-number\">3</span> &lt; base64_str.<span class=\"hljs-built_in\">size</span>() &amp;&amp; base64_str[i + <span class=\"hljs-number\">3</span>] != <span class=\"hljs-string\">&#x27;=&#x27;</span>) {\r\n                <span class=\"hljs-comment\">/// Fourth 6-bit representation of Base64 string</span>\r\n                <span class=\"hljs-type\">char</span> fourth_byte = base64_str[i + <span class=\"hljs-number\">3</span>];\r\n                <span class=\"hljs-comment\">// :: Taking remaining 2 bits from 3rd byte of base64 string</span>\r\n                <span class=\"hljs-comment\">// and all 6 bits from 4th byte of base64 string.</span>\r\n                <span class=\"hljs-type\">char</span> third_actual_byte =\r\n                    <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">char</span>&gt;(((<span class=\"hljs-built_in\">find_idx</span>(third_byte) &amp; <span class=\"hljs-number\">0x03</span>) &lt;&lt; <span class=\"hljs-number\">6</span>) |\r\n                                      <span class=\"hljs-built_in\">find_idx</span>(fourth_byte));\r\n                base64_decoded.<span class=\"hljs-built_in\">push_back</span>(third_actual_byte);\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> base64_decoded;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace base64_encoding</span>\r\n}  <span class=\"hljs-comment\">// namespace ciphers</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self test-implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// 1st Test</span>\r\n    std::string str =\r\n        <span class=\"hljs-string\">&quot;To err is human, but to really foul things up you need a computer.&quot;</span>;\r\n    std::string base64_str = ciphers::base64_encoding::<span class=\"hljs-built_in\">base64_encode</span>(str);\r\n    std::string verify =\r\n        <span class=\"hljs-string\">&quot;VG8gZXJyIGlzIGh1bWFuLCBidXQgdG8gcmVhbGx5IGZvdWwgdGhpbmdzIHVwIHlvdSBuZW&quot;</span>\r\n        <span class=\"hljs-string\">&quot;VkIGEgY29tcHV0ZXIu&quot;</span>;\r\n    <span class=\"hljs-comment\">// verify encoding</span>\r\n    <span class=\"hljs-built_in\">assert</span>(base64_str == verify);\r\n    std::string original_str =\r\n        ciphers::base64_encoding::<span class=\"hljs-built_in\">base64_decode</span>(base64_str);\r\n    <span class=\"hljs-comment\">// verify decoding</span>\r\n    <span class=\"hljs-built_in\">assert</span>(original_str == str);\r\n\r\n    <span class=\"hljs-comment\">// 2nd Test from [Wikipedia](https://en.wikipedia.org/wiki/Base64)</span>\r\n    str =\r\n        <span class=\"hljs-string\">&quot;Man is distinguished, not only by his reason, but by this singular &quot;</span>\r\n        <span class=\"hljs-string\">&quot;passion from other animals, which is a lust of the mind, that by a &quot;</span>\r\n        <span class=\"hljs-string\">&quot;perseverance of delight in the continued and indefatigable generation &quot;</span>\r\n        <span class=\"hljs-string\">&quot;of knowledge, exceeds the short vehemence of any carnal pleasure.&quot;</span>;\r\n\r\n    base64_str = ciphers::base64_encoding::<span class=\"hljs-built_in\">base64_encode</span>(str);\r\n    verify =\r\n        <span class=\"hljs-string\">&quot;TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieS&quot;</span>\r\n        <span class=\"hljs-string\">&quot;B0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBh&quot;</span>\r\n        <span class=\"hljs-string\">&quot;IGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodC&quot;</span>\r\n        <span class=\"hljs-string\">&quot;BpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25v&quot;</span>\r\n        <span class=\"hljs-string\">&quot;d2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbG&quot;</span>\r\n        <span class=\"hljs-string\">&quot;Vhc3VyZS4=&quot;</span>;\r\n    <span class=\"hljs-comment\">// verify encoding</span>\r\n    <span class=\"hljs-built_in\">assert</span>(base64_str == verify);\r\n    original_str = ciphers::base64_encoding::<span class=\"hljs-built_in\">base64_decode</span>(base64_str);\r\n    <span class=\"hljs-comment\">// verify decoding</span>\r\n    <span class=\"hljs-built_in\">assert</span>(original_str == str);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Ashish Bhanu Daulatabad",
      "email": "supersonic12910@gmail.com",
      "commits": 1
    },
    {
      "name": "Hithru De Alwis",
      "email": "Hithrudealwis@gmail.com",
      "commits": 1
    },
    {
      "name": "Hafidh",
      "email": "32499116+hfz1337@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}