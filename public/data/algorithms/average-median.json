{
  "slug": "average-median",
  "name": "Average Median",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\average_median.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\average_median.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">median</span>(<span class=\"hljs-params\">nums: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">int</span> | <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Find median of a list of numbers.\r\n    Wiki: https://en.wikipedia.org/wiki/Median\r\n\r\n    &gt;&gt;&gt; median([0])\r\n    0\r\n    &gt;&gt;&gt; median([4, 1, 3, 2])\r\n    2.5\r\n    &gt;&gt;&gt; median([2, 70, 6, 50, 20, 8, 4])\r\n    8\r\n\r\n    Args:\r\n        nums: List of nums\r\n\r\n    Returns:\r\n        Median.\r\n    &quot;&quot;&quot;</span>\r\n    sorted_list = <span class=\"hljs-built_in\">sorted</span>(nums)\r\n    length = <span class=\"hljs-built_in\">len</span>(sorted_list)\r\n    mid_index = length &gt;&gt; <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> (\r\n        (sorted_list[mid_index] + sorted_list[mid_index - <span class=\"hljs-number\">1</span>]) / <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">if</span> length % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">else</span> sorted_list[mid_index]\r\n    )\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    },
    "javascript": {
      "dir": "Maths\\test\\AverageMedian.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\AverageMedian.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { averageMedian } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../AverageMedian&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;should return the median of an array of numbers:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> medianValue = <span class=\"hljs-title function_\">averageMedian</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>])\r\n  <span class=\"hljs-title function_\">expect</span>(medianValue).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">4</span>)\r\n})\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;should return the median of an array of numbers:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> medianValue = <span class=\"hljs-title function_\">averageMedian</span>([<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>])\r\n  <span class=\"hljs-title function_\">expect</span>(medianValue).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">8</span>)\r\n})\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;should return the median of an array of numbers:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> medianValue = <span class=\"hljs-title function_\">averageMedian</span>([<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">5</span>])\r\n  <span class=\"hljs-title function_\">expect</span>(medianValue).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">11</span>)\r\n})\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;should return the median of an array of numbers:&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> medianValue = <span class=\"hljs-title function_\">averageMedian</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>])\r\n  <span class=\"hljs-title function_\">expect</span>(medianValue).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">3.5</span>)\r\n})\r\n"
    },
    "ruby": {
      "dir": "maths\\average_median.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths\\average_median.rb",
      "code": "<span class=\"hljs-comment\"># A ruby program to find average median</span>\r\n<span class=\"hljs-comment\"># Reference: https://dev.to/colerau/how-to-find-the-median-and-mean-of-an-array-in-ruby-4f04</span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">AverageMedian</span></span>\r\n  def <span class=\"hljs-keyword\">self</span>.average_median(n, *array)\r\n    <span class=\"hljs-keyword\">if</span> n.instance_of? Integer\r\n      <span class=\"hljs-keyword\">if</span> n == array.size\r\n        array.sort\r\n        <span class=\"hljs-keyword\">if</span> array.size.even?\r\n          mid_element_1 = array.size / <span class=\"hljs-number\">2</span>\r\n          mid_element_2 = mid_element_1 + <span class=\"hljs-number\">1</span>\r\n          puts <span class=\"hljs-string\">&quot;The average median of the following elements <span class=\"hljs-subst\">#{array}</span> is <span class=\"hljs-subst\">#{(array[mid_element_1 - <span class=\"hljs-number\">1</span>] + array[mid_element_2 - <span class=\"hljs-number\">1</span>]) / <span class=\"hljs-number\">2</span>}</span>.&quot;</span>\r\n        <span class=\"hljs-keyword\">else</span>\r\n          mid_element = (array.size + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>\r\n          puts <span class=\"hljs-string\">&quot;The average median of the following elements <span class=\"hljs-subst\">#{array}</span> is <span class=\"hljs-subst\">#{array[mid_element - <span class=\"hljs-number\">1</span>]}</span>.&quot;</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n      <span class=\"hljs-keyword\">else</span>\r\n        puts <span class=\"hljs-string\">&quot;Provide the required <span class=\"hljs-subst\">#{n}</span> elements properly!&quot;</span>\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">else</span>\r\n      raise\r\n    <span class=\"hljs-keyword\">end</span>\r\n  <span class=\"hljs-keyword\">rescue</span> StandardError\r\n    puts <span class=\"hljs-string\">&#x27;Error: Please provide number only!&#x27;</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Valid inputs</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\nputs AverageMedian.average_median(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)\r\n<span class=\"hljs-comment\"># The average median of the following elements [3, 1] is 2.</span>\r\n\r\nputs AverageMedian.average_median(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>)\r\n<span class=\"hljs-comment\"># The average median of the following elements [1, 2, 3, 4, 5] is 3.</span>\r\n\r\nputs AverageMedian.average_median(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\r\n<span class=\"hljs-comment\"># The average median of the following elements [2, 2, 2] is 2.</span>\r\n\r\nputs AverageMedian.average_median(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\r\n<span class=\"hljs-comment\"># The average median of the following elements [5] is 5.</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Invalid inputs</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\nputs AverageMedian.average_median(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\r\n<span class=\"hljs-comment\"># Provide the required 2 elements properly!</span>\r\n\r\nputs AverageMedian.average_median(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>)\r\n<span class=\"hljs-comment\"># Traceback (most recent call last):</span>\r\n<span class=\"hljs-comment\">#         4: from /Users/voliveira/.rvm/rubies/ruby-2.7.0/bin/irb:23:in `&lt;main&gt;&#x27;</span>\r\n<span class=\"hljs-comment\">#         3: from /Users/voliveira/.rvm/rubies/ruby-2.7.0/bin/irb:23:in `load&#x27;</span>\r\n<span class=\"hljs-comment\">#         2: from /Users/voliveira/.rvm/rubies/ruby-2.7.0/lib/ruby/gems/2.7.0/gems/irb-1.2.1/exe/irb:11:in `&lt;top (required)&gt;&#x27;</span>\r\n<span class=\"hljs-comment\">#         1: from (irb):30</span>\r\n<span class=\"hljs-comment\"># NameError (undefined local variable or method `verageMedian&#x27; for main:Object)</span>\r\n\r\nputs AverageMedian.average_median(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\r\n<span class=\"hljs-comment\"># Error: Please provide number only!</span>\r\n"
    },
    "julia": {
      "dir": "src\\math\\average_median.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\math\\average_median.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    median(nums)\r\n\r\nFinds median of a vector of numbers\r\n\r\n## Example\r\n\r\n```julia\r\nmedian([2,1,3,4])                   # returns 2.5\r\nmedian([2, 70, 6, 50, 20, 8, 4])    # returns 8\r\nmedian([0])                         # returns 0\r\n```\r\n\r\nContributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee) and [Rratic](https://github.com/Rratic)\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">function</span> median(nums::<span class=\"hljs-built_in\">Vector</span>{T})<span class=\"hljs-keyword\">where</span> T&lt;:<span class=\"hljs-built_in\">Number</span>\r\n    sorted = sort(nums)\r\n    len = length(sorted)\r\n    mid_index = div(len,<span class=\"hljs-number\">2</span>)\r\n    <span class=\"hljs-keyword\">return</span> len % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> ? (sorted[mid_index + <span class=\"hljs-number\">1</span>] + sorted[mid_index]) / <span class=\"hljs-number\">2</span> : sorted[mid_index + <span class=\"hljs-number\">1</span>]\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Sahil Afrid Farookhi",
      "email": "msafarookhi@gmail.com",
      "commits": 1
    },
    {
      "name": "Azzaare",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "Mirzoev Ruslan",
      "email": "48970799+RuSaG0@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Grigoriy Hanin",
      "email": "43445998+haningrisha@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "Rratic@163.com",
      "commits": 2
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 3
    },
    {
      "name": "qingwen23",
      "email": "qingwen232@gmail.com",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}