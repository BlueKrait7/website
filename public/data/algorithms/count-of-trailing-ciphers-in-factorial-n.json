{
  "slug": "count-of-trailing-ciphers-in-factorial-n",
  "name": "Count of Trailing Ciphers in Factorial N",
  "categories": [
    "bitmanipulation"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "bit_manipulation\\count_of_trailing_ciphers_in_factorial_n.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/bit_manipulation\\count_of_trailing_ciphers_in_factorial_n.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Count the number of\r\n * ciphers](https://www.tutorialspoint.com/count-trailing-zeros-in-factorial-of-a-number-in-cplusplus) in `n!` implementation\r\n * @details\r\n * Given an integer number as input. The goal is to find the number of trailing\r\n zeroes in the factorial calculated for\r\n * that number. A factorial of a number N is a product of all numbers in the\r\n range [1, N].\r\n\r\n * We know that we get a trailing zero only if the number is multiple of 10 or\r\n has a factor pair (2,5). In all factorials of\r\n * any number greater than 5, we have many 2s more than 5s in the prime\r\n factorization of that number. Dividing a\r\n * number by powers of 5 will give us the count of 5s in its factors. So, the\r\n number of 5s will tell us the number of trailing zeroes.\r\n * @author [Swastika Gupta](https://github.com/Swastyy)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace bit_manipulation\r\n * @brief Bit manipulation algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> bit_manipulation {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace count_of_trailing_ciphers_in_factorial_n\r\n * @brief Functions for the [Count the number of\r\n * ciphers](https://www.tutorialspoint.com/count-trailing-zeros-in-factorial-of-a-number-in-cplusplus)\r\n * in `n!` implementation\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> count_of_trailing_ciphers_in_factorial_n {\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function to count the number of the trailing ciphers\r\n * @param n number for which `n!` ciphers are returned\r\n * @return count, Number of ciphers in `n!`.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">numberOfCiphersInFactorialN</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\r\n    <span class=\"hljs-comment\">// count is to store the number of 5&#x27;s in factorial(n)</span>\r\n    <span class=\"hljs-type\">uint64_t</span> count = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// Keep dividing n by powers of</span>\r\n    <span class=\"hljs-comment\">// 5 and update count</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">5</span>; n / i &gt;= <span class=\"hljs-number\">1</span>; i *= <span class=\"hljs-number\">5</span>) {\r\n        count += <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;(n) / i;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> count;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace count_of_trailing_ciphers_in_factorial_n</span>\r\n}  <span class=\"hljs-comment\">// namespace bit_manipulation</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// 1st test</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::\r\n               <span class=\"hljs-built_in\">numberOfCiphersInFactorialN</span>(<span class=\"hljs-number\">395</span>) == <span class=\"hljs-number\">97</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 2nd test</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::\r\n               <span class=\"hljs-built_in\">numberOfCiphersInFactorialN</span>(<span class=\"hljs-number\">977</span>) == <span class=\"hljs-number\">242</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 3rd test</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::\r\n               <span class=\"hljs-built_in\">numberOfCiphersInFactorialN</span>(<span class=\"hljs-number\">871</span>) == <span class=\"hljs-number\">215</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 4th test</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4th test &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::\r\n               <span class=\"hljs-built_in\">numberOfCiphersInFactorialN</span>(<span class=\"hljs-number\">239</span>) == <span class=\"hljs-number\">57</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-comment\">// 5th test</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;5th test &quot;</span>;\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::\r\n               <span class=\"hljs-built_in\">numberOfCiphersInFactorialN</span>(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">0</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}