{
  "slug": "mru-cache",
  "name": "MRU Cache",
  "categories": [
    "datastructures",
    "cache"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\datastructures\\caches\\MRUCache.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\datastructures\\caches\\MRUCache.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.datastructures.caches;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\r\n<span class=\"hljs-keyword\">import</span> java.util.Map;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Most recently used (MRU)\r\n * &lt;p&gt;\r\n * In contrast to Least Recently Used (LRU), MRU discards the most recently used\r\n * items first.\r\n * https://en.wikipedia.org/wiki/Cache_replacement_policies#Most_recently_used_(MRU)\r\n *\r\n * <span class=\"hljs-doctag\">@param</span> &lt;K&gt; key type\r\n * <span class=\"hljs-doctag\">@param</span> &lt;V&gt; value type\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MRUCache</span>&lt;K, V&gt; {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;K, Entry&lt;K, V&gt;&gt; data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\r\n    <span class=\"hljs-keyword\">private</span> Entry&lt;K, V&gt; head;\r\n    <span class=\"hljs-keyword\">private</span> Entry&lt;K, V&gt; tail;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> cap;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAP</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MRUCache</span><span class=\"hljs-params\">()</span> {\r\n        setCapacity(DEFAULT_CAP);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> newCapacity)</span> {\r\n        checkCapacity(newCapacity);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> data.size(); i &gt; newCapacity; i--) {\r\n            Entry&lt;K, V&gt; evicted = evict();\r\n            data.remove(evicted.getKey());\r\n        }\r\n        <span class=\"hljs-built_in\">this</span>.cap = newCapacity;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> capacity)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (capacity &lt;= <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;capacity must greater than 0!&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> Entry&lt;K, V&gt; <span class=\"hljs-title function_\">evict</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;cache cannot be empty!&quot;</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; evicted = <span class=\"hljs-built_in\">this</span>.tail;\r\n        tail = evicted.getPreEntry();\r\n        tail.setNextEntry(<span class=\"hljs-literal\">null</span>);\r\n        evicted.setNextEntry(<span class=\"hljs-literal\">null</span>);\r\n        <span class=\"hljs-keyword\">return</span> evicted;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MRUCache</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> cap)</span> {\r\n        setCapacity(cap);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(K key)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (!data.containsKey(key)) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; entry = data.get(key);\r\n        moveEntryToLast(entry);\r\n        <span class=\"hljs-keyword\">return</span> entry.getValue();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(K key, V value)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (data.containsKey(key)) {\r\n            <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; exitingEntry = data.get(key);\r\n            exitingEntry.setValue(value);\r\n            moveEntryToLast(exitingEntry);\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        Entry&lt;K, V&gt; newEntry;\r\n        <span class=\"hljs-keyword\">if</span> (data.size() == cap) {\r\n            newEntry = evict();\r\n            data.remove(newEntry.getKey());\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            newEntry = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Entry</span>&lt;&gt;();\r\n        }\r\n        newEntry.setKey(key);\r\n        newEntry.setValue(value);\r\n        addNewEntry(newEntry);\r\n        data.put(key, newEntry);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addNewEntry</span><span class=\"hljs-params\">(Entry&lt;K, V&gt; newEntry)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (data.isEmpty()) {\r\n            head = newEntry;\r\n            tail = newEntry;\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        tail.setNextEntry(newEntry);\r\n        newEntry.setPreEntry(tail);\r\n        newEntry.setNextEntry(<span class=\"hljs-literal\">null</span>);\r\n        tail = newEntry;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">moveEntryToLast</span><span class=\"hljs-params\">(Entry&lt;K, V&gt; entry)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (tail == entry) {\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; preEntry = entry.getPreEntry();\r\n        <span class=\"hljs-keyword\">final</span> Entry&lt;K, V&gt; nextEntry = entry.getNextEntry();\r\n        <span class=\"hljs-keyword\">if</span> (preEntry != <span class=\"hljs-literal\">null</span>) {\r\n            preEntry.setNextEntry(nextEntry);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (nextEntry != <span class=\"hljs-literal\">null</span>) {\r\n            nextEntry.setPreEntry(preEntry);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (head == entry) {\r\n            head = nextEntry;\r\n        }\r\n        tail.setNextEntry(entry);\r\n        entry.setPreEntry(tail);\r\n        entry.setNextEntry(<span class=\"hljs-literal\">null</span>);\r\n        tail = entry;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Entry</span>&lt;I, J&gt; {\r\n\r\n        <span class=\"hljs-keyword\">private</span> Entry&lt;I, J&gt; preEntry;\r\n        <span class=\"hljs-keyword\">private</span> Entry&lt;I, J&gt; nextEntry;\r\n        <span class=\"hljs-keyword\">private</span> I key;\r\n        <span class=\"hljs-keyword\">private</span> J value;\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Entry</span><span class=\"hljs-params\">()</span> {\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Entry</span><span class=\"hljs-params\">(Entry&lt;I, J&gt; preEntry, Entry&lt;I, J&gt; nextEntry, I key, J value)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.preEntry = preEntry;\r\n            <span class=\"hljs-built_in\">this</span>.nextEntry = nextEntry;\r\n            <span class=\"hljs-built_in\">this</span>.key = key;\r\n            <span class=\"hljs-built_in\">this</span>.value = value;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> Entry&lt;I, J&gt; <span class=\"hljs-title function_\">getPreEntry</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> preEntry;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setPreEntry</span><span class=\"hljs-params\">(Entry&lt;I, J&gt; preEntry)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.preEntry = preEntry;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> Entry&lt;I, J&gt; <span class=\"hljs-title function_\">getNextEntry</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> nextEntry;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNextEntry</span><span class=\"hljs-params\">(Entry&lt;I, J&gt; nextEntry)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.nextEntry = nextEntry;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> I <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> key;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setKey</span><span class=\"hljs-params\">(I key)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.key = key;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> J <span class=\"hljs-title function_\">getValue</span><span class=\"hljs-params\">()</span> {\r\n            <span class=\"hljs-keyword\">return</span> value;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setValue</span><span class=\"hljs-params\">(J value)</span> {\r\n            <span class=\"hljs-built_in\">this</span>.value = value;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-keyword\">final</span> MRUCache&lt;String, Integer&gt; cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MRUCache</span>&lt;&gt;(<span class=\"hljs-number\">2</span>);\r\n        cache.put(<span class=\"hljs-string\">&quot;Key1&quot;</span>, <span class=\"hljs-number\">1</span>);\r\n        cache.put(<span class=\"hljs-string\">&quot;Key2&quot;</span>, <span class=\"hljs-number\">2</span>);\r\n        cache.put(<span class=\"hljs-string\">&quot;Key3&quot;</span>, <span class=\"hljs-number\">3</span>);\r\n        cache.put(<span class=\"hljs-string\">&quot;Key4&quot;</span>, <span class=\"hljs-number\">4</span>);\r\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key1): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key1&quot;</span>));\r\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key2): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key2&quot;</span>));\r\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key3): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key3&quot;</span>));\r\n        System.out.println(<span class=\"hljs-string\">&quot;getValue(Key4): &quot;</span> + cache.get(<span class=\"hljs-string\">&quot;Key4&quot;</span>));\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "januslinhc",
      "email": "januslinhc@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}