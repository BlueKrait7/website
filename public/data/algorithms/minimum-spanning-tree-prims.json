{
  "slug": "minimum-spanning-tree-prims",
  "name": "Minimum Spanning Tree Prims",
  "categories": [
    "graphs"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs\\minimum_spanning_tree_prims.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs\\minimum_spanning_tree_prims.py",
      "code": "<span class=\"hljs-keyword\">import</span> sys\r\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> defaultdict\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">PrimsAlgorithm</span>(<span class=\"hljs-params\">l</span>):  <span class=\"hljs-comment\"># noqa: E741</span>\r\n\r\n    nodePosition = []\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_position</span>(<span class=\"hljs-params\">vertex</span>):\r\n        <span class=\"hljs-keyword\">return</span> nodePosition[vertex]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_position</span>(<span class=\"hljs-params\">vertex, pos</span>):\r\n        nodePosition[vertex] = pos\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_to_bottom</span>(<span class=\"hljs-params\">heap, start, size, positions</span>):\r\n        <span class=\"hljs-keyword\">if</span> start &gt; size // <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">2</span> * start + <span class=\"hljs-number\">2</span> &gt;= size:\r\n                m = <span class=\"hljs-number\">2</span> * start + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">if</span> heap[<span class=\"hljs-number\">2</span> * start + <span class=\"hljs-number\">1</span>] &lt; heap[<span class=\"hljs-number\">2</span> * start + <span class=\"hljs-number\">2</span>]:\r\n                    m = <span class=\"hljs-number\">2</span> * start + <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    m = <span class=\"hljs-number\">2</span> * start + <span class=\"hljs-number\">2</span>\r\n            <span class=\"hljs-keyword\">if</span> heap[m] &lt; heap[start]:\r\n                temp, temp1 = heap[m], positions[m]\r\n                heap[m], positions[m] = heap[start], positions[start]\r\n                heap[start], positions[start] = temp, temp1\r\n\r\n                temp = get_position(positions[m])\r\n                set_position(positions[m], get_position(positions[start]))\r\n                set_position(positions[start], temp)\r\n\r\n                top_to_bottom(heap, m, size, positions)\r\n\r\n    <span class=\"hljs-comment\"># Update function if value of any node in min-heap decreases</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bottom_to_top</span>(<span class=\"hljs-params\">val, index, heap, position</span>):\r\n        temp = position[index]\r\n\r\n        <span class=\"hljs-keyword\">while</span> index != <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">if</span> index % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\r\n                parent = <span class=\"hljs-built_in\">int</span>((index - <span class=\"hljs-number\">2</span>) / <span class=\"hljs-number\">2</span>)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                parent = <span class=\"hljs-built_in\">int</span>((index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>)\r\n\r\n            <span class=\"hljs-keyword\">if</span> val &lt; heap[parent]:\r\n                heap[index] = heap[parent]\r\n                position[index] = position[parent]\r\n                set_position(position[parent], index)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                heap[index] = val\r\n                position[index] = temp\r\n                set_position(temp, index)\r\n                <span class=\"hljs-keyword\">break</span>\r\n            index = parent\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            heap[<span class=\"hljs-number\">0</span>] = val\r\n            position[<span class=\"hljs-number\">0</span>] = temp\r\n            set_position(temp, <span class=\"hljs-number\">0</span>)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heapify</span>(<span class=\"hljs-params\">heap, positions</span>):\r\n        start = <span class=\"hljs-built_in\">len</span>(heap) // <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(start, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\r\n            top_to_bottom(heap, i, <span class=\"hljs-built_in\">len</span>(heap), positions)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">deleteMinimum</span>(<span class=\"hljs-params\">heap, positions</span>):\r\n        temp = positions[<span class=\"hljs-number\">0</span>]\r\n        heap[<span class=\"hljs-number\">0</span>] = sys.maxsize\r\n        top_to_bottom(heap, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(heap), positions)\r\n        <span class=\"hljs-keyword\">return</span> temp\r\n\r\n    visited = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(l))]\r\n    Nbr_TV = [-<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(l))]  <span class=\"hljs-comment\"># Neighboring Tree Vertex of selected vertex</span>\r\n    <span class=\"hljs-comment\"># Minimum Distance of explored vertex with neighboring vertex of partial tree</span>\r\n    <span class=\"hljs-comment\"># formed in graph</span>\r\n    Distance_TV = []  <span class=\"hljs-comment\"># Heap of Distance of vertices from their neighboring vertex</span>\r\n    Positions = []\r\n\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(l)):\r\n        p = sys.maxsize\r\n        Distance_TV.append(p)\r\n        Positions.append(x)\r\n        nodePosition.append(x)\r\n\r\n    TreeEdges = []\r\n    visited[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>\r\n    Distance_TV[<span class=\"hljs-number\">0</span>] = sys.maxsize\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> l[<span class=\"hljs-number\">0</span>]:\r\n        Nbr_TV[x[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-number\">0</span>\r\n        Distance_TV[x[<span class=\"hljs-number\">0</span>]] = x[<span class=\"hljs-number\">1</span>]\r\n    heapify(Distance_TV, Positions)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(l)):\r\n        vertex = deleteMinimum(Distance_TV, Positions)\r\n        <span class=\"hljs-keyword\">if</span> visited[vertex] == <span class=\"hljs-number\">0</span>:\r\n            TreeEdges.append((Nbr_TV[vertex], vertex))\r\n            visited[vertex] = <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> l[vertex]:\r\n                <span class=\"hljs-keyword\">if</span> visited[v[<span class=\"hljs-number\">0</span>]] == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> v[<span class=\"hljs-number\">1</span>] &lt; Distance_TV[get_position(v[<span class=\"hljs-number\">0</span>])]:\r\n                    Distance_TV[get_position(v[<span class=\"hljs-number\">0</span>])] = v[<span class=\"hljs-number\">1</span>]\r\n                    bottom_to_top(v[<span class=\"hljs-number\">1</span>], get_position(v[<span class=\"hljs-number\">0</span>]), Distance_TV, Positions)\r\n                    Nbr_TV[v[<span class=\"hljs-number\">0</span>]] = vertex\r\n    <span class=\"hljs-keyword\">return</span> TreeEdges\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:  <span class=\"hljs-comment\"># pragma: no cover</span>\r\n    <span class=\"hljs-comment\"># &lt; --------- Prims Algorithm --------- &gt;</span>\r\n    n = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter number of vertices: &quot;</span>).strip())\r\n    e = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter number of edges: &quot;</span>).strip())\r\n    adjlist = defaultdict(<span class=\"hljs-built_in\">list</span>)\r\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(e):\r\n        l = [<span class=\"hljs-built_in\">int</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">input</span>().strip().split()]  <span class=\"hljs-comment\"># noqa: E741</span>\r\n        adjlist[l[<span class=\"hljs-number\">0</span>]].append([l[<span class=\"hljs-number\">1</span>], l[<span class=\"hljs-number\">2</span>]])\r\n        adjlist[l[<span class=\"hljs-number\">1</span>]].append([l[<span class=\"hljs-number\">0</span>], l[<span class=\"hljs-number\">2</span>]])\r\n    <span class=\"hljs-built_in\">print</span>(PrimsAlgorithm(adjlist))\r\n"
    }
  },
  "contributors": [
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Meysam",
      "email": "MeysamAzad81@yahoo.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Farhan",
      "email": "farhankasmani956@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}