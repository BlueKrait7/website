{
  "slug": "any-base-to-any-base",
  "name": "Any Base To Any Base",
  "categories": [
    "conversions"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\conversions\\AnyBaseToAnyBase.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\conversions\\AnyBaseToAnyBase.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.conversions;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\r\n<span class=\"hljs-keyword\">import</span> java.util.HashSet;\r\n<span class=\"hljs-keyword\">import</span> java.util.InputMismatchException;\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Class for converting from &quot;any&quot; base to &quot;any&quot; other base, when &quot;any&quot; means\r\n * from 2-36. Works by going from base 1 to decimal to base 2. Includes\r\n * auxiliary method for determining whether a number is valid for a given base.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Michael Rolland\r\n * <span class=\"hljs-doctag\">@version</span> 2017.10.10\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnyBaseToAnyBase</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Smallest and largest base you want to accept as valid input\r\n     */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">MINIMUM_BASE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>;\r\n\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">MAXIMUM_BASE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">36</span>;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        String n;\r\n        <span class=\"hljs-type\">int</span> b1, b2;\r\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\r\n            <span class=\"hljs-keyword\">try</span> {\r\n                System.out.print(<span class=\"hljs-string\">&quot;Enter number: &quot;</span>);\r\n                n = in.next();\r\n                System.out.print(\r\n                        <span class=\"hljs-string\">&quot;Enter beginning base (between &quot;</span> + MINIMUM_BASE + <span class=\"hljs-string\">&quot; and &quot;</span> + MAXIMUM_BASE + <span class=\"hljs-string\">&quot;): &quot;</span>);\r\n                b1 = in.nextInt();\r\n                <span class=\"hljs-keyword\">if</span> (b1 &gt; MAXIMUM_BASE || b1 &lt; MINIMUM_BASE) {\r\n                    System.out.println(<span class=\"hljs-string\">&quot;Invalid base!&quot;</span>);\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">if</span> (!validForBase(n, b1)) {\r\n                    System.out.println(<span class=\"hljs-string\">&quot;The number is invalid for this base!&quot;</span>);\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n                System.out.print(\r\n                        <span class=\"hljs-string\">&quot;Enter end base (between &quot;</span> + MINIMUM_BASE + <span class=\"hljs-string\">&quot; and &quot;</span> + MAXIMUM_BASE + <span class=\"hljs-string\">&quot;): &quot;</span>);\r\n                b2 = in.nextInt();\r\n                <span class=\"hljs-keyword\">if</span> (b2 &gt; MAXIMUM_BASE || b2 &lt; MINIMUM_BASE) {\r\n                    System.out.println(<span class=\"hljs-string\">&quot;Invalid base!&quot;</span>);\r\n                    <span class=\"hljs-keyword\">continue</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">break</span>;\r\n            } <span class=\"hljs-keyword\">catch</span> (InputMismatchException e) {\r\n                System.out.println(<span class=\"hljs-string\">&quot;Invalid input.&quot;</span>);\r\n                in.next();\r\n            }\r\n        }\r\n        System.out.println(base2base(n, b1, b2));\r\n        in.close();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Checks if a number (as a String) is valid for a given base.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">validForBase</span><span class=\"hljs-params\">(String n, <span class=\"hljs-type\">int</span> base)</span> {\r\n        <span class=\"hljs-type\">char</span>[] validDigits = {\r\n            <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>, <span class=\"hljs-string\">&#x27;4&#x27;</span>, <span class=\"hljs-string\">&#x27;5&#x27;</span>, <span class=\"hljs-string\">&#x27;6&#x27;</span>, <span class=\"hljs-string\">&#x27;7&#x27;</span>, <span class=\"hljs-string\">&#x27;8&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;F&#x27;</span>, <span class=\"hljs-string\">&#x27;G&#x27;</span>, <span class=\"hljs-string\">&#x27;H&#x27;</span>, <span class=\"hljs-string\">&#x27;I&#x27;</span>,\r\n            <span class=\"hljs-string\">&#x27;J&#x27;</span>, <span class=\"hljs-string\">&#x27;K&#x27;</span>, <span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-string\">&#x27;M&#x27;</span>, <span class=\"hljs-string\">&#x27;N&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27;P&#x27;</span>, <span class=\"hljs-string\">&#x27;Q&#x27;</span>, <span class=\"hljs-string\">&#x27;R&#x27;</span>, <span class=\"hljs-string\">&#x27;S&#x27;</span>, <span class=\"hljs-string\">&#x27;T&#x27;</span>, <span class=\"hljs-string\">&#x27;U&#x27;</span>, <span class=\"hljs-string\">&#x27;V&#x27;</span>, <span class=\"hljs-string\">&#x27;W&#x27;</span>, <span class=\"hljs-string\">&#x27;X&#x27;</span>, <span class=\"hljs-string\">&#x27;Y&#x27;</span>, <span class=\"hljs-string\">&#x27;Z&#x27;</span>\r\n        };\r\n        <span class=\"hljs-comment\">// digitsForBase contains all the valid digits for the base given</span>\r\n        <span class=\"hljs-type\">char</span>[] digitsForBase = Arrays.copyOfRange(validDigits, <span class=\"hljs-number\">0</span>, base);\r\n\r\n        <span class=\"hljs-comment\">// Convert character array into set for convenience of contains() method</span>\r\n        HashSet&lt;Character&gt; digitsList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; digitsForBase.length; i++) {\r\n            digitsList.add(digitsForBase[i]);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Check that every digit in n is within the list of valid digits for that base.</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> c : n.toCharArray()) {\r\n            <span class=\"hljs-keyword\">if</span> (!digitsList.contains(c)) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Method to convert any integer from base b1 to base b2. Works by\r\n     * converting from b1 to decimal, then decimal to b2.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> n The integer to be converted.\r\n     * <span class=\"hljs-doctag\">@param</span> b1 Beginning base.\r\n     * <span class=\"hljs-doctag\">@param</span> b2 End base.\r\n     * <span class=\"hljs-doctag\">@return</span> n in base b2.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">base2base</span><span class=\"hljs-params\">(String n, <span class=\"hljs-type\">int</span> b1, <span class=\"hljs-type\">int</span> b2)</span> {\r\n        <span class=\"hljs-comment\">// Declare variables: decimal value of n,</span>\r\n        <span class=\"hljs-comment\">// character of base b1, character of base b2,</span>\r\n        <span class=\"hljs-comment\">// and the string that will be returned.</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">decimalValue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, charB2;\r\n        <span class=\"hljs-type\">char</span> charB1;\r\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">output</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\r\n        <span class=\"hljs-comment\">// Go through every character of n</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n.length(); i++) {\r\n            <span class=\"hljs-comment\">// store the character in charB1</span>\r\n            charB1 = n.charAt(i);\r\n            <span class=\"hljs-comment\">// if it is a non-number, convert it to a decimal value &gt;9 and store it in charB2</span>\r\n            <span class=\"hljs-keyword\">if</span> (charB1 &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; charB1 &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>) {\r\n                charB2 = <span class=\"hljs-number\">10</span> + (charB1 - <span class=\"hljs-string\">&#x27;A&#x27;</span>);\r\n            } <span class=\"hljs-comment\">// Else, store the integer value in charB2</span>\r\n            <span class=\"hljs-keyword\">else</span> {\r\n                charB2 = charB1 - <span class=\"hljs-string\">&#x27;0&#x27;</span>;\r\n            }\r\n            <span class=\"hljs-comment\">// Convert the digit to decimal and add it to the</span>\r\n            <span class=\"hljs-comment\">// decimalValue of n</span>\r\n            decimalValue = decimalValue * b1 + charB2;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// Converting the decimal value to base b2:</span>\r\n        <span class=\"hljs-comment\">// A number is converted from decimal to another base</span>\r\n        <span class=\"hljs-comment\">// by continuously dividing by the base and recording</span>\r\n        <span class=\"hljs-comment\">// the remainder until the quotient is zero. The number in the</span>\r\n        <span class=\"hljs-comment\">// new base is the remainders, with the last remainder</span>\r\n        <span class=\"hljs-comment\">// being the left-most digit.</span>\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> == decimalValue) {\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0&quot;</span>;\r\n        }\r\n        <span class=\"hljs-comment\">// While the quotient is NOT zero:</span>\r\n        <span class=\"hljs-keyword\">while</span> (decimalValue != <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-comment\">// If the remainder is a digit &lt; 10, simply add it to</span>\r\n            <span class=\"hljs-comment\">// the left side of the new number.</span>\r\n            <span class=\"hljs-keyword\">if</span> (decimalValue % b2 &lt; <span class=\"hljs-number\">10</span>) {\r\n                output = Integer.toString(decimalValue % b2) + output;\r\n            } <span class=\"hljs-comment\">// If the remainder is &gt;= 10, add a character with the</span>\r\n            <span class=\"hljs-comment\">// corresponding value to the new number. (A = 10, B = 11, C = 12, ...)</span>\r\n            <span class=\"hljs-keyword\">else</span> {\r\n                output = (<span class=\"hljs-type\">char</span>) ((decimalValue % b2) + <span class=\"hljs-number\">55</span>) + output;\r\n            }\r\n            <span class=\"hljs-comment\">// Divide by the new base again</span>\r\n            decimalValue /= b2;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> output;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "rabbit",
      "email": "d_rabbit@21cn.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Michael Rolland",
      "email": "rollandmichael7@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}