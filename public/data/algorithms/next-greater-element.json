{
  "slug": "next-greater-element",
  "name": "Next Greater Element",
  "categories": [
    "datastructures",
    "stacks"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures\\stacks\\next_greater_element.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures\\stacks\\next_greater_element.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\narr = [-<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5.1</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">21</span>, -<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]\r\nexpect = [-<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5.1</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">21</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">next_greatest_element_slow</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Get the Next Greatest Element (NGE) for all elements in a list.\r\n    Maximum element present after the current one which is also greater than the\r\n    current one.\r\n    &gt;&gt;&gt; next_greatest_element_slow(arr) == expect\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n\r\n    result = []\r\n    arr_size = <span class=\"hljs-built_in\">len</span>(arr)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(arr_size):\r\n        <span class=\"hljs-built_in\">next</span>: <span class=\"hljs-built_in\">float</span> = -<span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, arr_size):\r\n            <span class=\"hljs-keyword\">if</span> arr[i] &lt; arr[j]:\r\n                <span class=\"hljs-built_in\">next</span> = arr[j]\r\n                <span class=\"hljs-keyword\">break</span>\r\n        result.append(<span class=\"hljs-built_in\">next</span>)\r\n    <span class=\"hljs-keyword\">return</span> result\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">next_greatest_element_fast</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Like next_greatest_element_slow() but changes the loops to use\r\n    enumerate() instead of range(len()) for the outer loop and\r\n    for in a slice of arr for the inner loop.\r\n    &gt;&gt;&gt; next_greatest_element_fast(arr) == expect\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    result = []\r\n    <span class=\"hljs-keyword\">for</span> i, outer <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(arr):\r\n        <span class=\"hljs-built_in\">next</span>: <span class=\"hljs-built_in\">float</span> = -<span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">for</span> inner <span class=\"hljs-keyword\">in</span> arr[i + <span class=\"hljs-number\">1</span> :]:\r\n            <span class=\"hljs-keyword\">if</span> outer &lt; inner:\r\n                <span class=\"hljs-built_in\">next</span> = inner\r\n                <span class=\"hljs-keyword\">break</span>\r\n        result.append(<span class=\"hljs-built_in\">next</span>)\r\n    <span class=\"hljs-keyword\">return</span> result\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">next_greatest_element</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Get the Next Greatest Element (NGE) for all elements in a list.\r\n    Maximum element present after the current one which is also greater than the\r\n    current one.\r\n\r\n    A naive way to solve this is to take two loops and check for the next bigger\r\n    number but that will make the time complexity as O(n^2). The better way to solve\r\n    this would be to use a stack to keep track of maximum number giving a linear time\r\n    solution.\r\n    &gt;&gt;&gt; next_greatest_element(arr) == expect\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    arr_size = <span class=\"hljs-built_in\">len</span>(arr)\r\n    stack: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>] = []\r\n    result: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>] = [-<span class=\"hljs-number\">1</span>] * arr_size\r\n\r\n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">reversed</span>(<span class=\"hljs-built_in\">range</span>(arr_size)):\r\n        <span class=\"hljs-keyword\">if</span> stack:\r\n            <span class=\"hljs-keyword\">while</span> stack[-<span class=\"hljs-number\">1</span>] &lt;= arr[index]:\r\n                stack.pop()\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> stack:\r\n                    <span class=\"hljs-keyword\">break</span>\r\n        <span class=\"hljs-keyword\">if</span> stack:\r\n            result[index] = stack[-<span class=\"hljs-number\">1</span>]\r\n        stack.append(arr[index])\r\n    <span class=\"hljs-keyword\">return</span> result\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n    <span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> timeit\r\n\r\n    testmod()\r\n    <span class=\"hljs-built_in\">print</span>(next_greatest_element_slow(arr))\r\n    <span class=\"hljs-built_in\">print</span>(next_greatest_element_fast(arr))\r\n    <span class=\"hljs-built_in\">print</span>(next_greatest_element(arr))\r\n\r\n    setup = (\r\n        <span class=\"hljs-string\">&quot;from __main__ import arr, next_greatest_element_slow, &quot;</span>\r\n        <span class=\"hljs-string\">&quot;next_greatest_element_fast, next_greatest_element&quot;</span>\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;next_greatest_element_slow():&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;next_greatest_element_slow(arr)&quot;</span>, setup=setup),\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;next_greatest_element_fast():&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;next_greatest_element_fast(arr)&quot;</span>, setup=setup),\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;     next_greatest_element():&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;next_greatest_element(arr)&quot;</span>, setup=setup),\r\n    )\r\n"
    },
    "ruby": {
      "dir": "data_structures\\arrays\\next_greater_element.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures\\arrays\\next_greater_element.rb",
      "code": "<span class=\"hljs-comment\"># You are given two integer arrays nums1 and nums2 both of unique elements, where nums1 is a subset of nums2.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Find all the next greater numbers for nums1&#x27;s elements in the corresponding places of nums2.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, return -1 for this number.</span>\r\n\r\n<span class=\"hljs-comment\"># Example 1:</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Input: nums1 = [4,1,2], nums2 = [1,3,4,2]</span>\r\n<span class=\"hljs-comment\"># Output: [-1,3,-1]</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Explanation:</span>\r\n<span class=\"hljs-comment\"># For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.</span>\r\n<span class=\"hljs-comment\"># For number 1 in the first array, the next greater number for it in the second array is 3.</span>\r\n<span class=\"hljs-comment\"># For number 2 in the first array, there is no next greater number for it in the second array, so output -1.</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Example 2:</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Input: nums1 = [2,4], nums2 = [1,2,3,4]</span>\r\n<span class=\"hljs-comment\"># Output: [3,-1]</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Explanation:</span>\r\n<span class=\"hljs-comment\"># For number 2 in the first array, the next greater number for it in the second array is 3.</span>\r\n<span class=\"hljs-comment\"># For number 4 in the first array, there is no next greater number for it in the second array, so output -1.</span>\r\n\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Approach: Brute Force</span>\r\n<span class=\"hljs-comment\">#</span>\r\n\r\n<span class=\"hljs-comment\"># Complexity Analysis</span>\r\n<span class=\"hljs-comment\">#</span>\r\n<span class=\"hljs-comment\"># Time complexity: O(m*n). The complete nums1 array (of size n) needs to be scanned for all the m elements of nums2 in the worst case.</span>\r\n<span class=\"hljs-comment\"># Space complexity: O(1). No additional space since we&#x27;re swapping elements in nums1 and returning the input array.</span>\r\n\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} nums1</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} nums2</span>\r\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Integer[]}</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next_greater_element</span><span class=\"hljs-params\">(nums1, nums2)</span></span>\r\n  nums1.each_with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|nums1_value, pointer1|</span>\r\n    max = <span class=\"hljs-number\">0</span>\r\n    pos_nums2 = nums2.find_index(nums1_value)\r\n\r\n    nums2[pos_nums2..nums2.count].each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|nums2_value|</span>\r\n      <span class=\"hljs-keyword\">if</span> nums2_value &gt; nums1_value\r\n        max = nums2_value\r\n        <span class=\"hljs-keyword\">break</span>\r\n      <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    nums1[pointer1] = (nums1_value &lt; max ? max : -<span class=\"hljs-number\">1</span>)\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  nums1\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nnums1 = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\r\nnums2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>]\r\nprint next_greater_element(nums1, nums2)\r\n<span class=\"hljs-comment\"># Output: [-1,3,-1]</span>\r\n\r\nnums1 = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]\r\nnums2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\r\nprint next_greater_element(nums1, nums2)\r\n<span class=\"hljs-comment\"># Output: [3,-1]</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Dylan Buchi",
      "email": "devybuchi@gmail.com",
      "commits": 1
    },
    {
      "name": "Vaibhav Singh",
      "email": "45447817+itsvaibhav01@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jai Kumar Dewani",
      "email": "jai.dewani.99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}