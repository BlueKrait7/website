{
  "slug": "number-of-digits",
  "name": "Number of Digits",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\number_of_digits.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\number_of_digits.py",
      "code": "<span class=\"hljs-keyword\">import</span> math\r\n<span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> timeit\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">num_digits</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Find the number of digits in a number.\r\n\r\n    &gt;&gt;&gt; num_digits(12345)\r\n    5\r\n    &gt;&gt;&gt; num_digits(123)\r\n    3\r\n    &gt;&gt;&gt; num_digits(0)\r\n    1\r\n    &gt;&gt;&gt; num_digits(-1)\r\n    1\r\n    &gt;&gt;&gt; num_digits(-123456)\r\n    6\r\n    &quot;&quot;&quot;</span>\r\n    digits = <span class=\"hljs-number\">0</span>\r\n    n = <span class=\"hljs-built_in\">abs</span>(n)\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n        n = n // <span class=\"hljs-number\">10</span>\r\n        digits += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">break</span>\r\n    <span class=\"hljs-keyword\">return</span> digits\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">num_digits_fast</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Find the number of digits in a number.\r\n    abs() is used as logarithm for negative numbers is not defined.\r\n\r\n    &gt;&gt;&gt; num_digits_fast(12345)\r\n    5\r\n    &gt;&gt;&gt; num_digits_fast(123)\r\n    3\r\n    &gt;&gt;&gt; num_digits_fast(0)\r\n    1\r\n    &gt;&gt;&gt; num_digits_fast(-1)\r\n    1\r\n    &gt;&gt;&gt; num_digits_fast(-123456)\r\n    6\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> math.floor(math.log(<span class=\"hljs-built_in\">abs</span>(n), <span class=\"hljs-number\">10</span>) + <span class=\"hljs-number\">1</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">num_digits_faster</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Find the number of digits in a number.\r\n    abs() is used for negative numbers\r\n\r\n    &gt;&gt;&gt; num_digits_faster(12345)\r\n    5\r\n    &gt;&gt;&gt; num_digits_faster(123)\r\n    3\r\n    &gt;&gt;&gt; num_digits_faster(0)\r\n    1\r\n    &gt;&gt;&gt; num_digits_faster(-1)\r\n    1\r\n    &gt;&gt;&gt; num_digits_faster(-123456)\r\n    6\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">abs</span>(n)))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">benchmark</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Benchmark code for comparing 3 functions,\r\n    with 3 different length int values.\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nFor small_num = &quot;</span>, small_num, <span class=\"hljs-string\">&quot;:&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&gt; num_digits()&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;\\t\\tans =&quot;</span>,\r\n        num_digits(small_num),\r\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;z.num_digits(z.small_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\r\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&gt; num_digits_fast()&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\r\n        num_digits_fast(small_num),\r\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;z.num_digits_fast(z.small_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\r\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&gt; num_digits_faster()&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\r\n        num_digits_faster(small_num),\r\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;z.num_digits_faster(z.small_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\r\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\r\n    )\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nFor medium_num = &quot;</span>, medium_num, <span class=\"hljs-string\">&quot;:&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&gt; num_digits()&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;\\t\\tans =&quot;</span>,\r\n        num_digits(medium_num),\r\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;z.num_digits(z.medium_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\r\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&gt; num_digits_fast()&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\r\n        num_digits_fast(medium_num),\r\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;z.num_digits_fast(z.medium_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\r\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&gt; num_digits_faster()&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\r\n        num_digits_faster(medium_num),\r\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;z.num_digits_faster(z.medium_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\r\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\r\n    )\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nFor large_num = &quot;</span>, large_num, <span class=\"hljs-string\">&quot;:&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&gt; num_digits()&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;\\t\\tans =&quot;</span>,\r\n        num_digits(large_num),\r\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;z.num_digits(z.large_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\r\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&gt; num_digits_fast()&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\r\n        num_digits_fast(large_num),\r\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;z.num_digits_fast(z.large_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\r\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\r\n    )\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;&gt; num_digits_faster()&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\r\n        num_digits_faster(large_num),\r\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\r\n        timeit(<span class=\"hljs-string\">&quot;z.num_digits_faster(z.large_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\r\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\r\n    )\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    small_num = <span class=\"hljs-number\">262144</span>\r\n    medium_num = <span class=\"hljs-number\">1125899906842624</span>\r\n    large_num = <span class=\"hljs-number\">1267650600228229401496703205376</span>\r\n    benchmark()\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "javascript": {
      "dir": "Maths\\test\\NumberOfDigits.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths\\test\\NumberOfDigits.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { numberOfDigit } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../NumberOfDigits&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;NumberOfDigits&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return the correct number of digits for an integer&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">numberOfDigit</span>(<span class=\"hljs-number\">1234000</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">7</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return the correct number of digits for a negative number&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">numberOfDigit</span>(-<span class=\"hljs-number\">2346243</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">7</span>)\r\n  })\r\n})\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\NumberOfDigits.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\NumberOfDigits.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Find the number of digits in a number.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NumberOfDigits</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">int</span>[] numbers = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">1234</span>, -<span class=\"hljs-number\">12345</span>, <span class=\"hljs-number\">123456</span>, <span class=\"hljs-number\">1234567</span>, <span class=\"hljs-number\">12345678</span>, <span class=\"hljs-number\">123456789</span>};\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; numbers.length; ++i) {\r\n            <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">numberOfDigits</span><span class=\"hljs-params\">(numbers[i])</span> == i + <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">numberOfDigitsFast</span><span class=\"hljs-params\">(numbers[i])</span> == i + <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">numberOfDigitsFaster</span><span class=\"hljs-params\">(numbers[i])</span> == i + <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">numberOfDigitsRecursion</span><span class=\"hljs-params\">(numbers[i])</span> == i + <span class=\"hljs-number\">1</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Find the number of digits in a number.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> number number to find\r\n     * <span class=\"hljs-doctag\">@return</span> number of digits of given number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfDigits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">digits</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">do</span> {\r\n            digits++;\r\n            number /= <span class=\"hljs-number\">10</span>;\r\n        } <span class=\"hljs-keyword\">while</span> (number != <span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">return</span> digits;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Find the number of digits in a number fast version.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> number number to find\r\n     * <span class=\"hljs-doctag\">@return</span> number of digits of given number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfDigitsFast</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\r\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">number</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">1</span> : (<span class=\"hljs-type\">int</span>) Math.floor(Math.log10(Math.abs(number)) + <span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Find the number of digits in a number faster version.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> number number to find\r\n     * <span class=\"hljs-doctag\">@return</span> number of digits of given number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfDigitsFaster</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\r\n        <span class=\"hljs-keyword\">return</span> number &lt; <span class=\"hljs-number\">0</span> ? (-number + <span class=\"hljs-string\">&quot;&quot;</span>).length() : (number + <span class=\"hljs-string\">&quot;&quot;</span>).length();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Find the number of digits in a number using recursion.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> number number to find\r\n     * <span class=\"hljs-doctag\">@return</span> number of digits of given number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfDigitsRecursion</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\r\n        <span class=\"hljs-keyword\">return</span> number / <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span> + numberOfDigitsRecursion(number / <span class=\"hljs-number\">10</span>);\r\n    }\r\n}\r\n"
    },
    "ruby": {
      "dir": "maths\\number_of_digits.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths\\number_of_digits.rb",
      "code": "<span class=\"hljs-comment\"># Given a number, find number of digits in it.</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">count_digits</span><span class=\"hljs-params\">(n)</span></span>\r\n  count = <span class=\"hljs-number\">0</span>\r\n  temp = n\r\n\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span>\r\n\r\n  <span class=\"hljs-keyword\">until</span> temp.zero?\r\n    count += <span class=\"hljs-number\">1</span>\r\n    temp /= <span class=\"hljs-number\">10</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  count\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\nputs <span class=\"hljs-string\">&#x27;Number of digits in 8732 is &#x27;</span> + count_digits(<span class=\"hljs-number\">8732</span>).to_s\r\n<span class=\"hljs-comment\"># Number of digits in 8732 is 4</span>\r\nputs <span class=\"hljs-string\">&#x27;Number of digits in 112233 is &#x27;</span> + count_digits(<span class=\"hljs-number\">112_233</span>).to_s\r\n<span class=\"hljs-comment\"># Number of digits in 112233 is 6</span>\r\nputs <span class=\"hljs-string\">&#x27;Number of digits in 0 is &#x27;</span> + count_digits(<span class=\"hljs-number\">0</span>).to_s\r\n<span class=\"hljs-comment\"># Number of digits in 0 is 1</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vasu Gamdha",
      "email": "40864108+vasugamdha@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vignesh",
      "email": "ravivignesh2000@gmail.com",
      "commits": 1
    },
    {
      "name": "Jeffin Francis",
      "email": "francisjeffin07@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "Abhinav Anand",
      "email": "manasgmishra@gmail.com",
      "commits": 2
    },
    {
      "name": "Ephraim Atta-Duncan",
      "email": "55143799+dephraiim@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}