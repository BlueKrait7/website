{
  "slug": "implementing-auto-completing-features-using-trie",
  "name": "Implementing Auto Completing Features Using Trie",
  "categories": [
    "others"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\others\\Implementing_auto_completing_features_using_trie.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\others\\Implementing_auto_completing_features_using_trie.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.others;\r\n\r\n<span class=\"hljs-comment\">// Java Program to implement Auto-Complete </span>\r\n<span class=\"hljs-comment\">// Feature using Trie</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Trieac</span> {\r\n\r\n    <span class=\"hljs-comment\">// Alphabet size (# of symbols) </span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ALPHABET_SIZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">26</span>;\r\n\r\n    <span class=\"hljs-comment\">// Trie node </span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TrieNode</span> {\r\n\r\n        TrieNode children[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>[ALPHABET_SIZE];\r\n\r\n        <span class=\"hljs-comment\">// isWordEnd is true if the node represents </span>\r\n        <span class=\"hljs-comment\">// end of a word </span>\r\n        <span class=\"hljs-type\">boolean</span> isWordEnd;\r\n    };\r\n\r\n    <span class=\"hljs-comment\">// Returns new trie node (initialized to NULLs) </span>\r\n    <span class=\"hljs-keyword\">static</span> TrieNode <span class=\"hljs-title function_\">getNode</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">pNode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>();\r\n        pNode.isWordEnd = <span class=\"hljs-literal\">false</span>;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; ALPHABET_SIZE; i++) {\r\n            pNode.children[i] = <span class=\"hljs-literal\">null</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> pNode;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// If not present, inserts key into trie. If the </span>\r\n    <span class=\"hljs-comment\">// key is prefix of trie node, just marks leaf node </span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(TrieNode root, <span class=\"hljs-keyword\">final</span> String key)</span> {\r\n        <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">pCrawl</span> <span class=\"hljs-operator\">=</span> root;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">level</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; level &lt; key.length(); level++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> (key.charAt(level) - <span class=\"hljs-string\">&#x27;a&#x27;</span>);\r\n            <span class=\"hljs-keyword\">if</span> (pCrawl.children[index] == <span class=\"hljs-literal\">null</span>) {\r\n                pCrawl.children[index] = getNode();\r\n            }\r\n            pCrawl = pCrawl.children[index];\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// mark last node as leaf </span>\r\n        pCrawl.isWordEnd = <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Returns true if key presents in trie, else false </span>\r\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(TrieNode root, <span class=\"hljs-keyword\">final</span> String key)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> key.length();\r\n        <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">pCrawl</span> <span class=\"hljs-operator\">=</span> root;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">level</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; level &lt; length; level++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> (key.charAt(level) - <span class=\"hljs-string\">&#x27;a&#x27;</span>);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (pCrawl.children[index] == <span class=\"hljs-literal\">null</span>) {\r\n                pCrawl = pCrawl.children[index];\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> (pCrawl != <span class=\"hljs-literal\">null</span> &amp;&amp; pCrawl.isWordEnd);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Returns 0 if current node has a child </span>\r\n    <span class=\"hljs-comment\">// If all children are NULL, return 1. </span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isLastNode</span><span class=\"hljs-params\">(TrieNode root)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; ALPHABET_SIZE; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (root.children[i] != <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Recursive function to print auto-suggestions </span>\r\n    <span class=\"hljs-comment\">// for given node. </span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">suggestionsRec</span><span class=\"hljs-params\">(TrieNode root, String currPrefix)</span> {\r\n        <span class=\"hljs-comment\">// found a string in Trie with the given prefix </span>\r\n        <span class=\"hljs-keyword\">if</span> (root.isWordEnd) {\r\n            System.out.println(currPrefix);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// All children struct node pointers are NULL </span>\r\n        <span class=\"hljs-keyword\">if</span> (isLastNode(root)) {\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; ALPHABET_SIZE; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (root.children[i] != <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-comment\">// append current character to currPrefix string </span>\r\n                currPrefix += (<span class=\"hljs-type\">char</span>) (<span class=\"hljs-number\">97</span> + i);\r\n\r\n                <span class=\"hljs-comment\">// recur over the rest </span>\r\n                suggestionsRec(root.children[i], currPrefix);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Fucntion  to print suggestions for</span>\r\n    <span class=\"hljs-comment\">// given query prefix.</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">printAutoSuggestions</span><span class=\"hljs-params\">(TrieNode root,\r\n            <span class=\"hljs-keyword\">final</span> String query)</span> {\r\n        <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">pCrawl</span> <span class=\"hljs-operator\">=</span> root;\r\n\r\n        <span class=\"hljs-comment\">// Check if prefix is present and find the </span>\r\n        <span class=\"hljs-comment\">// the node (of last level) with last character </span>\r\n        <span class=\"hljs-comment\">// of given string. </span>\r\n        <span class=\"hljs-type\">int</span> level;\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> query.length();\r\n\r\n        <span class=\"hljs-keyword\">for</span> (level = <span class=\"hljs-number\">0</span>; level &lt; n; level++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> (query.charAt(level) - <span class=\"hljs-string\">&#x27;a&#x27;</span>);\r\n\r\n            <span class=\"hljs-comment\">// no string in the Trie has this prefix </span>\r\n            <span class=\"hljs-keyword\">if</span> (pCrawl.children[index] == <span class=\"hljs-literal\">null</span>) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n            }\r\n\r\n            pCrawl = pCrawl.children[index];\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// If prefix is present as a word. </span>\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">isWord</span> <span class=\"hljs-operator\">=</span> (pCrawl.isWordEnd == <span class=\"hljs-literal\">true</span>);\r\n\r\n        <span class=\"hljs-comment\">// If prefix is last node of tree (has no </span>\r\n        <span class=\"hljs-comment\">// children) </span>\r\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">isLast</span> <span class=\"hljs-operator\">=</span> isLastNode(pCrawl);\r\n\r\n        <span class=\"hljs-comment\">// If prefix is present as a word, but </span>\r\n        <span class=\"hljs-comment\">// there is no subtree below the last </span>\r\n        <span class=\"hljs-comment\">// matching node. </span>\r\n        <span class=\"hljs-keyword\">if</span> (isWord &amp;&amp; isLast) {\r\n            System.out.println(query);\r\n            <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">// If there are are nodes below last </span>\r\n        <span class=\"hljs-comment\">// matching character. </span>\r\n        <span class=\"hljs-keyword\">if</span> (!isLast) {\r\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefix</span> <span class=\"hljs-operator\">=</span> query;\r\n            suggestionsRec(pCrawl, prefix);\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Driver code</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> getNode();\r\n        insert(root, <span class=\"hljs-string\">&quot;hello&quot;</span>);\r\n        insert(root, <span class=\"hljs-string\">&quot;dog&quot;</span>);\r\n        insert(root, <span class=\"hljs-string\">&quot;hell&quot;</span>);\r\n        insert(root, <span class=\"hljs-string\">&quot;cat&quot;</span>);\r\n        insert(root, <span class=\"hljs-string\">&quot;a&quot;</span>);\r\n        insert(root, <span class=\"hljs-string\">&quot;hel&quot;</span>);\r\n        insert(root, <span class=\"hljs-string\">&quot;help&quot;</span>);\r\n        insert(root, <span class=\"hljs-string\">&quot;helps&quot;</span>);\r\n        insert(root, <span class=\"hljs-string\">&quot;helping&quot;</span>);\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">comp</span> <span class=\"hljs-operator\">=</span> printAutoSuggestions(root, <span class=\"hljs-string\">&quot;hel&quot;</span>);\r\n\r\n        <span class=\"hljs-keyword\">if</span> (comp == -<span class=\"hljs-number\">1</span>) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;No other strings found &quot;</span>\r\n                    + <span class=\"hljs-string\">&quot;with this prefix\\n&quot;</span>);\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (comp == <span class=\"hljs-number\">0</span>) {\r\n            System.out.println(<span class=\"hljs-string\">&quot;No string found with&quot;</span>\r\n                    + <span class=\"hljs-string\">&quot; this prefix\\n&quot;</span>);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "RITWEEK RAJ",
      "email": "67289913+ritweekraj2802@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}