{
  "slug": "min-cost-string-conversion",
  "name": "Min Cost String Conversion",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings\\min_cost_string_conversion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings\\min_cost_string_conversion.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nAlgorithm for calculating the most cost-efficient sequence for converting one string\r\ninto another.\r\nThe only allowed operations are\r\n--- Cost to copy a character is copy_cost\r\n--- Cost to replace a character is replace_cost\r\n--- Cost to delete a character is delete_cost\r\n--- Cost to insert a character is insert_cost\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">compute_transform_tables</span>(<span class=\"hljs-params\">\r\n    source_string: <span class=\"hljs-built_in\">str</span>,\r\n    destination_string: <span class=\"hljs-built_in\">str</span>,\r\n    copy_cost: <span class=\"hljs-built_in\">int</span>,\r\n    replace_cost: <span class=\"hljs-built_in\">int</span>,\r\n    delete_cost: <span class=\"hljs-built_in\">int</span>,\r\n    insert_cost: <span class=\"hljs-built_in\">int</span>,\r\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]]]:\r\n    source_seq = <span class=\"hljs-built_in\">list</span>(source_string)\r\n    destination_seq = <span class=\"hljs-built_in\">list</span>(destination_string)\r\n    len_source_seq = <span class=\"hljs-built_in\">len</span>(source_seq)\r\n    len_destination_seq = <span class=\"hljs-built_in\">len</span>(destination_seq)\r\n\r\n    costs = [\r\n        [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_destination_seq + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_source_seq + <span class=\"hljs-number\">1</span>)\r\n    ]\r\n    ops = [\r\n        [<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_destination_seq + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(len_source_seq + <span class=\"hljs-number\">1</span>)\r\n    ]\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_source_seq + <span class=\"hljs-number\">1</span>):\r\n        costs[i][<span class=\"hljs-number\">0</span>] = i * delete_cost\r\n        ops[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&quot;D%c&quot;</span> % source_seq[i - <span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_destination_seq + <span class=\"hljs-number\">1</span>):\r\n        costs[<span class=\"hljs-number\">0</span>][i] = i * insert_cost\r\n        ops[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-string\">&quot;I%c&quot;</span> % destination_seq[i - <span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_source_seq + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, len_destination_seq + <span class=\"hljs-number\">1</span>):\r\n            <span class=\"hljs-keyword\">if</span> source_seq[i - <span class=\"hljs-number\">1</span>] == destination_seq[j - <span class=\"hljs-number\">1</span>]:\r\n                costs[i][j] = costs[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + copy_cost\r\n                ops[i][j] = <span class=\"hljs-string\">&quot;C%c&quot;</span> % source_seq[i - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                costs[i][j] = costs[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + replace_cost\r\n                ops[i][j] = <span class=\"hljs-string\">&quot;R%c&quot;</span> % source_seq[i - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-built_in\">str</span>(destination_seq[j - <span class=\"hljs-number\">1</span>])\r\n\r\n            <span class=\"hljs-keyword\">if</span> costs[i - <span class=\"hljs-number\">1</span>][j] + delete_cost &lt; costs[i][j]:\r\n                costs[i][j] = costs[i - <span class=\"hljs-number\">1</span>][j] + delete_cost\r\n                ops[i][j] = <span class=\"hljs-string\">&quot;D%c&quot;</span> % source_seq[i - <span class=\"hljs-number\">1</span>]\r\n\r\n            <span class=\"hljs-keyword\">if</span> costs[i][j - <span class=\"hljs-number\">1</span>] + insert_cost &lt; costs[i][j]:\r\n                costs[i][j] = costs[i][j - <span class=\"hljs-number\">1</span>] + insert_cost\r\n                ops[i][j] = <span class=\"hljs-string\">&quot;I%c&quot;</span> % destination_seq[j - <span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-keyword\">return</span> costs, ops\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">assemble_transformation</span>(<span class=\"hljs-params\">ops: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]], i: <span class=\"hljs-built_in\">int</span>, j: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\r\n    <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> j == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">return</span> []\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">if</span> ops[i][j][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;C&quot;</span> <span class=\"hljs-keyword\">or</span> ops[i][j][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;R&quot;</span>:\r\n            seq = assemble_transformation(ops, i - <span class=\"hljs-number\">1</span>, j - <span class=\"hljs-number\">1</span>)\r\n            seq.append(ops[i][j])\r\n            <span class=\"hljs-keyword\">return</span> seq\r\n        <span class=\"hljs-keyword\">elif</span> ops[i][j][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;D&quot;</span>:\r\n            seq = assemble_transformation(ops, i - <span class=\"hljs-number\">1</span>, j)\r\n            seq.append(ops[i][j])\r\n            <span class=\"hljs-keyword\">return</span> seq\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            seq = assemble_transformation(ops, i, j - <span class=\"hljs-number\">1</span>)\r\n            seq.append(ops[i][j])\r\n            <span class=\"hljs-keyword\">return</span> seq\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    _, operations = compute_transform_tables(<span class=\"hljs-string\">&quot;Python&quot;</span>, <span class=\"hljs-string\">&quot;Algorithms&quot;</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\r\n\r\n    m = <span class=\"hljs-built_in\">len</span>(operations)\r\n    n = <span class=\"hljs-built_in\">len</span>(operations[<span class=\"hljs-number\">0</span>])\r\n    sequence = assemble_transformation(operations, m - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>)\r\n\r\n    string = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-string\">&quot;Python&quot;</span>)\r\n    i = <span class=\"hljs-number\">0</span>\r\n    cost = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;min_cost.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> file:\r\n        <span class=\"hljs-keyword\">for</span> op <span class=\"hljs-keyword\">in</span> sequence:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;</span>.join(string))\r\n\r\n            <span class=\"hljs-keyword\">if</span> op[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;C&quot;</span>:\r\n                file.write(<span class=\"hljs-string\">&quot;%-16s&quot;</span> % <span class=\"hljs-string\">&quot;Copy %c&quot;</span> % op[<span class=\"hljs-number\">1</span>])\r\n                file.write(<span class=\"hljs-string\">&quot;\\t\\t\\t&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(string))\r\n                file.write(<span class=\"hljs-string\">&quot;\\r\\n&quot;</span>)\r\n\r\n                cost -= <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">elif</span> op[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;R&quot;</span>:\r\n                string[i] = op[<span class=\"hljs-number\">2</span>]\r\n\r\n                file.write(<span class=\"hljs-string\">&quot;%-16s&quot;</span> % (<span class=\"hljs-string\">&quot;Replace %c&quot;</span> % op[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">&quot; with &quot;</span> + <span class=\"hljs-built_in\">str</span>(op[<span class=\"hljs-number\">2</span>])))\r\n                file.write(<span class=\"hljs-string\">&quot;\\t\\t&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(string))\r\n                file.write(<span class=\"hljs-string\">&quot;\\r\\n&quot;</span>)\r\n\r\n                cost += <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">elif</span> op[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;D&quot;</span>:\r\n                string.pop(i)\r\n\r\n                file.write(<span class=\"hljs-string\">&quot;%-16s&quot;</span> % <span class=\"hljs-string\">&quot;Delete %c&quot;</span> % op[<span class=\"hljs-number\">1</span>])\r\n                file.write(<span class=\"hljs-string\">&quot;\\t\\t\\t&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(string))\r\n                file.write(<span class=\"hljs-string\">&quot;\\r\\n&quot;</span>)\r\n\r\n                cost += <span class=\"hljs-number\">2</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                string.insert(i, op[<span class=\"hljs-number\">1</span>])\r\n\r\n                file.write(<span class=\"hljs-string\">&quot;%-16s&quot;</span> % <span class=\"hljs-string\">&quot;Insert %c&quot;</span> % op[<span class=\"hljs-number\">1</span>])\r\n                file.write(<span class=\"hljs-string\">&quot;\\t\\t\\t&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(string))\r\n                file.write(<span class=\"hljs-string\">&quot;\\r\\n&quot;</span>)\r\n\r\n                cost += <span class=\"hljs-number\">2</span>\r\n\r\n            i += <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;</span>.join(string))\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Cost: &quot;</span>, cost)\r\n\r\n        file.write(<span class=\"hljs-string\">&quot;\\r\\nMinimum cost: &quot;</span> + <span class=\"hljs-built_in\">str</span>(cost))\r\n"
    },
    "f-sharp": {
      "dir": "Algorithms\\Strings\\MinCostStringConversion.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms\\Strings\\MinCostStringConversion.fs",
      "code": "﻿<span class=\"hljs-comment\">/// Algorithm for calculating the most cost-efficient sequence for converting one string</span>\r\n<span class=\"hljs-comment\">/// into another.</span>\r\n<span class=\"hljs-comment\">/// The only allowed operations are</span>\r\n<span class=\"hljs-comment\">/// --- Cost to copy a character is copy_cost</span>\r\n<span class=\"hljs-comment\">/// --- Cost to replace a character is replace_cost</span>\r\n<span class=\"hljs-comment\">/// --- Cost to delete a character is delete_cost</span>\r\n<span class=\"hljs-comment\">/// --- Cost to insert a character is insert_cost</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\r\n\r\n<span class=\"hljs-keyword\">module</span> MinCostStringConversion <span class=\"hljs-operator\">=</span>\r\n    <span class=\"hljs-keyword\">let</span> computeTransformTables\r\n        (\r\n            sourceString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>,\r\n            destinationString<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">string</span>,\r\n            copyCost<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>,\r\n            replaceCost<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>,\r\n            deleteCost<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>,\r\n            insertCost<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>\r\n        )<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">int</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">string</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">let</span> sourceSeq <span class=\"hljs-operator\">=</span> [ sourceString ]\r\n        <span class=\"hljs-keyword\">let</span> destinationSeq <span class=\"hljs-operator\">=</span> [ destinationString ]\r\n        <span class=\"hljs-keyword\">let</span> lenSourceSeq <span class=\"hljs-operator\">=</span> sourceSeq.Length\r\n        <span class=\"hljs-keyword\">let</span> lenDestinationSeq <span class=\"hljs-operator\">=</span> destinationSeq.Length\r\n\r\n        <span class=\"hljs-keyword\">let</span> costs <span class=\"hljs-operator\">=</span>\r\n            [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> (lenSourceSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>) <span class=\"hljs-operator\">-&gt;</span> [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> lenDestinationSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">|</span>] <span class=\"hljs-operator\">|</span>]\r\n\r\n        <span class=\"hljs-keyword\">let</span> ops <span class=\"hljs-operator\">=</span>\r\n            [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> lenSourceSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">-&gt;</span> [<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">..</span> lenDestinationSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">-&gt;</span> <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-operator\">|</span>] <span class=\"hljs-operator\">|</span>]\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">to</span> lenSourceSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n            costs.[i].[<span class=\"hljs-number\">0</span>] <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">*</span> deleteCost\r\n            ops.[i].[<span class=\"hljs-number\">0</span>] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;D%s&quot;</span> (sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">to</span> lenDestinationSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n            costs.[<span class=\"hljs-number\">0</span>].[i] <span class=\"hljs-operator\">&lt;-</span> i <span class=\"hljs-operator\">*</span> insertCost\r\n            ops.[<span class=\"hljs-number\">0</span>].[i] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;I%s&quot;</span> (destinationSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> lenSourceSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">..</span> lenDestinationSeq <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n                <span class=\"hljs-keyword\">if</span> sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">=</span> destinationSeq.[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">then</span>\r\n                    costs.[i].[j] <span class=\"hljs-operator\">&lt;-</span> costs.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>].[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">+</span> copyCost\r\n                    ops.[i].[j] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;C%s&quot;</span> (sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\r\n                <span class=\"hljs-keyword\">else</span>\r\n                    costs.[i].[j] <span class=\"hljs-operator\">&lt;-</span> costs.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>].[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">+</span> replaceCost\r\n\r\n                    ops.[i].[j] <span class=\"hljs-operator\">&lt;-</span>\r\n                        <span class=\"hljs-built_in\">sprintf</span>\r\n                            <span class=\"hljs-string\">&quot;R%s&quot;</span>\r\n                            (sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]\r\n                             <span class=\"hljs-operator\">+</span> (string) (destinationSeq.[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>]))\r\n\r\n                <span class=\"hljs-keyword\">if</span> costs.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>].[j] <span class=\"hljs-operator\">+</span> deleteCost <span class=\"hljs-operator\">&lt;</span> costs.[i].[j] <span class=\"hljs-keyword\">then</span>\r\n                    costs.[i].[j] <span class=\"hljs-operator\">&lt;-</span> costs.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>].[j] <span class=\"hljs-operator\">+</span> deleteCost\r\n                    ops.[i].[j] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;D%s&quot;</span> (sourceSeq.[i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\r\n\r\n                <span class=\"hljs-keyword\">if</span> costs.[i].[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">+</span> insertCost <span class=\"hljs-operator\">&lt;</span> costs.[i].[j] <span class=\"hljs-keyword\">then</span>\r\n                    costs.[i].[j] <span class=\"hljs-operator\">&lt;-</span> costs.[i].[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>] <span class=\"hljs-operator\">+</span> insertCost\r\n                    ops.[i].[j] <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">sprintf</span> <span class=\"hljs-string\">&quot;I%s&quot;</span> (destinationSeq.[j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>])\r\n\r\n        costs <span class=\"hljs-operator\">|&gt;</span> Seq.cast<span class=\"hljs-operator\">&lt;</span>int<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">|&gt;</span> Seq.toList, ops <span class=\"hljs-operator\">|&gt;</span> Seq.cast<span class=\"hljs-operator\">&lt;</span>string<span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">|&gt;</span> Seq.toList\r\n\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> assembleTransformation (ops<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">string</span><span class=\"hljs-operator\">&gt;</span>, i<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>, j<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">int</span>)<span class=\"hljs-operator\">:</span> <span class=\"hljs-type\">list</span><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-type\">string</span><span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-operator\">=</span>\r\n        <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">&amp;&amp;</span> j <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\r\n            List.empty\r\n        <span class=\"hljs-keyword\">else</span>\r\n            <span class=\"hljs-keyword\">match</span> ops.[i].[j] <span class=\"hljs-keyword\">with</span>\r\n            <span class=\"hljs-operator\">|</span> o <span class=\"hljs-keyword\">when</span> o <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;C&#x27;</span> <span class=\"hljs-operator\">||</span> o <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;R&#x27;</span> <span class=\"hljs-operator\">-&gt;</span>\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> seq <span class=\"hljs-operator\">=</span>\r\n                    assembleTransformation (ops, i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>, j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>)\r\n                    <span class=\"hljs-operator\">|&gt;</span> List.toArray\r\n\r\n                <span class=\"hljs-keyword\">let</span> ch <span class=\"hljs-operator\">=</span>\r\n                    [ ((string) ops.[i].[j]) ] <span class=\"hljs-operator\">|&gt;</span> List.toArray\r\n\r\n                seq <span class=\"hljs-operator\">&lt;-</span> seq <span class=\"hljs-operator\">|&gt;</span> Array.append ch\r\n                seq <span class=\"hljs-operator\">|&gt;</span> List.ofArray\r\n            <span class=\"hljs-operator\">|</span> <span class=\"hljs-string\">&#x27;D&#x27;</span> <span class=\"hljs-operator\">-&gt;</span>\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> seq <span class=\"hljs-operator\">=</span>\r\n                    assembleTransformation (ops, i <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>, j)\r\n                    <span class=\"hljs-operator\">|&gt;</span> List.toArray\r\n\r\n                <span class=\"hljs-keyword\">let</span> ch <span class=\"hljs-operator\">=</span>\r\n                    [ ((string) ops.[i].[j]) ] <span class=\"hljs-operator\">|&gt;</span> List.toArray\r\n\r\n                seq <span class=\"hljs-operator\">&lt;-</span> seq <span class=\"hljs-operator\">|&gt;</span> Array.append ch\r\n                seq <span class=\"hljs-operator\">|&gt;</span> List.ofArray\r\n            <span class=\"hljs-operator\">|</span> _ <span class=\"hljs-operator\">-&gt;</span>\r\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> seq <span class=\"hljs-operator\">=</span>\r\n                    assembleTransformation (ops, i, j <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>)\r\n                    <span class=\"hljs-operator\">|&gt;</span> List.toArray\r\n\r\n                <span class=\"hljs-keyword\">let</span> ch <span class=\"hljs-operator\">=</span>\r\n                    [ ((string) ops.[i].[j]) ] <span class=\"hljs-operator\">|&gt;</span> List.toArray\r\n\r\n                seq <span class=\"hljs-operator\">&lt;-</span> seq <span class=\"hljs-operator\">|&gt;</span> Array.append ch\r\n                seq <span class=\"hljs-operator\">|&gt;</span> List.ofArray\r\n"
    }
  },
  "contributors": [
    {
      "name": "imp",
      "email": "imp07@qq.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Eugeniy Orlov",
      "email": "sonic050288@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mickaël Schoentgen",
      "email": "contact@tiger-222.fr",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Daniel Ingram",
      "email": "ingramds@appstate.edu",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}