{
  "slug": "bloomfilter",
  "name": "BloomFilter",
  "categories": [
    "datastructures",
    "probabilistic"
  ],
  "body": {
    "en": "<p>Bloom Filters are one of a class of probabilistic data structures. The Bloom Filter uses hashes and probability to determine whether a particular item is present in a set. It can do so in constant time: O(1) and sub-linear space, though technically still O(n). An important feature of a Bloom Filter is that it is guaranteed never to provide a false negative, saying an element isn't present when it is. However, it has a probability (based on the tuning of its parameters) of providing a false positive, saying an element is present when it is not. The Bloom Filter uses a multi-hash scheme. On insertion, the inserted object is run through each hash, which produces a slot number. That slot number is flipped to 1 in the bit array. During a presence check, the object is run through the same set of hashes, and if each corresponding slot is 1, the filter reports the object has been added. If any of them are 0, it reports that the object has not been added. The hashes must be deterministic and uniformly distributed over the slots for the Bloom filter to operate effectively.</p>\n<h2>Complexity</h2>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Average</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Initialize</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Insertion</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Query</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Space</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n<h2>Steps</h2>\n<h3>Initialization</h3>\n<ol>\n<li>Bloom Filter is Initialized, with a number of hash functions that will be run against it (henceforth known as <code>k</code>), and with an array of bits of size <code>M</code> with each bit set to 0. There are 3 distinct schemes to tune these parameters.\n<ol>\n<li><code>M</code> and <code>k</code> are explicitly set by the user</li>\n<li><code>k</code> and <code>M</code> are calculated based off the expected number of elements to minimize false positives.</li>\n<li><code>k</code> and <code>M</code> are calculated based off a desired error rate.</li>\n</ol>\n</li>\n</ol>\n<h3>Insertion</h3>\n<ol>\n<li>Object is run through <code>k</code> hashes</li>\n<li>For each result of the hash <code>n</code> determine the slot within the filter <code>m</code> by calculating <code>n % M = m</code></li>\n<li>Set slot <code>m</code> within the filter to 1</li>\n</ol>\n<h3>Query</h3>\n<ol>\n<li>Object is run through <code>k</code> hashes</li>\n<li>For each result of the hash <code>n</code> determine the slot within the filter <code>m</code> by calculating <code>n % M = m</code></li>\n<li>Check slot <code>m</code>, if <code>m</code> is set to 0 return false</li>\n<li>Return true</li>\n</ol>\n<h2>Example</h2>\n<h3>Initialize</h3>\n<p>As an example, let us look at a Bloom Filter of Strings, we will initialize the Bloom Filter with 10 slots an we will use 3 hashes</p>\n<table>\n<thead>\n<tr>\n<th>slot</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>state</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3>Insert</h3>\n<p>Let's try to insert <code>foo</code>, we will run <code>foo</code> through our three hash functions</p>\n<pre><code class=\"hljs language-text\">h1(foo) = 2\r\nh2(foo) = 5\r\nh3(foo) = 6\n</code></pre>\n<p>With hashes run, we will flip the corresponding bits to 1</p>\n<table>\n<thead>\n<tr>\n<th>slot</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>state</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3>Query</h3>\n<h4>Query bar</h4>\n<p>Let's first try querying <code>bar</code>, to query <code>bar</code> we run <code>bar</code> through our three hash functions:</p>\n<pre><code class=\"hljs language-text\">h1(bar) = 3\r\nh2(bar) = 4\r\nh3(bar) = 6\n</code></pre>\n<p>If we look at our bit array, bits 3 and 4 are both not set, if even just 1 bit is not set, we return false, so in this case we return false. <code>bar</code> has not been added</p>\n<h4>Query foo</h4>\n<p>Let's now try to query <code>foo</code>, when we run <code>foo</code> through our hashes we get:</p>\n<pre><code class=\"hljs language-text\">h1(foo) = 2\r\nh2(foo) = 5\r\nh3(foo) = 6\n</code></pre>\n<p>Of course, since we already inserted foo, our table has each of the three bits our hashes produced set to 1, so we return true, <code>foo</code> is present</p>\n<h3>False Positive</h3>\n<p>Let's say we inserted <code>bar</code> and the current state of our table is:</p>\n<table>\n<thead>\n<tr>\n<th>slot</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>state</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>Let's now query <code>baz</code>, when we run baz through our hash functions we get:</p>\n<pre><code class=\"hljs language-text\">h1(baz) = 3\r\nh2(baz) = 5\r\nh3(baz) = 6\n</code></pre>\n<p>Notice that this does not match either the result of <code>foo</code> or <code>bar</code>, however because slots 3, 5, and 6 are already set, we report true, that baz is in the set, and therefore produce a false positive.</p>\n<h2>Advantage Over HashSets</h2>\n<ul>\n<li>Significantly more space-efficient, Both are technically O(n) space complexity, but since bloom filters will only take up several bits per item, hash sets must hold the entire item.</li>\n<li>Presence checks are guaranteed to be O(1) for Bloom Filters, for HashSets, the average is O(1), but worst case is O(n)</li>\n</ul>\n<h2>Disadvantage v.s. Hash Sets</h2>\n<ul>\n<li>Bloom Filters can report false positives. Optimally there should be about a 1% false-positive rate.</li>\n<li>Bloom Filters do not store the objects inserted into it, so you cannot recover items inserted.</li>\n</ul>\n<h2>Optimizing</h2>\n<p>The probability of false positives increases with the probability of hash collisions within the filter. However, you can optimize the number of collisions if you have some sense of the cardinality of your set ahead of time. You can do this by optimizing <code>k</code> and <code>M</code>, <code>M</code> should be ~ 8-10 bits per expected item, and <code>k</code> should be <code>(M/n) * ln2</code>.</p>\n<h2>Examples</h2>\n<p>Implementations of the Bloom Filter are available for:</p>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/DataStructures/Probabilistic/BloomFilter.cs\">C#</a></li>\n</ul>\n<h2>Video Explainer</h2>\n<p><a href=\"https://www.youtube.com/watch?v=Bay3X9PAX5k\">Video Explainer by Narendra L</a></p>"
  },
  "implementations": {
    "c-sharp": {
      "dir": "./DataStructures/Probabilistic/BloomFilter.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\DataStructures\\Probabilistic\\BloomFilter.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Linq;\r\n<span class=\"hljs-keyword\">using</span> System.Text;\r\n<span class=\"hljs-keyword\">using</span> System.Text.Json;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Probabilistic</span>\r\n{\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BloomFilter</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">notnull</span>\r\n    {\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">uint</span> FnvPrime = <span class=\"hljs-number\">16777619</span>;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">uint</span> FnvOffsetBasis = <span class=\"hljs-number\">2166136261</span>;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">byte</span>[] filter;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">int</span> numHashes;\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-built_in\">int</span> sizeBits;\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;BloomFilter{T}&quot;/&gt;</span> class. This constructor will create a Bloom Filter</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> of an optimal size with the optimal number of hashes to minimize the error rate.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;expectedNumElements&quot;&gt;</span>Expected number of unique elements that could be added to the filter.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BloomFilter</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> expectedNumElements</span>)</span>\r\n        {\r\n            numHashes = (<span class=\"hljs-built_in\">int</span>)Math.Ceiling(<span class=\"hljs-number\">.693</span> * <span class=\"hljs-number\">8</span> * expectedNumElements / expectedNumElements); <span class=\"hljs-comment\">// compute optimal number of hashes</span>\r\n            filter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">byte</span>[expectedNumElements]; <span class=\"hljs-comment\">// set up filter with 8 times as many bits as elements</span>\r\n            sizeBits = expectedNumElements * <span class=\"hljs-number\">8</span>; <span class=\"hljs-comment\">// number of bit slots in the filter</span>\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;BloomFilter{T}&quot;/&gt;</span> class.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> This constructor let&#x27;s you decide how large you want the filter to be as well as allowing you to specify</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> how many hashes it will use. Only use if you don&#x27;t care to optimize false positivity.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;sizeBits&quot;&gt;</span>size in bits you want the filter to be.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;numHashes&quot;&gt;</span>number of hash functions to be used.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BloomFilter</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> sizeBits, <span class=\"hljs-built_in\">int</span> numHashes</span>)</span>\r\n        {\r\n            filter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">byte</span>[sizeBits / <span class=\"hljs-number\">8</span> + <span class=\"hljs-number\">1</span>];\r\n            <span class=\"hljs-keyword\">this</span>.numHashes = numHashes;\r\n            <span class=\"hljs-keyword\">this</span>.sizeBits = sizeBits;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Inserts an item into the bloom filter.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>The item being inserted into the Bloom Filter.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Insert</span>(<span class=\"hljs-params\">T item</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">var</span> slot <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">GetSlots</span>(<span class=\"hljs-params\">item</span>))</span>\r\n            {\r\n                filter[slot / <span class=\"hljs-number\">8</span>] |= (<span class=\"hljs-built_in\">byte</span>)(<span class=\"hljs-number\">1</span> &lt;&lt; (slot % <span class=\"hljs-number\">8</span>)); <span class=\"hljs-comment\">// set the filter at the decided slot to 1.</span>\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Searches the Bloom Filter to determine if the item exists in the Bloom Filter.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>The item being searched for in the Bloom Filter.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true if the item has been added to the Bloom Filter, false otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Search</span>(<span class=\"hljs-params\">T item</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">var</span> slot <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">GetSlots</span>(<span class=\"hljs-params\">item</span>))</span>\r\n            {\r\n                <span class=\"hljs-keyword\">var</span> @byte = filter[slot / <span class=\"hljs-number\">8</span>]; <span class=\"hljs-comment\">// Extract the byte in the filter.</span>\r\n                <span class=\"hljs-keyword\">var</span> mask = <span class=\"hljs-number\">1</span> &lt;&lt; (slot % <span class=\"hljs-number\">8</span>); <span class=\"hljs-comment\">// Build the mask for the slot number.</span>\r\n                <span class=\"hljs-keyword\">if</span> ((@byte &amp; mask) != mask)\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Yields the appropriate slots for the given item.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>The item to determine the slots for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The slots of the filter to flip or check.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> IEnumerable&lt;<span class=\"hljs-built_in\">int</span>&gt; <span class=\"hljs-title\">GetSlots</span>(<span class=\"hljs-params\">T item</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> hash = item.GetHashCode();\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; numHashes; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> Math.Abs((i + <span class=\"hljs-number\">1</span>) * hash) % sizeBits;\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stephen Lorello",
      "email": "42971704+slorello89@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en\\Data Structures\\Probablistic\\BloomFilter.md"
  }
}