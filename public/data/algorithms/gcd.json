{
  "slug": "gcd",
  "name": "GCD",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\GCD.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\GCD.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This is Euclid&#x27;s algorithm which is used to find the greatest common\r\n * denominator Overide function name gcd\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Oskar Enmalm 3/10/17\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GCD</span> {\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * get greatest common divisor\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> num1 the first number\r\n     * <span class=\"hljs-doctag\">@param</span> num2 the second number\r\n     * <span class=\"hljs-doctag\">@return</span> gcd\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">gcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num1, <span class=\"hljs-type\">int</span> num2)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (num1 &lt; <span class=\"hljs-number\">0</span> || num2 &lt; <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArithmeticException</span>();\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (num1 == <span class=\"hljs-number\">0</span> || num2 == <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> Math.abs(num1 - num2);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">while</span> (num1 % num2 != <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">remainder</span> <span class=\"hljs-operator\">=</span> num1 % num2;\r\n            num1 = num2;\r\n            num2 = remainder;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> num2;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * get greatest common divisor in array\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> number contains number\r\n     * <span class=\"hljs-doctag\">@return</span> gcd\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">gcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] number)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> number[<span class=\"hljs-number\">0</span>];\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; number.length; i++) <span class=\"hljs-comment\">// call gcd function (input two value)</span>\r\n        {\r\n            result = gcd(result, number[i]);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> result;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">int</span>[] myIntArray = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>};\r\n\r\n        <span class=\"hljs-comment\">// call gcd function (input array)</span>\r\n        System.out.println(gcd(myIntArray)); <span class=\"hljs-comment\">// =&gt; 4</span>\r\n        System.out.printf(<span class=\"hljs-string\">&quot;gcd(40,24)=%d gcd(24,40)=%d%n&quot;</span>, gcd(<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">24</span>), gcd(<span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">40</span>)); <span class=\"hljs-comment\">// =&gt; 8</span>\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "misc\\gcd.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc\\gcd.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">// Euclid&#x27;s algorithm</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">GCD</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span>\r\n{\r\n    <span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> x;\r\n    <span class=\"hljs-keyword\">return</span> GCD(y, x % y);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> a, b;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Input two numbers:\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>, &amp;a, &amp;b);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Greatest common divisor: %d\\n&quot;</span>, GCD(a, b));\r\n}\r\n"
    },
    "go": {
      "dir": "math\\gcd\\gcd.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math\\gcd\\gcd.go",
      "code": "<span class=\"hljs-keyword\">package</span> gcd\r\n\r\n<span class=\"hljs-comment\">// Recursive finds and returns the greatest common divisor of a given integer.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Recursive</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int64</span>)</span></span> <span class=\"hljs-type\">int64</span> {\r\n\t<span class=\"hljs-keyword\">if</span> b == <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> a\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> Recursive(b, a%b)\r\n}\r\n"
    },
    "dart": {
      "dir": "other\\gcd.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/other\\gcd.dart",
      "code": "<span class=\"hljs-comment\">//This is the Euclidean algorithm.</span>\r\neuclidean_gcd(<span class=\"hljs-keyword\">var</span> a, <span class=\"hljs-keyword\">var</span> b) {\r\n  <span class=\"hljs-keyword\">while</span> (b != <span class=\"hljs-number\">0</span>) {\r\n    <span class=\"hljs-keyword\">var</span> t = b;\r\n    b = a % b;\r\n    a = t;\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> a;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;GCD(1, 4) = &#x27;</span> + euclidean_gcd(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>).toString());\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;GCD(5, 3) = &#x27;</span> + euclidean_gcd(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>).toString());\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;GCD(3, 6) = &#x27;</span> + euclidean_gcd(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>).toString());\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;GCD(8, 4) = &#x27;</span> + euclidean_gcd(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>).toString());\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "João Marcos",
      "email": "joao.medeiros@ccc.ufcg.edu.br",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "teerapat1739",
      "email": "teerapat12345678@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}