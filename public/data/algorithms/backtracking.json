{
  "slug": "backtracking",
  "name": "Backtracking",
  "categories": [
    "graphs",
    "coloring"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "graph\\coloring\\backtracking.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph\\coloring\\backtracking.go",
      "code": "<span class=\"hljs-comment\">// This file contains the graph coloring implementation using backtracking</span>\r\n<span class=\"hljs-comment\">// Author(s): [Shivam](https://github.com/Shivam010)</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> coloring\r\n\r\n<span class=\"hljs-comment\">// ColorUsingBacktracking will return the Color of each vertex and the</span>\r\n<span class=\"hljs-comment\">// total number of different colors used, using backtracking</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> ColorUsingBacktracking() (<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color, <span class=\"hljs-type\">int</span>) {\r\n\tvertexColors := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color, g.vertices)\r\n\tg.colorVertex(<span class=\"hljs-number\">0</span>, vertexColors)\r\n\r\n\tcolorsUsed := <span class=\"hljs-number\">0</span>\r\n\t<span class=\"hljs-keyword\">for</span> _, cr := <span class=\"hljs-keyword\">range</span> vertexColors {\r\n\t\t<span class=\"hljs-keyword\">if</span> colorsUsed &lt; <span class=\"hljs-type\">int</span>(cr) {\r\n\t\t\tcolorsUsed = <span class=\"hljs-type\">int</span>(cr)\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> vertexColors, colorsUsed\r\n}\r\n\r\n<span class=\"hljs-comment\">// colorVertex will try to color provided vertex, v</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> colorVertex(v <span class=\"hljs-type\">int</span>, color <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color) <span class=\"hljs-type\">bool</span> {\r\n\t<span class=\"hljs-comment\">// If all vertices are colored, the colors store will be completely filled.</span>\r\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(color) == g.vertices {\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// As the upper bound of no. of colors is the no. of vertices in graph,</span>\r\n\t<span class=\"hljs-comment\">// try assigning each color to the vertex v</span>\r\n\t<span class=\"hljs-keyword\">for</span> cr := Color(<span class=\"hljs-number\">1</span>); cr &lt;= Color(g.vertices); cr++ {\r\n\t\t<span class=\"hljs-comment\">// Use the color, cr for vertex, v if it is safe to use, by</span>\r\n\t\t<span class=\"hljs-comment\">// checking its neighbours</span>\r\n\t\tsafe := <span class=\"hljs-literal\">true</span>\r\n\t\t<span class=\"hljs-keyword\">for</span> nb := <span class=\"hljs-keyword\">range</span> g.edges[v] {\r\n\t\t\t<span class=\"hljs-comment\">// cr, color is not safe if color of nb, crnb is not equal to cr</span>\r\n\t\t\t<span class=\"hljs-keyword\">if</span> crnb, ok := color[nb]; ok &amp;&amp; crnb == cr {\r\n\t\t\t\tsafe = <span class=\"hljs-literal\">false</span>\r\n\t\t\t\t<span class=\"hljs-keyword\">break</span>\r\n\t\t\t}\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">if</span> safe {\r\n\t\t\tcolor[v] = cr\r\n\t\t\t<span class=\"hljs-keyword\">if</span> g.colorVertex(v+<span class=\"hljs-number\">1</span>, color) {\r\n\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\r\n\t\t\t}\r\n\t\t\t<span class=\"hljs-built_in\">delete</span>(color, v)\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\r\n}\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Problems/NQueens/BacktrackingNQueensSolver.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Problems\\NQueens\\BacktrackingNQueensSolver.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Problems.NQueens</span>\r\n{\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BacktrackingNQueensSolver</span>\r\n    {\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Solves N-Queen Problem given a n dimension chessboard and using backtracking with recursion algorithm.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     If we find a dead-end within or current solution we go back and try another position for queen.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>Number of rows.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>All solutions.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-keyword\">public</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; BacktrackSolve(<span class=\"hljs-built_in\">int</span> n)\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-keyword\">nameof</span>(n));\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> BacktrackSolve(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">bool</span>[n, n], <span class=\"hljs-number\">0</span>);\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; BacktrackSolve(<span class=\"hljs-built_in\">bool</span>[,] board, <span class=\"hljs-built_in\">int</span> col)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> solutions = col &lt; board.GetLength(<span class=\"hljs-number\">0</span>) - <span class=\"hljs-number\">1</span>\r\n                ? HandleIntermediateColumn(board, col)\r\n                : HandleLastColumn(board);\r\n            <span class=\"hljs-keyword\">return</span> solutions;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; HandleIntermediateColumn(<span class=\"hljs-built_in\">bool</span>[,] board, <span class=\"hljs-built_in\">int</span> col)\r\n        {\r\n            <span class=\"hljs-comment\">// To start placing queens on possible spaces within the board.</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; board.GetLength(<span class=\"hljs-number\">0</span>); i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (CanPlace(board, i, col))\r\n                {\r\n                    board[i, col] = <span class=\"hljs-literal\">true</span>;\r\n\r\n                    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">var</span> solution <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">BacktrackSolve</span>(<span class=\"hljs-params\">board, col + <span class=\"hljs-number\">1</span></span>))</span>\r\n                    {\r\n                        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> solution;\r\n                    }\r\n\r\n                    board[i, col] = <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; HandleLastColumn(<span class=\"hljs-built_in\">bool</span>[,] board)\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> n = board.GetLength(<span class=\"hljs-number\">0</span>);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (CanPlace(board, i, n - <span class=\"hljs-number\">1</span>))\r\n                {\r\n                    board[i, n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">true</span>;\r\n\r\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title\">return</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span>[,]</span>)board.<span class=\"hljs-title\">Clone</span>()</span>;\r\n\r\n                    board[i, n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks whether current queen can be placed in current position,</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     outside attacking range of another queen.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;board&quot;&gt;</span>Source board.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;row&quot;&gt;</span>Row coordinate.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;col&quot;&gt;</span>Col coordinate.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true if queen can be placed in given chessboard coordinates; false otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">CanPlace</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span>[,] board, <span class=\"hljs-built_in\">int</span> row, <span class=\"hljs-built_in\">int</span> col</span>)</span>\r\n        {\r\n            <span class=\"hljs-comment\">// To check whether there are any queens on current row.</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; col; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (board[row, i])\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// To check diagonal attack top-left range.</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = row - <span class=\"hljs-number\">1</span>, j = col - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; j &gt;= <span class=\"hljs-number\">0</span>; i--, j--)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (board[i, j])\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// To check diagonal attack bottom-left range.</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = row + <span class=\"hljs-number\">1</span>, j = col - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; i &lt; board.GetLength(<span class=\"hljs-number\">0</span>); i++, j--)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (board[i, j])\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-comment\">// Return true if it can use position.</span>\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Shivam Rathore",
      "email": "shivam.rathore010@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}