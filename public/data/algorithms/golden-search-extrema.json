{
  "slug": "golden-search-extrema",
  "name": "Golden Search Extrema",
  "categories": [
    "numericalmethods"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "numerical_methods\\golden_search_extrema.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods\\golden_search_extrema.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\brief Find extrema of a univariate real function in a given interval using\r\n * [golden section search\r\n * algorithm](https://en.wikipedia.org/wiki/Golden-section_search).\r\n *\r\n * \\see brent_method_extrema.cpp\r\n * \\author [Krishna Vedala](https://github.com/kvedala)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _USE_MATH_DEFINES  <span class=\"hljs-comment\">//&lt; required for MS Visual C++</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;functional&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> EPSILON 1e-7  <span class=\"hljs-comment\">///&lt; solution accuracy limit</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Get the minima of a function in the given interval. To get the maxima,\r\n * simply negate the function. The golden ratio used here is:\\f[\r\n * k=\\frac{3-\\sqrt{5}}{2} \\approx 0.381966\\ldots\\f]\r\n *\r\n * @param f function to get minima for\r\n * @param lim_a lower limit of search window\r\n * @param lim_b upper limit of search window\r\n * @return local minima found in the interval\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">get_minima</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::function&lt;<span class=\"hljs-type\">double</span>(<span class=\"hljs-type\">double</span>)&gt; &amp;f, <span class=\"hljs-type\">double</span> lim_a,\r\n                  <span class=\"hljs-type\">double</span> lim_b)</span> </span>{\r\n    <span class=\"hljs-type\">uint32_t</span> iters = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">double</span> c, d;\r\n    <span class=\"hljs-type\">double</span> prev_mean, mean = std::numeric_limits&lt;<span class=\"hljs-type\">double</span>&gt;::<span class=\"hljs-built_in\">infinity</span>();\r\n\r\n    <span class=\"hljs-comment\">// golden ratio value</span>\r\n    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> M_GOLDEN_RATIO = (<span class=\"hljs-number\">1.f</span> + std::<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-number\">5.f</span>)) / <span class=\"hljs-number\">2.f</span>;\r\n\r\n    <span class=\"hljs-comment\">// ensure that lim_a &lt; lim_b</span>\r\n    <span class=\"hljs-keyword\">if</span> (lim_a &gt; lim_b) {\r\n        std::<span class=\"hljs-built_in\">swap</span>(lim_a, lim_b);\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (std::<span class=\"hljs-built_in\">abs</span>(lim_a - lim_b) &lt;= EPSILON) {\r\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Search range must be greater than &quot;</span> &lt;&lt; EPSILON &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n        <span class=\"hljs-keyword\">return</span> lim_a;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">do</span> {\r\n        prev_mean = mean;\r\n\r\n        <span class=\"hljs-comment\">// compute the section ratio width</span>\r\n        <span class=\"hljs-type\">double</span> ratio = (lim_b - lim_a) / M_GOLDEN_RATIO;\r\n        c = lim_b - ratio;  <span class=\"hljs-comment\">// right-side section start</span>\r\n        d = lim_a + ratio;  <span class=\"hljs-comment\">// left-side section end</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">f</span>(c) &lt; <span class=\"hljs-built_in\">f</span>(d)) {\r\n            <span class=\"hljs-comment\">// select left section</span>\r\n            lim_b = d;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-comment\">// selct right section</span>\r\n            lim_a = c;\r\n        }\r\n\r\n        mean = (lim_a + lim_b) / <span class=\"hljs-number\">2.f</span>;\r\n        iters++;\r\n\r\n        <span class=\"hljs-comment\">// continue till the interval width is greater than sqrt(system epsilon)</span>\r\n    } <span class=\"hljs-keyword\">while</span> (std::<span class=\"hljs-built_in\">abs</span>(lim_a - lim_b) &gt; EPSILON);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; (iters: &quot;</span> &lt;&lt; iters &lt;&lt; <span class=\"hljs-string\">&quot;) &quot;</span>;\r\n    <span class=\"hljs-keyword\">return</span> prev_mean;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function to find minima for the function\r\n * \\f$f(x)= (x-2)^2\\f$\r\n * in the interval \\f$[1,5]\\f$\r\n * \\n Expected result = 2\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// define the function to minimize as a lambda function</span>\r\n    std::function&lt;<span class=\"hljs-type\">double</span>(<span class=\"hljs-type\">double</span>)&gt; f1 = [](<span class=\"hljs-type\">double</span> x) {\r\n        <span class=\"hljs-built_in\">return</span> (x - <span class=\"hljs-number\">2</span>) * (x - <span class=\"hljs-number\">2</span>);\r\n    };\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1.... &quot;</span>;\r\n\r\n    <span class=\"hljs-type\">double</span> minima = <span class=\"hljs-built_in\">get_minima</span>(f1, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>);\r\n\r\n    std::cout &lt;&lt; minima &lt;&lt; <span class=\"hljs-string\">&quot;...&quot;</span>;\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(minima - <span class=\"hljs-number\">2</span>) &lt; EPSILON);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function to find *maxima* for the function\r\n * \\f$f(x)= x^{\\frac{1}{x}}\\f$\r\n * in the interval \\f$[-2,10]\\f$\r\n * \\n Expected result: \\f$e\\approx 2.71828182845904509\\f$\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// define the function to maximize as a lambda function</span>\r\n    <span class=\"hljs-comment\">// since we are maximixing, we negated the function return value</span>\r\n    std::function&lt;<span class=\"hljs-type\">double</span>(<span class=\"hljs-type\">double</span>)&gt; func = [](<span class=\"hljs-type\">double</span> x) {\r\n        <span class=\"hljs-keyword\">return</span> -std::<span class=\"hljs-built_in\">pow</span>(x, <span class=\"hljs-number\">1.f</span> / x);\r\n    };\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2.... &quot;</span>;\r\n\r\n    <span class=\"hljs-type\">double</span> minima = <span class=\"hljs-built_in\">get_minima</span>(func, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">10</span>);\r\n\r\n    std::cout &lt;&lt; minima &lt;&lt; <span class=\"hljs-string\">&quot; (&quot;</span> &lt;&lt; M_E &lt;&lt; <span class=\"hljs-string\">&quot;)...&quot;</span>;\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(minima - M_E) &lt; EPSILON);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Test function to find *maxima* for the function\r\n * \\f$f(x)= \\cos x\\f$\r\n * in the interval \\f$[0,12]\\f$\r\n * \\n Expected result: \\f$\\pi\\approx 3.14159265358979312\\f$\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// define the function to maximize as a lambda function</span>\r\n    <span class=\"hljs-comment\">// since we are maximixing, we negated the function return value</span>\r\n    std::function&lt;<span class=\"hljs-type\">double</span>(<span class=\"hljs-type\">double</span>)&gt; func = [](<span class=\"hljs-type\">double</span> x) { <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">cos</span>(x); };\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3.... &quot;</span>;\r\n\r\n    <span class=\"hljs-type\">double</span> minima = <span class=\"hljs-built_in\">get_minima</span>(func, <span class=\"hljs-number\">-4</span>, <span class=\"hljs-number\">12</span>);\r\n\r\n    std::cout &lt;&lt; minima &lt;&lt; <span class=\"hljs-string\">&quot; (&quot;</span> &lt;&lt; M_PI &lt;&lt; <span class=\"hljs-string\">&quot;)...&quot;</span>;\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(minima - M_PI) &lt; EPSILON);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    std::cout.<span class=\"hljs-built_in\">precision</span>(<span class=\"hljs-number\">9</span>);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Computations performed with machine epsilon: &quot;</span> &lt;&lt; EPSILON\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-built_in\">test1</span>();\r\n    <span class=\"hljs-built_in\">test2</span>();\r\n    <span class=\"hljs-built_in\">test3</span>();\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 8
    }
  ],
  "explanationUrl": {}
}