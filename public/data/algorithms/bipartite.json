{
  "slug": "bipartite",
  "name": "Bipartite",
  "categories": [
    "graphs",
    "coloring"
  ],
  "body": {},
  "implementations": {
    "go": {
      "dir": "graph\\coloring\\bipartite.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph\\coloring\\bipartite.go",
      "code": "<span class=\"hljs-keyword\">package</span> coloring\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> TryBipartiteColoring() <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color {\r\n\t<span class=\"hljs-comment\">// 0 is uncolored, 1/2 is colors</span>\r\n\tcolors := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]Color)\r\n\tvisited := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">bool</span>)\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> g.edges {\r\n\t\tcolors[i] = <span class=\"hljs-number\">0</span>\r\n\t\tvisited[i] = <span class=\"hljs-literal\">false</span>\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">var</span> color_node <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span>\r\n\tcolor_node = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(s <span class=\"hljs-type\">int</span>)</span></span> {\r\n\t\tvisited[s] = <span class=\"hljs-literal\">true</span>\r\n\t\tcoloring := []Color{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>}\r\n\r\n\t\t<span class=\"hljs-keyword\">for</span> n := <span class=\"hljs-keyword\">range</span> g.edges[s] {\r\n\t\t\t<span class=\"hljs-keyword\">if</span> colors[n] == <span class=\"hljs-number\">0</span> {\r\n\t\t\t\tcolors[n] = coloring[colors[s]]\r\n\t\t\t}\r\n\t\t\t<span class=\"hljs-keyword\">if</span> !visited[n] {\r\n\t\t\t\tcolor_node(n)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> g.edges {\r\n\t\t<span class=\"hljs-keyword\">if</span> colors[i] == <span class=\"hljs-number\">0</span> {\r\n\t\t\tcolors[i] = <span class=\"hljs-number\">1</span>\r\n\t\t\tcolor_node(i)\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> colors\r\n}\r\n\r\n<span class=\"hljs-comment\">// basically tries to color the graph in two colors if each edge</span>\r\n<span class=\"hljs-comment\">// connects 2 differently colored nodes the graph can be considered bipartite</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BipartiteCheck</span><span class=\"hljs-params\">(N <span class=\"hljs-type\">int</span>, edges [][]<span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">bool</span> {\r\n\t<span class=\"hljs-keyword\">var</span> graph Graph\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; N; i++ {\r\n\t\tgraph.AddVertex(i)\r\n\t}\r\n\t<span class=\"hljs-keyword\">for</span> _, e := <span class=\"hljs-keyword\">range</span> edges {\r\n\t\tgraph.AddEdge(e[<span class=\"hljs-number\">0</span>], e[<span class=\"hljs-number\">1</span>])\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> graph.ValidateColorsOfVertex(graph.TryBipartiteColoring()) == <span class=\"hljs-literal\">nil</span>\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Metta Ong",
      "email": "ongspxm@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}