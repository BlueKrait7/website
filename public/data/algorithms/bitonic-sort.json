{
  "slug": "bitonic-sort",
  "name": "Bitonic Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\bitonic_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\bitonic_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nPython program for Bitonic Sort.\r\n\r\nNote that this program works only when size of input is a power of 2.\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">comp_and_swap</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], index1: <span class=\"hljs-built_in\">int</span>, index2: <span class=\"hljs-built_in\">int</span>, direction: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Compare the value at given index1 and index2 of the array and swap them as per\r\n    the given direction.\r\n\r\n    The parameter direction indicates the sorting direction, ASCENDING(1) or\r\n    DESCENDING(0); if (a[i] &gt; a[j]) agrees with the direction, then a[i] and a[j] are\r\n    interchanged.\r\n\r\n    &gt;&gt;&gt; arr = [12, 42, -21, 1]\r\n    &gt;&gt;&gt; comp_and_swap(arr, 1, 2, 1)\r\n    &gt;&gt;&gt; print(arr)\r\n    [12, -21, 42, 1]\r\n\r\n    &gt;&gt;&gt; comp_and_swap(arr, 1, 2, 0)\r\n    &gt;&gt;&gt; print(arr)\r\n    [12, 42, -21, 1]\r\n\r\n    &gt;&gt;&gt; comp_and_swap(arr, 0, 3, 1)\r\n    &gt;&gt;&gt; print(arr)\r\n    [1, 42, -21, 12]\r\n\r\n    &gt;&gt;&gt; comp_and_swap(arr, 0, 3, 0)\r\n    &gt;&gt;&gt; print(arr)\r\n    [12, 42, -21, 1]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> (direction == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> array[index1] &gt; array[index2]) <span class=\"hljs-keyword\">or</span> (\r\n        direction == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> array[index1] &lt; array[index2]\r\n    ):\r\n        array[index1], array[index2] = array[index2], array[index1]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bitonic_merge</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], low: <span class=\"hljs-built_in\">int</span>, length: <span class=\"hljs-built_in\">int</span>, direction: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    It recursively sorts a bitonic sequence in ascending order, if direction = 1, and in\r\n    descending if direction = 0.\r\n    The sequence to be sorted starts at index position low, the parameter length is the\r\n    number of elements to be sorted.\r\n\r\n    &gt;&gt;&gt; arr = [12, 42, -21, 1]\r\n    &gt;&gt;&gt; bitonic_merge(arr, 0, 4, 1)\r\n    &gt;&gt;&gt; print(arr)\r\n    [-21, 1, 12, 42]\r\n\r\n    &gt;&gt;&gt; bitonic_merge(arr, 0, 4, 0)\r\n    &gt;&gt;&gt; print(arr)\r\n    [42, 12, 1, -21]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> length &gt; <span class=\"hljs-number\">1</span>:\r\n        middle = <span class=\"hljs-built_in\">int</span>(length / <span class=\"hljs-number\">2</span>)\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(low, low + middle):\r\n            comp_and_swap(array, i, i + middle, direction)\r\n        bitonic_merge(array, low, middle, direction)\r\n        bitonic_merge(array, low + middle, middle, direction)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bitonic_sort</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], low: <span class=\"hljs-built_in\">int</span>, length: <span class=\"hljs-built_in\">int</span>, direction: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    This function first produces a bitonic sequence by recursively sorting its two\r\n    halves in opposite sorting orders, and then calls bitonic_merge to make them in the\r\n    same order.\r\n\r\n    &gt;&gt;&gt; arr = [12, 34, 92, -23, 0, -121, -167, 145]\r\n    &gt;&gt;&gt; bitonic_sort(arr, 0, 8, 1)\r\n    &gt;&gt;&gt; arr\r\n    [-167, -121, -23, 0, 12, 34, 92, 145]\r\n\r\n    &gt;&gt;&gt; bitonic_sort(arr, 0, 8, 0)\r\n    &gt;&gt;&gt; arr\r\n    [145, 92, 34, 12, 0, -23, -121, -167]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> length &gt; <span class=\"hljs-number\">1</span>:\r\n        middle = <span class=\"hljs-built_in\">int</span>(length / <span class=\"hljs-number\">2</span>)\r\n        bitonic_sort(array, low, middle, <span class=\"hljs-number\">1</span>)\r\n        bitonic_sort(array, low + middle, middle, <span class=\"hljs-number\">0</span>)\r\n        bitonic_merge(array, low, length, direction)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item.strip()) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n\r\n    bitonic_sort(unsorted, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(unsorted), <span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nSorted array in ascending order is: &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(*unsorted, sep=<span class=\"hljs-string\">&quot;, &quot;</span>)\r\n\r\n    bitonic_merge(unsorted, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(unsorted), <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Sorted array in descending order is: &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(*unsorted, sep=<span class=\"hljs-string\">&quot;, &quot;</span>)\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\bitonic_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\bitonic_sort.cpp",
      "code": "<span class=\"hljs-comment\">// Source : https://www.geeksforgeeks.org/bitonic-sort/</span>\r\n\r\n<span class=\"hljs-comment\">/* C++ Program for Bitonic Sort. Note that this program\r\n   works only when size of input is a power of 2. */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/*The parameter dir indicates the sorting direction, ASCENDING\r\n   or DESCENDING; if (a[i] &gt; a[j]) agrees with the direction,\r\n   then a[i] and a[j] are interchanged.*/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">compAndSwap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">int</span> dir)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (dir == (a[i] &gt; a[j]))\r\n        std::<span class=\"hljs-built_in\">swap</span>(a[i], a[j]);\r\n}\r\n\r\n<span class=\"hljs-comment\">/*It recursively sorts a bitonic sequence in ascending order,\r\n  if dir = 1, and in descending order otherwise (means dir=0).\r\n  The sequence to be sorted starts at index position low,\r\n  the parameter cnt is the number of elements to be sorted.*/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bitonicMerge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> cnt, <span class=\"hljs-type\">int</span> dir)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (cnt &gt; <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-type\">int</span> k = cnt / <span class=\"hljs-number\">2</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = low; i &lt; low + k; i++) <span class=\"hljs-built_in\">compAndSwap</span>(a, i, i + k, dir);\r\n        <span class=\"hljs-built_in\">bitonicMerge</span>(a, low, k, dir);\r\n        <span class=\"hljs-built_in\">bitonicMerge</span>(a, low + k, k, dir);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/* This function first produces a bitonic sequence by recursively\r\n    sorting its two halves in opposite sorting orders, and then\r\n    calls bitonicMerge to make them in the same order */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bitonicSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> cnt, <span class=\"hljs-type\">int</span> dir)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (cnt &gt; <span class=\"hljs-number\">1</span>) {\r\n        <span class=\"hljs-type\">int</span> k = cnt / <span class=\"hljs-number\">2</span>;\r\n\r\n        <span class=\"hljs-comment\">// sort in ascending order since dir here is 1</span>\r\n        <span class=\"hljs-built_in\">bitonicSort</span>(a, low, k, <span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-comment\">// sort in descending order since dir here is 0</span>\r\n        <span class=\"hljs-built_in\">bitonicSort</span>(a, low + k, k, <span class=\"hljs-number\">0</span>);\r\n\r\n        <span class=\"hljs-comment\">// Will merge wole sequence in ascending order</span>\r\n        <span class=\"hljs-comment\">// since dir=1.</span>\r\n        <span class=\"hljs-built_in\">bitonicMerge</span>(a, low, cnt, dir);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/* Caller of bitonicSort for sorting the entire array of\r\n   length N in ASCENDING order */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">int</span> up)</span> </span>{ <span class=\"hljs-built_in\">bitonicSort</span>(a, <span class=\"hljs-number\">0</span>, N, up); }\r\n\r\n<span class=\"hljs-comment\">// Driver code</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> a[] = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>};\r\n    <span class=\"hljs-type\">int</span> N = <span class=\"hljs-built_in\">sizeof</span>(a) / <span class=\"hljs-built_in\">sizeof</span>(a[<span class=\"hljs-number\">0</span>]);\r\n\r\n    <span class=\"hljs-type\">int</span> up = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// means sort in ascending order</span>\r\n    <span class=\"hljs-built_in\">sort</span>(a, N, up);\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array: \\n&quot;</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) std::cout &lt;&lt; a[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\BitonicSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\BitonicSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-comment\">/* Java program for Bitonic Sort. Note that this program\r\nworks only when size of input is a power of 2. */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BitonicSort</span> {\r\n\r\n    <span class=\"hljs-comment\">/* The parameter dir indicates the sorting direction,\r\n  ASCENDING or DESCENDING; if (a[i] &gt; a[j]) agrees\r\n  with the direction, then a[i] and a[j] are\r\n  interchanged. */</span>\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">compAndSwap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">int</span> dir)</span> {\r\n        <span class=\"hljs-keyword\">if</span> ((a[i] &gt; a[j] &amp;&amp; dir == <span class=\"hljs-number\">1</span>) || (a[i] &lt; a[j] &amp;&amp; dir == <span class=\"hljs-number\">0</span>)) {\r\n            <span class=\"hljs-comment\">// Swapping elements</span>\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> a[i];\r\n            a[i] = a[j];\r\n            a[j] = temp;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* It recursively sorts a bitonic sequence in ascending\r\n  order, if dir = 1, and in descending order otherwise\r\n  (means dir=0). The sequence to be sorted starts at\r\n  index position low, the parameter cnt is the number\r\n  of elements to be sorted.*/</span>\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bitonicMerge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> cnt, <span class=\"hljs-type\">int</span> dir)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (cnt &gt; <span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> cnt / <span class=\"hljs-number\">2</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> low; i &lt; low + k; i++) {\r\n                compAndSwap(a, i, i + k, dir);\r\n            }\r\n            bitonicMerge(a, low, k, dir);\r\n            bitonicMerge(a, low + k, k, dir);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* This funcion first produces a bitonic sequence by\r\n  recursively sorting its two halves in opposite sorting\r\n  orders, and then calls bitonicMerge to make them in\r\n  the same order */</span>\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bitonicSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> cnt, <span class=\"hljs-type\">int</span> dir)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (cnt &gt; <span class=\"hljs-number\">1</span>) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> cnt / <span class=\"hljs-number\">2</span>;\r\n\r\n            <span class=\"hljs-comment\">// sort in ascending order since dir here is 1</span>\r\n            bitonicSort(a, low, k, <span class=\"hljs-number\">1</span>);\r\n\r\n            <span class=\"hljs-comment\">// sort in descending order since dir here is 0</span>\r\n            bitonicSort(a, low + k, k, <span class=\"hljs-number\">0</span>);\r\n\r\n            <span class=\"hljs-comment\">// Will merge whole sequence in ascending order</span>\r\n            <span class=\"hljs-comment\">// since dir=1.</span>\r\n            bitonicMerge(a, low, cnt, dir);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/*Caller of bitonicSort for sorting the entire array\r\n  of length N in ASCENDING order */</span>\r\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">int</span> up)</span> {\r\n        bitonicSort(a, <span class=\"hljs-number\">0</span>, N, up);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* A utility function to print array of size n */</span>\r\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> arr.length;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\r\n            System.out.print(arr[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\r\n        <span class=\"hljs-type\">int</span> a[] = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>};\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">up</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-type\">BitonicSort</span> <span class=\"hljs-variable\">ob</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BitonicSort</span>();\r\n        ob.sort(a, a.length, up);\r\n        System.out.println(<span class=\"hljs-string\">&quot;\\nSorted array&quot;</span>);\r\n        printArray(a);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Manan-Rathi",
      "email": "76519771+Manan-Rathi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Alaa El Bouhdidi",
      "email": "alaa.el.bouhdidi@mni.thm.de",
      "commits": 1
    },
    {
      "name": "Jogendra Singh",
      "email": "58473917+Joe-Sin7h@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aruj Sharma",
      "email": "aruj123sharma@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}