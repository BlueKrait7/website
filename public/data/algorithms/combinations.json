{
  "slug": "combinations",
  "name": "Combinations",
  "categories": [
    "math"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths\\combinations.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths\\combinations.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nhttps://en.wikipedia.org/wiki/Combination\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> factorial\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">combinations</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, k: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Returns the number of different combinations of k length which can\r\n    be made from n values, where n &gt;= k.\r\n\r\n    Examples:\r\n    &gt;&gt;&gt; combinations(10,5)\r\n    252\r\n\r\n    &gt;&gt;&gt; combinations(6,3)\r\n    20\r\n\r\n    &gt;&gt;&gt; combinations(20,5)\r\n    15504\r\n\r\n    &gt;&gt;&gt; combinations(52, 5)\r\n    2598960\r\n\r\n    &gt;&gt;&gt; combinations(0, 0)\r\n    1\r\n\r\n    &gt;&gt;&gt; combinations(-4, -5)\r\n    ...\r\n    Traceback (most recent call last):\r\n    ValueError: Please enter positive integers for n and k where n &gt;= k\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-comment\"># If either of the conditions are true, the function is being asked</span>\r\n    <span class=\"hljs-comment\"># to calculate a factorial of a negative number, which is not possible</span>\r\n    <span class=\"hljs-keyword\">if</span> n &lt; k <span class=\"hljs-keyword\">or</span> k &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Please enter positive integers for n and k where n &gt;= k&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(factorial(n) / ((factorial(k)) * (factorial(n - k))))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;\\nThe number of five-card hands possible from a standard&quot;</span>,\r\n        <span class=\"hljs-string\">f&quot;fifty-two card deck is: <span class=\"hljs-subst\">{combinations(<span class=\"hljs-number\">52</span>, <span class=\"hljs-number\">5</span>)}</span>&quot;</span>,\r\n    )\r\n\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;\\nIf a class of 40 students must be arranged into groups of&quot;</span>,\r\n        <span class=\"hljs-string\">f&quot;4 for group projects, there are <span class=\"hljs-subst\">{combinations(<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">4</span>)}</span> ways&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;to arrange them.\\n&quot;</span>,\r\n    )\r\n\r\n    <span class=\"hljs-built_in\">print</span>(\r\n        <span class=\"hljs-string\">&quot;If 10 teams are competing in a Formula One race, there&quot;</span>,\r\n        <span class=\"hljs-string\">f&quot;are <span class=\"hljs-subst\">{combinations(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>)}</span> ways that first, second and&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;third place can be awarded.\\n&quot;</span>,\r\n    )\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\maths\\Combinations.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\maths\\Combinations.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.maths;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@see</span> &lt;a href=&quot;https://en.wikipedia.org/wiki/Combination&quot;&gt;Combination&lt;/a&gt;\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Combinations</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinations</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)</span> == <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinations</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>)</span> == <span class=\"hljs-number\">252</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinations</span><span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>)</span> == <span class=\"hljs-number\">20</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinations</span><span class=\"hljs-params\">(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">5</span>)</span> == <span class=\"hljs-number\">15504</span>;\r\n\r\n        <span class=\"hljs-comment\">// Since, 200 is a big number its factorial will go beyond limits of long even when 200C5 can be saved in a long</span>\r\n        <span class=\"hljs-comment\">// variable. So below will fail</span>\r\n        <span class=\"hljs-comment\">// assert combinations(200, 5) == 2535650040l;</span>\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinationsOptimized</span><span class=\"hljs-params\">(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>)</span> == <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinationsOptimized</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)</span> == <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinationsOptimized</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>)</span> == <span class=\"hljs-number\">252</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinationsOptimized</span><span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>)</span> == <span class=\"hljs-number\">20</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinationsOptimized</span><span class=\"hljs-params\">(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">5</span>)</span> == <span class=\"hljs-number\">15504</span>;\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">combinationsOptimized</span><span class=\"hljs-params\">(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">5</span>)</span> == <span class=\"hljs-number\">2535650040l</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate of factorial\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> n the number\r\n     * <span class=\"hljs-doctag\">@return</span> factorial of given number\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">factorial</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;number is negative&quot;</span>);\r\n        }\r\n        <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span> || n == <span class=\"hljs-number\">1</span> ? <span class=\"hljs-number\">1</span> : n * factorial(n - <span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Calculate combinations\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> n first number\r\n     * <span class=\"hljs-doctag\">@param</span> k second number\r\n     * <span class=\"hljs-doctag\">@return</span> combinations of given {<span class=\"hljs-doctag\">@code</span> n} and {<span class=\"hljs-doctag\">@code</span> k}\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">combinations</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> k)</span> {\r\n        <span class=\"hljs-keyword\">return</span> factorial(n) / (factorial(k) * factorial(n - k));\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * The above method can exceed limit of long (overflow) when factorial(n) is\r\n     * larger than limits of long variable. Thus even if nCk is within range of\r\n     * long variable above reason can lead to incorrect result. This is an\r\n     * optimized version of computing combinations. Observations: nC(k + 1) = (n\r\n     * - k) * nCk / (k + 1) We know the value of nCk when k = 1 which is nCk = n\r\n     * Using this base value and above formula we can compute the next term\r\n     * nC(k+1)\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> n\r\n     * <span class=\"hljs-doctag\">@param</span> k\r\n     * <span class=\"hljs-doctag\">@return</span> nCk\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">combinationsOptimized</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> k)</span> {\r\n        <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span> || k &lt; <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;n or k can&#x27;t be negative&quot;</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (n &lt; k) {\r\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;n can&#x27;t be smaller than k&quot;</span>);\r\n        }\r\n        <span class=\"hljs-comment\">// nC0 is always 1</span>\r\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">solution</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; k; i++) {\r\n            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> (n - i) * solution / (i + <span class=\"hljs-number\">1</span>);\r\n            solution = next;\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> solution;\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Chetan Kaushik",
      "email": "dynamitechetan@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Amit Kumar",
      "email": "kumanoit@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rolv Apneseth",
      "email": "rolv.apneseth@gmail.com",
      "commits": 1
    },
    {
      "name": "Cole Mollica",
      "email": "30614241+coleman2246@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}