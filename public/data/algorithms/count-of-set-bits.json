{
  "slug": "count-of-set-bits",
  "name": "Count of Set Bits",
  "categories": [
    "bitmanipulation"
  ],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "bit_manipulation\\count_of_set_bits.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/bit_manipulation\\count_of_set_bits.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation to [count number of set bits of a number]\r\n * (https://www.geeksforgeeks.org/count-set-bits-in-an-integer/) in an\r\n * integer.\r\n *\r\n * @details\r\n * We are given an integer number. We need to calculate the number of set bits\r\n * in it.\r\n *\r\n * A binary number consists of two digits. They are 0 &amp; 1. Digit 1 is known as\r\n * set bit in computer terms.\r\n * Worst Case Time Complexity: O(log n)\r\n * Space complexity: O(1)\r\n * @author [Swastika Gupta](https://github.com/Swastyy)\r\n * @author [Prashant Thakur](https://github.com/prashant-th18)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-comment\">/**\r\n * @namespace bit_manipulation\r\n * @brief Bit manipulation algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> bit_manipulation {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace count_of_set_bits\r\n * @brief Functions for the [count sets\r\n * bits](https://www.geeksforgeeks.org/count-set-bits-in-an-integer/)\r\n * implementation\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> count_of_set_bits {\r\n<span class=\"hljs-comment\">/**\r\n * @brief The main function implements set bit count\r\n * @param n is the number whose set bit will be counted\r\n * @returns total number of set-bits in the binary representation of number `n`\r\n */</span>\r\n<span class=\"hljs-function\">std::<span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">countSetBits</span><span class=\"hljs-params\">(\r\n    std ::<span class=\"hljs-type\">int64_t</span> n)</span> </span>{  <span class=\"hljs-comment\">// int64_t is preferred over int so that</span>\r\n                        <span class=\"hljs-comment\">// no Overflow can be there.</span>\r\n\r\n    <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// &quot;count&quot; variable is used to count number of set-bits(&#x27;1&#x27;)</span>\r\n                    <span class=\"hljs-comment\">// in binary representation of number &#x27;n&#x27;</span>\r\n    <span class=\"hljs-keyword\">while</span> (n != <span class=\"hljs-number\">0</span>) {\r\n        ++count;\r\n        n = (n &amp; (n - <span class=\"hljs-number\">1</span>));\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> count;\r\n    <span class=\"hljs-comment\">// Why this algorithm is better than the standard one?</span>\r\n    <span class=\"hljs-comment\">// Because this algorithm runs the same number of times as the number of</span>\r\n    <span class=\"hljs-comment\">// set-bits in it. Means if my number is having &quot;3&quot; set bits, then this</span>\r\n    <span class=\"hljs-comment\">// while loop will run only &quot;3&quot; times!!</span>\r\n}\r\n}  <span class=\"hljs-comment\">// namespace count_of_set_bits</span>\r\n}  <span class=\"hljs-comment\">// namespace bit_manipulation</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// n = 4 return 1</span>\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-comment\">// n = 6 return 2</span>\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">6</span>) == <span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-comment\">// n = 13 return 3</span>\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">13</span>) == <span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-comment\">// n = 9 return 2</span>\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">9</span>) == <span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-comment\">// n = 15 return 4</span>\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">15</span>) == <span class=\"hljs-number\">4</span>);\r\n    <span class=\"hljs-comment\">// n = 25 return 3</span>\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">25</span>) == <span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-comment\">// n = 97 return 3</span>\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">97</span>) == <span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-comment\">// n = 31 return 5</span>\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">31</span>) == <span class=\"hljs-number\">5</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All test cases successfully passed!&quot;</span> &lt;&lt; std::endl;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Lajat5",
      "email": "64376519+Lazeeez@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Prashant Thakur",
      "email": "prashant.th02@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}