{
  "slug": "bogo-sort",
  "name": "Bogo Sort",
  "categories": [
    "sorts"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts\\bogo_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts\\bogo_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThis is a pure Python implementation of the bogosort algorithm,\r\nalso known as permutation sort, stupid sort, slowsort, shotgun sort, or monkey sort.\r\nBogosort generates random permutations until it guesses the correct one.\r\n\r\nMore info on: https://en.wikipedia.org/wiki/Bogosort\r\n\r\nFor doctests run following command:\r\npython -m doctest -v bogo_sort.py\r\nor\r\npython3 -m doctest -v bogo_sort.py\r\nFor manual testing run:\r\npython bogo_sort.py\r\n&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> random\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bogo_sort</span>(<span class=\"hljs-params\">collection</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of the bogosort algorithm in Python\r\n    :param collection: some mutable ordered collection with heterogeneous\r\n    comparable items inside\r\n    :return: the same collection ordered by ascending\r\n    Examples:\r\n    &gt;&gt;&gt; bogo_sort([0, 5, 3, 2, 2])\r\n    [0, 2, 2, 3, 5]\r\n    &gt;&gt;&gt; bogo_sort([])\r\n    []\r\n    &gt;&gt;&gt; bogo_sort([-2, -5, -45])\r\n    [-45, -5, -2]\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_sorted</span>(<span class=\"hljs-params\">collection</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(collection) &lt; <span class=\"hljs-number\">2</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(collection) - <span class=\"hljs-number\">1</span>):\r\n            <span class=\"hljs-keyword\">if</span> collection[i] &gt; collection[i + <span class=\"hljs-number\">1</span>]:\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> is_sorted(collection):\r\n        random.shuffle(collection)\r\n    <span class=\"hljs-keyword\">return</span> collection\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n    <span class=\"hljs-built_in\">print</span>(bogo_sort(unsorted))\r\n"
    },
    "javascript": {
      "dir": "Sorts\\test\\BogoSort.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts\\test\\BogoSort.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { bogoSort, isSorted } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../BogoSort&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;isSorted&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return true for empty arrays&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">isSorted</span>([])).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return true for single-element arrays&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">isSorted</span>([<span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return true for arrays that are properly sorted&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">isSorted</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">true</span>)\r\n  })\r\n\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should return false for arrays that are not properly sorted&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">isSorted</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>])).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-literal\">false</span>)\r\n  })\r\n})\r\n\r\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;bogoSort&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should (eventually) sort the array&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">bogoSort</span>([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>])).<span class=\"hljs-title function_\">toEqual</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>])\r\n  })\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting\\bogo_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting\\bogo_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [Bogosort algorithm](https://en.wikipedia.org/wiki/Bogosort)\r\n *\r\n * @details\r\n *      In computer science, bogosort (also known as permutation sort, stupid sort, slowsort, \r\n *      shotgun sort, random sort, monkey sort, bobosort or shuffle sort) is a highly inefficient \r\n *      sorting algorithm based on the generate and test paradigm. Two versions of this algorithm \r\n *      exist: a deterministic version that enumerates all permutations until it hits a sorted one,\r\n *      and a randomized version that randomly permutes its input.Randomized version is implemented here. \r\n *\r\n * ### Algorithm\r\n * Shuffle the array untill array is sorted.\r\n *\r\n * @author [Deep Raval](https://github.com/imdeep2905)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace sorting\r\n * @brief Sorting algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> sorting {\r\n<span class=\"hljs-comment\">/**\r\n * Function to shuffle the elements of an array. (for reference)\r\n * @tparam T typename of the array\r\n * @tparam N length of array\r\n * @param arr array to shuffle\r\n * @returns new array with elements shuffled from a given array\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-type\">size_t</span> N&gt;\r\nstd::array &lt;T, N&gt; <span class=\"hljs-built_in\">shuffle</span> (std::array &lt;T, N&gt; arr) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\r\n        <span class=\"hljs-comment\">// Swaps i&#x27;th  index with random index (less than array size)</span>\r\n        std::<span class=\"hljs-built_in\">swap</span>(arr[i], arr[std::<span class=\"hljs-built_in\">rand</span>() % N]);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> arr;\r\n}\r\n<span class=\"hljs-comment\">/**\r\n * Implement randomized Bogosort algorithm and sort the elements of a given array.\r\n * @tparam T typename of the array\r\n * @tparam N length of array\r\n * @param arr array to sort\r\n * @returns new array with elements sorted from a given array\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-type\">size_t</span> N&gt;\r\nstd::array &lt;T, N&gt; <span class=\"hljs-built_in\">randomized_bogosort</span> (std::array &lt;T, N&gt; arr) {\r\n    <span class=\"hljs-comment\">// Untill array is not sorted</span>\r\n    <span class=\"hljs-keyword\">while</span> (!std::<span class=\"hljs-built_in\">is_sorted</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>())) {\r\n        std::<span class=\"hljs-built_in\">random_shuffle</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());<span class=\"hljs-comment\">// Shuffle the array</span>\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> arr;\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace sorting</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to display array on screen \r\n * @tparam T typename of the array\r\n * @tparam N length of array\r\n * @param arr array to display\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-type\">size_t</span> N&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show_array</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::array &lt;T, N&gt; &amp;arr)</span> </span>{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> x : arr) {\r\n        std::cout &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span>;\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to test above algorithm\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Test 1</span>\r\n    std::array &lt;<span class=\"hljs-type\">int</span>, 5&gt; arr1;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> &amp;x : arr1) {\r\n        x = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">100</span>;\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original Array : &quot;</span>;\r\n    <span class=\"hljs-built_in\">show_array</span>(arr1);\r\n    arr1 = sorting::<span class=\"hljs-built_in\">randomized_bogosort</span>(arr1);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted Array : &quot;</span>;\r\n    <span class=\"hljs-built_in\">show_array</span>(arr1);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr1.<span class=\"hljs-built_in\">begin</span>(), arr1.<span class=\"hljs-built_in\">end</span>()));\r\n    <span class=\"hljs-comment\">// Test 2</span>\r\n    std::array &lt;<span class=\"hljs-type\">int</span>, 5&gt; arr2;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> &amp;x : arr2) {\r\n        x = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">100</span>;\r\n    }\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original Array : &quot;</span>;\r\n    <span class=\"hljs-built_in\">show_array</span>(arr2);\r\n    arr2 = sorting::<span class=\"hljs-built_in\">randomized_bogosort</span>(arr2);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted Array : &quot;</span>;\r\n    <span class=\"hljs-built_in\">show_array</span>(arr2);\r\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(arr2.<span class=\"hljs-built_in\">begin</span>(), arr2.<span class=\"hljs-built_in\">end</span>()));\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Driver Code */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// Testing</span>\r\n    <span class=\"hljs-built_in\">test</span>();\r\n    <span class=\"hljs-comment\">// Example Usage</span>\r\n    std::array &lt;<span class=\"hljs-type\">int</span>, 5&gt; arr = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>}; <span class=\"hljs-comment\">// Defining array which we want to sort</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original Array : &quot;</span>;\r\n    <span class=\"hljs-built_in\">show_array</span>(arr);\r\n    arr = sorting::<span class=\"hljs-built_in\">randomized_bogosort</span>(arr); <span class=\"hljs-comment\">// Callling bogo sort on it</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted Array : &quot;</span>;\r\n    <span class=\"hljs-built_in\">show_array</span>(arr); <span class=\"hljs-comment\">// Printing sorted array</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\sorts\\BogoSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\sorts\\BogoSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.sorts;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\r\n * <span class=\"hljs-doctag\">@see</span> SortAlgorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BogoSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isSorted</span><span class=\"hljs-params\">(T[] array)</span> {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; array.length - <span class=\"hljs-number\">1</span>; i++) {\r\n            <span class=\"hljs-keyword\">if</span> (SortUtils.less(array[i + <span class=\"hljs-number\">1</span>], array[i])) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Randomly shuffles the array</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">nextPermutation</span><span class=\"hljs-params\">(T[] array)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> array.length;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">randomIndex</span> <span class=\"hljs-operator\">=</span> i + random.nextInt(length - i);\r\n            SortUtils.swap(array, randomIndex, i);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] array) {\r\n        <span class=\"hljs-keyword\">while</span> (!isSorted(array)) {\r\n            nextPermutation(array);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> array;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Driver Program</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-comment\">// Integer Input</span>\r\n        Integer[] integers = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\r\n\r\n        <span class=\"hljs-type\">BogoSort</span> <span class=\"hljs-variable\">bogoSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BogoSort</span>();\r\n\r\n        <span class=\"hljs-comment\">// print a sorted array</span>\r\n        SortUtils.print(bogoSort.sort(integers));\r\n\r\n        <span class=\"hljs-comment\">// String Input</span>\r\n        String[] strings = {<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>};\r\n\r\n        SortUtils.print(bogoSort.sort(strings));\r\n    }\r\n}\r\n"
    },
    "c": {
      "dir": "sorting\\bogo_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting\\bogo_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">check_sorted</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-keyword\">while</span> (--n &gt;= <span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (a[n] &lt; a[n - <span class=\"hljs-number\">1</span>])\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">shuffle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, t, r;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        t = a[i];\r\n        r = rand() % n;\r\n        a[i] = a[r];\r\n        a[r] = t;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-keyword\">while</span> (!check_sorted(a, n)) shuffle(a, n);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> numbers[<span class=\"hljs-number\">6</span>];\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter 6 numbers unsorted \\n\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">6</span>; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;numbers[i]);\r\n    }\r\n    sort(numbers, <span class=\"hljs-number\">6</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">6</span>; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, numbers[i]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n}\r\n"
    },
    "aarch64_assembly": {
      "dir": "sorters\\bogo_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters\\bogo_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\r\n<span class=\"hljs-comment\">/*  program bogosort64.s   */</span>\r\n \r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\r\n<span class=\"hljs-comment\">/*******************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly*/</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* Initialized data              */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.data</span>\r\n<span class=\"hljs-symbol\">sMessResult:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\r\n<span class=\"hljs-symbol\">szCarriageReturn:</span> <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\r\n \r\n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\r\n<span class=\"hljs-symbol\">qGraine:</span>  .quad <span class=\"hljs-number\">123456</span>\r\n<span class=\"hljs-symbol\">TableNumber:</span>       .quad   <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>\r\n                   <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span>\r\n \r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.bss</span>\r\n<span class=\"hljs-symbol\">sZoneConv:</span>          <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-comment\">/*  code section                 */</span>\r\n<span class=\"hljs-comment\">/*********************************/</span>\r\n<span class=\"hljs-symbol\">.text</span>\r\n<span class=\"hljs-symbol\">.global</span> main \r\n<span class=\"hljs-symbol\">main:</span>                                           <span class=\"hljs-comment\">// entry of program </span>\r\n \r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                      <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-symbol\">#NBELEMENTS</span>                          <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> knuthShuffle\r\n                                                <span class=\"hljs-comment\">// table  display elements</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                      <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-symbol\">#NBELEMENTS</span>                          <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> displayTable\r\n \r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                      <span class=\"hljs-comment\">// address number table</span>\r\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-symbol\">#NBELEMENTS</span>                          <span class=\"hljs-comment\">// number of élements </span>\r\n    <span class=\"hljs-keyword\">bl</span> isSorted                                 <span class=\"hljs-comment\">// control sort</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>                                   <span class=\"hljs-comment\">// sorted ?</span>\r\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">1</span>b                                      <span class=\"hljs-comment\">// no -&gt; loop</span>\r\n \r\n \r\n<span class=\"hljs-number\">100</span>:                                            <span class=\"hljs-comment\">// standard end of the program </span>\r\n    <span class=\"hljs-keyword\">mov</span> x0, <span class=\"hljs-number\">#0</span>                                  <span class=\"hljs-comment\">// return code</span>\r\n    <span class=\"hljs-keyword\">mov</span> x8, <span class=\"hljs-symbol\">#EXIT</span>                               <span class=\"hljs-comment\">// request to exit program</span>\r\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">#0</span>                                      <span class=\"hljs-comment\">// perform the system call</span>\r\n \r\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\r\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\r\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\r\n \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\r\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\r\n<span class=\"hljs-symbol\">isSorted:</span>\r\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]        <span class=\"hljs-comment\">// load A[0]</span>\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,x1                    <span class=\"hljs-comment\">// end ?</span>\r\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\r\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]       <span class=\"hljs-comment\">// load A[i]</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x4                    <span class=\"hljs-comment\">// compare A[i],A[i-1]</span>\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f                      <span class=\"hljs-comment\">// smaller -&gt; error -&gt; return</span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,x3                    <span class=\"hljs-comment\">// no -&gt; A[i-1] = A[i]</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b                         <span class=\"hljs-comment\">// and loop </span>\r\n<span class=\"hljs-number\">98</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>                    <span class=\"hljs-comment\">// error</span>\r\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\r\n<span class=\"hljs-number\">99</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#1</span>                    <span class=\"hljs-comment\">// ok -&gt; return</span>\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                          <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\r\n<span class=\"hljs-comment\">/* x1 contains elements number  */</span>\r\n<span class=\"hljs-symbol\">displayTable:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,x0                    <span class=\"hljs-comment\">// table address</span>\r\n    <span class=\"hljs-keyword\">mov</span> x4,x1                    <span class=\"hljs-comment\">// elements number</span>\r\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">#0</span>\r\n<span class=\"hljs-number\">1</span>:                               <span class=\"hljs-comment\">// loop display table</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\r\n    <span class=\"hljs-keyword\">bl</span> conversion10              <span class=\"hljs-comment\">// décimal conversion </span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv         <span class=\"hljs-comment\">// insert conversion</span>\r\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess             <span class=\"hljs-comment\">// display message</span>\r\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">#1</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x3,x4                    <span class=\"hljs-comment\">// end ?</span>\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b                       <span class=\"hljs-comment\">// no -&gt; loop</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\r\n    <span class=\"hljs-keyword\">bl</span> affichageMess\r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                          <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>           .quad sZoneConv\r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/*     shuffle game                                       */</span> \r\n<span class=\"hljs-comment\">/******************************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains boxs address           */</span>\r\n<span class=\"hljs-comment\">/* x1 contains elements number        */</span>\r\n<span class=\"hljs-symbol\">knuthShuffle:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">mov</span> x5,x0                      <span class=\"hljs-comment\">// save table address</span>\r\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>                      <span class=\"hljs-comment\">// start index</span>\r\n<span class=\"hljs-number\">1</span>:\r\n    <span class=\"hljs-keyword\">mov</span> x0,x2                      <span class=\"hljs-comment\">// generate aleas</span>\r\n    <span class=\"hljs-keyword\">bl</span> genereraleas\r\n    <span class=\"hljs-keyword\">ldr</span> x3,[x5,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]          <span class=\"hljs-comment\">// swap number on the table</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x4,[x5,x0,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\r\n    <span class=\"hljs-keyword\">str</span> x4,[x5,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\r\n    <span class=\"hljs-keyword\">str</span> x3,[x5,x0,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\r\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>                                         <span class=\"hljs-comment\">// next number</span>\r\n    <span class=\"hljs-keyword\">cmp</span> x2,x1                                         <span class=\"hljs-comment\">// end ?</span>\r\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b                                            <span class=\"hljs-comment\">// no -&gt; loop</span>\r\n \r\n<span class=\"hljs-number\">100</span>:\r\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-comment\">/***************************************************/</span>\r\n<span class=\"hljs-comment\">/*   Generation random number                  */</span>\r\n<span class=\"hljs-comment\">/***************************************************/</span>\r\n<span class=\"hljs-comment\">/* x0 contains limit  */</span>\r\n<span class=\"hljs-symbol\">genereraleas:</span>\r\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\r\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\r\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrqGraine\r\n    <span class=\"hljs-keyword\">ldr</span> x2,[x1]\r\n    <span class=\"hljs-keyword\">ldr</span> x3,qNbDep1\r\n    <span class=\"hljs-keyword\">mul</span> x2,x3,x2\r\n    <span class=\"hljs-keyword\">ldr</span> x3,qNbDep2\r\n    <span class=\"hljs-keyword\">add</span> x2,x2,x3\r\n    <span class=\"hljs-keyword\">str</span> x2,[x1]                    <span class=\"hljs-comment\">// maj de la graine pour l appel suivant </span>\r\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#0</span>\r\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">100</span>f\r\n    udiv x3,x2,x0\r\n    msub x0,x3,x0,x2               <span class=\"hljs-comment\">// résult = remainder</span>\r\n \r\n<span class=\"hljs-number\">100</span>:                               <span class=\"hljs-comment\">// end function</span>\r\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\r\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\r\n<span class=\"hljs-symbol\">qAdrqGraine:</span> .quad qGraine\r\n<span class=\"hljs-symbol\">qNbDep1:</span>     .quad <span class=\"hljs-number\">0x0019660d</span>\r\n<span class=\"hljs-symbol\">qNbDep2:</span>     .quad <span class=\"hljs-number\">0x3c6ef35f</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\r\n<span class=\"hljs-comment\">/********************************************************/</span>\r\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\r\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\r\n"
    },
    "ruby": {
      "dir": "sorting\\bogo_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting\\bogo_sort.rb",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Array</span></span>\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sorted?</span></span>\r\n    <span class=\"hljs-comment\">### goes thru array and checks if all elements are in order</span>\r\n    (<span class=\"hljs-number\">1</span>...length).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>[i - <span class=\"hljs-number\">1</span>] &gt; <span class=\"hljs-keyword\">self</span>[i]\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-literal\">true</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bogosort</span></span>\r\n    <span class=\"hljs-comment\">### randomly shuffles until sorted</span>\r\n    shuffle! <span class=\"hljs-keyword\">until</span> sorted?\r\n    <span class=\"hljs-keyword\">self</span> <span class=\"hljs-comment\"># return sorted array</span>\r\n  <span class=\"hljs-keyword\">end</span>\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-keyword\">__FILE__</span>\r\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\r\n  str = gets.chomp.split(<span class=\"hljs-string\">&#x27;&#x27;</span>)\r\n  puts str.bogosort.join(<span class=\"hljs-string\">&#x27;&#x27;</span>)\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    },
    "c-sharp": {
      "dir": "./Algorithms/Sorters/Comparison/BogoSorter.cs",
      "url": "https:\\github.com\\TheAlgorithms\\C-Sharp\\tree\\master\\Algorithms\\Sorters\\Comparison\\BogoSorter.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class that implements bogo sort algorithm.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BogoSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\r\n    {\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> Random random = <span class=\"hljs-keyword\">new</span>();\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>TODO. 2.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>TODO. 3.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">while</span> (!IsSorted(array, comparer))\r\n            {\r\n                Shuffle(array);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">IsSorted</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length - <span class=\"hljs-number\">1</span>; i++)\r\n            {\r\n                <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[i], array[i + <span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>)\r\n                {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Shuffle</span>(<span class=\"hljs-params\">T[] array</span>)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">var</span> taken = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">bool</span>[array.Length];\r\n            <span class=\"hljs-keyword\">var</span> newArray = <span class=\"hljs-keyword\">new</span> T[array.Length];\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length; i++)\r\n            {\r\n                <span class=\"hljs-built_in\">int</span> nextPos;\r\n                <span class=\"hljs-keyword\">do</span>\r\n                {\r\n                    nextPos = random.Next(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">int</span>.MaxValue) % array.Length;\r\n                }\r\n                <span class=\"hljs-keyword\">while</span> (taken[nextPos]);\r\n\r\n                taken[nextPos] = <span class=\"hljs-literal\">true</span>;\r\n                newArray[nextPos] = array[i];\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length; i++)\r\n            {\r\n                array[i] = newArray[i];\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Casey Brown",
      "email": "casey.92.brown@gmail.com",
      "commits": 1
    },
    {
      "name": "Doppon",
      "email": "zaxpkuraudo7777@gmail.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "marsonya",
      "email": "akhil.marsonya27@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "valery noname",
      "email": "valerydec17@gmail.com",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "karimElmougi",
      "email": "karim.elmougi@gmail.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "PandllCom",
      "email": "lynnheavn@126.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Sharma",
      "email": "akshay.sharma09695@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Roland Hummel",
      "email": "roland.hummel@qaware.de",
      "commits": 2
    },
    {
      "name": "Panzki",
      "email": "Panzki@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 2
    },
    {
      "name": "Deep Raval",
      "email": "deepraval2905@gmail.com",
      "commits": 2
    },
    {
      "name": "JakeBonek",
      "email": "jake.bonek@gmail.com",
      "commits": 2
    },
    {
      "name": "Naveen Arunachalam",
      "email": "naveen.t.arun@gmail.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "vzvu3k6k",
      "email": "vzvu3k6k@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}