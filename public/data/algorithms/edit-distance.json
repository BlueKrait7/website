{
  "slug": "edit-distance",
  "name": "Edit Distance",
  "categories": [
    "dynamicprogramming"
  ],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming\\edit_distance.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming\\edit_distance.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nAuthor  : Turfa Auliarachman\r\nDate    : October 12, 2016\r\n\r\nThis is a pure Python implementation of Dynamic Programming solution to the edit\r\ndistance problem.\r\n\r\nThe problem is :\r\nGiven two strings A and B. Find the minimum number of operations to string B such that\r\nA = B. The permitted operations are removal,  insertion, and substitution.\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EditDistance</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Use :\r\n    solver              = EditDistance()\r\n    editDistanceResult  = solver.solve(firstString, secondString)\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\r\n        self.__prepare__()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__prepare__</span>(<span class=\"hljs-params\">self, N=<span class=\"hljs-number\">0</span>, M=<span class=\"hljs-number\">0</span></span>):\r\n        self.dp = [[-<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, M)] <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, N)]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__solveDP</span>(<span class=\"hljs-params\">self, x, y</span>):\r\n        <span class=\"hljs-keyword\">if</span> x == -<span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> y + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">elif</span> y == -<span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">elif</span> self.dp[x][y] &gt; -<span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.dp[x][y]\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">if</span> self.A[x] == self.B[y]:\r\n                self.dp[x][y] = self.__solveDP(x - <span class=\"hljs-number\">1</span>, y - <span class=\"hljs-number\">1</span>)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                self.dp[x][y] = <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">min</span>(\r\n                    self.__solveDP(x, y - <span class=\"hljs-number\">1</span>),\r\n                    self.__solveDP(x - <span class=\"hljs-number\">1</span>, y),\r\n                    self.__solveDP(x - <span class=\"hljs-number\">1</span>, y - <span class=\"hljs-number\">1</span>),\r\n                )\r\n\r\n            <span class=\"hljs-keyword\">return</span> self.dp[x][y]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">solve</span>(<span class=\"hljs-params\">self, A, B</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(A, <span class=\"hljs-built_in\">bytes</span>):\r\n            A = A.decode(<span class=\"hljs-string\">&quot;ascii&quot;</span>)\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(B, <span class=\"hljs-built_in\">bytes</span>):\r\n            B = B.decode(<span class=\"hljs-string\">&quot;ascii&quot;</span>)\r\n\r\n        self.A = <span class=\"hljs-built_in\">str</span>(A)\r\n        self.B = <span class=\"hljs-built_in\">str</span>(B)\r\n\r\n        self.__prepare__(<span class=\"hljs-built_in\">len</span>(A), <span class=\"hljs-built_in\">len</span>(B))\r\n\r\n        <span class=\"hljs-keyword\">return</span> self.__solveDP(<span class=\"hljs-built_in\">len</span>(A) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(B) - <span class=\"hljs-number\">1</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">min_distance_bottom_up</span>(<span class=\"hljs-params\">word1: <span class=\"hljs-built_in\">str</span>, word2: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; min_distance_bottom_up(&quot;intention&quot;, &quot;execution&quot;)\r\n    5\r\n    &gt;&gt;&gt; min_distance_bottom_up(&quot;intention&quot;, &quot;&quot;)\r\n    9\r\n    &gt;&gt;&gt; min_distance_bottom_up(&quot;&quot;, &quot;&quot;)\r\n    0\r\n    &quot;&quot;&quot;</span>\r\n    m = <span class=\"hljs-built_in\">len</span>(word1)\r\n    n = <span class=\"hljs-built_in\">len</span>(word2)\r\n    dp = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m + <span class=\"hljs-number\">1</span>)]\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>):\r\n\r\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># first string is empty</span>\r\n                dp[i][j] = j\r\n            <span class=\"hljs-keyword\">elif</span> j == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># second string is empty</span>\r\n                dp[i][j] = i\r\n            <span class=\"hljs-keyword\">elif</span> (\r\n                word1[i - <span class=\"hljs-number\">1</span>] == word2[j - <span class=\"hljs-number\">1</span>]\r\n            ):  <span class=\"hljs-comment\"># last character of both substing is equal</span>\r\n                dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                insert = dp[i][j - <span class=\"hljs-number\">1</span>]\r\n                delete = dp[i - <span class=\"hljs-number\">1</span>][j]\r\n                replace = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]\r\n                dp[i][j] = <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">min</span>(insert, delete, replace)\r\n    <span class=\"hljs-keyword\">return</span> dp[m][n]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    solver = EditDistance()\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;****************** Testing Edit Distance DP Algorithm ******************&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>()\r\n\r\n    S1 = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the first string: &quot;</span>).strip()\r\n    S2 = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the second string: &quot;</span>).strip()\r\n\r\n    <span class=\"hljs-built_in\">print</span>()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The minimum Edit Distance is: %d&quot;</span> % (solver.solve(S1, S2)))\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The minimum Edit Distance is: %d&quot;</span> % (min_distance_bottom_up(S1, S2)))\r\n    <span class=\"hljs-built_in\">print</span>()\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;*************** End of Testing Edit Distance DP Algorithm ***************&quot;</span>)\r\n"
    },
    "javascript": {
      "dir": "Dynamic-Programming\\EditDistance.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming\\EditDistance.js",
      "code": "<span class=\"hljs-comment\">/*\r\nWikipedia -&gt; https://en.wikipedia.org/wiki/Edit_distance\r\n\r\nQ. -&gt; Given two strings `word1` and `word2`. You can perform these operations on any of the string to make both strings similar.\r\n    - Insert\r\n    - Remove\r\n    - Replace\r\nFind the minimum operation cost required to make both same. Each operation cost is 1.\r\n\r\nAlgorithm details -&gt;\r\ntime complexity - O(n*m)\r\nspace complexity - O(n*m)\r\n*/</span>\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">minimumEditDistance</span> = (<span class=\"hljs-params\">word1, word2</span>) =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> n = word1.<span class=\"hljs-property\">length</span>\r\n  <span class=\"hljs-keyword\">const</span> m = word2.<span class=\"hljs-property\">length</span>\r\n  <span class=\"hljs-keyword\">const</span> dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(m + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> [])\r\n\r\n  <span class=\"hljs-comment\">/*\r\n    fill dp matrix with default values -\r\n        - first row is filled considering no elements in word2.\r\n        - first column filled considering no elements in word1.\r\n    */</span>\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n + <span class=\"hljs-number\">1</span>; i++) {\r\n    dp[<span class=\"hljs-number\">0</span>][i] = i\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; m + <span class=\"hljs-number\">1</span>; i++) {\r\n    dp[i][<span class=\"hljs-number\">0</span>] = i\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/*\r\n        indexing is 1 based for dp matrix as we defined some known values at first row and first column/\r\n    */</span>\r\n\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; m + <span class=\"hljs-number\">1</span>; i++) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">1</span>; j &lt; n + <span class=\"hljs-number\">1</span>; j++) {\r\n      <span class=\"hljs-keyword\">const</span> letter1 = word1[j - <span class=\"hljs-number\">1</span>]\r\n      <span class=\"hljs-keyword\">const</span> letter2 = word2[i - <span class=\"hljs-number\">1</span>]\r\n\r\n      <span class=\"hljs-keyword\">if</span> (letter1 === letter2) {\r\n        dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        dp[i][j] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>], dp[i][j - <span class=\"hljs-number\">1</span>]) + <span class=\"hljs-number\">1</span>\r\n      }\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> dp[m][n]\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { minimumEditDistance }\r\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming\\edit_distance.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming\\edit_distance.cpp",
      "code": "<span class=\"hljs-comment\">/* Given two strings str1 &amp; str2\r\n * and below operations that can\r\n * be performed on str1. Find\r\n * minimum number of edits\r\n * (operations) required to convert\r\n * &#x27;str1&#x27; into &#x27;str2&#x27;/\r\n * a. Insert\r\n * b. Remove\r\n * c. Replace\r\n * All of the above operations are\r\n * of equal cost\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\r\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> z)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>(<span class=\"hljs-built_in\">min</span>(x, y), z); }\r\n\r\n<span class=\"hljs-comment\">/* A Naive recursive C++ program to find\r\n * minimum number of operations to convert\r\n * str1 to str2.\r\n * O(3^m)\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">editDist</span><span class=\"hljs-params\">(string str1, string str2, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-keyword\">if</span> (m == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> n;\r\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\r\n        <span class=\"hljs-keyword\">return</span> m;\r\n\r\n    <span class=\"hljs-comment\">// If last characters are same then continue</span>\r\n    <span class=\"hljs-comment\">// for the rest of them.</span>\r\n    <span class=\"hljs-keyword\">if</span> (str1[m - <span class=\"hljs-number\">1</span>] == str2[n - <span class=\"hljs-number\">1</span>])\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">editDist</span>(str1, str2, m - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-comment\">// If last not same, then 3 possibilities</span>\r\n    <span class=\"hljs-comment\">// a.Insert b.Remove c. Replace</span>\r\n    <span class=\"hljs-comment\">// Get min of three and continue for rest.</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">min</span>(<span class=\"hljs-built_in\">editDist</span>(str1, str2, m, n - <span class=\"hljs-number\">1</span>),\r\n                   <span class=\"hljs-built_in\">editDist</span>(str1, str2, m - <span class=\"hljs-number\">1</span>, n),\r\n                   <span class=\"hljs-built_in\">editDist</span>(str1, str2, m - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>));\r\n}\r\n\r\n<span class=\"hljs-comment\">/* A DP based program\r\n * O(m x n)\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">editDistDP</span><span class=\"hljs-params\">(string str1, string str2, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n    <span class=\"hljs-comment\">// Create Table for SubProblems</span>\r\n    <span class=\"hljs-type\">int</span> dp[m + <span class=\"hljs-number\">1</span>][n + <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-comment\">// Fill d[][] in bottom up manner</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= m; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= n; j++) {\r\n            <span class=\"hljs-comment\">// If str1 empty. Then add all of str2</span>\r\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>)\r\n                dp[i][j] = j;\r\n\r\n            <span class=\"hljs-comment\">// If str2 empty. Then add all of str1</span>\r\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">0</span>)\r\n                dp[i][j] = i;\r\n\r\n            <span class=\"hljs-comment\">// If character same. Recur for remaining</span>\r\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str1[i - <span class=\"hljs-number\">1</span>] == str2[j - <span class=\"hljs-number\">1</span>])\r\n                dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];\r\n\r\n            <span class=\"hljs-keyword\">else</span>\r\n                dp[i][j] = <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">min</span>(dp[i][j - <span class=\"hljs-number\">1</span>],     <span class=\"hljs-comment\">// Insert</span>\r\n                                   dp[i - <span class=\"hljs-number\">1</span>][j],     <span class=\"hljs-comment\">// Remove</span>\r\n                                   dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]  <span class=\"hljs-comment\">// Replace</span>\r\n                               );\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> dp[m][n];\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    string str1 = <span class=\"hljs-string\">&quot;sunday&quot;</span>;\r\n    string str2 = <span class=\"hljs-string\">&quot;saturday&quot;</span>;\r\n\r\n    cout &lt;&lt; <span class=\"hljs-built_in\">editDist</span>(str1, str2, str1.<span class=\"hljs-built_in\">length</span>(), str2.<span class=\"hljs-built_in\">length</span>()) &lt;&lt; endl;\r\n    cout &lt;&lt; <span class=\"hljs-built_in\">editDistDP</span>(str1, str2, str1.<span class=\"hljs-built_in\">length</span>(), str2.<span class=\"hljs-built_in\">length</span>()) &lt;&lt; endl;\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\EditDistance.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/src\\main\\java\\com\\thealgorithms\\dynamicprogramming\\EditDistance.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.thealgorithms.dynamicprogramming;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * A DynamicProgramming based solution for Edit Distance problem In Java\r\n * Description of Edit Distance with an Example:\r\n *\r\n * &lt;p&gt;\r\n * Edit distance is a way of quantifying how dissimilar two strings (e.g.,\r\n * words) are to one another, by counting the minimum number of operations\r\n * required to transform one string into the other. The distance operations are\r\n * the removal, insertion, or substitution of a character in the string.\r\n *\r\n * &lt;p&gt;\r\n *\r\n * &lt;p&gt;\r\n * The Distance between &quot;kitten&quot; and &quot;sitting&quot; is 3. A minimal edit script that\r\n * transforms the former into the latter is:\r\n *\r\n * &lt;p&gt;\r\n * kitten → sitten (substitution of &quot;s&quot; for &quot;k&quot;) sitten → sittin (substitution\r\n * of &quot;i&quot; for &quot;e&quot;) sittin → sitting (insertion of &quot;g&quot; at the end).\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> SUBHAM SANGHAI\r\n */</span>\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EditDistance</span> {\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minDistance</span><span class=\"hljs-params\">(String word1, String word2)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len1</span> <span class=\"hljs-operator\">=</span> word1.length();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len2</span> <span class=\"hljs-operator\">=</span> word2.length();\r\n        <span class=\"hljs-comment\">// len1+1, len2+1, because finally return dp[len1][len2]</span>\r\n        <span class=\"hljs-type\">int</span>[][] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[len1 + <span class=\"hljs-number\">1</span>][len2 + <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-comment\">/* If second string is empty, the only option is to\r\n    insert all characters of first string into second*/</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= len1; i++) {\r\n            dp[i][<span class=\"hljs-number\">0</span>] = i;\r\n        }\r\n        <span class=\"hljs-comment\">/* If first string is empty, the only option is to\r\n    insert all characters of second string into first*/</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt;= len2; j++) {\r\n            dp[<span class=\"hljs-number\">0</span>][j] = j;\r\n        }\r\n        <span class=\"hljs-comment\">// iterate though, and check last char</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; len1; i++) {\r\n            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c1</span> <span class=\"hljs-operator\">=</span> word1.charAt(i);\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; len2; j++) {\r\n                <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c2</span> <span class=\"hljs-operator\">=</span> word2.charAt(j);\r\n                <span class=\"hljs-comment\">// if last two chars equal</span>\r\n                <span class=\"hljs-keyword\">if</span> (c1 == c2) {\r\n                    <span class=\"hljs-comment\">// update dp value for +1 length</span>\r\n                    dp[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">1</span>] = dp[i][j];\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    <span class=\"hljs-comment\">/* if two characters are different ,\r\n          then take the minimum of the various operations(i.e insertion,removal,substitution)*/</span>\r\n                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">replace</span> <span class=\"hljs-operator\">=</span> dp[i][j] + <span class=\"hljs-number\">1</span>;\r\n                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">insert</span> <span class=\"hljs-operator\">=</span> dp[i][j + <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\r\n                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">delete</span> <span class=\"hljs-operator\">=</span> dp[i + <span class=\"hljs-number\">1</span>][j] + <span class=\"hljs-number\">1</span>;\r\n\r\n                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> replace &gt; insert ? insert : replace;\r\n                    min = delete &gt; min ? min : delete;\r\n                    dp[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">1</span>] = min;\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">/* return the final answer , after traversing through both the strings*/</span>\r\n        <span class=\"hljs-keyword\">return</span> dp[len1][len2];\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n        String s1, s2;\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the First String&quot;</span>);\r\n        s1 = input.nextLine();\r\n        System.out.println(<span class=\"hljs-string\">&quot;Enter the Second String&quot;</span>);\r\n        s2 = input.nextLine();\r\n        <span class=\"hljs-comment\">// ans stores the final Edit Distance between the two strings</span>\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> minDistance(s1, s2);\r\n        System.out.println(\r\n                <span class=\"hljs-string\">&quot;The minimum Edit Distance between \\&quot;&quot;</span> + s1 + <span class=\"hljs-string\">&quot;\\&quot; and \\&quot;&quot;</span> + s2 + <span class=\"hljs-string\">&quot;\\&quot; is &quot;</span> + ans);\r\n        input.close();\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// edit distance problem</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">editDistance</span><span class=\"hljs-params\">(String s1, String s2)</span> {\r\n        <span class=\"hljs-type\">int</span>[][] storage = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[s1.length() + <span class=\"hljs-number\">1</span>][s2.length() + <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-keyword\">return</span> editDistance(s1, s2, storage);\r\n\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">editDistance</span><span class=\"hljs-params\">(String s1, String s2, <span class=\"hljs-type\">int</span>[][] storage)</span> {\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> s1.length();\r\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> s2.length();\r\n        <span class=\"hljs-keyword\">if</span> (storage[m][n] &gt; <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> storage[m][n];\r\n\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (m == <span class=\"hljs-number\">0</span>) {\r\n            storage[m][n] = n;\r\n            <span class=\"hljs-keyword\">return</span> storage[m][n];\r\n\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\r\n            storage[m][n] = m;\r\n            <span class=\"hljs-keyword\">return</span> storage[m][n];\r\n\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (s1.charAt(<span class=\"hljs-number\">0</span>) == s2.charAt(<span class=\"hljs-number\">0</span>)) {\r\n            storage[m][n] = editDistance(s1.substring(<span class=\"hljs-number\">1</span>), s2.substring(<span class=\"hljs-number\">1</span>), storage);\r\n            <span class=\"hljs-keyword\">return</span> storage[m][n];\r\n\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">op1</span> <span class=\"hljs-operator\">=</span> editDistance(s1, s2.substring(<span class=\"hljs-number\">1</span>), storage);\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">op2</span> <span class=\"hljs-operator\">=</span> editDistance(s1.substring(<span class=\"hljs-number\">1</span>), s2, storage);\r\n            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">op3</span> <span class=\"hljs-operator\">=</span> editDistance(s1.substring(<span class=\"hljs-number\">1</span>), s2.substring(<span class=\"hljs-number\">1</span>), storage);\r\n            storage[m][n] = <span class=\"hljs-number\">1</span> + Math.min(op1, Math.min(op2, op3));\r\n            <span class=\"hljs-keyword\">return</span> storage[m][n];\r\n        }\r\n    }\r\n}\r\n"
    },
    "go": {
      "dir": "dynamic\\editdistance.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamic\\editdistance.go",
      "code": "<span class=\"hljs-comment\">// EDIT DISTANCE PROBLEM</span>\r\n<span class=\"hljs-comment\">// https://www.geeksforgeeks.org/edit-distance-dp-5/</span>\r\n<span class=\"hljs-comment\">// https://leetcode.com/problems/edit-distance/</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> dynamic\r\n\r\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/min&quot;</span>\r\n\r\n<span class=\"hljs-comment\">// EditDistanceRecursive is a naive implementation with exponential time complexity.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">EditDistanceRecursive</span><span class=\"hljs-params\">(first <span class=\"hljs-type\">string</span>, second <span class=\"hljs-type\">string</span>, pointerFirst <span class=\"hljs-type\">int</span>, pointerSecond <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\r\n\t<span class=\"hljs-keyword\">if</span> pointerFirst == <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> pointerSecond\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">if</span> pointerSecond == <span class=\"hljs-number\">0</span> {\r\n\t\t<span class=\"hljs-keyword\">return</span> pointerFirst\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// Characters match, so we recur for the remaining portions</span>\r\n\t<span class=\"hljs-keyword\">if</span> first[pointerFirst<span class=\"hljs-number\">-1</span>] == second[pointerSecond<span class=\"hljs-number\">-1</span>] {\r\n\t\t<span class=\"hljs-keyword\">return</span> EditDistanceRecursive(first, second, pointerFirst<span class=\"hljs-number\">-1</span>, pointerSecond<span class=\"hljs-number\">-1</span>)\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// We have three choices, all with cost of 1 unit</span>\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + min.Int(EditDistanceRecursive(first, second, pointerFirst, pointerSecond<span class=\"hljs-number\">-1</span>), <span class=\"hljs-comment\">// Insert</span>\r\n\t\tEditDistanceRecursive(first, second, pointerFirst<span class=\"hljs-number\">-1</span>, pointerSecond),   <span class=\"hljs-comment\">// Delete</span>\r\n\t\tEditDistanceRecursive(first, second, pointerFirst<span class=\"hljs-number\">-1</span>, pointerSecond<span class=\"hljs-number\">-1</span>)) <span class=\"hljs-comment\">// Replace</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// EditDistanceDP is an optimised implementation which builds on the ideas of the recursive implementation.</span>\r\n<span class=\"hljs-comment\">// We use dynamic programming to compute the DP table where dp[i][j] denotes the edit distance value</span>\r\n<span class=\"hljs-comment\">// of first[0..i-1] and second[0..j-1]. Time complexity is O(m * n) where m and n are lengths of the strings,</span>\r\n<span class=\"hljs-comment\">// first and second respectively.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">EditDistanceDP</span><span class=\"hljs-params\">(first <span class=\"hljs-type\">string</span>, second <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">int</span> {\r\n\r\n\tm := <span class=\"hljs-built_in\">len</span>(first)\r\n\tn := <span class=\"hljs-built_in\">len</span>(second)\r\n\r\n\t<span class=\"hljs-comment\">// Create the DP table</span>\r\n\tdp := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-type\">int</span>, m+<span class=\"hljs-number\">1</span>)\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= m; i++ {\r\n\t\tdp[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, n+<span class=\"hljs-number\">1</span>)\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= m; i++ {\r\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt;= n; j++ {\r\n\r\n\t\t\t<span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> {\r\n\t\t\t\tdp[i][j] = j\r\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>\r\n\t\t\t}\r\n\r\n\t\t\t<span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-number\">0</span> {\r\n\t\t\t\tdp[i][j] = i\r\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>\r\n\t\t\t}\r\n\r\n\t\t\t<span class=\"hljs-keyword\">if</span> first[i<span class=\"hljs-number\">-1</span>] == second[j<span class=\"hljs-number\">-1</span>] {\r\n\t\t\t\tdp[i][j] = dp[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>]\r\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>\r\n\t\t\t}\r\n\r\n\t\t\tdp[i][j] = <span class=\"hljs-number\">1</span> + min.Int(dp[i][j<span class=\"hljs-number\">-1</span>], dp[i<span class=\"hljs-number\">-1</span>][j], dp[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>])\r\n\t\t}\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> dp[m][n]\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\dynamic_programming\\edit_distance.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\dynamic_programming\\edit_distance.rs",
      "code": "<span class=\"hljs-comment\">//! Compute the edit distance between two strings</span>\r\n\r\n<span class=\"hljs-keyword\">use</span> std::cmp::min;\r\n\r\n<span class=\"hljs-comment\">/// edit_distance(str_a, str_b) returns the edit distance between the two</span>\r\n<span class=\"hljs-comment\">/// strings This edit distance is defined as being 1 point per insertion,</span>\r\n<span class=\"hljs-comment\">/// substitution, or deletion which must be made to make the strings equal.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// This function iterates over the bytes in the string, so it may not behave</span>\r\n<span class=\"hljs-comment\">/// entirely as expected for non-ASCII strings.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// # Complexity</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// - time complexity: O(nm),</span>\r\n<span class=\"hljs-comment\">/// - space complexity: O(nm),</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// where n and m are lengths of `str_a` and `str_b`</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">edit_distance</span>(str_a: &amp;<span class=\"hljs-type\">str</span>, str_b: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u32</span> {\r\n    <span class=\"hljs-comment\">// distances[i][j] = distance between a[..i] and b[..j]</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">distances</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; str_b.<span class=\"hljs-title function_ invoke__\">len</span>() + <span class=\"hljs-number\">1</span>]; str_a.<span class=\"hljs-title function_ invoke__\">len</span>() + <span class=\"hljs-number\">1</span>];\r\n    <span class=\"hljs-comment\">// Initialize cases in which one string is empty</span>\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..=str_b.<span class=\"hljs-title function_ invoke__\">len</span>() {\r\n        distances[<span class=\"hljs-number\">0</span>][j] = j <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\r\n    }\r\n    <span class=\"hljs-title function_ invoke__\">for</span> (i, item) <span class=\"hljs-keyword\">in</span> distances.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\r\n        item[<span class=\"hljs-number\">0</span>] = i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=str_a.<span class=\"hljs-title function_ invoke__\">len</span>() {\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=str_b.<span class=\"hljs-title function_ invoke__\">len</span>() {\r\n            distances[i][j] = <span class=\"hljs-title function_ invoke__\">min</span>(distances[i - <span class=\"hljs-number\">1</span>][j] + <span class=\"hljs-number\">1</span>, distances[i][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>);\r\n            <span class=\"hljs-keyword\">if</span> str_a.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()[i - <span class=\"hljs-number\">1</span>] == str_b.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()[j - <span class=\"hljs-number\">1</span>] {\r\n                distances[i][j] = <span class=\"hljs-title function_ invoke__\">min</span>(distances[i][j], distances[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]);\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                distances[i][j] = <span class=\"hljs-title function_ invoke__\">min</span>(distances[i][j], distances[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>);\r\n            }\r\n        }\r\n    }\r\n    distances[str_a.<span class=\"hljs-title function_ invoke__\">len</span>()][str_b.<span class=\"hljs-title function_ invoke__\">len</span>()]\r\n}\r\n\r\n<span class=\"hljs-comment\">/// The space efficient version of the above algorithm.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// Instead of storing the `m * n` matrix expicitly, only one row (of length `n`) is stored.</span>\r\n<span class=\"hljs-comment\">/// It keeps overwriting itself based on its previous values with the help of two scalars,</span>\r\n<span class=\"hljs-comment\">/// gradually reaching the last row. Then, the score is `matrix[n]`.</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// # Complexity</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// - time complexity: O(nm),</span>\r\n<span class=\"hljs-comment\">/// - space complexity: O(n),</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">/// where n and m are lengths of `str_a` and `str_b`</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">edit_distance_se</span>(str_a: &amp;<span class=\"hljs-type\">str</span>, str_b: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u32</span> {\r\n    <span class=\"hljs-keyword\">let</span> (str_a, str_b) = (str_a.<span class=\"hljs-title function_ invoke__\">as_bytes</span>(), str_b.<span class=\"hljs-title function_ invoke__\">as_bytes</span>());\r\n    <span class=\"hljs-keyword\">let</span> (m, n) = (str_a.<span class=\"hljs-title function_ invoke__\">len</span>(), str_b.<span class=\"hljs-title function_ invoke__\">len</span>());\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">distances</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; n + <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// the dynamic programming matrix (only 1 row stored)</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">s</span>: <span class=\"hljs-type\">u32</span>; <span class=\"hljs-comment\">// distances[i - 1][j - 1] or distances[i - 1][j]</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">c</span>: <span class=\"hljs-type\">u32</span>; <span class=\"hljs-comment\">// distances[i][j - 1] or distances[i][j]</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">char_a</span>: <span class=\"hljs-type\">u8</span>; <span class=\"hljs-comment\">// str_a[i - 1] the i-th character in str_a; only needs to be computed once per row</span>\r\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">char_b</span>: <span class=\"hljs-type\">u8</span>; <span class=\"hljs-comment\">// str_b[j - 1] the j-th character in str_b</span>\r\n\r\n    <span class=\"hljs-comment\">// 0th row</span>\r\n    <span class=\"hljs-title function_ invoke__\">for</span> (j, v) <span class=\"hljs-keyword\">in</span> distances.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>().<span class=\"hljs-title function_ invoke__\">take</span>(n + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">skip</span>(<span class=\"hljs-number\">1</span>) {\r\n        *v = j <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\r\n    }\r\n    <span class=\"hljs-comment\">// rows 1 to m</span>\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=m {\r\n        s = (i - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\r\n        c = i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\r\n        char_a = str_a[i - <span class=\"hljs-number\">1</span>];\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=n {\r\n            <span class=\"hljs-comment\">// c is distances[i][j-1] and s is distances[i-1][j-1] at the beginning of each round of iteration</span>\r\n            char_b = str_b[j - <span class=\"hljs-number\">1</span>];\r\n            c = <span class=\"hljs-title function_ invoke__\">min</span>(\r\n                s + <span class=\"hljs-keyword\">if</span> char_a == char_b { <span class=\"hljs-number\">0</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-number\">1</span> },\r\n                <span class=\"hljs-title function_ invoke__\">min</span>(c + <span class=\"hljs-number\">1</span>, distances[j] + <span class=\"hljs-number\">1</span>),\r\n            );\r\n            <span class=\"hljs-comment\">// c is updated to distances[i][j], and will thus become distances[i][j-1] for the next cell</span>\r\n            s = distances[j]; <span class=\"hljs-comment\">// here distances[j] means distances[i-1][j] becuase it has not been overwritten yet</span>\r\n                              <span class=\"hljs-comment\">// s is updated to distances[i-1][j], and will thus become distances[i-1][j-1] for the next cell</span>\r\n            distances[j] = c; <span class=\"hljs-comment\">// now distances[j] is updated to distances[i][j], and will thus become distances[i-1][j] for the next ROW</span>\r\n        }\r\n    }\r\n\r\n    distances[n]\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> tests {\r\n    <span class=\"hljs-keyword\">use</span> super::*;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">equal_strings</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Hello, world!&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Hello, world!&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_edit_difference</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Hell, world!&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#2&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#10&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Hell, world!&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#2&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#10&quot;</span>));\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">several_differences</span>() {\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;My Cat&quot;</span>, <span class=\"hljs-string\">&quot;My Case&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Goodbye, world!&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Test_Case_#3&quot;</span>, <span class=\"hljs-string\">&quot;Case #3&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;My Cat&quot;</span>, <span class=\"hljs-string\">&quot;My Case&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Goodbye, world!&quot;</span>));\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Test_Case_#3&quot;</span>, <span class=\"hljs-string\">&quot;Case #3&quot;</span>));\r\n    }\r\n}\r\n"
    },
    "ruby": {
      "dir": "dynamic_programming\\editdistance.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/dynamic_programming\\editdistance.rb",
      "code": "<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">&quot;test/unit&quot;</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">editDistDP</span><span class=\"hljs-params\">(str1, str2, m, n)</span></span> \r\n    rows, cols = m+<span class=\"hljs-number\">1</span>,n+<span class=\"hljs-number\">1</span>  \r\n\r\n    <span class=\"hljs-comment\"># Create a 2D array to store results of subproblems</span>\r\n    dp = Array.new(rows) { Array.new(cols) }\r\n\r\n    <span class=\"hljs-comment\">#using bottom up approach</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>..m + <span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span>\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>..n + <span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span>\r\n\r\n            <span class=\"hljs-comment\">#If the first string is empty, insert all the characters of the second string</span>\r\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> \r\n                dp[i][j] = j   \r\n        \r\n            <span class=\"hljs-comment\">#If the second string is empty, insert all the characters of the first string</span>\r\n            <span class=\"hljs-keyword\">elsif</span> j == <span class=\"hljs-number\">0</span> \r\n                dp[i][j]  = i \r\n            \r\n            <span class=\"hljs-comment\">#If the last character in both the strings are same, we can ignore the character and move to the next character in both the strings</span>\r\n            <span class=\"hljs-keyword\">elsif</span> str1[i-<span class=\"hljs-number\">1</span>] == str2[j-<span class=\"hljs-number\">1</span>] \r\n                dp[i][j] =  dp[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>] \r\n            \r\n            <span class=\"hljs-comment\">#If the last character of both the strings are different, find out the minimum value of the three operations(insert, delete, replace)</span>\r\n            <span class=\"hljs-keyword\">else</span>\r\n                dp[i][j] = <span class=\"hljs-number\">1</span> +[dp[i][j-<span class=\"hljs-number\">1</span>],dp[i-<span class=\"hljs-number\">1</span>][j],dp[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>]].min()\r\n                \r\n            <span class=\"hljs-keyword\">end</span>\r\n        \r\n        <span class=\"hljs-keyword\">end</span>\r\n        \r\n    <span class=\"hljs-keyword\">end</span>\r\n    \r\n    <span class=\"hljs-keyword\">return</span> dp[m][n]\r\n<span class=\"hljs-keyword\">end</span>\r\n\r\n\r\n\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Editdistancetest</span> &lt; Test::Unit::<span class=\"hljs-title\">TestCase</span></span>\r\n    \r\n    <span class=\"hljs-comment\">#Test1</span>\r\n    <span class=\"hljs-comment\">#Replace &#x27;n&#x27; with &#x27;r&#x27;</span>\r\n    <span class=\"hljs-comment\">#insert &#x27;a&#x27;</span>\r\n    <span class=\"hljs-comment\">#insert &#x27;t&#x27;</span>\r\n    <span class=\"hljs-comment\">#No of total operations : 3</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_distance1</span></span>\r\n      assert_equal <span class=\"hljs-number\">3</span>, editDistDP( <span class=\"hljs-string\">&quot;sunday&quot;</span>,<span class=\"hljs-string\">&quot;saturday&quot;</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>), <span class=\"hljs-string\">&quot;Should return 3&quot;</span> \r\n    <span class=\"hljs-keyword\">end</span>\r\n  \r\n    <span class=\"hljs-comment\">#Test2</span>\r\n    <span class=\"hljs-comment\">#Replace &#x27;a&#x27; with &#x27;u&#x27;</span>\r\n    <span class=\"hljs-comment\">#No of total operations : 1</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_distance2</span></span>\r\n      assert_equal <span class=\"hljs-number\">1</span>, editDistDP(<span class=\"hljs-string\">&quot;cat&quot;</span>,<span class=\"hljs-string\">&quot;cut&quot;</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>), <span class=\"hljs-string\">&quot;editDistDpShould return 1&quot;</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-comment\">#Test3</span>\r\n    <span class=\"hljs-comment\">#Insert &#x27;a&#x27;,&#x27;p&#x27;, &#x27;p&#x27;,&#x27;l&#x27;,&#x27;e&#x27;,&#x27;p&#x27;,&#x27;i&#x27;,&#x27;e&#x27; into string 1</span>\r\n    <span class=\"hljs-comment\">#No of total operations : 8</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_distance3</span></span>\r\n       assert_equal <span class=\"hljs-number\">8</span>, editDistDP(<span class=\"hljs-string\">&quot;&quot;</span>,<span class=\"hljs-string\">&quot;applepie&quot;</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>), <span class=\"hljs-string\">&quot;editDistDpShould return 1&quot;</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n    <span class=\"hljs-comment\">#Test4</span>\r\n    <span class=\"hljs-comment\">#Both the strings are equal, thus no operation needed</span>\r\n    <span class=\"hljs-comment\">#No of total operations : 0</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test_distance4</span></span>\r\n       assert_equal <span class=\"hljs-number\">0</span>, editDistDP(<span class=\"hljs-string\">&quot;Hello&quot;</span>,<span class=\"hljs-string\">&quot;Hello&quot;</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>), <span class=\"hljs-string\">&quot;editDistDpShould return 1&quot;</span> \r\n    <span class=\"hljs-keyword\">end</span>\r\n\r\n  <span class=\"hljs-keyword\">end</span>\r\n    \r\n"
    },
    "php": {
      "dir": "String\\EditDistance.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/String\\EditDistance.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\r\n<span class=\"hljs-comment\">/**\r\n * Edit distance (Levenshtein distance).\r\n * Compute the difference between two sequences, ie, the minimum number of changes\r\n * to get to $str2 from $str1\r\n * <span class=\"hljs-doctag\">@param</span> string $str1\r\n * <span class=\"hljs-doctag\">@param</span> string $str2\r\n * <span class=\"hljs-doctag\">@return</span> int the minimum number of changes to transform one string into another\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">editDistance</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$str1</span>, <span class=\"hljs-variable\">$str2</span></span>)\r\n</span>{\r\n    <span class=\"hljs-variable\">$lenStr1</span> = <span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$str1</span>);\r\n    <span class=\"hljs-variable\">$lenStr2</span> = <span class=\"hljs-title function_ invoke__\">strlen</span>(<span class=\"hljs-variable\">$str2</span>);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$lenStr1</span> == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$lenStr2</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$lenStr2</span> == <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$lenStr1</span>;\r\n    }\r\n\r\n    <span class=\"hljs-variable\">$distanceVectorInit</span> = [];\r\n    <span class=\"hljs-variable\">$distanceVectorFinal</span> = [];\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$lenStr1</span> + <span class=\"hljs-number\">1</span>; <span class=\"hljs-variable\">$i</span>++) {\r\n        <span class=\"hljs-variable\">$distanceVectorInit</span>[] = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-variable\">$distanceVectorFinal</span>[] = <span class=\"hljs-number\">0</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$lenStr1</span> + <span class=\"hljs-number\">1</span>; <span class=\"hljs-variable\">$i</span>++) {\r\n        <span class=\"hljs-variable\">$distanceVectorInit</span>[<span class=\"hljs-variable\">$i</span>] = <span class=\"hljs-variable\">$i</span>;\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$lenStr2</span>; <span class=\"hljs-variable\">$i</span>++) {\r\n        <span class=\"hljs-variable\">$distanceVectorFinal</span>[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-variable\">$i</span> + <span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-comment\">// use formula to fill in the rest of the row</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$j</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$j</span> &lt; <span class=\"hljs-variable\">$lenStr1</span>; <span class=\"hljs-variable\">$j</span>++) {\r\n            <span class=\"hljs-variable\">$substitutionCost</span> = <span class=\"hljs-number\">0</span>;\r\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$str1</span>[<span class=\"hljs-variable\">$j</span>] == <span class=\"hljs-variable\">$str2</span>[<span class=\"hljs-variable\">$i</span>]) {\r\n                <span class=\"hljs-variable\">$substitutionCost</span> = <span class=\"hljs-variable\">$distanceVectorInit</span>[<span class=\"hljs-variable\">$j</span>];\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                <span class=\"hljs-variable\">$substitutionCost</span> = <span class=\"hljs-variable\">$distanceVectorInit</span>[<span class=\"hljs-variable\">$j</span>] + <span class=\"hljs-number\">1</span>;\r\n            }\r\n\r\n            <span class=\"hljs-variable\">$distanceVectorFinal</span>[<span class=\"hljs-variable\">$j</span>+<span class=\"hljs-number\">1</span>] = <span class=\"hljs-title function_ invoke__\">min</span>(<span class=\"hljs-variable\">$distanceVectorInit</span>[<span class=\"hljs-variable\">$j</span>+<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">min</span>(<span class=\"hljs-variable\">$distanceVectorFinal</span>[<span class=\"hljs-variable\">$j</span>] + <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable\">$substitutionCost</span>));\r\n        }\r\n\r\n        <span class=\"hljs-variable\">$distanceVectorInit</span> = <span class=\"hljs-variable\">$distanceVectorFinal</span>;\r\n    }\r\n\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$distanceVectorFinal</span>[<span class=\"hljs-variable\">$lenStr1</span>];\r\n}"
    },
    "kotlin": {
      "dir": "src\\main\\kotlin\\dynamicProgramming\\EditDistance.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src\\main\\kotlin\\dynamicProgramming\\EditDistance.kt",
      "code": "<span class=\"hljs-keyword\">package</span> dynamicProgramming\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(x: <span class=\"hljs-type\">Int</span>, y: <span class=\"hljs-type\">Int</span>, z: <span class=\"hljs-type\">Int</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\r\n    <span class=\"hljs-keyword\">if</span> (x &lt;= y &amp;&amp; x &lt;= z) <span class=\"hljs-keyword\">return</span> x\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> (y &lt;= x &amp;&amp; y &lt;= z) y <span class=\"hljs-keyword\">else</span> z\r\n}\r\n\r\n<span class=\"hljs-comment\">/*\r\n * This is a dynamic programming implementation of edit distance.\r\n * @Params str1,str2 - strings to be compared\r\n * @Return minimum number of operations to convert one string to another\r\n * */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">editDistance</span><span class=\"hljs-params\">(str1: <span class=\"hljs-type\">String</span>, str2: <span class=\"hljs-type\">String</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\r\n    <span class=\"hljs-keyword\">val</span> dp = Array(str1.length + <span class=\"hljs-number\">1</span>) { IntArray(str2.length + <span class=\"hljs-number\">1</span>) }\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0.</span>.str1.length) {\r\n        <span class=\"hljs-keyword\">for</span> (j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0.</span>.str2.length) {\r\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>) dp[i][j] = j\r\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">0</span>) dp[i][j] = i\r\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str1[i - <span class=\"hljs-number\">1</span>]\r\n                    == str2[j - <span class=\"hljs-number\">1</span>]) dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">else</span> dp[i][j] = (<span class=\"hljs-number\">1</span>\r\n                    + min(dp[i][j - <span class=\"hljs-number\">1</span>],\r\n                    dp[i - <span class=\"hljs-number\">1</span>][j],\r\n                    dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]))\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> dp[str1.length][str2.length]\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Juan Martín Enríquez",
      "email": "juan@flydreamers.com",
      "commits": 1
    },
    {
      "name": "Abhishek",
      "email": "raabhishek2@gmail.com",
      "commits": 1
    },
    {
      "name": "Matthias Gilch",
      "email": "matthias.gilch.mg@gmail.com",
      "commits": 1
    },
    {
      "name": "Tianyi Shi",
      "email": "ShiTianyi2001@outlook.com",
      "commits": 1
    },
    {
      "name": "ApsaraGuhan",
      "email": "77098039+ApsaraGuhan@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Michele Caci",
      "email": "michele.caci@gmail.com",
      "commits": 1
    },
    {
      "name": "Vivek Nathani",
      "email": "52988856+viveknathani@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Suhail Malik",
      "email": "suhailmalik8057@gmail.com",
      "commits": 1
    },
    {
      "name": "Aitor Fidalgo Sánchez",
      "email": "64830228+aitorfi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Tejbirsingh7878",
      "email": "78433002+Tejbirsingh7878@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "CrazyMerlyn",
      "email": "crazy.d.merlyn@gmail.com",
      "commits": 1
    },
    {
      "name": "Rohit Chugh",
      "email": "rohitchugh.95@gmail.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Turfa Auliarachman",
      "email": "turfa_auliarachman@rocketmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "JarredAllen",
      "email": "jarredallen73@gmail.com",
      "commits": 2
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}