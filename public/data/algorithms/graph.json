{
  "slug": "graph",
  "name": "Graph",
  "categories": [
    "datastructures"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures\\Graph\\Graph.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures\\Graph\\Graph.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\r\n  <span class=\"hljs-title function_\">constructor</span> () {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span> = {}\r\n  }\r\n\r\n  addVertex (vertex) {\r\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[vertex] = []\r\n  }\r\n\r\n  containsVertex (vertex) {\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[vertex]) !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span>\r\n  }\r\n\r\n  addEdge (vertex1, vertex2) {\r\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">containsVertex</span>(vertex1) &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">containsVertex</span>(vertex2)) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[vertex1].<span class=\"hljs-title function_\">push</span>(vertex2)\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[vertex2].<span class=\"hljs-title function_\">push</span>(vertex1)\r\n    }\r\n  }\r\n\r\n  printGraph (output = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)) {\r\n    <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>)\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> i <span class=\"hljs-keyword\">of</span> keys) {\r\n      <span class=\"hljs-keyword\">const</span> values = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[i]\r\n      <span class=\"hljs-keyword\">let</span> vertex = <span class=\"hljs-string\">&#x27;&#x27;</span>\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> j <span class=\"hljs-keyword\">of</span> values) {\r\n        vertex += j + <span class=\"hljs-string\">&#x27; &#x27;</span>\r\n      }\r\n      <span class=\"hljs-title function_\">output</span>(i + <span class=\"hljs-string\">&#x27; -&gt; &#x27;</span> + vertex)\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Prints the Breadth first traversal of the graph from source.\r\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} source The source vertex to start BFS.\r\n   */</span>\r\n  bfs (source, output = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)) {\r\n    <span class=\"hljs-keyword\">const</span> queue = [[source, <span class=\"hljs-number\">0</span>]] <span class=\"hljs-comment\">// level of source is 0</span>\r\n    <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\r\n\r\n    <span class=\"hljs-keyword\">while</span> (queue.<span class=\"hljs-property\">length</span>) {\r\n      <span class=\"hljs-keyword\">const</span> [node, level] = queue.<span class=\"hljs-title function_\">shift</span>() <span class=\"hljs-comment\">// remove the front of the queue</span>\r\n      <span class=\"hljs-keyword\">if</span> (visited.<span class=\"hljs-title function_\">has</span>(node)) { <span class=\"hljs-comment\">// visited</span>\r\n        <span class=\"hljs-keyword\">continue</span>\r\n      }\r\n\r\n      visited.<span class=\"hljs-title function_\">add</span>(node)\r\n      <span class=\"hljs-title function_\">output</span>(<span class=\"hljs-string\">`Visited node <span class=\"hljs-subst\">${node}</span> at level <span class=\"hljs-subst\">${level}</span>.`</span>)\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> next <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[node]) {\r\n        queue.<span class=\"hljs-title function_\">push</span>([next, level + <span class=\"hljs-number\">1</span>]) <span class=\"hljs-comment\">// level 1 more than current</span>\r\n      }\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Prints the Depth first traversal of the graph from source.\r\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} source The source vertex to start DFS.\r\n   */</span>\r\n  dfs (source, visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(), output = <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)) {\r\n    <span class=\"hljs-keyword\">if</span> (visited.<span class=\"hljs-title function_\">has</span>(source)) { <span class=\"hljs-comment\">// visited</span>\r\n      <span class=\"hljs-keyword\">return</span>\r\n    }\r\n\r\n    <span class=\"hljs-title function_\">output</span>(<span class=\"hljs-string\">`Visited node <span class=\"hljs-subst\">${source}</span>`</span>)\r\n    visited.<span class=\"hljs-title function_\">add</span>(source)\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> neighbour <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">adjacencyMap</span>[source]) {\r\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">dfs</span>(neighbour, visited, output)\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">example</span> = (<span class=\"hljs-params\"></span>) =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> g = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>()\r\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">1</span>)\r\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">2</span>)\r\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">3</span>)\r\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">4</span>)\r\n  g.<span class=\"hljs-title function_\">addVertex</span>(<span class=\"hljs-number\">5</span>)\r\n  g.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\r\n  g.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>)\r\n  g.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)\r\n  g.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>)\r\n\r\n  <span class=\"hljs-comment\">// Graph</span>\r\n  <span class=\"hljs-comment\">// 1 -&gt; 2 3</span>\r\n  <span class=\"hljs-comment\">// 2 -&gt; 1 4 5</span>\r\n  <span class=\"hljs-comment\">// 3 -&gt; 1</span>\r\n  <span class=\"hljs-comment\">// 4 -&gt; 2</span>\r\n  <span class=\"hljs-comment\">// 5 -&gt; 2</span>\r\n\r\n  <span class=\"hljs-comment\">// Printing the adjacency list</span>\r\n  <span class=\"hljs-comment\">// g.printGraph()</span>\r\n\r\n  <span class=\"hljs-comment\">// Breadth first search at node 1</span>\r\n  g.<span class=\"hljs-title function_\">bfs</span>(<span class=\"hljs-number\">1</span>)\r\n\r\n  <span class=\"hljs-comment\">// Depth first search at node 1</span>\r\n  g.<span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-number\">1</span>)\r\n}\r\n\r\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Graph</span>, example }\r\n"
    },
    "c": {
      "dir": "data_structures\\graphs\\graph.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures\\graphs\\graph.c",
      "code": "<span class=\"hljs-comment\">// Graph ADT</span>\r\n<span class=\"hljs-comment\">// Adjacency Matrix Representation</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;Graph.h&quot;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">GraphRep</span>\r\n{</span>\r\n    <span class=\"hljs-type\">int</span> **edges;  <span class=\"hljs-comment\">// adjacency matrix</span>\r\n    <span class=\"hljs-type\">int</span> nV;       <span class=\"hljs-comment\">// #vertices</span>\r\n    <span class=\"hljs-type\">int</span> nE;       <span class=\"hljs-comment\">// #edges</span>\r\n} GraphRep;\r\n\r\nGraph <span class=\"hljs-title function_\">newGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> V)</span>\r\n{\r\n    assert(V &gt;= <span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-type\">int</span> i;\r\n\r\n    Graph g = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(GraphRep));\r\n    assert(g != <span class=\"hljs-literal\">NULL</span>);\r\n    g-&gt;nV = V;\r\n    g-&gt;nE = <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">// allocate memory for each row</span>\r\n    g-&gt;edges = <span class=\"hljs-built_in\">malloc</span>(V * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *));\r\n    assert(g-&gt;edges != <span class=\"hljs-literal\">NULL</span>);\r\n    <span class=\"hljs-comment\">// allocate memory for each column and initialise with 0</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; i++)\r\n    {\r\n        g-&gt;edges[i] = <span class=\"hljs-built_in\">calloc</span>(V, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n        assert(g-&gt;edges[i] != <span class=\"hljs-literal\">NULL</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> g;\r\n}\r\n\r\n<span class=\"hljs-comment\">// check if vertex is valid in a graph</span>\r\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">validV</span><span class=\"hljs-params\">(Graph g, Vertex v)</span> { <span class=\"hljs-keyword\">return</span> (g != <span class=\"hljs-literal\">NULL</span> &amp;&amp; v &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; v &lt; g-&gt;nV); }\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insertEdge</span><span class=\"hljs-params\">(Graph g, Edge e)</span>\r\n{\r\n    assert(g != <span class=\"hljs-literal\">NULL</span> &amp;&amp; validV(g, e.v) &amp;&amp; validV(g, e.w));\r\n\r\n    <span class=\"hljs-keyword\">if</span> (!g-&gt;edges[e.v][e.w])\r\n    {  <span class=\"hljs-comment\">// edge e not in graph</span>\r\n        g-&gt;edges[e.v][e.w] = <span class=\"hljs-number\">1</span>;\r\n        g-&gt;edges[e.w][e.v] = <span class=\"hljs-number\">1</span>;\r\n        g-&gt;nE++;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">removeEdge</span><span class=\"hljs-params\">(Graph g, Edge e)</span>\r\n{\r\n    assert(g != <span class=\"hljs-literal\">NULL</span> &amp;&amp; validV(g, e.v) &amp;&amp; validV(g, e.w));\r\n\r\n    <span class=\"hljs-keyword\">if</span> (g-&gt;edges[e.v][e.w])\r\n    {  <span class=\"hljs-comment\">// edge e in graph</span>\r\n        g-&gt;edges[e.v][e.w] = <span class=\"hljs-number\">0</span>;\r\n        g-&gt;edges[e.w][e.v] = <span class=\"hljs-number\">0</span>;\r\n        g-&gt;nE--;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">adjacent</span><span class=\"hljs-params\">(Graph g, Vertex v, Vertex w)</span>\r\n{\r\n    assert(g != <span class=\"hljs-literal\">NULL</span> &amp;&amp; validV(g, v) &amp;&amp; validV(g, w));\r\n\r\n    <span class=\"hljs-keyword\">return</span> (g-&gt;edges[v][w] != <span class=\"hljs-number\">0</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">showGraph</span><span class=\"hljs-params\">(Graph g)</span>\r\n{\r\n    assert(g != <span class=\"hljs-literal\">NULL</span>);\r\n    <span class=\"hljs-type\">int</span> i, j;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of vertices: %d\\n&quot;</span>, g-&gt;nV);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of edges: %d\\n&quot;</span>, g-&gt;nE);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; g-&gt;nV; i++)\r\n        <span class=\"hljs-keyword\">for</span> (j = i + <span class=\"hljs-number\">1</span>; j &lt; g-&gt;nV; j++)\r\n            <span class=\"hljs-keyword\">if</span> (g-&gt;edges[i][j])\r\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Edge %d - %d\\n&quot;</span>, i, j);\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">freeGraph</span><span class=\"hljs-params\">(Graph g)</span>\r\n{\r\n    assert(g != <span class=\"hljs-literal\">NULL</span>);\r\n\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; g-&gt;nV; i++) <span class=\"hljs-built_in\">free</span>(g-&gt;edges[i]);\r\n    <span class=\"hljs-built_in\">free</span>(g-&gt;edges);\r\n    <span class=\"hljs-built_in\">free</span>(g);\r\n}\r\n\r\n<span class=\"hljs-comment\">// By</span>\r\n<span class=\"hljs-comment\">//  .----------------.  .----------------.  .----------------.</span>\r\n<span class=\"hljs-comment\">//  .-----------------.  .----------------.  .----------------.</span>\r\n<span class=\"hljs-comment\">// | .--------------. || .--------------. || .--------------. ||</span>\r\n<span class=\"hljs-comment\">// .--------------. | | .--------------. || .--------------. | | |  _________ |</span>\r\n<span class=\"hljs-comment\">// || | _____  _____ | || |      __      | || | ____  _____  | | | |  ____  ____</span>\r\n<span class=\"hljs-comment\">// | || |     ____     | | | | |  _   _  |  | || ||_   _||_   _|| || |     /  \\</span>\r\n<span class=\"hljs-comment\">// | || ||_   \\|_   _| | | | | |_   ||   _| | || |   .&#x27;    `.   | | | | |_/ | |</span>\r\n<span class=\"hljs-comment\">// \\_|  | || |  | |    | |  | || |    / /\\ \\    | || |  |   \\ | |   | | | |   |</span>\r\n<span class=\"hljs-comment\">// |__| |   | || |  /  .--.  \\  | | | |     | |      | || |  | &#x27;    &#x27; |  | || |</span>\r\n<span class=\"hljs-comment\">// / ____ \\   | || |  | |\\ \\| |   | | | |   |  __  |   | || |  | |    | |  | |</span>\r\n<span class=\"hljs-comment\">// | |    _| |_     | || |   \\ `--&#x27; /   | || | _/ /    \\ \\_ | || | _| |_\\   |_</span>\r\n<span class=\"hljs-comment\">// | | | |  _| |  | |_  | || |  \\  `--&#x27;  /  | | | |   |_____|    | || | `.__.&#x27;</span>\r\n<span class=\"hljs-comment\">// | || ||____|  |____|| || ||_____|\\____| | | | | |____||____| | || | `.____.&#x27;</span>\r\n<span class=\"hljs-comment\">// | | | |              | || |              | || |              | || | | | | |</span>\r\n<span class=\"hljs-comment\">// | || |              | | | &#x27;--------------&#x27; || &#x27;--------------&#x27; ||</span>\r\n<span class=\"hljs-comment\">// &#x27;--------------&#x27; || &#x27;--------------&#x27; | | &#x27;--------------&#x27; || &#x27;--------------&#x27;</span>\r\n<span class=\"hljs-comment\">// |</span>\r\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\r\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;   &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\r\n\r\n<span class=\"hljs-comment\">//  Email :    z5261243@unsw.edu.au</span>\r\n<span class=\"hljs-comment\">//             hhoanhtuann@gmail.com</span>\r\n"
    },
    "go": {
      "dir": "graph\\graph.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/graph\\graph.go",
      "code": "<span class=\"hljs-comment\">// This file contains the simple structural implementation of</span>\r\n<span class=\"hljs-comment\">// directed &amp; undirected graphs used within the graph package</span>\r\n<span class=\"hljs-comment\">// Author(s): [Shivam](https://github.com/Shivam010), [Tahmeed](https://github.com/Tahmeed156)</span>\r\n\r\n<span class=\"hljs-keyword\">package</span> graph\r\n\r\n<span class=\"hljs-comment\">// Graph provides a structure to store the graph.</span>\r\n<span class=\"hljs-comment\">// It is safe to use its empty object.</span>\r\n<span class=\"hljs-keyword\">type</span> Graph <span class=\"hljs-keyword\">struct</span> {\r\n\tvertices <span class=\"hljs-type\">int</span>\r\n\tedges    <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span> <span class=\"hljs-comment\">// Stores weight of an edge</span>\r\n\tDirected <span class=\"hljs-type\">bool</span>                <span class=\"hljs-comment\">// Differentiate directed/undirected graphs</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">// Constructor functions for graphs (undirected by default)</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">New</span><span class=\"hljs-params\">(v <span class=\"hljs-type\">int</span>)</span></span> *Graph {\r\n\t<span class=\"hljs-keyword\">return</span> &amp;Graph{\r\n\t\tvertices: v,\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">// AddVertex will add a new vertex in the graph.</span>\r\n<span class=\"hljs-comment\">// If the vertex already exists it will do nothing.</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> AddVertex(v <span class=\"hljs-type\">int</span>) {\r\n\t<span class=\"hljs-keyword\">if</span> g.edges == <span class=\"hljs-literal\">nil</span> {\r\n\t\tg.edges = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>)\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// Check if vertex is present or not</span>\r\n\t<span class=\"hljs-keyword\">if</span> _, ok := g.edges[v]; !ok {\r\n\t\tg.edges[v] = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span>)\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">// AddEdge will add a new edge between the provided vertices in the graph</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> AddEdge(one, two <span class=\"hljs-type\">int</span>) {\r\n\t<span class=\"hljs-comment\">// Add an edge with 0 weight</span>\r\n\tg.AddWeightedEdge(one, two, <span class=\"hljs-number\">0</span>)\r\n}\r\n\r\n<span class=\"hljs-comment\">// AddWeightedEdge will add a new weighted edge between the provided vertices in the graph</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Graph)</span></span> AddWeightedEdge(one, two, weight <span class=\"hljs-type\">int</span>) {\r\n\t<span class=\"hljs-comment\">// Add vertices: one and two to the graph if they are not present</span>\r\n\tg.AddVertex(one)\r\n\tg.AddVertex(two)\r\n\r\n\t<span class=\"hljs-comment\">// And finally add the edges</span>\r\n\t<span class=\"hljs-comment\">// one-&gt;two and two-&gt;one for undirected graph</span>\r\n\t<span class=\"hljs-comment\">// one-&gt;two for directed graphs</span>\r\n\tg.edges[one][two] = weight\r\n\t<span class=\"hljs-keyword\">if</span> !g.Directed {\r\n\t\tg.edges[two][one] = weight\r\n\t}\r\n}\r\n"
    },
    "rust": {
      "dir": "src\\data_structures\\graph.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src\\data_structures\\graph.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::collections::{HashMap, HashSet};\r\n<span class=\"hljs-keyword\">use</span> std::fmt;\r\n\r\n<span class=\"hljs-meta\">#[derive(Debug, Clone)]</span>\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">NodeNotInGraph</span>;\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">fmt</span>::Display <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">NodeNotInGraph</span> {\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fmt</span>(&amp;<span class=\"hljs-keyword\">self</span>, f: &amp;<span class=\"hljs-keyword\">mut</span> fmt::Formatter) <span class=\"hljs-punctuation\">-&gt;</span> fmt::<span class=\"hljs-type\">Result</span> {\r\n        <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">&quot;accessing a node that is not in the graph&quot;</span>)\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">DirectedGraph</span> {\r\n    adjacency_table: HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt;,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Graph</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">DirectedGraph</span> {\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> DirectedGraph {\r\n        DirectedGraph {\r\n            adjacency_table: HashMap::<span class=\"hljs-title function_ invoke__\">new</span>(),\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table_mutable</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-keyword\">mut</span> HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt; {\r\n        &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.adjacency_table\r\n    }\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt; {\r\n        &amp;<span class=\"hljs-keyword\">self</span>.adjacency_table\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">UndirectedGraph</span> {\r\n    adjacency_table: HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt;,\r\n}\r\n\r\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Graph</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">UndirectedGraph</span> {\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> UndirectedGraph {\r\n        UndirectedGraph {\r\n            adjacency_table: HashMap::<span class=\"hljs-title function_ invoke__\">new</span>(),\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table_mutable</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-keyword\">mut</span> HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt; {\r\n        &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.adjacency_table\r\n    }\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt; {\r\n        &amp;<span class=\"hljs-keyword\">self</span>.adjacency_table\r\n    }\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, edge: (&amp;<span class=\"hljs-type\">str</span>, &amp;<span class=\"hljs-type\">str</span>, <span class=\"hljs-type\">i32</span>)) {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">add_node</span>(edge.<span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">add_node</span>(edge.<span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-keyword\">self</span>.adjacency_table\r\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(edge.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())\r\n            .<span class=\"hljs-title function_ invoke__\">and_modify</span>(|e| {\r\n                e.<span class=\"hljs-title function_ invoke__\">push</span>((edge.<span class=\"hljs-number\">1</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), edge.<span class=\"hljs-number\">2</span>));\r\n            });\r\n        <span class=\"hljs-keyword\">self</span>.adjacency_table\r\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(edge.<span class=\"hljs-number\">1</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())\r\n            .<span class=\"hljs-title function_ invoke__\">and_modify</span>(|e| {\r\n                e.<span class=\"hljs-title function_ invoke__\">push</span>((edge.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), edge.<span class=\"hljs-number\">2</span>));\r\n            });\r\n    }\r\n}\r\n\r\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Graph</span> {\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">new</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span>;\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table_mutable</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;<span class=\"hljs-keyword\">mut</span> HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt;;\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">adjacency_table</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> &amp;HashMap&lt;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;&gt;;\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_node</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, node: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>().<span class=\"hljs-title function_ invoke__\">get</span>(node) {\r\n            <span class=\"hljs-literal\">None</span> =&gt; {\r\n                <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table_mutable</span>()\r\n                    .<span class=\"hljs-title function_ invoke__\">insert</span>((*node).<span class=\"hljs-title function_ invoke__\">to_string</span>(), Vec::<span class=\"hljs-title function_ invoke__\">new</span>());\r\n                <span class=\"hljs-literal\">true</span>\r\n            }\r\n            _ =&gt; <span class=\"hljs-literal\">false</span>,\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_edge</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, edge: (&amp;<span class=\"hljs-type\">str</span>, &amp;<span class=\"hljs-type\">str</span>, <span class=\"hljs-type\">i32</span>)) {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">add_node</span>(edge.<span class=\"hljs-number\">0</span>);\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">add_node</span>(edge.<span class=\"hljs-number\">1</span>);\r\n\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table_mutable</span>()\r\n            .<span class=\"hljs-title function_ invoke__\">entry</span>(edge.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>())\r\n            .<span class=\"hljs-title function_ invoke__\">and_modify</span>(|e| {\r\n                e.<span class=\"hljs-title function_ invoke__\">push</span>((edge.<span class=\"hljs-number\">1</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), edge.<span class=\"hljs-number\">2</span>));\r\n            });\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">neighbours</span>(&amp;<span class=\"hljs-keyword\">self</span>, node: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Result</span>&lt;&amp;<span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt;, NodeNotInGraph&gt; {\r\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>().<span class=\"hljs-title function_ invoke__\">get</span>(node) {\r\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-title function_ invoke__\">Err</span>(NodeNotInGraph),\r\n            <span class=\"hljs-title function_ invoke__\">Some</span>(i) =&gt; <span class=\"hljs-title function_ invoke__\">Ok</span>(i),\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains</span>(&amp;<span class=\"hljs-keyword\">self</span>, node: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>().<span class=\"hljs-title function_ invoke__\">get</span>(node).<span class=\"hljs-title function_ invoke__\">is_some</span>()\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">nodes</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> HashSet&lt;&amp;<span class=\"hljs-type\">String</span>&gt; {\r\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>().<span class=\"hljs-title function_ invoke__\">keys</span>().<span class=\"hljs-title function_ invoke__\">collect</span>()\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">edges</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;(&amp;<span class=\"hljs-type\">String</span>, &amp;<span class=\"hljs-type\">String</span>, <span class=\"hljs-type\">i32</span>)&gt; {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">edges</span> = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        <span class=\"hljs-title function_ invoke__\">for</span> (from_node, from_node_neighbours) <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">adjacency_table</span>() {\r\n            <span class=\"hljs-title function_ invoke__\">for</span> (to_node, weight) <span class=\"hljs-keyword\">in</span> from_node_neighbours {\r\n                edges.<span class=\"hljs-title function_ invoke__\">push</span>((from_node, to_node, *weight));\r\n            }\r\n        }\r\n        edges\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> test_undirected_graph {\r\n    <span class=\"hljs-keyword\">use</span> super::Graph;\r\n    <span class=\"hljs-keyword\">use</span> super::UndirectedGraph;\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_add_edge</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = UndirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">5</span>));\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">10</span>));\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">7</span>));\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected_edges</span> = [\r\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">5</span>),\r\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), <span class=\"hljs-number\">5</span>),\r\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), <span class=\"hljs-number\">7</span>),\r\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-number\">7</span>),\r\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-number\">10</span>),\r\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">10</span>),\r\n        ];\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">edge</span> <span class=\"hljs-keyword\">in</span> expected_edges.<span class=\"hljs-title function_ invoke__\">iter</span>() {\r\n            <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">edges</span>().<span class=\"hljs-title function_ invoke__\">contains</span>(edge), <span class=\"hljs-literal\">true</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_neighbours</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = UndirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">5</span>));\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">10</span>));\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">7</span>));\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            graph.<span class=\"hljs-title function_ invoke__\">neighbours</span>(<span class=\"hljs-string\">&quot;a&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            &amp;<span class=\"hljs-built_in\">vec!</span>[(String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">5</span>), (String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-number\">7</span>)]\r\n        );\r\n    }\r\n}\r\n\r\n<span class=\"hljs-meta\">#[cfg(test)]</span>\r\n<span class=\"hljs-keyword\">mod</span> test_directed_graph {\r\n    <span class=\"hljs-keyword\">use</span> super::DirectedGraph;\r\n    <span class=\"hljs-keyword\">use</span> super::Graph;\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_add_node</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = DirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;a&quot;</span>);\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;b&quot;</span>);\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;c&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            graph.<span class=\"hljs-title function_ invoke__\">nodes</span>(),\r\n            [&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>)]\r\n                .<span class=\"hljs-title function_ invoke__\">iter</span>()\r\n                .<span class=\"hljs-title function_ invoke__\">cloned</span>()\r\n                .<span class=\"hljs-title function_ invoke__\">collect</span>()\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_add_edge</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = DirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">5</span>));\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">7</span>));\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">10</span>));\r\n\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">expected_edges</span> = [\r\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">5</span>),\r\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), <span class=\"hljs-number\">7</span>),\r\n            (&amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), &amp;String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-number\">10</span>),\r\n        ];\r\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">edge</span> <span class=\"hljs-keyword\">in</span> expected_edges.<span class=\"hljs-title function_ invoke__\">iter</span>() {\r\n            <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">edges</span>().<span class=\"hljs-title function_ invoke__\">contains</span>(edge), <span class=\"hljs-literal\">true</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_neighbours</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = DirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">5</span>));\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">10</span>));\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_edge</span>((<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">7</span>));\r\n\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(\r\n            graph.<span class=\"hljs-title function_ invoke__\">neighbours</span>(<span class=\"hljs-string\">&quot;a&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>(),\r\n            &amp;<span class=\"hljs-built_in\">vec!</span>[(String::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-number\">5</span>)]\r\n        );\r\n    }\r\n\r\n    <span class=\"hljs-meta\">#[test]</span>\r\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_contains</span>() {\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">graph</span> = DirectedGraph::<span class=\"hljs-title function_ invoke__\">new</span>();\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;a&quot;</span>);\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;b&quot;</span>);\r\n        graph.<span class=\"hljs-title function_ invoke__\">add_node</span>(<span class=\"hljs-string\">&quot;c&quot;</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">contains</span>(<span class=\"hljs-string\">&quot;a&quot;</span>), <span class=\"hljs-literal\">true</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">contains</span>(<span class=\"hljs-string\">&quot;b&quot;</span>), <span class=\"hljs-literal\">true</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">contains</span>(<span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-literal\">true</span>);\r\n        <span class=\"hljs-built_in\">assert_eq!</span>(graph.<span class=\"hljs-title function_ invoke__\">contains</span>(<span class=\"hljs-string\">&quot;d&quot;</span>), <span class=\"hljs-literal\">false</span>);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Haraman Johal",
      "email": "haraman.johal@oxfordni.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Tahmeed Tarek",
      "email": "tahmeedtarek@gmail.com",
      "commits": 1
    },
    {
      "name": "Eric Lavault",
      "email": "39483232+lvlte@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sahil",
      "email": "shlbnsl843@gmail.com",
      "commits": 1
    },
    {
      "name": "Nur69",
      "email": "60115902+Nur69@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "naor",
      "email": "naor2205@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "ImNandha",
      "email": "49323522+ImNandha@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Omkar Pathak",
      "email": "omkarpathak27@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Shivam Rathore",
      "email": "shivam.rathore010@gmail.com",
      "commits": 2
    },
    {
      "name": "ttuanho",
      "email": "hhoanhtuann@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "YATIN KATHURIA",
      "email": "47096348+Yatin-kathuria@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}