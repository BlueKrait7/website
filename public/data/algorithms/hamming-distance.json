{
  "slug": "hamming-distance",
  "name": "Hamming Distance",
  "categories": [
    "strings"
  ],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "String\\test\\HammingDistance.test.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/String\\test\\HammingDistance.test.js",
      "code": "<span class=\"hljs-keyword\">import</span> { hammingDistance } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../HammingDistance&#x27;</span>\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;should throw an error when trying to compare the strings of different length&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">compareStringsOfDifferentLength</span> = (<span class=\"hljs-params\"></span>) =&gt; {\r\n    <span class=\"hljs-title function_\">hammingDistance</span>(<span class=\"hljs-string\">&#x27;abc&#x27;</span>, <span class=\"hljs-string\">&#x27;abcd&#x27;</span>)\r\n  }\r\n\r\n  <span class=\"hljs-title function_\">expect</span>(compareStringsOfDifferentLength).<span class=\"hljs-title function_\">toThrowError</span>()\r\n})\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;should calculate difference between two strings&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">hammingDistance</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">0</span>)\r\n})\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;should calculate difference between two strings&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">hammingDistance</span>(<span class=\"hljs-string\">&#x27;abc&#x27;</span>, <span class=\"hljs-string\">&#x27;add&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n})\r\n\r\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&#x27;should calculate difference between two strings&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\r\n  <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title function_\">hammingDistance</span>(<span class=\"hljs-string\">&#x27;1011101&#x27;</span>, <span class=\"hljs-string\">&#x27;1001001&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>)\r\n})\r\n"
    },
    "c-plus-plus": {
      "dir": "bit_manipulation\\hamming_distance.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/bit_manipulation\\hamming_distance.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Returns the [Hamming\r\n * distance](https://en.wikipedia.org/wiki/Hamming_distance) between two\r\n * integers\r\n *\r\n * @details\r\n * To find hamming distance between two integers, we take their xor, which will\r\n * have a set bit iff those bits differ in the two numbers.\r\n * Hence, we return the number of such set bits.\r\n *\r\n * @author [Ravishankar Joshi](https://github.com/ravibitsgoa)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace bit_manipulation\r\n * @brief Bit Manipulation algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> bit_manipulation {\r\n<span class=\"hljs-comment\">/**\r\n * @namespace hamming_distance\r\n * @brief Functions for [Hamming\r\n * distance](https://en.wikipedia.org/wiki/Hamming_distance) implementation\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> hamming_distance {\r\n<span class=\"hljs-comment\">/**\r\n * This function returns the number of set bits in the given number.\r\n * @param value the number of which we want to count the number of set bits.\r\n * @returns the number of set bits in the given number.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">bitCount</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> value)</span> </span>{\r\n    <span class=\"hljs-type\">uint64_t</span> count = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">while</span> (value) {       <span class=\"hljs-comment\">// until all bits are zero</span>\r\n        <span class=\"hljs-keyword\">if</span> (value &amp; <span class=\"hljs-number\">1</span>) {  <span class=\"hljs-comment\">// check lower bit</span>\r\n            count++;\r\n        }\r\n        value &gt;&gt;= <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// shift bits, removing lower bit</span>\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> count;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This function returns the hamming distance between two integers.\r\n * @param a the first number\r\n * @param b the second number\r\n * @returns the number of bits differing between the two integers.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">hamming_distance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> a, <span class=\"hljs-type\">uint64_t</span> b)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">bitCount</span>(a ^ b); }\r\n\r\n<span class=\"hljs-comment\">/**\r\n * This function returns the hamming distance between two strings.\r\n * @param a the first string\r\n * @param b the second string\r\n * @returns the number of characters differing between the two strings.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">hamming_distance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> std::string&amp; a, <span class=\"hljs-type\">const</span> std::string&amp; b)</span> </span>{\r\n    <span class=\"hljs-built_in\">assert</span>(a.<span class=\"hljs-built_in\">size</span>() == b.<span class=\"hljs-built_in\">size</span>());\r\n    <span class=\"hljs-type\">size_t</span> n = a.<span class=\"hljs-built_in\">size</span>();\r\n    <span class=\"hljs-type\">uint64_t</span> count = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n        count += (b[i] != a[i]);\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> count;\r\n}\r\n}  <span class=\"hljs-comment\">// namespace hamming_distance</span>\r\n}  <span class=\"hljs-comment\">// namespace bit_manipulation</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Function to the test hamming distance.\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">3</span>);\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;1101&quot;</span>,\r\n                                                                <span class=\"hljs-string\">&quot;1111&quot;</span>) == <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;1111&quot;</span>,\r\n                                                                <span class=\"hljs-string\">&quot;1111&quot;</span>) == <span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;0000&quot;</span>,\r\n                                                                <span class=\"hljs-string\">&quot;1111&quot;</span>) == <span class=\"hljs-number\">4</span>);\r\n\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;alpha&quot;</span>,\r\n                                                                <span class=\"hljs-string\">&quot;alphb&quot;</span>) == <span class=\"hljs-number\">1</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;abcd&quot;</span>,\r\n                                                                <span class=\"hljs-string\">&quot;abcd&quot;</span>) == <span class=\"hljs-number\">0</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;dcba&quot;</span>,\r\n                                                                <span class=\"hljs-string\">&quot;abcd&quot;</span>) == <span class=\"hljs-number\">4</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();           <span class=\"hljs-comment\">// execute the tests</span>\r\n    <span class=\"hljs-type\">uint64_t</span> a = <span class=\"hljs-number\">11</span>;  <span class=\"hljs-comment\">// 1011 in binary</span>\r\n    <span class=\"hljs-type\">uint64_t</span> b = <span class=\"hljs-number\">2</span>;   <span class=\"hljs-comment\">// 0010 in binary</span>\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hamming distance between &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; and &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; is &quot;</span>\r\n              &lt;&lt; bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(a, b)\r\n              &lt;&lt; std::endl;\r\n}\r\n"
    },
    "dart": {
      "dir": "maths\\hamming_distance.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths\\hamming_distance.dart",
      "code": "<span class=\"hljs-comment\">// The Hamming distance between two strings of equal length is</span>\r\n<span class=\"hljs-comment\">// the number of positions at which the corresponding symbols are different.</span>\r\n<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Hamming_distance</span>\r\n\r\n<span class=\"hljs-built_in\">int</span> hamming_distance(<span class=\"hljs-built_in\">String</span> stringA, <span class=\"hljs-built_in\">String</span> stringB) {\r\n  <span class=\"hljs-comment\">//Calculates Hamming Distance</span>\r\n  <span class=\"hljs-built_in\">int</span> distance;\r\n\r\n  <span class=\"hljs-comment\">//strings must be of equal length</span>\r\n  <span class=\"hljs-keyword\">if</span> (stringA.length != stringB.length) {\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;String lengths must be same!&#x27;</span>);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\r\n  } <span class=\"hljs-keyword\">else</span> {\r\n    distance = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; stringA.length; i++) {\r\n      <span class=\"hljs-keyword\">if</span> (stringA[i] != stringB[i]) {\r\n        distance += <span class=\"hljs-number\">1</span>;\r\n      }\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> distance;\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-built_in\">String</span> stringA;\r\n  <span class=\"hljs-built_in\">String</span> stringB;\r\n  <span class=\"hljs-built_in\">int</span> dist;\r\n\r\n  stringA = <span class=\"hljs-string\">&#x27;karolin&#x27;</span>;\r\n  stringB = <span class=\"hljs-string\">&#x27;kathrin&#x27;</span>;\r\n  dist = hamming_distance(stringA, stringB);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Hamming Distance between <span class=\"hljs-subst\">$stringA</span> and <span class=\"hljs-subst\">$stringB</span> is <span class=\"hljs-subst\">$dist</span>&#x27;</span>);\r\n\r\n  stringA = <span class=\"hljs-string\">&#x27;1011101&#x27;</span>;\r\n  stringB = <span class=\"hljs-string\">&#x27;1001001&#x27;</span>;\r\n  dist = hamming_distance(stringA, stringB);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Hamming Distance between <span class=\"hljs-subst\">$stringA</span> and <span class=\"hljs-subst\">$stringB</span> is <span class=\"hljs-subst\">$dist</span>&#x27;</span>);\r\n}\r\n"
    },
    "r": {
      "dir": "Mathematics\\HammingDistance.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Mathematics\\HammingDistance.R",
      "code": "<span class=\"hljs-comment\"># Hamming distance</span>\r\nlibrary<span class=\"hljs-punctuation\">(</span>roxygen2<span class=\"hljs-punctuation\">)</span>\r\nlibrary<span class=\"hljs-punctuation\">(</span>docstring<span class=\"hljs-punctuation\">)</span>\r\n\r\n\r\nhamming_distance <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>input1<span class=\"hljs-punctuation\">,</span> input2<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\r\n  <span class=\"hljs-comment\">#&#x27; Find the hamming distance between two strings</span>\r\n  <span class=\"hljs-comment\">#&#x27; </span>\r\n  <span class=\"hljs-comment\">#&#x27; <span class=\"hljs-doctag\">@description</span> Finds the hamming distance between two strings</span>\r\n  <span class=\"hljs-comment\">#&#x27; <span class=\"hljs-doctag\">@param <span class=\"hljs-variable\">input1</span></span> String</span>\r\n  <span class=\"hljs-comment\">#&#x27; <span class=\"hljs-doctag\">@param <span class=\"hljs-variable\">input2</span></span> String</span>\r\n  <span class=\"hljs-comment\">#&#x27; <span class=\"hljs-doctag\">@usage</span> hamming_distance(input1, input2)</span>\r\n  <span class=\"hljs-comment\">#&#x27; <span class=\"hljs-doctag\">@details</span> In information theory, the Hamming distance between two strings of equal length is the number of positions at which the corresponding symbols are different.</span>\r\n  <span class=\"hljs-comment\">#&#x27; In other words, it measures the minimum number of substitutions required to change one string into the other, or the minimum number of errors that could have transformed one string into the other. </span>\r\n  <span class=\"hljs-comment\">#&#x27; In a more general context, the Hamming distance is one of several string metrics for measuring the edit distance between two sequences. It is named after the American mathematician Richard Hamming.</span>\r\n  <span class=\"hljs-comment\">#&#x27; <span class=\"hljs-doctag\">@references</span> https://en.wikipedia.org/wiki/Hamming_distance </span>\r\n  \r\n  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>input1<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">!=</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>input2<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> stop<span class=\"hljs-punctuation\">(</span><span class=\"hljs-string\">&quot;String lengths must be the same&quot;</span><span class=\"hljs-punctuation\">)</span>\r\n  \r\n  <span class=\"hljs-built_in\">sum</span><span class=\"hljs-punctuation\">(</span>input1 <span class=\"hljs-operator\">!=</span> input2<span class=\"hljs-punctuation\">)</span>\r\n<span class=\"hljs-punctuation\">}</span>\r\n\r\n\r\nx1 <span class=\"hljs-operator\">=</span> strsplit<span class=\"hljs-punctuation\">(</span><span class=\"hljs-string\">&quot;karolin&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">[[</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">]</span>\r\ny1 <span class=\"hljs-operator\">=</span> strsplit<span class=\"hljs-punctuation\">(</span><span class=\"hljs-string\">&quot;kathrin&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">[[</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">]</span>\r\nprint<span class=\"hljs-punctuation\">(</span>hamming_distance<span class=\"hljs-punctuation\">(</span>x1<span class=\"hljs-punctuation\">,</span> y1<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">3</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># returns TRUE</span>\r\n\r\nx2 <span class=\"hljs-operator\">=</span> strsplit<span class=\"hljs-punctuation\">(</span><span class=\"hljs-string\">&quot;0000&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">[[</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">]</span>\r\ny2 <span class=\"hljs-operator\">=</span> strsplit<span class=\"hljs-punctuation\">(</span><span class=\"hljs-string\">&quot;1111&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">[[</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">]</span>\r\nprint<span class=\"hljs-punctuation\">(</span>hamming_distance<span class=\"hljs-punctuation\">(</span>x2<span class=\"hljs-punctuation\">,</span> y2<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-comment\"># returns TRUE</span>\r\n"
    },
    "julia": {
      "dir": "src\\strings\\hamming_distance.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src\\strings\\hamming_distance.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    function hamming_distance(s1::String, s2::String)\r\n\r\nIn information theory, the Hamming distance between two strings of equal length is the number of positions at which the corresponding symbols are different. \r\nIn other words, it measures the minimum number of substitutions required to change one string into the other, or the minimum number of errors that could have transformed one string into the other. \r\nIn a more general context, the Hamming distance is one of several string metrics for measuring the edit distance between two sequences. It is named after the American mathematician Richard Hamming.\r\n\r\nReference (https://en.wikipedia.org/wiki/Hamming_distance)\r\n\r\n# Arguments:\r\n- `s1`: First string to compare\r\n- `s2`: Second string to compare\r\n\r\n# Examples/Tests \r\n```julia\r\njulia&gt; hamming_distance(&quot;karolin&quot;, &quot;kathrin&quot;)\r\n3\r\n\r\njulia&gt; hamming_distance(&quot;0000&quot;, &quot;1111&quot;)\r\n4\r\n\r\njulia&gt; hamming_distance(&quot;ABCDEFG&quot;, &quot;AZCDWGM&quot;)\r\n4\r\n```\r\n\r\n# Contributors:\r\n- [Sedat Aybars Nazlica](https://github.com/saybarsnazlica)\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">function</span> hamming_distance(s1::<span class=\"hljs-built_in\">String</span>, s2::<span class=\"hljs-built_in\">String</span>)\r\n    <span class=\"hljs-meta\">@assert</span> length(s1) == length(s2) <span class=\"hljs-string\">&quot;String lengths must be the same&quot;</span>\r\n\r\n    distance = <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:length(s1)\r\n        <span class=\"hljs-keyword\">if</span> s1[i] != s2[i]\r\n            distance += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">return</span> distance\r\n<span class=\"hljs-keyword\">end</span>\r\n"
    }
  },
  "contributors": [
    {
      "name": "cozek",
      "email": "kaushikamardas@gmail.com",
      "commits": 1
    },
    {
      "name": "Shivam Verma",
      "email": "50954641+sarcastic-verma@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Ravishankar Joshi",
      "email": "21024229+ravibitsgoa@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sedat Aybars Nazlica",
      "email": "saybarsnazlica@gmail.com",
      "commits": 2
    },
    {
      "name": "AbhinavXT",
      "email": "abhinavpathaka17@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}